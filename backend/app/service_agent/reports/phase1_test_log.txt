2025-10-05 14:39:41,715 - __main__ - INFO - ================================================================================
2025-10-05 14:39:41,715 - __main__ - INFO - Phase 1 Test Runner 초기화 중...
2025-10-05 14:39:41,715 - __main__ - INFO - ================================================================================
2025-10-05 14:39:41,715 - __main__ - INFO - ✓ LLM Context 초기화 완료
2025-10-05 14:39:41,715 - app.service_agent.llm_manager.prompt_manager - DEBUG - PromptManager initialized with directory: C:\kdy\Projects\holmesnyangz\beta_v001\backend\app\service_agent\llm_manager\prompts
2025-10-05 14:39:41,715 - httpx - DEBUG - load_ssl_context verify=True cert=None trust_env=True http2=False
2025-10-05 14:39:41,717 - httpx - DEBUG - load_verify_locations cafile='C:\\kdy\\Projects\\holmesnyangz\\beta_v001\\venv\\Lib\\site-packages\\certifi\\cacert.pem'
2025-10-05 14:39:41,925 - app.service_agent.llm_manager.llm_service - DEBUG - Created new sync OpenAI client
2025-10-05 14:39:41,925 - httpx - DEBUG - load_ssl_context verify=True cert=None trust_env=True http2=False
2025-10-05 14:39:41,925 - httpx - DEBUG - load_verify_locations cafile='C:\\kdy\\Projects\\holmesnyangz\\beta_v001\\venv\\Lib\\site-packages\\certifi\\cacert.pem'
2025-10-05 14:39:42,134 - app.service_agent.llm_manager.llm_service - DEBUG - Created new async OpenAI client
2025-10-05 14:39:42,134 - __main__ - INFO - ✓ Planning Agent 초기화 완료
2025-10-05 14:39:42,134 - app.service_agent.llm_manager.prompt_manager - DEBUG - PromptManager initialized with directory: C:\kdy\Projects\holmesnyangz\beta_v001\backend\app\service_agent\llm_manager\prompts
2025-10-05 14:39:42,134 - __main__ - INFO - ✓ Query Decomposer 초기화 완료
2025-10-05 14:39:42,134 - __main__ - INFO - 시스템 초기화 완료

2025-10-05 14:39:42,134 - __main__ - INFO - 

================================================================================
2025-10-05 14:39:42,134 - __main__ - INFO - Phase 1 테스트 시작
2025-10-05 14:39:42,134 - __main__ - INFO - ================================================================================

2025-10-05 14:39:42,134 - __main__ - INFO - 테스트 데이터 로드: C:\kdy\Projects\holmesnyangz\beta_v001\backend\app\service_agent\reports\tests\test_queries_phase1.json
2025-10-05 14:39:42,135 - __main__ - INFO - 총 40개 질문 로드 완료

2025-10-05 14:39:42,135 - __main__ - INFO - 
================================================================================
2025-10-05 14:39:42,135 - __main__ - INFO - PART 1: 단일 질문 테스트 (20개)
2025-10-05 14:39:42,135 - __main__ - INFO - ================================================================================
2025-10-05 14:39:42,135 - __main__ - INFO - 
================================================================================
2025-10-05 14:39:42,135 - __main__ - INFO - [1] 단일 질문 테스트: S001
2025-10-05 14:39:42,135 - __main__ - INFO - 질문: 전세금 5% 인상 제한이 언제까지인가요?
2025-10-05 14:39:42,135 - __main__ - INFO - ================================================================================
2025-10-05 14:39:42,135 - __main__ - INFO - 
[Step 1] Intent 분석...
2025-10-05 14:39:42,135 - app.service_agent.cognitive_agents.planning_agent - INFO - Analyzing intent for query: 전세금 5% 인상 제한이 언제까지인가요?...
2025-10-05 14:39:42,135 - app.service_agent.llm_manager.prompt_manager - DEBUG - Loaded prompt template: intent_analysis from C:\kdy\Projects\holmesnyangz\beta_v001\backend\app\service_agent\llm_manager\prompts\cognitive\intent_analysis.txt
2025-10-05 14:39:42,432 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-3cc2cfb6-b5e6-4680-9586-626acf30d747', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 의도 분석 전문가입니다.\n사용자의 질문을 정확히 이해하고, 어떤 종류의 도움이 필요한지 분류해야 합니다.\n\n## 중요: 복합 질문 처리\n복합적인 질문(여러 의도가 섞인 질문)의 경우, 가장 핵심적인 의도를 파악하되,\nsub_intents 필드에 부가적인 의도들도 함께 기록해주세요.\n\n## 분류 카테고리 설명:\n\n1. **LEGAL_CONSULT (법률상담)**\n   - 설명: 부동산 관련 법률, 권리, 의무에 대한 질문\n   - 예시:\n     * 단순: "전세금 5% 인상이 가능한가요?", "임대차계약 갱신 거부할 수 있나요?"\n     * 복합: "전세금 인상 가능한지 확인하고 법적 근거도 알려주세요"\n   - 키워드: 법, 전세, 임대, 보증금, 계약, 권리, 의무, 갱신, 임차인, 임대인, 법률, 규정, 조항\n   - 필요한 처리: 법률 데이터베이스 검색, 관련 법조항 찾기\n\n2. **MARKET_INQUIRY (시세조회)**\n   - 설명: 부동산 시장 가격, 시세, 거래 동향에 대한 질문\n   - 예시:\n     * 단순: "강남구 아파트 전세 시세 알려주세요", "서초동 매매가 얼마나 올랐나요?"\n     * 복합: "강남구 시세 확인하고 대출 가능 금액도 계산해줘"\n   - 키워드: 시세, 가격, 매매가, 전세가, 월세, 시장, 동향, 평균, 지역명, 상승률, 하락률\n   - 필요한 처리: 부동산 시세 데이터 조회, 지역별 가격 분석\n\n3. **LOAN_CONSULT (대출상담)**\n   - 설명: 주택담보대출, 전세자금대출 등 금융 관련 질문\n   - 예시:\n     * 단순: "전세자금대출 한도가 얼마인가요?", "LTV가 뭔가요?"\n     * 복합: "대출 한도 확인하고 금리 비교도 해주세요"\n   - 키워드: 대출, 금리, 한도, 조건, 상환, LTV, DTI, DSR, 담보, 금융, 은행\n   - 필요한 처리: 대출 상품 조회, 금리 정보 검색, 한도 계산\n\n4. **CONTRACT_CREATION (계약서작성)**\n   - 설명: 새로운 계약서나 문서를 작성해달라는 요청\n   - 예시:\n     * 단순: "임대차계약서 작성해주세요", "전세계약서 초안 만들어주세요"\n     * 복합: "계약서 작성하고 주의사항도 검토해주세요"\n   - 키워드: 작성, 만들, 생성, 초안, 계약서, 문서, 양식\n   - 필요한 처리: 문서 생성 에이전트 호출, 템플릿 기반 작성\n\n5. **CONTRACT_REVIEW (계약서검토)**\n   - 설명: 기존 계약서나 문서를 검토해달라는 요청\n   - 예시:\n     * 단순: "이 계약서 검토해주세요", "특약사항 문제없나요?"\n     * 복합: "계약서 검토하고 수정사항도 제안해주세요"\n   - 키워드: 검토, 확인, 점검, 리뷰, 분석해, 살펴봐, 체크\n   - 필요한 처리: 문서 분석, 위험 요소 식별, 개선사항 제안\n\n6. **COMPREHENSIVE (종합분석)**\n   - 설명: 여러 측면을 종합적으로 분석해달라는 요청\n   - 예시:\n     * 단순: "이 물건 전체적으로 분석해주세요"\n     * 복합: "시세, 법률, 대출 모두 검토해서 종합 의견 주세요"\n   - 키워드: 종합, 전체, 모든, 전반적, 종합적, 평가, 분석\n   - 필요한 처리: 다중 데이터 소스 통합 분석\n\n7. **RISK_ANALYSIS (리스크분석)**\n   - 설명: 위험 요소나 주의사항에 대한 질문\n   - 예시:\n     * 단순: "이 계약 위험한가요?", "주의할 점 알려주세요"\n     * 복합: "리스크 분석하고 대안도 제시해주세요"\n   - 키워드: 위험, 리스크, 주의, 문제점, 조심, 걱정, 우려\n   - 필요한 처리: 위험 요소 분석, 주의사항 추출\n\n8. **UNCLEAR (불분명)**\n   - 설명: 의도를 명확히 파악하기 어려운 질문\n   - 예시: "이거 좀 봐주세요", "어떻게 해야 할까요?", "도와주세요"\n   - 처리: 추가 질문으로 의도 명확화 필요\n\n9. **IRRELEVANT (무관)**\n   - 설명: 부동산과 전혀 관련 없는 질문\n   - 예시: "날씨 어때?", "저녁 뭐 먹지?", "주식 추천해줘"\n   - 처리: 부동산 관련 질문을 유도\n\n## 복합 질문 예시와 분석:\n\n### 예시 1: "강남구 아파트 시세 알려주고 전세자금대출 가능한지도 확인해줘"\n- 주 의도: MARKET_INQUIRY (시세 조회가 먼저 필요)\n- 부가 의도: LOAN_CONSULT (대출 확인)\n- 분해: ["강남구 아파트 시세 조회", "전세자금대출 가능 여부 확인"]\n\n### 예시 2: "이 계약서 검토해서 위험한 부분 있는지 알려주고 수정 제안도 해줘"\n- 주 의도: CONTRACT_REVIEW (계약서 검토)\n- 부가 의도: RISK_ANALYSIS (위험 분석)\n- 분해: ["계약서 전체 검토", "위험 요소 식별", "수정사항 제안"]\n\n### 예시 3: "서초동 전세가 확인하고 법적으로 문제없는지도 봐줘"\n- 주 의도: MARKET_INQUIRY (시세 확인)\n- 부가 의도: LEGAL_CONSULT (법적 검토)\n- 분해: ["서초동 전세가 조회", "법적 이슈 검토"]\n\n## 응답 형식 (JSON 형식으로 응답):\n\n{\n    "intent": "LEGAL_CONSULT",\n    "confidence": 0.9,\n    "keywords": ["전세금", "인상", "제한"],\n    "sub_intents": [],\n    "is_compound": false,\n    "decomposed_tasks": [],\n    "entities": {\n        "location": "강남구",\n        "price": "5억",\n        "contract_type": "전세",\n        "date": "2024년",\n        "area": "84㎡",\n        "action_verbs": ["확인", "검토"]\n    },\n    "reasoning": "전세금 인상에 대한 법률 질문이므로 LEGAL_CONSULT로 분류"\n}\n\n응답 규칙:\n- intent: 위 9개 카테고리 중 하나 (대문자_언더스코어 형식)\n- confidence: 0.0~1.0 (0.8 이상이면 매우 확실, 0.5 미만이면 불확실)\n- keywords: 추출된 주요 키워드 목록\n- sub_intents: 복합 질문일 경우 부가적인 의도들\n- is_compound: 복합 질문 여부 (true/false)\n- decomposed_tasks: 복합 질문을 분해한 개별 작업들\n- entities: 추출된 엔티티 정보\n- reasoning: 분류한 이유와 근거 (상세하게)\n\n## 판단 가이드:\n- 여러 의도가 섞여있다면, 가장 주된 의도를 intent에, 나머지를 sub_intents에 기록\n- "그리고", "또한", "함께", "같이" 등의 연결어가 있으면 복합 질문일 가능성 높음\n- 법률 관련 키워드가 있으면 LEGAL_CONSULT 우선\n- 가격/시세 언급이 명확하면 MARKET_INQUIRY\n- 계약서라는 단어와 함께 "작성/만들기"가 있으면 CONTRACT_CREATION\n- 계약서라는 단어와 함께 "검토/확인"이 있으면 CONTRACT_REVIEW\n- 불확실하면 confidence를 낮게 설정하고 UNCLEAR 선택\n- 복합 질문은 is_compound를 true로 설정하고 개별 작업으로 분해\n\n분석할 질문: 전세금 5% 인상 제한이 언제까지인가요?'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 14:39:42,432 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 14:39:42,435 - httpcore.connection - DEBUG - connect_tcp.started host='api.openai.com' port=443 local_address=None timeout=5.0 socket_options=None
2025-10-05 14:39:42,449 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x000001DF2F4A1700>
2025-10-05 14:39:42,449 - httpcore.connection - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x000001DF2F0226D0> server_hostname='api.openai.com' timeout=5.0
2025-10-05 14:39:42,458 - httpcore.connection - DEBUG - start_tls.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x000001DF2F4A0FB0>
2025-10-05 14:39:42,458 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 14:39:42,458 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 14:39:42,460 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 14:39:42,460 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 14:39:42,460 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 14:39:44,769 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 05:39:44 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'2081'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'2099'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9950'), (b'x-ratelimit-remaining-tokens', b'198315'), (b'x-ratelimit-reset-requests', b'7m7.609s'), (b'x-ratelimit-reset-tokens', b'505ms'), (b'x-request-id', b'req_0d6035dc834e4f69b84085cead6143f7'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Set-Cookie', b'__cf_bm=5YUug5HzFQDsDXW.3SYmNY7bJhD0VJlILEZl1GCRZY0-1759642784-1.0.1.1-HNbYGy50mjDfA9ak39VY8al9Vu3bz9FXpglz7jZpTIXmwnatsXpdbqEqYY.o4tEOFStPee4AvypGBwUgOeAAW4Jxg7hCp6hwtO7mCY8ZZKE; path=/; expires=Sun, 05-Oct-25 06:09:44 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Set-Cookie', b'_cfuvid=L1teVi6_VetzT7IXnxBa0bHMwS2hEaH7dD64AvhyzmI-1759642784707-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989a947e3826e9fb-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 14:39:44,770 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 14:39:44,771 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 14:39:44,772 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 14:39:44,772 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 14:39:44,772 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 14:39:44,773 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers([('date', 'Sun, 05 Oct 2025 05:39:44 GMT'), ('content-type', 'application/json'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('access-control-expose-headers', 'X-Request-ID'), ('openai-organization', 'playdata-7nkoem'), ('openai-processing-ms', '2081'), ('openai-project', 'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), ('openai-version', '2020-10-01'), ('x-envoy-upstream-service-time', '2099'), ('x-ratelimit-limit-requests', '10000'), ('x-ratelimit-limit-tokens', '200000'), ('x-ratelimit-remaining-requests', '9950'), ('x-ratelimit-remaining-tokens', '198315'), ('x-ratelimit-reset-requests', '7m7.609s'), ('x-ratelimit-reset-tokens', '505ms'), ('x-request-id', 'req_0d6035dc834e4f69b84085cead6143f7'), ('x-openai-proxy-wasm', 'v0.1'), ('cf-cache-status', 'DYNAMIC'), ('set-cookie', '__cf_bm=5YUug5HzFQDsDXW.3SYmNY7bJhD0VJlILEZl1GCRZY0-1759642784-1.0.1.1-HNbYGy50mjDfA9ak39VY8al9Vu3bz9FXpglz7jZpTIXmwnatsXpdbqEqYY.o4tEOFStPee4AvypGBwUgOeAAW4Jxg7hCp6hwtO7mCY8ZZKE; path=/; expires=Sun, 05-Oct-25 06:09:44 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('strict-transport-security', 'max-age=31536000; includeSubDomains; preload'), ('x-content-type-options', 'nosniff'), ('set-cookie', '_cfuvid=L1teVi6_VetzT7IXnxBa0bHMwS2hEaH7dD64AvhyzmI-1759642784707-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('server', 'cloudflare'), ('cf-ray', '989a947e3826e9fb-ICN'), ('content-encoding', 'gzip'), ('alt-svc', 'h3=":443"; ma=86400')])
2025-10-05 14:39:44,773 - openai._base_client - DEBUG - request_id: req_0d6035dc834e4f69b84085cead6143f7
2025-10-05 14:39:44,782 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: intent_analysis | Model: gpt-4o-mini-2024-07-18 | Tokens: 2049 (prompt: 1925, completion: 124)
2025-10-05 14:39:44,782 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM Intent Analysis Result: {'intent': 'LEGAL_CONSULT', 'confidence': 0.9, 'keywords': ['전세금', '인상', '제한'], 'sub_intents': [], 'is_compound': False, 'decomposed_tasks': [], 'entities': {'price_increase': '5%', 'contract_type': '전세', 'action_verbs': ['확인']}, 'reasoning': '전세금 인상 제한에 대한 법률 질문이므로 LEGAL_CONSULT로 분류'}
2025-10-05 14:39:44,782 - app.service_agent.llm_manager.prompt_manager - DEBUG - Loaded prompt template: agent_selection from C:\kdy\Projects\holmesnyangz\beta_v001\backend\app\service_agent\llm_manager\prompts\cognitive\agent_selection.txt
2025-10-05 14:39:44,783 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-ca7505e2-0db5-4114-9c25-303bd4e70021', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 Agent 선택 전문가입니다.\n사용자의 요청에 가장 적합한 Agent/Team을 선택하는 것이 목표입니다.\n\n## 현재 상황\n\n**사용자 질문:** 전세금 5% 인상 제한이 언제까지인가요?\n**분석된 의도:** 법률상담\n**추출된 키워드:** [\'전세금\', \'인상\', \'제한\']\n\n## 사용 가능한 Agent/Team 정보\n\n{\'search_team\': {\'name\': \'search_team\', \'capabilities\': \'법률 검색, 부동산 시세 조회, 대출 상품 검색\', \'tools\': [\'legal_search\', \'market_data\', \'loan_data\'], \'use_cases\': [\'법률 상담\', \'시세 조회\', \'대출 정보\']}, \'analysis_team\': {\'name\': \'analysis_team\', \'capabilities\': \'데이터 분석, 리스크 평가, 인사이트 생성, 추천\', \'tools\': [\'data_analyzer\', \'risk_evaluator\'], \'use_cases\': [\'시장 분석\', \'리스크 평가\', \'투자 분석\']}, \'document_team\': {\'name\': \'document_team\', \'capabilities\': \'계약서 작성, 문서 생성, 문서 검토\', \'tools\': [\'document_generator\', \'contract_reviewer\'], \'use_cases\': [\'계약서 작성\', \'문서 검토\']}}\n\n## Agent 역할 및 상세 가이드\n\n### 1. search_team (검색 팀)\n- **주요 기능**: 정보 검색 및 데이터 수집\n- **전문 분야**:\n  * 법률 정보 검색 (전세법, 임대차보호법, 부동산 관련 법규)\n  * 부동산 시세 조회 (매매가, 전세가, 월세, 실거래가)\n  * 대출 상품 정보 검색 (금리, 한도, 조건)\n  * 지역 정보 및 인프라 조회\n- **도구**: legal_search, market_data, loan_data\n- **적합한 작업**: 정보 조회, 데이터 수집, 법률 확인, 시세 파악\n- **예시**:\n  * "전세금 5% 인상 가능한가요?"\n  * "강남구 아파트 전세 시세"\n  * "전세자금대출 한도 얼마?"\n\n### 2. analysis_team (분석 팀)\n- **주요 기능**: 데이터 분석 및 평가\n- **전문 분야**:\n  * 시장 동향 분석 (상승률, 하락률, 추세)\n  * 리스크 평가 (계약, 투자 위험도)\n  * 투자 수익률 계산 (ROI, 월세 수익률)\n  * 대출 한도 및 조건 분석 (LTV, DTI, DSR)\n  * 비교 분석 (지역별, 상품별)\n- **도구**: data_analyzer, risk_evaluator, calculator\n- **적합한 작업**: 데이터 분석, 리스크 평가, 계산, 비교, 예측\n- **의존성**: 보통 search_team의 데이터가 필요\n- **예시**:\n  * "이 지역 투자 가치 분석해줘"\n  * "계약 리스크 평가해줘"\n  * "대출 가능 금액 계산해줘"\n\n### 3. document_team (문서 팀)\n- **주요 기능**: 문서 생성 및 관리\n- **전문 분야**:\n  * 계약서 작성 (임대차, 매매, 전세)\n  * 문서 템플릿 관리\n  * 특약사항 생성\n  * 계약서 수정안 작성\n  * 법률 문서 검토\n- **도구**: document_generator, contract_template, contract_reviewer\n- **적합한 작업**: 문서 작성, 계약서 생성, 문서 수정, 검토\n- **예시**:\n  * "임대차계약서 작성해줘"\n  * "특약사항 추가해줘"\n  * "계약서 수정안 만들어줘"\n\n## Agent 선택 전략\n\n### 1단계: 작업 유형 식별\n```\n정보 필요 → search_team\n분석/계산 필요 → analysis_team\n문서 작성 필요 → document_team\n```\n\n### 2단계: 의존성 분석\n```\n독립적 작업 → 단일 팀\n순차적 의존 → 여러 팀 (순서 중요)\n병렬 가능 → 여러 팀 (순서 무관)\n```\n\n### 3단계: 최적화\n```\n중복 제거 → 가장 적합한 팀만 선택\n효율성 → 병렬 처리 가능한 경우 표시\n```\n\n## 의도별 Agent 매핑 가이드\n\n| 의도 (Intent) | 추천 Agent 조합 | 이유 |\n|--------------|-----------------|------|\n| LEGAL_CONSULT | ["search_team"] | 법률 정보 검색 전문 |\n| MARKET_INQUIRY | ["search_team"] | 시세 데이터 조회 |\n| LOAN_CONSULT | ["search_team", "analysis_team"] | 대출 정보 조회 후 분석 |\n| CONTRACT_CREATION | ["document_team"] | 문서 생성 전문 |\n| CONTRACT_REVIEW | ["search_team", "analysis_team"] | 법률 검토 및 리스크 분석 |\n| COMPREHENSIVE | ["search_team", "analysis_team"] | 종합 정보 수집 및 분석 |\n| RISK_ANALYSIS | ["analysis_team"] | 리스크 평가 전문 |\n| UNCLEAR | ["search_team", "analysis_team"] | 포괄적 대응 |\n\n## 복합 질문 처리 예시\n\n### 예시 1: 순차적 처리\n질문: "강남구 시세 확인하고 투자 가치 분석해줘"\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "먼저 search_team이 시세 데이터를 수집하고, 그 결과를 analysis_team이 분석하여 투자 가치 평가"\n}\n```\n\n### 예시 2: 병렬 처리 가능\n질문: "법률 정보와 시세 정보 모두 알려줘"\n```json\n{\n    "selected_agents": ["search_team"],\n    "reasoning": "search_team이 법률과 시세 정보를 병렬로 조회 가능. 두 작업이 독립적이므로 동시 처리"\n}\n```\n\n### 예시 3: 3단계 파이프라인\n질문: "시세 조회하고 분석한 후 계약서 작성해줘"\n```json\n{\n    "selected_agents": ["search_team", "analysis_team", "document_team"],\n    "reasoning": "search_team이 데이터 수집 → analysis_team이 분석 → document_team이 분석 결과 기반 계약서 작성"\n}\n```\n\n## 응답 형식 (JSON)\n\n{\n    "selected_agents": ["선택된 agent/team 목록"],\n    "reasoning": "선택 이유를 구체적으로 설명. 각 Agent의 역할과 처리 순서 포함",\n    "coordination": "single/sequential/parallel/pipeline",\n    "dependencies": {"agent2": ["agent1"]},\n    "estimated_time": 30,\n    "confidence": 0.9\n}\n\n## 선택 가이드라인\n\n1. **최소 Agent 원칙**: 가능한 적은 수의 Agent로 처리\n2. **전문성 우선**: 해당 작업에 가장 전문적인 Agent 선택\n3. **효율성 고려**: 병렬 처리 가능한 경우 명시\n4. **의존성 관리**: 데이터 흐름을 고려한 순서 지정\n5. **폴백 전략**: 불확실한 경우 ["search_team", "analysis_team"] 조합\n\n## 주의사항\n\n- selected_agents는 반드시 배열 형태\n- Agent 이름은 정확히: "search_team", "analysis_team", "document_team"\n- 최소 1개, 최대 3개 선택\n- 순서는 실행 우선순위 (앞에 있을수록 먼저 실행)\n- reasoning은 상세하고 논리적으로 작성\n- coordination 필드로 실행 방식 명시\n- 복합 질문의 경우 의존성 관계 명확히 표시'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 14:39:44,783 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 14:39:44,783 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 14:39:44,784 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 14:39:44,784 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 14:39:44,784 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 14:39:44,784 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 14:39:47,107 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 05:39:47 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'2081'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'2119'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9949'), (b'x-ratelimit-remaining-tokens', b'198433'), (b'x-ratelimit-reset-requests', b'7m13.903s'), (b'x-ratelimit-reset-tokens', b'470ms'), (b'x-request-id', b'req_0046b7d1169e4e3eb383dbc190530405'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989a948ccf97e9fb-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 14:39:47,108 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 14:39:47,108 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 14:39:47,109 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 14:39:47,109 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 14:39:47,109 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 14:39:47,109 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 05:39:47 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '2081', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '2119', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9949', 'x-ratelimit-remaining-tokens': '198433', 'x-ratelimit-reset-requests': '7m13.903s', 'x-ratelimit-reset-tokens': '470ms', 'x-request-id': 'req_0046b7d1169e4e3eb383dbc190530405', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989a948ccf97e9fb-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 14:39:47,109 - openai._base_client - DEBUG - request_id: req_0046b7d1169e4e3eb383dbc190530405
2025-10-05 14:39:47,109 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: agent_selection | Model: gpt-4o-mini-2024-07-18 | Tokens: 1806 (prompt: 1705, completion: 101)
2025-10-05 14:39:47,109 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM agent selection reasoning: 사용자의 질문은 전세금 인상 제한에 대한 법률 정보를 요구하고 있으며, search_team은 법률 정보 검색에 전문화되어 있습니다. 따라서 search_team이 전세금 인상 제한에 대한 정확한 법률 정보를 제공할 수 있습니다.
2025-10-05 14:39:47,109 - app.service_agent.cognitive_agents.planning_agent - INFO - ✅ Primary LLM selected agents: ['search_team']
2025-10-05 14:39:47,109 - __main__ - INFO -   의도: 법률상담
2025-10-05 14:39:47,109 - __main__ - INFO -   신뢰도: 0.90
2025-10-05 14:39:47,109 - __main__ - INFO -   추천 Agent: ['search_team']
2025-10-05 14:39:47,110 - __main__ - INFO - 
[Step 2] Query Decomposition...
2025-10-05 14:39:47,110 - app.service_agent.cognitive_agents.query_decomposer - INFO - Decomposing query: 전세금 5% 인상 제한이 언제까지인가요?...
2025-10-05 14:39:47,110 - app.service_agent.cognitive_agents.query_decomposer - INFO - Query is simple, no decomposition needed
2025-10-05 14:39:47,110 - __main__ - INFO -   복합 질문: False
2025-10-05 14:39:47,110 - __main__ - INFO -   작업 수: 1
2025-10-05 14:39:47,110 - __main__ - INFO -   실행 모드: sequential
2025-10-05 14:39:47,110 - __main__ - INFO - 
[Step 3] Execution Plan 생성...
2025-10-05 14:39:47,110 - app.service_agent.cognitive_agents.planning_agent - INFO - Creating execution plan for intent: 법률상담
2025-10-05 14:39:47,110 - app.service_agent.cognitive_agents.planning_agent - WARNING - AgentRegistry is empty, using default teams
2025-10-05 14:39:47,110 - app.service_agent.cognitive_agents.planning_agent - DEBUG - Suggested agents: ['search_team']
2025-10-05 14:39:47,110 - app.service_agent.cognitive_agents.planning_agent - DEBUG - Available agents: ['search_team', 'analysis_team', 'document_team']
2025-10-05 14:39:47,110 - app.service_agent.cognitive_agents.planning_agent - INFO - Selected agents/teams for execution: ['search_team']
2025-10-05 14:39:47,110 - __main__ - INFO -   전략: sequential
2025-10-05 14:39:47,110 - __main__ - INFO -   단계 수: 1
2025-10-05 14:39:47,110 - __main__ - INFO - 
✓ 테스트 성공 (소요시간: 4.98초)
2025-10-05 14:39:47,110 - __main__ - INFO - 
================================================================================
2025-10-05 14:39:47,110 - __main__ - INFO - [2] 단일 질문 테스트: S002
2025-10-05 14:39:47,110 - __main__ - INFO - 질문: 강남구 아파트 전세 시세 알려주세요
2025-10-05 14:39:47,110 - __main__ - INFO - ================================================================================
2025-10-05 14:39:47,110 - __main__ - INFO - 
[Step 1] Intent 분석...
2025-10-05 14:39:47,110 - app.service_agent.cognitive_agents.planning_agent - INFO - Analyzing intent for query: 강남구 아파트 전세 시세 알려주세요...
2025-10-05 14:39:47,110 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-8c6aab51-a35f-4c02-ad4f-f31671331a32', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 의도 분석 전문가입니다.\n사용자의 질문을 정확히 이해하고, 어떤 종류의 도움이 필요한지 분류해야 합니다.\n\n## 중요: 복합 질문 처리\n복합적인 질문(여러 의도가 섞인 질문)의 경우, 가장 핵심적인 의도를 파악하되,\nsub_intents 필드에 부가적인 의도들도 함께 기록해주세요.\n\n## 분류 카테고리 설명:\n\n1. **LEGAL_CONSULT (법률상담)**\n   - 설명: 부동산 관련 법률, 권리, 의무에 대한 질문\n   - 예시:\n     * 단순: "전세금 5% 인상이 가능한가요?", "임대차계약 갱신 거부할 수 있나요?"\n     * 복합: "전세금 인상 가능한지 확인하고 법적 근거도 알려주세요"\n   - 키워드: 법, 전세, 임대, 보증금, 계약, 권리, 의무, 갱신, 임차인, 임대인, 법률, 규정, 조항\n   - 필요한 처리: 법률 데이터베이스 검색, 관련 법조항 찾기\n\n2. **MARKET_INQUIRY (시세조회)**\n   - 설명: 부동산 시장 가격, 시세, 거래 동향에 대한 질문\n   - 예시:\n     * 단순: "강남구 아파트 전세 시세 알려주세요", "서초동 매매가 얼마나 올랐나요?"\n     * 복합: "강남구 시세 확인하고 대출 가능 금액도 계산해줘"\n   - 키워드: 시세, 가격, 매매가, 전세가, 월세, 시장, 동향, 평균, 지역명, 상승률, 하락률\n   - 필요한 처리: 부동산 시세 데이터 조회, 지역별 가격 분석\n\n3. **LOAN_CONSULT (대출상담)**\n   - 설명: 주택담보대출, 전세자금대출 등 금융 관련 질문\n   - 예시:\n     * 단순: "전세자금대출 한도가 얼마인가요?", "LTV가 뭔가요?"\n     * 복합: "대출 한도 확인하고 금리 비교도 해주세요"\n   - 키워드: 대출, 금리, 한도, 조건, 상환, LTV, DTI, DSR, 담보, 금융, 은행\n   - 필요한 처리: 대출 상품 조회, 금리 정보 검색, 한도 계산\n\n4. **CONTRACT_CREATION (계약서작성)**\n   - 설명: 새로운 계약서나 문서를 작성해달라는 요청\n   - 예시:\n     * 단순: "임대차계약서 작성해주세요", "전세계약서 초안 만들어주세요"\n     * 복합: "계약서 작성하고 주의사항도 검토해주세요"\n   - 키워드: 작성, 만들, 생성, 초안, 계약서, 문서, 양식\n   - 필요한 처리: 문서 생성 에이전트 호출, 템플릿 기반 작성\n\n5. **CONTRACT_REVIEW (계약서검토)**\n   - 설명: 기존 계약서나 문서를 검토해달라는 요청\n   - 예시:\n     * 단순: "이 계약서 검토해주세요", "특약사항 문제없나요?"\n     * 복합: "계약서 검토하고 수정사항도 제안해주세요"\n   - 키워드: 검토, 확인, 점검, 리뷰, 분석해, 살펴봐, 체크\n   - 필요한 처리: 문서 분석, 위험 요소 식별, 개선사항 제안\n\n6. **COMPREHENSIVE (종합분석)**\n   - 설명: 여러 측면을 종합적으로 분석해달라는 요청\n   - 예시:\n     * 단순: "이 물건 전체적으로 분석해주세요"\n     * 복합: "시세, 법률, 대출 모두 검토해서 종합 의견 주세요"\n   - 키워드: 종합, 전체, 모든, 전반적, 종합적, 평가, 분석\n   - 필요한 처리: 다중 데이터 소스 통합 분석\n\n7. **RISK_ANALYSIS (리스크분석)**\n   - 설명: 위험 요소나 주의사항에 대한 질문\n   - 예시:\n     * 단순: "이 계약 위험한가요?", "주의할 점 알려주세요"\n     * 복합: "리스크 분석하고 대안도 제시해주세요"\n   - 키워드: 위험, 리스크, 주의, 문제점, 조심, 걱정, 우려\n   - 필요한 처리: 위험 요소 분석, 주의사항 추출\n\n8. **UNCLEAR (불분명)**\n   - 설명: 의도를 명확히 파악하기 어려운 질문\n   - 예시: "이거 좀 봐주세요", "어떻게 해야 할까요?", "도와주세요"\n   - 처리: 추가 질문으로 의도 명확화 필요\n\n9. **IRRELEVANT (무관)**\n   - 설명: 부동산과 전혀 관련 없는 질문\n   - 예시: "날씨 어때?", "저녁 뭐 먹지?", "주식 추천해줘"\n   - 처리: 부동산 관련 질문을 유도\n\n## 복합 질문 예시와 분석:\n\n### 예시 1: "강남구 아파트 시세 알려주고 전세자금대출 가능한지도 확인해줘"\n- 주 의도: MARKET_INQUIRY (시세 조회가 먼저 필요)\n- 부가 의도: LOAN_CONSULT (대출 확인)\n- 분해: ["강남구 아파트 시세 조회", "전세자금대출 가능 여부 확인"]\n\n### 예시 2: "이 계약서 검토해서 위험한 부분 있는지 알려주고 수정 제안도 해줘"\n- 주 의도: CONTRACT_REVIEW (계약서 검토)\n- 부가 의도: RISK_ANALYSIS (위험 분석)\n- 분해: ["계약서 전체 검토", "위험 요소 식별", "수정사항 제안"]\n\n### 예시 3: "서초동 전세가 확인하고 법적으로 문제없는지도 봐줘"\n- 주 의도: MARKET_INQUIRY (시세 확인)\n- 부가 의도: LEGAL_CONSULT (법적 검토)\n- 분해: ["서초동 전세가 조회", "법적 이슈 검토"]\n\n## 응답 형식 (JSON 형식으로 응답):\n\n{\n    "intent": "LEGAL_CONSULT",\n    "confidence": 0.9,\n    "keywords": ["전세금", "인상", "제한"],\n    "sub_intents": [],\n    "is_compound": false,\n    "decomposed_tasks": [],\n    "entities": {\n        "location": "강남구",\n        "price": "5억",\n        "contract_type": "전세",\n        "date": "2024년",\n        "area": "84㎡",\n        "action_verbs": ["확인", "검토"]\n    },\n    "reasoning": "전세금 인상에 대한 법률 질문이므로 LEGAL_CONSULT로 분류"\n}\n\n응답 규칙:\n- intent: 위 9개 카테고리 중 하나 (대문자_언더스코어 형식)\n- confidence: 0.0~1.0 (0.8 이상이면 매우 확실, 0.5 미만이면 불확실)\n- keywords: 추출된 주요 키워드 목록\n- sub_intents: 복합 질문일 경우 부가적인 의도들\n- is_compound: 복합 질문 여부 (true/false)\n- decomposed_tasks: 복합 질문을 분해한 개별 작업들\n- entities: 추출된 엔티티 정보\n- reasoning: 분류한 이유와 근거 (상세하게)\n\n## 판단 가이드:\n- 여러 의도가 섞여있다면, 가장 주된 의도를 intent에, 나머지를 sub_intents에 기록\n- "그리고", "또한", "함께", "같이" 등의 연결어가 있으면 복합 질문일 가능성 높음\n- 법률 관련 키워드가 있으면 LEGAL_CONSULT 우선\n- 가격/시세 언급이 명확하면 MARKET_INQUIRY\n- 계약서라는 단어와 함께 "작성/만들기"가 있으면 CONTRACT_CREATION\n- 계약서라는 단어와 함께 "검토/확인"이 있으면 CONTRACT_REVIEW\n- 불확실하면 confidence를 낮게 설정하고 UNCLEAR 선택\n- 복합 질문은 is_compound를 true로 설정하고 개별 작업으로 분해\n\n분석할 질문: 강남구 아파트 전세 시세 알려주세요'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 14:39:47,111 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 14:39:47,111 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 14:39:47,112 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 14:39:47,112 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 14:39:47,112 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 14:39:47,112 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 14:39:49,240 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 05:39:49 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'1905'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'1924'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9949'), (b'x-ratelimit-remaining-tokens', b'198315'), (b'x-ratelimit-reset-requests', b'7m20.229s'), (b'x-ratelimit-reset-tokens', b'505ms'), (b'x-request-id', b'req_46f015698c0d4af8b1b80e8f7ab3f853'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989a949b4f77e9fb-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 14:39:49,241 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 14:39:49,241 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 14:39:49,241 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 14:39:49,241 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 14:39:49,241 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 14:39:49,241 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 05:39:49 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '1905', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '1924', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9949', 'x-ratelimit-remaining-tokens': '198315', 'x-ratelimit-reset-requests': '7m20.229s', 'x-ratelimit-reset-tokens': '505ms', 'x-request-id': 'req_46f015698c0d4af8b1b80e8f7ab3f853', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989a949b4f77e9fb-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 14:39:49,241 - openai._base_client - DEBUG - request_id: req_46f015698c0d4af8b1b80e8f7ab3f853
2025-10-05 14:39:49,242 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: intent_analysis | Model: gpt-4o-mini-2024-07-18 | Tokens: 2044 (prompt: 1921, completion: 123)
2025-10-05 14:39:49,242 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM Intent Analysis Result: {'intent': 'MARKET_INQUIRY', 'confidence': 0.95, 'keywords': ['강남구', '아파트', '전세', '시세'], 'sub_intents': [], 'is_compound': False, 'decomposed_tasks': [], 'entities': {'location': '강남구', 'property_type': '아파트', 'contract_type': '전세'}, 'reasoning': '전세 시세에 대한 질문이므로 MARKET_INQUIRY로 분류'}
2025-10-05 14:39:49,242 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-716c3c7e-fee4-45f8-bd83-fd66113e4deb', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 Agent 선택 전문가입니다.\n사용자의 요청에 가장 적합한 Agent/Team을 선택하는 것이 목표입니다.\n\n## 현재 상황\n\n**사용자 질문:** 강남구 아파트 전세 시세 알려주세요\n**분석된 의도:** 시세조회\n**추출된 키워드:** [\'강남구\', \'아파트\', \'전세\', \'시세\']\n\n## 사용 가능한 Agent/Team 정보\n\n{\'search_team\': {\'name\': \'search_team\', \'capabilities\': \'법률 검색, 부동산 시세 조회, 대출 상품 검색\', \'tools\': [\'legal_search\', \'market_data\', \'loan_data\'], \'use_cases\': [\'법률 상담\', \'시세 조회\', \'대출 정보\']}, \'analysis_team\': {\'name\': \'analysis_team\', \'capabilities\': \'데이터 분석, 리스크 평가, 인사이트 생성, 추천\', \'tools\': [\'data_analyzer\', \'risk_evaluator\'], \'use_cases\': [\'시장 분석\', \'리스크 평가\', \'투자 분석\']}, \'document_team\': {\'name\': \'document_team\', \'capabilities\': \'계약서 작성, 문서 생성, 문서 검토\', \'tools\': [\'document_generator\', \'contract_reviewer\'], \'use_cases\': [\'계약서 작성\', \'문서 검토\']}}\n\n## Agent 역할 및 상세 가이드\n\n### 1. search_team (검색 팀)\n- **주요 기능**: 정보 검색 및 데이터 수집\n- **전문 분야**:\n  * 법률 정보 검색 (전세법, 임대차보호법, 부동산 관련 법규)\n  * 부동산 시세 조회 (매매가, 전세가, 월세, 실거래가)\n  * 대출 상품 정보 검색 (금리, 한도, 조건)\n  * 지역 정보 및 인프라 조회\n- **도구**: legal_search, market_data, loan_data\n- **적합한 작업**: 정보 조회, 데이터 수집, 법률 확인, 시세 파악\n- **예시**:\n  * "전세금 5% 인상 가능한가요?"\n  * "강남구 아파트 전세 시세"\n  * "전세자금대출 한도 얼마?"\n\n### 2. analysis_team (분석 팀)\n- **주요 기능**: 데이터 분석 및 평가\n- **전문 분야**:\n  * 시장 동향 분석 (상승률, 하락률, 추세)\n  * 리스크 평가 (계약, 투자 위험도)\n  * 투자 수익률 계산 (ROI, 월세 수익률)\n  * 대출 한도 및 조건 분석 (LTV, DTI, DSR)\n  * 비교 분석 (지역별, 상품별)\n- **도구**: data_analyzer, risk_evaluator, calculator\n- **적합한 작업**: 데이터 분석, 리스크 평가, 계산, 비교, 예측\n- **의존성**: 보통 search_team의 데이터가 필요\n- **예시**:\n  * "이 지역 투자 가치 분석해줘"\n  * "계약 리스크 평가해줘"\n  * "대출 가능 금액 계산해줘"\n\n### 3. document_team (문서 팀)\n- **주요 기능**: 문서 생성 및 관리\n- **전문 분야**:\n  * 계약서 작성 (임대차, 매매, 전세)\n  * 문서 템플릿 관리\n  * 특약사항 생성\n  * 계약서 수정안 작성\n  * 법률 문서 검토\n- **도구**: document_generator, contract_template, contract_reviewer\n- **적합한 작업**: 문서 작성, 계약서 생성, 문서 수정, 검토\n- **예시**:\n  * "임대차계약서 작성해줘"\n  * "특약사항 추가해줘"\n  * "계약서 수정안 만들어줘"\n\n## Agent 선택 전략\n\n### 1단계: 작업 유형 식별\n```\n정보 필요 → search_team\n분석/계산 필요 → analysis_team\n문서 작성 필요 → document_team\n```\n\n### 2단계: 의존성 분석\n```\n독립적 작업 → 단일 팀\n순차적 의존 → 여러 팀 (순서 중요)\n병렬 가능 → 여러 팀 (순서 무관)\n```\n\n### 3단계: 최적화\n```\n중복 제거 → 가장 적합한 팀만 선택\n효율성 → 병렬 처리 가능한 경우 표시\n```\n\n## 의도별 Agent 매핑 가이드\n\n| 의도 (Intent) | 추천 Agent 조합 | 이유 |\n|--------------|-----------------|------|\n| LEGAL_CONSULT | ["search_team"] | 법률 정보 검색 전문 |\n| MARKET_INQUIRY | ["search_team"] | 시세 데이터 조회 |\n| LOAN_CONSULT | ["search_team", "analysis_team"] | 대출 정보 조회 후 분석 |\n| CONTRACT_CREATION | ["document_team"] | 문서 생성 전문 |\n| CONTRACT_REVIEW | ["search_team", "analysis_team"] | 법률 검토 및 리스크 분석 |\n| COMPREHENSIVE | ["search_team", "analysis_team"] | 종합 정보 수집 및 분석 |\n| RISK_ANALYSIS | ["analysis_team"] | 리스크 평가 전문 |\n| UNCLEAR | ["search_team", "analysis_team"] | 포괄적 대응 |\n\n## 복합 질문 처리 예시\n\n### 예시 1: 순차적 처리\n질문: "강남구 시세 확인하고 투자 가치 분석해줘"\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "먼저 search_team이 시세 데이터를 수집하고, 그 결과를 analysis_team이 분석하여 투자 가치 평가"\n}\n```\n\n### 예시 2: 병렬 처리 가능\n질문: "법률 정보와 시세 정보 모두 알려줘"\n```json\n{\n    "selected_agents": ["search_team"],\n    "reasoning": "search_team이 법률과 시세 정보를 병렬로 조회 가능. 두 작업이 독립적이므로 동시 처리"\n}\n```\n\n### 예시 3: 3단계 파이프라인\n질문: "시세 조회하고 분석한 후 계약서 작성해줘"\n```json\n{\n    "selected_agents": ["search_team", "analysis_team", "document_team"],\n    "reasoning": "search_team이 데이터 수집 → analysis_team이 분석 → document_team이 분석 결과 기반 계약서 작성"\n}\n```\n\n## 응답 형식 (JSON)\n\n{\n    "selected_agents": ["선택된 agent/team 목록"],\n    "reasoning": "선택 이유를 구체적으로 설명. 각 Agent의 역할과 처리 순서 포함",\n    "coordination": "single/sequential/parallel/pipeline",\n    "dependencies": {"agent2": ["agent1"]},\n    "estimated_time": 30,\n    "confidence": 0.9\n}\n\n## 선택 가이드라인\n\n1. **최소 Agent 원칙**: 가능한 적은 수의 Agent로 처리\n2. **전문성 우선**: 해당 작업에 가장 전문적인 Agent 선택\n3. **효율성 고려**: 병렬 처리 가능한 경우 명시\n4. **의존성 관리**: 데이터 흐름을 고려한 순서 지정\n5. **폴백 전략**: 불확실한 경우 ["search_team", "analysis_team"] 조합\n\n## 주의사항\n\n- selected_agents는 반드시 배열 형태\n- Agent 이름은 정확히: "search_team", "analysis_team", "document_team"\n- 최소 1개, 최대 3개 선택\n- 순서는 실행 우선순위 (앞에 있을수록 먼저 실행)\n- reasoning은 상세하고 논리적으로 작성\n- coordination 필드로 실행 방식 명시\n- 복합 질문의 경우 의존성 관계 명확히 표시'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 14:39:49,242 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 14:39:49,243 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 14:39:49,243 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 14:39:49,243 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 14:39:49,243 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 14:39:49,243 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 14:39:51,253 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 05:39:51 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'1779'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'1805'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9948'), (b'x-ratelimit-remaining-tokens', b'198431'), (b'x-ratelimit-reset-requests', b'7m26.722s'), (b'x-ratelimit-reset-tokens', b'470ms'), (b'x-request-id', b'req_89ca73548d6947ad8d05c80745044f70'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989a94a8aaebe9fb-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 14:39:51,253 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 14:39:51,253 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 14:39:51,260 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 14:39:51,260 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 14:39:51,260 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 14:39:51,260 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 05:39:51 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '1779', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '1805', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9948', 'x-ratelimit-remaining-tokens': '198431', 'x-ratelimit-reset-requests': '7m26.722s', 'x-ratelimit-reset-tokens': '470ms', 'x-request-id': 'req_89ca73548d6947ad8d05c80745044f70', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989a94a8aaebe9fb-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 14:39:51,260 - openai._base_client - DEBUG - request_id: req_89ca73548d6947ad8d05c80745044f70
2025-10-05 14:39:51,260 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: agent_selection | Model: gpt-4o-mini-2024-07-18 | Tokens: 1803 (prompt: 1705, completion: 98)
2025-10-05 14:39:51,261 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM agent selection reasoning: 사용자가 요청한 '강남구 아파트 전세 시세'에 대한 정보는 부동산 시세 조회 전문인 search_team이 가장 적합합니다. 이 팀은 시세 데이터를 직접 조회할 수 있는 능력을 가지고 있습니다.
2025-10-05 14:39:51,261 - app.service_agent.cognitive_agents.planning_agent - INFO - ✅ Primary LLM selected agents: ['search_team']
2025-10-05 14:39:51,261 - __main__ - INFO -   의도: 시세조회
2025-10-05 14:39:51,261 - __main__ - INFO -   신뢰도: 0.95
2025-10-05 14:39:51,261 - __main__ - INFO -   추천 Agent: ['search_team']
2025-10-05 14:39:51,261 - __main__ - INFO - 
[Step 2] Query Decomposition...
2025-10-05 14:39:51,261 - app.service_agent.cognitive_agents.query_decomposer - INFO - Decomposing query: 강남구 아파트 전세 시세 알려주세요...
2025-10-05 14:39:51,261 - app.service_agent.cognitive_agents.query_decomposer - INFO - Query is simple, no decomposition needed
2025-10-05 14:39:51,261 - __main__ - INFO -   복합 질문: False
2025-10-05 14:39:51,261 - __main__ - INFO -   작업 수: 1
2025-10-05 14:39:51,261 - __main__ - INFO -   실행 모드: sequential
2025-10-05 14:39:51,261 - __main__ - INFO - 
[Step 3] Execution Plan 생성...
2025-10-05 14:39:51,261 - app.service_agent.cognitive_agents.planning_agent - INFO - Creating execution plan for intent: 시세조회
2025-10-05 14:39:51,261 - app.service_agent.cognitive_agents.planning_agent - WARNING - AgentRegistry is empty, using default teams
2025-10-05 14:39:51,261 - app.service_agent.cognitive_agents.planning_agent - DEBUG - Suggested agents: ['search_team']
2025-10-05 14:39:51,261 - app.service_agent.cognitive_agents.planning_agent - DEBUG - Available agents: ['search_team', 'analysis_team', 'document_team']
2025-10-05 14:39:51,261 - app.service_agent.cognitive_agents.planning_agent - INFO - Selected agents/teams for execution: ['search_team']
2025-10-05 14:39:51,261 - __main__ - INFO -   전략: sequential
2025-10-05 14:39:51,261 - __main__ - INFO -   단계 수: 1
2025-10-05 14:39:51,261 - __main__ - INFO - 
✓ 테스트 성공 (소요시간: 4.15초)
2025-10-05 14:39:51,261 - __main__ - INFO - 
================================================================================
2025-10-05 14:39:51,261 - __main__ - INFO - [3] 단일 질문 테스트: S003
2025-10-05 14:39:51,261 - __main__ - INFO - 질문: 전세자금대출 한도가 얼마나 되나요?
2025-10-05 14:39:51,261 - __main__ - INFO - ================================================================================
2025-10-05 14:39:51,261 - __main__ - INFO - 
[Step 1] Intent 분석...
2025-10-05 14:39:51,261 - app.service_agent.cognitive_agents.planning_agent - INFO - Analyzing intent for query: 전세자금대출 한도가 얼마나 되나요?...
2025-10-05 14:39:51,261 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-67fe354c-764c-48c0-a936-5bf514b9f3a0', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 의도 분석 전문가입니다.\n사용자의 질문을 정확히 이해하고, 어떤 종류의 도움이 필요한지 분류해야 합니다.\n\n## 중요: 복합 질문 처리\n복합적인 질문(여러 의도가 섞인 질문)의 경우, 가장 핵심적인 의도를 파악하되,\nsub_intents 필드에 부가적인 의도들도 함께 기록해주세요.\n\n## 분류 카테고리 설명:\n\n1. **LEGAL_CONSULT (법률상담)**\n   - 설명: 부동산 관련 법률, 권리, 의무에 대한 질문\n   - 예시:\n     * 단순: "전세금 5% 인상이 가능한가요?", "임대차계약 갱신 거부할 수 있나요?"\n     * 복합: "전세금 인상 가능한지 확인하고 법적 근거도 알려주세요"\n   - 키워드: 법, 전세, 임대, 보증금, 계약, 권리, 의무, 갱신, 임차인, 임대인, 법률, 규정, 조항\n   - 필요한 처리: 법률 데이터베이스 검색, 관련 법조항 찾기\n\n2. **MARKET_INQUIRY (시세조회)**\n   - 설명: 부동산 시장 가격, 시세, 거래 동향에 대한 질문\n   - 예시:\n     * 단순: "강남구 아파트 전세 시세 알려주세요", "서초동 매매가 얼마나 올랐나요?"\n     * 복합: "강남구 시세 확인하고 대출 가능 금액도 계산해줘"\n   - 키워드: 시세, 가격, 매매가, 전세가, 월세, 시장, 동향, 평균, 지역명, 상승률, 하락률\n   - 필요한 처리: 부동산 시세 데이터 조회, 지역별 가격 분석\n\n3. **LOAN_CONSULT (대출상담)**\n   - 설명: 주택담보대출, 전세자금대출 등 금융 관련 질문\n   - 예시:\n     * 단순: "전세자금대출 한도가 얼마인가요?", "LTV가 뭔가요?"\n     * 복합: "대출 한도 확인하고 금리 비교도 해주세요"\n   - 키워드: 대출, 금리, 한도, 조건, 상환, LTV, DTI, DSR, 담보, 금융, 은행\n   - 필요한 처리: 대출 상품 조회, 금리 정보 검색, 한도 계산\n\n4. **CONTRACT_CREATION (계약서작성)**\n   - 설명: 새로운 계약서나 문서를 작성해달라는 요청\n   - 예시:\n     * 단순: "임대차계약서 작성해주세요", "전세계약서 초안 만들어주세요"\n     * 복합: "계약서 작성하고 주의사항도 검토해주세요"\n   - 키워드: 작성, 만들, 생성, 초안, 계약서, 문서, 양식\n   - 필요한 처리: 문서 생성 에이전트 호출, 템플릿 기반 작성\n\n5. **CONTRACT_REVIEW (계약서검토)**\n   - 설명: 기존 계약서나 문서를 검토해달라는 요청\n   - 예시:\n     * 단순: "이 계약서 검토해주세요", "특약사항 문제없나요?"\n     * 복합: "계약서 검토하고 수정사항도 제안해주세요"\n   - 키워드: 검토, 확인, 점검, 리뷰, 분석해, 살펴봐, 체크\n   - 필요한 처리: 문서 분석, 위험 요소 식별, 개선사항 제안\n\n6. **COMPREHENSIVE (종합분석)**\n   - 설명: 여러 측면을 종합적으로 분석해달라는 요청\n   - 예시:\n     * 단순: "이 물건 전체적으로 분석해주세요"\n     * 복합: "시세, 법률, 대출 모두 검토해서 종합 의견 주세요"\n   - 키워드: 종합, 전체, 모든, 전반적, 종합적, 평가, 분석\n   - 필요한 처리: 다중 데이터 소스 통합 분석\n\n7. **RISK_ANALYSIS (리스크분석)**\n   - 설명: 위험 요소나 주의사항에 대한 질문\n   - 예시:\n     * 단순: "이 계약 위험한가요?", "주의할 점 알려주세요"\n     * 복합: "리스크 분석하고 대안도 제시해주세요"\n   - 키워드: 위험, 리스크, 주의, 문제점, 조심, 걱정, 우려\n   - 필요한 처리: 위험 요소 분석, 주의사항 추출\n\n8. **UNCLEAR (불분명)**\n   - 설명: 의도를 명확히 파악하기 어려운 질문\n   - 예시: "이거 좀 봐주세요", "어떻게 해야 할까요?", "도와주세요"\n   - 처리: 추가 질문으로 의도 명확화 필요\n\n9. **IRRELEVANT (무관)**\n   - 설명: 부동산과 전혀 관련 없는 질문\n   - 예시: "날씨 어때?", "저녁 뭐 먹지?", "주식 추천해줘"\n   - 처리: 부동산 관련 질문을 유도\n\n## 복합 질문 예시와 분석:\n\n### 예시 1: "강남구 아파트 시세 알려주고 전세자금대출 가능한지도 확인해줘"\n- 주 의도: MARKET_INQUIRY (시세 조회가 먼저 필요)\n- 부가 의도: LOAN_CONSULT (대출 확인)\n- 분해: ["강남구 아파트 시세 조회", "전세자금대출 가능 여부 확인"]\n\n### 예시 2: "이 계약서 검토해서 위험한 부분 있는지 알려주고 수정 제안도 해줘"\n- 주 의도: CONTRACT_REVIEW (계약서 검토)\n- 부가 의도: RISK_ANALYSIS (위험 분석)\n- 분해: ["계약서 전체 검토", "위험 요소 식별", "수정사항 제안"]\n\n### 예시 3: "서초동 전세가 확인하고 법적으로 문제없는지도 봐줘"\n- 주 의도: MARKET_INQUIRY (시세 확인)\n- 부가 의도: LEGAL_CONSULT (법적 검토)\n- 분해: ["서초동 전세가 조회", "법적 이슈 검토"]\n\n## 응답 형식 (JSON 형식으로 응답):\n\n{\n    "intent": "LEGAL_CONSULT",\n    "confidence": 0.9,\n    "keywords": ["전세금", "인상", "제한"],\n    "sub_intents": [],\n    "is_compound": false,\n    "decomposed_tasks": [],\n    "entities": {\n        "location": "강남구",\n        "price": "5억",\n        "contract_type": "전세",\n        "date": "2024년",\n        "area": "84㎡",\n        "action_verbs": ["확인", "검토"]\n    },\n    "reasoning": "전세금 인상에 대한 법률 질문이므로 LEGAL_CONSULT로 분류"\n}\n\n응답 규칙:\n- intent: 위 9개 카테고리 중 하나 (대문자_언더스코어 형식)\n- confidence: 0.0~1.0 (0.8 이상이면 매우 확실, 0.5 미만이면 불확실)\n- keywords: 추출된 주요 키워드 목록\n- sub_intents: 복합 질문일 경우 부가적인 의도들\n- is_compound: 복합 질문 여부 (true/false)\n- decomposed_tasks: 복합 질문을 분해한 개별 작업들\n- entities: 추출된 엔티티 정보\n- reasoning: 분류한 이유와 근거 (상세하게)\n\n## 판단 가이드:\n- 여러 의도가 섞여있다면, 가장 주된 의도를 intent에, 나머지를 sub_intents에 기록\n- "그리고", "또한", "함께", "같이" 등의 연결어가 있으면 복합 질문일 가능성 높음\n- 법률 관련 키워드가 있으면 LEGAL_CONSULT 우선\n- 가격/시세 언급이 명확하면 MARKET_INQUIRY\n- 계약서라는 단어와 함께 "작성/만들기"가 있으면 CONTRACT_CREATION\n- 계약서라는 단어와 함께 "검토/확인"이 있으면 CONTRACT_REVIEW\n- 불확실하면 confidence를 낮게 설정하고 UNCLEAR 선택\n- 복합 질문은 is_compound를 true로 설정하고 개별 작업으로 분해\n\n분석할 질문: 전세자금대출 한도가 얼마나 되나요?'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 14:39:51,262 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 14:39:51,262 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 14:39:51,263 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 14:39:51,263 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 14:39:51,263 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 14:39:51,263 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 14:39:53,463 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 05:39:53 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'1939'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'1964'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9947'), (b'x-ratelimit-remaining-tokens', b'198315'), (b'x-ratelimit-reset-requests', b'7m33.359s'), (b'x-ratelimit-reset-tokens', b'505ms'), (b'x-request-id', b'req_894d08881f144f28bced4f1a9445f130'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989a94b53ce9e9fb-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 14:39:53,463 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 14:39:53,463 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 14:39:53,464 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 14:39:53,464 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 14:39:53,464 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 14:39:53,464 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 05:39:53 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '1939', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '1964', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9947', 'x-ratelimit-remaining-tokens': '198315', 'x-ratelimit-reset-requests': '7m33.359s', 'x-ratelimit-reset-tokens': '505ms', 'x-request-id': 'req_894d08881f144f28bced4f1a9445f130', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989a94b53ce9e9fb-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 14:39:53,464 - openai._base_client - DEBUG - request_id: req_894d08881f144f28bced4f1a9445f130
2025-10-05 14:39:53,464 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: intent_analysis | Model: gpt-4o-mini-2024-07-18 | Tokens: 2041 (prompt: 1922, completion: 119)
2025-10-05 14:39:53,464 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM Intent Analysis Result: {'intent': 'LOAN_CONSULT', 'confidence': 0.9, 'keywords': ['전세자금대출', '한도'], 'sub_intents': [], 'is_compound': False, 'decomposed_tasks': [], 'entities': {'loan_type': '전세자금대출', 'action_verbs': ['확인']}, 'reasoning': '전세자금대출 한도에 대한 질문이므로 LOAN_CONSULT로 분류'}
2025-10-05 14:39:53,465 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-461efaa7-3faa-4676-b387-fe1cd97ea7e2', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 Agent 선택 전문가입니다.\n사용자의 요청에 가장 적합한 Agent/Team을 선택하는 것이 목표입니다.\n\n## 현재 상황\n\n**사용자 질문:** 전세자금대출 한도가 얼마나 되나요?\n**분석된 의도:** 대출상담\n**추출된 키워드:** [\'전세자금대출\', \'한도\']\n\n## 사용 가능한 Agent/Team 정보\n\n{\'search_team\': {\'name\': \'search_team\', \'capabilities\': \'법률 검색, 부동산 시세 조회, 대출 상품 검색\', \'tools\': [\'legal_search\', \'market_data\', \'loan_data\'], \'use_cases\': [\'법률 상담\', \'시세 조회\', \'대출 정보\']}, \'analysis_team\': {\'name\': \'analysis_team\', \'capabilities\': \'데이터 분석, 리스크 평가, 인사이트 생성, 추천\', \'tools\': [\'data_analyzer\', \'risk_evaluator\'], \'use_cases\': [\'시장 분석\', \'리스크 평가\', \'투자 분석\']}, \'document_team\': {\'name\': \'document_team\', \'capabilities\': \'계약서 작성, 문서 생성, 문서 검토\', \'tools\': [\'document_generator\', \'contract_reviewer\'], \'use_cases\': [\'계약서 작성\', \'문서 검토\']}}\n\n## Agent 역할 및 상세 가이드\n\n### 1. search_team (검색 팀)\n- **주요 기능**: 정보 검색 및 데이터 수집\n- **전문 분야**:\n  * 법률 정보 검색 (전세법, 임대차보호법, 부동산 관련 법규)\n  * 부동산 시세 조회 (매매가, 전세가, 월세, 실거래가)\n  * 대출 상품 정보 검색 (금리, 한도, 조건)\n  * 지역 정보 및 인프라 조회\n- **도구**: legal_search, market_data, loan_data\n- **적합한 작업**: 정보 조회, 데이터 수집, 법률 확인, 시세 파악\n- **예시**:\n  * "전세금 5% 인상 가능한가요?"\n  * "강남구 아파트 전세 시세"\n  * "전세자금대출 한도 얼마?"\n\n### 2. analysis_team (분석 팀)\n- **주요 기능**: 데이터 분석 및 평가\n- **전문 분야**:\n  * 시장 동향 분석 (상승률, 하락률, 추세)\n  * 리스크 평가 (계약, 투자 위험도)\n  * 투자 수익률 계산 (ROI, 월세 수익률)\n  * 대출 한도 및 조건 분석 (LTV, DTI, DSR)\n  * 비교 분석 (지역별, 상품별)\n- **도구**: data_analyzer, risk_evaluator, calculator\n- **적합한 작업**: 데이터 분석, 리스크 평가, 계산, 비교, 예측\n- **의존성**: 보통 search_team의 데이터가 필요\n- **예시**:\n  * "이 지역 투자 가치 분석해줘"\n  * "계약 리스크 평가해줘"\n  * "대출 가능 금액 계산해줘"\n\n### 3. document_team (문서 팀)\n- **주요 기능**: 문서 생성 및 관리\n- **전문 분야**:\n  * 계약서 작성 (임대차, 매매, 전세)\n  * 문서 템플릿 관리\n  * 특약사항 생성\n  * 계약서 수정안 작성\n  * 법률 문서 검토\n- **도구**: document_generator, contract_template, contract_reviewer\n- **적합한 작업**: 문서 작성, 계약서 생성, 문서 수정, 검토\n- **예시**:\n  * "임대차계약서 작성해줘"\n  * "특약사항 추가해줘"\n  * "계약서 수정안 만들어줘"\n\n## Agent 선택 전략\n\n### 1단계: 작업 유형 식별\n```\n정보 필요 → search_team\n분석/계산 필요 → analysis_team\n문서 작성 필요 → document_team\n```\n\n### 2단계: 의존성 분석\n```\n독립적 작업 → 단일 팀\n순차적 의존 → 여러 팀 (순서 중요)\n병렬 가능 → 여러 팀 (순서 무관)\n```\n\n### 3단계: 최적화\n```\n중복 제거 → 가장 적합한 팀만 선택\n효율성 → 병렬 처리 가능한 경우 표시\n```\n\n## 의도별 Agent 매핑 가이드\n\n| 의도 (Intent) | 추천 Agent 조합 | 이유 |\n|--------------|-----------------|------|\n| LEGAL_CONSULT | ["search_team"] | 법률 정보 검색 전문 |\n| MARKET_INQUIRY | ["search_team"] | 시세 데이터 조회 |\n| LOAN_CONSULT | ["search_team", "analysis_team"] | 대출 정보 조회 후 분석 |\n| CONTRACT_CREATION | ["document_team"] | 문서 생성 전문 |\n| CONTRACT_REVIEW | ["search_team", "analysis_team"] | 법률 검토 및 리스크 분석 |\n| COMPREHENSIVE | ["search_team", "analysis_team"] | 종합 정보 수집 및 분석 |\n| RISK_ANALYSIS | ["analysis_team"] | 리스크 평가 전문 |\n| UNCLEAR | ["search_team", "analysis_team"] | 포괄적 대응 |\n\n## 복합 질문 처리 예시\n\n### 예시 1: 순차적 처리\n질문: "강남구 시세 확인하고 투자 가치 분석해줘"\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "먼저 search_team이 시세 데이터를 수집하고, 그 결과를 analysis_team이 분석하여 투자 가치 평가"\n}\n```\n\n### 예시 2: 병렬 처리 가능\n질문: "법률 정보와 시세 정보 모두 알려줘"\n```json\n{\n    "selected_agents": ["search_team"],\n    "reasoning": "search_team이 법률과 시세 정보를 병렬로 조회 가능. 두 작업이 독립적이므로 동시 처리"\n}\n```\n\n### 예시 3: 3단계 파이프라인\n질문: "시세 조회하고 분석한 후 계약서 작성해줘"\n```json\n{\n    "selected_agents": ["search_team", "analysis_team", "document_team"],\n    "reasoning": "search_team이 데이터 수집 → analysis_team이 분석 → document_team이 분석 결과 기반 계약서 작성"\n}\n```\n\n## 응답 형식 (JSON)\n\n{\n    "selected_agents": ["선택된 agent/team 목록"],\n    "reasoning": "선택 이유를 구체적으로 설명. 각 Agent의 역할과 처리 순서 포함",\n    "coordination": "single/sequential/parallel/pipeline",\n    "dependencies": {"agent2": ["agent1"]},\n    "estimated_time": 30,\n    "confidence": 0.9\n}\n\n## 선택 가이드라인\n\n1. **최소 Agent 원칙**: 가능한 적은 수의 Agent로 처리\n2. **전문성 우선**: 해당 작업에 가장 전문적인 Agent 선택\n3. **효율성 고려**: 병렬 처리 가능한 경우 명시\n4. **의존성 관리**: 데이터 흐름을 고려한 순서 지정\n5. **폴백 전략**: 불확실한 경우 ["search_team", "analysis_team"] 조합\n\n## 주의사항\n\n- selected_agents는 반드시 배열 형태\n- Agent 이름은 정확히: "search_team", "analysis_team", "document_team"\n- 최소 1개, 최대 3개 선택\n- 순서는 실행 우선순위 (앞에 있을수록 먼저 실행)\n- reasoning은 상세하고 논리적으로 작성\n- coordination 필드로 실행 방식 명시\n- 복합 질문의 경우 의존성 관계 명확히 표시'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 14:39:53,465 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 14:39:53,465 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 14:39:53,465 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 14:39:53,465 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 14:39:53,466 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 14:39:53,466 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 14:39:56,031 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 05:39:55 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'2253'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'2279'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9946'), (b'x-ratelimit-remaining-tokens', b'198434'), (b'x-ratelimit-reset-requests', b'7m39.802s'), (b'x-ratelimit-reset-tokens', b'469ms'), (b'x-request-id', b'req_caa4b7b80a8549fb9cc96c879f069d0a'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989a94c30993e9fb-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 14:39:56,031 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 14:39:56,031 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 14:39:56,031 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 14:39:56,031 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 14:39:56,031 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 14:39:56,031 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 05:39:55 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '2253', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '2279', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9946', 'x-ratelimit-remaining-tokens': '198434', 'x-ratelimit-reset-requests': '7m39.802s', 'x-ratelimit-reset-tokens': '469ms', 'x-request-id': 'req_caa4b7b80a8549fb9cc96c879f069d0a', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989a94c30993e9fb-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 14:39:56,032 - openai._base_client - DEBUG - request_id: req_caa4b7b80a8549fb9cc96c879f069d0a
2025-10-05 14:39:56,032 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: agent_selection | Model: gpt-4o-mini-2024-07-18 | Tokens: 1811 (prompt: 1701, completion: 110)
2025-10-05 14:39:56,032 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM agent selection reasoning: 사용자가 전세자금대출 한도를 문의하였으므로, 먼저 search_team이 대출 상품 정보를 조회하여 한도를 확인하고, 그 결과를 바탕으로 analysis_team이 추가적인 분석을 진행할 수 있도록 합니다.
2025-10-05 14:39:56,032 - app.service_agent.cognitive_agents.planning_agent - INFO - ✅ Primary LLM selected agents: ['search_team', 'analysis_team']
2025-10-05 14:39:56,032 - __main__ - INFO -   의도: 대출상담
2025-10-05 14:39:56,032 - __main__ - INFO -   신뢰도: 0.90
2025-10-05 14:39:56,032 - __main__ - INFO -   추천 Agent: ['search_team', 'analysis_team']
2025-10-05 14:39:56,032 - __main__ - INFO - 
[Step 2] Query Decomposition...
2025-10-05 14:39:56,032 - app.service_agent.cognitive_agents.query_decomposer - INFO - Decomposing query: 전세자금대출 한도가 얼마나 되나요?...
2025-10-05 14:39:56,032 - app.service_agent.cognitive_agents.query_decomposer - INFO - Query is simple, no decomposition needed
2025-10-05 14:39:56,032 - __main__ - INFO -   복합 질문: False
2025-10-05 14:39:56,032 - __main__ - INFO -   작업 수: 1
2025-10-05 14:39:56,032 - __main__ - INFO -   실행 모드: sequential
2025-10-05 14:39:56,032 - __main__ - INFO - 
[Step 3] Execution Plan 생성...
2025-10-05 14:39:56,032 - app.service_agent.cognitive_agents.planning_agent - INFO - Creating execution plan for intent: 대출상담
2025-10-05 14:39:56,032 - app.service_agent.cognitive_agents.planning_agent - WARNING - AgentRegistry is empty, using default teams
2025-10-05 14:39:56,032 - app.service_agent.cognitive_agents.planning_agent - DEBUG - Suggested agents: ['search_team', 'analysis_team']
2025-10-05 14:39:56,032 - app.service_agent.cognitive_agents.planning_agent - DEBUG - Available agents: ['search_team', 'analysis_team', 'document_team']
2025-10-05 14:39:56,032 - app.service_agent.cognitive_agents.planning_agent - INFO - Selected agents/teams for execution: ['search_team', 'analysis_team']
2025-10-05 14:39:56,032 - __main__ - INFO -   전략: sequential
2025-10-05 14:39:56,032 - __main__ - INFO -   단계 수: 2
2025-10-05 14:39:56,032 - __main__ - INFO - 
✓ 테스트 성공 (소요시간: 4.77초)
2025-10-05 14:39:56,032 - __main__ - INFO - 
================================================================================
2025-10-05 14:39:56,032 - __main__ - INFO - [4] 단일 질문 테스트: S004
2025-10-05 14:39:56,032 - __main__ - INFO - 질문: 임대차계약서 작성해주세요
2025-10-05 14:39:56,032 - __main__ - INFO - ================================================================================
2025-10-05 14:39:56,032 - __main__ - INFO - 
[Step 1] Intent 분석...
2025-10-05 14:39:56,032 - app.service_agent.cognitive_agents.planning_agent - INFO - Analyzing intent for query: 임대차계약서 작성해주세요...
2025-10-05 14:39:56,033 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-84cd1177-f163-4680-9fcc-91275e2c9e04', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 의도 분석 전문가입니다.\n사용자의 질문을 정확히 이해하고, 어떤 종류의 도움이 필요한지 분류해야 합니다.\n\n## 중요: 복합 질문 처리\n복합적인 질문(여러 의도가 섞인 질문)의 경우, 가장 핵심적인 의도를 파악하되,\nsub_intents 필드에 부가적인 의도들도 함께 기록해주세요.\n\n## 분류 카테고리 설명:\n\n1. **LEGAL_CONSULT (법률상담)**\n   - 설명: 부동산 관련 법률, 권리, 의무에 대한 질문\n   - 예시:\n     * 단순: "전세금 5% 인상이 가능한가요?", "임대차계약 갱신 거부할 수 있나요?"\n     * 복합: "전세금 인상 가능한지 확인하고 법적 근거도 알려주세요"\n   - 키워드: 법, 전세, 임대, 보증금, 계약, 권리, 의무, 갱신, 임차인, 임대인, 법률, 규정, 조항\n   - 필요한 처리: 법률 데이터베이스 검색, 관련 법조항 찾기\n\n2. **MARKET_INQUIRY (시세조회)**\n   - 설명: 부동산 시장 가격, 시세, 거래 동향에 대한 질문\n   - 예시:\n     * 단순: "강남구 아파트 전세 시세 알려주세요", "서초동 매매가 얼마나 올랐나요?"\n     * 복합: "강남구 시세 확인하고 대출 가능 금액도 계산해줘"\n   - 키워드: 시세, 가격, 매매가, 전세가, 월세, 시장, 동향, 평균, 지역명, 상승률, 하락률\n   - 필요한 처리: 부동산 시세 데이터 조회, 지역별 가격 분석\n\n3. **LOAN_CONSULT (대출상담)**\n   - 설명: 주택담보대출, 전세자금대출 등 금융 관련 질문\n   - 예시:\n     * 단순: "전세자금대출 한도가 얼마인가요?", "LTV가 뭔가요?"\n     * 복합: "대출 한도 확인하고 금리 비교도 해주세요"\n   - 키워드: 대출, 금리, 한도, 조건, 상환, LTV, DTI, DSR, 담보, 금융, 은행\n   - 필요한 처리: 대출 상품 조회, 금리 정보 검색, 한도 계산\n\n4. **CONTRACT_CREATION (계약서작성)**\n   - 설명: 새로운 계약서나 문서를 작성해달라는 요청\n   - 예시:\n     * 단순: "임대차계약서 작성해주세요", "전세계약서 초안 만들어주세요"\n     * 복합: "계약서 작성하고 주의사항도 검토해주세요"\n   - 키워드: 작성, 만들, 생성, 초안, 계약서, 문서, 양식\n   - 필요한 처리: 문서 생성 에이전트 호출, 템플릿 기반 작성\n\n5. **CONTRACT_REVIEW (계약서검토)**\n   - 설명: 기존 계약서나 문서를 검토해달라는 요청\n   - 예시:\n     * 단순: "이 계약서 검토해주세요", "특약사항 문제없나요?"\n     * 복합: "계약서 검토하고 수정사항도 제안해주세요"\n   - 키워드: 검토, 확인, 점검, 리뷰, 분석해, 살펴봐, 체크\n   - 필요한 처리: 문서 분석, 위험 요소 식별, 개선사항 제안\n\n6. **COMPREHENSIVE (종합분석)**\n   - 설명: 여러 측면을 종합적으로 분석해달라는 요청\n   - 예시:\n     * 단순: "이 물건 전체적으로 분석해주세요"\n     * 복합: "시세, 법률, 대출 모두 검토해서 종합 의견 주세요"\n   - 키워드: 종합, 전체, 모든, 전반적, 종합적, 평가, 분석\n   - 필요한 처리: 다중 데이터 소스 통합 분석\n\n7. **RISK_ANALYSIS (리스크분석)**\n   - 설명: 위험 요소나 주의사항에 대한 질문\n   - 예시:\n     * 단순: "이 계약 위험한가요?", "주의할 점 알려주세요"\n     * 복합: "리스크 분석하고 대안도 제시해주세요"\n   - 키워드: 위험, 리스크, 주의, 문제점, 조심, 걱정, 우려\n   - 필요한 처리: 위험 요소 분석, 주의사항 추출\n\n8. **UNCLEAR (불분명)**\n   - 설명: 의도를 명확히 파악하기 어려운 질문\n   - 예시: "이거 좀 봐주세요", "어떻게 해야 할까요?", "도와주세요"\n   - 처리: 추가 질문으로 의도 명확화 필요\n\n9. **IRRELEVANT (무관)**\n   - 설명: 부동산과 전혀 관련 없는 질문\n   - 예시: "날씨 어때?", "저녁 뭐 먹지?", "주식 추천해줘"\n   - 처리: 부동산 관련 질문을 유도\n\n## 복합 질문 예시와 분석:\n\n### 예시 1: "강남구 아파트 시세 알려주고 전세자금대출 가능한지도 확인해줘"\n- 주 의도: MARKET_INQUIRY (시세 조회가 먼저 필요)\n- 부가 의도: LOAN_CONSULT (대출 확인)\n- 분해: ["강남구 아파트 시세 조회", "전세자금대출 가능 여부 확인"]\n\n### 예시 2: "이 계약서 검토해서 위험한 부분 있는지 알려주고 수정 제안도 해줘"\n- 주 의도: CONTRACT_REVIEW (계약서 검토)\n- 부가 의도: RISK_ANALYSIS (위험 분석)\n- 분해: ["계약서 전체 검토", "위험 요소 식별", "수정사항 제안"]\n\n### 예시 3: "서초동 전세가 확인하고 법적으로 문제없는지도 봐줘"\n- 주 의도: MARKET_INQUIRY (시세 확인)\n- 부가 의도: LEGAL_CONSULT (법적 검토)\n- 분해: ["서초동 전세가 조회", "법적 이슈 검토"]\n\n## 응답 형식 (JSON 형식으로 응답):\n\n{\n    "intent": "LEGAL_CONSULT",\n    "confidence": 0.9,\n    "keywords": ["전세금", "인상", "제한"],\n    "sub_intents": [],\n    "is_compound": false,\n    "decomposed_tasks": [],\n    "entities": {\n        "location": "강남구",\n        "price": "5억",\n        "contract_type": "전세",\n        "date": "2024년",\n        "area": "84㎡",\n        "action_verbs": ["확인", "검토"]\n    },\n    "reasoning": "전세금 인상에 대한 법률 질문이므로 LEGAL_CONSULT로 분류"\n}\n\n응답 규칙:\n- intent: 위 9개 카테고리 중 하나 (대문자_언더스코어 형식)\n- confidence: 0.0~1.0 (0.8 이상이면 매우 확실, 0.5 미만이면 불확실)\n- keywords: 추출된 주요 키워드 목록\n- sub_intents: 복합 질문일 경우 부가적인 의도들\n- is_compound: 복합 질문 여부 (true/false)\n- decomposed_tasks: 복합 질문을 분해한 개별 작업들\n- entities: 추출된 엔티티 정보\n- reasoning: 분류한 이유와 근거 (상세하게)\n\n## 판단 가이드:\n- 여러 의도가 섞여있다면, 가장 주된 의도를 intent에, 나머지를 sub_intents에 기록\n- "그리고", "또한", "함께", "같이" 등의 연결어가 있으면 복합 질문일 가능성 높음\n- 법률 관련 키워드가 있으면 LEGAL_CONSULT 우선\n- 가격/시세 언급이 명확하면 MARKET_INQUIRY\n- 계약서라는 단어와 함께 "작성/만들기"가 있으면 CONTRACT_CREATION\n- 계약서라는 단어와 함께 "검토/확인"이 있으면 CONTRACT_REVIEW\n- 불확실하면 confidence를 낮게 설정하고 UNCLEAR 선택\n- 복합 질문은 is_compound를 true로 설정하고 개별 작업으로 분해\n\n분석할 질문: 임대차계약서 작성해주세요'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 14:39:56,033 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 14:39:56,033 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 14:39:56,033 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 14:39:56,033 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 14:39:56,034 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 14:39:56,034 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 14:39:57,991 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 05:39:57 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'1664'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'1695'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9946'), (b'x-ratelimit-remaining-tokens', b'198317'), (b'x-ratelimit-reset-requests', b'7m45.864s'), (b'x-ratelimit-reset-tokens', b'504ms'), (b'x-request-id', b'req_147579a3cb04437facd855a0a567300a'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989a94d30ee8e9fb-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 14:39:57,991 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 14:39:57,991 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 14:39:57,993 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 14:39:57,993 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 14:39:57,993 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 14:39:57,993 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 05:39:57 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '1664', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '1695', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9946', 'x-ratelimit-remaining-tokens': '198317', 'x-ratelimit-reset-requests': '7m45.864s', 'x-ratelimit-reset-tokens': '504ms', 'x-request-id': 'req_147579a3cb04437facd855a0a567300a', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989a94d30ee8e9fb-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 14:39:57,993 - openai._base_client - DEBUG - request_id: req_147579a3cb04437facd855a0a567300a
2025-10-05 14:39:57,993 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: intent_analysis | Model: gpt-4o-mini-2024-07-18 | Tokens: 2029 (prompt: 1918, completion: 111)
2025-10-05 14:39:57,993 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM Intent Analysis Result: {'intent': 'CONTRACT_CREATION', 'confidence': 0.95, 'keywords': ['임대차계약서', '작성'], 'sub_intents': [], 'is_compound': False, 'decomposed_tasks': [], 'entities': {'contract_type': '임대차계약서', 'action_verbs': ['작성']}, 'reasoning': '임대차계약서 작성 요청이므로 CONTRACT_CREATION으로 분류'}
2025-10-05 14:39:57,994 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-94fbe91f-8f61-4016-b585-6ee058e3ebce', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 Agent 선택 전문가입니다.\n사용자의 요청에 가장 적합한 Agent/Team을 선택하는 것이 목표입니다.\n\n## 현재 상황\n\n**사용자 질문:** 임대차계약서 작성해주세요\n**분석된 의도:** 계약서작성\n**추출된 키워드:** [\'임대차계약서\', \'작성\']\n\n## 사용 가능한 Agent/Team 정보\n\n{\'search_team\': {\'name\': \'search_team\', \'capabilities\': \'법률 검색, 부동산 시세 조회, 대출 상품 검색\', \'tools\': [\'legal_search\', \'market_data\', \'loan_data\'], \'use_cases\': [\'법률 상담\', \'시세 조회\', \'대출 정보\']}, \'analysis_team\': {\'name\': \'analysis_team\', \'capabilities\': \'데이터 분석, 리스크 평가, 인사이트 생성, 추천\', \'tools\': [\'data_analyzer\', \'risk_evaluator\'], \'use_cases\': [\'시장 분석\', \'리스크 평가\', \'투자 분석\']}, \'document_team\': {\'name\': \'document_team\', \'capabilities\': \'계약서 작성, 문서 생성, 문서 검토\', \'tools\': [\'document_generator\', \'contract_reviewer\'], \'use_cases\': [\'계약서 작성\', \'문서 검토\']}}\n\n## Agent 역할 및 상세 가이드\n\n### 1. search_team (검색 팀)\n- **주요 기능**: 정보 검색 및 데이터 수집\n- **전문 분야**:\n  * 법률 정보 검색 (전세법, 임대차보호법, 부동산 관련 법규)\n  * 부동산 시세 조회 (매매가, 전세가, 월세, 실거래가)\n  * 대출 상품 정보 검색 (금리, 한도, 조건)\n  * 지역 정보 및 인프라 조회\n- **도구**: legal_search, market_data, loan_data\n- **적합한 작업**: 정보 조회, 데이터 수집, 법률 확인, 시세 파악\n- **예시**:\n  * "전세금 5% 인상 가능한가요?"\n  * "강남구 아파트 전세 시세"\n  * "전세자금대출 한도 얼마?"\n\n### 2. analysis_team (분석 팀)\n- **주요 기능**: 데이터 분석 및 평가\n- **전문 분야**:\n  * 시장 동향 분석 (상승률, 하락률, 추세)\n  * 리스크 평가 (계약, 투자 위험도)\n  * 투자 수익률 계산 (ROI, 월세 수익률)\n  * 대출 한도 및 조건 분석 (LTV, DTI, DSR)\n  * 비교 분석 (지역별, 상품별)\n- **도구**: data_analyzer, risk_evaluator, calculator\n- **적합한 작업**: 데이터 분석, 리스크 평가, 계산, 비교, 예측\n- **의존성**: 보통 search_team의 데이터가 필요\n- **예시**:\n  * "이 지역 투자 가치 분석해줘"\n  * "계약 리스크 평가해줘"\n  * "대출 가능 금액 계산해줘"\n\n### 3. document_team (문서 팀)\n- **주요 기능**: 문서 생성 및 관리\n- **전문 분야**:\n  * 계약서 작성 (임대차, 매매, 전세)\n  * 문서 템플릿 관리\n  * 특약사항 생성\n  * 계약서 수정안 작성\n  * 법률 문서 검토\n- **도구**: document_generator, contract_template, contract_reviewer\n- **적합한 작업**: 문서 작성, 계약서 생성, 문서 수정, 검토\n- **예시**:\n  * "임대차계약서 작성해줘"\n  * "특약사항 추가해줘"\n  * "계약서 수정안 만들어줘"\n\n## Agent 선택 전략\n\n### 1단계: 작업 유형 식별\n```\n정보 필요 → search_team\n분석/계산 필요 → analysis_team\n문서 작성 필요 → document_team\n```\n\n### 2단계: 의존성 분석\n```\n독립적 작업 → 단일 팀\n순차적 의존 → 여러 팀 (순서 중요)\n병렬 가능 → 여러 팀 (순서 무관)\n```\n\n### 3단계: 최적화\n```\n중복 제거 → 가장 적합한 팀만 선택\n효율성 → 병렬 처리 가능한 경우 표시\n```\n\n## 의도별 Agent 매핑 가이드\n\n| 의도 (Intent) | 추천 Agent 조합 | 이유 |\n|--------------|-----------------|------|\n| LEGAL_CONSULT | ["search_team"] | 법률 정보 검색 전문 |\n| MARKET_INQUIRY | ["search_team"] | 시세 데이터 조회 |\n| LOAN_CONSULT | ["search_team", "analysis_team"] | 대출 정보 조회 후 분석 |\n| CONTRACT_CREATION | ["document_team"] | 문서 생성 전문 |\n| CONTRACT_REVIEW | ["search_team", "analysis_team"] | 법률 검토 및 리스크 분석 |\n| COMPREHENSIVE | ["search_team", "analysis_team"] | 종합 정보 수집 및 분석 |\n| RISK_ANALYSIS | ["analysis_team"] | 리스크 평가 전문 |\n| UNCLEAR | ["search_team", "analysis_team"] | 포괄적 대응 |\n\n## 복합 질문 처리 예시\n\n### 예시 1: 순차적 처리\n질문: "강남구 시세 확인하고 투자 가치 분석해줘"\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "먼저 search_team이 시세 데이터를 수집하고, 그 결과를 analysis_team이 분석하여 투자 가치 평가"\n}\n```\n\n### 예시 2: 병렬 처리 가능\n질문: "법률 정보와 시세 정보 모두 알려줘"\n```json\n{\n    "selected_agents": ["search_team"],\n    "reasoning": "search_team이 법률과 시세 정보를 병렬로 조회 가능. 두 작업이 독립적이므로 동시 처리"\n}\n```\n\n### 예시 3: 3단계 파이프라인\n질문: "시세 조회하고 분석한 후 계약서 작성해줘"\n```json\n{\n    "selected_agents": ["search_team", "analysis_team", "document_team"],\n    "reasoning": "search_team이 데이터 수집 → analysis_team이 분석 → document_team이 분석 결과 기반 계약서 작성"\n}\n```\n\n## 응답 형식 (JSON)\n\n{\n    "selected_agents": ["선택된 agent/team 목록"],\n    "reasoning": "선택 이유를 구체적으로 설명. 각 Agent의 역할과 처리 순서 포함",\n    "coordination": "single/sequential/parallel/pipeline",\n    "dependencies": {"agent2": ["agent1"]},\n    "estimated_time": 30,\n    "confidence": 0.9\n}\n\n## 선택 가이드라인\n\n1. **최소 Agent 원칙**: 가능한 적은 수의 Agent로 처리\n2. **전문성 우선**: 해당 작업에 가장 전문적인 Agent 선택\n3. **효율성 고려**: 병렬 처리 가능한 경우 명시\n4. **의존성 관리**: 데이터 흐름을 고려한 순서 지정\n5. **폴백 전략**: 불확실한 경우 ["search_team", "analysis_team"] 조합\n\n## 주의사항\n\n- selected_agents는 반드시 배열 형태\n- Agent 이름은 정확히: "search_team", "analysis_team", "document_team"\n- 최소 1개, 최대 3개 선택\n- 순서는 실행 우선순위 (앞에 있을수록 먼저 실행)\n- reasoning은 상세하고 논리적으로 작성\n- coordination 필드로 실행 방식 명시\n- 복합 질문의 경우 의존성 관계 명확히 표시'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 14:39:57,994 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 14:39:57,994 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 14:39:57,994 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 14:39:57,994 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 14:39:57,994 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 14:39:57,994 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 14:40:00,226 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 05:40:00 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'1866'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'1879'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9945'), (b'x-ratelimit-remaining-tokens', b'198437'), (b'x-ratelimit-reset-requests', b'7m52.387s'), (b'x-ratelimit-reset-tokens', b'468ms'), (b'x-request-id', b'req_b2ada7e972cf4a3eb454ddf07d178472'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989a94df5e73e9fb-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 14:40:00,226 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 14:40:00,226 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 14:40:00,231 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 14:40:00,231 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 14:40:00,231 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 14:40:00,231 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 05:40:00 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '1866', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '1879', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9945', 'x-ratelimit-remaining-tokens': '198437', 'x-ratelimit-reset-requests': '7m52.387s', 'x-ratelimit-reset-tokens': '468ms', 'x-request-id': 'req_b2ada7e972cf4a3eb454ddf07d178472', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989a94df5e73e9fb-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 14:40:00,231 - openai._base_client - DEBUG - request_id: req_b2ada7e972cf4a3eb454ddf07d178472
2025-10-05 14:40:00,231 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: agent_selection | Model: gpt-4o-mini-2024-07-18 | Tokens: 1788 (prompt: 1696, completion: 92)
2025-10-05 14:40:00,231 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM agent selection reasoning: 사용자가 요청한 임대차계약서 작성은 문서 팀의 전문 분야입니다. document_team은 계약서 작성 및 문서 생성에 특화되어 있어, 사용자의 요청에 가장 적합합니다.
2025-10-05 14:40:00,231 - app.service_agent.cognitive_agents.planning_agent - INFO - ✅ Primary LLM selected agents: ['document_team']
2025-10-05 14:40:00,231 - __main__ - INFO -   의도: 계약서작성
2025-10-05 14:40:00,232 - __main__ - INFO -   신뢰도: 0.95
2025-10-05 14:40:00,232 - __main__ - INFO -   추천 Agent: ['document_team']
2025-10-05 14:40:00,232 - __main__ - INFO - 
[Step 2] Query Decomposition...
2025-10-05 14:40:00,232 - app.service_agent.cognitive_agents.query_decomposer - INFO - Decomposing query: 임대차계약서 작성해주세요...
2025-10-05 14:40:00,232 - app.service_agent.cognitive_agents.query_decomposer - INFO - Query is simple, no decomposition needed
2025-10-05 14:40:00,232 - __main__ - INFO -   복합 질문: False
2025-10-05 14:40:00,232 - __main__ - INFO -   작업 수: 1
2025-10-05 14:40:00,232 - __main__ - INFO -   실행 모드: sequential
2025-10-05 14:40:00,232 - __main__ - INFO - 
[Step 3] Execution Plan 생성...
2025-10-05 14:40:00,232 - app.service_agent.cognitive_agents.planning_agent - INFO - Creating execution plan for intent: 계약서작성
2025-10-05 14:40:00,232 - app.service_agent.cognitive_agents.planning_agent - WARNING - AgentRegistry is empty, using default teams
2025-10-05 14:40:00,232 - app.service_agent.cognitive_agents.planning_agent - DEBUG - Suggested agents: ['document_team']
2025-10-05 14:40:00,232 - app.service_agent.cognitive_agents.planning_agent - DEBUG - Available agents: ['search_team', 'analysis_team', 'document_team']
2025-10-05 14:40:00,232 - app.service_agent.cognitive_agents.planning_agent - INFO - Selected agents/teams for execution: ['document_team']
2025-10-05 14:40:00,232 - __main__ - INFO -   전략: sequential
2025-10-05 14:40:00,232 - __main__ - INFO -   단계 수: 1
2025-10-05 14:40:00,232 - __main__ - INFO - 
✓ 테스트 성공 (소요시간: 4.20초)
2025-10-05 14:40:00,232 - __main__ - INFO - 
================================================================================
2025-10-05 14:40:00,232 - __main__ - INFO - [5] 단일 질문 테스트: S005
2025-10-05 14:40:00,232 - __main__ - INFO - 질문: 계약 갱신 거부 가능한가요?
2025-10-05 14:40:00,232 - __main__ - INFO - ================================================================================
2025-10-05 14:40:00,232 - __main__ - INFO - 
[Step 1] Intent 분석...
2025-10-05 14:40:00,232 - app.service_agent.cognitive_agents.planning_agent - INFO - Analyzing intent for query: 계약 갱신 거부 가능한가요?...
2025-10-05 14:40:00,232 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-30a5c247-56da-4274-9230-63d2c361dcee', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 의도 분석 전문가입니다.\n사용자의 질문을 정확히 이해하고, 어떤 종류의 도움이 필요한지 분류해야 합니다.\n\n## 중요: 복합 질문 처리\n복합적인 질문(여러 의도가 섞인 질문)의 경우, 가장 핵심적인 의도를 파악하되,\nsub_intents 필드에 부가적인 의도들도 함께 기록해주세요.\n\n## 분류 카테고리 설명:\n\n1. **LEGAL_CONSULT (법률상담)**\n   - 설명: 부동산 관련 법률, 권리, 의무에 대한 질문\n   - 예시:\n     * 단순: "전세금 5% 인상이 가능한가요?", "임대차계약 갱신 거부할 수 있나요?"\n     * 복합: "전세금 인상 가능한지 확인하고 법적 근거도 알려주세요"\n   - 키워드: 법, 전세, 임대, 보증금, 계약, 권리, 의무, 갱신, 임차인, 임대인, 법률, 규정, 조항\n   - 필요한 처리: 법률 데이터베이스 검색, 관련 법조항 찾기\n\n2. **MARKET_INQUIRY (시세조회)**\n   - 설명: 부동산 시장 가격, 시세, 거래 동향에 대한 질문\n   - 예시:\n     * 단순: "강남구 아파트 전세 시세 알려주세요", "서초동 매매가 얼마나 올랐나요?"\n     * 복합: "강남구 시세 확인하고 대출 가능 금액도 계산해줘"\n   - 키워드: 시세, 가격, 매매가, 전세가, 월세, 시장, 동향, 평균, 지역명, 상승률, 하락률\n   - 필요한 처리: 부동산 시세 데이터 조회, 지역별 가격 분석\n\n3. **LOAN_CONSULT (대출상담)**\n   - 설명: 주택담보대출, 전세자금대출 등 금융 관련 질문\n   - 예시:\n     * 단순: "전세자금대출 한도가 얼마인가요?", "LTV가 뭔가요?"\n     * 복합: "대출 한도 확인하고 금리 비교도 해주세요"\n   - 키워드: 대출, 금리, 한도, 조건, 상환, LTV, DTI, DSR, 담보, 금융, 은행\n   - 필요한 처리: 대출 상품 조회, 금리 정보 검색, 한도 계산\n\n4. **CONTRACT_CREATION (계약서작성)**\n   - 설명: 새로운 계약서나 문서를 작성해달라는 요청\n   - 예시:\n     * 단순: "임대차계약서 작성해주세요", "전세계약서 초안 만들어주세요"\n     * 복합: "계약서 작성하고 주의사항도 검토해주세요"\n   - 키워드: 작성, 만들, 생성, 초안, 계약서, 문서, 양식\n   - 필요한 처리: 문서 생성 에이전트 호출, 템플릿 기반 작성\n\n5. **CONTRACT_REVIEW (계약서검토)**\n   - 설명: 기존 계약서나 문서를 검토해달라는 요청\n   - 예시:\n     * 단순: "이 계약서 검토해주세요", "특약사항 문제없나요?"\n     * 복합: "계약서 검토하고 수정사항도 제안해주세요"\n   - 키워드: 검토, 확인, 점검, 리뷰, 분석해, 살펴봐, 체크\n   - 필요한 처리: 문서 분석, 위험 요소 식별, 개선사항 제안\n\n6. **COMPREHENSIVE (종합분석)**\n   - 설명: 여러 측면을 종합적으로 분석해달라는 요청\n   - 예시:\n     * 단순: "이 물건 전체적으로 분석해주세요"\n     * 복합: "시세, 법률, 대출 모두 검토해서 종합 의견 주세요"\n   - 키워드: 종합, 전체, 모든, 전반적, 종합적, 평가, 분석\n   - 필요한 처리: 다중 데이터 소스 통합 분석\n\n7. **RISK_ANALYSIS (리스크분석)**\n   - 설명: 위험 요소나 주의사항에 대한 질문\n   - 예시:\n     * 단순: "이 계약 위험한가요?", "주의할 점 알려주세요"\n     * 복합: "리스크 분석하고 대안도 제시해주세요"\n   - 키워드: 위험, 리스크, 주의, 문제점, 조심, 걱정, 우려\n   - 필요한 처리: 위험 요소 분석, 주의사항 추출\n\n8. **UNCLEAR (불분명)**\n   - 설명: 의도를 명확히 파악하기 어려운 질문\n   - 예시: "이거 좀 봐주세요", "어떻게 해야 할까요?", "도와주세요"\n   - 처리: 추가 질문으로 의도 명확화 필요\n\n9. **IRRELEVANT (무관)**\n   - 설명: 부동산과 전혀 관련 없는 질문\n   - 예시: "날씨 어때?", "저녁 뭐 먹지?", "주식 추천해줘"\n   - 처리: 부동산 관련 질문을 유도\n\n## 복합 질문 예시와 분석:\n\n### 예시 1: "강남구 아파트 시세 알려주고 전세자금대출 가능한지도 확인해줘"\n- 주 의도: MARKET_INQUIRY (시세 조회가 먼저 필요)\n- 부가 의도: LOAN_CONSULT (대출 확인)\n- 분해: ["강남구 아파트 시세 조회", "전세자금대출 가능 여부 확인"]\n\n### 예시 2: "이 계약서 검토해서 위험한 부분 있는지 알려주고 수정 제안도 해줘"\n- 주 의도: CONTRACT_REVIEW (계약서 검토)\n- 부가 의도: RISK_ANALYSIS (위험 분석)\n- 분해: ["계약서 전체 검토", "위험 요소 식별", "수정사항 제안"]\n\n### 예시 3: "서초동 전세가 확인하고 법적으로 문제없는지도 봐줘"\n- 주 의도: MARKET_INQUIRY (시세 확인)\n- 부가 의도: LEGAL_CONSULT (법적 검토)\n- 분해: ["서초동 전세가 조회", "법적 이슈 검토"]\n\n## 응답 형식 (JSON 형식으로 응답):\n\n{\n    "intent": "LEGAL_CONSULT",\n    "confidence": 0.9,\n    "keywords": ["전세금", "인상", "제한"],\n    "sub_intents": [],\n    "is_compound": false,\n    "decomposed_tasks": [],\n    "entities": {\n        "location": "강남구",\n        "price": "5억",\n        "contract_type": "전세",\n        "date": "2024년",\n        "area": "84㎡",\n        "action_verbs": ["확인", "검토"]\n    },\n    "reasoning": "전세금 인상에 대한 법률 질문이므로 LEGAL_CONSULT로 분류"\n}\n\n응답 규칙:\n- intent: 위 9개 카테고리 중 하나 (대문자_언더스코어 형식)\n- confidence: 0.0~1.0 (0.8 이상이면 매우 확실, 0.5 미만이면 불확실)\n- keywords: 추출된 주요 키워드 목록\n- sub_intents: 복합 질문일 경우 부가적인 의도들\n- is_compound: 복합 질문 여부 (true/false)\n- decomposed_tasks: 복합 질문을 분해한 개별 작업들\n- entities: 추출된 엔티티 정보\n- reasoning: 분류한 이유와 근거 (상세하게)\n\n## 판단 가이드:\n- 여러 의도가 섞여있다면, 가장 주된 의도를 intent에, 나머지를 sub_intents에 기록\n- "그리고", "또한", "함께", "같이" 등의 연결어가 있으면 복합 질문일 가능성 높음\n- 법률 관련 키워드가 있으면 LEGAL_CONSULT 우선\n- 가격/시세 언급이 명확하면 MARKET_INQUIRY\n- 계약서라는 단어와 함께 "작성/만들기"가 있으면 CONTRACT_CREATION\n- 계약서라는 단어와 함께 "검토/확인"이 있으면 CONTRACT_REVIEW\n- 불확실하면 confidence를 낮게 설정하고 UNCLEAR 선택\n- 복합 질문은 is_compound를 true로 설정하고 개별 작업으로 분해\n\n분석할 질문: 계약 갱신 거부 가능한가요?'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 14:40:00,233 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 14:40:00,233 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 14:40:00,233 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 14:40:00,233 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 14:40:00,233 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 14:40:00,233 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 14:40:03,508 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 05:40:03 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'2997'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'3046'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9944'), (b'x-ratelimit-remaining-tokens', b'198318'), (b'x-ratelimit-reset-requests', b'7m58.927s'), (b'x-ratelimit-reset-tokens', b'504ms'), (b'x-request-id', b'req_47ef668461794ef98504be21f0295720'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989a94ed49ffe9fb-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 14:40:03,508 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 14:40:03,508 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 14:40:03,508 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 14:40:03,508 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 14:40:03,508 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 14:40:03,508 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 05:40:03 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '2997', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '3046', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9944', 'x-ratelimit-remaining-tokens': '198318', 'x-ratelimit-reset-requests': '7m58.927s', 'x-ratelimit-reset-tokens': '504ms', 'x-request-id': 'req_47ef668461794ef98504be21f0295720', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989a94ed49ffe9fb-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 14:40:03,508 - openai._base_client - DEBUG - request_id: req_47ef668461794ef98504be21f0295720
2025-10-05 14:40:03,509 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: intent_analysis | Model: gpt-4o-mini-2024-07-18 | Tokens: 2034 (prompt: 1920, completion: 114)
2025-10-05 14:40:03,509 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM Intent Analysis Result: {'intent': 'LEGAL_CONSULT', 'confidence': 0.9, 'keywords': ['계약', '갱신', '거부'], 'sub_intents': [], 'is_compound': False, 'decomposed_tasks': [], 'entities': {'action_verbs': ['가능', '거부', '확인']}, 'reasoning': '계약 갱신 거부에 대한 법률 질문이므로 LEGAL_CONSULT로 분류'}
2025-10-05 14:40:03,509 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-786b4313-fa65-418b-8afe-1811987c34c8', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 Agent 선택 전문가입니다.\n사용자의 요청에 가장 적합한 Agent/Team을 선택하는 것이 목표입니다.\n\n## 현재 상황\n\n**사용자 질문:** 계약 갱신 거부 가능한가요?\n**분석된 의도:** 법률상담\n**추출된 키워드:** [\'계약\', \'갱신\', \'거부\']\n\n## 사용 가능한 Agent/Team 정보\n\n{\'search_team\': {\'name\': \'search_team\', \'capabilities\': \'법률 검색, 부동산 시세 조회, 대출 상품 검색\', \'tools\': [\'legal_search\', \'market_data\', \'loan_data\'], \'use_cases\': [\'법률 상담\', \'시세 조회\', \'대출 정보\']}, \'analysis_team\': {\'name\': \'analysis_team\', \'capabilities\': \'데이터 분석, 리스크 평가, 인사이트 생성, 추천\', \'tools\': [\'data_analyzer\', \'risk_evaluator\'], \'use_cases\': [\'시장 분석\', \'리스크 평가\', \'투자 분석\']}, \'document_team\': {\'name\': \'document_team\', \'capabilities\': \'계약서 작성, 문서 생성, 문서 검토\', \'tools\': [\'document_generator\', \'contract_reviewer\'], \'use_cases\': [\'계약서 작성\', \'문서 검토\']}}\n\n## Agent 역할 및 상세 가이드\n\n### 1. search_team (검색 팀)\n- **주요 기능**: 정보 검색 및 데이터 수집\n- **전문 분야**:\n  * 법률 정보 검색 (전세법, 임대차보호법, 부동산 관련 법규)\n  * 부동산 시세 조회 (매매가, 전세가, 월세, 실거래가)\n  * 대출 상품 정보 검색 (금리, 한도, 조건)\n  * 지역 정보 및 인프라 조회\n- **도구**: legal_search, market_data, loan_data\n- **적합한 작업**: 정보 조회, 데이터 수집, 법률 확인, 시세 파악\n- **예시**:\n  * "전세금 5% 인상 가능한가요?"\n  * "강남구 아파트 전세 시세"\n  * "전세자금대출 한도 얼마?"\n\n### 2. analysis_team (분석 팀)\n- **주요 기능**: 데이터 분석 및 평가\n- **전문 분야**:\n  * 시장 동향 분석 (상승률, 하락률, 추세)\n  * 리스크 평가 (계약, 투자 위험도)\n  * 투자 수익률 계산 (ROI, 월세 수익률)\n  * 대출 한도 및 조건 분석 (LTV, DTI, DSR)\n  * 비교 분석 (지역별, 상품별)\n- **도구**: data_analyzer, risk_evaluator, calculator\n- **적합한 작업**: 데이터 분석, 리스크 평가, 계산, 비교, 예측\n- **의존성**: 보통 search_team의 데이터가 필요\n- **예시**:\n  * "이 지역 투자 가치 분석해줘"\n  * "계약 리스크 평가해줘"\n  * "대출 가능 금액 계산해줘"\n\n### 3. document_team (문서 팀)\n- **주요 기능**: 문서 생성 및 관리\n- **전문 분야**:\n  * 계약서 작성 (임대차, 매매, 전세)\n  * 문서 템플릿 관리\n  * 특약사항 생성\n  * 계약서 수정안 작성\n  * 법률 문서 검토\n- **도구**: document_generator, contract_template, contract_reviewer\n- **적합한 작업**: 문서 작성, 계약서 생성, 문서 수정, 검토\n- **예시**:\n  * "임대차계약서 작성해줘"\n  * "특약사항 추가해줘"\n  * "계약서 수정안 만들어줘"\n\n## Agent 선택 전략\n\n### 1단계: 작업 유형 식별\n```\n정보 필요 → search_team\n분석/계산 필요 → analysis_team\n문서 작성 필요 → document_team\n```\n\n### 2단계: 의존성 분석\n```\n독립적 작업 → 단일 팀\n순차적 의존 → 여러 팀 (순서 중요)\n병렬 가능 → 여러 팀 (순서 무관)\n```\n\n### 3단계: 최적화\n```\n중복 제거 → 가장 적합한 팀만 선택\n효율성 → 병렬 처리 가능한 경우 표시\n```\n\n## 의도별 Agent 매핑 가이드\n\n| 의도 (Intent) | 추천 Agent 조합 | 이유 |\n|--------------|-----------------|------|\n| LEGAL_CONSULT | ["search_team"] | 법률 정보 검색 전문 |\n| MARKET_INQUIRY | ["search_team"] | 시세 데이터 조회 |\n| LOAN_CONSULT | ["search_team", "analysis_team"] | 대출 정보 조회 후 분석 |\n| CONTRACT_CREATION | ["document_team"] | 문서 생성 전문 |\n| CONTRACT_REVIEW | ["search_team", "analysis_team"] | 법률 검토 및 리스크 분석 |\n| COMPREHENSIVE | ["search_team", "analysis_team"] | 종합 정보 수집 및 분석 |\n| RISK_ANALYSIS | ["analysis_team"] | 리스크 평가 전문 |\n| UNCLEAR | ["search_team", "analysis_team"] | 포괄적 대응 |\n\n## 복합 질문 처리 예시\n\n### 예시 1: 순차적 처리\n질문: "강남구 시세 확인하고 투자 가치 분석해줘"\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "먼저 search_team이 시세 데이터를 수집하고, 그 결과를 analysis_team이 분석하여 투자 가치 평가"\n}\n```\n\n### 예시 2: 병렬 처리 가능\n질문: "법률 정보와 시세 정보 모두 알려줘"\n```json\n{\n    "selected_agents": ["search_team"],\n    "reasoning": "search_team이 법률과 시세 정보를 병렬로 조회 가능. 두 작업이 독립적이므로 동시 처리"\n}\n```\n\n### 예시 3: 3단계 파이프라인\n질문: "시세 조회하고 분석한 후 계약서 작성해줘"\n```json\n{\n    "selected_agents": ["search_team", "analysis_team", "document_team"],\n    "reasoning": "search_team이 데이터 수집 → analysis_team이 분석 → document_team이 분석 결과 기반 계약서 작성"\n}\n```\n\n## 응답 형식 (JSON)\n\n{\n    "selected_agents": ["선택된 agent/team 목록"],\n    "reasoning": "선택 이유를 구체적으로 설명. 각 Agent의 역할과 처리 순서 포함",\n    "coordination": "single/sequential/parallel/pipeline",\n    "dependencies": {"agent2": ["agent1"]},\n    "estimated_time": 30,\n    "confidence": 0.9\n}\n\n## 선택 가이드라인\n\n1. **최소 Agent 원칙**: 가능한 적은 수의 Agent로 처리\n2. **전문성 우선**: 해당 작업에 가장 전문적인 Agent 선택\n3. **효율성 고려**: 병렬 처리 가능한 경우 명시\n4. **의존성 관리**: 데이터 흐름을 고려한 순서 지정\n5. **폴백 전략**: 불확실한 경우 ["search_team", "analysis_team"] 조합\n\n## 주의사항\n\n- selected_agents는 반드시 배열 형태\n- Agent 이름은 정확히: "search_team", "analysis_team", "document_team"\n- 최소 1개, 최대 3개 선택\n- 순서는 실행 우선순위 (앞에 있을수록 먼저 실행)\n- reasoning은 상세하고 논리적으로 작성\n- coordination 필드로 실행 방식 명시\n- 복합 질문의 경우 의존성 관계 명확히 표시'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 14:40:03,510 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 14:40:03,510 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 14:40:03,510 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 14:40:03,510 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 14:40:03,510 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 14:40:03,510 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 14:40:05,455 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 05:40:05 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'1640'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'1662'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9943'), (b'x-ratelimit-remaining-tokens', b'198438'), (b'x-ratelimit-reset-requests', b'8m4.309s'), (b'x-ratelimit-reset-tokens', b'468ms'), (b'x-request-id', b'req_7a999393fd604518839e67f061127d45'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989a9501ce9ae9fb-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 14:40:05,456 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 14:40:05,457 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 14:40:05,457 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 14:40:05,457 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 14:40:05,457 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 14:40:05,457 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 05:40:05 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '1640', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '1662', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9943', 'x-ratelimit-remaining-tokens': '198438', 'x-ratelimit-reset-requests': '8m4.309s', 'x-ratelimit-reset-tokens': '468ms', 'x-request-id': 'req_7a999393fd604518839e67f061127d45', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989a9501ce9ae9fb-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 14:40:05,457 - openai._base_client - DEBUG - request_id: req_7a999393fd604518839e67f061127d45
2025-10-05 14:40:05,457 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: agent_selection | Model: gpt-4o-mini-2024-07-18 | Tokens: 1794 (prompt: 1700, completion: 94)
2025-10-05 14:40:05,458 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM agent selection reasoning: 사용자의 질문은 계약 갱신 거부 가능성에 대한 법률 상담을 요구하고 있습니다. search_team은 법률 정보 검색 전문으로, 계약 갱신과 관련된 법률 정보를 제공할 수 있습니다.
2025-10-05 14:40:05,458 - app.service_agent.cognitive_agents.planning_agent - INFO - ✅ Primary LLM selected agents: ['search_team']
2025-10-05 14:40:05,458 - __main__ - INFO -   의도: 법률상담
2025-10-05 14:40:05,458 - __main__ - INFO -   신뢰도: 0.90
2025-10-05 14:40:05,458 - __main__ - INFO -   추천 Agent: ['search_team']
2025-10-05 14:40:05,458 - __main__ - INFO - 
[Step 2] Query Decomposition...
2025-10-05 14:40:05,458 - app.service_agent.cognitive_agents.query_decomposer - INFO - Decomposing query: 계약 갱신 거부 가능한가요?...
2025-10-05 14:40:05,458 - app.service_agent.cognitive_agents.query_decomposer - INFO - Query is simple, no decomposition needed
2025-10-05 14:40:05,458 - __main__ - INFO -   복합 질문: False
2025-10-05 14:40:05,458 - __main__ - INFO -   작업 수: 1
2025-10-05 14:40:05,458 - __main__ - INFO -   실행 모드: sequential
2025-10-05 14:40:05,458 - __main__ - INFO - 
[Step 3] Execution Plan 생성...
2025-10-05 14:40:05,458 - app.service_agent.cognitive_agents.planning_agent - INFO - Creating execution plan for intent: 법률상담
2025-10-05 14:40:05,458 - app.service_agent.cognitive_agents.planning_agent - WARNING - AgentRegistry is empty, using default teams
2025-10-05 14:40:05,458 - app.service_agent.cognitive_agents.planning_agent - DEBUG - Suggested agents: ['search_team']
2025-10-05 14:40:05,458 - app.service_agent.cognitive_agents.planning_agent - DEBUG - Available agents: ['search_team', 'analysis_team', 'document_team']
2025-10-05 14:40:05,458 - app.service_agent.cognitive_agents.planning_agent - INFO - Selected agents/teams for execution: ['search_team']
2025-10-05 14:40:05,458 - __main__ - INFO -   전략: sequential
2025-10-05 14:40:05,458 - __main__ - INFO -   단계 수: 1
2025-10-05 14:40:05,458 - __main__ - INFO - 
✓ 테스트 성공 (소요시간: 5.23초)
2025-10-05 14:40:05,459 - __main__ - INFO - 
결과 저장: C:\kdy\Projects\holmesnyangz\beta_v001\backend\app\service_agent\reports\phase1_test_results.json
2025-10-05 14:40:05,459 - __main__ - INFO - 
================================================================================
2025-10-05 14:40:05,459 - __main__ - INFO - [6] 단일 질문 테스트: S006
2025-10-05 14:40:05,459 - __main__ - INFO - 질문: 서초구 아파트 매매 시세는?
2025-10-05 14:40:05,459 - __main__ - INFO - ================================================================================
2025-10-05 14:40:05,459 - __main__ - INFO - 
[Step 1] Intent 분석...
2025-10-05 14:40:05,459 - app.service_agent.cognitive_agents.planning_agent - INFO - Analyzing intent for query: 서초구 아파트 매매 시세는?...
2025-10-05 14:40:05,459 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-5822f592-cb0f-4fa9-b286-d5395484cb32', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 의도 분석 전문가입니다.\n사용자의 질문을 정확히 이해하고, 어떤 종류의 도움이 필요한지 분류해야 합니다.\n\n## 중요: 복합 질문 처리\n복합적인 질문(여러 의도가 섞인 질문)의 경우, 가장 핵심적인 의도를 파악하되,\nsub_intents 필드에 부가적인 의도들도 함께 기록해주세요.\n\n## 분류 카테고리 설명:\n\n1. **LEGAL_CONSULT (법률상담)**\n   - 설명: 부동산 관련 법률, 권리, 의무에 대한 질문\n   - 예시:\n     * 단순: "전세금 5% 인상이 가능한가요?", "임대차계약 갱신 거부할 수 있나요?"\n     * 복합: "전세금 인상 가능한지 확인하고 법적 근거도 알려주세요"\n   - 키워드: 법, 전세, 임대, 보증금, 계약, 권리, 의무, 갱신, 임차인, 임대인, 법률, 규정, 조항\n   - 필요한 처리: 법률 데이터베이스 검색, 관련 법조항 찾기\n\n2. **MARKET_INQUIRY (시세조회)**\n   - 설명: 부동산 시장 가격, 시세, 거래 동향에 대한 질문\n   - 예시:\n     * 단순: "강남구 아파트 전세 시세 알려주세요", "서초동 매매가 얼마나 올랐나요?"\n     * 복합: "강남구 시세 확인하고 대출 가능 금액도 계산해줘"\n   - 키워드: 시세, 가격, 매매가, 전세가, 월세, 시장, 동향, 평균, 지역명, 상승률, 하락률\n   - 필요한 처리: 부동산 시세 데이터 조회, 지역별 가격 분석\n\n3. **LOAN_CONSULT (대출상담)**\n   - 설명: 주택담보대출, 전세자금대출 등 금융 관련 질문\n   - 예시:\n     * 단순: "전세자금대출 한도가 얼마인가요?", "LTV가 뭔가요?"\n     * 복합: "대출 한도 확인하고 금리 비교도 해주세요"\n   - 키워드: 대출, 금리, 한도, 조건, 상환, LTV, DTI, DSR, 담보, 금융, 은행\n   - 필요한 처리: 대출 상품 조회, 금리 정보 검색, 한도 계산\n\n4. **CONTRACT_CREATION (계약서작성)**\n   - 설명: 새로운 계약서나 문서를 작성해달라는 요청\n   - 예시:\n     * 단순: "임대차계약서 작성해주세요", "전세계약서 초안 만들어주세요"\n     * 복합: "계약서 작성하고 주의사항도 검토해주세요"\n   - 키워드: 작성, 만들, 생성, 초안, 계약서, 문서, 양식\n   - 필요한 처리: 문서 생성 에이전트 호출, 템플릿 기반 작성\n\n5. **CONTRACT_REVIEW (계약서검토)**\n   - 설명: 기존 계약서나 문서를 검토해달라는 요청\n   - 예시:\n     * 단순: "이 계약서 검토해주세요", "특약사항 문제없나요?"\n     * 복합: "계약서 검토하고 수정사항도 제안해주세요"\n   - 키워드: 검토, 확인, 점검, 리뷰, 분석해, 살펴봐, 체크\n   - 필요한 처리: 문서 분석, 위험 요소 식별, 개선사항 제안\n\n6. **COMPREHENSIVE (종합분석)**\n   - 설명: 여러 측면을 종합적으로 분석해달라는 요청\n   - 예시:\n     * 단순: "이 물건 전체적으로 분석해주세요"\n     * 복합: "시세, 법률, 대출 모두 검토해서 종합 의견 주세요"\n   - 키워드: 종합, 전체, 모든, 전반적, 종합적, 평가, 분석\n   - 필요한 처리: 다중 데이터 소스 통합 분석\n\n7. **RISK_ANALYSIS (리스크분석)**\n   - 설명: 위험 요소나 주의사항에 대한 질문\n   - 예시:\n     * 단순: "이 계약 위험한가요?", "주의할 점 알려주세요"\n     * 복합: "리스크 분석하고 대안도 제시해주세요"\n   - 키워드: 위험, 리스크, 주의, 문제점, 조심, 걱정, 우려\n   - 필요한 처리: 위험 요소 분석, 주의사항 추출\n\n8. **UNCLEAR (불분명)**\n   - 설명: 의도를 명확히 파악하기 어려운 질문\n   - 예시: "이거 좀 봐주세요", "어떻게 해야 할까요?", "도와주세요"\n   - 처리: 추가 질문으로 의도 명확화 필요\n\n9. **IRRELEVANT (무관)**\n   - 설명: 부동산과 전혀 관련 없는 질문\n   - 예시: "날씨 어때?", "저녁 뭐 먹지?", "주식 추천해줘"\n   - 처리: 부동산 관련 질문을 유도\n\n## 복합 질문 예시와 분석:\n\n### 예시 1: "강남구 아파트 시세 알려주고 전세자금대출 가능한지도 확인해줘"\n- 주 의도: MARKET_INQUIRY (시세 조회가 먼저 필요)\n- 부가 의도: LOAN_CONSULT (대출 확인)\n- 분해: ["강남구 아파트 시세 조회", "전세자금대출 가능 여부 확인"]\n\n### 예시 2: "이 계약서 검토해서 위험한 부분 있는지 알려주고 수정 제안도 해줘"\n- 주 의도: CONTRACT_REVIEW (계약서 검토)\n- 부가 의도: RISK_ANALYSIS (위험 분석)\n- 분해: ["계약서 전체 검토", "위험 요소 식별", "수정사항 제안"]\n\n### 예시 3: "서초동 전세가 확인하고 법적으로 문제없는지도 봐줘"\n- 주 의도: MARKET_INQUIRY (시세 확인)\n- 부가 의도: LEGAL_CONSULT (법적 검토)\n- 분해: ["서초동 전세가 조회", "법적 이슈 검토"]\n\n## 응답 형식 (JSON 형식으로 응답):\n\n{\n    "intent": "LEGAL_CONSULT",\n    "confidence": 0.9,\n    "keywords": ["전세금", "인상", "제한"],\n    "sub_intents": [],\n    "is_compound": false,\n    "decomposed_tasks": [],\n    "entities": {\n        "location": "강남구",\n        "price": "5억",\n        "contract_type": "전세",\n        "date": "2024년",\n        "area": "84㎡",\n        "action_verbs": ["확인", "검토"]\n    },\n    "reasoning": "전세금 인상에 대한 법률 질문이므로 LEGAL_CONSULT로 분류"\n}\n\n응답 규칙:\n- intent: 위 9개 카테고리 중 하나 (대문자_언더스코어 형식)\n- confidence: 0.0~1.0 (0.8 이상이면 매우 확실, 0.5 미만이면 불확실)\n- keywords: 추출된 주요 키워드 목록\n- sub_intents: 복합 질문일 경우 부가적인 의도들\n- is_compound: 복합 질문 여부 (true/false)\n- decomposed_tasks: 복합 질문을 분해한 개별 작업들\n- entities: 추출된 엔티티 정보\n- reasoning: 분류한 이유와 근거 (상세하게)\n\n## 판단 가이드:\n- 여러 의도가 섞여있다면, 가장 주된 의도를 intent에, 나머지를 sub_intents에 기록\n- "그리고", "또한", "함께", "같이" 등의 연결어가 있으면 복합 질문일 가능성 높음\n- 법률 관련 키워드가 있으면 LEGAL_CONSULT 우선\n- 가격/시세 언급이 명확하면 MARKET_INQUIRY\n- 계약서라는 단어와 함께 "작성/만들기"가 있으면 CONTRACT_CREATION\n- 계약서라는 단어와 함께 "검토/확인"이 있으면 CONTRACT_REVIEW\n- 불확실하면 confidence를 낮게 설정하고 UNCLEAR 선택\n- 복합 질문은 is_compound를 true로 설정하고 개별 작업으로 분해\n\n분석할 질문: 서초구 아파트 매매 시세는?'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 14:40:05,460 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 14:40:05,460 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 14:40:05,460 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 14:40:05,460 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 14:40:05,460 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 14:40:05,460 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 14:40:08,730 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 05:40:08 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'3059'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'3082'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9943'), (b'x-ratelimit-remaining-tokens', b'198318'), (b'x-ratelimit-reset-requests', b'8m10.996s'), (b'x-ratelimit-reset-tokens', b'504ms'), (b'x-request-id', b'req_b4bf357a170949709a73b9ad8baee8c9'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989a950dfebbe9fb-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 14:40:08,731 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 14:40:08,731 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 14:40:08,737 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 14:40:08,737 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 14:40:08,737 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 14:40:08,738 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 05:40:08 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '3059', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '3082', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9943', 'x-ratelimit-remaining-tokens': '198318', 'x-ratelimit-reset-requests': '8m10.996s', 'x-ratelimit-reset-tokens': '504ms', 'x-request-id': 'req_b4bf357a170949709a73b9ad8baee8c9', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989a950dfebbe9fb-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 14:40:08,738 - openai._base_client - DEBUG - request_id: req_b4bf357a170949709a73b9ad8baee8c9
2025-10-05 14:40:08,739 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: intent_analysis | Model: gpt-4o-mini-2024-07-18 | Tokens: 2049 (prompt: 1921, completion: 128)
2025-10-05 14:40:08,739 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM Intent Analysis Result: {'intent': 'MARKET_INQUIRY', 'confidence': 0.9, 'keywords': ['서초구', '아파트', '매매', '시세'], 'sub_intents': [], 'is_compound': False, 'decomposed_tasks': [], 'entities': {'location': '서초구', 'property_type': '아파트', 'transaction_type': '매매'}, 'reasoning': '서초구 아파트 매매 시세에 대한 질문이므로 MARKET_INQUIRY로 분류'}
2025-10-05 14:40:08,740 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-3fd33735-14b2-4a0c-be89-2798dc2c9a7f', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 Agent 선택 전문가입니다.\n사용자의 요청에 가장 적합한 Agent/Team을 선택하는 것이 목표입니다.\n\n## 현재 상황\n\n**사용자 질문:** 서초구 아파트 매매 시세는?\n**분석된 의도:** 시세조회\n**추출된 키워드:** [\'서초구\', \'아파트\', \'매매\', \'시세\']\n\n## 사용 가능한 Agent/Team 정보\n\n{\'search_team\': {\'name\': \'search_team\', \'capabilities\': \'법률 검색, 부동산 시세 조회, 대출 상품 검색\', \'tools\': [\'legal_search\', \'market_data\', \'loan_data\'], \'use_cases\': [\'법률 상담\', \'시세 조회\', \'대출 정보\']}, \'analysis_team\': {\'name\': \'analysis_team\', \'capabilities\': \'데이터 분석, 리스크 평가, 인사이트 생성, 추천\', \'tools\': [\'data_analyzer\', \'risk_evaluator\'], \'use_cases\': [\'시장 분석\', \'리스크 평가\', \'투자 분석\']}, \'document_team\': {\'name\': \'document_team\', \'capabilities\': \'계약서 작성, 문서 생성, 문서 검토\', \'tools\': [\'document_generator\', \'contract_reviewer\'], \'use_cases\': [\'계약서 작성\', \'문서 검토\']}}\n\n## Agent 역할 및 상세 가이드\n\n### 1. search_team (검색 팀)\n- **주요 기능**: 정보 검색 및 데이터 수집\n- **전문 분야**:\n  * 법률 정보 검색 (전세법, 임대차보호법, 부동산 관련 법규)\n  * 부동산 시세 조회 (매매가, 전세가, 월세, 실거래가)\n  * 대출 상품 정보 검색 (금리, 한도, 조건)\n  * 지역 정보 및 인프라 조회\n- **도구**: legal_search, market_data, loan_data\n- **적합한 작업**: 정보 조회, 데이터 수집, 법률 확인, 시세 파악\n- **예시**:\n  * "전세금 5% 인상 가능한가요?"\n  * "강남구 아파트 전세 시세"\n  * "전세자금대출 한도 얼마?"\n\n### 2. analysis_team (분석 팀)\n- **주요 기능**: 데이터 분석 및 평가\n- **전문 분야**:\n  * 시장 동향 분석 (상승률, 하락률, 추세)\n  * 리스크 평가 (계약, 투자 위험도)\n  * 투자 수익률 계산 (ROI, 월세 수익률)\n  * 대출 한도 및 조건 분석 (LTV, DTI, DSR)\n  * 비교 분석 (지역별, 상품별)\n- **도구**: data_analyzer, risk_evaluator, calculator\n- **적합한 작업**: 데이터 분석, 리스크 평가, 계산, 비교, 예측\n- **의존성**: 보통 search_team의 데이터가 필요\n- **예시**:\n  * "이 지역 투자 가치 분석해줘"\n  * "계약 리스크 평가해줘"\n  * "대출 가능 금액 계산해줘"\n\n### 3. document_team (문서 팀)\n- **주요 기능**: 문서 생성 및 관리\n- **전문 분야**:\n  * 계약서 작성 (임대차, 매매, 전세)\n  * 문서 템플릿 관리\n  * 특약사항 생성\n  * 계약서 수정안 작성\n  * 법률 문서 검토\n- **도구**: document_generator, contract_template, contract_reviewer\n- **적합한 작업**: 문서 작성, 계약서 생성, 문서 수정, 검토\n- **예시**:\n  * "임대차계약서 작성해줘"\n  * "특약사항 추가해줘"\n  * "계약서 수정안 만들어줘"\n\n## Agent 선택 전략\n\n### 1단계: 작업 유형 식별\n```\n정보 필요 → search_team\n분석/계산 필요 → analysis_team\n문서 작성 필요 → document_team\n```\n\n### 2단계: 의존성 분석\n```\n독립적 작업 → 단일 팀\n순차적 의존 → 여러 팀 (순서 중요)\n병렬 가능 → 여러 팀 (순서 무관)\n```\n\n### 3단계: 최적화\n```\n중복 제거 → 가장 적합한 팀만 선택\n효율성 → 병렬 처리 가능한 경우 표시\n```\n\n## 의도별 Agent 매핑 가이드\n\n| 의도 (Intent) | 추천 Agent 조합 | 이유 |\n|--------------|-----------------|------|\n| LEGAL_CONSULT | ["search_team"] | 법률 정보 검색 전문 |\n| MARKET_INQUIRY | ["search_team"] | 시세 데이터 조회 |\n| LOAN_CONSULT | ["search_team", "analysis_team"] | 대출 정보 조회 후 분석 |\n| CONTRACT_CREATION | ["document_team"] | 문서 생성 전문 |\n| CONTRACT_REVIEW | ["search_team", "analysis_team"] | 법률 검토 및 리스크 분석 |\n| COMPREHENSIVE | ["search_team", "analysis_team"] | 종합 정보 수집 및 분석 |\n| RISK_ANALYSIS | ["analysis_team"] | 리스크 평가 전문 |\n| UNCLEAR | ["search_team", "analysis_team"] | 포괄적 대응 |\n\n## 복합 질문 처리 예시\n\n### 예시 1: 순차적 처리\n질문: "강남구 시세 확인하고 투자 가치 분석해줘"\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "먼저 search_team이 시세 데이터를 수집하고, 그 결과를 analysis_team이 분석하여 투자 가치 평가"\n}\n```\n\n### 예시 2: 병렬 처리 가능\n질문: "법률 정보와 시세 정보 모두 알려줘"\n```json\n{\n    "selected_agents": ["search_team"],\n    "reasoning": "search_team이 법률과 시세 정보를 병렬로 조회 가능. 두 작업이 독립적이므로 동시 처리"\n}\n```\n\n### 예시 3: 3단계 파이프라인\n질문: "시세 조회하고 분석한 후 계약서 작성해줘"\n```json\n{\n    "selected_agents": ["search_team", "analysis_team", "document_team"],\n    "reasoning": "search_team이 데이터 수집 → analysis_team이 분석 → document_team이 분석 결과 기반 계약서 작성"\n}\n```\n\n## 응답 형식 (JSON)\n\n{\n    "selected_agents": ["선택된 agent/team 목록"],\n    "reasoning": "선택 이유를 구체적으로 설명. 각 Agent의 역할과 처리 순서 포함",\n    "coordination": "single/sequential/parallel/pipeline",\n    "dependencies": {"agent2": ["agent1"]},\n    "estimated_time": 30,\n    "confidence": 0.9\n}\n\n## 선택 가이드라인\n\n1. **최소 Agent 원칙**: 가능한 적은 수의 Agent로 처리\n2. **전문성 우선**: 해당 작업에 가장 전문적인 Agent 선택\n3. **효율성 고려**: 병렬 처리 가능한 경우 명시\n4. **의존성 관리**: 데이터 흐름을 고려한 순서 지정\n5. **폴백 전략**: 불확실한 경우 ["search_team", "analysis_team"] 조합\n\n## 주의사항\n\n- selected_agents는 반드시 배열 형태\n- Agent 이름은 정확히: "search_team", "analysis_team", "document_team"\n- 최소 1개, 최대 3개 선택\n- 순서는 실행 우선순위 (앞에 있을수록 먼저 실행)\n- reasoning은 상세하고 논리적으로 작성\n- coordination 필드로 실행 방식 명시\n- 복합 질문의 경우 의존성 관계 명확히 표시'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 14:40:08,740 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 14:40:08,740 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 14:40:08,740 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 14:40:08,740 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 14:40:08,741 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 14:40:08,741 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 14:40:10,896 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 05:40:10 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'1951'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'1967'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9942'), (b'x-ratelimit-remaining-tokens', b'198433'), (b'x-ratelimit-reset-requests', b'8m16.359s'), (b'x-ratelimit-reset-tokens', b'469ms'), (b'x-request-id', b'req_38782df07d374ef98e5055d60ae20b80'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989a95227b2de9fb-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 14:40:10,897 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 14:40:10,897 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 14:40:10,898 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 14:40:10,898 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 14:40:10,898 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 14:40:10,898 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 05:40:10 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '1951', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '1967', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9942', 'x-ratelimit-remaining-tokens': '198433', 'x-ratelimit-reset-requests': '8m16.359s', 'x-ratelimit-reset-tokens': '469ms', 'x-request-id': 'req_38782df07d374ef98e5055d60ae20b80', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989a95227b2de9fb-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 14:40:10,899 - openai._base_client - DEBUG - request_id: req_38782df07d374ef98e5055d60ae20b80
2025-10-05 14:40:10,899 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: agent_selection | Model: gpt-4o-mini-2024-07-18 | Tokens: 1811 (prompt: 1704, completion: 107)
2025-10-05 14:40:10,899 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM agent selection reasoning: 사용자가 서초구 아파트 매매 시세를 조회하고자 하므로, 부동산 시세 조회에 전문화된 search_team이 가장 적합합니다. 이 팀은 매매가, 전세가, 실거래가 등의 시세 정보를 제공할 수 있습니다.
2025-10-05 14:40:10,899 - app.service_agent.cognitive_agents.planning_agent - INFO - ✅ Primary LLM selected agents: ['search_team']
2025-10-05 14:40:10,899 - __main__ - INFO -   의도: 시세조회
2025-10-05 14:40:10,899 - __main__ - INFO -   신뢰도: 0.90
2025-10-05 14:40:10,899 - __main__ - INFO -   추천 Agent: ['search_team']
2025-10-05 14:40:10,899 - __main__ - INFO - 
[Step 2] Query Decomposition...
2025-10-05 14:40:10,899 - app.service_agent.cognitive_agents.query_decomposer - INFO - Decomposing query: 서초구 아파트 매매 시세는?...
2025-10-05 14:40:10,899 - app.service_agent.cognitive_agents.query_decomposer - INFO - Query is simple, no decomposition needed
2025-10-05 14:40:10,899 - __main__ - INFO -   복합 질문: False
2025-10-05 14:40:10,899 - __main__ - INFO -   작업 수: 1
2025-10-05 14:40:10,899 - __main__ - INFO -   실행 모드: sequential
2025-10-05 14:40:10,899 - __main__ - INFO - 
[Step 3] Execution Plan 생성...
2025-10-05 14:40:10,899 - app.service_agent.cognitive_agents.planning_agent - INFO - Creating execution plan for intent: 시세조회
2025-10-05 14:40:10,899 - app.service_agent.cognitive_agents.planning_agent - WARNING - AgentRegistry is empty, using default teams
2025-10-05 14:40:10,899 - app.service_agent.cognitive_agents.planning_agent - DEBUG - Suggested agents: ['search_team']
2025-10-05 14:40:10,899 - app.service_agent.cognitive_agents.planning_agent - DEBUG - Available agents: ['search_team', 'analysis_team', 'document_team']
2025-10-05 14:40:10,899 - app.service_agent.cognitive_agents.planning_agent - INFO - Selected agents/teams for execution: ['search_team']
2025-10-05 14:40:10,899 - __main__ - INFO -   전략: sequential
2025-10-05 14:40:10,899 - __main__ - INFO -   단계 수: 1
2025-10-05 14:40:10,899 - __main__ - INFO - 
✓ 테스트 성공 (소요시간: 5.44초)
2025-10-05 14:40:10,899 - __main__ - INFO - 
================================================================================
2025-10-05 14:40:10,899 - __main__ - INFO - [7] 단일 질문 테스트: S007
2025-10-05 14:40:10,899 - __main__ - INFO - 질문: LTV 비율이 뭔가요?
2025-10-05 14:40:10,899 - __main__ - INFO - ================================================================================
2025-10-05 14:40:10,900 - __main__ - INFO - 
[Step 1] Intent 분석...
2025-10-05 14:40:10,900 - app.service_agent.cognitive_agents.planning_agent - INFO - Analyzing intent for query: LTV 비율이 뭔가요?...
2025-10-05 14:40:10,900 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-5f0ea372-b9c8-4323-85a9-8e4e6cb32cfc', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 의도 분석 전문가입니다.\n사용자의 질문을 정확히 이해하고, 어떤 종류의 도움이 필요한지 분류해야 합니다.\n\n## 중요: 복합 질문 처리\n복합적인 질문(여러 의도가 섞인 질문)의 경우, 가장 핵심적인 의도를 파악하되,\nsub_intents 필드에 부가적인 의도들도 함께 기록해주세요.\n\n## 분류 카테고리 설명:\n\n1. **LEGAL_CONSULT (법률상담)**\n   - 설명: 부동산 관련 법률, 권리, 의무에 대한 질문\n   - 예시:\n     * 단순: "전세금 5% 인상이 가능한가요?", "임대차계약 갱신 거부할 수 있나요?"\n     * 복합: "전세금 인상 가능한지 확인하고 법적 근거도 알려주세요"\n   - 키워드: 법, 전세, 임대, 보증금, 계약, 권리, 의무, 갱신, 임차인, 임대인, 법률, 규정, 조항\n   - 필요한 처리: 법률 데이터베이스 검색, 관련 법조항 찾기\n\n2. **MARKET_INQUIRY (시세조회)**\n   - 설명: 부동산 시장 가격, 시세, 거래 동향에 대한 질문\n   - 예시:\n     * 단순: "강남구 아파트 전세 시세 알려주세요", "서초동 매매가 얼마나 올랐나요?"\n     * 복합: "강남구 시세 확인하고 대출 가능 금액도 계산해줘"\n   - 키워드: 시세, 가격, 매매가, 전세가, 월세, 시장, 동향, 평균, 지역명, 상승률, 하락률\n   - 필요한 처리: 부동산 시세 데이터 조회, 지역별 가격 분석\n\n3. **LOAN_CONSULT (대출상담)**\n   - 설명: 주택담보대출, 전세자금대출 등 금융 관련 질문\n   - 예시:\n     * 단순: "전세자금대출 한도가 얼마인가요?", "LTV가 뭔가요?"\n     * 복합: "대출 한도 확인하고 금리 비교도 해주세요"\n   - 키워드: 대출, 금리, 한도, 조건, 상환, LTV, DTI, DSR, 담보, 금융, 은행\n   - 필요한 처리: 대출 상품 조회, 금리 정보 검색, 한도 계산\n\n4. **CONTRACT_CREATION (계약서작성)**\n   - 설명: 새로운 계약서나 문서를 작성해달라는 요청\n   - 예시:\n     * 단순: "임대차계약서 작성해주세요", "전세계약서 초안 만들어주세요"\n     * 복합: "계약서 작성하고 주의사항도 검토해주세요"\n   - 키워드: 작성, 만들, 생성, 초안, 계약서, 문서, 양식\n   - 필요한 처리: 문서 생성 에이전트 호출, 템플릿 기반 작성\n\n5. **CONTRACT_REVIEW (계약서검토)**\n   - 설명: 기존 계약서나 문서를 검토해달라는 요청\n   - 예시:\n     * 단순: "이 계약서 검토해주세요", "특약사항 문제없나요?"\n     * 복합: "계약서 검토하고 수정사항도 제안해주세요"\n   - 키워드: 검토, 확인, 점검, 리뷰, 분석해, 살펴봐, 체크\n   - 필요한 처리: 문서 분석, 위험 요소 식별, 개선사항 제안\n\n6. **COMPREHENSIVE (종합분석)**\n   - 설명: 여러 측면을 종합적으로 분석해달라는 요청\n   - 예시:\n     * 단순: "이 물건 전체적으로 분석해주세요"\n     * 복합: "시세, 법률, 대출 모두 검토해서 종합 의견 주세요"\n   - 키워드: 종합, 전체, 모든, 전반적, 종합적, 평가, 분석\n   - 필요한 처리: 다중 데이터 소스 통합 분석\n\n7. **RISK_ANALYSIS (리스크분석)**\n   - 설명: 위험 요소나 주의사항에 대한 질문\n   - 예시:\n     * 단순: "이 계약 위험한가요?", "주의할 점 알려주세요"\n     * 복합: "리스크 분석하고 대안도 제시해주세요"\n   - 키워드: 위험, 리스크, 주의, 문제점, 조심, 걱정, 우려\n   - 필요한 처리: 위험 요소 분석, 주의사항 추출\n\n8. **UNCLEAR (불분명)**\n   - 설명: 의도를 명확히 파악하기 어려운 질문\n   - 예시: "이거 좀 봐주세요", "어떻게 해야 할까요?", "도와주세요"\n   - 처리: 추가 질문으로 의도 명확화 필요\n\n9. **IRRELEVANT (무관)**\n   - 설명: 부동산과 전혀 관련 없는 질문\n   - 예시: "날씨 어때?", "저녁 뭐 먹지?", "주식 추천해줘"\n   - 처리: 부동산 관련 질문을 유도\n\n## 복합 질문 예시와 분석:\n\n### 예시 1: "강남구 아파트 시세 알려주고 전세자금대출 가능한지도 확인해줘"\n- 주 의도: MARKET_INQUIRY (시세 조회가 먼저 필요)\n- 부가 의도: LOAN_CONSULT (대출 확인)\n- 분해: ["강남구 아파트 시세 조회", "전세자금대출 가능 여부 확인"]\n\n### 예시 2: "이 계약서 검토해서 위험한 부분 있는지 알려주고 수정 제안도 해줘"\n- 주 의도: CONTRACT_REVIEW (계약서 검토)\n- 부가 의도: RISK_ANALYSIS (위험 분석)\n- 분해: ["계약서 전체 검토", "위험 요소 식별", "수정사항 제안"]\n\n### 예시 3: "서초동 전세가 확인하고 법적으로 문제없는지도 봐줘"\n- 주 의도: MARKET_INQUIRY (시세 확인)\n- 부가 의도: LEGAL_CONSULT (법적 검토)\n- 분해: ["서초동 전세가 조회", "법적 이슈 검토"]\n\n## 응답 형식 (JSON 형식으로 응답):\n\n{\n    "intent": "LEGAL_CONSULT",\n    "confidence": 0.9,\n    "keywords": ["전세금", "인상", "제한"],\n    "sub_intents": [],\n    "is_compound": false,\n    "decomposed_tasks": [],\n    "entities": {\n        "location": "강남구",\n        "price": "5억",\n        "contract_type": "전세",\n        "date": "2024년",\n        "area": "84㎡",\n        "action_verbs": ["확인", "검토"]\n    },\n    "reasoning": "전세금 인상에 대한 법률 질문이므로 LEGAL_CONSULT로 분류"\n}\n\n응답 규칙:\n- intent: 위 9개 카테고리 중 하나 (대문자_언더스코어 형식)\n- confidence: 0.0~1.0 (0.8 이상이면 매우 확실, 0.5 미만이면 불확실)\n- keywords: 추출된 주요 키워드 목록\n- sub_intents: 복합 질문일 경우 부가적인 의도들\n- is_compound: 복합 질문 여부 (true/false)\n- decomposed_tasks: 복합 질문을 분해한 개별 작업들\n- entities: 추출된 엔티티 정보\n- reasoning: 분류한 이유와 근거 (상세하게)\n\n## 판단 가이드:\n- 여러 의도가 섞여있다면, 가장 주된 의도를 intent에, 나머지를 sub_intents에 기록\n- "그리고", "또한", "함께", "같이" 등의 연결어가 있으면 복합 질문일 가능성 높음\n- 법률 관련 키워드가 있으면 LEGAL_CONSULT 우선\n- 가격/시세 언급이 명확하면 MARKET_INQUIRY\n- 계약서라는 단어와 함께 "작성/만들기"가 있으면 CONTRACT_CREATION\n- 계약서라는 단어와 함께 "검토/확인"이 있으면 CONTRACT_REVIEW\n- 불확실하면 confidence를 낮게 설정하고 UNCLEAR 선택\n- 복합 질문은 is_compound를 true로 설정하고 개별 작업으로 분해\n\n분석할 질문: LTV 비율이 뭔가요?'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 14:40:10,900 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 14:40:10,900 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 14:40:10,901 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 14:40:10,901 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 14:40:10,901 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 14:40:10,901 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 14:40:13,133 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 05:40:13 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'1936'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'1953'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9941'), (b'x-ratelimit-remaining-tokens', b'198322'), (b'x-ratelimit-reset-requests', b'8m22.84s'), (b'x-ratelimit-reset-tokens', b'503ms'), (b'x-request-id', b'req_c46fea9ce9b64895b4ef2431046f7837'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989a952ffdc6e9fb-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 14:40:13,133 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 14:40:13,133 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 14:40:13,134 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 14:40:13,134 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 14:40:13,134 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 14:40:13,134 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 05:40:13 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '1936', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '1953', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9941', 'x-ratelimit-remaining-tokens': '198322', 'x-ratelimit-reset-requests': '8m22.84s', 'x-ratelimit-reset-tokens': '503ms', 'x-request-id': 'req_c46fea9ce9b64895b4ef2431046f7837', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989a952ffdc6e9fb-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 14:40:13,134 - openai._base_client - DEBUG - request_id: req_c46fea9ce9b64895b4ef2431046f7837
2025-10-05 14:40:13,134 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: intent_analysis | Model: gpt-4o-mini-2024-07-18 | Tokens: 2021 (prompt: 1920, completion: 101)
2025-10-05 14:40:13,134 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM Intent Analysis Result: {'intent': 'LOAN_CONSULT', 'confidence': 0.8, 'keywords': ['LTV', '비율'], 'sub_intents': [], 'is_compound': False, 'decomposed_tasks': [], 'entities': {}, 'reasoning': 'LTV 비율에 대한 질문이므로 LOAN_CONSULT로 분류하였으며, 금융 관련 정보 요청이므로 확신도가 높음.'}
2025-10-05 14:40:13,135 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-f502b02c-313d-4833-a6c6-0af89e3c8445', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 Agent 선택 전문가입니다.\n사용자의 요청에 가장 적합한 Agent/Team을 선택하는 것이 목표입니다.\n\n## 현재 상황\n\n**사용자 질문:** LTV 비율이 뭔가요?\n**분석된 의도:** 대출상담\n**추출된 키워드:** [\'LTV\', \'비율\']\n\n## 사용 가능한 Agent/Team 정보\n\n{\'search_team\': {\'name\': \'search_team\', \'capabilities\': \'법률 검색, 부동산 시세 조회, 대출 상품 검색\', \'tools\': [\'legal_search\', \'market_data\', \'loan_data\'], \'use_cases\': [\'법률 상담\', \'시세 조회\', \'대출 정보\']}, \'analysis_team\': {\'name\': \'analysis_team\', \'capabilities\': \'데이터 분석, 리스크 평가, 인사이트 생성, 추천\', \'tools\': [\'data_analyzer\', \'risk_evaluator\'], \'use_cases\': [\'시장 분석\', \'리스크 평가\', \'투자 분석\']}, \'document_team\': {\'name\': \'document_team\', \'capabilities\': \'계약서 작성, 문서 생성, 문서 검토\', \'tools\': [\'document_generator\', \'contract_reviewer\'], \'use_cases\': [\'계약서 작성\', \'문서 검토\']}}\n\n## Agent 역할 및 상세 가이드\n\n### 1. search_team (검색 팀)\n- **주요 기능**: 정보 검색 및 데이터 수집\n- **전문 분야**:\n  * 법률 정보 검색 (전세법, 임대차보호법, 부동산 관련 법규)\n  * 부동산 시세 조회 (매매가, 전세가, 월세, 실거래가)\n  * 대출 상품 정보 검색 (금리, 한도, 조건)\n  * 지역 정보 및 인프라 조회\n- **도구**: legal_search, market_data, loan_data\n- **적합한 작업**: 정보 조회, 데이터 수집, 법률 확인, 시세 파악\n- **예시**:\n  * "전세금 5% 인상 가능한가요?"\n  * "강남구 아파트 전세 시세"\n  * "전세자금대출 한도 얼마?"\n\n### 2. analysis_team (분석 팀)\n- **주요 기능**: 데이터 분석 및 평가\n- **전문 분야**:\n  * 시장 동향 분석 (상승률, 하락률, 추세)\n  * 리스크 평가 (계약, 투자 위험도)\n  * 투자 수익률 계산 (ROI, 월세 수익률)\n  * 대출 한도 및 조건 분석 (LTV, DTI, DSR)\n  * 비교 분석 (지역별, 상품별)\n- **도구**: data_analyzer, risk_evaluator, calculator\n- **적합한 작업**: 데이터 분석, 리스크 평가, 계산, 비교, 예측\n- **의존성**: 보통 search_team의 데이터가 필요\n- **예시**:\n  * "이 지역 투자 가치 분석해줘"\n  * "계약 리스크 평가해줘"\n  * "대출 가능 금액 계산해줘"\n\n### 3. document_team (문서 팀)\n- **주요 기능**: 문서 생성 및 관리\n- **전문 분야**:\n  * 계약서 작성 (임대차, 매매, 전세)\n  * 문서 템플릿 관리\n  * 특약사항 생성\n  * 계약서 수정안 작성\n  * 법률 문서 검토\n- **도구**: document_generator, contract_template, contract_reviewer\n- **적합한 작업**: 문서 작성, 계약서 생성, 문서 수정, 검토\n- **예시**:\n  * "임대차계약서 작성해줘"\n  * "특약사항 추가해줘"\n  * "계약서 수정안 만들어줘"\n\n## Agent 선택 전략\n\n### 1단계: 작업 유형 식별\n```\n정보 필요 → search_team\n분석/계산 필요 → analysis_team\n문서 작성 필요 → document_team\n```\n\n### 2단계: 의존성 분석\n```\n독립적 작업 → 단일 팀\n순차적 의존 → 여러 팀 (순서 중요)\n병렬 가능 → 여러 팀 (순서 무관)\n```\n\n### 3단계: 최적화\n```\n중복 제거 → 가장 적합한 팀만 선택\n효율성 → 병렬 처리 가능한 경우 표시\n```\n\n## 의도별 Agent 매핑 가이드\n\n| 의도 (Intent) | 추천 Agent 조합 | 이유 |\n|--------------|-----------------|------|\n| LEGAL_CONSULT | ["search_team"] | 법률 정보 검색 전문 |\n| MARKET_INQUIRY | ["search_team"] | 시세 데이터 조회 |\n| LOAN_CONSULT | ["search_team", "analysis_team"] | 대출 정보 조회 후 분석 |\n| CONTRACT_CREATION | ["document_team"] | 문서 생성 전문 |\n| CONTRACT_REVIEW | ["search_team", "analysis_team"] | 법률 검토 및 리스크 분석 |\n| COMPREHENSIVE | ["search_team", "analysis_team"] | 종합 정보 수집 및 분석 |\n| RISK_ANALYSIS | ["analysis_team"] | 리스크 평가 전문 |\n| UNCLEAR | ["search_team", "analysis_team"] | 포괄적 대응 |\n\n## 복합 질문 처리 예시\n\n### 예시 1: 순차적 처리\n질문: "강남구 시세 확인하고 투자 가치 분석해줘"\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "먼저 search_team이 시세 데이터를 수집하고, 그 결과를 analysis_team이 분석하여 투자 가치 평가"\n}\n```\n\n### 예시 2: 병렬 처리 가능\n질문: "법률 정보와 시세 정보 모두 알려줘"\n```json\n{\n    "selected_agents": ["search_team"],\n    "reasoning": "search_team이 법률과 시세 정보를 병렬로 조회 가능. 두 작업이 독립적이므로 동시 처리"\n}\n```\n\n### 예시 3: 3단계 파이프라인\n질문: "시세 조회하고 분석한 후 계약서 작성해줘"\n```json\n{\n    "selected_agents": ["search_team", "analysis_team", "document_team"],\n    "reasoning": "search_team이 데이터 수집 → analysis_team이 분석 → document_team이 분석 결과 기반 계약서 작성"\n}\n```\n\n## 응답 형식 (JSON)\n\n{\n    "selected_agents": ["선택된 agent/team 목록"],\n    "reasoning": "선택 이유를 구체적으로 설명. 각 Agent의 역할과 처리 순서 포함",\n    "coordination": "single/sequential/parallel/pipeline",\n    "dependencies": {"agent2": ["agent1"]},\n    "estimated_time": 30,\n    "confidence": 0.9\n}\n\n## 선택 가이드라인\n\n1. **최소 Agent 원칙**: 가능한 적은 수의 Agent로 처리\n2. **전문성 우선**: 해당 작업에 가장 전문적인 Agent 선택\n3. **효율성 고려**: 병렬 처리 가능한 경우 명시\n4. **의존성 관리**: 데이터 흐름을 고려한 순서 지정\n5. **폴백 전략**: 불확실한 경우 ["search_team", "analysis_team"] 조합\n\n## 주의사항\n\n- selected_agents는 반드시 배열 형태\n- Agent 이름은 정확히: "search_team", "analysis_team", "document_team"\n- 최소 1개, 최대 3개 선택\n- 순서는 실행 우선순위 (앞에 있을수록 먼저 실행)\n- reasoning은 상세하고 논리적으로 작성\n- coordination 필드로 실행 방식 명시\n- 복합 질문의 경우 의존성 관계 명확히 표시'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 14:40:13,135 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 14:40:13,135 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 14:40:13,135 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 14:40:13,135 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 14:40:13,135 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 14:40:13,135 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 14:40:15,594 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 05:40:15 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'2190'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'2208'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9941'), (b'x-ratelimit-remaining-tokens', b'198444'), (b'x-ratelimit-reset-requests', b'8m29.234s'), (b'x-ratelimit-reset-tokens', b'466ms'), (b'x-request-id', b'req_12881ca345ce4eeaac796917a310bf66'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989a953dfa33e9fb-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 14:40:15,594 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 14:40:15,594 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 14:40:15,595 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 14:40:15,595 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 14:40:15,595 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 14:40:15,595 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 05:40:15 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '2190', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '2208', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9941', 'x-ratelimit-remaining-tokens': '198444', 'x-ratelimit-reset-requests': '8m29.234s', 'x-ratelimit-reset-tokens': '466ms', 'x-request-id': 'req_12881ca345ce4eeaac796917a310bf66', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989a953dfa33e9fb-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 14:40:15,595 - openai._base_client - DEBUG - request_id: req_12881ca345ce4eeaac796917a310bf66
2025-10-05 14:40:15,596 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: agent_selection | Model: gpt-4o-mini-2024-07-18 | Tokens: 1803 (prompt: 1695, completion: 108)
2025-10-05 14:40:15,596 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM agent selection reasoning: LTV 비율에 대한 질문은 대출 상담과 관련이 있으며, search_team이 대출 상품 정보를 조회한 후, analysis_team이 LTV 비율을 분석하여 대출 가능 금액을 계산할 수 있습니다.
2025-10-05 14:40:15,596 - app.service_agent.cognitive_agents.planning_agent - INFO - ✅ Primary LLM selected agents: ['search_team', 'analysis_team']
2025-10-05 14:40:15,596 - __main__ - INFO -   의도: 대출상담
2025-10-05 14:40:15,596 - __main__ - INFO -   신뢰도: 0.80
2025-10-05 14:40:15,596 - __main__ - INFO -   추천 Agent: ['search_team', 'analysis_team']
2025-10-05 14:40:15,596 - __main__ - INFO - 
[Step 2] Query Decomposition...
2025-10-05 14:40:15,596 - app.service_agent.cognitive_agents.query_decomposer - INFO - Decomposing query: LTV 비율이 뭔가요?...
2025-10-05 14:40:15,596 - app.service_agent.cognitive_agents.query_decomposer - INFO - Query is simple, no decomposition needed
2025-10-05 14:40:15,596 - __main__ - INFO -   복합 질문: False
2025-10-05 14:40:15,596 - __main__ - INFO -   작업 수: 1
2025-10-05 14:40:15,597 - __main__ - INFO -   실행 모드: sequential
2025-10-05 14:40:15,597 - __main__ - INFO - 
[Step 3] Execution Plan 생성...
2025-10-05 14:40:15,597 - app.service_agent.cognitive_agents.planning_agent - INFO - Creating execution plan for intent: 대출상담
2025-10-05 14:40:15,597 - app.service_agent.cognitive_agents.planning_agent - WARNING - AgentRegistry is empty, using default teams
2025-10-05 14:40:15,597 - app.service_agent.cognitive_agents.planning_agent - DEBUG - Suggested agents: ['search_team', 'analysis_team']
2025-10-05 14:40:15,597 - app.service_agent.cognitive_agents.planning_agent - DEBUG - Available agents: ['search_team', 'analysis_team', 'document_team']
2025-10-05 14:40:15,597 - app.service_agent.cognitive_agents.planning_agent - INFO - Selected agents/teams for execution: ['search_team', 'analysis_team']
2025-10-05 14:40:15,597 - __main__ - INFO -   전략: sequential
2025-10-05 14:40:15,597 - __main__ - INFO -   단계 수: 2
2025-10-05 14:40:15,597 - __main__ - INFO - 
✓ 테스트 성공 (소요시간: 4.70초)
2025-10-05 14:40:15,597 - __main__ - INFO - 
================================================================================
2025-10-05 14:40:15,597 - __main__ - INFO - [8] 단일 질문 테스트: S008
2025-10-05 14:40:15,597 - __main__ - INFO - 질문: 보증금 반환 보증 가입 방법은?
2025-10-05 14:40:15,597 - __main__ - INFO - ================================================================================
2025-10-05 14:40:15,597 - __main__ - INFO - 
[Step 1] Intent 분석...
2025-10-05 14:40:15,597 - app.service_agent.cognitive_agents.planning_agent - INFO - Analyzing intent for query: 보증금 반환 보증 가입 방법은?...
2025-10-05 14:40:15,598 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-4fd22e89-9510-43d2-b303-a1c93e164a07', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 의도 분석 전문가입니다.\n사용자의 질문을 정확히 이해하고, 어떤 종류의 도움이 필요한지 분류해야 합니다.\n\n## 중요: 복합 질문 처리\n복합적인 질문(여러 의도가 섞인 질문)의 경우, 가장 핵심적인 의도를 파악하되,\nsub_intents 필드에 부가적인 의도들도 함께 기록해주세요.\n\n## 분류 카테고리 설명:\n\n1. **LEGAL_CONSULT (법률상담)**\n   - 설명: 부동산 관련 법률, 권리, 의무에 대한 질문\n   - 예시:\n     * 단순: "전세금 5% 인상이 가능한가요?", "임대차계약 갱신 거부할 수 있나요?"\n     * 복합: "전세금 인상 가능한지 확인하고 법적 근거도 알려주세요"\n   - 키워드: 법, 전세, 임대, 보증금, 계약, 권리, 의무, 갱신, 임차인, 임대인, 법률, 규정, 조항\n   - 필요한 처리: 법률 데이터베이스 검색, 관련 법조항 찾기\n\n2. **MARKET_INQUIRY (시세조회)**\n   - 설명: 부동산 시장 가격, 시세, 거래 동향에 대한 질문\n   - 예시:\n     * 단순: "강남구 아파트 전세 시세 알려주세요", "서초동 매매가 얼마나 올랐나요?"\n     * 복합: "강남구 시세 확인하고 대출 가능 금액도 계산해줘"\n   - 키워드: 시세, 가격, 매매가, 전세가, 월세, 시장, 동향, 평균, 지역명, 상승률, 하락률\n   - 필요한 처리: 부동산 시세 데이터 조회, 지역별 가격 분석\n\n3. **LOAN_CONSULT (대출상담)**\n   - 설명: 주택담보대출, 전세자금대출 등 금융 관련 질문\n   - 예시:\n     * 단순: "전세자금대출 한도가 얼마인가요?", "LTV가 뭔가요?"\n     * 복합: "대출 한도 확인하고 금리 비교도 해주세요"\n   - 키워드: 대출, 금리, 한도, 조건, 상환, LTV, DTI, DSR, 담보, 금융, 은행\n   - 필요한 처리: 대출 상품 조회, 금리 정보 검색, 한도 계산\n\n4. **CONTRACT_CREATION (계약서작성)**\n   - 설명: 새로운 계약서나 문서를 작성해달라는 요청\n   - 예시:\n     * 단순: "임대차계약서 작성해주세요", "전세계약서 초안 만들어주세요"\n     * 복합: "계약서 작성하고 주의사항도 검토해주세요"\n   - 키워드: 작성, 만들, 생성, 초안, 계약서, 문서, 양식\n   - 필요한 처리: 문서 생성 에이전트 호출, 템플릿 기반 작성\n\n5. **CONTRACT_REVIEW (계약서검토)**\n   - 설명: 기존 계약서나 문서를 검토해달라는 요청\n   - 예시:\n     * 단순: "이 계약서 검토해주세요", "특약사항 문제없나요?"\n     * 복합: "계약서 검토하고 수정사항도 제안해주세요"\n   - 키워드: 검토, 확인, 점검, 리뷰, 분석해, 살펴봐, 체크\n   - 필요한 처리: 문서 분석, 위험 요소 식별, 개선사항 제안\n\n6. **COMPREHENSIVE (종합분석)**\n   - 설명: 여러 측면을 종합적으로 분석해달라는 요청\n   - 예시:\n     * 단순: "이 물건 전체적으로 분석해주세요"\n     * 복합: "시세, 법률, 대출 모두 검토해서 종합 의견 주세요"\n   - 키워드: 종합, 전체, 모든, 전반적, 종합적, 평가, 분석\n   - 필요한 처리: 다중 데이터 소스 통합 분석\n\n7. **RISK_ANALYSIS (리스크분석)**\n   - 설명: 위험 요소나 주의사항에 대한 질문\n   - 예시:\n     * 단순: "이 계약 위험한가요?", "주의할 점 알려주세요"\n     * 복합: "리스크 분석하고 대안도 제시해주세요"\n   - 키워드: 위험, 리스크, 주의, 문제점, 조심, 걱정, 우려\n   - 필요한 처리: 위험 요소 분석, 주의사항 추출\n\n8. **UNCLEAR (불분명)**\n   - 설명: 의도를 명확히 파악하기 어려운 질문\n   - 예시: "이거 좀 봐주세요", "어떻게 해야 할까요?", "도와주세요"\n   - 처리: 추가 질문으로 의도 명확화 필요\n\n9. **IRRELEVANT (무관)**\n   - 설명: 부동산과 전혀 관련 없는 질문\n   - 예시: "날씨 어때?", "저녁 뭐 먹지?", "주식 추천해줘"\n   - 처리: 부동산 관련 질문을 유도\n\n## 복합 질문 예시와 분석:\n\n### 예시 1: "강남구 아파트 시세 알려주고 전세자금대출 가능한지도 확인해줘"\n- 주 의도: MARKET_INQUIRY (시세 조회가 먼저 필요)\n- 부가 의도: LOAN_CONSULT (대출 확인)\n- 분해: ["강남구 아파트 시세 조회", "전세자금대출 가능 여부 확인"]\n\n### 예시 2: "이 계약서 검토해서 위험한 부분 있는지 알려주고 수정 제안도 해줘"\n- 주 의도: CONTRACT_REVIEW (계약서 검토)\n- 부가 의도: RISK_ANALYSIS (위험 분석)\n- 분해: ["계약서 전체 검토", "위험 요소 식별", "수정사항 제안"]\n\n### 예시 3: "서초동 전세가 확인하고 법적으로 문제없는지도 봐줘"\n- 주 의도: MARKET_INQUIRY (시세 확인)\n- 부가 의도: LEGAL_CONSULT (법적 검토)\n- 분해: ["서초동 전세가 조회", "법적 이슈 검토"]\n\n## 응답 형식 (JSON 형식으로 응답):\n\n{\n    "intent": "LEGAL_CONSULT",\n    "confidence": 0.9,\n    "keywords": ["전세금", "인상", "제한"],\n    "sub_intents": [],\n    "is_compound": false,\n    "decomposed_tasks": [],\n    "entities": {\n        "location": "강남구",\n        "price": "5억",\n        "contract_type": "전세",\n        "date": "2024년",\n        "area": "84㎡",\n        "action_verbs": ["확인", "검토"]\n    },\n    "reasoning": "전세금 인상에 대한 법률 질문이므로 LEGAL_CONSULT로 분류"\n}\n\n응답 규칙:\n- intent: 위 9개 카테고리 중 하나 (대문자_언더스코어 형식)\n- confidence: 0.0~1.0 (0.8 이상이면 매우 확실, 0.5 미만이면 불확실)\n- keywords: 추출된 주요 키워드 목록\n- sub_intents: 복합 질문일 경우 부가적인 의도들\n- is_compound: 복합 질문 여부 (true/false)\n- decomposed_tasks: 복합 질문을 분해한 개별 작업들\n- entities: 추출된 엔티티 정보\n- reasoning: 분류한 이유와 근거 (상세하게)\n\n## 판단 가이드:\n- 여러 의도가 섞여있다면, 가장 주된 의도를 intent에, 나머지를 sub_intents에 기록\n- "그리고", "또한", "함께", "같이" 등의 연결어가 있으면 복합 질문일 가능성 높음\n- 법률 관련 키워드가 있으면 LEGAL_CONSULT 우선\n- 가격/시세 언급이 명확하면 MARKET_INQUIRY\n- 계약서라는 단어와 함께 "작성/만들기"가 있으면 CONTRACT_CREATION\n- 계약서라는 단어와 함께 "검토/확인"이 있으면 CONTRACT_REVIEW\n- 불확실하면 confidence를 낮게 설정하고 UNCLEAR 선택\n- 복합 질문은 is_compound를 true로 설정하고 개별 작업으로 분해\n\n분석할 질문: 보증금 반환 보증 가입 방법은?'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 14:40:15,599 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 14:40:15,599 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 14:40:15,599 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 14:40:15,599 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 14:40:15,599 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 14:40:15,599 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 14:40:17,749 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 05:40:17 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'1939'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'1961'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9940'), (b'x-ratelimit-remaining-tokens', b'198317'), (b'x-ratelimit-reset-requests', b'8m35.415s'), (b'x-ratelimit-reset-tokens', b'504ms'), (b'x-request-id', b'req_8d112ff06d1842a69b9016c712344228'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989a954d590ee9fb-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 14:40:17,750 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 14:40:17,750 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 14:40:17,753 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 14:40:17,753 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 14:40:17,753 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 14:40:17,753 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 05:40:17 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '1939', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '1961', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9940', 'x-ratelimit-remaining-tokens': '198317', 'x-ratelimit-reset-requests': '8m35.415s', 'x-ratelimit-reset-tokens': '504ms', 'x-request-id': 'req_8d112ff06d1842a69b9016c712344228', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989a954d590ee9fb-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 14:40:17,753 - openai._base_client - DEBUG - request_id: req_8d112ff06d1842a69b9016c712344228
2025-10-05 14:40:17,754 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: intent_analysis | Model: gpt-4o-mini-2024-07-18 | Tokens: 2026 (prompt: 1920, completion: 106)
2025-10-05 14:40:17,754 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM Intent Analysis Result: {'intent': 'UNCLEAR', 'confidence': 0.4, 'keywords': ['보증금', '반환', '보증', '가입', '방법'], 'sub_intents': [], 'is_compound': False, 'decomposed_tasks': [], 'entities': {}, 'reasoning': '질문이 구체적인 정보나 요청을 포함하지 않아 의도를 명확히 파악하기 어려움. 추가 질문이 필요함.'}
2025-10-05 14:40:17,755 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-76e1a85d-28b6-4d63-8470-c751c216f69a', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 Agent 선택 전문가입니다.\n사용자의 요청에 가장 적합한 Agent/Team을 선택하는 것이 목표입니다.\n\n## 현재 상황\n\n**사용자 질문:** 보증금 반환 보증 가입 방법은?\n**분석된 의도:** unclear\n**추출된 키워드:** [\'보증금\', \'반환\', \'보증\', \'가입\', \'방법\']\n\n## 사용 가능한 Agent/Team 정보\n\n{\'search_team\': {\'name\': \'search_team\', \'capabilities\': \'법률 검색, 부동산 시세 조회, 대출 상품 검색\', \'tools\': [\'legal_search\', \'market_data\', \'loan_data\'], \'use_cases\': [\'법률 상담\', \'시세 조회\', \'대출 정보\']}, \'analysis_team\': {\'name\': \'analysis_team\', \'capabilities\': \'데이터 분석, 리스크 평가, 인사이트 생성, 추천\', \'tools\': [\'data_analyzer\', \'risk_evaluator\'], \'use_cases\': [\'시장 분석\', \'리스크 평가\', \'투자 분석\']}, \'document_team\': {\'name\': \'document_team\', \'capabilities\': \'계약서 작성, 문서 생성, 문서 검토\', \'tools\': [\'document_generator\', \'contract_reviewer\'], \'use_cases\': [\'계약서 작성\', \'문서 검토\']}}\n\n## Agent 역할 및 상세 가이드\n\n### 1. search_team (검색 팀)\n- **주요 기능**: 정보 검색 및 데이터 수집\n- **전문 분야**:\n  * 법률 정보 검색 (전세법, 임대차보호법, 부동산 관련 법규)\n  * 부동산 시세 조회 (매매가, 전세가, 월세, 실거래가)\n  * 대출 상품 정보 검색 (금리, 한도, 조건)\n  * 지역 정보 및 인프라 조회\n- **도구**: legal_search, market_data, loan_data\n- **적합한 작업**: 정보 조회, 데이터 수집, 법률 확인, 시세 파악\n- **예시**:\n  * "전세금 5% 인상 가능한가요?"\n  * "강남구 아파트 전세 시세"\n  * "전세자금대출 한도 얼마?"\n\n### 2. analysis_team (분석 팀)\n- **주요 기능**: 데이터 분석 및 평가\n- **전문 분야**:\n  * 시장 동향 분석 (상승률, 하락률, 추세)\n  * 리스크 평가 (계약, 투자 위험도)\n  * 투자 수익률 계산 (ROI, 월세 수익률)\n  * 대출 한도 및 조건 분석 (LTV, DTI, DSR)\n  * 비교 분석 (지역별, 상품별)\n- **도구**: data_analyzer, risk_evaluator, calculator\n- **적합한 작업**: 데이터 분석, 리스크 평가, 계산, 비교, 예측\n- **의존성**: 보통 search_team의 데이터가 필요\n- **예시**:\n  * "이 지역 투자 가치 분석해줘"\n  * "계약 리스크 평가해줘"\n  * "대출 가능 금액 계산해줘"\n\n### 3. document_team (문서 팀)\n- **주요 기능**: 문서 생성 및 관리\n- **전문 분야**:\n  * 계약서 작성 (임대차, 매매, 전세)\n  * 문서 템플릿 관리\n  * 특약사항 생성\n  * 계약서 수정안 작성\n  * 법률 문서 검토\n- **도구**: document_generator, contract_template, contract_reviewer\n- **적합한 작업**: 문서 작성, 계약서 생성, 문서 수정, 검토\n- **예시**:\n  * "임대차계약서 작성해줘"\n  * "특약사항 추가해줘"\n  * "계약서 수정안 만들어줘"\n\n## Agent 선택 전략\n\n### 1단계: 작업 유형 식별\n```\n정보 필요 → search_team\n분석/계산 필요 → analysis_team\n문서 작성 필요 → document_team\n```\n\n### 2단계: 의존성 분석\n```\n독립적 작업 → 단일 팀\n순차적 의존 → 여러 팀 (순서 중요)\n병렬 가능 → 여러 팀 (순서 무관)\n```\n\n### 3단계: 최적화\n```\n중복 제거 → 가장 적합한 팀만 선택\n효율성 → 병렬 처리 가능한 경우 표시\n```\n\n## 의도별 Agent 매핑 가이드\n\n| 의도 (Intent) | 추천 Agent 조합 | 이유 |\n|--------------|-----------------|------|\n| LEGAL_CONSULT | ["search_team"] | 법률 정보 검색 전문 |\n| MARKET_INQUIRY | ["search_team"] | 시세 데이터 조회 |\n| LOAN_CONSULT | ["search_team", "analysis_team"] | 대출 정보 조회 후 분석 |\n| CONTRACT_CREATION | ["document_team"] | 문서 생성 전문 |\n| CONTRACT_REVIEW | ["search_team", "analysis_team"] | 법률 검토 및 리스크 분석 |\n| COMPREHENSIVE | ["search_team", "analysis_team"] | 종합 정보 수집 및 분석 |\n| RISK_ANALYSIS | ["analysis_team"] | 리스크 평가 전문 |\n| UNCLEAR | ["search_team", "analysis_team"] | 포괄적 대응 |\n\n## 복합 질문 처리 예시\n\n### 예시 1: 순차적 처리\n질문: "강남구 시세 확인하고 투자 가치 분석해줘"\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "먼저 search_team이 시세 데이터를 수집하고, 그 결과를 analysis_team이 분석하여 투자 가치 평가"\n}\n```\n\n### 예시 2: 병렬 처리 가능\n질문: "법률 정보와 시세 정보 모두 알려줘"\n```json\n{\n    "selected_agents": ["search_team"],\n    "reasoning": "search_team이 법률과 시세 정보를 병렬로 조회 가능. 두 작업이 독립적이므로 동시 처리"\n}\n```\n\n### 예시 3: 3단계 파이프라인\n질문: "시세 조회하고 분석한 후 계약서 작성해줘"\n```json\n{\n    "selected_agents": ["search_team", "analysis_team", "document_team"],\n    "reasoning": "search_team이 데이터 수집 → analysis_team이 분석 → document_team이 분석 결과 기반 계약서 작성"\n}\n```\n\n## 응답 형식 (JSON)\n\n{\n    "selected_agents": ["선택된 agent/team 목록"],\n    "reasoning": "선택 이유를 구체적으로 설명. 각 Agent의 역할과 처리 순서 포함",\n    "coordination": "single/sequential/parallel/pipeline",\n    "dependencies": {"agent2": ["agent1"]},\n    "estimated_time": 30,\n    "confidence": 0.9\n}\n\n## 선택 가이드라인\n\n1. **최소 Agent 원칙**: 가능한 적은 수의 Agent로 처리\n2. **전문성 우선**: 해당 작업에 가장 전문적인 Agent 선택\n3. **효율성 고려**: 병렬 처리 가능한 경우 명시\n4. **의존성 관리**: 데이터 흐름을 고려한 순서 지정\n5. **폴백 전략**: 불확실한 경우 ["search_team", "analysis_team"] 조합\n\n## 주의사항\n\n- selected_agents는 반드시 배열 형태\n- Agent 이름은 정확히: "search_team", "analysis_team", "document_team"\n- 최소 1개, 최대 3개 선택\n- 순서는 실행 우선순위 (앞에 있을수록 먼저 실행)\n- reasoning은 상세하고 논리적으로 작성\n- coordination 필드로 실행 방식 명시\n- 복합 질문의 경우 의존성 관계 명확히 표시'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 14:40:17,756 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 14:40:17,756 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 14:40:17,756 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 14:40:17,756 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 14:40:17,757 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 14:40:17,757 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 14:40:20,356 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 05:40:20 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'2388'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'2407'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9939'), (b'x-ratelimit-remaining-tokens', b'198432'), (b'x-ratelimit-reset-requests', b'8m41.896s'), (b'x-ratelimit-reset-tokens', b'470ms'), (b'x-request-id', b'req_0181e05ace554673b0c9a5e35a22bc47'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989a955adc76e9fb-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 14:40:20,357 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 14:40:20,357 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 14:40:20,358 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 14:40:20,358 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 14:40:20,358 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 14:40:20,359 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 05:40:20 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '2388', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '2407', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9939', 'x-ratelimit-remaining-tokens': '198432', 'x-ratelimit-reset-requests': '8m41.896s', 'x-ratelimit-reset-tokens': '470ms', 'x-request-id': 'req_0181e05ace554673b0c9a5e35a22bc47', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989a955adc76e9fb-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 14:40:20,359 - openai._base_client - DEBUG - request_id: req_0181e05ace554673b0c9a5e35a22bc47
2025-10-05 14:40:20,359 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: agent_selection | Model: gpt-4o-mini-2024-07-18 | Tokens: 1830 (prompt: 1703, completion: 127)
2025-10-05 14:40:20,359 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM agent selection reasoning: 사용자가 보증금 반환 보증 가입 방법에 대한 정보를 요청했으므로, 먼저 search_team이 법률 정보를 검색하여 보증금 반환 보증에 대한 구체적인 내용을 수집하고, 그 후 analysis_team이 수집된 정보를 분석하여 가입 방법에 대한 인사이트를 제공할 수 있도록 합니다.
2025-10-05 14:40:20,359 - app.service_agent.cognitive_agents.planning_agent - INFO - ✅ Primary LLM selected agents: ['search_team', 'analysis_team']
2025-10-05 14:40:20,359 - __main__ - INFO -   의도: unclear
2025-10-05 14:40:20,359 - __main__ - INFO -   신뢰도: 0.40
2025-10-05 14:40:20,359 - __main__ - INFO -   추천 Agent: ['search_team', 'analysis_team']
2025-10-05 14:40:20,359 - __main__ - INFO - 
[Step 2] Query Decomposition...
2025-10-05 14:40:20,359 - app.service_agent.cognitive_agents.query_decomposer - INFO - Decomposing query: 보증금 반환 보증 가입 방법은?...
2025-10-05 14:40:20,359 - app.service_agent.cognitive_agents.query_decomposer - INFO - Query is simple, no decomposition needed
2025-10-05 14:40:20,359 - __main__ - INFO -   복합 질문: False
2025-10-05 14:40:20,359 - __main__ - INFO -   작업 수: 1
2025-10-05 14:40:20,359 - __main__ - INFO -   실행 모드: sequential
2025-10-05 14:40:20,359 - __main__ - INFO - 
[Step 3] Execution Plan 생성...
2025-10-05 14:40:20,359 - app.service_agent.cognitive_agents.planning_agent - INFO - Creating execution plan for intent: unclear
2025-10-05 14:40:20,359 - app.service_agent.cognitive_agents.planning_agent - WARNING - AgentRegistry is empty, using default teams
2025-10-05 14:40:20,359 - app.service_agent.cognitive_agents.planning_agent - DEBUG - Suggested agents: ['search_team', 'analysis_team']
2025-10-05 14:40:20,359 - app.service_agent.cognitive_agents.planning_agent - DEBUG - Available agents: ['search_team', 'analysis_team', 'document_team']
2025-10-05 14:40:20,359 - app.service_agent.cognitive_agents.planning_agent - INFO - Selected agents/teams for execution: ['search_team', 'analysis_team']
2025-10-05 14:40:20,359 - __main__ - INFO -   전략: sequential
2025-10-05 14:40:20,359 - __main__ - INFO -   단계 수: 2
2025-10-05 14:40:20,359 - __main__ - INFO - 
✓ 테스트 성공 (소요시간: 4.76초)
2025-10-05 14:40:20,359 - __main__ - INFO - 
================================================================================
2025-10-05 14:40:20,359 - __main__ - INFO - [9] 단일 질문 테스트: S009
2025-10-05 14:40:20,359 - __main__ - INFO - 질문: 송파구 아파트 가격 동향 알려주세요
2025-10-05 14:40:20,359 - __main__ - INFO - ================================================================================
2025-10-05 14:40:20,360 - __main__ - INFO - 
[Step 1] Intent 분석...
2025-10-05 14:40:20,360 - app.service_agent.cognitive_agents.planning_agent - INFO - Analyzing intent for query: 송파구 아파트 가격 동향 알려주세요...
2025-10-05 14:40:20,360 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-9a9fdac2-4a3e-485f-8f02-0fa47790ae2e', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 의도 분석 전문가입니다.\n사용자의 질문을 정확히 이해하고, 어떤 종류의 도움이 필요한지 분류해야 합니다.\n\n## 중요: 복합 질문 처리\n복합적인 질문(여러 의도가 섞인 질문)의 경우, 가장 핵심적인 의도를 파악하되,\nsub_intents 필드에 부가적인 의도들도 함께 기록해주세요.\n\n## 분류 카테고리 설명:\n\n1. **LEGAL_CONSULT (법률상담)**\n   - 설명: 부동산 관련 법률, 권리, 의무에 대한 질문\n   - 예시:\n     * 단순: "전세금 5% 인상이 가능한가요?", "임대차계약 갱신 거부할 수 있나요?"\n     * 복합: "전세금 인상 가능한지 확인하고 법적 근거도 알려주세요"\n   - 키워드: 법, 전세, 임대, 보증금, 계약, 권리, 의무, 갱신, 임차인, 임대인, 법률, 규정, 조항\n   - 필요한 처리: 법률 데이터베이스 검색, 관련 법조항 찾기\n\n2. **MARKET_INQUIRY (시세조회)**\n   - 설명: 부동산 시장 가격, 시세, 거래 동향에 대한 질문\n   - 예시:\n     * 단순: "강남구 아파트 전세 시세 알려주세요", "서초동 매매가 얼마나 올랐나요?"\n     * 복합: "강남구 시세 확인하고 대출 가능 금액도 계산해줘"\n   - 키워드: 시세, 가격, 매매가, 전세가, 월세, 시장, 동향, 평균, 지역명, 상승률, 하락률\n   - 필요한 처리: 부동산 시세 데이터 조회, 지역별 가격 분석\n\n3. **LOAN_CONSULT (대출상담)**\n   - 설명: 주택담보대출, 전세자금대출 등 금융 관련 질문\n   - 예시:\n     * 단순: "전세자금대출 한도가 얼마인가요?", "LTV가 뭔가요?"\n     * 복합: "대출 한도 확인하고 금리 비교도 해주세요"\n   - 키워드: 대출, 금리, 한도, 조건, 상환, LTV, DTI, DSR, 담보, 금융, 은행\n   - 필요한 처리: 대출 상품 조회, 금리 정보 검색, 한도 계산\n\n4. **CONTRACT_CREATION (계약서작성)**\n   - 설명: 새로운 계약서나 문서를 작성해달라는 요청\n   - 예시:\n     * 단순: "임대차계약서 작성해주세요", "전세계약서 초안 만들어주세요"\n     * 복합: "계약서 작성하고 주의사항도 검토해주세요"\n   - 키워드: 작성, 만들, 생성, 초안, 계약서, 문서, 양식\n   - 필요한 처리: 문서 생성 에이전트 호출, 템플릿 기반 작성\n\n5. **CONTRACT_REVIEW (계약서검토)**\n   - 설명: 기존 계약서나 문서를 검토해달라는 요청\n   - 예시:\n     * 단순: "이 계약서 검토해주세요", "특약사항 문제없나요?"\n     * 복합: "계약서 검토하고 수정사항도 제안해주세요"\n   - 키워드: 검토, 확인, 점검, 리뷰, 분석해, 살펴봐, 체크\n   - 필요한 처리: 문서 분석, 위험 요소 식별, 개선사항 제안\n\n6. **COMPREHENSIVE (종합분석)**\n   - 설명: 여러 측면을 종합적으로 분석해달라는 요청\n   - 예시:\n     * 단순: "이 물건 전체적으로 분석해주세요"\n     * 복합: "시세, 법률, 대출 모두 검토해서 종합 의견 주세요"\n   - 키워드: 종합, 전체, 모든, 전반적, 종합적, 평가, 분석\n   - 필요한 처리: 다중 데이터 소스 통합 분석\n\n7. **RISK_ANALYSIS (리스크분석)**\n   - 설명: 위험 요소나 주의사항에 대한 질문\n   - 예시:\n     * 단순: "이 계약 위험한가요?", "주의할 점 알려주세요"\n     * 복합: "리스크 분석하고 대안도 제시해주세요"\n   - 키워드: 위험, 리스크, 주의, 문제점, 조심, 걱정, 우려\n   - 필요한 처리: 위험 요소 분석, 주의사항 추출\n\n8. **UNCLEAR (불분명)**\n   - 설명: 의도를 명확히 파악하기 어려운 질문\n   - 예시: "이거 좀 봐주세요", "어떻게 해야 할까요?", "도와주세요"\n   - 처리: 추가 질문으로 의도 명확화 필요\n\n9. **IRRELEVANT (무관)**\n   - 설명: 부동산과 전혀 관련 없는 질문\n   - 예시: "날씨 어때?", "저녁 뭐 먹지?", "주식 추천해줘"\n   - 처리: 부동산 관련 질문을 유도\n\n## 복합 질문 예시와 분석:\n\n### 예시 1: "강남구 아파트 시세 알려주고 전세자금대출 가능한지도 확인해줘"\n- 주 의도: MARKET_INQUIRY (시세 조회가 먼저 필요)\n- 부가 의도: LOAN_CONSULT (대출 확인)\n- 분해: ["강남구 아파트 시세 조회", "전세자금대출 가능 여부 확인"]\n\n### 예시 2: "이 계약서 검토해서 위험한 부분 있는지 알려주고 수정 제안도 해줘"\n- 주 의도: CONTRACT_REVIEW (계약서 검토)\n- 부가 의도: RISK_ANALYSIS (위험 분석)\n- 분해: ["계약서 전체 검토", "위험 요소 식별", "수정사항 제안"]\n\n### 예시 3: "서초동 전세가 확인하고 법적으로 문제없는지도 봐줘"\n- 주 의도: MARKET_INQUIRY (시세 확인)\n- 부가 의도: LEGAL_CONSULT (법적 검토)\n- 분해: ["서초동 전세가 조회", "법적 이슈 검토"]\n\n## 응답 형식 (JSON 형식으로 응답):\n\n{\n    "intent": "LEGAL_CONSULT",\n    "confidence": 0.9,\n    "keywords": ["전세금", "인상", "제한"],\n    "sub_intents": [],\n    "is_compound": false,\n    "decomposed_tasks": [],\n    "entities": {\n        "location": "강남구",\n        "price": "5억",\n        "contract_type": "전세",\n        "date": "2024년",\n        "area": "84㎡",\n        "action_verbs": ["확인", "검토"]\n    },\n    "reasoning": "전세금 인상에 대한 법률 질문이므로 LEGAL_CONSULT로 분류"\n}\n\n응답 규칙:\n- intent: 위 9개 카테고리 중 하나 (대문자_언더스코어 형식)\n- confidence: 0.0~1.0 (0.8 이상이면 매우 확실, 0.5 미만이면 불확실)\n- keywords: 추출된 주요 키워드 목록\n- sub_intents: 복합 질문일 경우 부가적인 의도들\n- is_compound: 복합 질문 여부 (true/false)\n- decomposed_tasks: 복합 질문을 분해한 개별 작업들\n- entities: 추출된 엔티티 정보\n- reasoning: 분류한 이유와 근거 (상세하게)\n\n## 판단 가이드:\n- 여러 의도가 섞여있다면, 가장 주된 의도를 intent에, 나머지를 sub_intents에 기록\n- "그리고", "또한", "함께", "같이" 등의 연결어가 있으면 복합 질문일 가능성 높음\n- 법률 관련 키워드가 있으면 LEGAL_CONSULT 우선\n- 가격/시세 언급이 명확하면 MARKET_INQUIRY\n- 계약서라는 단어와 함께 "작성/만들기"가 있으면 CONTRACT_CREATION\n- 계약서라는 단어와 함께 "검토/확인"이 있으면 CONTRACT_REVIEW\n- 불확실하면 confidence를 낮게 설정하고 UNCLEAR 선택\n- 복합 질문은 is_compound를 true로 설정하고 개별 작업으로 분해\n\n분석할 질문: 송파구 아파트 가격 동향 알려주세요'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 14:40:20,360 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 14:40:20,360 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 14:40:20,361 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 14:40:20,361 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 14:40:20,361 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 14:40:20,361 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 14:40:23,101 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 05:40:23 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'2523'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'2542'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9938'), (b'x-ratelimit-remaining-tokens', b'198315'), (b'x-ratelimit-reset-requests', b'8m47.928s'), (b'x-ratelimit-reset-tokens', b'505ms'), (b'x-request-id', b'req_23b5fe06bcdf4f8cbb47257e5b535fe6'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989a956b18b4e9fb-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 14:40:23,102 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 14:40:23,102 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 14:40:23,107 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 14:40:23,107 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 14:40:23,107 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 14:40:23,107 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 05:40:23 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '2523', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '2542', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9938', 'x-ratelimit-remaining-tokens': '198315', 'x-ratelimit-reset-requests': '8m47.928s', 'x-ratelimit-reset-tokens': '505ms', 'x-request-id': 'req_23b5fe06bcdf4f8cbb47257e5b535fe6', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989a956b18b4e9fb-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 14:40:23,107 - openai._base_client - DEBUG - request_id: req_23b5fe06bcdf4f8cbb47257e5b535fe6
2025-10-05 14:40:23,108 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: intent_analysis | Model: gpt-4o-mini-2024-07-18 | Tokens: 2048 (prompt: 1920, completion: 128)
2025-10-05 14:40:23,108 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM Intent Analysis Result: {'intent': 'MARKET_INQUIRY', 'confidence': 0.95, 'keywords': ['송파구', '아파트', '가격', '동향'], 'sub_intents': [], 'is_compound': False, 'decomposed_tasks': [], 'entities': {'location': '송파구', 'property_type': '아파트', 'action_verbs': ['알려주세요']}, 'reasoning': '송파구 아파트 가격 동향에 대한 질문이므로 MARKET_INQUIRY로 분류'}
2025-10-05 14:40:23,108 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-f86e0f5e-9f48-4ed9-90df-4951e21213c7', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 Agent 선택 전문가입니다.\n사용자의 요청에 가장 적합한 Agent/Team을 선택하는 것이 목표입니다.\n\n## 현재 상황\n\n**사용자 질문:** 송파구 아파트 가격 동향 알려주세요\n**분석된 의도:** 시세조회\n**추출된 키워드:** [\'송파구\', \'아파트\', \'가격\', \'동향\']\n\n## 사용 가능한 Agent/Team 정보\n\n{\'search_team\': {\'name\': \'search_team\', \'capabilities\': \'법률 검색, 부동산 시세 조회, 대출 상품 검색\', \'tools\': [\'legal_search\', \'market_data\', \'loan_data\'], \'use_cases\': [\'법률 상담\', \'시세 조회\', \'대출 정보\']}, \'analysis_team\': {\'name\': \'analysis_team\', \'capabilities\': \'데이터 분석, 리스크 평가, 인사이트 생성, 추천\', \'tools\': [\'data_analyzer\', \'risk_evaluator\'], \'use_cases\': [\'시장 분석\', \'리스크 평가\', \'투자 분석\']}, \'document_team\': {\'name\': \'document_team\', \'capabilities\': \'계약서 작성, 문서 생성, 문서 검토\', \'tools\': [\'document_generator\', \'contract_reviewer\'], \'use_cases\': [\'계약서 작성\', \'문서 검토\']}}\n\n## Agent 역할 및 상세 가이드\n\n### 1. search_team (검색 팀)\n- **주요 기능**: 정보 검색 및 데이터 수집\n- **전문 분야**:\n  * 법률 정보 검색 (전세법, 임대차보호법, 부동산 관련 법규)\n  * 부동산 시세 조회 (매매가, 전세가, 월세, 실거래가)\n  * 대출 상품 정보 검색 (금리, 한도, 조건)\n  * 지역 정보 및 인프라 조회\n- **도구**: legal_search, market_data, loan_data\n- **적합한 작업**: 정보 조회, 데이터 수집, 법률 확인, 시세 파악\n- **예시**:\n  * "전세금 5% 인상 가능한가요?"\n  * "강남구 아파트 전세 시세"\n  * "전세자금대출 한도 얼마?"\n\n### 2. analysis_team (분석 팀)\n- **주요 기능**: 데이터 분석 및 평가\n- **전문 분야**:\n  * 시장 동향 분석 (상승률, 하락률, 추세)\n  * 리스크 평가 (계약, 투자 위험도)\n  * 투자 수익률 계산 (ROI, 월세 수익률)\n  * 대출 한도 및 조건 분석 (LTV, DTI, DSR)\n  * 비교 분석 (지역별, 상품별)\n- **도구**: data_analyzer, risk_evaluator, calculator\n- **적합한 작업**: 데이터 분석, 리스크 평가, 계산, 비교, 예측\n- **의존성**: 보통 search_team의 데이터가 필요\n- **예시**:\n  * "이 지역 투자 가치 분석해줘"\n  * "계약 리스크 평가해줘"\n  * "대출 가능 금액 계산해줘"\n\n### 3. document_team (문서 팀)\n- **주요 기능**: 문서 생성 및 관리\n- **전문 분야**:\n  * 계약서 작성 (임대차, 매매, 전세)\n  * 문서 템플릿 관리\n  * 특약사항 생성\n  * 계약서 수정안 작성\n  * 법률 문서 검토\n- **도구**: document_generator, contract_template, contract_reviewer\n- **적합한 작업**: 문서 작성, 계약서 생성, 문서 수정, 검토\n- **예시**:\n  * "임대차계약서 작성해줘"\n  * "특약사항 추가해줘"\n  * "계약서 수정안 만들어줘"\n\n## Agent 선택 전략\n\n### 1단계: 작업 유형 식별\n```\n정보 필요 → search_team\n분석/계산 필요 → analysis_team\n문서 작성 필요 → document_team\n```\n\n### 2단계: 의존성 분석\n```\n독립적 작업 → 단일 팀\n순차적 의존 → 여러 팀 (순서 중요)\n병렬 가능 → 여러 팀 (순서 무관)\n```\n\n### 3단계: 최적화\n```\n중복 제거 → 가장 적합한 팀만 선택\n효율성 → 병렬 처리 가능한 경우 표시\n```\n\n## 의도별 Agent 매핑 가이드\n\n| 의도 (Intent) | 추천 Agent 조합 | 이유 |\n|--------------|-----------------|------|\n| LEGAL_CONSULT | ["search_team"] | 법률 정보 검색 전문 |\n| MARKET_INQUIRY | ["search_team"] | 시세 데이터 조회 |\n| LOAN_CONSULT | ["search_team", "analysis_team"] | 대출 정보 조회 후 분석 |\n| CONTRACT_CREATION | ["document_team"] | 문서 생성 전문 |\n| CONTRACT_REVIEW | ["search_team", "analysis_team"] | 법률 검토 및 리스크 분석 |\n| COMPREHENSIVE | ["search_team", "analysis_team"] | 종합 정보 수집 및 분석 |\n| RISK_ANALYSIS | ["analysis_team"] | 리스크 평가 전문 |\n| UNCLEAR | ["search_team", "analysis_team"] | 포괄적 대응 |\n\n## 복합 질문 처리 예시\n\n### 예시 1: 순차적 처리\n질문: "강남구 시세 확인하고 투자 가치 분석해줘"\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "먼저 search_team이 시세 데이터를 수집하고, 그 결과를 analysis_team이 분석하여 투자 가치 평가"\n}\n```\n\n### 예시 2: 병렬 처리 가능\n질문: "법률 정보와 시세 정보 모두 알려줘"\n```json\n{\n    "selected_agents": ["search_team"],\n    "reasoning": "search_team이 법률과 시세 정보를 병렬로 조회 가능. 두 작업이 독립적이므로 동시 처리"\n}\n```\n\n### 예시 3: 3단계 파이프라인\n질문: "시세 조회하고 분석한 후 계약서 작성해줘"\n```json\n{\n    "selected_agents": ["search_team", "analysis_team", "document_team"],\n    "reasoning": "search_team이 데이터 수집 → analysis_team이 분석 → document_team이 분석 결과 기반 계약서 작성"\n}\n```\n\n## 응답 형식 (JSON)\n\n{\n    "selected_agents": ["선택된 agent/team 목록"],\n    "reasoning": "선택 이유를 구체적으로 설명. 각 Agent의 역할과 처리 순서 포함",\n    "coordination": "single/sequential/parallel/pipeline",\n    "dependencies": {"agent2": ["agent1"]},\n    "estimated_time": 30,\n    "confidence": 0.9\n}\n\n## 선택 가이드라인\n\n1. **최소 Agent 원칙**: 가능한 적은 수의 Agent로 처리\n2. **전문성 우선**: 해당 작업에 가장 전문적인 Agent 선택\n3. **효율성 고려**: 병렬 처리 가능한 경우 명시\n4. **의존성 관리**: 데이터 흐름을 고려한 순서 지정\n5. **폴백 전략**: 불확실한 경우 ["search_team", "analysis_team"] 조합\n\n## 주의사항\n\n- selected_agents는 반드시 배열 형태\n- Agent 이름은 정확히: "search_team", "analysis_team", "document_team"\n- 최소 1개, 최대 3개 선택\n- 순서는 실행 우선순위 (앞에 있을수록 먼저 실행)\n- reasoning은 상세하고 논리적으로 작성\n- coordination 필드로 실행 방식 명시\n- 복합 질문의 경우 의존성 관계 명확히 표시'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 14:40:23,108 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 14:40:23,109 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 14:40:23,109 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 14:40:23,109 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 14:40:23,109 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 14:40:23,109 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 14:40:25,321 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 05:40:25 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'1952'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'1985'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9938'), (b'x-ratelimit-remaining-tokens', b'198431'), (b'x-ratelimit-reset-requests', b'8m53.823s'), (b'x-ratelimit-reset-tokens', b'470ms'), (b'x-request-id', b'req_1f4b628e34f743c18c7e4f2f55ee41b4'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989a957c4e9ee9fb-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 14:40:25,322 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 14:40:25,322 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 14:40:25,323 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 14:40:25,323 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 14:40:25,323 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 14:40:25,323 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 05:40:25 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '1952', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '1985', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9938', 'x-ratelimit-remaining-tokens': '198431', 'x-ratelimit-reset-requests': '8m53.823s', 'x-ratelimit-reset-tokens': '470ms', 'x-request-id': 'req_1f4b628e34f743c18c7e4f2f55ee41b4', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989a957c4e9ee9fb-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 14:40:25,323 - openai._base_client - DEBUG - request_id: req_1f4b628e34f743c18c7e4f2f55ee41b4
2025-10-05 14:40:25,323 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: agent_selection | Model: gpt-4o-mini-2024-07-18 | Tokens: 1803 (prompt: 1703, completion: 100)
2025-10-05 14:40:25,323 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM agent selection reasoning: 사용자가 송파구 아파트 가격 동향을 알고 싶어하므로, 부동산 시세 조회에 전문화된 search_team이 가장 적합합니다. 이 팀은 송파구의 아파트 시세 데이터를 직접 조회할 수 있습니다.
2025-10-05 14:40:25,323 - app.service_agent.cognitive_agents.planning_agent - INFO - ✅ Primary LLM selected agents: ['search_team']
2025-10-05 14:40:25,323 - __main__ - INFO -   의도: 시세조회
2025-10-05 14:40:25,324 - __main__ - INFO -   신뢰도: 0.95
2025-10-05 14:40:25,324 - __main__ - INFO -   추천 Agent: ['search_team']
2025-10-05 14:40:25,324 - __main__ - INFO - 
[Step 2] Query Decomposition...
2025-10-05 14:40:25,324 - app.service_agent.cognitive_agents.query_decomposer - INFO - Decomposing query: 송파구 아파트 가격 동향 알려주세요...
2025-10-05 14:40:25,324 - app.service_agent.cognitive_agents.query_decomposer - INFO - Query is simple, no decomposition needed
2025-10-05 14:40:25,324 - __main__ - INFO -   복합 질문: False
2025-10-05 14:40:25,324 - __main__ - INFO -   작업 수: 1
2025-10-05 14:40:25,324 - __main__ - INFO -   실행 모드: sequential
2025-10-05 14:40:25,324 - __main__ - INFO - 
[Step 3] Execution Plan 생성...
2025-10-05 14:40:25,324 - app.service_agent.cognitive_agents.planning_agent - INFO - Creating execution plan for intent: 시세조회
2025-10-05 14:40:25,324 - app.service_agent.cognitive_agents.planning_agent - WARNING - AgentRegistry is empty, using default teams
2025-10-05 14:40:25,324 - app.service_agent.cognitive_agents.planning_agent - DEBUG - Suggested agents: ['search_team']
2025-10-05 14:40:25,324 - app.service_agent.cognitive_agents.planning_agent - DEBUG - Available agents: ['search_team', 'analysis_team', 'document_team']
2025-10-05 14:40:25,324 - app.service_agent.cognitive_agents.planning_agent - INFO - Selected agents/teams for execution: ['search_team']
2025-10-05 14:40:25,324 - __main__ - INFO -   전략: sequential
2025-10-05 14:40:25,324 - __main__ - INFO -   단계 수: 1
2025-10-05 14:40:25,324 - __main__ - INFO - 
✓ 테스트 성공 (소요시간: 4.96초)
2025-10-05 14:40:25,324 - __main__ - INFO - 
================================================================================
2025-10-05 14:40:25,324 - __main__ - INFO - [10] 단일 질문 테스트: S010
2025-10-05 14:40:25,324 - __main__ - INFO - 질문: 주택담보대출 금리 비교해주세요
2025-10-05 14:40:25,324 - __main__ - INFO - ================================================================================
2025-10-05 14:40:25,324 - __main__ - INFO - 
[Step 1] Intent 분석...
2025-10-05 14:40:25,324 - app.service_agent.cognitive_agents.planning_agent - INFO - Analyzing intent for query: 주택담보대출 금리 비교해주세요...
2025-10-05 14:40:25,324 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-3e734f0c-e361-419a-9a3e-01ce481cd0ca', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 의도 분석 전문가입니다.\n사용자의 질문을 정확히 이해하고, 어떤 종류의 도움이 필요한지 분류해야 합니다.\n\n## 중요: 복합 질문 처리\n복합적인 질문(여러 의도가 섞인 질문)의 경우, 가장 핵심적인 의도를 파악하되,\nsub_intents 필드에 부가적인 의도들도 함께 기록해주세요.\n\n## 분류 카테고리 설명:\n\n1. **LEGAL_CONSULT (법률상담)**\n   - 설명: 부동산 관련 법률, 권리, 의무에 대한 질문\n   - 예시:\n     * 단순: "전세금 5% 인상이 가능한가요?", "임대차계약 갱신 거부할 수 있나요?"\n     * 복합: "전세금 인상 가능한지 확인하고 법적 근거도 알려주세요"\n   - 키워드: 법, 전세, 임대, 보증금, 계약, 권리, 의무, 갱신, 임차인, 임대인, 법률, 규정, 조항\n   - 필요한 처리: 법률 데이터베이스 검색, 관련 법조항 찾기\n\n2. **MARKET_INQUIRY (시세조회)**\n   - 설명: 부동산 시장 가격, 시세, 거래 동향에 대한 질문\n   - 예시:\n     * 단순: "강남구 아파트 전세 시세 알려주세요", "서초동 매매가 얼마나 올랐나요?"\n     * 복합: "강남구 시세 확인하고 대출 가능 금액도 계산해줘"\n   - 키워드: 시세, 가격, 매매가, 전세가, 월세, 시장, 동향, 평균, 지역명, 상승률, 하락률\n   - 필요한 처리: 부동산 시세 데이터 조회, 지역별 가격 분석\n\n3. **LOAN_CONSULT (대출상담)**\n   - 설명: 주택담보대출, 전세자금대출 등 금융 관련 질문\n   - 예시:\n     * 단순: "전세자금대출 한도가 얼마인가요?", "LTV가 뭔가요?"\n     * 복합: "대출 한도 확인하고 금리 비교도 해주세요"\n   - 키워드: 대출, 금리, 한도, 조건, 상환, LTV, DTI, DSR, 담보, 금융, 은행\n   - 필요한 처리: 대출 상품 조회, 금리 정보 검색, 한도 계산\n\n4. **CONTRACT_CREATION (계약서작성)**\n   - 설명: 새로운 계약서나 문서를 작성해달라는 요청\n   - 예시:\n     * 단순: "임대차계약서 작성해주세요", "전세계약서 초안 만들어주세요"\n     * 복합: "계약서 작성하고 주의사항도 검토해주세요"\n   - 키워드: 작성, 만들, 생성, 초안, 계약서, 문서, 양식\n   - 필요한 처리: 문서 생성 에이전트 호출, 템플릿 기반 작성\n\n5. **CONTRACT_REVIEW (계약서검토)**\n   - 설명: 기존 계약서나 문서를 검토해달라는 요청\n   - 예시:\n     * 단순: "이 계약서 검토해주세요", "특약사항 문제없나요?"\n     * 복합: "계약서 검토하고 수정사항도 제안해주세요"\n   - 키워드: 검토, 확인, 점검, 리뷰, 분석해, 살펴봐, 체크\n   - 필요한 처리: 문서 분석, 위험 요소 식별, 개선사항 제안\n\n6. **COMPREHENSIVE (종합분석)**\n   - 설명: 여러 측면을 종합적으로 분석해달라는 요청\n   - 예시:\n     * 단순: "이 물건 전체적으로 분석해주세요"\n     * 복합: "시세, 법률, 대출 모두 검토해서 종합 의견 주세요"\n   - 키워드: 종합, 전체, 모든, 전반적, 종합적, 평가, 분석\n   - 필요한 처리: 다중 데이터 소스 통합 분석\n\n7. **RISK_ANALYSIS (리스크분석)**\n   - 설명: 위험 요소나 주의사항에 대한 질문\n   - 예시:\n     * 단순: "이 계약 위험한가요?", "주의할 점 알려주세요"\n     * 복합: "리스크 분석하고 대안도 제시해주세요"\n   - 키워드: 위험, 리스크, 주의, 문제점, 조심, 걱정, 우려\n   - 필요한 처리: 위험 요소 분석, 주의사항 추출\n\n8. **UNCLEAR (불분명)**\n   - 설명: 의도를 명확히 파악하기 어려운 질문\n   - 예시: "이거 좀 봐주세요", "어떻게 해야 할까요?", "도와주세요"\n   - 처리: 추가 질문으로 의도 명확화 필요\n\n9. **IRRELEVANT (무관)**\n   - 설명: 부동산과 전혀 관련 없는 질문\n   - 예시: "날씨 어때?", "저녁 뭐 먹지?", "주식 추천해줘"\n   - 처리: 부동산 관련 질문을 유도\n\n## 복합 질문 예시와 분석:\n\n### 예시 1: "강남구 아파트 시세 알려주고 전세자금대출 가능한지도 확인해줘"\n- 주 의도: MARKET_INQUIRY (시세 조회가 먼저 필요)\n- 부가 의도: LOAN_CONSULT (대출 확인)\n- 분해: ["강남구 아파트 시세 조회", "전세자금대출 가능 여부 확인"]\n\n### 예시 2: "이 계약서 검토해서 위험한 부분 있는지 알려주고 수정 제안도 해줘"\n- 주 의도: CONTRACT_REVIEW (계약서 검토)\n- 부가 의도: RISK_ANALYSIS (위험 분석)\n- 분해: ["계약서 전체 검토", "위험 요소 식별", "수정사항 제안"]\n\n### 예시 3: "서초동 전세가 확인하고 법적으로 문제없는지도 봐줘"\n- 주 의도: MARKET_INQUIRY (시세 확인)\n- 부가 의도: LEGAL_CONSULT (법적 검토)\n- 분해: ["서초동 전세가 조회", "법적 이슈 검토"]\n\n## 응답 형식 (JSON 형식으로 응답):\n\n{\n    "intent": "LEGAL_CONSULT",\n    "confidence": 0.9,\n    "keywords": ["전세금", "인상", "제한"],\n    "sub_intents": [],\n    "is_compound": false,\n    "decomposed_tasks": [],\n    "entities": {\n        "location": "강남구",\n        "price": "5억",\n        "contract_type": "전세",\n        "date": "2024년",\n        "area": "84㎡",\n        "action_verbs": ["확인", "검토"]\n    },\n    "reasoning": "전세금 인상에 대한 법률 질문이므로 LEGAL_CONSULT로 분류"\n}\n\n응답 규칙:\n- intent: 위 9개 카테고리 중 하나 (대문자_언더스코어 형식)\n- confidence: 0.0~1.0 (0.8 이상이면 매우 확실, 0.5 미만이면 불확실)\n- keywords: 추출된 주요 키워드 목록\n- sub_intents: 복합 질문일 경우 부가적인 의도들\n- is_compound: 복합 질문 여부 (true/false)\n- decomposed_tasks: 복합 질문을 분해한 개별 작업들\n- entities: 추출된 엔티티 정보\n- reasoning: 분류한 이유와 근거 (상세하게)\n\n## 판단 가이드:\n- 여러 의도가 섞여있다면, 가장 주된 의도를 intent에, 나머지를 sub_intents에 기록\n- "그리고", "또한", "함께", "같이" 등의 연결어가 있으면 복합 질문일 가능성 높음\n- 법률 관련 키워드가 있으면 LEGAL_CONSULT 우선\n- 가격/시세 언급이 명확하면 MARKET_INQUIRY\n- 계약서라는 단어와 함께 "작성/만들기"가 있으면 CONTRACT_CREATION\n- 계약서라는 단어와 함께 "검토/확인"이 있으면 CONTRACT_REVIEW\n- 불확실하면 confidence를 낮게 설정하고 UNCLEAR 선택\n- 복합 질문은 is_compound를 true로 설정하고 개별 작업으로 분해\n\n분석할 질문: 주택담보대출 금리 비교해주세요'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 14:40:25,325 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 14:40:25,325 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 14:40:25,325 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 14:40:25,325 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 14:40:25,325 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 14:40:25,325 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 14:40:27,938 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 05:40:27 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'2395'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'2426'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9937'), (b'x-ratelimit-remaining-tokens', b'198317'), (b'x-ratelimit-reset-requests', b'9m0.251s'), (b'x-ratelimit-reset-tokens', b'504ms'), (b'x-request-id', b'req_f0996c8e1c024ccd864a25f87a53e01a'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989a958a2a2ce9fb-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 14:40:27,938 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 14:40:27,939 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 14:40:27,947 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 14:40:27,947 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 14:40:27,948 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 14:40:27,948 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 05:40:27 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '2395', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '2426', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9937', 'x-ratelimit-remaining-tokens': '198317', 'x-ratelimit-reset-requests': '9m0.251s', 'x-ratelimit-reset-tokens': '504ms', 'x-request-id': 'req_f0996c8e1c024ccd864a25f87a53e01a', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989a958a2a2ce9fb-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 14:40:27,948 - openai._base_client - DEBUG - request_id: req_f0996c8e1c024ccd864a25f87a53e01a
2025-10-05 14:40:27,948 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: intent_analysis | Model: gpt-4o-mini-2024-07-18 | Tokens: 2042 (prompt: 1920, completion: 122)
2025-10-05 14:40:27,948 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM Intent Analysis Result: {'intent': 'LOAN_CONSULT', 'confidence': 0.9, 'keywords': ['주택담보대출', '금리', '비교'], 'sub_intents': [], 'is_compound': False, 'decomposed_tasks': [], 'entities': {'loan_type': '주택담보대출', 'action_verbs': ['비교']}, 'reasoning': '주택담보대출 금리에 대한 질문이므로 LOAN_CONSULT로 분류'}
2025-10-05 14:40:27,949 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-b1046960-e654-41b5-8bf7-9d9182f5b009', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 Agent 선택 전문가입니다.\n사용자의 요청에 가장 적합한 Agent/Team을 선택하는 것이 목표입니다.\n\n## 현재 상황\n\n**사용자 질문:** 주택담보대출 금리 비교해주세요\n**분석된 의도:** 대출상담\n**추출된 키워드:** [\'주택담보대출\', \'금리\', \'비교\']\n\n## 사용 가능한 Agent/Team 정보\n\n{\'search_team\': {\'name\': \'search_team\', \'capabilities\': \'법률 검색, 부동산 시세 조회, 대출 상품 검색\', \'tools\': [\'legal_search\', \'market_data\', \'loan_data\'], \'use_cases\': [\'법률 상담\', \'시세 조회\', \'대출 정보\']}, \'analysis_team\': {\'name\': \'analysis_team\', \'capabilities\': \'데이터 분석, 리스크 평가, 인사이트 생성, 추천\', \'tools\': [\'data_analyzer\', \'risk_evaluator\'], \'use_cases\': [\'시장 분석\', \'리스크 평가\', \'투자 분석\']}, \'document_team\': {\'name\': \'document_team\', \'capabilities\': \'계약서 작성, 문서 생성, 문서 검토\', \'tools\': [\'document_generator\', \'contract_reviewer\'], \'use_cases\': [\'계약서 작성\', \'문서 검토\']}}\n\n## Agent 역할 및 상세 가이드\n\n### 1. search_team (검색 팀)\n- **주요 기능**: 정보 검색 및 데이터 수집\n- **전문 분야**:\n  * 법률 정보 검색 (전세법, 임대차보호법, 부동산 관련 법규)\n  * 부동산 시세 조회 (매매가, 전세가, 월세, 실거래가)\n  * 대출 상품 정보 검색 (금리, 한도, 조건)\n  * 지역 정보 및 인프라 조회\n- **도구**: legal_search, market_data, loan_data\n- **적합한 작업**: 정보 조회, 데이터 수집, 법률 확인, 시세 파악\n- **예시**:\n  * "전세금 5% 인상 가능한가요?"\n  * "강남구 아파트 전세 시세"\n  * "전세자금대출 한도 얼마?"\n\n### 2. analysis_team (분석 팀)\n- **주요 기능**: 데이터 분석 및 평가\n- **전문 분야**:\n  * 시장 동향 분석 (상승률, 하락률, 추세)\n  * 리스크 평가 (계약, 투자 위험도)\n  * 투자 수익률 계산 (ROI, 월세 수익률)\n  * 대출 한도 및 조건 분석 (LTV, DTI, DSR)\n  * 비교 분석 (지역별, 상품별)\n- **도구**: data_analyzer, risk_evaluator, calculator\n- **적합한 작업**: 데이터 분석, 리스크 평가, 계산, 비교, 예측\n- **의존성**: 보통 search_team의 데이터가 필요\n- **예시**:\n  * "이 지역 투자 가치 분석해줘"\n  * "계약 리스크 평가해줘"\n  * "대출 가능 금액 계산해줘"\n\n### 3. document_team (문서 팀)\n- **주요 기능**: 문서 생성 및 관리\n- **전문 분야**:\n  * 계약서 작성 (임대차, 매매, 전세)\n  * 문서 템플릿 관리\n  * 특약사항 생성\n  * 계약서 수정안 작성\n  * 법률 문서 검토\n- **도구**: document_generator, contract_template, contract_reviewer\n- **적합한 작업**: 문서 작성, 계약서 생성, 문서 수정, 검토\n- **예시**:\n  * "임대차계약서 작성해줘"\n  * "특약사항 추가해줘"\n  * "계약서 수정안 만들어줘"\n\n## Agent 선택 전략\n\n### 1단계: 작업 유형 식별\n```\n정보 필요 → search_team\n분석/계산 필요 → analysis_team\n문서 작성 필요 → document_team\n```\n\n### 2단계: 의존성 분석\n```\n독립적 작업 → 단일 팀\n순차적 의존 → 여러 팀 (순서 중요)\n병렬 가능 → 여러 팀 (순서 무관)\n```\n\n### 3단계: 최적화\n```\n중복 제거 → 가장 적합한 팀만 선택\n효율성 → 병렬 처리 가능한 경우 표시\n```\n\n## 의도별 Agent 매핑 가이드\n\n| 의도 (Intent) | 추천 Agent 조합 | 이유 |\n|--------------|-----------------|------|\n| LEGAL_CONSULT | ["search_team"] | 법률 정보 검색 전문 |\n| MARKET_INQUIRY | ["search_team"] | 시세 데이터 조회 |\n| LOAN_CONSULT | ["search_team", "analysis_team"] | 대출 정보 조회 후 분석 |\n| CONTRACT_CREATION | ["document_team"] | 문서 생성 전문 |\n| CONTRACT_REVIEW | ["search_team", "analysis_team"] | 법률 검토 및 리스크 분석 |\n| COMPREHENSIVE | ["search_team", "analysis_team"] | 종합 정보 수집 및 분석 |\n| RISK_ANALYSIS | ["analysis_team"] | 리스크 평가 전문 |\n| UNCLEAR | ["search_team", "analysis_team"] | 포괄적 대응 |\n\n## 복합 질문 처리 예시\n\n### 예시 1: 순차적 처리\n질문: "강남구 시세 확인하고 투자 가치 분석해줘"\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "먼저 search_team이 시세 데이터를 수집하고, 그 결과를 analysis_team이 분석하여 투자 가치 평가"\n}\n```\n\n### 예시 2: 병렬 처리 가능\n질문: "법률 정보와 시세 정보 모두 알려줘"\n```json\n{\n    "selected_agents": ["search_team"],\n    "reasoning": "search_team이 법률과 시세 정보를 병렬로 조회 가능. 두 작업이 독립적이므로 동시 처리"\n}\n```\n\n### 예시 3: 3단계 파이프라인\n질문: "시세 조회하고 분석한 후 계약서 작성해줘"\n```json\n{\n    "selected_agents": ["search_team", "analysis_team", "document_team"],\n    "reasoning": "search_team이 데이터 수집 → analysis_team이 분석 → document_team이 분석 결과 기반 계약서 작성"\n}\n```\n\n## 응답 형식 (JSON)\n\n{\n    "selected_agents": ["선택된 agent/team 목록"],\n    "reasoning": "선택 이유를 구체적으로 설명. 각 Agent의 역할과 처리 순서 포함",\n    "coordination": "single/sequential/parallel/pipeline",\n    "dependencies": {"agent2": ["agent1"]},\n    "estimated_time": 30,\n    "confidence": 0.9\n}\n\n## 선택 가이드라인\n\n1. **최소 Agent 원칙**: 가능한 적은 수의 Agent로 처리\n2. **전문성 우선**: 해당 작업에 가장 전문적인 Agent 선택\n3. **효율성 고려**: 병렬 처리 가능한 경우 명시\n4. **의존성 관리**: 데이터 흐름을 고려한 순서 지정\n5. **폴백 전략**: 불확실한 경우 ["search_team", "analysis_team"] 조합\n\n## 주의사항\n\n- selected_agents는 반드시 배열 형태\n- Agent 이름은 정확히: "search_team", "analysis_team", "document_team"\n- 최소 1개, 최대 3개 선택\n- 순서는 실행 우선순위 (앞에 있을수록 먼저 실행)\n- reasoning은 상세하고 논리적으로 작성\n- coordination 필드로 실행 방식 명시\n- 복합 질문의 경우 의존성 관계 명확히 표시'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 14:40:27,949 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 14:40:27,949 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 14:40:27,949 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 14:40:27,949 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 14:40:27,950 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 14:40:27,950 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 14:40:30,098 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 05:40:30 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'1929'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'1951'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9936'), (b'x-ratelimit-remaining-tokens', b'198433'), (b'x-ratelimit-reset-requests', b'9m6.262s'), (b'x-ratelimit-reset-tokens', b'470ms'), (b'x-request-id', b'req_0bd9e258b8864d53af984a5f8cd0c611'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989a959a8d1ce9fb-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 14:40:30,098 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 14:40:30,098 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 14:40:30,102 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 14:40:30,103 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 14:40:30,103 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 14:40:30,103 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 05:40:30 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '1929', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '1951', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9936', 'x-ratelimit-remaining-tokens': '198433', 'x-ratelimit-reset-requests': '9m6.262s', 'x-ratelimit-reset-tokens': '470ms', 'x-request-id': 'req_0bd9e258b8864d53af984a5f8cd0c611', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989a959a8d1ce9fb-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 14:40:30,103 - openai._base_client - DEBUG - request_id: req_0bd9e258b8864d53af984a5f8cd0c611
2025-10-05 14:40:30,104 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: agent_selection | Model: gpt-4o-mini-2024-07-18 | Tokens: 1820 (prompt: 1704, completion: 116)
2025-10-05 14:40:30,104 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM agent selection reasoning: 사용자가 주택담보대출 금리를 비교하고자 하므로, 먼저 search_team이 대출 상품 정보를 수집하여 금리를 확인한 후, analysis_team이 수집된 데이터를 분석하여 최적의 대출 상품을 추천하는 방식으로 진행됩니다.
2025-10-05 14:40:30,104 - app.service_agent.cognitive_agents.planning_agent - INFO - ✅ Primary LLM selected agents: ['search_team', 'analysis_team']
2025-10-05 14:40:30,104 - __main__ - INFO -   의도: 대출상담
2025-10-05 14:40:30,104 - __main__ - INFO -   신뢰도: 0.90
2025-10-05 14:40:30,104 - __main__ - INFO -   추천 Agent: ['search_team', 'analysis_team']
2025-10-05 14:40:30,104 - __main__ - INFO - 
[Step 2] Query Decomposition...
2025-10-05 14:40:30,104 - app.service_agent.cognitive_agents.query_decomposer - INFO - Decomposing query: 주택담보대출 금리 비교해주세요...
2025-10-05 14:40:30,104 - app.service_agent.cognitive_agents.query_decomposer - INFO - Query is simple, no decomposition needed
2025-10-05 14:40:30,104 - __main__ - INFO -   복합 질문: False
2025-10-05 14:40:30,104 - __main__ - INFO -   작업 수: 1
2025-10-05 14:40:30,104 - __main__ - INFO -   실행 모드: sequential
2025-10-05 14:40:30,104 - __main__ - INFO - 
[Step 3] Execution Plan 생성...
2025-10-05 14:40:30,104 - app.service_agent.cognitive_agents.planning_agent - INFO - Creating execution plan for intent: 대출상담
2025-10-05 14:40:30,104 - app.service_agent.cognitive_agents.planning_agent - WARNING - AgentRegistry is empty, using default teams
2025-10-05 14:40:30,105 - app.service_agent.cognitive_agents.planning_agent - DEBUG - Suggested agents: ['search_team', 'analysis_team']
2025-10-05 14:40:30,105 - app.service_agent.cognitive_agents.planning_agent - DEBUG - Available agents: ['search_team', 'analysis_team', 'document_team']
2025-10-05 14:40:30,105 - app.service_agent.cognitive_agents.planning_agent - INFO - Selected agents/teams for execution: ['search_team', 'analysis_team']
2025-10-05 14:40:30,105 - __main__ - INFO -   전략: sequential
2025-10-05 14:40:30,105 - __main__ - INFO -   단계 수: 2
2025-10-05 14:40:30,105 - __main__ - INFO - 
✓ 테스트 성공 (소요시간: 4.78초)
2025-10-05 14:40:30,106 - __main__ - INFO - 
결과 저장: C:\kdy\Projects\holmesnyangz\beta_v001\backend\app\service_agent\reports\phase1_test_results.json
2025-10-05 14:40:30,106 - __main__ - INFO - 
================================================================================
2025-10-05 14:40:30,106 - __main__ - INFO - [11] 단일 질문 테스트: S011
2025-10-05 14:40:30,106 - __main__ - INFO - 질문: 임대차보호법 적용 대상은?
2025-10-05 14:40:30,106 - __main__ - INFO - ================================================================================
2025-10-05 14:40:30,106 - __main__ - INFO - 
[Step 1] Intent 분석...
2025-10-05 14:40:30,106 - app.service_agent.cognitive_agents.planning_agent - INFO - Analyzing intent for query: 임대차보호법 적용 대상은?...
2025-10-05 14:40:30,107 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-472ba788-4ff7-46a4-bc32-e0d77e4b6e9f', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 의도 분석 전문가입니다.\n사용자의 질문을 정확히 이해하고, 어떤 종류의 도움이 필요한지 분류해야 합니다.\n\n## 중요: 복합 질문 처리\n복합적인 질문(여러 의도가 섞인 질문)의 경우, 가장 핵심적인 의도를 파악하되,\nsub_intents 필드에 부가적인 의도들도 함께 기록해주세요.\n\n## 분류 카테고리 설명:\n\n1. **LEGAL_CONSULT (법률상담)**\n   - 설명: 부동산 관련 법률, 권리, 의무에 대한 질문\n   - 예시:\n     * 단순: "전세금 5% 인상이 가능한가요?", "임대차계약 갱신 거부할 수 있나요?"\n     * 복합: "전세금 인상 가능한지 확인하고 법적 근거도 알려주세요"\n   - 키워드: 법, 전세, 임대, 보증금, 계약, 권리, 의무, 갱신, 임차인, 임대인, 법률, 규정, 조항\n   - 필요한 처리: 법률 데이터베이스 검색, 관련 법조항 찾기\n\n2. **MARKET_INQUIRY (시세조회)**\n   - 설명: 부동산 시장 가격, 시세, 거래 동향에 대한 질문\n   - 예시:\n     * 단순: "강남구 아파트 전세 시세 알려주세요", "서초동 매매가 얼마나 올랐나요?"\n     * 복합: "강남구 시세 확인하고 대출 가능 금액도 계산해줘"\n   - 키워드: 시세, 가격, 매매가, 전세가, 월세, 시장, 동향, 평균, 지역명, 상승률, 하락률\n   - 필요한 처리: 부동산 시세 데이터 조회, 지역별 가격 분석\n\n3. **LOAN_CONSULT (대출상담)**\n   - 설명: 주택담보대출, 전세자금대출 등 금융 관련 질문\n   - 예시:\n     * 단순: "전세자금대출 한도가 얼마인가요?", "LTV가 뭔가요?"\n     * 복합: "대출 한도 확인하고 금리 비교도 해주세요"\n   - 키워드: 대출, 금리, 한도, 조건, 상환, LTV, DTI, DSR, 담보, 금융, 은행\n   - 필요한 처리: 대출 상품 조회, 금리 정보 검색, 한도 계산\n\n4. **CONTRACT_CREATION (계약서작성)**\n   - 설명: 새로운 계약서나 문서를 작성해달라는 요청\n   - 예시:\n     * 단순: "임대차계약서 작성해주세요", "전세계약서 초안 만들어주세요"\n     * 복합: "계약서 작성하고 주의사항도 검토해주세요"\n   - 키워드: 작성, 만들, 생성, 초안, 계약서, 문서, 양식\n   - 필요한 처리: 문서 생성 에이전트 호출, 템플릿 기반 작성\n\n5. **CONTRACT_REVIEW (계약서검토)**\n   - 설명: 기존 계약서나 문서를 검토해달라는 요청\n   - 예시:\n     * 단순: "이 계약서 검토해주세요", "특약사항 문제없나요?"\n     * 복합: "계약서 검토하고 수정사항도 제안해주세요"\n   - 키워드: 검토, 확인, 점검, 리뷰, 분석해, 살펴봐, 체크\n   - 필요한 처리: 문서 분석, 위험 요소 식별, 개선사항 제안\n\n6. **COMPREHENSIVE (종합분석)**\n   - 설명: 여러 측면을 종합적으로 분석해달라는 요청\n   - 예시:\n     * 단순: "이 물건 전체적으로 분석해주세요"\n     * 복합: "시세, 법률, 대출 모두 검토해서 종합 의견 주세요"\n   - 키워드: 종합, 전체, 모든, 전반적, 종합적, 평가, 분석\n   - 필요한 처리: 다중 데이터 소스 통합 분석\n\n7. **RISK_ANALYSIS (리스크분석)**\n   - 설명: 위험 요소나 주의사항에 대한 질문\n   - 예시:\n     * 단순: "이 계약 위험한가요?", "주의할 점 알려주세요"\n     * 복합: "리스크 분석하고 대안도 제시해주세요"\n   - 키워드: 위험, 리스크, 주의, 문제점, 조심, 걱정, 우려\n   - 필요한 처리: 위험 요소 분석, 주의사항 추출\n\n8. **UNCLEAR (불분명)**\n   - 설명: 의도를 명확히 파악하기 어려운 질문\n   - 예시: "이거 좀 봐주세요", "어떻게 해야 할까요?", "도와주세요"\n   - 처리: 추가 질문으로 의도 명확화 필요\n\n9. **IRRELEVANT (무관)**\n   - 설명: 부동산과 전혀 관련 없는 질문\n   - 예시: "날씨 어때?", "저녁 뭐 먹지?", "주식 추천해줘"\n   - 처리: 부동산 관련 질문을 유도\n\n## 복합 질문 예시와 분석:\n\n### 예시 1: "강남구 아파트 시세 알려주고 전세자금대출 가능한지도 확인해줘"\n- 주 의도: MARKET_INQUIRY (시세 조회가 먼저 필요)\n- 부가 의도: LOAN_CONSULT (대출 확인)\n- 분해: ["강남구 아파트 시세 조회", "전세자금대출 가능 여부 확인"]\n\n### 예시 2: "이 계약서 검토해서 위험한 부분 있는지 알려주고 수정 제안도 해줘"\n- 주 의도: CONTRACT_REVIEW (계약서 검토)\n- 부가 의도: RISK_ANALYSIS (위험 분석)\n- 분해: ["계약서 전체 검토", "위험 요소 식별", "수정사항 제안"]\n\n### 예시 3: "서초동 전세가 확인하고 법적으로 문제없는지도 봐줘"\n- 주 의도: MARKET_INQUIRY (시세 확인)\n- 부가 의도: LEGAL_CONSULT (법적 검토)\n- 분해: ["서초동 전세가 조회", "법적 이슈 검토"]\n\n## 응답 형식 (JSON 형식으로 응답):\n\n{\n    "intent": "LEGAL_CONSULT",\n    "confidence": 0.9,\n    "keywords": ["전세금", "인상", "제한"],\n    "sub_intents": [],\n    "is_compound": false,\n    "decomposed_tasks": [],\n    "entities": {\n        "location": "강남구",\n        "price": "5억",\n        "contract_type": "전세",\n        "date": "2024년",\n        "area": "84㎡",\n        "action_verbs": ["확인", "검토"]\n    },\n    "reasoning": "전세금 인상에 대한 법률 질문이므로 LEGAL_CONSULT로 분류"\n}\n\n응답 규칙:\n- intent: 위 9개 카테고리 중 하나 (대문자_언더스코어 형식)\n- confidence: 0.0~1.0 (0.8 이상이면 매우 확실, 0.5 미만이면 불확실)\n- keywords: 추출된 주요 키워드 목록\n- sub_intents: 복합 질문일 경우 부가적인 의도들\n- is_compound: 복합 질문 여부 (true/false)\n- decomposed_tasks: 복합 질문을 분해한 개별 작업들\n- entities: 추출된 엔티티 정보\n- reasoning: 분류한 이유와 근거 (상세하게)\n\n## 판단 가이드:\n- 여러 의도가 섞여있다면, 가장 주된 의도를 intent에, 나머지를 sub_intents에 기록\n- "그리고", "또한", "함께", "같이" 등의 연결어가 있으면 복합 질문일 가능성 높음\n- 법률 관련 키워드가 있으면 LEGAL_CONSULT 우선\n- 가격/시세 언급이 명확하면 MARKET_INQUIRY\n- 계약서라는 단어와 함께 "작성/만들기"가 있으면 CONTRACT_CREATION\n- 계약서라는 단어와 함께 "검토/확인"이 있으면 CONTRACT_REVIEW\n- 불확실하면 confidence를 낮게 설정하고 UNCLEAR 선택\n- 복합 질문은 is_compound를 true로 설정하고 개별 작업으로 분해\n\n분석할 질문: 임대차보호법 적용 대상은?'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 14:40:30,107 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 14:40:30,107 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 14:40:30,108 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 14:40:30,108 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 14:40:30,108 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 14:40:30,108 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 14:40:32,283 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 05:40:32 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'1888'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'1904'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9936'), (b'x-ratelimit-remaining-tokens', b'198318'), (b'x-ratelimit-reset-requests', b'9m12.743s'), (b'x-ratelimit-reset-tokens', b'504ms'), (b'x-request-id', b'req_a4b2504cf61a4513a159144f2f719b31'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989a95a80831e9fb-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 14:40:32,283 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 14:40:32,283 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 14:40:32,283 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 14:40:32,283 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 14:40:32,283 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 14:40:32,283 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 05:40:32 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '1888', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '1904', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9936', 'x-ratelimit-remaining-tokens': '198318', 'x-ratelimit-reset-requests': '9m12.743s', 'x-ratelimit-reset-tokens': '504ms', 'x-request-id': 'req_a4b2504cf61a4513a159144f2f719b31', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989a95a80831e9fb-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 14:40:32,283 - openai._base_client - DEBUG - request_id: req_a4b2504cf61a4513a159144f2f719b31
2025-10-05 14:40:32,284 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: intent_analysis | Model: gpt-4o-mini-2024-07-18 | Tokens: 2020 (prompt: 1920, completion: 100)
2025-10-05 14:40:32,284 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM Intent Analysis Result: {'intent': 'LEGAL_CONSULT', 'confidence': 0.9, 'keywords': ['임대차보호법', '적용', '대상'], 'sub_intents': [], 'is_compound': False, 'decomposed_tasks': [], 'entities': {}, 'reasoning': '임대차보호법의 적용 대상에 대한 법률 질문이므로 LEGAL_CONSULT로 분류'}
2025-10-05 14:40:32,284 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-21b1a66f-fd48-4654-b539-34ebb3376909', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 Agent 선택 전문가입니다.\n사용자의 요청에 가장 적합한 Agent/Team을 선택하는 것이 목표입니다.\n\n## 현재 상황\n\n**사용자 질문:** 임대차보호법 적용 대상은?\n**분석된 의도:** 법률상담\n**추출된 키워드:** [\'임대차보호법\', \'적용\', \'대상\']\n\n## 사용 가능한 Agent/Team 정보\n\n{\'search_team\': {\'name\': \'search_team\', \'capabilities\': \'법률 검색, 부동산 시세 조회, 대출 상품 검색\', \'tools\': [\'legal_search\', \'market_data\', \'loan_data\'], \'use_cases\': [\'법률 상담\', \'시세 조회\', \'대출 정보\']}, \'analysis_team\': {\'name\': \'analysis_team\', \'capabilities\': \'데이터 분석, 리스크 평가, 인사이트 생성, 추천\', \'tools\': [\'data_analyzer\', \'risk_evaluator\'], \'use_cases\': [\'시장 분석\', \'리스크 평가\', \'투자 분석\']}, \'document_team\': {\'name\': \'document_team\', \'capabilities\': \'계약서 작성, 문서 생성, 문서 검토\', \'tools\': [\'document_generator\', \'contract_reviewer\'], \'use_cases\': [\'계약서 작성\', \'문서 검토\']}}\n\n## Agent 역할 및 상세 가이드\n\n### 1. search_team (검색 팀)\n- **주요 기능**: 정보 검색 및 데이터 수집\n- **전문 분야**:\n  * 법률 정보 검색 (전세법, 임대차보호법, 부동산 관련 법규)\n  * 부동산 시세 조회 (매매가, 전세가, 월세, 실거래가)\n  * 대출 상품 정보 검색 (금리, 한도, 조건)\n  * 지역 정보 및 인프라 조회\n- **도구**: legal_search, market_data, loan_data\n- **적합한 작업**: 정보 조회, 데이터 수집, 법률 확인, 시세 파악\n- **예시**:\n  * "전세금 5% 인상 가능한가요?"\n  * "강남구 아파트 전세 시세"\n  * "전세자금대출 한도 얼마?"\n\n### 2. analysis_team (분석 팀)\n- **주요 기능**: 데이터 분석 및 평가\n- **전문 분야**:\n  * 시장 동향 분석 (상승률, 하락률, 추세)\n  * 리스크 평가 (계약, 투자 위험도)\n  * 투자 수익률 계산 (ROI, 월세 수익률)\n  * 대출 한도 및 조건 분석 (LTV, DTI, DSR)\n  * 비교 분석 (지역별, 상품별)\n- **도구**: data_analyzer, risk_evaluator, calculator\n- **적합한 작업**: 데이터 분석, 리스크 평가, 계산, 비교, 예측\n- **의존성**: 보통 search_team의 데이터가 필요\n- **예시**:\n  * "이 지역 투자 가치 분석해줘"\n  * "계약 리스크 평가해줘"\n  * "대출 가능 금액 계산해줘"\n\n### 3. document_team (문서 팀)\n- **주요 기능**: 문서 생성 및 관리\n- **전문 분야**:\n  * 계약서 작성 (임대차, 매매, 전세)\n  * 문서 템플릿 관리\n  * 특약사항 생성\n  * 계약서 수정안 작성\n  * 법률 문서 검토\n- **도구**: document_generator, contract_template, contract_reviewer\n- **적합한 작업**: 문서 작성, 계약서 생성, 문서 수정, 검토\n- **예시**:\n  * "임대차계약서 작성해줘"\n  * "특약사항 추가해줘"\n  * "계약서 수정안 만들어줘"\n\n## Agent 선택 전략\n\n### 1단계: 작업 유형 식별\n```\n정보 필요 → search_team\n분석/계산 필요 → analysis_team\n문서 작성 필요 → document_team\n```\n\n### 2단계: 의존성 분석\n```\n독립적 작업 → 단일 팀\n순차적 의존 → 여러 팀 (순서 중요)\n병렬 가능 → 여러 팀 (순서 무관)\n```\n\n### 3단계: 최적화\n```\n중복 제거 → 가장 적합한 팀만 선택\n효율성 → 병렬 처리 가능한 경우 표시\n```\n\n## 의도별 Agent 매핑 가이드\n\n| 의도 (Intent) | 추천 Agent 조합 | 이유 |\n|--------------|-----------------|------|\n| LEGAL_CONSULT | ["search_team"] | 법률 정보 검색 전문 |\n| MARKET_INQUIRY | ["search_team"] | 시세 데이터 조회 |\n| LOAN_CONSULT | ["search_team", "analysis_team"] | 대출 정보 조회 후 분석 |\n| CONTRACT_CREATION | ["document_team"] | 문서 생성 전문 |\n| CONTRACT_REVIEW | ["search_team", "analysis_team"] | 법률 검토 및 리스크 분석 |\n| COMPREHENSIVE | ["search_team", "analysis_team"] | 종합 정보 수집 및 분석 |\n| RISK_ANALYSIS | ["analysis_team"] | 리스크 평가 전문 |\n| UNCLEAR | ["search_team", "analysis_team"] | 포괄적 대응 |\n\n## 복합 질문 처리 예시\n\n### 예시 1: 순차적 처리\n질문: "강남구 시세 확인하고 투자 가치 분석해줘"\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "먼저 search_team이 시세 데이터를 수집하고, 그 결과를 analysis_team이 분석하여 투자 가치 평가"\n}\n```\n\n### 예시 2: 병렬 처리 가능\n질문: "법률 정보와 시세 정보 모두 알려줘"\n```json\n{\n    "selected_agents": ["search_team"],\n    "reasoning": "search_team이 법률과 시세 정보를 병렬로 조회 가능. 두 작업이 독립적이므로 동시 처리"\n}\n```\n\n### 예시 3: 3단계 파이프라인\n질문: "시세 조회하고 분석한 후 계약서 작성해줘"\n```json\n{\n    "selected_agents": ["search_team", "analysis_team", "document_team"],\n    "reasoning": "search_team이 데이터 수집 → analysis_team이 분석 → document_team이 분석 결과 기반 계약서 작성"\n}\n```\n\n## 응답 형식 (JSON)\n\n{\n    "selected_agents": ["선택된 agent/team 목록"],\n    "reasoning": "선택 이유를 구체적으로 설명. 각 Agent의 역할과 처리 순서 포함",\n    "coordination": "single/sequential/parallel/pipeline",\n    "dependencies": {"agent2": ["agent1"]},\n    "estimated_time": 30,\n    "confidence": 0.9\n}\n\n## 선택 가이드라인\n\n1. **최소 Agent 원칙**: 가능한 적은 수의 Agent로 처리\n2. **전문성 우선**: 해당 작업에 가장 전문적인 Agent 선택\n3. **효율성 고려**: 병렬 처리 가능한 경우 명시\n4. **의존성 관리**: 데이터 흐름을 고려한 순서 지정\n5. **폴백 전략**: 불확실한 경우 ["search_team", "analysis_team"] 조합\n\n## 주의사항\n\n- selected_agents는 반드시 배열 형태\n- Agent 이름은 정확히: "search_team", "analysis_team", "document_team"\n- 최소 1개, 최대 3개 선택\n- 순서는 실행 우선순위 (앞에 있을수록 먼저 실행)\n- reasoning은 상세하고 논리적으로 작성\n- coordination 필드로 실행 방식 명시\n- 복합 질문의 경우 의존성 관계 명확히 표시'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 14:40:32,285 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 14:40:32,285 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 14:40:32,285 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 14:40:32,285 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 14:40:32,285 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 14:40:32,285 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 14:40:34,460 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 05:40:34 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'1955'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'1994'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9936'), (b'x-ratelimit-remaining-tokens', b'198435'), (b'x-ratelimit-reset-requests', b'9m10.577s'), (b'x-ratelimit-reset-tokens', b'469ms'), (b'x-request-id', b'req_97b7c639bee2478b8052c3ae164b5c5d'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989a95b5ac0de9fb-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 14:40:34,461 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 14:40:34,461 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 14:40:34,466 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 14:40:34,466 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 14:40:34,466 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 14:40:34,467 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 05:40:34 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '1955', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '1994', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9936', 'x-ratelimit-remaining-tokens': '198435', 'x-ratelimit-reset-requests': '9m10.577s', 'x-ratelimit-reset-tokens': '469ms', 'x-request-id': 'req_97b7c639bee2478b8052c3ae164b5c5d', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989a95b5ac0de9fb-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 14:40:34,467 - openai._base_client - DEBUG - request_id: req_97b7c639bee2478b8052c3ae164b5c5d
2025-10-05 14:40:34,467 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: agent_selection | Model: gpt-4o-mini-2024-07-18 | Tokens: 1802 (prompt: 1703, completion: 99)
2025-10-05 14:40:34,467 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM agent selection reasoning: 사용자의 질문은 임대차보호법의 적용 대상에 대한 법률 정보 검색을 요구하고 있습니다. search_team은 법률 정보 검색에 전문화되어 있어, 임대차보호법 관련 정보를 정확하게 제공할 수 있습니다.
2025-10-05 14:40:34,467 - app.service_agent.cognitive_agents.planning_agent - INFO - ✅ Primary LLM selected agents: ['search_team']
2025-10-05 14:40:34,467 - __main__ - INFO -   의도: 법률상담
2025-10-05 14:40:34,467 - __main__ - INFO -   신뢰도: 0.90
2025-10-05 14:40:34,467 - __main__ - INFO -   추천 Agent: ['search_team']
2025-10-05 14:40:34,467 - __main__ - INFO - 
[Step 2] Query Decomposition...
2025-10-05 14:40:34,467 - app.service_agent.cognitive_agents.query_decomposer - INFO - Decomposing query: 임대차보호법 적용 대상은?...
2025-10-05 14:40:34,467 - app.service_agent.cognitive_agents.query_decomposer - INFO - Query is simple, no decomposition needed
2025-10-05 14:40:34,467 - __main__ - INFO -   복합 질문: False
2025-10-05 14:40:34,467 - __main__ - INFO -   작업 수: 1
2025-10-05 14:40:34,467 - __main__ - INFO -   실행 모드: sequential
2025-10-05 14:40:34,467 - __main__ - INFO - 
[Step 3] Execution Plan 생성...
2025-10-05 14:40:34,467 - app.service_agent.cognitive_agents.planning_agent - INFO - Creating execution plan for intent: 법률상담
2025-10-05 14:40:34,467 - app.service_agent.cognitive_agents.planning_agent - WARNING - AgentRegistry is empty, using default teams
2025-10-05 14:40:34,467 - app.service_agent.cognitive_agents.planning_agent - DEBUG - Suggested agents: ['search_team']
2025-10-05 14:40:34,467 - app.service_agent.cognitive_agents.planning_agent - DEBUG - Available agents: ['search_team', 'analysis_team', 'document_team']
2025-10-05 14:40:34,467 - app.service_agent.cognitive_agents.planning_agent - INFO - Selected agents/teams for execution: ['search_team']
2025-10-05 14:40:34,467 - __main__ - INFO -   전략: sequential
2025-10-05 14:40:34,467 - __main__ - INFO -   단계 수: 1
2025-10-05 14:40:34,467 - __main__ - INFO - 
✓ 테스트 성공 (소요시간: 4.36초)
2025-10-05 14:40:34,467 - __main__ - INFO - 
================================================================================
2025-10-05 14:40:34,467 - __main__ - INFO - [12] 단일 질문 테스트: S012
2025-10-05 14:40:34,467 - __main__ - INFO - 질문: 마포구 오피스텔 전세 시세는?
2025-10-05 14:40:34,468 - __main__ - INFO - ================================================================================
2025-10-05 14:40:34,468 - __main__ - INFO - 
[Step 1] Intent 분석...
2025-10-05 14:40:34,468 - app.service_agent.cognitive_agents.planning_agent - INFO - Analyzing intent for query: 마포구 오피스텔 전세 시세는?...
2025-10-05 14:40:34,468 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-96581a32-c0be-43a3-bd2b-0e9b3a51e4df', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 의도 분석 전문가입니다.\n사용자의 질문을 정확히 이해하고, 어떤 종류의 도움이 필요한지 분류해야 합니다.\n\n## 중요: 복합 질문 처리\n복합적인 질문(여러 의도가 섞인 질문)의 경우, 가장 핵심적인 의도를 파악하되,\nsub_intents 필드에 부가적인 의도들도 함께 기록해주세요.\n\n## 분류 카테고리 설명:\n\n1. **LEGAL_CONSULT (법률상담)**\n   - 설명: 부동산 관련 법률, 권리, 의무에 대한 질문\n   - 예시:\n     * 단순: "전세금 5% 인상이 가능한가요?", "임대차계약 갱신 거부할 수 있나요?"\n     * 복합: "전세금 인상 가능한지 확인하고 법적 근거도 알려주세요"\n   - 키워드: 법, 전세, 임대, 보증금, 계약, 권리, 의무, 갱신, 임차인, 임대인, 법률, 규정, 조항\n   - 필요한 처리: 법률 데이터베이스 검색, 관련 법조항 찾기\n\n2. **MARKET_INQUIRY (시세조회)**\n   - 설명: 부동산 시장 가격, 시세, 거래 동향에 대한 질문\n   - 예시:\n     * 단순: "강남구 아파트 전세 시세 알려주세요", "서초동 매매가 얼마나 올랐나요?"\n     * 복합: "강남구 시세 확인하고 대출 가능 금액도 계산해줘"\n   - 키워드: 시세, 가격, 매매가, 전세가, 월세, 시장, 동향, 평균, 지역명, 상승률, 하락률\n   - 필요한 처리: 부동산 시세 데이터 조회, 지역별 가격 분석\n\n3. **LOAN_CONSULT (대출상담)**\n   - 설명: 주택담보대출, 전세자금대출 등 금융 관련 질문\n   - 예시:\n     * 단순: "전세자금대출 한도가 얼마인가요?", "LTV가 뭔가요?"\n     * 복합: "대출 한도 확인하고 금리 비교도 해주세요"\n   - 키워드: 대출, 금리, 한도, 조건, 상환, LTV, DTI, DSR, 담보, 금융, 은행\n   - 필요한 처리: 대출 상품 조회, 금리 정보 검색, 한도 계산\n\n4. **CONTRACT_CREATION (계약서작성)**\n   - 설명: 새로운 계약서나 문서를 작성해달라는 요청\n   - 예시:\n     * 단순: "임대차계약서 작성해주세요", "전세계약서 초안 만들어주세요"\n     * 복합: "계약서 작성하고 주의사항도 검토해주세요"\n   - 키워드: 작성, 만들, 생성, 초안, 계약서, 문서, 양식\n   - 필요한 처리: 문서 생성 에이전트 호출, 템플릿 기반 작성\n\n5. **CONTRACT_REVIEW (계약서검토)**\n   - 설명: 기존 계약서나 문서를 검토해달라는 요청\n   - 예시:\n     * 단순: "이 계약서 검토해주세요", "특약사항 문제없나요?"\n     * 복합: "계약서 검토하고 수정사항도 제안해주세요"\n   - 키워드: 검토, 확인, 점검, 리뷰, 분석해, 살펴봐, 체크\n   - 필요한 처리: 문서 분석, 위험 요소 식별, 개선사항 제안\n\n6. **COMPREHENSIVE (종합분석)**\n   - 설명: 여러 측면을 종합적으로 분석해달라는 요청\n   - 예시:\n     * 단순: "이 물건 전체적으로 분석해주세요"\n     * 복합: "시세, 법률, 대출 모두 검토해서 종합 의견 주세요"\n   - 키워드: 종합, 전체, 모든, 전반적, 종합적, 평가, 분석\n   - 필요한 처리: 다중 데이터 소스 통합 분석\n\n7. **RISK_ANALYSIS (리스크분석)**\n   - 설명: 위험 요소나 주의사항에 대한 질문\n   - 예시:\n     * 단순: "이 계약 위험한가요?", "주의할 점 알려주세요"\n     * 복합: "리스크 분석하고 대안도 제시해주세요"\n   - 키워드: 위험, 리스크, 주의, 문제점, 조심, 걱정, 우려\n   - 필요한 처리: 위험 요소 분석, 주의사항 추출\n\n8. **UNCLEAR (불분명)**\n   - 설명: 의도를 명확히 파악하기 어려운 질문\n   - 예시: "이거 좀 봐주세요", "어떻게 해야 할까요?", "도와주세요"\n   - 처리: 추가 질문으로 의도 명확화 필요\n\n9. **IRRELEVANT (무관)**\n   - 설명: 부동산과 전혀 관련 없는 질문\n   - 예시: "날씨 어때?", "저녁 뭐 먹지?", "주식 추천해줘"\n   - 처리: 부동산 관련 질문을 유도\n\n## 복합 질문 예시와 분석:\n\n### 예시 1: "강남구 아파트 시세 알려주고 전세자금대출 가능한지도 확인해줘"\n- 주 의도: MARKET_INQUIRY (시세 조회가 먼저 필요)\n- 부가 의도: LOAN_CONSULT (대출 확인)\n- 분해: ["강남구 아파트 시세 조회", "전세자금대출 가능 여부 확인"]\n\n### 예시 2: "이 계약서 검토해서 위험한 부분 있는지 알려주고 수정 제안도 해줘"\n- 주 의도: CONTRACT_REVIEW (계약서 검토)\n- 부가 의도: RISK_ANALYSIS (위험 분석)\n- 분해: ["계약서 전체 검토", "위험 요소 식별", "수정사항 제안"]\n\n### 예시 3: "서초동 전세가 확인하고 법적으로 문제없는지도 봐줘"\n- 주 의도: MARKET_INQUIRY (시세 확인)\n- 부가 의도: LEGAL_CONSULT (법적 검토)\n- 분해: ["서초동 전세가 조회", "법적 이슈 검토"]\n\n## 응답 형식 (JSON 형식으로 응답):\n\n{\n    "intent": "LEGAL_CONSULT",\n    "confidence": 0.9,\n    "keywords": ["전세금", "인상", "제한"],\n    "sub_intents": [],\n    "is_compound": false,\n    "decomposed_tasks": [],\n    "entities": {\n        "location": "강남구",\n        "price": "5억",\n        "contract_type": "전세",\n        "date": "2024년",\n        "area": "84㎡",\n        "action_verbs": ["확인", "검토"]\n    },\n    "reasoning": "전세금 인상에 대한 법률 질문이므로 LEGAL_CONSULT로 분류"\n}\n\n응답 규칙:\n- intent: 위 9개 카테고리 중 하나 (대문자_언더스코어 형식)\n- confidence: 0.0~1.0 (0.8 이상이면 매우 확실, 0.5 미만이면 불확실)\n- keywords: 추출된 주요 키워드 목록\n- sub_intents: 복합 질문일 경우 부가적인 의도들\n- is_compound: 복합 질문 여부 (true/false)\n- decomposed_tasks: 복합 질문을 분해한 개별 작업들\n- entities: 추출된 엔티티 정보\n- reasoning: 분류한 이유와 근거 (상세하게)\n\n## 판단 가이드:\n- 여러 의도가 섞여있다면, 가장 주된 의도를 intent에, 나머지를 sub_intents에 기록\n- "그리고", "또한", "함께", "같이" 등의 연결어가 있으면 복합 질문일 가능성 높음\n- 법률 관련 키워드가 있으면 LEGAL_CONSULT 우선\n- 가격/시세 언급이 명확하면 MARKET_INQUIRY\n- 계약서라는 단어와 함께 "작성/만들기"가 있으면 CONTRACT_CREATION\n- 계약서라는 단어와 함께 "검토/확인"이 있으면 CONTRACT_REVIEW\n- 불확실하면 confidence를 낮게 설정하고 UNCLEAR 선택\n- 복합 질문은 is_compound를 true로 설정하고 개별 작업으로 분해\n\n분석할 질문: 마포구 오피스텔 전세 시세는?'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 14:40:34,468 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 14:40:34,468 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 14:40:34,469 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 14:40:34,469 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 14:40:34,469 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 14:40:34,469 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 14:40:37,302 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 05:40:37 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'2608'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'2640'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9934'), (b'x-ratelimit-remaining-tokens', b'198318'), (b'x-ratelimit-reset-requests', b'9m25.665s'), (b'x-ratelimit-reset-tokens', b'504ms'), (b'x-request-id', b'req_48037d33dca840d792e19164acbfa22f'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989a95c34ebbe9fb-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 14:40:37,303 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 14:40:37,303 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 14:40:37,306 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 14:40:37,306 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 14:40:37,306 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 14:40:37,306 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 05:40:37 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '2608', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '2640', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9934', 'x-ratelimit-remaining-tokens': '198318', 'x-ratelimit-reset-requests': '9m25.665s', 'x-ratelimit-reset-tokens': '504ms', 'x-request-id': 'req_48037d33dca840d792e19164acbfa22f', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989a95c34ebbe9fb-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 14:40:37,306 - openai._base_client - DEBUG - request_id: req_48037d33dca840d792e19164acbfa22f
2025-10-05 14:40:37,306 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: intent_analysis | Model: gpt-4o-mini-2024-07-18 | Tokens: 2057 (prompt: 1923, completion: 134)
2025-10-05 14:40:37,307 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM Intent Analysis Result: {'intent': 'MARKET_INQUIRY', 'confidence': 0.9, 'keywords': ['마포구', '오피스텔', '전세', '시세'], 'sub_intents': [], 'is_compound': False, 'decomposed_tasks': [], 'entities': {'location': '마포구', 'property_type': '오피스텔', 'contract_type': '전세'}, 'reasoning': '마포구 오피스텔 전세 시세에 대한 질문이므로 MARKET_INQUIRY로 분류'}
2025-10-05 14:40:37,307 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-d2b4730e-be81-4eda-8b5c-2c8d154b15b1', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 Agent 선택 전문가입니다.\n사용자의 요청에 가장 적합한 Agent/Team을 선택하는 것이 목표입니다.\n\n## 현재 상황\n\n**사용자 질문:** 마포구 오피스텔 전세 시세는?\n**분석된 의도:** 시세조회\n**추출된 키워드:** [\'마포구\', \'오피스텔\', \'전세\', \'시세\']\n\n## 사용 가능한 Agent/Team 정보\n\n{\'search_team\': {\'name\': \'search_team\', \'capabilities\': \'법률 검색, 부동산 시세 조회, 대출 상품 검색\', \'tools\': [\'legal_search\', \'market_data\', \'loan_data\'], \'use_cases\': [\'법률 상담\', \'시세 조회\', \'대출 정보\']}, \'analysis_team\': {\'name\': \'analysis_team\', \'capabilities\': \'데이터 분석, 리스크 평가, 인사이트 생성, 추천\', \'tools\': [\'data_analyzer\', \'risk_evaluator\'], \'use_cases\': [\'시장 분석\', \'리스크 평가\', \'투자 분석\']}, \'document_team\': {\'name\': \'document_team\', \'capabilities\': \'계약서 작성, 문서 생성, 문서 검토\', \'tools\': [\'document_generator\', \'contract_reviewer\'], \'use_cases\': [\'계약서 작성\', \'문서 검토\']}}\n\n## Agent 역할 및 상세 가이드\n\n### 1. search_team (검색 팀)\n- **주요 기능**: 정보 검색 및 데이터 수집\n- **전문 분야**:\n  * 법률 정보 검색 (전세법, 임대차보호법, 부동산 관련 법규)\n  * 부동산 시세 조회 (매매가, 전세가, 월세, 실거래가)\n  * 대출 상품 정보 검색 (금리, 한도, 조건)\n  * 지역 정보 및 인프라 조회\n- **도구**: legal_search, market_data, loan_data\n- **적합한 작업**: 정보 조회, 데이터 수집, 법률 확인, 시세 파악\n- **예시**:\n  * "전세금 5% 인상 가능한가요?"\n  * "강남구 아파트 전세 시세"\n  * "전세자금대출 한도 얼마?"\n\n### 2. analysis_team (분석 팀)\n- **주요 기능**: 데이터 분석 및 평가\n- **전문 분야**:\n  * 시장 동향 분석 (상승률, 하락률, 추세)\n  * 리스크 평가 (계약, 투자 위험도)\n  * 투자 수익률 계산 (ROI, 월세 수익률)\n  * 대출 한도 및 조건 분석 (LTV, DTI, DSR)\n  * 비교 분석 (지역별, 상품별)\n- **도구**: data_analyzer, risk_evaluator, calculator\n- **적합한 작업**: 데이터 분석, 리스크 평가, 계산, 비교, 예측\n- **의존성**: 보통 search_team의 데이터가 필요\n- **예시**:\n  * "이 지역 투자 가치 분석해줘"\n  * "계약 리스크 평가해줘"\n  * "대출 가능 금액 계산해줘"\n\n### 3. document_team (문서 팀)\n- **주요 기능**: 문서 생성 및 관리\n- **전문 분야**:\n  * 계약서 작성 (임대차, 매매, 전세)\n  * 문서 템플릿 관리\n  * 특약사항 생성\n  * 계약서 수정안 작성\n  * 법률 문서 검토\n- **도구**: document_generator, contract_template, contract_reviewer\n- **적합한 작업**: 문서 작성, 계약서 생성, 문서 수정, 검토\n- **예시**:\n  * "임대차계약서 작성해줘"\n  * "특약사항 추가해줘"\n  * "계약서 수정안 만들어줘"\n\n## Agent 선택 전략\n\n### 1단계: 작업 유형 식별\n```\n정보 필요 → search_team\n분석/계산 필요 → analysis_team\n문서 작성 필요 → document_team\n```\n\n### 2단계: 의존성 분석\n```\n독립적 작업 → 단일 팀\n순차적 의존 → 여러 팀 (순서 중요)\n병렬 가능 → 여러 팀 (순서 무관)\n```\n\n### 3단계: 최적화\n```\n중복 제거 → 가장 적합한 팀만 선택\n효율성 → 병렬 처리 가능한 경우 표시\n```\n\n## 의도별 Agent 매핑 가이드\n\n| 의도 (Intent) | 추천 Agent 조합 | 이유 |\n|--------------|-----------------|------|\n| LEGAL_CONSULT | ["search_team"] | 법률 정보 검색 전문 |\n| MARKET_INQUIRY | ["search_team"] | 시세 데이터 조회 |\n| LOAN_CONSULT | ["search_team", "analysis_team"] | 대출 정보 조회 후 분석 |\n| CONTRACT_CREATION | ["document_team"] | 문서 생성 전문 |\n| CONTRACT_REVIEW | ["search_team", "analysis_team"] | 법률 검토 및 리스크 분석 |\n| COMPREHENSIVE | ["search_team", "analysis_team"] | 종합 정보 수집 및 분석 |\n| RISK_ANALYSIS | ["analysis_team"] | 리스크 평가 전문 |\n| UNCLEAR | ["search_team", "analysis_team"] | 포괄적 대응 |\n\n## 복합 질문 처리 예시\n\n### 예시 1: 순차적 처리\n질문: "강남구 시세 확인하고 투자 가치 분석해줘"\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "먼저 search_team이 시세 데이터를 수집하고, 그 결과를 analysis_team이 분석하여 투자 가치 평가"\n}\n```\n\n### 예시 2: 병렬 처리 가능\n질문: "법률 정보와 시세 정보 모두 알려줘"\n```json\n{\n    "selected_agents": ["search_team"],\n    "reasoning": "search_team이 법률과 시세 정보를 병렬로 조회 가능. 두 작업이 독립적이므로 동시 처리"\n}\n```\n\n### 예시 3: 3단계 파이프라인\n질문: "시세 조회하고 분석한 후 계약서 작성해줘"\n```json\n{\n    "selected_agents": ["search_team", "analysis_team", "document_team"],\n    "reasoning": "search_team이 데이터 수집 → analysis_team이 분석 → document_team이 분석 결과 기반 계약서 작성"\n}\n```\n\n## 응답 형식 (JSON)\n\n{\n    "selected_agents": ["선택된 agent/team 목록"],\n    "reasoning": "선택 이유를 구체적으로 설명. 각 Agent의 역할과 처리 순서 포함",\n    "coordination": "single/sequential/parallel/pipeline",\n    "dependencies": {"agent2": ["agent1"]},\n    "estimated_time": 30,\n    "confidence": 0.9\n}\n\n## 선택 가이드라인\n\n1. **최소 Agent 원칙**: 가능한 적은 수의 Agent로 처리\n2. **전문성 우선**: 해당 작업에 가장 전문적인 Agent 선택\n3. **효율성 고려**: 병렬 처리 가능한 경우 명시\n4. **의존성 관리**: 데이터 흐름을 고려한 순서 지정\n5. **폴백 전략**: 불확실한 경우 ["search_team", "analysis_team"] 조합\n\n## 주의사항\n\n- selected_agents는 반드시 배열 형태\n- Agent 이름은 정확히: "search_team", "analysis_team", "document_team"\n- 최소 1개, 최대 3개 선택\n- 순서는 실행 우선순위 (앞에 있을수록 먼저 실행)\n- reasoning은 상세하고 논리적으로 작성\n- coordination 필드로 실행 방식 명시\n- 복합 질문의 경우 의존성 관계 명확히 표시'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 14:40:37,307 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 14:40:37,308 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 14:40:37,308 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 14:40:37,308 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 14:40:37,308 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 14:40:37,309 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 14:40:39,396 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 05:40:39 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'1851'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'1893'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9933'), (b'x-ratelimit-remaining-tokens', b'198431'), (b'x-ratelimit-reset-requests', b'9m31.465s'), (b'x-ratelimit-reset-tokens', b'470ms'), (b'x-request-id', b'req_da60c1e1f68d4ffb893e1f1e6d7a68eb'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989a95d50f0ae9fb-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 14:40:39,396 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 14:40:39,397 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 14:40:39,406 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 14:40:39,406 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 14:40:39,406 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 14:40:39,406 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 05:40:39 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '1851', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '1893', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9933', 'x-ratelimit-remaining-tokens': '198431', 'x-ratelimit-reset-requests': '9m31.465s', 'x-ratelimit-reset-tokens': '470ms', 'x-request-id': 'req_da60c1e1f68d4ffb893e1f1e6d7a68eb', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989a95d50f0ae9fb-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 14:40:39,407 - openai._base_client - DEBUG - request_id: req_da60c1e1f68d4ffb893e1f1e6d7a68eb
2025-10-05 14:40:39,407 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: agent_selection | Model: gpt-4o-mini-2024-07-18 | Tokens: 1806 (prompt: 1708, completion: 98)
2025-10-05 14:40:39,407 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM agent selection reasoning: 사용자가 요청한 마포구 오피스텔 전세 시세 조회는 부동산 시세 조회 전문인 search_team이 가장 적합합니다. 이 팀은 전세 시세에 대한 정보를 정확하게 수집할 수 있습니다.
2025-10-05 14:40:39,407 - app.service_agent.cognitive_agents.planning_agent - INFO - ✅ Primary LLM selected agents: ['search_team']
2025-10-05 14:40:39,407 - __main__ - INFO -   의도: 시세조회
2025-10-05 14:40:39,407 - __main__ - INFO -   신뢰도: 0.90
2025-10-05 14:40:39,407 - __main__ - INFO -   추천 Agent: ['search_team']
2025-10-05 14:40:39,407 - __main__ - INFO - 
[Step 2] Query Decomposition...
2025-10-05 14:40:39,407 - app.service_agent.cognitive_agents.query_decomposer - INFO - Decomposing query: 마포구 오피스텔 전세 시세는?...
2025-10-05 14:40:39,407 - app.service_agent.cognitive_agents.query_decomposer - INFO - Query is simple, no decomposition needed
2025-10-05 14:40:39,407 - __main__ - INFO -   복합 질문: False
2025-10-05 14:40:39,407 - __main__ - INFO -   작업 수: 1
2025-10-05 14:40:39,408 - __main__ - INFO -   실행 모드: sequential
2025-10-05 14:40:39,408 - __main__ - INFO - 
[Step 3] Execution Plan 생성...
2025-10-05 14:40:39,408 - app.service_agent.cognitive_agents.planning_agent - INFO - Creating execution plan for intent: 시세조회
2025-10-05 14:40:39,408 - app.service_agent.cognitive_agents.planning_agent - WARNING - AgentRegistry is empty, using default teams
2025-10-05 14:40:39,408 - app.service_agent.cognitive_agents.planning_agent - DEBUG - Suggested agents: ['search_team']
2025-10-05 14:40:39,408 - app.service_agent.cognitive_agents.planning_agent - DEBUG - Available agents: ['search_team', 'analysis_team', 'document_team']
2025-10-05 14:40:39,408 - app.service_agent.cognitive_agents.planning_agent - INFO - Selected agents/teams for execution: ['search_team']
2025-10-05 14:40:39,408 - __main__ - INFO -   전략: sequential
2025-10-05 14:40:39,408 - __main__ - INFO -   단계 수: 1
2025-10-05 14:40:39,408 - __main__ - INFO - 
✓ 테스트 성공 (소요시간: 4.94초)
2025-10-05 14:40:39,408 - __main__ - INFO - 
================================================================================
2025-10-05 14:40:39,408 - __main__ - INFO - [13] 단일 질문 테스트: S013
2025-10-05 14:40:39,408 - __main__ - INFO - 질문: DSR 규제가 뭔가요?
2025-10-05 14:40:39,408 - __main__ - INFO - ================================================================================
2025-10-05 14:40:39,408 - __main__ - INFO - 
[Step 1] Intent 분석...
2025-10-05 14:40:39,408 - app.service_agent.cognitive_agents.planning_agent - INFO - Analyzing intent for query: DSR 규제가 뭔가요?...
2025-10-05 14:40:39,408 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-b5bb4a52-5037-4385-b8fa-525667fbb1c8', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 의도 분석 전문가입니다.\n사용자의 질문을 정확히 이해하고, 어떤 종류의 도움이 필요한지 분류해야 합니다.\n\n## 중요: 복합 질문 처리\n복합적인 질문(여러 의도가 섞인 질문)의 경우, 가장 핵심적인 의도를 파악하되,\nsub_intents 필드에 부가적인 의도들도 함께 기록해주세요.\n\n## 분류 카테고리 설명:\n\n1. **LEGAL_CONSULT (법률상담)**\n   - 설명: 부동산 관련 법률, 권리, 의무에 대한 질문\n   - 예시:\n     * 단순: "전세금 5% 인상이 가능한가요?", "임대차계약 갱신 거부할 수 있나요?"\n     * 복합: "전세금 인상 가능한지 확인하고 법적 근거도 알려주세요"\n   - 키워드: 법, 전세, 임대, 보증금, 계약, 권리, 의무, 갱신, 임차인, 임대인, 법률, 규정, 조항\n   - 필요한 처리: 법률 데이터베이스 검색, 관련 법조항 찾기\n\n2. **MARKET_INQUIRY (시세조회)**\n   - 설명: 부동산 시장 가격, 시세, 거래 동향에 대한 질문\n   - 예시:\n     * 단순: "강남구 아파트 전세 시세 알려주세요", "서초동 매매가 얼마나 올랐나요?"\n     * 복합: "강남구 시세 확인하고 대출 가능 금액도 계산해줘"\n   - 키워드: 시세, 가격, 매매가, 전세가, 월세, 시장, 동향, 평균, 지역명, 상승률, 하락률\n   - 필요한 처리: 부동산 시세 데이터 조회, 지역별 가격 분석\n\n3. **LOAN_CONSULT (대출상담)**\n   - 설명: 주택담보대출, 전세자금대출 등 금융 관련 질문\n   - 예시:\n     * 단순: "전세자금대출 한도가 얼마인가요?", "LTV가 뭔가요?"\n     * 복합: "대출 한도 확인하고 금리 비교도 해주세요"\n   - 키워드: 대출, 금리, 한도, 조건, 상환, LTV, DTI, DSR, 담보, 금융, 은행\n   - 필요한 처리: 대출 상품 조회, 금리 정보 검색, 한도 계산\n\n4. **CONTRACT_CREATION (계약서작성)**\n   - 설명: 새로운 계약서나 문서를 작성해달라는 요청\n   - 예시:\n     * 단순: "임대차계약서 작성해주세요", "전세계약서 초안 만들어주세요"\n     * 복합: "계약서 작성하고 주의사항도 검토해주세요"\n   - 키워드: 작성, 만들, 생성, 초안, 계약서, 문서, 양식\n   - 필요한 처리: 문서 생성 에이전트 호출, 템플릿 기반 작성\n\n5. **CONTRACT_REVIEW (계약서검토)**\n   - 설명: 기존 계약서나 문서를 검토해달라는 요청\n   - 예시:\n     * 단순: "이 계약서 검토해주세요", "특약사항 문제없나요?"\n     * 복합: "계약서 검토하고 수정사항도 제안해주세요"\n   - 키워드: 검토, 확인, 점검, 리뷰, 분석해, 살펴봐, 체크\n   - 필요한 처리: 문서 분석, 위험 요소 식별, 개선사항 제안\n\n6. **COMPREHENSIVE (종합분석)**\n   - 설명: 여러 측면을 종합적으로 분석해달라는 요청\n   - 예시:\n     * 단순: "이 물건 전체적으로 분석해주세요"\n     * 복합: "시세, 법률, 대출 모두 검토해서 종합 의견 주세요"\n   - 키워드: 종합, 전체, 모든, 전반적, 종합적, 평가, 분석\n   - 필요한 처리: 다중 데이터 소스 통합 분석\n\n7. **RISK_ANALYSIS (리스크분석)**\n   - 설명: 위험 요소나 주의사항에 대한 질문\n   - 예시:\n     * 단순: "이 계약 위험한가요?", "주의할 점 알려주세요"\n     * 복합: "리스크 분석하고 대안도 제시해주세요"\n   - 키워드: 위험, 리스크, 주의, 문제점, 조심, 걱정, 우려\n   - 필요한 처리: 위험 요소 분석, 주의사항 추출\n\n8. **UNCLEAR (불분명)**\n   - 설명: 의도를 명확히 파악하기 어려운 질문\n   - 예시: "이거 좀 봐주세요", "어떻게 해야 할까요?", "도와주세요"\n   - 처리: 추가 질문으로 의도 명확화 필요\n\n9. **IRRELEVANT (무관)**\n   - 설명: 부동산과 전혀 관련 없는 질문\n   - 예시: "날씨 어때?", "저녁 뭐 먹지?", "주식 추천해줘"\n   - 처리: 부동산 관련 질문을 유도\n\n## 복합 질문 예시와 분석:\n\n### 예시 1: "강남구 아파트 시세 알려주고 전세자금대출 가능한지도 확인해줘"\n- 주 의도: MARKET_INQUIRY (시세 조회가 먼저 필요)\n- 부가 의도: LOAN_CONSULT (대출 확인)\n- 분해: ["강남구 아파트 시세 조회", "전세자금대출 가능 여부 확인"]\n\n### 예시 2: "이 계약서 검토해서 위험한 부분 있는지 알려주고 수정 제안도 해줘"\n- 주 의도: CONTRACT_REVIEW (계약서 검토)\n- 부가 의도: RISK_ANALYSIS (위험 분석)\n- 분해: ["계약서 전체 검토", "위험 요소 식별", "수정사항 제안"]\n\n### 예시 3: "서초동 전세가 확인하고 법적으로 문제없는지도 봐줘"\n- 주 의도: MARKET_INQUIRY (시세 확인)\n- 부가 의도: LEGAL_CONSULT (법적 검토)\n- 분해: ["서초동 전세가 조회", "법적 이슈 검토"]\n\n## 응답 형식 (JSON 형식으로 응답):\n\n{\n    "intent": "LEGAL_CONSULT",\n    "confidence": 0.9,\n    "keywords": ["전세금", "인상", "제한"],\n    "sub_intents": [],\n    "is_compound": false,\n    "decomposed_tasks": [],\n    "entities": {\n        "location": "강남구",\n        "price": "5억",\n        "contract_type": "전세",\n        "date": "2024년",\n        "area": "84㎡",\n        "action_verbs": ["확인", "검토"]\n    },\n    "reasoning": "전세금 인상에 대한 법률 질문이므로 LEGAL_CONSULT로 분류"\n}\n\n응답 규칙:\n- intent: 위 9개 카테고리 중 하나 (대문자_언더스코어 형식)\n- confidence: 0.0~1.0 (0.8 이상이면 매우 확실, 0.5 미만이면 불확실)\n- keywords: 추출된 주요 키워드 목록\n- sub_intents: 복합 질문일 경우 부가적인 의도들\n- is_compound: 복합 질문 여부 (true/false)\n- decomposed_tasks: 복합 질문을 분해한 개별 작업들\n- entities: 추출된 엔티티 정보\n- reasoning: 분류한 이유와 근거 (상세하게)\n\n## 판단 가이드:\n- 여러 의도가 섞여있다면, 가장 주된 의도를 intent에, 나머지를 sub_intents에 기록\n- "그리고", "또한", "함께", "같이" 등의 연결어가 있으면 복합 질문일 가능성 높음\n- 법률 관련 키워드가 있으면 LEGAL_CONSULT 우선\n- 가격/시세 언급이 명확하면 MARKET_INQUIRY\n- 계약서라는 단어와 함께 "작성/만들기"가 있으면 CONTRACT_CREATION\n- 계약서라는 단어와 함께 "검토/확인"이 있으면 CONTRACT_REVIEW\n- 불확실하면 confidence를 낮게 설정하고 UNCLEAR 선택\n- 복합 질문은 is_compound를 true로 설정하고 개별 작업으로 분해\n\n분석할 질문: DSR 규제가 뭔가요?'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 14:40:39,409 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 14:40:39,409 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 14:40:39,409 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 14:40:39,409 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 14:40:39,409 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 14:40:39,409 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 14:40:42,156 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 05:40:42 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'2513'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'2551'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9935'), (b'x-ratelimit-remaining-tokens', b'198322'), (b'x-ratelimit-reset-requests', b'9m20.723s'), (b'x-ratelimit-reset-tokens', b'503ms'), (b'x-request-id', b'req_1b5bfb595e2e4fe08e19e0b5e8a2e84f'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989a95e2290ce9fb-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 14:40:42,157 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 14:40:42,157 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 14:40:42,166 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 14:40:42,166 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 14:40:42,166 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 14:40:42,166 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 05:40:42 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '2513', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '2551', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9935', 'x-ratelimit-remaining-tokens': '198322', 'x-ratelimit-reset-requests': '9m20.723s', 'x-ratelimit-reset-tokens': '503ms', 'x-request-id': 'req_1b5bfb595e2e4fe08e19e0b5e8a2e84f', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989a95e2290ce9fb-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 14:40:42,166 - openai._base_client - DEBUG - request_id: req_1b5bfb595e2e4fe08e19e0b5e8a2e84f
2025-10-05 14:40:42,166 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: intent_analysis | Model: gpt-4o-mini-2024-07-18 | Tokens: 2032 (prompt: 1919, completion: 113)
2025-10-05 14:40:42,166 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM Intent Analysis Result: {'intent': 'LOAN_CONSULT', 'confidence': 0.8, 'keywords': ['DSR', '규제'], 'sub_intents': [], 'is_compound': False, 'decomposed_tasks': [], 'entities': {'action_verbs': ['설명', '알려주다']}, 'reasoning': 'DSR(총부채상환비율) 규제에 대한 질문이므로 LOAN_CONSULT로 분류'}
2025-10-05 14:40:42,167 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-88f8a494-5883-41f2-a47a-43c7360ccf9b', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 Agent 선택 전문가입니다.\n사용자의 요청에 가장 적합한 Agent/Team을 선택하는 것이 목표입니다.\n\n## 현재 상황\n\n**사용자 질문:** DSR 규제가 뭔가요?\n**분석된 의도:** 대출상담\n**추출된 키워드:** [\'DSR\', \'규제\']\n\n## 사용 가능한 Agent/Team 정보\n\n{\'search_team\': {\'name\': \'search_team\', \'capabilities\': \'법률 검색, 부동산 시세 조회, 대출 상품 검색\', \'tools\': [\'legal_search\', \'market_data\', \'loan_data\'], \'use_cases\': [\'법률 상담\', \'시세 조회\', \'대출 정보\']}, \'analysis_team\': {\'name\': \'analysis_team\', \'capabilities\': \'데이터 분석, 리스크 평가, 인사이트 생성, 추천\', \'tools\': [\'data_analyzer\', \'risk_evaluator\'], \'use_cases\': [\'시장 분석\', \'리스크 평가\', \'투자 분석\']}, \'document_team\': {\'name\': \'document_team\', \'capabilities\': \'계약서 작성, 문서 생성, 문서 검토\', \'tools\': [\'document_generator\', \'contract_reviewer\'], \'use_cases\': [\'계약서 작성\', \'문서 검토\']}}\n\n## Agent 역할 및 상세 가이드\n\n### 1. search_team (검색 팀)\n- **주요 기능**: 정보 검색 및 데이터 수집\n- **전문 분야**:\n  * 법률 정보 검색 (전세법, 임대차보호법, 부동산 관련 법규)\n  * 부동산 시세 조회 (매매가, 전세가, 월세, 실거래가)\n  * 대출 상품 정보 검색 (금리, 한도, 조건)\n  * 지역 정보 및 인프라 조회\n- **도구**: legal_search, market_data, loan_data\n- **적합한 작업**: 정보 조회, 데이터 수집, 법률 확인, 시세 파악\n- **예시**:\n  * "전세금 5% 인상 가능한가요?"\n  * "강남구 아파트 전세 시세"\n  * "전세자금대출 한도 얼마?"\n\n### 2. analysis_team (분석 팀)\n- **주요 기능**: 데이터 분석 및 평가\n- **전문 분야**:\n  * 시장 동향 분석 (상승률, 하락률, 추세)\n  * 리스크 평가 (계약, 투자 위험도)\n  * 투자 수익률 계산 (ROI, 월세 수익률)\n  * 대출 한도 및 조건 분석 (LTV, DTI, DSR)\n  * 비교 분석 (지역별, 상품별)\n- **도구**: data_analyzer, risk_evaluator, calculator\n- **적합한 작업**: 데이터 분석, 리스크 평가, 계산, 비교, 예측\n- **의존성**: 보통 search_team의 데이터가 필요\n- **예시**:\n  * "이 지역 투자 가치 분석해줘"\n  * "계약 리스크 평가해줘"\n  * "대출 가능 금액 계산해줘"\n\n### 3. document_team (문서 팀)\n- **주요 기능**: 문서 생성 및 관리\n- **전문 분야**:\n  * 계약서 작성 (임대차, 매매, 전세)\n  * 문서 템플릿 관리\n  * 특약사항 생성\n  * 계약서 수정안 작성\n  * 법률 문서 검토\n- **도구**: document_generator, contract_template, contract_reviewer\n- **적합한 작업**: 문서 작성, 계약서 생성, 문서 수정, 검토\n- **예시**:\n  * "임대차계약서 작성해줘"\n  * "특약사항 추가해줘"\n  * "계약서 수정안 만들어줘"\n\n## Agent 선택 전략\n\n### 1단계: 작업 유형 식별\n```\n정보 필요 → search_team\n분석/계산 필요 → analysis_team\n문서 작성 필요 → document_team\n```\n\n### 2단계: 의존성 분석\n```\n독립적 작업 → 단일 팀\n순차적 의존 → 여러 팀 (순서 중요)\n병렬 가능 → 여러 팀 (순서 무관)\n```\n\n### 3단계: 최적화\n```\n중복 제거 → 가장 적합한 팀만 선택\n효율성 → 병렬 처리 가능한 경우 표시\n```\n\n## 의도별 Agent 매핑 가이드\n\n| 의도 (Intent) | 추천 Agent 조합 | 이유 |\n|--------------|-----------------|------|\n| LEGAL_CONSULT | ["search_team"] | 법률 정보 검색 전문 |\n| MARKET_INQUIRY | ["search_team"] | 시세 데이터 조회 |\n| LOAN_CONSULT | ["search_team", "analysis_team"] | 대출 정보 조회 후 분석 |\n| CONTRACT_CREATION | ["document_team"] | 문서 생성 전문 |\n| CONTRACT_REVIEW | ["search_team", "analysis_team"] | 법률 검토 및 리스크 분석 |\n| COMPREHENSIVE | ["search_team", "analysis_team"] | 종합 정보 수집 및 분석 |\n| RISK_ANALYSIS | ["analysis_team"] | 리스크 평가 전문 |\n| UNCLEAR | ["search_team", "analysis_team"] | 포괄적 대응 |\n\n## 복합 질문 처리 예시\n\n### 예시 1: 순차적 처리\n질문: "강남구 시세 확인하고 투자 가치 분석해줘"\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "먼저 search_team이 시세 데이터를 수집하고, 그 결과를 analysis_team이 분석하여 투자 가치 평가"\n}\n```\n\n### 예시 2: 병렬 처리 가능\n질문: "법률 정보와 시세 정보 모두 알려줘"\n```json\n{\n    "selected_agents": ["search_team"],\n    "reasoning": "search_team이 법률과 시세 정보를 병렬로 조회 가능. 두 작업이 독립적이므로 동시 처리"\n}\n```\n\n### 예시 3: 3단계 파이프라인\n질문: "시세 조회하고 분석한 후 계약서 작성해줘"\n```json\n{\n    "selected_agents": ["search_team", "analysis_team", "document_team"],\n    "reasoning": "search_team이 데이터 수집 → analysis_team이 분석 → document_team이 분석 결과 기반 계약서 작성"\n}\n```\n\n## 응답 형식 (JSON)\n\n{\n    "selected_agents": ["선택된 agent/team 목록"],\n    "reasoning": "선택 이유를 구체적으로 설명. 각 Agent의 역할과 처리 순서 포함",\n    "coordination": "single/sequential/parallel/pipeline",\n    "dependencies": {"agent2": ["agent1"]},\n    "estimated_time": 30,\n    "confidence": 0.9\n}\n\n## 선택 가이드라인\n\n1. **최소 Agent 원칙**: 가능한 적은 수의 Agent로 처리\n2. **전문성 우선**: 해당 작업에 가장 전문적인 Agent 선택\n3. **효율성 고려**: 병렬 처리 가능한 경우 명시\n4. **의존성 관리**: 데이터 흐름을 고려한 순서 지정\n5. **폴백 전략**: 불확실한 경우 ["search_team", "analysis_team"] 조합\n\n## 주의사항\n\n- selected_agents는 반드시 배열 형태\n- Agent 이름은 정확히: "search_team", "analysis_team", "document_team"\n- 최소 1개, 최대 3개 선택\n- 순서는 실행 우선순위 (앞에 있을수록 먼저 실행)\n- reasoning은 상세하고 논리적으로 작성\n- coordination 필드로 실행 방식 명시\n- 복합 질문의 경우 의존성 관계 명확히 표시'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 14:40:42,167 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 14:40:42,167 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 14:40:42,168 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 14:40:42,168 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 14:40:42,168 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 14:40:42,168 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 14:40:44,572 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 05:40:44 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'2082'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'2110'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9933'), (b'x-ratelimit-remaining-tokens', b'198444'), (b'x-ratelimit-reset-requests', b'9m35.248s'), (b'x-ratelimit-reset-tokens', b'466ms'), (b'x-request-id', b'req_ab4a7a5fe00c443aba545df24c6c50a7'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989a95f36eb2e9fb-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 14:40:44,572 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 14:40:44,572 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 14:40:44,573 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 14:40:44,573 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 14:40:44,573 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 14:40:44,573 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 05:40:44 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '2082', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '2110', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9933', 'x-ratelimit-remaining-tokens': '198444', 'x-ratelimit-reset-requests': '9m35.248s', 'x-ratelimit-reset-tokens': '466ms', 'x-request-id': 'req_ab4a7a5fe00c443aba545df24c6c50a7', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989a95f36eb2e9fb-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 14:40:44,573 - openai._base_client - DEBUG - request_id: req_ab4a7a5fe00c443aba545df24c6c50a7
2025-10-05 14:40:44,573 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: agent_selection | Model: gpt-4o-mini-2024-07-18 | Tokens: 1810 (prompt: 1694, completion: 116)
2025-10-05 14:40:44,573 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM agent selection reasoning: 사용자가 DSR 규제에 대한 정보를 요청했으므로, 먼저 search_team이 DSR 규제에 대한 대출 정보를 수집하고, 그 후 analysis_team이 수집된 데이터를 분석하여 대출 가능성 및 리스크를 평가할 수 있도록 합니다.
2025-10-05 14:40:44,573 - app.service_agent.cognitive_agents.planning_agent - INFO - ✅ Primary LLM selected agents: ['search_team', 'analysis_team']
2025-10-05 14:40:44,573 - __main__ - INFO -   의도: 대출상담
2025-10-05 14:40:44,573 - __main__ - INFO -   신뢰도: 0.80
2025-10-05 14:40:44,573 - __main__ - INFO -   추천 Agent: ['search_team', 'analysis_team']
2025-10-05 14:40:44,573 - __main__ - INFO - 
[Step 2] Query Decomposition...
2025-10-05 14:40:44,573 - app.service_agent.cognitive_agents.query_decomposer - INFO - Decomposing query: DSR 규제가 뭔가요?...
2025-10-05 14:40:44,573 - app.service_agent.cognitive_agents.query_decomposer - INFO - Query is simple, no decomposition needed
2025-10-05 14:40:44,573 - __main__ - INFO -   복합 질문: False
2025-10-05 14:40:44,573 - __main__ - INFO -   작업 수: 1
2025-10-05 14:40:44,573 - __main__ - INFO -   실행 모드: sequential
2025-10-05 14:40:44,573 - __main__ - INFO - 
[Step 3] Execution Plan 생성...
2025-10-05 14:40:44,573 - app.service_agent.cognitive_agents.planning_agent - INFO - Creating execution plan for intent: 대출상담
2025-10-05 14:40:44,574 - app.service_agent.cognitive_agents.planning_agent - WARNING - AgentRegistry is empty, using default teams
2025-10-05 14:40:44,574 - app.service_agent.cognitive_agents.planning_agent - DEBUG - Suggested agents: ['search_team', 'analysis_team']
2025-10-05 14:40:44,574 - app.service_agent.cognitive_agents.planning_agent - DEBUG - Available agents: ['search_team', 'analysis_team', 'document_team']
2025-10-05 14:40:44,574 - app.service_agent.cognitive_agents.planning_agent - INFO - Selected agents/teams for execution: ['search_team', 'analysis_team']
2025-10-05 14:40:44,574 - __main__ - INFO -   전략: sequential
2025-10-05 14:40:44,574 - __main__ - INFO -   단계 수: 2
2025-10-05 14:40:44,574 - __main__ - INFO - 
✓ 테스트 성공 (소요시간: 5.17초)
2025-10-05 14:40:44,574 - __main__ - INFO - 
================================================================================
2025-10-05 14:40:44,574 - __main__ - INFO - [14] 단일 질문 테스트: S014
2025-10-05 14:40:44,574 - __main__ - INFO - 질문: 묵시적 갱신이 뭔가요?
2025-10-05 14:40:44,574 - __main__ - INFO - ================================================================================
2025-10-05 14:40:44,574 - __main__ - INFO - 
[Step 1] Intent 분석...
2025-10-05 14:40:44,574 - app.service_agent.cognitive_agents.planning_agent - INFO - Analyzing intent for query: 묵시적 갱신이 뭔가요?...
2025-10-05 14:40:44,574 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-3da28b7f-013f-4a6c-ab62-af8068015e75', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 의도 분석 전문가입니다.\n사용자의 질문을 정확히 이해하고, 어떤 종류의 도움이 필요한지 분류해야 합니다.\n\n## 중요: 복합 질문 처리\n복합적인 질문(여러 의도가 섞인 질문)의 경우, 가장 핵심적인 의도를 파악하되,\nsub_intents 필드에 부가적인 의도들도 함께 기록해주세요.\n\n## 분류 카테고리 설명:\n\n1. **LEGAL_CONSULT (법률상담)**\n   - 설명: 부동산 관련 법률, 권리, 의무에 대한 질문\n   - 예시:\n     * 단순: "전세금 5% 인상이 가능한가요?", "임대차계약 갱신 거부할 수 있나요?"\n     * 복합: "전세금 인상 가능한지 확인하고 법적 근거도 알려주세요"\n   - 키워드: 법, 전세, 임대, 보증금, 계약, 권리, 의무, 갱신, 임차인, 임대인, 법률, 규정, 조항\n   - 필요한 처리: 법률 데이터베이스 검색, 관련 법조항 찾기\n\n2. **MARKET_INQUIRY (시세조회)**\n   - 설명: 부동산 시장 가격, 시세, 거래 동향에 대한 질문\n   - 예시:\n     * 단순: "강남구 아파트 전세 시세 알려주세요", "서초동 매매가 얼마나 올랐나요?"\n     * 복합: "강남구 시세 확인하고 대출 가능 금액도 계산해줘"\n   - 키워드: 시세, 가격, 매매가, 전세가, 월세, 시장, 동향, 평균, 지역명, 상승률, 하락률\n   - 필요한 처리: 부동산 시세 데이터 조회, 지역별 가격 분석\n\n3. **LOAN_CONSULT (대출상담)**\n   - 설명: 주택담보대출, 전세자금대출 등 금융 관련 질문\n   - 예시:\n     * 단순: "전세자금대출 한도가 얼마인가요?", "LTV가 뭔가요?"\n     * 복합: "대출 한도 확인하고 금리 비교도 해주세요"\n   - 키워드: 대출, 금리, 한도, 조건, 상환, LTV, DTI, DSR, 담보, 금융, 은행\n   - 필요한 처리: 대출 상품 조회, 금리 정보 검색, 한도 계산\n\n4. **CONTRACT_CREATION (계약서작성)**\n   - 설명: 새로운 계약서나 문서를 작성해달라는 요청\n   - 예시:\n     * 단순: "임대차계약서 작성해주세요", "전세계약서 초안 만들어주세요"\n     * 복합: "계약서 작성하고 주의사항도 검토해주세요"\n   - 키워드: 작성, 만들, 생성, 초안, 계약서, 문서, 양식\n   - 필요한 처리: 문서 생성 에이전트 호출, 템플릿 기반 작성\n\n5. **CONTRACT_REVIEW (계약서검토)**\n   - 설명: 기존 계약서나 문서를 검토해달라는 요청\n   - 예시:\n     * 단순: "이 계약서 검토해주세요", "특약사항 문제없나요?"\n     * 복합: "계약서 검토하고 수정사항도 제안해주세요"\n   - 키워드: 검토, 확인, 점검, 리뷰, 분석해, 살펴봐, 체크\n   - 필요한 처리: 문서 분석, 위험 요소 식별, 개선사항 제안\n\n6. **COMPREHENSIVE (종합분석)**\n   - 설명: 여러 측면을 종합적으로 분석해달라는 요청\n   - 예시:\n     * 단순: "이 물건 전체적으로 분석해주세요"\n     * 복합: "시세, 법률, 대출 모두 검토해서 종합 의견 주세요"\n   - 키워드: 종합, 전체, 모든, 전반적, 종합적, 평가, 분석\n   - 필요한 처리: 다중 데이터 소스 통합 분석\n\n7. **RISK_ANALYSIS (리스크분석)**\n   - 설명: 위험 요소나 주의사항에 대한 질문\n   - 예시:\n     * 단순: "이 계약 위험한가요?", "주의할 점 알려주세요"\n     * 복합: "리스크 분석하고 대안도 제시해주세요"\n   - 키워드: 위험, 리스크, 주의, 문제점, 조심, 걱정, 우려\n   - 필요한 처리: 위험 요소 분석, 주의사항 추출\n\n8. **UNCLEAR (불분명)**\n   - 설명: 의도를 명확히 파악하기 어려운 질문\n   - 예시: "이거 좀 봐주세요", "어떻게 해야 할까요?", "도와주세요"\n   - 처리: 추가 질문으로 의도 명확화 필요\n\n9. **IRRELEVANT (무관)**\n   - 설명: 부동산과 전혀 관련 없는 질문\n   - 예시: "날씨 어때?", "저녁 뭐 먹지?", "주식 추천해줘"\n   - 처리: 부동산 관련 질문을 유도\n\n## 복합 질문 예시와 분석:\n\n### 예시 1: "강남구 아파트 시세 알려주고 전세자금대출 가능한지도 확인해줘"\n- 주 의도: MARKET_INQUIRY (시세 조회가 먼저 필요)\n- 부가 의도: LOAN_CONSULT (대출 확인)\n- 분해: ["강남구 아파트 시세 조회", "전세자금대출 가능 여부 확인"]\n\n### 예시 2: "이 계약서 검토해서 위험한 부분 있는지 알려주고 수정 제안도 해줘"\n- 주 의도: CONTRACT_REVIEW (계약서 검토)\n- 부가 의도: RISK_ANALYSIS (위험 분석)\n- 분해: ["계약서 전체 검토", "위험 요소 식별", "수정사항 제안"]\n\n### 예시 3: "서초동 전세가 확인하고 법적으로 문제없는지도 봐줘"\n- 주 의도: MARKET_INQUIRY (시세 확인)\n- 부가 의도: LEGAL_CONSULT (법적 검토)\n- 분해: ["서초동 전세가 조회", "법적 이슈 검토"]\n\n## 응답 형식 (JSON 형식으로 응답):\n\n{\n    "intent": "LEGAL_CONSULT",\n    "confidence": 0.9,\n    "keywords": ["전세금", "인상", "제한"],\n    "sub_intents": [],\n    "is_compound": false,\n    "decomposed_tasks": [],\n    "entities": {\n        "location": "강남구",\n        "price": "5억",\n        "contract_type": "전세",\n        "date": "2024년",\n        "area": "84㎡",\n        "action_verbs": ["확인", "검토"]\n    },\n    "reasoning": "전세금 인상에 대한 법률 질문이므로 LEGAL_CONSULT로 분류"\n}\n\n응답 규칙:\n- intent: 위 9개 카테고리 중 하나 (대문자_언더스코어 형식)\n- confidence: 0.0~1.0 (0.8 이상이면 매우 확실, 0.5 미만이면 불확실)\n- keywords: 추출된 주요 키워드 목록\n- sub_intents: 복합 질문일 경우 부가적인 의도들\n- is_compound: 복합 질문 여부 (true/false)\n- decomposed_tasks: 복합 질문을 분해한 개별 작업들\n- entities: 추출된 엔티티 정보\n- reasoning: 분류한 이유와 근거 (상세하게)\n\n## 판단 가이드:\n- 여러 의도가 섞여있다면, 가장 주된 의도를 intent에, 나머지를 sub_intents에 기록\n- "그리고", "또한", "함께", "같이" 등의 연결어가 있으면 복합 질문일 가능성 높음\n- 법률 관련 키워드가 있으면 LEGAL_CONSULT 우선\n- 가격/시세 언급이 명확하면 MARKET_INQUIRY\n- 계약서라는 단어와 함께 "작성/만들기"가 있으면 CONTRACT_CREATION\n- 계약서라는 단어와 함께 "검토/확인"이 있으면 CONTRACT_REVIEW\n- 불확실하면 confidence를 낮게 설정하고 UNCLEAR 선택\n- 복합 질문은 is_compound를 true로 설정하고 개별 작업으로 분해\n\n분석할 질문: 묵시적 갱신이 뭔가요?'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 14:40:44,575 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 14:40:44,575 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 14:40:44,575 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 14:40:44,575 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 14:40:44,575 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 14:40:44,575 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 14:40:46,926 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 05:40:46 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'2112'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'2137'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9931'), (b'x-ratelimit-remaining-tokens', b'198320'), (b'x-ratelimit-reset-requests', b'9m50.119s'), (b'x-ratelimit-reset-tokens', b'504ms'), (b'x-request-id', b'req_eb26b5ac789c4aa28c3d466dbaf4c16b'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989a96027fd2e9fb-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 14:40:46,926 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 14:40:46,926 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 14:40:46,930 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 14:40:46,930 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 14:40:46,930 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 14:40:46,931 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 05:40:46 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '2112', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '2137', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9931', 'x-ratelimit-remaining-tokens': '198320', 'x-ratelimit-reset-requests': '9m50.119s', 'x-ratelimit-reset-tokens': '504ms', 'x-request-id': 'req_eb26b5ac789c4aa28c3d466dbaf4c16b', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989a96027fd2e9fb-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 14:40:46,931 - openai._base_client - DEBUG - request_id: req_eb26b5ac789c4aa28c3d466dbaf4c16b
2025-10-05 14:40:46,931 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: intent_analysis | Model: gpt-4o-mini-2024-07-18 | Tokens: 2022 (prompt: 1923, completion: 99)
2025-10-05 14:40:46,931 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM Intent Analysis Result: {'intent': 'LEGAL_CONSULT', 'confidence': 0.8, 'keywords': ['묵시적', '갱신', '임대차'], 'sub_intents': [], 'is_compound': False, 'decomposed_tasks': [], 'entities': {}, 'reasoning': '묵시적 갱신에 대한 법률적 질문이므로 LEGAL_CONSULT로 분류'}
2025-10-05 14:40:46,932 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-2b41826f-f1e2-4554-a6e1-c5c06a4b07f7', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 Agent 선택 전문가입니다.\n사용자의 요청에 가장 적합한 Agent/Team을 선택하는 것이 목표입니다.\n\n## 현재 상황\n\n**사용자 질문:** 묵시적 갱신이 뭔가요?\n**분석된 의도:** 법률상담\n**추출된 키워드:** [\'묵시적\', \'갱신\', \'임대차\']\n\n## 사용 가능한 Agent/Team 정보\n\n{\'search_team\': {\'name\': \'search_team\', \'capabilities\': \'법률 검색, 부동산 시세 조회, 대출 상품 검색\', \'tools\': [\'legal_search\', \'market_data\', \'loan_data\'], \'use_cases\': [\'법률 상담\', \'시세 조회\', \'대출 정보\']}, \'analysis_team\': {\'name\': \'analysis_team\', \'capabilities\': \'데이터 분석, 리스크 평가, 인사이트 생성, 추천\', \'tools\': [\'data_analyzer\', \'risk_evaluator\'], \'use_cases\': [\'시장 분석\', \'리스크 평가\', \'투자 분석\']}, \'document_team\': {\'name\': \'document_team\', \'capabilities\': \'계약서 작성, 문서 생성, 문서 검토\', \'tools\': [\'document_generator\', \'contract_reviewer\'], \'use_cases\': [\'계약서 작성\', \'문서 검토\']}}\n\n## Agent 역할 및 상세 가이드\n\n### 1. search_team (검색 팀)\n- **주요 기능**: 정보 검색 및 데이터 수집\n- **전문 분야**:\n  * 법률 정보 검색 (전세법, 임대차보호법, 부동산 관련 법규)\n  * 부동산 시세 조회 (매매가, 전세가, 월세, 실거래가)\n  * 대출 상품 정보 검색 (금리, 한도, 조건)\n  * 지역 정보 및 인프라 조회\n- **도구**: legal_search, market_data, loan_data\n- **적합한 작업**: 정보 조회, 데이터 수집, 법률 확인, 시세 파악\n- **예시**:\n  * "전세금 5% 인상 가능한가요?"\n  * "강남구 아파트 전세 시세"\n  * "전세자금대출 한도 얼마?"\n\n### 2. analysis_team (분석 팀)\n- **주요 기능**: 데이터 분석 및 평가\n- **전문 분야**:\n  * 시장 동향 분석 (상승률, 하락률, 추세)\n  * 리스크 평가 (계약, 투자 위험도)\n  * 투자 수익률 계산 (ROI, 월세 수익률)\n  * 대출 한도 및 조건 분석 (LTV, DTI, DSR)\n  * 비교 분석 (지역별, 상품별)\n- **도구**: data_analyzer, risk_evaluator, calculator\n- **적합한 작업**: 데이터 분석, 리스크 평가, 계산, 비교, 예측\n- **의존성**: 보통 search_team의 데이터가 필요\n- **예시**:\n  * "이 지역 투자 가치 분석해줘"\n  * "계약 리스크 평가해줘"\n  * "대출 가능 금액 계산해줘"\n\n### 3. document_team (문서 팀)\n- **주요 기능**: 문서 생성 및 관리\n- **전문 분야**:\n  * 계약서 작성 (임대차, 매매, 전세)\n  * 문서 템플릿 관리\n  * 특약사항 생성\n  * 계약서 수정안 작성\n  * 법률 문서 검토\n- **도구**: document_generator, contract_template, contract_reviewer\n- **적합한 작업**: 문서 작성, 계약서 생성, 문서 수정, 검토\n- **예시**:\n  * "임대차계약서 작성해줘"\n  * "특약사항 추가해줘"\n  * "계약서 수정안 만들어줘"\n\n## Agent 선택 전략\n\n### 1단계: 작업 유형 식별\n```\n정보 필요 → search_team\n분석/계산 필요 → analysis_team\n문서 작성 필요 → document_team\n```\n\n### 2단계: 의존성 분석\n```\n독립적 작업 → 단일 팀\n순차적 의존 → 여러 팀 (순서 중요)\n병렬 가능 → 여러 팀 (순서 무관)\n```\n\n### 3단계: 최적화\n```\n중복 제거 → 가장 적합한 팀만 선택\n효율성 → 병렬 처리 가능한 경우 표시\n```\n\n## 의도별 Agent 매핑 가이드\n\n| 의도 (Intent) | 추천 Agent 조합 | 이유 |\n|--------------|-----------------|------|\n| LEGAL_CONSULT | ["search_team"] | 법률 정보 검색 전문 |\n| MARKET_INQUIRY | ["search_team"] | 시세 데이터 조회 |\n| LOAN_CONSULT | ["search_team", "analysis_team"] | 대출 정보 조회 후 분석 |\n| CONTRACT_CREATION | ["document_team"] | 문서 생성 전문 |\n| CONTRACT_REVIEW | ["search_team", "analysis_team"] | 법률 검토 및 리스크 분석 |\n| COMPREHENSIVE | ["search_team", "analysis_team"] | 종합 정보 수집 및 분석 |\n| RISK_ANALYSIS | ["analysis_team"] | 리스크 평가 전문 |\n| UNCLEAR | ["search_team", "analysis_team"] | 포괄적 대응 |\n\n## 복합 질문 처리 예시\n\n### 예시 1: 순차적 처리\n질문: "강남구 시세 확인하고 투자 가치 분석해줘"\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "먼저 search_team이 시세 데이터를 수집하고, 그 결과를 analysis_team이 분석하여 투자 가치 평가"\n}\n```\n\n### 예시 2: 병렬 처리 가능\n질문: "법률 정보와 시세 정보 모두 알려줘"\n```json\n{\n    "selected_agents": ["search_team"],\n    "reasoning": "search_team이 법률과 시세 정보를 병렬로 조회 가능. 두 작업이 독립적이므로 동시 처리"\n}\n```\n\n### 예시 3: 3단계 파이프라인\n질문: "시세 조회하고 분석한 후 계약서 작성해줘"\n```json\n{\n    "selected_agents": ["search_team", "analysis_team", "document_team"],\n    "reasoning": "search_team이 데이터 수집 → analysis_team이 분석 → document_team이 분석 결과 기반 계약서 작성"\n}\n```\n\n## 응답 형식 (JSON)\n\n{\n    "selected_agents": ["선택된 agent/team 목록"],\n    "reasoning": "선택 이유를 구체적으로 설명. 각 Agent의 역할과 처리 순서 포함",\n    "coordination": "single/sequential/parallel/pipeline",\n    "dependencies": {"agent2": ["agent1"]},\n    "estimated_time": 30,\n    "confidence": 0.9\n}\n\n## 선택 가이드라인\n\n1. **최소 Agent 원칙**: 가능한 적은 수의 Agent로 처리\n2. **전문성 우선**: 해당 작업에 가장 전문적인 Agent 선택\n3. **효율성 고려**: 병렬 처리 가능한 경우 명시\n4. **의존성 관리**: 데이터 흐름을 고려한 순서 지정\n5. **폴백 전략**: 불확실한 경우 ["search_team", "analysis_team"] 조합\n\n## 주의사항\n\n- selected_agents는 반드시 배열 형태\n- Agent 이름은 정확히: "search_team", "analysis_team", "document_team"\n- 최소 1개, 최대 3개 선택\n- 순서는 실행 우선순위 (앞에 있을수록 먼저 실행)\n- reasoning은 상세하고 논리적으로 작성\n- coordination 필드로 실행 방식 명시\n- 복합 질문의 경우 의존성 관계 명확히 표시'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 14:40:46,932 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 14:40:46,932 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 14:40:46,933 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 14:40:46,933 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 14:40:46,933 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 14:40:46,933 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 14:40:49,025 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 05:40:48 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'1883'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'1905'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9930'), (b'x-ratelimit-remaining-tokens', b'198438'), (b'x-ratelimit-reset-requests', b'9m56.405s'), (b'x-ratelimit-reset-tokens', b'468ms'), (b'x-request-id', b'req_91cefc8fc85545bb88833c621256df4a'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989a96112e86e9fb-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 14:40:49,026 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 14:40:49,026 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 14:40:49,027 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 14:40:49,027 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 14:40:49,027 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 14:40:49,027 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 05:40:48 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '1883', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '1905', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9930', 'x-ratelimit-remaining-tokens': '198438', 'x-ratelimit-reset-requests': '9m56.405s', 'x-ratelimit-reset-tokens': '468ms', 'x-request-id': 'req_91cefc8fc85545bb88833c621256df4a', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989a96112e86e9fb-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 14:40:49,028 - openai._base_client - DEBUG - request_id: req_91cefc8fc85545bb88833c621256df4a
2025-10-05 14:40:49,028 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: agent_selection | Model: gpt-4o-mini-2024-07-18 | Tokens: 1806 (prompt: 1706, completion: 100)
2025-10-05 14:40:49,028 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM agent selection reasoning: 사용자의 질문은 '묵시적 갱신'에 대한 법률적 정보 요청으로, 법률 정보 검색 전문인 search_team이 가장 적합합니다. 이 팀은 임대차 관련 법규에 대한 정보를 제공할 수 있습니다.
2025-10-05 14:40:49,028 - app.service_agent.cognitive_agents.planning_agent - INFO - ✅ Primary LLM selected agents: ['search_team']
2025-10-05 14:40:49,028 - __main__ - INFO -   의도: 법률상담
2025-10-05 14:40:49,028 - __main__ - INFO -   신뢰도: 0.80
2025-10-05 14:40:49,028 - __main__ - INFO -   추천 Agent: ['search_team']
2025-10-05 14:40:49,029 - __main__ - INFO - 
[Step 2] Query Decomposition...
2025-10-05 14:40:49,029 - app.service_agent.cognitive_agents.query_decomposer - INFO - Decomposing query: 묵시적 갱신이 뭔가요?...
2025-10-05 14:40:49,029 - app.service_agent.cognitive_agents.query_decomposer - INFO - Query is simple, no decomposition needed
2025-10-05 14:40:49,029 - __main__ - INFO -   복합 질문: False
2025-10-05 14:40:49,029 - __main__ - INFO -   작업 수: 1
2025-10-05 14:40:49,029 - __main__ - INFO -   실행 모드: sequential
2025-10-05 14:40:49,029 - __main__ - INFO - 
[Step 3] Execution Plan 생성...
2025-10-05 14:40:49,029 - app.service_agent.cognitive_agents.planning_agent - INFO - Creating execution plan for intent: 법률상담
2025-10-05 14:40:49,029 - app.service_agent.cognitive_agents.planning_agent - WARNING - AgentRegistry is empty, using default teams
2025-10-05 14:40:49,029 - app.service_agent.cognitive_agents.planning_agent - DEBUG - Suggested agents: ['search_team']
2025-10-05 14:40:49,029 - app.service_agent.cognitive_agents.planning_agent - DEBUG - Available agents: ['search_team', 'analysis_team', 'document_team']
2025-10-05 14:40:49,029 - app.service_agent.cognitive_agents.planning_agent - INFO - Selected agents/teams for execution: ['search_team']
2025-10-05 14:40:49,029 - __main__ - INFO -   전략: sequential
2025-10-05 14:40:49,029 - __main__ - INFO -   단계 수: 1
2025-10-05 14:40:49,029 - __main__ - INFO - 
✓ 테스트 성공 (소요시간: 4.45초)
2025-10-05 14:40:49,029 - __main__ - INFO - 
================================================================================
2025-10-05 14:40:49,030 - __main__ - INFO - [15] 단일 질문 테스트: S015
2025-10-05 14:40:49,030 - __main__ - INFO - 질문: 용산구 아파트 실거래가 조회
2025-10-05 14:40:49,030 - __main__ - INFO - ================================================================================
2025-10-05 14:40:49,030 - __main__ - INFO - 
[Step 1] Intent 분석...
2025-10-05 14:40:49,030 - app.service_agent.cognitive_agents.planning_agent - INFO - Analyzing intent for query: 용산구 아파트 실거래가 조회...
2025-10-05 14:40:49,030 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-fff00f1d-58bb-4012-93ba-df6ad408f6cb', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 의도 분석 전문가입니다.\n사용자의 질문을 정확히 이해하고, 어떤 종류의 도움이 필요한지 분류해야 합니다.\n\n## 중요: 복합 질문 처리\n복합적인 질문(여러 의도가 섞인 질문)의 경우, 가장 핵심적인 의도를 파악하되,\nsub_intents 필드에 부가적인 의도들도 함께 기록해주세요.\n\n## 분류 카테고리 설명:\n\n1. **LEGAL_CONSULT (법률상담)**\n   - 설명: 부동산 관련 법률, 권리, 의무에 대한 질문\n   - 예시:\n     * 단순: "전세금 5% 인상이 가능한가요?", "임대차계약 갱신 거부할 수 있나요?"\n     * 복합: "전세금 인상 가능한지 확인하고 법적 근거도 알려주세요"\n   - 키워드: 법, 전세, 임대, 보증금, 계약, 권리, 의무, 갱신, 임차인, 임대인, 법률, 규정, 조항\n   - 필요한 처리: 법률 데이터베이스 검색, 관련 법조항 찾기\n\n2. **MARKET_INQUIRY (시세조회)**\n   - 설명: 부동산 시장 가격, 시세, 거래 동향에 대한 질문\n   - 예시:\n     * 단순: "강남구 아파트 전세 시세 알려주세요", "서초동 매매가 얼마나 올랐나요?"\n     * 복합: "강남구 시세 확인하고 대출 가능 금액도 계산해줘"\n   - 키워드: 시세, 가격, 매매가, 전세가, 월세, 시장, 동향, 평균, 지역명, 상승률, 하락률\n   - 필요한 처리: 부동산 시세 데이터 조회, 지역별 가격 분석\n\n3. **LOAN_CONSULT (대출상담)**\n   - 설명: 주택담보대출, 전세자금대출 등 금융 관련 질문\n   - 예시:\n     * 단순: "전세자금대출 한도가 얼마인가요?", "LTV가 뭔가요?"\n     * 복합: "대출 한도 확인하고 금리 비교도 해주세요"\n   - 키워드: 대출, 금리, 한도, 조건, 상환, LTV, DTI, DSR, 담보, 금융, 은행\n   - 필요한 처리: 대출 상품 조회, 금리 정보 검색, 한도 계산\n\n4. **CONTRACT_CREATION (계약서작성)**\n   - 설명: 새로운 계약서나 문서를 작성해달라는 요청\n   - 예시:\n     * 단순: "임대차계약서 작성해주세요", "전세계약서 초안 만들어주세요"\n     * 복합: "계약서 작성하고 주의사항도 검토해주세요"\n   - 키워드: 작성, 만들, 생성, 초안, 계약서, 문서, 양식\n   - 필요한 처리: 문서 생성 에이전트 호출, 템플릿 기반 작성\n\n5. **CONTRACT_REVIEW (계약서검토)**\n   - 설명: 기존 계약서나 문서를 검토해달라는 요청\n   - 예시:\n     * 단순: "이 계약서 검토해주세요", "특약사항 문제없나요?"\n     * 복합: "계약서 검토하고 수정사항도 제안해주세요"\n   - 키워드: 검토, 확인, 점검, 리뷰, 분석해, 살펴봐, 체크\n   - 필요한 처리: 문서 분석, 위험 요소 식별, 개선사항 제안\n\n6. **COMPREHENSIVE (종합분석)**\n   - 설명: 여러 측면을 종합적으로 분석해달라는 요청\n   - 예시:\n     * 단순: "이 물건 전체적으로 분석해주세요"\n     * 복합: "시세, 법률, 대출 모두 검토해서 종합 의견 주세요"\n   - 키워드: 종합, 전체, 모든, 전반적, 종합적, 평가, 분석\n   - 필요한 처리: 다중 데이터 소스 통합 분석\n\n7. **RISK_ANALYSIS (리스크분석)**\n   - 설명: 위험 요소나 주의사항에 대한 질문\n   - 예시:\n     * 단순: "이 계약 위험한가요?", "주의할 점 알려주세요"\n     * 복합: "리스크 분석하고 대안도 제시해주세요"\n   - 키워드: 위험, 리스크, 주의, 문제점, 조심, 걱정, 우려\n   - 필요한 처리: 위험 요소 분석, 주의사항 추출\n\n8. **UNCLEAR (불분명)**\n   - 설명: 의도를 명확히 파악하기 어려운 질문\n   - 예시: "이거 좀 봐주세요", "어떻게 해야 할까요?", "도와주세요"\n   - 처리: 추가 질문으로 의도 명확화 필요\n\n9. **IRRELEVANT (무관)**\n   - 설명: 부동산과 전혀 관련 없는 질문\n   - 예시: "날씨 어때?", "저녁 뭐 먹지?", "주식 추천해줘"\n   - 처리: 부동산 관련 질문을 유도\n\n## 복합 질문 예시와 분석:\n\n### 예시 1: "강남구 아파트 시세 알려주고 전세자금대출 가능한지도 확인해줘"\n- 주 의도: MARKET_INQUIRY (시세 조회가 먼저 필요)\n- 부가 의도: LOAN_CONSULT (대출 확인)\n- 분해: ["강남구 아파트 시세 조회", "전세자금대출 가능 여부 확인"]\n\n### 예시 2: "이 계약서 검토해서 위험한 부분 있는지 알려주고 수정 제안도 해줘"\n- 주 의도: CONTRACT_REVIEW (계약서 검토)\n- 부가 의도: RISK_ANALYSIS (위험 분석)\n- 분해: ["계약서 전체 검토", "위험 요소 식별", "수정사항 제안"]\n\n### 예시 3: "서초동 전세가 확인하고 법적으로 문제없는지도 봐줘"\n- 주 의도: MARKET_INQUIRY (시세 확인)\n- 부가 의도: LEGAL_CONSULT (법적 검토)\n- 분해: ["서초동 전세가 조회", "법적 이슈 검토"]\n\n## 응답 형식 (JSON 형식으로 응답):\n\n{\n    "intent": "LEGAL_CONSULT",\n    "confidence": 0.9,\n    "keywords": ["전세금", "인상", "제한"],\n    "sub_intents": [],\n    "is_compound": false,\n    "decomposed_tasks": [],\n    "entities": {\n        "location": "강남구",\n        "price": "5억",\n        "contract_type": "전세",\n        "date": "2024년",\n        "area": "84㎡",\n        "action_verbs": ["확인", "검토"]\n    },\n    "reasoning": "전세금 인상에 대한 법률 질문이므로 LEGAL_CONSULT로 분류"\n}\n\n응답 규칙:\n- intent: 위 9개 카테고리 중 하나 (대문자_언더스코어 형식)\n- confidence: 0.0~1.0 (0.8 이상이면 매우 확실, 0.5 미만이면 불확실)\n- keywords: 추출된 주요 키워드 목록\n- sub_intents: 복합 질문일 경우 부가적인 의도들\n- is_compound: 복합 질문 여부 (true/false)\n- decomposed_tasks: 복합 질문을 분해한 개별 작업들\n- entities: 추출된 엔티티 정보\n- reasoning: 분류한 이유와 근거 (상세하게)\n\n## 판단 가이드:\n- 여러 의도가 섞여있다면, 가장 주된 의도를 intent에, 나머지를 sub_intents에 기록\n- "그리고", "또한", "함께", "같이" 등의 연결어가 있으면 복합 질문일 가능성 높음\n- 법률 관련 키워드가 있으면 LEGAL_CONSULT 우선\n- 가격/시세 언급이 명확하면 MARKET_INQUIRY\n- 계약서라는 단어와 함께 "작성/만들기"가 있으면 CONTRACT_CREATION\n- 계약서라는 단어와 함께 "검토/확인"이 있으면 CONTRACT_REVIEW\n- 불확실하면 confidence를 낮게 설정하고 UNCLEAR 선택\n- 복합 질문은 is_compound를 true로 설정하고 개별 작업으로 분해\n\n분석할 질문: 용산구 아파트 실거래가 조회'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 14:40:49,031 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 14:40:49,031 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 14:40:49,031 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 14:40:49,031 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 14:40:49,031 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 14:40:49,031 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 14:40:52,399 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 05:40:52 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'3155'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'3177'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9930'), (b'x-ratelimit-remaining-tokens', b'198318'), (b'x-ratelimit-reset-requests', b'10m2.952s'), (b'x-ratelimit-reset-tokens', b'504ms'), (b'x-request-id', b'req_2984d423529640d497726dd737d788dc'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989a961e4a74e9fb-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 14:40:52,399 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 14:40:52,399 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 14:40:52,399 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 14:40:52,399 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 14:40:52,399 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 14:40:52,399 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 05:40:52 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '3155', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '3177', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9930', 'x-ratelimit-remaining-tokens': '198318', 'x-ratelimit-reset-requests': '10m2.952s', 'x-ratelimit-reset-tokens': '504ms', 'x-request-id': 'req_2984d423529640d497726dd737d788dc', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989a961e4a74e9fb-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 14:40:52,399 - openai._base_client - DEBUG - request_id: req_2984d423529640d497726dd737d788dc
2025-10-05 14:40:52,400 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: intent_analysis | Model: gpt-4o-mini-2024-07-18 | Tokens: 2051 (prompt: 1920, completion: 131)
2025-10-05 14:40:52,400 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM Intent Analysis Result: {'intent': 'MARKET_INQUIRY', 'confidence': 0.95, 'keywords': ['용산구', '아파트', '실거래가', '조회'], 'sub_intents': [], 'is_compound': False, 'decomposed_tasks': [], 'entities': {'location': '용산구', 'property_type': '아파트', 'action_verbs': ['조회']}, 'reasoning': '용산구 아파트의 실거래가를 조회하는 질문이므로 MARKET_INQUIRY로 분류'}
2025-10-05 14:40:52,400 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-9f9e44d4-c295-4c04-9504-6e73f5796a41', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 Agent 선택 전문가입니다.\n사용자의 요청에 가장 적합한 Agent/Team을 선택하는 것이 목표입니다.\n\n## 현재 상황\n\n**사용자 질문:** 용산구 아파트 실거래가 조회\n**분석된 의도:** 시세조회\n**추출된 키워드:** [\'용산구\', \'아파트\', \'실거래가\', \'조회\']\n\n## 사용 가능한 Agent/Team 정보\n\n{\'search_team\': {\'name\': \'search_team\', \'capabilities\': \'법률 검색, 부동산 시세 조회, 대출 상품 검색\', \'tools\': [\'legal_search\', \'market_data\', \'loan_data\'], \'use_cases\': [\'법률 상담\', \'시세 조회\', \'대출 정보\']}, \'analysis_team\': {\'name\': \'analysis_team\', \'capabilities\': \'데이터 분석, 리스크 평가, 인사이트 생성, 추천\', \'tools\': [\'data_analyzer\', \'risk_evaluator\'], \'use_cases\': [\'시장 분석\', \'리스크 평가\', \'투자 분석\']}, \'document_team\': {\'name\': \'document_team\', \'capabilities\': \'계약서 작성, 문서 생성, 문서 검토\', \'tools\': [\'document_generator\', \'contract_reviewer\'], \'use_cases\': [\'계약서 작성\', \'문서 검토\']}}\n\n## Agent 역할 및 상세 가이드\n\n### 1. search_team (검색 팀)\n- **주요 기능**: 정보 검색 및 데이터 수집\n- **전문 분야**:\n  * 법률 정보 검색 (전세법, 임대차보호법, 부동산 관련 법규)\n  * 부동산 시세 조회 (매매가, 전세가, 월세, 실거래가)\n  * 대출 상품 정보 검색 (금리, 한도, 조건)\n  * 지역 정보 및 인프라 조회\n- **도구**: legal_search, market_data, loan_data\n- **적합한 작업**: 정보 조회, 데이터 수집, 법률 확인, 시세 파악\n- **예시**:\n  * "전세금 5% 인상 가능한가요?"\n  * "강남구 아파트 전세 시세"\n  * "전세자금대출 한도 얼마?"\n\n### 2. analysis_team (분석 팀)\n- **주요 기능**: 데이터 분석 및 평가\n- **전문 분야**:\n  * 시장 동향 분석 (상승률, 하락률, 추세)\n  * 리스크 평가 (계약, 투자 위험도)\n  * 투자 수익률 계산 (ROI, 월세 수익률)\n  * 대출 한도 및 조건 분석 (LTV, DTI, DSR)\n  * 비교 분석 (지역별, 상품별)\n- **도구**: data_analyzer, risk_evaluator, calculator\n- **적합한 작업**: 데이터 분석, 리스크 평가, 계산, 비교, 예측\n- **의존성**: 보통 search_team의 데이터가 필요\n- **예시**:\n  * "이 지역 투자 가치 분석해줘"\n  * "계약 리스크 평가해줘"\n  * "대출 가능 금액 계산해줘"\n\n### 3. document_team (문서 팀)\n- **주요 기능**: 문서 생성 및 관리\n- **전문 분야**:\n  * 계약서 작성 (임대차, 매매, 전세)\n  * 문서 템플릿 관리\n  * 특약사항 생성\n  * 계약서 수정안 작성\n  * 법률 문서 검토\n- **도구**: document_generator, contract_template, contract_reviewer\n- **적합한 작업**: 문서 작성, 계약서 생성, 문서 수정, 검토\n- **예시**:\n  * "임대차계약서 작성해줘"\n  * "특약사항 추가해줘"\n  * "계약서 수정안 만들어줘"\n\n## Agent 선택 전략\n\n### 1단계: 작업 유형 식별\n```\n정보 필요 → search_team\n분석/계산 필요 → analysis_team\n문서 작성 필요 → document_team\n```\n\n### 2단계: 의존성 분석\n```\n독립적 작업 → 단일 팀\n순차적 의존 → 여러 팀 (순서 중요)\n병렬 가능 → 여러 팀 (순서 무관)\n```\n\n### 3단계: 최적화\n```\n중복 제거 → 가장 적합한 팀만 선택\n효율성 → 병렬 처리 가능한 경우 표시\n```\n\n## 의도별 Agent 매핑 가이드\n\n| 의도 (Intent) | 추천 Agent 조합 | 이유 |\n|--------------|-----------------|------|\n| LEGAL_CONSULT | ["search_team"] | 법률 정보 검색 전문 |\n| MARKET_INQUIRY | ["search_team"] | 시세 데이터 조회 |\n| LOAN_CONSULT | ["search_team", "analysis_team"] | 대출 정보 조회 후 분석 |\n| CONTRACT_CREATION | ["document_team"] | 문서 생성 전문 |\n| CONTRACT_REVIEW | ["search_team", "analysis_team"] | 법률 검토 및 리스크 분석 |\n| COMPREHENSIVE | ["search_team", "analysis_team"] | 종합 정보 수집 및 분석 |\n| RISK_ANALYSIS | ["analysis_team"] | 리스크 평가 전문 |\n| UNCLEAR | ["search_team", "analysis_team"] | 포괄적 대응 |\n\n## 복합 질문 처리 예시\n\n### 예시 1: 순차적 처리\n질문: "강남구 시세 확인하고 투자 가치 분석해줘"\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "먼저 search_team이 시세 데이터를 수집하고, 그 결과를 analysis_team이 분석하여 투자 가치 평가"\n}\n```\n\n### 예시 2: 병렬 처리 가능\n질문: "법률 정보와 시세 정보 모두 알려줘"\n```json\n{\n    "selected_agents": ["search_team"],\n    "reasoning": "search_team이 법률과 시세 정보를 병렬로 조회 가능. 두 작업이 독립적이므로 동시 처리"\n}\n```\n\n### 예시 3: 3단계 파이프라인\n질문: "시세 조회하고 분석한 후 계약서 작성해줘"\n```json\n{\n    "selected_agents": ["search_team", "analysis_team", "document_team"],\n    "reasoning": "search_team이 데이터 수집 → analysis_team이 분석 → document_team이 분석 결과 기반 계약서 작성"\n}\n```\n\n## 응답 형식 (JSON)\n\n{\n    "selected_agents": ["선택된 agent/team 목록"],\n    "reasoning": "선택 이유를 구체적으로 설명. 각 Agent의 역할과 처리 순서 포함",\n    "coordination": "single/sequential/parallel/pipeline",\n    "dependencies": {"agent2": ["agent1"]},\n    "estimated_time": 30,\n    "confidence": 0.9\n}\n\n## 선택 가이드라인\n\n1. **최소 Agent 원칙**: 가능한 적은 수의 Agent로 처리\n2. **전문성 우선**: 해당 작업에 가장 전문적인 Agent 선택\n3. **효율성 고려**: 병렬 처리 가능한 경우 명시\n4. **의존성 관리**: 데이터 흐름을 고려한 순서 지정\n5. **폴백 전략**: 불확실한 경우 ["search_team", "analysis_team"] 조합\n\n## 주의사항\n\n- selected_agents는 반드시 배열 형태\n- Agent 이름은 정확히: "search_team", "analysis_team", "document_team"\n- 최소 1개, 최대 3개 선택\n- 순서는 실행 우선순위 (앞에 있을수록 먼저 실행)\n- reasoning은 상세하고 논리적으로 작성\n- coordination 필드로 실행 방식 명시\n- 복합 질문의 경우 의존성 관계 명확히 표시'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 14:40:52,401 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 14:40:52,401 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 14:40:52,401 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 14:40:52,401 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 14:40:52,401 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 14:40:52,401 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 14:40:54,710 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 05:40:54 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'2054'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'2072'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9929'), (b'x-ratelimit-remaining-tokens', b'198432'), (b'x-ratelimit-reset-requests', b'10m8.219s'), (b'x-ratelimit-reset-tokens', b'470ms'), (b'x-request-id', b'req_90e80252551944e28915305050401c0b'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989a96335c5ae9fb-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 14:40:54,712 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 14:40:54,712 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 14:40:54,713 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 14:40:54,713 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 14:40:54,713 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 14:40:54,714 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 05:40:54 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '2054', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '2072', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9929', 'x-ratelimit-remaining-tokens': '198432', 'x-ratelimit-reset-requests': '10m8.219s', 'x-ratelimit-reset-tokens': '470ms', 'x-request-id': 'req_90e80252551944e28915305050401c0b', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989a96335c5ae9fb-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 14:40:54,714 - openai._base_client - DEBUG - request_id: req_90e80252551944e28915305050401c0b
2025-10-05 14:40:54,714 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: agent_selection | Model: gpt-4o-mini-2024-07-18 | Tokens: 1815 (prompt: 1705, completion: 110)
2025-10-05 14:40:54,714 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM agent selection reasoning: 사용자가 요청한 '용산구 아파트 실거래가 조회'는 부동산 시세 조회에 해당하며, search_team이 이 작업에 가장 적합한 전문성을 가지고 있습니다. 이 팀은 실거래가 정보를 직접 조회할 수 있는 도구를 보유하고 있습니다.
2025-10-05 14:40:54,714 - app.service_agent.cognitive_agents.planning_agent - INFO - ✅ Primary LLM selected agents: ['search_team']
2025-10-05 14:40:54,714 - __main__ - INFO -   의도: 시세조회
2025-10-05 14:40:54,715 - __main__ - INFO -   신뢰도: 0.95
2025-10-05 14:40:54,715 - __main__ - INFO -   추천 Agent: ['search_team']
2025-10-05 14:40:54,715 - __main__ - INFO - 
[Step 2] Query Decomposition...
2025-10-05 14:40:54,715 - app.service_agent.cognitive_agents.query_decomposer - INFO - Decomposing query: 용산구 아파트 실거래가 조회...
2025-10-05 14:40:54,715 - app.service_agent.cognitive_agents.query_decomposer - INFO - Query is simple, no decomposition needed
2025-10-05 14:40:54,715 - __main__ - INFO -   복합 질문: False
2025-10-05 14:40:54,715 - __main__ - INFO -   작업 수: 1
2025-10-05 14:40:54,715 - __main__ - INFO -   실행 모드: sequential
2025-10-05 14:40:54,715 - __main__ - INFO - 
[Step 3] Execution Plan 생성...
2025-10-05 14:40:54,715 - app.service_agent.cognitive_agents.planning_agent - INFO - Creating execution plan for intent: 시세조회
2025-10-05 14:40:54,715 - app.service_agent.cognitive_agents.planning_agent - WARNING - AgentRegistry is empty, using default teams
2025-10-05 14:40:54,715 - app.service_agent.cognitive_agents.planning_agent - DEBUG - Suggested agents: ['search_team']
2025-10-05 14:40:54,715 - app.service_agent.cognitive_agents.planning_agent - DEBUG - Available agents: ['search_team', 'analysis_team', 'document_team']
2025-10-05 14:40:54,715 - app.service_agent.cognitive_agents.planning_agent - INFO - Selected agents/teams for execution: ['search_team']
2025-10-05 14:40:54,715 - __main__ - INFO -   전략: sequential
2025-10-05 14:40:54,715 - __main__ - INFO -   단계 수: 1
2025-10-05 14:40:54,715 - __main__ - INFO - 
✓ 테스트 성공 (소요시간: 5.69초)
2025-10-05 14:40:54,716 - __main__ - INFO - 
결과 저장: C:\kdy\Projects\holmesnyangz\beta_v001\backend\app\service_agent\reports\phase1_test_results.json
2025-10-05 14:40:54,716 - __main__ - INFO - 
================================================================================
2025-10-05 14:40:54,716 - __main__ - INFO - [16] 단일 질문 테스트: S016
2025-10-05 14:40:54,716 - __main__ - INFO - 질문: 신혼부부 특례 대출 조건은?
2025-10-05 14:40:54,716 - __main__ - INFO - ================================================================================
2025-10-05 14:40:54,716 - __main__ - INFO - 
[Step 1] Intent 분석...
2025-10-05 14:40:54,716 - app.service_agent.cognitive_agents.planning_agent - INFO - Analyzing intent for query: 신혼부부 특례 대출 조건은?...
2025-10-05 14:40:54,717 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-31edadfa-5e46-44c5-beb9-b7dbbb6b45be', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 의도 분석 전문가입니다.\n사용자의 질문을 정확히 이해하고, 어떤 종류의 도움이 필요한지 분류해야 합니다.\n\n## 중요: 복합 질문 처리\n복합적인 질문(여러 의도가 섞인 질문)의 경우, 가장 핵심적인 의도를 파악하되,\nsub_intents 필드에 부가적인 의도들도 함께 기록해주세요.\n\n## 분류 카테고리 설명:\n\n1. **LEGAL_CONSULT (법률상담)**\n   - 설명: 부동산 관련 법률, 권리, 의무에 대한 질문\n   - 예시:\n     * 단순: "전세금 5% 인상이 가능한가요?", "임대차계약 갱신 거부할 수 있나요?"\n     * 복합: "전세금 인상 가능한지 확인하고 법적 근거도 알려주세요"\n   - 키워드: 법, 전세, 임대, 보증금, 계약, 권리, 의무, 갱신, 임차인, 임대인, 법률, 규정, 조항\n   - 필요한 처리: 법률 데이터베이스 검색, 관련 법조항 찾기\n\n2. **MARKET_INQUIRY (시세조회)**\n   - 설명: 부동산 시장 가격, 시세, 거래 동향에 대한 질문\n   - 예시:\n     * 단순: "강남구 아파트 전세 시세 알려주세요", "서초동 매매가 얼마나 올랐나요?"\n     * 복합: "강남구 시세 확인하고 대출 가능 금액도 계산해줘"\n   - 키워드: 시세, 가격, 매매가, 전세가, 월세, 시장, 동향, 평균, 지역명, 상승률, 하락률\n   - 필요한 처리: 부동산 시세 데이터 조회, 지역별 가격 분석\n\n3. **LOAN_CONSULT (대출상담)**\n   - 설명: 주택담보대출, 전세자금대출 등 금융 관련 질문\n   - 예시:\n     * 단순: "전세자금대출 한도가 얼마인가요?", "LTV가 뭔가요?"\n     * 복합: "대출 한도 확인하고 금리 비교도 해주세요"\n   - 키워드: 대출, 금리, 한도, 조건, 상환, LTV, DTI, DSR, 담보, 금융, 은행\n   - 필요한 처리: 대출 상품 조회, 금리 정보 검색, 한도 계산\n\n4. **CONTRACT_CREATION (계약서작성)**\n   - 설명: 새로운 계약서나 문서를 작성해달라는 요청\n   - 예시:\n     * 단순: "임대차계약서 작성해주세요", "전세계약서 초안 만들어주세요"\n     * 복합: "계약서 작성하고 주의사항도 검토해주세요"\n   - 키워드: 작성, 만들, 생성, 초안, 계약서, 문서, 양식\n   - 필요한 처리: 문서 생성 에이전트 호출, 템플릿 기반 작성\n\n5. **CONTRACT_REVIEW (계약서검토)**\n   - 설명: 기존 계약서나 문서를 검토해달라는 요청\n   - 예시:\n     * 단순: "이 계약서 검토해주세요", "특약사항 문제없나요?"\n     * 복합: "계약서 검토하고 수정사항도 제안해주세요"\n   - 키워드: 검토, 확인, 점검, 리뷰, 분석해, 살펴봐, 체크\n   - 필요한 처리: 문서 분석, 위험 요소 식별, 개선사항 제안\n\n6. **COMPREHENSIVE (종합분석)**\n   - 설명: 여러 측면을 종합적으로 분석해달라는 요청\n   - 예시:\n     * 단순: "이 물건 전체적으로 분석해주세요"\n     * 복합: "시세, 법률, 대출 모두 검토해서 종합 의견 주세요"\n   - 키워드: 종합, 전체, 모든, 전반적, 종합적, 평가, 분석\n   - 필요한 처리: 다중 데이터 소스 통합 분석\n\n7. **RISK_ANALYSIS (리스크분석)**\n   - 설명: 위험 요소나 주의사항에 대한 질문\n   - 예시:\n     * 단순: "이 계약 위험한가요?", "주의할 점 알려주세요"\n     * 복합: "리스크 분석하고 대안도 제시해주세요"\n   - 키워드: 위험, 리스크, 주의, 문제점, 조심, 걱정, 우려\n   - 필요한 처리: 위험 요소 분석, 주의사항 추출\n\n8. **UNCLEAR (불분명)**\n   - 설명: 의도를 명확히 파악하기 어려운 질문\n   - 예시: "이거 좀 봐주세요", "어떻게 해야 할까요?", "도와주세요"\n   - 처리: 추가 질문으로 의도 명확화 필요\n\n9. **IRRELEVANT (무관)**\n   - 설명: 부동산과 전혀 관련 없는 질문\n   - 예시: "날씨 어때?", "저녁 뭐 먹지?", "주식 추천해줘"\n   - 처리: 부동산 관련 질문을 유도\n\n## 복합 질문 예시와 분석:\n\n### 예시 1: "강남구 아파트 시세 알려주고 전세자금대출 가능한지도 확인해줘"\n- 주 의도: MARKET_INQUIRY (시세 조회가 먼저 필요)\n- 부가 의도: LOAN_CONSULT (대출 확인)\n- 분해: ["강남구 아파트 시세 조회", "전세자금대출 가능 여부 확인"]\n\n### 예시 2: "이 계약서 검토해서 위험한 부분 있는지 알려주고 수정 제안도 해줘"\n- 주 의도: CONTRACT_REVIEW (계약서 검토)\n- 부가 의도: RISK_ANALYSIS (위험 분석)\n- 분해: ["계약서 전체 검토", "위험 요소 식별", "수정사항 제안"]\n\n### 예시 3: "서초동 전세가 확인하고 법적으로 문제없는지도 봐줘"\n- 주 의도: MARKET_INQUIRY (시세 확인)\n- 부가 의도: LEGAL_CONSULT (법적 검토)\n- 분해: ["서초동 전세가 조회", "법적 이슈 검토"]\n\n## 응답 형식 (JSON 형식으로 응답):\n\n{\n    "intent": "LEGAL_CONSULT",\n    "confidence": 0.9,\n    "keywords": ["전세금", "인상", "제한"],\n    "sub_intents": [],\n    "is_compound": false,\n    "decomposed_tasks": [],\n    "entities": {\n        "location": "강남구",\n        "price": "5억",\n        "contract_type": "전세",\n        "date": "2024년",\n        "area": "84㎡",\n        "action_verbs": ["확인", "검토"]\n    },\n    "reasoning": "전세금 인상에 대한 법률 질문이므로 LEGAL_CONSULT로 분류"\n}\n\n응답 규칙:\n- intent: 위 9개 카테고리 중 하나 (대문자_언더스코어 형식)\n- confidence: 0.0~1.0 (0.8 이상이면 매우 확실, 0.5 미만이면 불확실)\n- keywords: 추출된 주요 키워드 목록\n- sub_intents: 복합 질문일 경우 부가적인 의도들\n- is_compound: 복합 질문 여부 (true/false)\n- decomposed_tasks: 복합 질문을 분해한 개별 작업들\n- entities: 추출된 엔티티 정보\n- reasoning: 분류한 이유와 근거 (상세하게)\n\n## 판단 가이드:\n- 여러 의도가 섞여있다면, 가장 주된 의도를 intent에, 나머지를 sub_intents에 기록\n- "그리고", "또한", "함께", "같이" 등의 연결어가 있으면 복합 질문일 가능성 높음\n- 법률 관련 키워드가 있으면 LEGAL_CONSULT 우선\n- 가격/시세 언급이 명확하면 MARKET_INQUIRY\n- 계약서라는 단어와 함께 "작성/만들기"가 있으면 CONTRACT_CREATION\n- 계약서라는 단어와 함께 "검토/확인"이 있으면 CONTRACT_REVIEW\n- 불확실하면 confidence를 낮게 설정하고 UNCLEAR 선택\n- 복합 질문은 is_compound를 true로 설정하고 개별 작업으로 분해\n\n분석할 질문: 신혼부부 특례 대출 조건은?'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 14:40:54,717 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 14:40:54,717 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 14:40:54,718 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 14:40:54,718 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 14:40:54,718 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 14:40:54,718 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 14:40:57,163 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 05:40:57 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'2087'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'2134'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9928'), (b'x-ratelimit-remaining-tokens', b'198318'), (b'x-ratelimit-reset-requests', b'10m14.533s'), (b'x-ratelimit-reset-tokens', b'504ms'), (b'x-request-id', b'req_553c7ada122b41a7a9e96eb95fd0b7fc'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989a9641dd50e9fb-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 14:40:57,163 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 14:40:57,164 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 14:40:57,164 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 14:40:57,164 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 14:40:57,164 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 14:40:57,164 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 05:40:57 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '2087', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '2134', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9928', 'x-ratelimit-remaining-tokens': '198318', 'x-ratelimit-reset-requests': '10m14.533s', 'x-ratelimit-reset-tokens': '504ms', 'x-request-id': 'req_553c7ada122b41a7a9e96eb95fd0b7fc', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989a9641dd50e9fb-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 14:40:57,164 - openai._base_client - DEBUG - request_id: req_553c7ada122b41a7a9e96eb95fd0b7fc
2025-10-05 14:40:57,164 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: intent_analysis | Model: gpt-4o-mini-2024-07-18 | Tokens: 2052 (prompt: 1921, completion: 131)
2025-10-05 14:40:57,164 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM Intent Analysis Result: {'intent': 'LOAN_CONSULT', 'confidence': 0.8, 'keywords': ['신혼부부', '특례', '대출', '조건'], 'sub_intents': [], 'is_compound': False, 'decomposed_tasks': [], 'entities': {'loan_type': '신혼부부 특례 대출', 'action_verbs': ['조건', '확인']}, 'reasoning': '신혼부부 특례 대출의 조건에 대한 질문이므로 LOAN_CONSULT로 분류'}
2025-10-05 14:40:57,165 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-3c12c281-edab-4c3f-a9b6-9657ac681ae2', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 Agent 선택 전문가입니다.\n사용자의 요청에 가장 적합한 Agent/Team을 선택하는 것이 목표입니다.\n\n## 현재 상황\n\n**사용자 질문:** 신혼부부 특례 대출 조건은?\n**분석된 의도:** 대출상담\n**추출된 키워드:** [\'신혼부부\', \'특례\', \'대출\', \'조건\']\n\n## 사용 가능한 Agent/Team 정보\n\n{\'search_team\': {\'name\': \'search_team\', \'capabilities\': \'법률 검색, 부동산 시세 조회, 대출 상품 검색\', \'tools\': [\'legal_search\', \'market_data\', \'loan_data\'], \'use_cases\': [\'법률 상담\', \'시세 조회\', \'대출 정보\']}, \'analysis_team\': {\'name\': \'analysis_team\', \'capabilities\': \'데이터 분석, 리스크 평가, 인사이트 생성, 추천\', \'tools\': [\'data_analyzer\', \'risk_evaluator\'], \'use_cases\': [\'시장 분석\', \'리스크 평가\', \'투자 분석\']}, \'document_team\': {\'name\': \'document_team\', \'capabilities\': \'계약서 작성, 문서 생성, 문서 검토\', \'tools\': [\'document_generator\', \'contract_reviewer\'], \'use_cases\': [\'계약서 작성\', \'문서 검토\']}}\n\n## Agent 역할 및 상세 가이드\n\n### 1. search_team (검색 팀)\n- **주요 기능**: 정보 검색 및 데이터 수집\n- **전문 분야**:\n  * 법률 정보 검색 (전세법, 임대차보호법, 부동산 관련 법규)\n  * 부동산 시세 조회 (매매가, 전세가, 월세, 실거래가)\n  * 대출 상품 정보 검색 (금리, 한도, 조건)\n  * 지역 정보 및 인프라 조회\n- **도구**: legal_search, market_data, loan_data\n- **적합한 작업**: 정보 조회, 데이터 수집, 법률 확인, 시세 파악\n- **예시**:\n  * "전세금 5% 인상 가능한가요?"\n  * "강남구 아파트 전세 시세"\n  * "전세자금대출 한도 얼마?"\n\n### 2. analysis_team (분석 팀)\n- **주요 기능**: 데이터 분석 및 평가\n- **전문 분야**:\n  * 시장 동향 분석 (상승률, 하락률, 추세)\n  * 리스크 평가 (계약, 투자 위험도)\n  * 투자 수익률 계산 (ROI, 월세 수익률)\n  * 대출 한도 및 조건 분석 (LTV, DTI, DSR)\n  * 비교 분석 (지역별, 상품별)\n- **도구**: data_analyzer, risk_evaluator, calculator\n- **적합한 작업**: 데이터 분석, 리스크 평가, 계산, 비교, 예측\n- **의존성**: 보통 search_team의 데이터가 필요\n- **예시**:\n  * "이 지역 투자 가치 분석해줘"\n  * "계약 리스크 평가해줘"\n  * "대출 가능 금액 계산해줘"\n\n### 3. document_team (문서 팀)\n- **주요 기능**: 문서 생성 및 관리\n- **전문 분야**:\n  * 계약서 작성 (임대차, 매매, 전세)\n  * 문서 템플릿 관리\n  * 특약사항 생성\n  * 계약서 수정안 작성\n  * 법률 문서 검토\n- **도구**: document_generator, contract_template, contract_reviewer\n- **적합한 작업**: 문서 작성, 계약서 생성, 문서 수정, 검토\n- **예시**:\n  * "임대차계약서 작성해줘"\n  * "특약사항 추가해줘"\n  * "계약서 수정안 만들어줘"\n\n## Agent 선택 전략\n\n### 1단계: 작업 유형 식별\n```\n정보 필요 → search_team\n분석/계산 필요 → analysis_team\n문서 작성 필요 → document_team\n```\n\n### 2단계: 의존성 분석\n```\n독립적 작업 → 단일 팀\n순차적 의존 → 여러 팀 (순서 중요)\n병렬 가능 → 여러 팀 (순서 무관)\n```\n\n### 3단계: 최적화\n```\n중복 제거 → 가장 적합한 팀만 선택\n효율성 → 병렬 처리 가능한 경우 표시\n```\n\n## 의도별 Agent 매핑 가이드\n\n| 의도 (Intent) | 추천 Agent 조합 | 이유 |\n|--------------|-----------------|------|\n| LEGAL_CONSULT | ["search_team"] | 법률 정보 검색 전문 |\n| MARKET_INQUIRY | ["search_team"] | 시세 데이터 조회 |\n| LOAN_CONSULT | ["search_team", "analysis_team"] | 대출 정보 조회 후 분석 |\n| CONTRACT_CREATION | ["document_team"] | 문서 생성 전문 |\n| CONTRACT_REVIEW | ["search_team", "analysis_team"] | 법률 검토 및 리스크 분석 |\n| COMPREHENSIVE | ["search_team", "analysis_team"] | 종합 정보 수집 및 분석 |\n| RISK_ANALYSIS | ["analysis_team"] | 리스크 평가 전문 |\n| UNCLEAR | ["search_team", "analysis_team"] | 포괄적 대응 |\n\n## 복합 질문 처리 예시\n\n### 예시 1: 순차적 처리\n질문: "강남구 시세 확인하고 투자 가치 분석해줘"\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "먼저 search_team이 시세 데이터를 수집하고, 그 결과를 analysis_team이 분석하여 투자 가치 평가"\n}\n```\n\n### 예시 2: 병렬 처리 가능\n질문: "법률 정보와 시세 정보 모두 알려줘"\n```json\n{\n    "selected_agents": ["search_team"],\n    "reasoning": "search_team이 법률과 시세 정보를 병렬로 조회 가능. 두 작업이 독립적이므로 동시 처리"\n}\n```\n\n### 예시 3: 3단계 파이프라인\n질문: "시세 조회하고 분석한 후 계약서 작성해줘"\n```json\n{\n    "selected_agents": ["search_team", "analysis_team", "document_team"],\n    "reasoning": "search_team이 데이터 수집 → analysis_team이 분석 → document_team이 분석 결과 기반 계약서 작성"\n}\n```\n\n## 응답 형식 (JSON)\n\n{\n    "selected_agents": ["선택된 agent/team 목록"],\n    "reasoning": "선택 이유를 구체적으로 설명. 각 Agent의 역할과 처리 순서 포함",\n    "coordination": "single/sequential/parallel/pipeline",\n    "dependencies": {"agent2": ["agent1"]},\n    "estimated_time": 30,\n    "confidence": 0.9\n}\n\n## 선택 가이드라인\n\n1. **최소 Agent 원칙**: 가능한 적은 수의 Agent로 처리\n2. **전문성 우선**: 해당 작업에 가장 전문적인 Agent 선택\n3. **효율성 고려**: 병렬 처리 가능한 경우 명시\n4. **의존성 관리**: 데이터 흐름을 고려한 순서 지정\n5. **폴백 전략**: 불확실한 경우 ["search_team", "analysis_team"] 조합\n\n## 주의사항\n\n- selected_agents는 반드시 배열 형태\n- Agent 이름은 정확히: "search_team", "analysis_team", "document_team"\n- 최소 1개, 최대 3개 선택\n- 순서는 실행 우선순위 (앞에 있을수록 먼저 실행)\n- reasoning은 상세하고 논리적으로 작성\n- coordination 필드로 실행 방식 명시\n- 복합 질문의 경우 의존성 관계 명확히 표시'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 14:40:57,165 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 14:40:57,165 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 14:40:57,165 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 14:40:57,165 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 14:40:57,166 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 14:40:57,166 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 14:40:59,442 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 05:40:59 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'2047'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'2079'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9928'), (b'x-ratelimit-remaining-tokens', b'198434'), (b'x-ratelimit-reset-requests', b'10m20.721s'), (b'x-ratelimit-reset-tokens', b'469ms'), (b'x-request-id', b'req_5208fc8685fd4a6a966178fe1dac01c4'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989a96512b79e9fb-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 14:40:59,442 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 14:40:59,442 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 14:40:59,446 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 14:40:59,446 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 14:40:59,446 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 14:40:59,447 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 05:40:59 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '2047', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '2079', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9928', 'x-ratelimit-remaining-tokens': '198434', 'x-ratelimit-reset-requests': '10m20.721s', 'x-ratelimit-reset-tokens': '469ms', 'x-request-id': 'req_5208fc8685fd4a6a966178fe1dac01c4', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989a96512b79e9fb-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 14:40:59,447 - openai._base_client - DEBUG - request_id: req_5208fc8685fd4a6a966178fe1dac01c4
2025-10-05 14:40:59,447 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: agent_selection | Model: gpt-4o-mini-2024-07-18 | Tokens: 1824 (prompt: 1705, completion: 119)
2025-10-05 14:40:59,447 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM agent selection reasoning: 사용자가 신혼부부 특례 대출 조건에 대한 정보를 요청했으므로, 먼저 search_team이 대출 상품에 대한 조건을 검색하고, 그 결과를 바탕으로 analysis_team이 대출 조건을 분석하여 추가적인 인사이트를 제공할 수 있도록 합니다.
2025-10-05 14:40:59,447 - app.service_agent.cognitive_agents.planning_agent - INFO - ✅ Primary LLM selected agents: ['search_team', 'analysis_team']
2025-10-05 14:40:59,447 - __main__ - INFO -   의도: 대출상담
2025-10-05 14:40:59,447 - __main__ - INFO -   신뢰도: 0.80
2025-10-05 14:40:59,447 - __main__ - INFO -   추천 Agent: ['search_team', 'analysis_team']
2025-10-05 14:40:59,447 - __main__ - INFO - 
[Step 2] Query Decomposition...
2025-10-05 14:40:59,447 - app.service_agent.cognitive_agents.query_decomposer - INFO - Decomposing query: 신혼부부 특례 대출 조건은?...
2025-10-05 14:40:59,447 - app.service_agent.cognitive_agents.query_decomposer - INFO - Query is simple, no decomposition needed
2025-10-05 14:40:59,447 - __main__ - INFO -   복합 질문: False
2025-10-05 14:40:59,447 - __main__ - INFO -   작업 수: 1
2025-10-05 14:40:59,447 - __main__ - INFO -   실행 모드: sequential
2025-10-05 14:40:59,447 - __main__ - INFO - 
[Step 3] Execution Plan 생성...
2025-10-05 14:40:59,447 - app.service_agent.cognitive_agents.planning_agent - INFO - Creating execution plan for intent: 대출상담
2025-10-05 14:40:59,447 - app.service_agent.cognitive_agents.planning_agent - WARNING - AgentRegistry is empty, using default teams
2025-10-05 14:40:59,447 - app.service_agent.cognitive_agents.planning_agent - DEBUG - Suggested agents: ['search_team', 'analysis_team']
2025-10-05 14:40:59,447 - app.service_agent.cognitive_agents.planning_agent - DEBUG - Available agents: ['search_team', 'analysis_team', 'document_team']
2025-10-05 14:40:59,447 - app.service_agent.cognitive_agents.planning_agent - INFO - Selected agents/teams for execution: ['search_team', 'analysis_team']
2025-10-05 14:40:59,447 - __main__ - INFO -   전략: sequential
2025-10-05 14:40:59,447 - __main__ - INFO -   단계 수: 2
2025-10-05 14:40:59,447 - __main__ - INFO - 
✓ 테스트 성공 (소요시간: 4.73초)
2025-10-05 14:40:59,447 - __main__ - INFO - 
================================================================================
2025-10-05 14:40:59,447 - __main__ - INFO - [17] 단일 질문 테스트: S017
2025-10-05 14:40:59,448 - __main__ - INFO - 질문: 계약금 환불 가능한가요?
2025-10-05 14:40:59,448 - __main__ - INFO - ================================================================================
2025-10-05 14:40:59,448 - __main__ - INFO - 
[Step 1] Intent 분석...
2025-10-05 14:40:59,448 - app.service_agent.cognitive_agents.planning_agent - INFO - Analyzing intent for query: 계약금 환불 가능한가요?...
2025-10-05 14:40:59,448 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-a63d5737-a3fd-4e2b-b954-fe2e7f0483fb', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 의도 분석 전문가입니다.\n사용자의 질문을 정확히 이해하고, 어떤 종류의 도움이 필요한지 분류해야 합니다.\n\n## 중요: 복합 질문 처리\n복합적인 질문(여러 의도가 섞인 질문)의 경우, 가장 핵심적인 의도를 파악하되,\nsub_intents 필드에 부가적인 의도들도 함께 기록해주세요.\n\n## 분류 카테고리 설명:\n\n1. **LEGAL_CONSULT (법률상담)**\n   - 설명: 부동산 관련 법률, 권리, 의무에 대한 질문\n   - 예시:\n     * 단순: "전세금 5% 인상이 가능한가요?", "임대차계약 갱신 거부할 수 있나요?"\n     * 복합: "전세금 인상 가능한지 확인하고 법적 근거도 알려주세요"\n   - 키워드: 법, 전세, 임대, 보증금, 계약, 권리, 의무, 갱신, 임차인, 임대인, 법률, 규정, 조항\n   - 필요한 처리: 법률 데이터베이스 검색, 관련 법조항 찾기\n\n2. **MARKET_INQUIRY (시세조회)**\n   - 설명: 부동산 시장 가격, 시세, 거래 동향에 대한 질문\n   - 예시:\n     * 단순: "강남구 아파트 전세 시세 알려주세요", "서초동 매매가 얼마나 올랐나요?"\n     * 복합: "강남구 시세 확인하고 대출 가능 금액도 계산해줘"\n   - 키워드: 시세, 가격, 매매가, 전세가, 월세, 시장, 동향, 평균, 지역명, 상승률, 하락률\n   - 필요한 처리: 부동산 시세 데이터 조회, 지역별 가격 분석\n\n3. **LOAN_CONSULT (대출상담)**\n   - 설명: 주택담보대출, 전세자금대출 등 금융 관련 질문\n   - 예시:\n     * 단순: "전세자금대출 한도가 얼마인가요?", "LTV가 뭔가요?"\n     * 복합: "대출 한도 확인하고 금리 비교도 해주세요"\n   - 키워드: 대출, 금리, 한도, 조건, 상환, LTV, DTI, DSR, 담보, 금융, 은행\n   - 필요한 처리: 대출 상품 조회, 금리 정보 검색, 한도 계산\n\n4. **CONTRACT_CREATION (계약서작성)**\n   - 설명: 새로운 계약서나 문서를 작성해달라는 요청\n   - 예시:\n     * 단순: "임대차계약서 작성해주세요", "전세계약서 초안 만들어주세요"\n     * 복합: "계약서 작성하고 주의사항도 검토해주세요"\n   - 키워드: 작성, 만들, 생성, 초안, 계약서, 문서, 양식\n   - 필요한 처리: 문서 생성 에이전트 호출, 템플릿 기반 작성\n\n5. **CONTRACT_REVIEW (계약서검토)**\n   - 설명: 기존 계약서나 문서를 검토해달라는 요청\n   - 예시:\n     * 단순: "이 계약서 검토해주세요", "특약사항 문제없나요?"\n     * 복합: "계약서 검토하고 수정사항도 제안해주세요"\n   - 키워드: 검토, 확인, 점검, 리뷰, 분석해, 살펴봐, 체크\n   - 필요한 처리: 문서 분석, 위험 요소 식별, 개선사항 제안\n\n6. **COMPREHENSIVE (종합분석)**\n   - 설명: 여러 측면을 종합적으로 분석해달라는 요청\n   - 예시:\n     * 단순: "이 물건 전체적으로 분석해주세요"\n     * 복합: "시세, 법률, 대출 모두 검토해서 종합 의견 주세요"\n   - 키워드: 종합, 전체, 모든, 전반적, 종합적, 평가, 분석\n   - 필요한 처리: 다중 데이터 소스 통합 분석\n\n7. **RISK_ANALYSIS (리스크분석)**\n   - 설명: 위험 요소나 주의사항에 대한 질문\n   - 예시:\n     * 단순: "이 계약 위험한가요?", "주의할 점 알려주세요"\n     * 복합: "리스크 분석하고 대안도 제시해주세요"\n   - 키워드: 위험, 리스크, 주의, 문제점, 조심, 걱정, 우려\n   - 필요한 처리: 위험 요소 분석, 주의사항 추출\n\n8. **UNCLEAR (불분명)**\n   - 설명: 의도를 명확히 파악하기 어려운 질문\n   - 예시: "이거 좀 봐주세요", "어떻게 해야 할까요?", "도와주세요"\n   - 처리: 추가 질문으로 의도 명확화 필요\n\n9. **IRRELEVANT (무관)**\n   - 설명: 부동산과 전혀 관련 없는 질문\n   - 예시: "날씨 어때?", "저녁 뭐 먹지?", "주식 추천해줘"\n   - 처리: 부동산 관련 질문을 유도\n\n## 복합 질문 예시와 분석:\n\n### 예시 1: "강남구 아파트 시세 알려주고 전세자금대출 가능한지도 확인해줘"\n- 주 의도: MARKET_INQUIRY (시세 조회가 먼저 필요)\n- 부가 의도: LOAN_CONSULT (대출 확인)\n- 분해: ["강남구 아파트 시세 조회", "전세자금대출 가능 여부 확인"]\n\n### 예시 2: "이 계약서 검토해서 위험한 부분 있는지 알려주고 수정 제안도 해줘"\n- 주 의도: CONTRACT_REVIEW (계약서 검토)\n- 부가 의도: RISK_ANALYSIS (위험 분석)\n- 분해: ["계약서 전체 검토", "위험 요소 식별", "수정사항 제안"]\n\n### 예시 3: "서초동 전세가 확인하고 법적으로 문제없는지도 봐줘"\n- 주 의도: MARKET_INQUIRY (시세 확인)\n- 부가 의도: LEGAL_CONSULT (법적 검토)\n- 분해: ["서초동 전세가 조회", "법적 이슈 검토"]\n\n## 응답 형식 (JSON 형식으로 응답):\n\n{\n    "intent": "LEGAL_CONSULT",\n    "confidence": 0.9,\n    "keywords": ["전세금", "인상", "제한"],\n    "sub_intents": [],\n    "is_compound": false,\n    "decomposed_tasks": [],\n    "entities": {\n        "location": "강남구",\n        "price": "5억",\n        "contract_type": "전세",\n        "date": "2024년",\n        "area": "84㎡",\n        "action_verbs": ["확인", "검토"]\n    },\n    "reasoning": "전세금 인상에 대한 법률 질문이므로 LEGAL_CONSULT로 분류"\n}\n\n응답 규칙:\n- intent: 위 9개 카테고리 중 하나 (대문자_언더스코어 형식)\n- confidence: 0.0~1.0 (0.8 이상이면 매우 확실, 0.5 미만이면 불확실)\n- keywords: 추출된 주요 키워드 목록\n- sub_intents: 복합 질문일 경우 부가적인 의도들\n- is_compound: 복합 질문 여부 (true/false)\n- decomposed_tasks: 복합 질문을 분해한 개별 작업들\n- entities: 추출된 엔티티 정보\n- reasoning: 분류한 이유와 근거 (상세하게)\n\n## 판단 가이드:\n- 여러 의도가 섞여있다면, 가장 주된 의도를 intent에, 나머지를 sub_intents에 기록\n- "그리고", "또한", "함께", "같이" 등의 연결어가 있으면 복합 질문일 가능성 높음\n- 법률 관련 키워드가 있으면 LEGAL_CONSULT 우선\n- 가격/시세 언급이 명확하면 MARKET_INQUIRY\n- 계약서라는 단어와 함께 "작성/만들기"가 있으면 CONTRACT_CREATION\n- 계약서라는 단어와 함께 "검토/확인"이 있으면 CONTRACT_REVIEW\n- 불확실하면 confidence를 낮게 설정하고 UNCLEAR 선택\n- 복합 질문은 is_compound를 true로 설정하고 개별 작업으로 분해\n\n분석할 질문: 계약금 환불 가능한가요?'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 14:40:59,448 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 14:40:59,449 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 14:40:59,449 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 14:40:59,449 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 14:40:59,449 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 14:40:59,449 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 14:41:01,879 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 05:41:01 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'2105'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'2134'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9928'), (b'x-ratelimit-remaining-tokens', b'198319'), (b'x-ratelimit-reset-requests', b'10m18.45s'), (b'x-ratelimit-reset-tokens', b'504ms'), (b'x-request-id', b'req_8a6f5c5d5dcb4ff692b227c8e9b87a13'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989a965f6a44e9fb-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 14:41:01,879 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 14:41:01,879 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 14:41:01,880 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 14:41:01,880 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 14:41:01,880 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 14:41:01,880 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 05:41:01 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '2105', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '2134', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9928', 'x-ratelimit-remaining-tokens': '198319', 'x-ratelimit-reset-requests': '10m18.45s', 'x-ratelimit-reset-tokens': '504ms', 'x-request-id': 'req_8a6f5c5d5dcb4ff692b227c8e9b87a13', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989a965f6a44e9fb-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 14:41:01,880 - openai._base_client - DEBUG - request_id: req_8a6f5c5d5dcb4ff692b227c8e9b87a13
2025-10-05 14:41:01,881 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: intent_analysis | Model: gpt-4o-mini-2024-07-18 | Tokens: 2027 (prompt: 1918, completion: 109)
2025-10-05 14:41:01,881 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM Intent Analysis Result: {'intent': 'LEGAL_CONSULT', 'confidence': 0.85, 'keywords': ['계약금', '환불', '가능'], 'sub_intents': [], 'is_compound': False, 'decomposed_tasks': [], 'entities': {'action_verbs': ['환불', '확인']}, 'reasoning': '계약금 환불에 대한 법률적 질문이므로 LEGAL_CONSULT로 분류'}
2025-10-05 14:41:01,881 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-0a5a0e91-5d7e-4673-8184-ecc5e6490b02', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 Agent 선택 전문가입니다.\n사용자의 요청에 가장 적합한 Agent/Team을 선택하는 것이 목표입니다.\n\n## 현재 상황\n\n**사용자 질문:** 계약금 환불 가능한가요?\n**분석된 의도:** 법률상담\n**추출된 키워드:** [\'계약금\', \'환불\', \'가능\']\n\n## 사용 가능한 Agent/Team 정보\n\n{\'search_team\': {\'name\': \'search_team\', \'capabilities\': \'법률 검색, 부동산 시세 조회, 대출 상품 검색\', \'tools\': [\'legal_search\', \'market_data\', \'loan_data\'], \'use_cases\': [\'법률 상담\', \'시세 조회\', \'대출 정보\']}, \'analysis_team\': {\'name\': \'analysis_team\', \'capabilities\': \'데이터 분석, 리스크 평가, 인사이트 생성, 추천\', \'tools\': [\'data_analyzer\', \'risk_evaluator\'], \'use_cases\': [\'시장 분석\', \'리스크 평가\', \'투자 분석\']}, \'document_team\': {\'name\': \'document_team\', \'capabilities\': \'계약서 작성, 문서 생성, 문서 검토\', \'tools\': [\'document_generator\', \'contract_reviewer\'], \'use_cases\': [\'계약서 작성\', \'문서 검토\']}}\n\n## Agent 역할 및 상세 가이드\n\n### 1. search_team (검색 팀)\n- **주요 기능**: 정보 검색 및 데이터 수집\n- **전문 분야**:\n  * 법률 정보 검색 (전세법, 임대차보호법, 부동산 관련 법규)\n  * 부동산 시세 조회 (매매가, 전세가, 월세, 실거래가)\n  * 대출 상품 정보 검색 (금리, 한도, 조건)\n  * 지역 정보 및 인프라 조회\n- **도구**: legal_search, market_data, loan_data\n- **적합한 작업**: 정보 조회, 데이터 수집, 법률 확인, 시세 파악\n- **예시**:\n  * "전세금 5% 인상 가능한가요?"\n  * "강남구 아파트 전세 시세"\n  * "전세자금대출 한도 얼마?"\n\n### 2. analysis_team (분석 팀)\n- **주요 기능**: 데이터 분석 및 평가\n- **전문 분야**:\n  * 시장 동향 분석 (상승률, 하락률, 추세)\n  * 리스크 평가 (계약, 투자 위험도)\n  * 투자 수익률 계산 (ROI, 월세 수익률)\n  * 대출 한도 및 조건 분석 (LTV, DTI, DSR)\n  * 비교 분석 (지역별, 상품별)\n- **도구**: data_analyzer, risk_evaluator, calculator\n- **적합한 작업**: 데이터 분석, 리스크 평가, 계산, 비교, 예측\n- **의존성**: 보통 search_team의 데이터가 필요\n- **예시**:\n  * "이 지역 투자 가치 분석해줘"\n  * "계약 리스크 평가해줘"\n  * "대출 가능 금액 계산해줘"\n\n### 3. document_team (문서 팀)\n- **주요 기능**: 문서 생성 및 관리\n- **전문 분야**:\n  * 계약서 작성 (임대차, 매매, 전세)\n  * 문서 템플릿 관리\n  * 특약사항 생성\n  * 계약서 수정안 작성\n  * 법률 문서 검토\n- **도구**: document_generator, contract_template, contract_reviewer\n- **적합한 작업**: 문서 작성, 계약서 생성, 문서 수정, 검토\n- **예시**:\n  * "임대차계약서 작성해줘"\n  * "특약사항 추가해줘"\n  * "계약서 수정안 만들어줘"\n\n## Agent 선택 전략\n\n### 1단계: 작업 유형 식별\n```\n정보 필요 → search_team\n분석/계산 필요 → analysis_team\n문서 작성 필요 → document_team\n```\n\n### 2단계: 의존성 분석\n```\n독립적 작업 → 단일 팀\n순차적 의존 → 여러 팀 (순서 중요)\n병렬 가능 → 여러 팀 (순서 무관)\n```\n\n### 3단계: 최적화\n```\n중복 제거 → 가장 적합한 팀만 선택\n효율성 → 병렬 처리 가능한 경우 표시\n```\n\n## 의도별 Agent 매핑 가이드\n\n| 의도 (Intent) | 추천 Agent 조합 | 이유 |\n|--------------|-----------------|------|\n| LEGAL_CONSULT | ["search_team"] | 법률 정보 검색 전문 |\n| MARKET_INQUIRY | ["search_team"] | 시세 데이터 조회 |\n| LOAN_CONSULT | ["search_team", "analysis_team"] | 대출 정보 조회 후 분석 |\n| CONTRACT_CREATION | ["document_team"] | 문서 생성 전문 |\n| CONTRACT_REVIEW | ["search_team", "analysis_team"] | 법률 검토 및 리스크 분석 |\n| COMPREHENSIVE | ["search_team", "analysis_team"] | 종합 정보 수집 및 분석 |\n| RISK_ANALYSIS | ["analysis_team"] | 리스크 평가 전문 |\n| UNCLEAR | ["search_team", "analysis_team"] | 포괄적 대응 |\n\n## 복합 질문 처리 예시\n\n### 예시 1: 순차적 처리\n질문: "강남구 시세 확인하고 투자 가치 분석해줘"\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "먼저 search_team이 시세 데이터를 수집하고, 그 결과를 analysis_team이 분석하여 투자 가치 평가"\n}\n```\n\n### 예시 2: 병렬 처리 가능\n질문: "법률 정보와 시세 정보 모두 알려줘"\n```json\n{\n    "selected_agents": ["search_team"],\n    "reasoning": "search_team이 법률과 시세 정보를 병렬로 조회 가능. 두 작업이 독립적이므로 동시 처리"\n}\n```\n\n### 예시 3: 3단계 파이프라인\n질문: "시세 조회하고 분석한 후 계약서 작성해줘"\n```json\n{\n    "selected_agents": ["search_team", "analysis_team", "document_team"],\n    "reasoning": "search_team이 데이터 수집 → analysis_team이 분석 → document_team이 분석 결과 기반 계약서 작성"\n}\n```\n\n## 응답 형식 (JSON)\n\n{\n    "selected_agents": ["선택된 agent/team 목록"],\n    "reasoning": "선택 이유를 구체적으로 설명. 각 Agent의 역할과 처리 순서 포함",\n    "coordination": "single/sequential/parallel/pipeline",\n    "dependencies": {"agent2": ["agent1"]},\n    "estimated_time": 30,\n    "confidence": 0.9\n}\n\n## 선택 가이드라인\n\n1. **최소 Agent 원칙**: 가능한 적은 수의 Agent로 처리\n2. **전문성 우선**: 해당 작업에 가장 전문적인 Agent 선택\n3. **효율성 고려**: 병렬 처리 가능한 경우 명시\n4. **의존성 관리**: 데이터 흐름을 고려한 순서 지정\n5. **폴백 전략**: 불확실한 경우 ["search_team", "analysis_team"] 조합\n\n## 주의사항\n\n- selected_agents는 반드시 배열 형태\n- Agent 이름은 정확히: "search_team", "analysis_team", "document_team"\n- 최소 1개, 최대 3개 선택\n- 순서는 실행 우선순위 (앞에 있을수록 먼저 실행)\n- reasoning은 상세하고 논리적으로 작성\n- coordination 필드로 실행 방식 명시\n- 복합 질문의 경우 의존성 관계 명확히 표시'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 14:41:01,881 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 14:41:01,882 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 14:41:01,882 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 14:41:01,882 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 14:41:01,882 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 14:41:01,882 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 14:41:04,187 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 05:41:04 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'2098'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'2121'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9926'), (b'x-ratelimit-remaining-tokens', b'198437'), (b'x-ratelimit-reset-requests', b'10m33.301s'), (b'x-ratelimit-reset-tokens', b'468ms'), (b'x-request-id', b'req_07986349a04f463b8c50d5c5492d84eb'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989a966e9d38e9fb-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 14:41:04,188 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 14:41:04,188 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 14:41:04,202 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 14:41:04,203 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 14:41:04,203 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 14:41:04,203 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 05:41:04 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '2098', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '2121', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9926', 'x-ratelimit-remaining-tokens': '198437', 'x-ratelimit-reset-requests': '10m33.301s', 'x-ratelimit-reset-tokens': '468ms', 'x-request-id': 'req_07986349a04f463b8c50d5c5492d84eb', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989a966e9d38e9fb-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 14:41:04,203 - openai._base_client - DEBUG - request_id: req_07986349a04f463b8c50d5c5492d84eb
2025-10-05 14:41:04,205 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: agent_selection | Model: gpt-4o-mini-2024-07-18 | Tokens: 1796 (prompt: 1697, completion: 99)
2025-10-05 14:41:04,205 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM agent selection reasoning: 사용자의 질문은 계약금 환불 가능성에 대한 법률 상담을 요구하고 있습니다. search_team은 법률 정보 검색 전문으로, 계약금 환불 관련 법규를 확인할 수 있습니다. 따라서 search_team이 가장 적합합니다.
2025-10-05 14:41:04,205 - app.service_agent.cognitive_agents.planning_agent - INFO - ✅ Primary LLM selected agents: ['search_team']
2025-10-05 14:41:04,206 - __main__ - INFO -   의도: 법률상담
2025-10-05 14:41:04,206 - __main__ - INFO -   신뢰도: 0.85
2025-10-05 14:41:04,206 - __main__ - INFO -   추천 Agent: ['search_team']
2025-10-05 14:41:04,206 - __main__ - INFO - 
[Step 2] Query Decomposition...
2025-10-05 14:41:04,206 - app.service_agent.cognitive_agents.query_decomposer - INFO - Decomposing query: 계약금 환불 가능한가요?...
2025-10-05 14:41:04,206 - app.service_agent.cognitive_agents.query_decomposer - INFO - Query is simple, no decomposition needed
2025-10-05 14:41:04,206 - __main__ - INFO -   복합 질문: False
2025-10-05 14:41:04,206 - __main__ - INFO -   작업 수: 1
2025-10-05 14:41:04,206 - __main__ - INFO -   실행 모드: sequential
2025-10-05 14:41:04,206 - __main__ - INFO - 
[Step 3] Execution Plan 생성...
2025-10-05 14:41:04,206 - app.service_agent.cognitive_agents.planning_agent - INFO - Creating execution plan for intent: 법률상담
2025-10-05 14:41:04,206 - app.service_agent.cognitive_agents.planning_agent - WARNING - AgentRegistry is empty, using default teams
2025-10-05 14:41:04,206 - app.service_agent.cognitive_agents.planning_agent - DEBUG - Suggested agents: ['search_team']
2025-10-05 14:41:04,206 - app.service_agent.cognitive_agents.planning_agent - DEBUG - Available agents: ['search_team', 'analysis_team', 'document_team']
2025-10-05 14:41:04,206 - app.service_agent.cognitive_agents.planning_agent - INFO - Selected agents/teams for execution: ['search_team']
2025-10-05 14:41:04,206 - __main__ - INFO -   전략: sequential
2025-10-05 14:41:04,206 - __main__ - INFO -   단계 수: 1
2025-10-05 14:41:04,206 - __main__ - INFO - 
✓ 테스트 성공 (소요시간: 4.76초)
2025-10-05 14:41:04,207 - __main__ - INFO - 
================================================================================
2025-10-05 14:41:04,207 - __main__ - INFO - [18] 단일 질문 테스트: S018
2025-10-05 14:41:04,207 - __main__ - INFO - 질문: 성동구 빌라 전세 시세 알려주세요
2025-10-05 14:41:04,207 - __main__ - INFO - ================================================================================
2025-10-05 14:41:04,207 - __main__ - INFO - 
[Step 1] Intent 분석...
2025-10-05 14:41:04,207 - app.service_agent.cognitive_agents.planning_agent - INFO - Analyzing intent for query: 성동구 빌라 전세 시세 알려주세요...
2025-10-05 14:41:04,207 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-7fd1a594-9fd2-45d5-ae23-26fe307b3930', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 의도 분석 전문가입니다.\n사용자의 질문을 정확히 이해하고, 어떤 종류의 도움이 필요한지 분류해야 합니다.\n\n## 중요: 복합 질문 처리\n복합적인 질문(여러 의도가 섞인 질문)의 경우, 가장 핵심적인 의도를 파악하되,\nsub_intents 필드에 부가적인 의도들도 함께 기록해주세요.\n\n## 분류 카테고리 설명:\n\n1. **LEGAL_CONSULT (법률상담)**\n   - 설명: 부동산 관련 법률, 권리, 의무에 대한 질문\n   - 예시:\n     * 단순: "전세금 5% 인상이 가능한가요?", "임대차계약 갱신 거부할 수 있나요?"\n     * 복합: "전세금 인상 가능한지 확인하고 법적 근거도 알려주세요"\n   - 키워드: 법, 전세, 임대, 보증금, 계약, 권리, 의무, 갱신, 임차인, 임대인, 법률, 규정, 조항\n   - 필요한 처리: 법률 데이터베이스 검색, 관련 법조항 찾기\n\n2. **MARKET_INQUIRY (시세조회)**\n   - 설명: 부동산 시장 가격, 시세, 거래 동향에 대한 질문\n   - 예시:\n     * 단순: "강남구 아파트 전세 시세 알려주세요", "서초동 매매가 얼마나 올랐나요?"\n     * 복합: "강남구 시세 확인하고 대출 가능 금액도 계산해줘"\n   - 키워드: 시세, 가격, 매매가, 전세가, 월세, 시장, 동향, 평균, 지역명, 상승률, 하락률\n   - 필요한 처리: 부동산 시세 데이터 조회, 지역별 가격 분석\n\n3. **LOAN_CONSULT (대출상담)**\n   - 설명: 주택담보대출, 전세자금대출 등 금융 관련 질문\n   - 예시:\n     * 단순: "전세자금대출 한도가 얼마인가요?", "LTV가 뭔가요?"\n     * 복합: "대출 한도 확인하고 금리 비교도 해주세요"\n   - 키워드: 대출, 금리, 한도, 조건, 상환, LTV, DTI, DSR, 담보, 금융, 은행\n   - 필요한 처리: 대출 상품 조회, 금리 정보 검색, 한도 계산\n\n4. **CONTRACT_CREATION (계약서작성)**\n   - 설명: 새로운 계약서나 문서를 작성해달라는 요청\n   - 예시:\n     * 단순: "임대차계약서 작성해주세요", "전세계약서 초안 만들어주세요"\n     * 복합: "계약서 작성하고 주의사항도 검토해주세요"\n   - 키워드: 작성, 만들, 생성, 초안, 계약서, 문서, 양식\n   - 필요한 처리: 문서 생성 에이전트 호출, 템플릿 기반 작성\n\n5. **CONTRACT_REVIEW (계약서검토)**\n   - 설명: 기존 계약서나 문서를 검토해달라는 요청\n   - 예시:\n     * 단순: "이 계약서 검토해주세요", "특약사항 문제없나요?"\n     * 복합: "계약서 검토하고 수정사항도 제안해주세요"\n   - 키워드: 검토, 확인, 점검, 리뷰, 분석해, 살펴봐, 체크\n   - 필요한 처리: 문서 분석, 위험 요소 식별, 개선사항 제안\n\n6. **COMPREHENSIVE (종합분석)**\n   - 설명: 여러 측면을 종합적으로 분석해달라는 요청\n   - 예시:\n     * 단순: "이 물건 전체적으로 분석해주세요"\n     * 복합: "시세, 법률, 대출 모두 검토해서 종합 의견 주세요"\n   - 키워드: 종합, 전체, 모든, 전반적, 종합적, 평가, 분석\n   - 필요한 처리: 다중 데이터 소스 통합 분석\n\n7. **RISK_ANALYSIS (리스크분석)**\n   - 설명: 위험 요소나 주의사항에 대한 질문\n   - 예시:\n     * 단순: "이 계약 위험한가요?", "주의할 점 알려주세요"\n     * 복합: "리스크 분석하고 대안도 제시해주세요"\n   - 키워드: 위험, 리스크, 주의, 문제점, 조심, 걱정, 우려\n   - 필요한 처리: 위험 요소 분석, 주의사항 추출\n\n8. **UNCLEAR (불분명)**\n   - 설명: 의도를 명확히 파악하기 어려운 질문\n   - 예시: "이거 좀 봐주세요", "어떻게 해야 할까요?", "도와주세요"\n   - 처리: 추가 질문으로 의도 명확화 필요\n\n9. **IRRELEVANT (무관)**\n   - 설명: 부동산과 전혀 관련 없는 질문\n   - 예시: "날씨 어때?", "저녁 뭐 먹지?", "주식 추천해줘"\n   - 처리: 부동산 관련 질문을 유도\n\n## 복합 질문 예시와 분석:\n\n### 예시 1: "강남구 아파트 시세 알려주고 전세자금대출 가능한지도 확인해줘"\n- 주 의도: MARKET_INQUIRY (시세 조회가 먼저 필요)\n- 부가 의도: LOAN_CONSULT (대출 확인)\n- 분해: ["강남구 아파트 시세 조회", "전세자금대출 가능 여부 확인"]\n\n### 예시 2: "이 계약서 검토해서 위험한 부분 있는지 알려주고 수정 제안도 해줘"\n- 주 의도: CONTRACT_REVIEW (계약서 검토)\n- 부가 의도: RISK_ANALYSIS (위험 분석)\n- 분해: ["계약서 전체 검토", "위험 요소 식별", "수정사항 제안"]\n\n### 예시 3: "서초동 전세가 확인하고 법적으로 문제없는지도 봐줘"\n- 주 의도: MARKET_INQUIRY (시세 확인)\n- 부가 의도: LEGAL_CONSULT (법적 검토)\n- 분해: ["서초동 전세가 조회", "법적 이슈 검토"]\n\n## 응답 형식 (JSON 형식으로 응답):\n\n{\n    "intent": "LEGAL_CONSULT",\n    "confidence": 0.9,\n    "keywords": ["전세금", "인상", "제한"],\n    "sub_intents": [],\n    "is_compound": false,\n    "decomposed_tasks": [],\n    "entities": {\n        "location": "강남구",\n        "price": "5억",\n        "contract_type": "전세",\n        "date": "2024년",\n        "area": "84㎡",\n        "action_verbs": ["확인", "검토"]\n    },\n    "reasoning": "전세금 인상에 대한 법률 질문이므로 LEGAL_CONSULT로 분류"\n}\n\n응답 규칙:\n- intent: 위 9개 카테고리 중 하나 (대문자_언더스코어 형식)\n- confidence: 0.0~1.0 (0.8 이상이면 매우 확실, 0.5 미만이면 불확실)\n- keywords: 추출된 주요 키워드 목록\n- sub_intents: 복합 질문일 경우 부가적인 의도들\n- is_compound: 복합 질문 여부 (true/false)\n- decomposed_tasks: 복합 질문을 분해한 개별 작업들\n- entities: 추출된 엔티티 정보\n- reasoning: 분류한 이유와 근거 (상세하게)\n\n## 판단 가이드:\n- 여러 의도가 섞여있다면, 가장 주된 의도를 intent에, 나머지를 sub_intents에 기록\n- "그리고", "또한", "함께", "같이" 등의 연결어가 있으면 복합 질문일 가능성 높음\n- 법률 관련 키워드가 있으면 LEGAL_CONSULT 우선\n- 가격/시세 언급이 명확하면 MARKET_INQUIRY\n- 계약서라는 단어와 함께 "작성/만들기"가 있으면 CONTRACT_CREATION\n- 계약서라는 단어와 함께 "검토/확인"이 있으면 CONTRACT_REVIEW\n- 불확실하면 confidence를 낮게 설정하고 UNCLEAR 선택\n- 복합 질문은 is_compound를 true로 설정하고 개별 작업으로 분해\n\n분석할 질문: 성동구 빌라 전세 시세 알려주세요'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 14:41:04,207 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 14:41:04,208 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 14:41:04,208 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 14:41:04,208 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 14:41:04,208 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 14:41:04,208 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 14:41:07,187 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 05:41:07 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'2712'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'2729'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9925'), (b'x-ratelimit-remaining-tokens', b'198316'), (b'x-ratelimit-reset-requests', b'10m39.624s'), (b'x-ratelimit-reset-tokens', b'505ms'), (b'x-request-id', b'req_64ae38d53e38435b848165b7ea472860'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989a967d2b8de9fb-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 14:41:07,189 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 14:41:07,189 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 14:41:07,189 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 14:41:07,189 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 14:41:07,189 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 14:41:07,189 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 05:41:07 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '2712', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '2729', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9925', 'x-ratelimit-remaining-tokens': '198316', 'x-ratelimit-reset-requests': '10m39.624s', 'x-ratelimit-reset-tokens': '505ms', 'x-request-id': 'req_64ae38d53e38435b848165b7ea472860', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989a967d2b8de9fb-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 14:41:07,189 - openai._base_client - DEBUG - request_id: req_64ae38d53e38435b848165b7ea472860
2025-10-05 14:41:07,190 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: intent_analysis | Model: gpt-4o-mini-2024-07-18 | Tokens: 2052 (prompt: 1922, completion: 130)
2025-10-05 14:41:07,190 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM Intent Analysis Result: {'intent': 'MARKET_INQUIRY', 'confidence': 0.95, 'keywords': ['성동구', '빌라', '전세', '시세'], 'sub_intents': [], 'is_compound': False, 'decomposed_tasks': [], 'entities': {'location': '성동구', 'property_type': '빌라', 'contract_type': '전세'}, 'reasoning': '성동구 빌라의 전세 시세에 대한 질문이므로 MARKET_INQUIRY로 분류'}
2025-10-05 14:41:07,190 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-17966832-b184-4771-8ba0-cac40e48d200', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 Agent 선택 전문가입니다.\n사용자의 요청에 가장 적합한 Agent/Team을 선택하는 것이 목표입니다.\n\n## 현재 상황\n\n**사용자 질문:** 성동구 빌라 전세 시세 알려주세요\n**분석된 의도:** 시세조회\n**추출된 키워드:** [\'성동구\', \'빌라\', \'전세\', \'시세\']\n\n## 사용 가능한 Agent/Team 정보\n\n{\'search_team\': {\'name\': \'search_team\', \'capabilities\': \'법률 검색, 부동산 시세 조회, 대출 상품 검색\', \'tools\': [\'legal_search\', \'market_data\', \'loan_data\'], \'use_cases\': [\'법률 상담\', \'시세 조회\', \'대출 정보\']}, \'analysis_team\': {\'name\': \'analysis_team\', \'capabilities\': \'데이터 분석, 리스크 평가, 인사이트 생성, 추천\', \'tools\': [\'data_analyzer\', \'risk_evaluator\'], \'use_cases\': [\'시장 분석\', \'리스크 평가\', \'투자 분석\']}, \'document_team\': {\'name\': \'document_team\', \'capabilities\': \'계약서 작성, 문서 생성, 문서 검토\', \'tools\': [\'document_generator\', \'contract_reviewer\'], \'use_cases\': [\'계약서 작성\', \'문서 검토\']}}\n\n## Agent 역할 및 상세 가이드\n\n### 1. search_team (검색 팀)\n- **주요 기능**: 정보 검색 및 데이터 수집\n- **전문 분야**:\n  * 법률 정보 검색 (전세법, 임대차보호법, 부동산 관련 법규)\n  * 부동산 시세 조회 (매매가, 전세가, 월세, 실거래가)\n  * 대출 상품 정보 검색 (금리, 한도, 조건)\n  * 지역 정보 및 인프라 조회\n- **도구**: legal_search, market_data, loan_data\n- **적합한 작업**: 정보 조회, 데이터 수집, 법률 확인, 시세 파악\n- **예시**:\n  * "전세금 5% 인상 가능한가요?"\n  * "강남구 아파트 전세 시세"\n  * "전세자금대출 한도 얼마?"\n\n### 2. analysis_team (분석 팀)\n- **주요 기능**: 데이터 분석 및 평가\n- **전문 분야**:\n  * 시장 동향 분석 (상승률, 하락률, 추세)\n  * 리스크 평가 (계약, 투자 위험도)\n  * 투자 수익률 계산 (ROI, 월세 수익률)\n  * 대출 한도 및 조건 분석 (LTV, DTI, DSR)\n  * 비교 분석 (지역별, 상품별)\n- **도구**: data_analyzer, risk_evaluator, calculator\n- **적합한 작업**: 데이터 분석, 리스크 평가, 계산, 비교, 예측\n- **의존성**: 보통 search_team의 데이터가 필요\n- **예시**:\n  * "이 지역 투자 가치 분석해줘"\n  * "계약 리스크 평가해줘"\n  * "대출 가능 금액 계산해줘"\n\n### 3. document_team (문서 팀)\n- **주요 기능**: 문서 생성 및 관리\n- **전문 분야**:\n  * 계약서 작성 (임대차, 매매, 전세)\n  * 문서 템플릿 관리\n  * 특약사항 생성\n  * 계약서 수정안 작성\n  * 법률 문서 검토\n- **도구**: document_generator, contract_template, contract_reviewer\n- **적합한 작업**: 문서 작성, 계약서 생성, 문서 수정, 검토\n- **예시**:\n  * "임대차계약서 작성해줘"\n  * "특약사항 추가해줘"\n  * "계약서 수정안 만들어줘"\n\n## Agent 선택 전략\n\n### 1단계: 작업 유형 식별\n```\n정보 필요 → search_team\n분석/계산 필요 → analysis_team\n문서 작성 필요 → document_team\n```\n\n### 2단계: 의존성 분석\n```\n독립적 작업 → 단일 팀\n순차적 의존 → 여러 팀 (순서 중요)\n병렬 가능 → 여러 팀 (순서 무관)\n```\n\n### 3단계: 최적화\n```\n중복 제거 → 가장 적합한 팀만 선택\n효율성 → 병렬 처리 가능한 경우 표시\n```\n\n## 의도별 Agent 매핑 가이드\n\n| 의도 (Intent) | 추천 Agent 조합 | 이유 |\n|--------------|-----------------|------|\n| LEGAL_CONSULT | ["search_team"] | 법률 정보 검색 전문 |\n| MARKET_INQUIRY | ["search_team"] | 시세 데이터 조회 |\n| LOAN_CONSULT | ["search_team", "analysis_team"] | 대출 정보 조회 후 분석 |\n| CONTRACT_CREATION | ["document_team"] | 문서 생성 전문 |\n| CONTRACT_REVIEW | ["search_team", "analysis_team"] | 법률 검토 및 리스크 분석 |\n| COMPREHENSIVE | ["search_team", "analysis_team"] | 종합 정보 수집 및 분석 |\n| RISK_ANALYSIS | ["analysis_team"] | 리스크 평가 전문 |\n| UNCLEAR | ["search_team", "analysis_team"] | 포괄적 대응 |\n\n## 복합 질문 처리 예시\n\n### 예시 1: 순차적 처리\n질문: "강남구 시세 확인하고 투자 가치 분석해줘"\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "먼저 search_team이 시세 데이터를 수집하고, 그 결과를 analysis_team이 분석하여 투자 가치 평가"\n}\n```\n\n### 예시 2: 병렬 처리 가능\n질문: "법률 정보와 시세 정보 모두 알려줘"\n```json\n{\n    "selected_agents": ["search_team"],\n    "reasoning": "search_team이 법률과 시세 정보를 병렬로 조회 가능. 두 작업이 독립적이므로 동시 처리"\n}\n```\n\n### 예시 3: 3단계 파이프라인\n질문: "시세 조회하고 분석한 후 계약서 작성해줘"\n```json\n{\n    "selected_agents": ["search_team", "analysis_team", "document_team"],\n    "reasoning": "search_team이 데이터 수집 → analysis_team이 분석 → document_team이 분석 결과 기반 계약서 작성"\n}\n```\n\n## 응답 형식 (JSON)\n\n{\n    "selected_agents": ["선택된 agent/team 목록"],\n    "reasoning": "선택 이유를 구체적으로 설명. 각 Agent의 역할과 처리 순서 포함",\n    "coordination": "single/sequential/parallel/pipeline",\n    "dependencies": {"agent2": ["agent1"]},\n    "estimated_time": 30,\n    "confidence": 0.9\n}\n\n## 선택 가이드라인\n\n1. **최소 Agent 원칙**: 가능한 적은 수의 Agent로 처리\n2. **전문성 우선**: 해당 작업에 가장 전문적인 Agent 선택\n3. **효율성 고려**: 병렬 처리 가능한 경우 명시\n4. **의존성 관리**: 데이터 흐름을 고려한 순서 지정\n5. **폴백 전략**: 불확실한 경우 ["search_team", "analysis_team"] 조합\n\n## 주의사항\n\n- selected_agents는 반드시 배열 형태\n- Agent 이름은 정확히: "search_team", "analysis_team", "document_team"\n- 최소 1개, 최대 3개 선택\n- 순서는 실행 우선순위 (앞에 있을수록 먼저 실행)\n- reasoning은 상세하고 논리적으로 작성\n- coordination 필드로 실행 방식 명시\n- 복합 질문의 경우 의존성 관계 명확히 표시'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 14:41:07,191 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 14:41:07,191 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 14:41:07,191 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 14:41:07,191 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 14:41:07,191 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 14:41:07,191 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 14:41:09,131 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 05:41:09 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'1660'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'1674'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9925'), (b'x-ratelimit-remaining-tokens', b'198432'), (b'x-ratelimit-reset-requests', b'10m45.273s'), (b'x-ratelimit-reset-tokens', b'470ms'), (b'x-request-id', b'req_00c3f2322b464af2ada108505b660654'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989a968fcbe9e9fb-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 14:41:09,132 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 14:41:09,132 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 14:41:09,132 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 14:41:09,132 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 14:41:09,132 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 14:41:09,133 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 05:41:09 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '1660', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '1674', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9925', 'x-ratelimit-remaining-tokens': '198432', 'x-ratelimit-reset-requests': '10m45.273s', 'x-ratelimit-reset-tokens': '470ms', 'x-request-id': 'req_00c3f2322b464af2ada108505b660654', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989a968fcbe9e9fb-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 14:41:09,133 - openai._base_client - DEBUG - request_id: req_00c3f2322b464af2ada108505b660654
2025-10-05 14:41:09,133 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: agent_selection | Model: gpt-4o-mini-2024-07-18 | Tokens: 1801 (prompt: 1706, completion: 95)
2025-10-05 14:41:09,133 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM agent selection reasoning: 사용자가 요청한 성동구 빌라 전세 시세 조회는 부동산 시세 조회 전문인 search_team이 가장 적합합니다. 이 팀은 시세 데이터를 직접 조회할 수 있는 능력을 가지고 있습니다.
2025-10-05 14:41:09,133 - app.service_agent.cognitive_agents.planning_agent - INFO - ✅ Primary LLM selected agents: ['search_team']
2025-10-05 14:41:09,133 - __main__ - INFO -   의도: 시세조회
2025-10-05 14:41:09,133 - __main__ - INFO -   신뢰도: 0.95
2025-10-05 14:41:09,133 - __main__ - INFO -   추천 Agent: ['search_team']
2025-10-05 14:41:09,133 - __main__ - INFO - 
[Step 2] Query Decomposition...
2025-10-05 14:41:09,133 - app.service_agent.cognitive_agents.query_decomposer - INFO - Decomposing query: 성동구 빌라 전세 시세 알려주세요...
2025-10-05 14:41:09,133 - app.service_agent.cognitive_agents.query_decomposer - INFO - Query is simple, no decomposition needed
2025-10-05 14:41:09,133 - __main__ - INFO -   복합 질문: False
2025-10-05 14:41:09,133 - __main__ - INFO -   작업 수: 1
2025-10-05 14:41:09,133 - __main__ - INFO -   실행 모드: sequential
2025-10-05 14:41:09,133 - __main__ - INFO - 
[Step 3] Execution Plan 생성...
2025-10-05 14:41:09,133 - app.service_agent.cognitive_agents.planning_agent - INFO - Creating execution plan for intent: 시세조회
2025-10-05 14:41:09,133 - app.service_agent.cognitive_agents.planning_agent - WARNING - AgentRegistry is empty, using default teams
2025-10-05 14:41:09,133 - app.service_agent.cognitive_agents.planning_agent - DEBUG - Suggested agents: ['search_team']
2025-10-05 14:41:09,134 - app.service_agent.cognitive_agents.planning_agent - DEBUG - Available agents: ['search_team', 'analysis_team', 'document_team']
2025-10-05 14:41:09,134 - app.service_agent.cognitive_agents.planning_agent - INFO - Selected agents/teams for execution: ['search_team']
2025-10-05 14:41:09,134 - __main__ - INFO -   전략: sequential
2025-10-05 14:41:09,134 - __main__ - INFO -   단계 수: 1
2025-10-05 14:41:09,134 - __main__ - INFO - 
✓ 테스트 성공 (소요시간: 4.93초)
2025-10-05 14:41:09,134 - __main__ - INFO - 
================================================================================
2025-10-05 14:41:09,134 - __main__ - INFO - [19] 단일 질문 테스트: S019
2025-10-05 14:41:09,134 - __main__ - INFO - 질문: 생애최초 주택 구매 대출 한도는?
2025-10-05 14:41:09,134 - __main__ - INFO - ================================================================================
2025-10-05 14:41:09,134 - __main__ - INFO - 
[Step 1] Intent 분석...
2025-10-05 14:41:09,134 - app.service_agent.cognitive_agents.planning_agent - INFO - Analyzing intent for query: 생애최초 주택 구매 대출 한도는?...
2025-10-05 14:41:09,134 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-4394bbc8-8a2d-4924-865b-d2e9841e7668', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 의도 분석 전문가입니다.\n사용자의 질문을 정확히 이해하고, 어떤 종류의 도움이 필요한지 분류해야 합니다.\n\n## 중요: 복합 질문 처리\n복합적인 질문(여러 의도가 섞인 질문)의 경우, 가장 핵심적인 의도를 파악하되,\nsub_intents 필드에 부가적인 의도들도 함께 기록해주세요.\n\n## 분류 카테고리 설명:\n\n1. **LEGAL_CONSULT (법률상담)**\n   - 설명: 부동산 관련 법률, 권리, 의무에 대한 질문\n   - 예시:\n     * 단순: "전세금 5% 인상이 가능한가요?", "임대차계약 갱신 거부할 수 있나요?"\n     * 복합: "전세금 인상 가능한지 확인하고 법적 근거도 알려주세요"\n   - 키워드: 법, 전세, 임대, 보증금, 계약, 권리, 의무, 갱신, 임차인, 임대인, 법률, 규정, 조항\n   - 필요한 처리: 법률 데이터베이스 검색, 관련 법조항 찾기\n\n2. **MARKET_INQUIRY (시세조회)**\n   - 설명: 부동산 시장 가격, 시세, 거래 동향에 대한 질문\n   - 예시:\n     * 단순: "강남구 아파트 전세 시세 알려주세요", "서초동 매매가 얼마나 올랐나요?"\n     * 복합: "강남구 시세 확인하고 대출 가능 금액도 계산해줘"\n   - 키워드: 시세, 가격, 매매가, 전세가, 월세, 시장, 동향, 평균, 지역명, 상승률, 하락률\n   - 필요한 처리: 부동산 시세 데이터 조회, 지역별 가격 분석\n\n3. **LOAN_CONSULT (대출상담)**\n   - 설명: 주택담보대출, 전세자금대출 등 금융 관련 질문\n   - 예시:\n     * 단순: "전세자금대출 한도가 얼마인가요?", "LTV가 뭔가요?"\n     * 복합: "대출 한도 확인하고 금리 비교도 해주세요"\n   - 키워드: 대출, 금리, 한도, 조건, 상환, LTV, DTI, DSR, 담보, 금융, 은행\n   - 필요한 처리: 대출 상품 조회, 금리 정보 검색, 한도 계산\n\n4. **CONTRACT_CREATION (계약서작성)**\n   - 설명: 새로운 계약서나 문서를 작성해달라는 요청\n   - 예시:\n     * 단순: "임대차계약서 작성해주세요", "전세계약서 초안 만들어주세요"\n     * 복합: "계약서 작성하고 주의사항도 검토해주세요"\n   - 키워드: 작성, 만들, 생성, 초안, 계약서, 문서, 양식\n   - 필요한 처리: 문서 생성 에이전트 호출, 템플릿 기반 작성\n\n5. **CONTRACT_REVIEW (계약서검토)**\n   - 설명: 기존 계약서나 문서를 검토해달라는 요청\n   - 예시:\n     * 단순: "이 계약서 검토해주세요", "특약사항 문제없나요?"\n     * 복합: "계약서 검토하고 수정사항도 제안해주세요"\n   - 키워드: 검토, 확인, 점검, 리뷰, 분석해, 살펴봐, 체크\n   - 필요한 처리: 문서 분석, 위험 요소 식별, 개선사항 제안\n\n6. **COMPREHENSIVE (종합분석)**\n   - 설명: 여러 측면을 종합적으로 분석해달라는 요청\n   - 예시:\n     * 단순: "이 물건 전체적으로 분석해주세요"\n     * 복합: "시세, 법률, 대출 모두 검토해서 종합 의견 주세요"\n   - 키워드: 종합, 전체, 모든, 전반적, 종합적, 평가, 분석\n   - 필요한 처리: 다중 데이터 소스 통합 분석\n\n7. **RISK_ANALYSIS (리스크분석)**\n   - 설명: 위험 요소나 주의사항에 대한 질문\n   - 예시:\n     * 단순: "이 계약 위험한가요?", "주의할 점 알려주세요"\n     * 복합: "리스크 분석하고 대안도 제시해주세요"\n   - 키워드: 위험, 리스크, 주의, 문제점, 조심, 걱정, 우려\n   - 필요한 처리: 위험 요소 분석, 주의사항 추출\n\n8. **UNCLEAR (불분명)**\n   - 설명: 의도를 명확히 파악하기 어려운 질문\n   - 예시: "이거 좀 봐주세요", "어떻게 해야 할까요?", "도와주세요"\n   - 처리: 추가 질문으로 의도 명확화 필요\n\n9. **IRRELEVANT (무관)**\n   - 설명: 부동산과 전혀 관련 없는 질문\n   - 예시: "날씨 어때?", "저녁 뭐 먹지?", "주식 추천해줘"\n   - 처리: 부동산 관련 질문을 유도\n\n## 복합 질문 예시와 분석:\n\n### 예시 1: "강남구 아파트 시세 알려주고 전세자금대출 가능한지도 확인해줘"\n- 주 의도: MARKET_INQUIRY (시세 조회가 먼저 필요)\n- 부가 의도: LOAN_CONSULT (대출 확인)\n- 분해: ["강남구 아파트 시세 조회", "전세자금대출 가능 여부 확인"]\n\n### 예시 2: "이 계약서 검토해서 위험한 부분 있는지 알려주고 수정 제안도 해줘"\n- 주 의도: CONTRACT_REVIEW (계약서 검토)\n- 부가 의도: RISK_ANALYSIS (위험 분석)\n- 분해: ["계약서 전체 검토", "위험 요소 식별", "수정사항 제안"]\n\n### 예시 3: "서초동 전세가 확인하고 법적으로 문제없는지도 봐줘"\n- 주 의도: MARKET_INQUIRY (시세 확인)\n- 부가 의도: LEGAL_CONSULT (법적 검토)\n- 분해: ["서초동 전세가 조회", "법적 이슈 검토"]\n\n## 응답 형식 (JSON 형식으로 응답):\n\n{\n    "intent": "LEGAL_CONSULT",\n    "confidence": 0.9,\n    "keywords": ["전세금", "인상", "제한"],\n    "sub_intents": [],\n    "is_compound": false,\n    "decomposed_tasks": [],\n    "entities": {\n        "location": "강남구",\n        "price": "5억",\n        "contract_type": "전세",\n        "date": "2024년",\n        "area": "84㎡",\n        "action_verbs": ["확인", "검토"]\n    },\n    "reasoning": "전세금 인상에 대한 법률 질문이므로 LEGAL_CONSULT로 분류"\n}\n\n응답 규칙:\n- intent: 위 9개 카테고리 중 하나 (대문자_언더스코어 형식)\n- confidence: 0.0~1.0 (0.8 이상이면 매우 확실, 0.5 미만이면 불확실)\n- keywords: 추출된 주요 키워드 목록\n- sub_intents: 복합 질문일 경우 부가적인 의도들\n- is_compound: 복합 질문 여부 (true/false)\n- decomposed_tasks: 복합 질문을 분해한 개별 작업들\n- entities: 추출된 엔티티 정보\n- reasoning: 분류한 이유와 근거 (상세하게)\n\n## 판단 가이드:\n- 여러 의도가 섞여있다면, 가장 주된 의도를 intent에, 나머지를 sub_intents에 기록\n- "그리고", "또한", "함께", "같이" 등의 연결어가 있으면 복합 질문일 가능성 높음\n- 법률 관련 키워드가 있으면 LEGAL_CONSULT 우선\n- 가격/시세 언급이 명확하면 MARKET_INQUIRY\n- 계약서라는 단어와 함께 "작성/만들기"가 있으면 CONTRACT_CREATION\n- 계약서라는 단어와 함께 "검토/확인"이 있으면 CONTRACT_REVIEW\n- 불확실하면 confidence를 낮게 설정하고 UNCLEAR 선택\n- 복합 질문은 is_compound를 true로 설정하고 개별 작업으로 분해\n\n분석할 질문: 생애최초 주택 구매 대출 한도는?'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 14:41:09,134 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 14:41:09,135 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 14:41:09,135 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 14:41:09,135 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 14:41:09,135 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 14:41:09,135 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 14:41:12,021 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 05:41:11 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'2667'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'2700'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9924'), (b'x-ratelimit-remaining-tokens', b'198316'), (b'x-ratelimit-reset-requests', b'10m51.962s'), (b'x-ratelimit-reset-tokens', b'504ms'), (b'x-request-id', b'req_74146757bf604ed08f19d28e9c07a5a5'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989a969bed42e9fb-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 14:41:12,021 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 14:41:12,021 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 14:41:12,026 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 14:41:12,026 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 14:41:12,026 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 14:41:12,026 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 05:41:11 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '2667', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '2700', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9924', 'x-ratelimit-remaining-tokens': '198316', 'x-ratelimit-reset-requests': '10m51.962s', 'x-ratelimit-reset-tokens': '504ms', 'x-request-id': 'req_74146757bf604ed08f19d28e9c07a5a5', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989a969bed42e9fb-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 14:41:12,026 - openai._base_client - DEBUG - request_id: req_74146757bf604ed08f19d28e9c07a5a5
2025-10-05 14:41:12,026 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: intent_analysis | Model: gpt-4o-mini-2024-07-18 | Tokens: 2053 (prompt: 1923, completion: 130)
2025-10-05 14:41:12,026 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM Intent Analysis Result: {'intent': 'LOAN_CONSULT', 'confidence': 0.9, 'keywords': ['생애최초', '주택', '구매', '대출', '한도'], 'sub_intents': [], 'is_compound': False, 'decomposed_tasks': [], 'entities': {'loan_type': '주택 구매 대출', 'first_time_buyer': True}, 'reasoning': '생애최초 주택 구매 대출 한도에 대한 질문이므로 LOAN_CONSULT로 분류'}
2025-10-05 14:41:12,027 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-bf1c2490-fc3c-4cb2-8adf-c4a95d731d16', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 Agent 선택 전문가입니다.\n사용자의 요청에 가장 적합한 Agent/Team을 선택하는 것이 목표입니다.\n\n## 현재 상황\n\n**사용자 질문:** 생애최초 주택 구매 대출 한도는?\n**분석된 의도:** 대출상담\n**추출된 키워드:** [\'생애최초\', \'주택\', \'구매\', \'대출\', \'한도\']\n\n## 사용 가능한 Agent/Team 정보\n\n{\'search_team\': {\'name\': \'search_team\', \'capabilities\': \'법률 검색, 부동산 시세 조회, 대출 상품 검색\', \'tools\': [\'legal_search\', \'market_data\', \'loan_data\'], \'use_cases\': [\'법률 상담\', \'시세 조회\', \'대출 정보\']}, \'analysis_team\': {\'name\': \'analysis_team\', \'capabilities\': \'데이터 분석, 리스크 평가, 인사이트 생성, 추천\', \'tools\': [\'data_analyzer\', \'risk_evaluator\'], \'use_cases\': [\'시장 분석\', \'리스크 평가\', \'투자 분석\']}, \'document_team\': {\'name\': \'document_team\', \'capabilities\': \'계약서 작성, 문서 생성, 문서 검토\', \'tools\': [\'document_generator\', \'contract_reviewer\'], \'use_cases\': [\'계약서 작성\', \'문서 검토\']}}\n\n## Agent 역할 및 상세 가이드\n\n### 1. search_team (검색 팀)\n- **주요 기능**: 정보 검색 및 데이터 수집\n- **전문 분야**:\n  * 법률 정보 검색 (전세법, 임대차보호법, 부동산 관련 법규)\n  * 부동산 시세 조회 (매매가, 전세가, 월세, 실거래가)\n  * 대출 상품 정보 검색 (금리, 한도, 조건)\n  * 지역 정보 및 인프라 조회\n- **도구**: legal_search, market_data, loan_data\n- **적합한 작업**: 정보 조회, 데이터 수집, 법률 확인, 시세 파악\n- **예시**:\n  * "전세금 5% 인상 가능한가요?"\n  * "강남구 아파트 전세 시세"\n  * "전세자금대출 한도 얼마?"\n\n### 2. analysis_team (분석 팀)\n- **주요 기능**: 데이터 분석 및 평가\n- **전문 분야**:\n  * 시장 동향 분석 (상승률, 하락률, 추세)\n  * 리스크 평가 (계약, 투자 위험도)\n  * 투자 수익률 계산 (ROI, 월세 수익률)\n  * 대출 한도 및 조건 분석 (LTV, DTI, DSR)\n  * 비교 분석 (지역별, 상품별)\n- **도구**: data_analyzer, risk_evaluator, calculator\n- **적합한 작업**: 데이터 분석, 리스크 평가, 계산, 비교, 예측\n- **의존성**: 보통 search_team의 데이터가 필요\n- **예시**:\n  * "이 지역 투자 가치 분석해줘"\n  * "계약 리스크 평가해줘"\n  * "대출 가능 금액 계산해줘"\n\n### 3. document_team (문서 팀)\n- **주요 기능**: 문서 생성 및 관리\n- **전문 분야**:\n  * 계약서 작성 (임대차, 매매, 전세)\n  * 문서 템플릿 관리\n  * 특약사항 생성\n  * 계약서 수정안 작성\n  * 법률 문서 검토\n- **도구**: document_generator, contract_template, contract_reviewer\n- **적합한 작업**: 문서 작성, 계약서 생성, 문서 수정, 검토\n- **예시**:\n  * "임대차계약서 작성해줘"\n  * "특약사항 추가해줘"\n  * "계약서 수정안 만들어줘"\n\n## Agent 선택 전략\n\n### 1단계: 작업 유형 식별\n```\n정보 필요 → search_team\n분석/계산 필요 → analysis_team\n문서 작성 필요 → document_team\n```\n\n### 2단계: 의존성 분석\n```\n독립적 작업 → 단일 팀\n순차적 의존 → 여러 팀 (순서 중요)\n병렬 가능 → 여러 팀 (순서 무관)\n```\n\n### 3단계: 최적화\n```\n중복 제거 → 가장 적합한 팀만 선택\n효율성 → 병렬 처리 가능한 경우 표시\n```\n\n## 의도별 Agent 매핑 가이드\n\n| 의도 (Intent) | 추천 Agent 조합 | 이유 |\n|--------------|-----------------|------|\n| LEGAL_CONSULT | ["search_team"] | 법률 정보 검색 전문 |\n| MARKET_INQUIRY | ["search_team"] | 시세 데이터 조회 |\n| LOAN_CONSULT | ["search_team", "analysis_team"] | 대출 정보 조회 후 분석 |\n| CONTRACT_CREATION | ["document_team"] | 문서 생성 전문 |\n| CONTRACT_REVIEW | ["search_team", "analysis_team"] | 법률 검토 및 리스크 분석 |\n| COMPREHENSIVE | ["search_team", "analysis_team"] | 종합 정보 수집 및 분석 |\n| RISK_ANALYSIS | ["analysis_team"] | 리스크 평가 전문 |\n| UNCLEAR | ["search_team", "analysis_team"] | 포괄적 대응 |\n\n## 복합 질문 처리 예시\n\n### 예시 1: 순차적 처리\n질문: "강남구 시세 확인하고 투자 가치 분석해줘"\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "먼저 search_team이 시세 데이터를 수집하고, 그 결과를 analysis_team이 분석하여 투자 가치 평가"\n}\n```\n\n### 예시 2: 병렬 처리 가능\n질문: "법률 정보와 시세 정보 모두 알려줘"\n```json\n{\n    "selected_agents": ["search_team"],\n    "reasoning": "search_team이 법률과 시세 정보를 병렬로 조회 가능. 두 작업이 독립적이므로 동시 처리"\n}\n```\n\n### 예시 3: 3단계 파이프라인\n질문: "시세 조회하고 분석한 후 계약서 작성해줘"\n```json\n{\n    "selected_agents": ["search_team", "analysis_team", "document_team"],\n    "reasoning": "search_team이 데이터 수집 → analysis_team이 분석 → document_team이 분석 결과 기반 계약서 작성"\n}\n```\n\n## 응답 형식 (JSON)\n\n{\n    "selected_agents": ["선택된 agent/team 목록"],\n    "reasoning": "선택 이유를 구체적으로 설명. 각 Agent의 역할과 처리 순서 포함",\n    "coordination": "single/sequential/parallel/pipeline",\n    "dependencies": {"agent2": ["agent1"]},\n    "estimated_time": 30,\n    "confidence": 0.9\n}\n\n## 선택 가이드라인\n\n1. **최소 Agent 원칙**: 가능한 적은 수의 Agent로 처리\n2. **전문성 우선**: 해당 작업에 가장 전문적인 Agent 선택\n3. **효율성 고려**: 병렬 처리 가능한 경우 명시\n4. **의존성 관리**: 데이터 흐름을 고려한 순서 지정\n5. **폴백 전략**: 불확실한 경우 ["search_team", "analysis_team"] 조합\n\n## 주의사항\n\n- selected_agents는 반드시 배열 형태\n- Agent 이름은 정확히: "search_team", "analysis_team", "document_team"\n- 최소 1개, 최대 3개 선택\n- 순서는 실행 우선순위 (앞에 있을수록 먼저 실행)\n- reasoning은 상세하고 논리적으로 작성\n- coordination 필드로 실행 방식 명시\n- 복합 질문의 경우 의존성 관계 명확히 표시'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 14:41:12,027 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 14:41:12,027 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 14:41:12,027 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 14:41:12,028 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 14:41:12,028 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 14:41:12,028 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 14:41:14,032 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 05:41:13 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'1803'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'1820'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9923'), (b'x-ratelimit-remaining-tokens', b'198430'), (b'x-ratelimit-reset-requests', b'10m57.719s'), (b'x-ratelimit-reset-tokens', b'471ms'), (b'x-request-id', b'req_e7efbca543eb4aaa9e3fe190b3219c44'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989a96ae0e99e9fb-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 14:41:14,033 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 14:41:14,033 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 14:41:14,034 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 14:41:14,034 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 14:41:14,034 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 14:41:14,034 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 05:41:13 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '1803', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '1820', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9923', 'x-ratelimit-remaining-tokens': '198430', 'x-ratelimit-reset-requests': '10m57.719s', 'x-ratelimit-reset-tokens': '471ms', 'x-request-id': 'req_e7efbca543eb4aaa9e3fe190b3219c44', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989a96ae0e99e9fb-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 14:41:14,034 - openai._base_client - DEBUG - request_id: req_e7efbca543eb4aaa9e3fe190b3219c44
2025-10-05 14:41:14,035 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: agent_selection | Model: gpt-4o-mini-2024-07-18 | Tokens: 1828 (prompt: 1712, completion: 116)
2025-10-05 14:41:14,035 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM agent selection reasoning: 사용자가 생애최초 주택 구매 대출 한도를 문의했으므로, 먼저 search_team이 대출 상품 정보를 조회하여 한도와 조건을 확인한 후, analysis_team이 해당 정보를 분석하여 대출 가능 금액을 계산할 수 있도록 합니다.
2025-10-05 14:41:14,035 - app.service_agent.cognitive_agents.planning_agent - INFO - ✅ Primary LLM selected agents: ['search_team', 'analysis_team']
2025-10-05 14:41:14,035 - __main__ - INFO -   의도: 대출상담
2025-10-05 14:41:14,035 - __main__ - INFO -   신뢰도: 0.90
2025-10-05 14:41:14,035 - __main__ - INFO -   추천 Agent: ['search_team', 'analysis_team']
2025-10-05 14:41:14,035 - __main__ - INFO - 
[Step 2] Query Decomposition...
2025-10-05 14:41:14,035 - app.service_agent.cognitive_agents.query_decomposer - INFO - Decomposing query: 생애최초 주택 구매 대출 한도는?...
2025-10-05 14:41:14,035 - app.service_agent.cognitive_agents.query_decomposer - INFO - Query is simple, no decomposition needed
2025-10-05 14:41:14,035 - __main__ - INFO -   복합 질문: False
2025-10-05 14:41:14,035 - __main__ - INFO -   작업 수: 1
2025-10-05 14:41:14,035 - __main__ - INFO -   실행 모드: sequential
2025-10-05 14:41:14,035 - __main__ - INFO - 
[Step 3] Execution Plan 생성...
2025-10-05 14:41:14,035 - app.service_agent.cognitive_agents.planning_agent - INFO - Creating execution plan for intent: 대출상담
2025-10-05 14:41:14,035 - app.service_agent.cognitive_agents.planning_agent - WARNING - AgentRegistry is empty, using default teams
2025-10-05 14:41:14,035 - app.service_agent.cognitive_agents.planning_agent - DEBUG - Suggested agents: ['search_team', 'analysis_team']
2025-10-05 14:41:14,035 - app.service_agent.cognitive_agents.planning_agent - DEBUG - Available agents: ['search_team', 'analysis_team', 'document_team']
2025-10-05 14:41:14,035 - app.service_agent.cognitive_agents.planning_agent - INFO - Selected agents/teams for execution: ['search_team', 'analysis_team']
2025-10-05 14:41:14,035 - __main__ - INFO -   전략: sequential
2025-10-05 14:41:14,035 - __main__ - INFO -   단계 수: 2
2025-10-05 14:41:14,035 - __main__ - INFO - 
✓ 테스트 성공 (소요시간: 4.90초)
2025-10-05 14:41:14,035 - __main__ - INFO - 
================================================================================
2025-10-05 14:41:14,035 - __main__ - INFO - [20] 단일 질문 테스트: S020
2025-10-05 14:41:14,035 - __main__ - INFO - 질문: 전입신고 기간은 얼마나 되나요?
2025-10-05 14:41:14,035 - __main__ - INFO - ================================================================================
2025-10-05 14:41:14,035 - __main__ - INFO - 
[Step 1] Intent 분석...
2025-10-05 14:41:14,035 - app.service_agent.cognitive_agents.planning_agent - INFO - Analyzing intent for query: 전입신고 기간은 얼마나 되나요?...
2025-10-05 14:41:14,036 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-9da329e6-69c7-4fe3-9fd8-8f657884778c', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 의도 분석 전문가입니다.\n사용자의 질문을 정확히 이해하고, 어떤 종류의 도움이 필요한지 분류해야 합니다.\n\n## 중요: 복합 질문 처리\n복합적인 질문(여러 의도가 섞인 질문)의 경우, 가장 핵심적인 의도를 파악하되,\nsub_intents 필드에 부가적인 의도들도 함께 기록해주세요.\n\n## 분류 카테고리 설명:\n\n1. **LEGAL_CONSULT (법률상담)**\n   - 설명: 부동산 관련 법률, 권리, 의무에 대한 질문\n   - 예시:\n     * 단순: "전세금 5% 인상이 가능한가요?", "임대차계약 갱신 거부할 수 있나요?"\n     * 복합: "전세금 인상 가능한지 확인하고 법적 근거도 알려주세요"\n   - 키워드: 법, 전세, 임대, 보증금, 계약, 권리, 의무, 갱신, 임차인, 임대인, 법률, 규정, 조항\n   - 필요한 처리: 법률 데이터베이스 검색, 관련 법조항 찾기\n\n2. **MARKET_INQUIRY (시세조회)**\n   - 설명: 부동산 시장 가격, 시세, 거래 동향에 대한 질문\n   - 예시:\n     * 단순: "강남구 아파트 전세 시세 알려주세요", "서초동 매매가 얼마나 올랐나요?"\n     * 복합: "강남구 시세 확인하고 대출 가능 금액도 계산해줘"\n   - 키워드: 시세, 가격, 매매가, 전세가, 월세, 시장, 동향, 평균, 지역명, 상승률, 하락률\n   - 필요한 처리: 부동산 시세 데이터 조회, 지역별 가격 분석\n\n3. **LOAN_CONSULT (대출상담)**\n   - 설명: 주택담보대출, 전세자금대출 등 금융 관련 질문\n   - 예시:\n     * 단순: "전세자금대출 한도가 얼마인가요?", "LTV가 뭔가요?"\n     * 복합: "대출 한도 확인하고 금리 비교도 해주세요"\n   - 키워드: 대출, 금리, 한도, 조건, 상환, LTV, DTI, DSR, 담보, 금융, 은행\n   - 필요한 처리: 대출 상품 조회, 금리 정보 검색, 한도 계산\n\n4. **CONTRACT_CREATION (계약서작성)**\n   - 설명: 새로운 계약서나 문서를 작성해달라는 요청\n   - 예시:\n     * 단순: "임대차계약서 작성해주세요", "전세계약서 초안 만들어주세요"\n     * 복합: "계약서 작성하고 주의사항도 검토해주세요"\n   - 키워드: 작성, 만들, 생성, 초안, 계약서, 문서, 양식\n   - 필요한 처리: 문서 생성 에이전트 호출, 템플릿 기반 작성\n\n5. **CONTRACT_REVIEW (계약서검토)**\n   - 설명: 기존 계약서나 문서를 검토해달라는 요청\n   - 예시:\n     * 단순: "이 계약서 검토해주세요", "특약사항 문제없나요?"\n     * 복합: "계약서 검토하고 수정사항도 제안해주세요"\n   - 키워드: 검토, 확인, 점검, 리뷰, 분석해, 살펴봐, 체크\n   - 필요한 처리: 문서 분석, 위험 요소 식별, 개선사항 제안\n\n6. **COMPREHENSIVE (종합분석)**\n   - 설명: 여러 측면을 종합적으로 분석해달라는 요청\n   - 예시:\n     * 단순: "이 물건 전체적으로 분석해주세요"\n     * 복합: "시세, 법률, 대출 모두 검토해서 종합 의견 주세요"\n   - 키워드: 종합, 전체, 모든, 전반적, 종합적, 평가, 분석\n   - 필요한 처리: 다중 데이터 소스 통합 분석\n\n7. **RISK_ANALYSIS (리스크분석)**\n   - 설명: 위험 요소나 주의사항에 대한 질문\n   - 예시:\n     * 단순: "이 계약 위험한가요?", "주의할 점 알려주세요"\n     * 복합: "리스크 분석하고 대안도 제시해주세요"\n   - 키워드: 위험, 리스크, 주의, 문제점, 조심, 걱정, 우려\n   - 필요한 처리: 위험 요소 분석, 주의사항 추출\n\n8. **UNCLEAR (불분명)**\n   - 설명: 의도를 명확히 파악하기 어려운 질문\n   - 예시: "이거 좀 봐주세요", "어떻게 해야 할까요?", "도와주세요"\n   - 처리: 추가 질문으로 의도 명확화 필요\n\n9. **IRRELEVANT (무관)**\n   - 설명: 부동산과 전혀 관련 없는 질문\n   - 예시: "날씨 어때?", "저녁 뭐 먹지?", "주식 추천해줘"\n   - 처리: 부동산 관련 질문을 유도\n\n## 복합 질문 예시와 분석:\n\n### 예시 1: "강남구 아파트 시세 알려주고 전세자금대출 가능한지도 확인해줘"\n- 주 의도: MARKET_INQUIRY (시세 조회가 먼저 필요)\n- 부가 의도: LOAN_CONSULT (대출 확인)\n- 분해: ["강남구 아파트 시세 조회", "전세자금대출 가능 여부 확인"]\n\n### 예시 2: "이 계약서 검토해서 위험한 부분 있는지 알려주고 수정 제안도 해줘"\n- 주 의도: CONTRACT_REVIEW (계약서 검토)\n- 부가 의도: RISK_ANALYSIS (위험 분석)\n- 분해: ["계약서 전체 검토", "위험 요소 식별", "수정사항 제안"]\n\n### 예시 3: "서초동 전세가 확인하고 법적으로 문제없는지도 봐줘"\n- 주 의도: MARKET_INQUIRY (시세 확인)\n- 부가 의도: LEGAL_CONSULT (법적 검토)\n- 분해: ["서초동 전세가 조회", "법적 이슈 검토"]\n\n## 응답 형식 (JSON 형식으로 응답):\n\n{\n    "intent": "LEGAL_CONSULT",\n    "confidence": 0.9,\n    "keywords": ["전세금", "인상", "제한"],\n    "sub_intents": [],\n    "is_compound": false,\n    "decomposed_tasks": [],\n    "entities": {\n        "location": "강남구",\n        "price": "5억",\n        "contract_type": "전세",\n        "date": "2024년",\n        "area": "84㎡",\n        "action_verbs": ["확인", "검토"]\n    },\n    "reasoning": "전세금 인상에 대한 법률 질문이므로 LEGAL_CONSULT로 분류"\n}\n\n응답 규칙:\n- intent: 위 9개 카테고리 중 하나 (대문자_언더스코어 형식)\n- confidence: 0.0~1.0 (0.8 이상이면 매우 확실, 0.5 미만이면 불확실)\n- keywords: 추출된 주요 키워드 목록\n- sub_intents: 복합 질문일 경우 부가적인 의도들\n- is_compound: 복합 질문 여부 (true/false)\n- decomposed_tasks: 복합 질문을 분해한 개별 작업들\n- entities: 추출된 엔티티 정보\n- reasoning: 분류한 이유와 근거 (상세하게)\n\n## 판단 가이드:\n- 여러 의도가 섞여있다면, 가장 주된 의도를 intent에, 나머지를 sub_intents에 기록\n- "그리고", "또한", "함께", "같이" 등의 연결어가 있으면 복합 질문일 가능성 높음\n- 법률 관련 키워드가 있으면 LEGAL_CONSULT 우선\n- 가격/시세 언급이 명확하면 MARKET_INQUIRY\n- 계약서라는 단어와 함께 "작성/만들기"가 있으면 CONTRACT_CREATION\n- 계약서라는 단어와 함께 "검토/확인"이 있으면 CONTRACT_REVIEW\n- 불확실하면 confidence를 낮게 설정하고 UNCLEAR 선택\n- 복합 질문은 is_compound를 true로 설정하고 개별 작업으로 분해\n\n분석할 질문: 전입신고 기간은 얼마나 되나요?'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 14:41:14,036 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 14:41:14,037 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 14:41:14,037 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 14:41:14,037 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 14:41:14,037 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 14:41:14,038 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 14:41:15,906 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 05:41:15 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'1621'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'1639'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9923'), (b'x-ratelimit-remaining-tokens', b'198317'), (b'x-ratelimit-reset-requests', b'11m4.344s'), (b'x-ratelimit-reset-tokens', b'504ms'), (b'x-request-id', b'req_6e5dfebab8004a938fec595a0228d409'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989a96ba9864e9fb-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 14:41:15,906 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 14:41:15,906 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 14:41:15,906 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 14:41:15,906 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 14:41:15,906 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 14:41:15,906 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 05:41:15 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '1621', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '1639', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9923', 'x-ratelimit-remaining-tokens': '198317', 'x-ratelimit-reset-requests': '11m4.344s', 'x-ratelimit-reset-tokens': '504ms', 'x-request-id': 'req_6e5dfebab8004a938fec595a0228d409', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989a96ba9864e9fb-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 14:41:15,908 - openai._base_client - DEBUG - request_id: req_6e5dfebab8004a938fec595a0228d409
2025-10-05 14:41:15,908 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: intent_analysis | Model: gpt-4o-mini-2024-07-18 | Tokens: 2013 (prompt: 1920, completion: 93)
2025-10-05 14:41:15,908 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM Intent Analysis Result: {'intent': 'UNCLEAR', 'confidence': 0.4, 'keywords': ['전입신고', '기간'], 'sub_intents': [], 'is_compound': False, 'decomposed_tasks': [], 'entities': {}, 'reasoning': '전입신고 기간에 대한 질문이지만, 부동산 관련 정보인지 명확하지 않아 UNCLEAR로 분류'}
2025-10-05 14:41:15,908 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-8eb71a58-3de8-4464-8205-e70b6a034b1a', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 Agent 선택 전문가입니다.\n사용자의 요청에 가장 적합한 Agent/Team을 선택하는 것이 목표입니다.\n\n## 현재 상황\n\n**사용자 질문:** 전입신고 기간은 얼마나 되나요?\n**분석된 의도:** unclear\n**추출된 키워드:** [\'전입신고\', \'기간\']\n\n## 사용 가능한 Agent/Team 정보\n\n{\'search_team\': {\'name\': \'search_team\', \'capabilities\': \'법률 검색, 부동산 시세 조회, 대출 상품 검색\', \'tools\': [\'legal_search\', \'market_data\', \'loan_data\'], \'use_cases\': [\'법률 상담\', \'시세 조회\', \'대출 정보\']}, \'analysis_team\': {\'name\': \'analysis_team\', \'capabilities\': \'데이터 분석, 리스크 평가, 인사이트 생성, 추천\', \'tools\': [\'data_analyzer\', \'risk_evaluator\'], \'use_cases\': [\'시장 분석\', \'리스크 평가\', \'투자 분석\']}, \'document_team\': {\'name\': \'document_team\', \'capabilities\': \'계약서 작성, 문서 생성, 문서 검토\', \'tools\': [\'document_generator\', \'contract_reviewer\'], \'use_cases\': [\'계약서 작성\', \'문서 검토\']}}\n\n## Agent 역할 및 상세 가이드\n\n### 1. search_team (검색 팀)\n- **주요 기능**: 정보 검색 및 데이터 수집\n- **전문 분야**:\n  * 법률 정보 검색 (전세법, 임대차보호법, 부동산 관련 법규)\n  * 부동산 시세 조회 (매매가, 전세가, 월세, 실거래가)\n  * 대출 상품 정보 검색 (금리, 한도, 조건)\n  * 지역 정보 및 인프라 조회\n- **도구**: legal_search, market_data, loan_data\n- **적합한 작업**: 정보 조회, 데이터 수집, 법률 확인, 시세 파악\n- **예시**:\n  * "전세금 5% 인상 가능한가요?"\n  * "강남구 아파트 전세 시세"\n  * "전세자금대출 한도 얼마?"\n\n### 2. analysis_team (분석 팀)\n- **주요 기능**: 데이터 분석 및 평가\n- **전문 분야**:\n  * 시장 동향 분석 (상승률, 하락률, 추세)\n  * 리스크 평가 (계약, 투자 위험도)\n  * 투자 수익률 계산 (ROI, 월세 수익률)\n  * 대출 한도 및 조건 분석 (LTV, DTI, DSR)\n  * 비교 분석 (지역별, 상품별)\n- **도구**: data_analyzer, risk_evaluator, calculator\n- **적합한 작업**: 데이터 분석, 리스크 평가, 계산, 비교, 예측\n- **의존성**: 보통 search_team의 데이터가 필요\n- **예시**:\n  * "이 지역 투자 가치 분석해줘"\n  * "계약 리스크 평가해줘"\n  * "대출 가능 금액 계산해줘"\n\n### 3. document_team (문서 팀)\n- **주요 기능**: 문서 생성 및 관리\n- **전문 분야**:\n  * 계약서 작성 (임대차, 매매, 전세)\n  * 문서 템플릿 관리\n  * 특약사항 생성\n  * 계약서 수정안 작성\n  * 법률 문서 검토\n- **도구**: document_generator, contract_template, contract_reviewer\n- **적합한 작업**: 문서 작성, 계약서 생성, 문서 수정, 검토\n- **예시**:\n  * "임대차계약서 작성해줘"\n  * "특약사항 추가해줘"\n  * "계약서 수정안 만들어줘"\n\n## Agent 선택 전략\n\n### 1단계: 작업 유형 식별\n```\n정보 필요 → search_team\n분석/계산 필요 → analysis_team\n문서 작성 필요 → document_team\n```\n\n### 2단계: 의존성 분석\n```\n독립적 작업 → 단일 팀\n순차적 의존 → 여러 팀 (순서 중요)\n병렬 가능 → 여러 팀 (순서 무관)\n```\n\n### 3단계: 최적화\n```\n중복 제거 → 가장 적합한 팀만 선택\n효율성 → 병렬 처리 가능한 경우 표시\n```\n\n## 의도별 Agent 매핑 가이드\n\n| 의도 (Intent) | 추천 Agent 조합 | 이유 |\n|--------------|-----------------|------|\n| LEGAL_CONSULT | ["search_team"] | 법률 정보 검색 전문 |\n| MARKET_INQUIRY | ["search_team"] | 시세 데이터 조회 |\n| LOAN_CONSULT | ["search_team", "analysis_team"] | 대출 정보 조회 후 분석 |\n| CONTRACT_CREATION | ["document_team"] | 문서 생성 전문 |\n| CONTRACT_REVIEW | ["search_team", "analysis_team"] | 법률 검토 및 리스크 분석 |\n| COMPREHENSIVE | ["search_team", "analysis_team"] | 종합 정보 수집 및 분석 |\n| RISK_ANALYSIS | ["analysis_team"] | 리스크 평가 전문 |\n| UNCLEAR | ["search_team", "analysis_team"] | 포괄적 대응 |\n\n## 복합 질문 처리 예시\n\n### 예시 1: 순차적 처리\n질문: "강남구 시세 확인하고 투자 가치 분석해줘"\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "먼저 search_team이 시세 데이터를 수집하고, 그 결과를 analysis_team이 분석하여 투자 가치 평가"\n}\n```\n\n### 예시 2: 병렬 처리 가능\n질문: "법률 정보와 시세 정보 모두 알려줘"\n```json\n{\n    "selected_agents": ["search_team"],\n    "reasoning": "search_team이 법률과 시세 정보를 병렬로 조회 가능. 두 작업이 독립적이므로 동시 처리"\n}\n```\n\n### 예시 3: 3단계 파이프라인\n질문: "시세 조회하고 분석한 후 계약서 작성해줘"\n```json\n{\n    "selected_agents": ["search_team", "analysis_team", "document_team"],\n    "reasoning": "search_team이 데이터 수집 → analysis_team이 분석 → document_team이 분석 결과 기반 계약서 작성"\n}\n```\n\n## 응답 형식 (JSON)\n\n{\n    "selected_agents": ["선택된 agent/team 목록"],\n    "reasoning": "선택 이유를 구체적으로 설명. 각 Agent의 역할과 처리 순서 포함",\n    "coordination": "single/sequential/parallel/pipeline",\n    "dependencies": {"agent2": ["agent1"]},\n    "estimated_time": 30,\n    "confidence": 0.9\n}\n\n## 선택 가이드라인\n\n1. **최소 Agent 원칙**: 가능한 적은 수의 Agent로 처리\n2. **전문성 우선**: 해당 작업에 가장 전문적인 Agent 선택\n3. **효율성 고려**: 병렬 처리 가능한 경우 명시\n4. **의존성 관리**: 데이터 흐름을 고려한 순서 지정\n5. **폴백 전략**: 불확실한 경우 ["search_team", "analysis_team"] 조합\n\n## 주의사항\n\n- selected_agents는 반드시 배열 형태\n- Agent 이름은 정확히: "search_team", "analysis_team", "document_team"\n- 최소 1개, 최대 3개 선택\n- 순서는 실행 우선순위 (앞에 있을수록 먼저 실행)\n- reasoning은 상세하고 논리적으로 작성\n- coordination 필드로 실행 방식 명시\n- 복합 질문의 경우 의존성 관계 명확히 표시'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 14:41:15,908 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 14:41:15,908 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 14:41:15,908 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 14:41:15,908 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 14:41:15,908 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 14:41:15,908 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 14:41:18,296 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 05:41:18 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'2178'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'2195'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9922'), (b'x-ratelimit-remaining-tokens', b'198439'), (b'x-ratelimit-reset-requests', b'11m11.109s'), (b'x-ratelimit-reset-tokens', b'468ms'), (b'x-request-id', b'req_f9b7010c885845a0a73f9af6edc9e708'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989a96c64a7ce9fb-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 14:41:18,296 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 14:41:18,297 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 14:41:18,301 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 14:41:18,301 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 14:41:18,301 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 14:41:18,301 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 05:41:18 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '2178', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '2195', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9922', 'x-ratelimit-remaining-tokens': '198439', 'x-ratelimit-reset-requests': '11m11.109s', 'x-ratelimit-reset-tokens': '468ms', 'x-request-id': 'req_f9b7010c885845a0a73f9af6edc9e708', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989a96c64a7ce9fb-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 14:41:18,301 - openai._base_client - DEBUG - request_id: req_f9b7010c885845a0a73f9af6edc9e708
2025-10-05 14:41:18,301 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: agent_selection | Model: gpt-4o-mini-2024-07-18 | Tokens: 1799 (prompt: 1693, completion: 106)
2025-10-05 14:41:18,301 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM agent selection reasoning: 전입신고 기간에 대한 정보는 법률적인 내용이 포함되어 있으므로 search_team이 법률 정보를 검색하고, 그 결과를 analysis_team이 분석하여 추가적인 인사이트를 제공할 수 있도록 합니다.
2025-10-05 14:41:18,301 - app.service_agent.cognitive_agents.planning_agent - INFO - ✅ Primary LLM selected agents: ['search_team', 'analysis_team']
2025-10-05 14:41:18,301 - __main__ - INFO -   의도: unclear
2025-10-05 14:41:18,301 - __main__ - INFO -   신뢰도: 0.40
2025-10-05 14:41:18,301 - __main__ - INFO -   추천 Agent: ['search_team', 'analysis_team']
2025-10-05 14:41:18,301 - __main__ - INFO - 
[Step 2] Query Decomposition...
2025-10-05 14:41:18,301 - app.service_agent.cognitive_agents.query_decomposer - INFO - Decomposing query: 전입신고 기간은 얼마나 되나요?...
2025-10-05 14:41:18,301 - app.service_agent.cognitive_agents.query_decomposer - INFO - Query is simple, no decomposition needed
2025-10-05 14:41:18,301 - __main__ - INFO -   복합 질문: False
2025-10-05 14:41:18,302 - __main__ - INFO -   작업 수: 1
2025-10-05 14:41:18,302 - __main__ - INFO -   실행 모드: sequential
2025-10-05 14:41:18,302 - __main__ - INFO - 
[Step 3] Execution Plan 생성...
2025-10-05 14:41:18,302 - app.service_agent.cognitive_agents.planning_agent - INFO - Creating execution plan for intent: unclear
2025-10-05 14:41:18,302 - app.service_agent.cognitive_agents.planning_agent - WARNING - AgentRegistry is empty, using default teams
2025-10-05 14:41:18,302 - app.service_agent.cognitive_agents.planning_agent - DEBUG - Suggested agents: ['search_team', 'analysis_team']
2025-10-05 14:41:18,302 - app.service_agent.cognitive_agents.planning_agent - DEBUG - Available agents: ['search_team', 'analysis_team', 'document_team']
2025-10-05 14:41:18,302 - app.service_agent.cognitive_agents.planning_agent - INFO - Selected agents/teams for execution: ['search_team', 'analysis_team']
2025-10-05 14:41:18,302 - __main__ - INFO -   전략: sequential
2025-10-05 14:41:18,302 - __main__ - INFO -   단계 수: 2
2025-10-05 14:41:18,302 - __main__ - INFO - 
✓ 테스트 성공 (소요시간: 4.27초)
2025-10-05 14:41:18,304 - __main__ - INFO - 
결과 저장: C:\kdy\Projects\holmesnyangz\beta_v001\backend\app\service_agent\reports\phase1_test_results.json
2025-10-05 14:41:18,304 - __main__ - INFO - 

================================================================================
2025-10-05 14:41:18,304 - __main__ - INFO - PART 2: 복합 질문 테스트 (20개)
2025-10-05 14:41:18,304 - __main__ - INFO - ================================================================================
2025-10-05 14:41:18,304 - __main__ - INFO - 
================================================================================
2025-10-05 14:41:18,304 - __main__ - INFO - [21] 복합 질문 테스트: D001
2025-10-05 14:41:18,304 - __main__ - INFO - 질문: 강남구 아파트 시세 확인하고 대출 가능 금액 계산해줘
2025-10-05 14:41:18,304 - __main__ - INFO - ================================================================================
2025-10-05 14:41:18,304 - __main__ - INFO - 
[Step 1] Intent 분석...
2025-10-05 14:41:18,304 - app.service_agent.cognitive_agents.planning_agent - INFO - Analyzing intent for query: 강남구 아파트 시세 확인하고 대출 가능 금액 계산해줘...
2025-10-05 14:41:18,305 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-c2a06edd-bed2-4d71-aafa-84035eb5bf8a', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 의도 분석 전문가입니다.\n사용자의 질문을 정확히 이해하고, 어떤 종류의 도움이 필요한지 분류해야 합니다.\n\n## 중요: 복합 질문 처리\n복합적인 질문(여러 의도가 섞인 질문)의 경우, 가장 핵심적인 의도를 파악하되,\nsub_intents 필드에 부가적인 의도들도 함께 기록해주세요.\n\n## 분류 카테고리 설명:\n\n1. **LEGAL_CONSULT (법률상담)**\n   - 설명: 부동산 관련 법률, 권리, 의무에 대한 질문\n   - 예시:\n     * 단순: "전세금 5% 인상이 가능한가요?", "임대차계약 갱신 거부할 수 있나요?"\n     * 복합: "전세금 인상 가능한지 확인하고 법적 근거도 알려주세요"\n   - 키워드: 법, 전세, 임대, 보증금, 계약, 권리, 의무, 갱신, 임차인, 임대인, 법률, 규정, 조항\n   - 필요한 처리: 법률 데이터베이스 검색, 관련 법조항 찾기\n\n2. **MARKET_INQUIRY (시세조회)**\n   - 설명: 부동산 시장 가격, 시세, 거래 동향에 대한 질문\n   - 예시:\n     * 단순: "강남구 아파트 전세 시세 알려주세요", "서초동 매매가 얼마나 올랐나요?"\n     * 복합: "강남구 시세 확인하고 대출 가능 금액도 계산해줘"\n   - 키워드: 시세, 가격, 매매가, 전세가, 월세, 시장, 동향, 평균, 지역명, 상승률, 하락률\n   - 필요한 처리: 부동산 시세 데이터 조회, 지역별 가격 분석\n\n3. **LOAN_CONSULT (대출상담)**\n   - 설명: 주택담보대출, 전세자금대출 등 금융 관련 질문\n   - 예시:\n     * 단순: "전세자금대출 한도가 얼마인가요?", "LTV가 뭔가요?"\n     * 복합: "대출 한도 확인하고 금리 비교도 해주세요"\n   - 키워드: 대출, 금리, 한도, 조건, 상환, LTV, DTI, DSR, 담보, 금융, 은행\n   - 필요한 처리: 대출 상품 조회, 금리 정보 검색, 한도 계산\n\n4. **CONTRACT_CREATION (계약서작성)**\n   - 설명: 새로운 계약서나 문서를 작성해달라는 요청\n   - 예시:\n     * 단순: "임대차계약서 작성해주세요", "전세계약서 초안 만들어주세요"\n     * 복합: "계약서 작성하고 주의사항도 검토해주세요"\n   - 키워드: 작성, 만들, 생성, 초안, 계약서, 문서, 양식\n   - 필요한 처리: 문서 생성 에이전트 호출, 템플릿 기반 작성\n\n5. **CONTRACT_REVIEW (계약서검토)**\n   - 설명: 기존 계약서나 문서를 검토해달라는 요청\n   - 예시:\n     * 단순: "이 계약서 검토해주세요", "특약사항 문제없나요?"\n     * 복합: "계약서 검토하고 수정사항도 제안해주세요"\n   - 키워드: 검토, 확인, 점검, 리뷰, 분석해, 살펴봐, 체크\n   - 필요한 처리: 문서 분석, 위험 요소 식별, 개선사항 제안\n\n6. **COMPREHENSIVE (종합분석)**\n   - 설명: 여러 측면을 종합적으로 분석해달라는 요청\n   - 예시:\n     * 단순: "이 물건 전체적으로 분석해주세요"\n     * 복합: "시세, 법률, 대출 모두 검토해서 종합 의견 주세요"\n   - 키워드: 종합, 전체, 모든, 전반적, 종합적, 평가, 분석\n   - 필요한 처리: 다중 데이터 소스 통합 분석\n\n7. **RISK_ANALYSIS (리스크분석)**\n   - 설명: 위험 요소나 주의사항에 대한 질문\n   - 예시:\n     * 단순: "이 계약 위험한가요?", "주의할 점 알려주세요"\n     * 복합: "리스크 분석하고 대안도 제시해주세요"\n   - 키워드: 위험, 리스크, 주의, 문제점, 조심, 걱정, 우려\n   - 필요한 처리: 위험 요소 분석, 주의사항 추출\n\n8. **UNCLEAR (불분명)**\n   - 설명: 의도를 명확히 파악하기 어려운 질문\n   - 예시: "이거 좀 봐주세요", "어떻게 해야 할까요?", "도와주세요"\n   - 처리: 추가 질문으로 의도 명확화 필요\n\n9. **IRRELEVANT (무관)**\n   - 설명: 부동산과 전혀 관련 없는 질문\n   - 예시: "날씨 어때?", "저녁 뭐 먹지?", "주식 추천해줘"\n   - 처리: 부동산 관련 질문을 유도\n\n## 복합 질문 예시와 분석:\n\n### 예시 1: "강남구 아파트 시세 알려주고 전세자금대출 가능한지도 확인해줘"\n- 주 의도: MARKET_INQUIRY (시세 조회가 먼저 필요)\n- 부가 의도: LOAN_CONSULT (대출 확인)\n- 분해: ["강남구 아파트 시세 조회", "전세자금대출 가능 여부 확인"]\n\n### 예시 2: "이 계약서 검토해서 위험한 부분 있는지 알려주고 수정 제안도 해줘"\n- 주 의도: CONTRACT_REVIEW (계약서 검토)\n- 부가 의도: RISK_ANALYSIS (위험 분석)\n- 분해: ["계약서 전체 검토", "위험 요소 식별", "수정사항 제안"]\n\n### 예시 3: "서초동 전세가 확인하고 법적으로 문제없는지도 봐줘"\n- 주 의도: MARKET_INQUIRY (시세 확인)\n- 부가 의도: LEGAL_CONSULT (법적 검토)\n- 분해: ["서초동 전세가 조회", "법적 이슈 검토"]\n\n## 응답 형식 (JSON 형식으로 응답):\n\n{\n    "intent": "LEGAL_CONSULT",\n    "confidence": 0.9,\n    "keywords": ["전세금", "인상", "제한"],\n    "sub_intents": [],\n    "is_compound": false,\n    "decomposed_tasks": [],\n    "entities": {\n        "location": "강남구",\n        "price": "5억",\n        "contract_type": "전세",\n        "date": "2024년",\n        "area": "84㎡",\n        "action_verbs": ["확인", "검토"]\n    },\n    "reasoning": "전세금 인상에 대한 법률 질문이므로 LEGAL_CONSULT로 분류"\n}\n\n응답 규칙:\n- intent: 위 9개 카테고리 중 하나 (대문자_언더스코어 형식)\n- confidence: 0.0~1.0 (0.8 이상이면 매우 확실, 0.5 미만이면 불확실)\n- keywords: 추출된 주요 키워드 목록\n- sub_intents: 복합 질문일 경우 부가적인 의도들\n- is_compound: 복합 질문 여부 (true/false)\n- decomposed_tasks: 복합 질문을 분해한 개별 작업들\n- entities: 추출된 엔티티 정보\n- reasoning: 분류한 이유와 근거 (상세하게)\n\n## 판단 가이드:\n- 여러 의도가 섞여있다면, 가장 주된 의도를 intent에, 나머지를 sub_intents에 기록\n- "그리고", "또한", "함께", "같이" 등의 연결어가 있으면 복합 질문일 가능성 높음\n- 법률 관련 키워드가 있으면 LEGAL_CONSULT 우선\n- 가격/시세 언급이 명확하면 MARKET_INQUIRY\n- 계약서라는 단어와 함께 "작성/만들기"가 있으면 CONTRACT_CREATION\n- 계약서라는 단어와 함께 "검토/확인"이 있으면 CONTRACT_REVIEW\n- 불확실하면 confidence를 낮게 설정하고 UNCLEAR 선택\n- 복합 질문은 is_compound를 true로 설정하고 개별 작업으로 분해\n\n분석할 질문: 강남구 아파트 시세 확인하고 대출 가능 금액 계산해줘'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 14:41:18,305 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 14:41:18,306 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 14:41:18,306 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 14:41:18,306 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 14:41:18,306 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 14:41:18,306 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 14:41:23,688 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 05:41:23 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'5127'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'5149'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9921'), (b'x-ratelimit-remaining-tokens', b'198309'), (b'x-ratelimit-reset-requests', b'11m17.357s'), (b'x-ratelimit-reset-tokens', b'507ms'), (b'x-request-id', b'req_4be1458b2c9742e0a3bac87fe45f6ed3'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989a96d54cf5e9fb-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 14:41:23,689 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 14:41:23,689 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 14:41:23,689 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 14:41:23,689 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 14:41:23,689 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 14:41:23,689 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 05:41:23 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '5127', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '5149', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9921', 'x-ratelimit-remaining-tokens': '198309', 'x-ratelimit-reset-requests': '11m17.357s', 'x-ratelimit-reset-tokens': '507ms', 'x-request-id': 'req_4be1458b2c9742e0a3bac87fe45f6ed3', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989a96d54cf5e9fb-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 14:41:23,689 - openai._base_client - DEBUG - request_id: req_4be1458b2c9742e0a3bac87fe45f6ed3
2025-10-05 14:41:23,691 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: intent_analysis | Model: gpt-4o-mini-2024-07-18 | Tokens: 2104 (prompt: 1927, completion: 177)
2025-10-05 14:41:23,691 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM Intent Analysis Result: {'intent': 'MARKET_INQUIRY', 'confidence': 0.9, 'keywords': ['강남구', '아파트', '시세', '대출', '가능 금액'], 'sub_intents': ['LOAN_CONSULT'], 'is_compound': True, 'decomposed_tasks': ['강남구 아파트 시세 조회', '대출 가능 금액 계산'], 'entities': {'location': '강남구', 'property_type': '아파트', 'action_verbs': ['확인', '계산']}, 'reasoning': '강남구 아파트 시세 확인이 주된 의도이며, 대출 가능 금액 계산이 부가적인 의도로 포함되어 있어 MARKET_INQUIRY로 분류'}
2025-10-05 14:41:23,691 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-6841151e-6f18-4bd6-97eb-77302e3fdbe4', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 Agent 선택 전문가입니다.\n사용자의 요청에 가장 적합한 Agent/Team을 선택하는 것이 목표입니다.\n\n## 현재 상황\n\n**사용자 질문:** 강남구 아파트 시세 확인하고 대출 가능 금액 계산해줘\n**분석된 의도:** 시세조회\n**추출된 키워드:** [\'강남구\', \'아파트\', \'시세\', \'대출\', \'가능 금액\']\n\n## 사용 가능한 Agent/Team 정보\n\n{\'search_team\': {\'name\': \'search_team\', \'capabilities\': \'법률 검색, 부동산 시세 조회, 대출 상품 검색\', \'tools\': [\'legal_search\', \'market_data\', \'loan_data\'], \'use_cases\': [\'법률 상담\', \'시세 조회\', \'대출 정보\']}, \'analysis_team\': {\'name\': \'analysis_team\', \'capabilities\': \'데이터 분석, 리스크 평가, 인사이트 생성, 추천\', \'tools\': [\'data_analyzer\', \'risk_evaluator\'], \'use_cases\': [\'시장 분석\', \'리스크 평가\', \'투자 분석\']}, \'document_team\': {\'name\': \'document_team\', \'capabilities\': \'계약서 작성, 문서 생성, 문서 검토\', \'tools\': [\'document_generator\', \'contract_reviewer\'], \'use_cases\': [\'계약서 작성\', \'문서 검토\']}}\n\n## Agent 역할 및 상세 가이드\n\n### 1. search_team (검색 팀)\n- **주요 기능**: 정보 검색 및 데이터 수집\n- **전문 분야**:\n  * 법률 정보 검색 (전세법, 임대차보호법, 부동산 관련 법규)\n  * 부동산 시세 조회 (매매가, 전세가, 월세, 실거래가)\n  * 대출 상품 정보 검색 (금리, 한도, 조건)\n  * 지역 정보 및 인프라 조회\n- **도구**: legal_search, market_data, loan_data\n- **적합한 작업**: 정보 조회, 데이터 수집, 법률 확인, 시세 파악\n- **예시**:\n  * "전세금 5% 인상 가능한가요?"\n  * "강남구 아파트 전세 시세"\n  * "전세자금대출 한도 얼마?"\n\n### 2. analysis_team (분석 팀)\n- **주요 기능**: 데이터 분석 및 평가\n- **전문 분야**:\n  * 시장 동향 분석 (상승률, 하락률, 추세)\n  * 리스크 평가 (계약, 투자 위험도)\n  * 투자 수익률 계산 (ROI, 월세 수익률)\n  * 대출 한도 및 조건 분석 (LTV, DTI, DSR)\n  * 비교 분석 (지역별, 상품별)\n- **도구**: data_analyzer, risk_evaluator, calculator\n- **적합한 작업**: 데이터 분석, 리스크 평가, 계산, 비교, 예측\n- **의존성**: 보통 search_team의 데이터가 필요\n- **예시**:\n  * "이 지역 투자 가치 분석해줘"\n  * "계약 리스크 평가해줘"\n  * "대출 가능 금액 계산해줘"\n\n### 3. document_team (문서 팀)\n- **주요 기능**: 문서 생성 및 관리\n- **전문 분야**:\n  * 계약서 작성 (임대차, 매매, 전세)\n  * 문서 템플릿 관리\n  * 특약사항 생성\n  * 계약서 수정안 작성\n  * 법률 문서 검토\n- **도구**: document_generator, contract_template, contract_reviewer\n- **적합한 작업**: 문서 작성, 계약서 생성, 문서 수정, 검토\n- **예시**:\n  * "임대차계약서 작성해줘"\n  * "특약사항 추가해줘"\n  * "계약서 수정안 만들어줘"\n\n## Agent 선택 전략\n\n### 1단계: 작업 유형 식별\n```\n정보 필요 → search_team\n분석/계산 필요 → analysis_team\n문서 작성 필요 → document_team\n```\n\n### 2단계: 의존성 분석\n```\n독립적 작업 → 단일 팀\n순차적 의존 → 여러 팀 (순서 중요)\n병렬 가능 → 여러 팀 (순서 무관)\n```\n\n### 3단계: 최적화\n```\n중복 제거 → 가장 적합한 팀만 선택\n효율성 → 병렬 처리 가능한 경우 표시\n```\n\n## 의도별 Agent 매핑 가이드\n\n| 의도 (Intent) | 추천 Agent 조합 | 이유 |\n|--------------|-----------------|------|\n| LEGAL_CONSULT | ["search_team"] | 법률 정보 검색 전문 |\n| MARKET_INQUIRY | ["search_team"] | 시세 데이터 조회 |\n| LOAN_CONSULT | ["search_team", "analysis_team"] | 대출 정보 조회 후 분석 |\n| CONTRACT_CREATION | ["document_team"] | 문서 생성 전문 |\n| CONTRACT_REVIEW | ["search_team", "analysis_team"] | 법률 검토 및 리스크 분석 |\n| COMPREHENSIVE | ["search_team", "analysis_team"] | 종합 정보 수집 및 분석 |\n| RISK_ANALYSIS | ["analysis_team"] | 리스크 평가 전문 |\n| UNCLEAR | ["search_team", "analysis_team"] | 포괄적 대응 |\n\n## 복합 질문 처리 예시\n\n### 예시 1: 순차적 처리\n질문: "강남구 시세 확인하고 투자 가치 분석해줘"\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "먼저 search_team이 시세 데이터를 수집하고, 그 결과를 analysis_team이 분석하여 투자 가치 평가"\n}\n```\n\n### 예시 2: 병렬 처리 가능\n질문: "법률 정보와 시세 정보 모두 알려줘"\n```json\n{\n    "selected_agents": ["search_team"],\n    "reasoning": "search_team이 법률과 시세 정보를 병렬로 조회 가능. 두 작업이 독립적이므로 동시 처리"\n}\n```\n\n### 예시 3: 3단계 파이프라인\n질문: "시세 조회하고 분석한 후 계약서 작성해줘"\n```json\n{\n    "selected_agents": ["search_team", "analysis_team", "document_team"],\n    "reasoning": "search_team이 데이터 수집 → analysis_team이 분석 → document_team이 분석 결과 기반 계약서 작성"\n}\n```\n\n## 응답 형식 (JSON)\n\n{\n    "selected_agents": ["선택된 agent/team 목록"],\n    "reasoning": "선택 이유를 구체적으로 설명. 각 Agent의 역할과 처리 순서 포함",\n    "coordination": "single/sequential/parallel/pipeline",\n    "dependencies": {"agent2": ["agent1"]},\n    "estimated_time": 30,\n    "confidence": 0.9\n}\n\n## 선택 가이드라인\n\n1. **최소 Agent 원칙**: 가능한 적은 수의 Agent로 처리\n2. **전문성 우선**: 해당 작업에 가장 전문적인 Agent 선택\n3. **효율성 고려**: 병렬 처리 가능한 경우 명시\n4. **의존성 관리**: 데이터 흐름을 고려한 순서 지정\n5. **폴백 전략**: 불확실한 경우 ["search_team", "analysis_team"] 조합\n\n## 주의사항\n\n- selected_agents는 반드시 배열 형태\n- Agent 이름은 정확히: "search_team", "analysis_team", "document_team"\n- 최소 1개, 최대 3개 선택\n- 순서는 실행 우선순위 (앞에 있을수록 먼저 실행)\n- reasoning은 상세하고 논리적으로 작성\n- coordination 필드로 실행 방식 명시\n- 복합 질문의 경우 의존성 관계 명확히 표시'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 14:41:23,692 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 14:41:23,692 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 14:41:23,692 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 14:41:23,692 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 14:41:23,692 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 14:41:23,692 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 14:41:26,863 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 05:41:26 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'2880'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'2913'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9921'), (b'x-ratelimit-remaining-tokens', b'198421'), (b'x-ratelimit-reset-requests', b'11m20.6s'), (b'x-ratelimit-reset-tokens', b'473ms'), (b'x-request-id', b'req_601364ce79ba4211ad0d8dff2f239c70'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989a96f6eb44e9fb-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 14:41:26,863 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 14:41:26,863 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 14:41:26,864 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 14:41:26,864 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 14:41:26,864 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 14:41:26,864 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 05:41:26 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '2880', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '2913', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9921', 'x-ratelimit-remaining-tokens': '198421', 'x-ratelimit-reset-requests': '11m20.6s', 'x-ratelimit-reset-tokens': '473ms', 'x-request-id': 'req_601364ce79ba4211ad0d8dff2f239c70', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989a96f6eb44e9fb-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 14:41:26,864 - openai._base_client - DEBUG - request_id: req_601364ce79ba4211ad0d8dff2f239c70
2025-10-05 14:41:26,864 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: agent_selection | Model: gpt-4o-mini-2024-07-18 | Tokens: 1840 (prompt: 1716, completion: 124)
2025-10-05 14:41:26,864 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM agent selection reasoning: 사용자가 강남구 아파트 시세를 확인하고 대출 가능 금액을 계산하고자 하므로, 먼저 search_team이 강남구 아파트 시세 데이터를 조회한 후, 그 결과를 바탕으로 analysis_team이 대출 가능 금액을 계산하는 순서로 진행해야 합니다.
2025-10-05 14:41:26,864 - app.service_agent.cognitive_agents.planning_agent - INFO - ✅ Primary LLM selected agents: ['search_team', 'analysis_team']
2025-10-05 14:41:26,864 - __main__ - INFO -   의도: 시세조회
2025-10-05 14:41:26,864 - __main__ - INFO -   신뢰도: 0.90
2025-10-05 14:41:26,864 - __main__ - INFO -   추천 Agent: ['search_team', 'analysis_team']
2025-10-05 14:41:26,864 - __main__ - INFO - 
[Step 2] Query Decomposition...
2025-10-05 14:41:26,864 - app.service_agent.cognitive_agents.query_decomposer - INFO - Decomposing query: 강남구 아파트 시세 확인하고 대출 가능 금액 계산해줘...
2025-10-05 14:41:26,865 - app.service_agent.llm_manager.prompt_manager - DEBUG - Loaded prompt template: query_decomposition from C:\kdy\Projects\holmesnyangz\beta_v001\backend\app\service_agent\llm_manager\prompts\cognitive\query_decomposition.txt
2025-10-05 14:41:26,865 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-9764a06d-50cd-4e73-a5b2-3bb8c5fb0044', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 질문 분해 전문가입니다.\n복잡한 사용자 질문을 독립적으로 처리 가능한 작업 단위로 분해하는 것이 목표입니다.\n\n## 중요 원칙:\n1. 각 작업은 하나의 명확한 목표를 가져야 합니다\n2. 작업 간 의존성을 명확히 파악해야 합니다\n3. 병렬 처리 가능한 작업은 구분해야 합니다\n4. 불필요한 분해는 피해야 합니다 (단순 질문은 분해하지 않음)\n\n## 작업 유형 (type):\n- search: 정보 검색 (법률, 시세, 대출 정보 등)\n- analysis: 데이터 분석 (리스크 평가, 시장 분석 등)\n- generation: 문서 생성 (계약서 작성 등)\n- review: 검토/평가 (계약서 검토, 조건 확인 등)\n- calculation: 계산/산출 (대출 한도, 세금 등)\n- comparison: 비교 분석 (여러 옵션 비교)\n\n## 담당 팀 (agent):\n- search_team: 법률, 시세, 대출 정보 검색\n- analysis_team: 데이터 분석, 리스크 평가, 계산\n- document_team: 문서 생성, 계약서 작성\n\n## 학습 예시:\n\n### 예시 1: 복합 질문 (순차적)\n질문: "강남구 아파트 시세 확인하고 대출 가능 금액 계산해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "강남구 아파트 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "대출 가능 금액 계산",\n            "type": "calculation",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "required_data": {"price": "task_0.result.price"},\n            "estimated_time": 15\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "시세 정보가 있어야 대출 금액 계산이 가능하므로 순차 실행"\n}\n```\n\n### 예시 2: 복합 질문 (병렬 가능)\n질문: "이 지역 전세 시세와 매매 시세 모두 알려주고 비교 분석해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "전세 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "매매 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "전세/매매 시세 비교 분석",\n            "type": "comparison",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0", "task_1"],\n            "required_data": {\n                "lease_price": "task_0.result",\n                "sale_price": "task_1.result"\n            },\n            "estimated_time": 25\n        }\n    ],\n    "execution_mode": "mixed",\n    "parallel_groups": [["task_0", "task_1"], ["task_2"]],\n    "reasoning": "시세 조회는 독립적이므로 병렬 처리, 비교는 두 결과 필요"\n}\n```\n\n### 예시 3: 복합 질문 (3단계 이상)\n질문: "이 계약서 검토해서 위험한 부분 찾고 수정안 만들어서 최종 계약서 작성해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "계약서 내용 전체 검토",\n            "type": "review",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 30\n        },\n        {\n            "description": "위험 요소 및 문제점 분석",\n            "type": "analysis",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "estimated_time": 25\n        },\n        {\n            "description": "수정안 제안 생성",\n            "type": "generation",\n            "agent": "document_team",\n            "priority": 3,\n            "depends_on": ["task_1"],\n            "estimated_time": 20\n        },\n        {\n            "description": "최종 계약서 작성",\n            "type": "generation",\n            "agent": "document_team",\n            "priority": 4,\n            "depends_on": ["task_2"],\n            "estimated_time": 30\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "각 단계가 이전 결과에 의존하므로 순차 실행 필요"\n}\n```\n\n### 예시 4: 단순 질문 (분해 불필요)\n질문: "전세금 인상률 상한이 얼마야?"\n분해:\n```json\n{\n    "is_compound": false,\n    "sub_tasks": [\n        {\n            "description": "전세금 인상률 상한 법률 정보 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 15\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "단일 정보 조회 요청으로 분해 불필요"\n}\n```\n\n### 예시 5: 조건부 실행\n질문: "이 물건 시세 확인하고 적정가면 대출 상담도 받고 싶어"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "물건 시세 조회 및 적정성 평가",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 25\n        },\n        {\n            "description": "대출 상담 정보 제공",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "optional": true,\n            "context": {"condition": "if_reasonable_price"},\n            "estimated_time": 20\n        }\n    ],\n    "execution_mode": "conditional",\n    "reasoning": "시세 확인 결과에 따라 대출 상담 진행 여부 결정"\n}\n```\n\n## Chain-of-Thought 프로세스:\n\n1. **질문 분석**: 어떤 정보나 작업을 요구하는가?\n2. **연결어 확인**: "그리고", "또한", "해서", "한 후" 등이 있는가?\n3. **의존성 파악**: 어떤 작업이 다른 작업의 결과를 필요로 하는가?\n4. **병렬성 판단**: 독립적으로 실행 가능한 작업이 있는가?\n5. **최적화**: 불필요한 분해는 없는가?\n\n## 응답 형식 (JSON):\n\n{\n    "is_compound": true/false,\n    "sub_tasks": [\n        {\n            "description": "작업 설명",\n            "type": "작업 유형",\n            "agent": "담당 팀",\n            "priority": 우선순위 (1이 가장 높음),\n            "depends_on": ["선행 작업 ID 리스트"],\n            "required_data": {"필요한 데이터 매핑"},\n            "estimated_time": 예상 소요 시간(초),\n            "optional": true/false,\n            "context": {"추가 컨텍스트"}\n        }\n    ],\n    "execution_mode": "sequential/parallel/mixed/conditional",\n    "parallel_groups": [["병렬 실행 가능한 작업 ID 그룹"]],\n    "confidence": 0.0-1.0,\n    "reasoning": "분해 결정의 이유와 근거"\n}\n\n## 분해 가이드라인:\n\n1. **분해가 필요한 경우**:\n   - 여러 종류의 정보를 요청하는 경우\n   - 순차적 처리가 필요한 경우 (A의 결과로 B 수행)\n   - 서로 다른 팀의 전문성이 필요한 경우\n\n2. **분해가 불필요한 경우**:\n   - 단일 정보 조회\n   - 단순한 질문-답변\n   - 하나의 팀에서 완전히 처리 가능한 경우\n\n3. **병렬 처리 기준**:\n   - 서로 독립적인 정보 조회\n   - 의존성이 없는 분석 작업\n   - 동시에 진행해도 충돌하지 않는 작업\n\n4. **우선순위 설정**:\n   - 의존성이 없는 작업: priority 1\n   - 1차 의존 작업: priority 2\n   - 2차 의존 작업: priority 3\n   - 이런 식으로 증가\n\n현재 의도: 시세조회\n추출된 엔티티: None\n\n분석할 질문: 강남구 아파트 시세 확인하고 대출 가능 금액 계산해줘'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 14:41:26,866 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 14:41:26,866 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 14:41:26,866 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 14:41:26,866 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 14:41:26,866 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 14:41:26,866 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 14:41:30,336 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 05:41:30 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'3254'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'3269'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9920'), (b'x-ratelimit-remaining-tokens', b'197993'), (b'x-ratelimit-reset-requests', b'11m26.065s'), (b'x-ratelimit-reset-tokens', b'602ms'), (b'x-request-id', b'req_b261c70cd8ca472caed73586aef12ca2'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989a970ac85ce9fb-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 14:41:30,336 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 14:41:30,337 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 14:41:30,337 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 14:41:30,337 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 14:41:30,337 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 14:41:30,337 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 05:41:30 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '3254', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '3269', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9920', 'x-ratelimit-remaining-tokens': '197993', 'x-ratelimit-reset-requests': '11m26.065s', 'x-ratelimit-reset-tokens': '602ms', 'x-request-id': 'req_b261c70cd8ca472caed73586aef12ca2', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989a970ac85ce9fb-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 14:41:30,337 - openai._base_client - DEBUG - request_id: req_b261c70cd8ca472caed73586aef12ca2
2025-10-05 14:41:30,337 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: query_decomposition | Model: gpt-4o-mini-2024-07-18 | Tokens: 2186 (prompt: 2008, completion: 178)
2025-10-05 14:41:30,337 - app.service_agent.cognitive_agents.query_decomposer - INFO - Successfully decomposed into 2 tasks
2025-10-05 14:41:30,338 - __main__ - INFO -   복합 질문: True
2025-10-05 14:41:30,338 - __main__ - INFO -   작업 수: 2
2025-10-05 14:41:30,338 - __main__ - INFO -   실행 모드: sequential
2025-10-05 14:41:30,338 - __main__ - INFO -     - task_0: 강남구 아파트 시세 조회 (search_team)
2025-10-05 14:41:30,338 - __main__ - INFO -     - task_1: 대출 가능 금액 계산 (analysis_team)
2025-10-05 14:41:30,338 - __main__ - INFO - 
[Step 3] Comprehensive Plan 생성...
2025-10-05 14:41:30,338 - app.service_agent.cognitive_agents.planning_agent - INFO - Creating comprehensive plan for query: 강남구 아파트 시세 확인하고 대출 가능 금액 계산해줘...
2025-10-05 14:41:30,338 - app.service_agent.cognitive_agents.planning_agent - INFO - Analyzing intent for query: 강남구 아파트 시세 확인하고 대출 가능 금액 계산해줘...
2025-10-05 14:41:30,338 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-f73d2f74-85c9-45ba-8b5d-80c3a6e295df', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 의도 분석 전문가입니다.\n사용자의 질문을 정확히 이해하고, 어떤 종류의 도움이 필요한지 분류해야 합니다.\n\n## 중요: 복합 질문 처리\n복합적인 질문(여러 의도가 섞인 질문)의 경우, 가장 핵심적인 의도를 파악하되,\nsub_intents 필드에 부가적인 의도들도 함께 기록해주세요.\n\n## 분류 카테고리 설명:\n\n1. **LEGAL_CONSULT (법률상담)**\n   - 설명: 부동산 관련 법률, 권리, 의무에 대한 질문\n   - 예시:\n     * 단순: "전세금 5% 인상이 가능한가요?", "임대차계약 갱신 거부할 수 있나요?"\n     * 복합: "전세금 인상 가능한지 확인하고 법적 근거도 알려주세요"\n   - 키워드: 법, 전세, 임대, 보증금, 계약, 권리, 의무, 갱신, 임차인, 임대인, 법률, 규정, 조항\n   - 필요한 처리: 법률 데이터베이스 검색, 관련 법조항 찾기\n\n2. **MARKET_INQUIRY (시세조회)**\n   - 설명: 부동산 시장 가격, 시세, 거래 동향에 대한 질문\n   - 예시:\n     * 단순: "강남구 아파트 전세 시세 알려주세요", "서초동 매매가 얼마나 올랐나요?"\n     * 복합: "강남구 시세 확인하고 대출 가능 금액도 계산해줘"\n   - 키워드: 시세, 가격, 매매가, 전세가, 월세, 시장, 동향, 평균, 지역명, 상승률, 하락률\n   - 필요한 처리: 부동산 시세 데이터 조회, 지역별 가격 분석\n\n3. **LOAN_CONSULT (대출상담)**\n   - 설명: 주택담보대출, 전세자금대출 등 금융 관련 질문\n   - 예시:\n     * 단순: "전세자금대출 한도가 얼마인가요?", "LTV가 뭔가요?"\n     * 복합: "대출 한도 확인하고 금리 비교도 해주세요"\n   - 키워드: 대출, 금리, 한도, 조건, 상환, LTV, DTI, DSR, 담보, 금융, 은행\n   - 필요한 처리: 대출 상품 조회, 금리 정보 검색, 한도 계산\n\n4. **CONTRACT_CREATION (계약서작성)**\n   - 설명: 새로운 계약서나 문서를 작성해달라는 요청\n   - 예시:\n     * 단순: "임대차계약서 작성해주세요", "전세계약서 초안 만들어주세요"\n     * 복합: "계약서 작성하고 주의사항도 검토해주세요"\n   - 키워드: 작성, 만들, 생성, 초안, 계약서, 문서, 양식\n   - 필요한 처리: 문서 생성 에이전트 호출, 템플릿 기반 작성\n\n5. **CONTRACT_REVIEW (계약서검토)**\n   - 설명: 기존 계약서나 문서를 검토해달라는 요청\n   - 예시:\n     * 단순: "이 계약서 검토해주세요", "특약사항 문제없나요?"\n     * 복합: "계약서 검토하고 수정사항도 제안해주세요"\n   - 키워드: 검토, 확인, 점검, 리뷰, 분석해, 살펴봐, 체크\n   - 필요한 처리: 문서 분석, 위험 요소 식별, 개선사항 제안\n\n6. **COMPREHENSIVE (종합분석)**\n   - 설명: 여러 측면을 종합적으로 분석해달라는 요청\n   - 예시:\n     * 단순: "이 물건 전체적으로 분석해주세요"\n     * 복합: "시세, 법률, 대출 모두 검토해서 종합 의견 주세요"\n   - 키워드: 종합, 전체, 모든, 전반적, 종합적, 평가, 분석\n   - 필요한 처리: 다중 데이터 소스 통합 분석\n\n7. **RISK_ANALYSIS (리스크분석)**\n   - 설명: 위험 요소나 주의사항에 대한 질문\n   - 예시:\n     * 단순: "이 계약 위험한가요?", "주의할 점 알려주세요"\n     * 복합: "리스크 분석하고 대안도 제시해주세요"\n   - 키워드: 위험, 리스크, 주의, 문제점, 조심, 걱정, 우려\n   - 필요한 처리: 위험 요소 분석, 주의사항 추출\n\n8. **UNCLEAR (불분명)**\n   - 설명: 의도를 명확히 파악하기 어려운 질문\n   - 예시: "이거 좀 봐주세요", "어떻게 해야 할까요?", "도와주세요"\n   - 처리: 추가 질문으로 의도 명확화 필요\n\n9. **IRRELEVANT (무관)**\n   - 설명: 부동산과 전혀 관련 없는 질문\n   - 예시: "날씨 어때?", "저녁 뭐 먹지?", "주식 추천해줘"\n   - 처리: 부동산 관련 질문을 유도\n\n## 복합 질문 예시와 분석:\n\n### 예시 1: "강남구 아파트 시세 알려주고 전세자금대출 가능한지도 확인해줘"\n- 주 의도: MARKET_INQUIRY (시세 조회가 먼저 필요)\n- 부가 의도: LOAN_CONSULT (대출 확인)\n- 분해: ["강남구 아파트 시세 조회", "전세자금대출 가능 여부 확인"]\n\n### 예시 2: "이 계약서 검토해서 위험한 부분 있는지 알려주고 수정 제안도 해줘"\n- 주 의도: CONTRACT_REVIEW (계약서 검토)\n- 부가 의도: RISK_ANALYSIS (위험 분석)\n- 분해: ["계약서 전체 검토", "위험 요소 식별", "수정사항 제안"]\n\n### 예시 3: "서초동 전세가 확인하고 법적으로 문제없는지도 봐줘"\n- 주 의도: MARKET_INQUIRY (시세 확인)\n- 부가 의도: LEGAL_CONSULT (법적 검토)\n- 분해: ["서초동 전세가 조회", "법적 이슈 검토"]\n\n## 응답 형식 (JSON 형식으로 응답):\n\n{\n    "intent": "LEGAL_CONSULT",\n    "confidence": 0.9,\n    "keywords": ["전세금", "인상", "제한"],\n    "sub_intents": [],\n    "is_compound": false,\n    "decomposed_tasks": [],\n    "entities": {\n        "location": "강남구",\n        "price": "5억",\n        "contract_type": "전세",\n        "date": "2024년",\n        "area": "84㎡",\n        "action_verbs": ["확인", "검토"]\n    },\n    "reasoning": "전세금 인상에 대한 법률 질문이므로 LEGAL_CONSULT로 분류"\n}\n\n응답 규칙:\n- intent: 위 9개 카테고리 중 하나 (대문자_언더스코어 형식)\n- confidence: 0.0~1.0 (0.8 이상이면 매우 확실, 0.5 미만이면 불확실)\n- keywords: 추출된 주요 키워드 목록\n- sub_intents: 복합 질문일 경우 부가적인 의도들\n- is_compound: 복합 질문 여부 (true/false)\n- decomposed_tasks: 복합 질문을 분해한 개별 작업들\n- entities: 추출된 엔티티 정보\n- reasoning: 분류한 이유와 근거 (상세하게)\n\n## 판단 가이드:\n- 여러 의도가 섞여있다면, 가장 주된 의도를 intent에, 나머지를 sub_intents에 기록\n- "그리고", "또한", "함께", "같이" 등의 연결어가 있으면 복합 질문일 가능성 높음\n- 법률 관련 키워드가 있으면 LEGAL_CONSULT 우선\n- 가격/시세 언급이 명확하면 MARKET_INQUIRY\n- 계약서라는 단어와 함께 "작성/만들기"가 있으면 CONTRACT_CREATION\n- 계약서라는 단어와 함께 "검토/확인"이 있으면 CONTRACT_REVIEW\n- 불확실하면 confidence를 낮게 설정하고 UNCLEAR 선택\n- 복합 질문은 is_compound를 true로 설정하고 개별 작업으로 분해\n\n분석할 질문: 강남구 아파트 시세 확인하고 대출 가능 금액 계산해줘'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 14:41:30,339 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 14:41:30,339 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 14:41:30,339 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 14:41:30,339 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 14:41:30,339 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 14:41:30,339 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 14:41:34,070 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 05:41:34 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'3512'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'3537'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9919'), (b'x-ratelimit-remaining-tokens', b'198309'), (b'x-ratelimit-reset-requests', b'11m31.235s'), (b'x-ratelimit-reset-tokens', b'507ms'), (b'x-request-id', b'req_e1c6fc284f554eaf8e418ca3276caaa2'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989a97207c7ce9fb-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 14:41:34,071 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 14:41:34,072 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 14:41:34,076 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 14:41:34,076 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 14:41:34,076 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 14:41:34,076 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 05:41:34 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '3512', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '3537', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9919', 'x-ratelimit-remaining-tokens': '198309', 'x-ratelimit-reset-requests': '11m31.235s', 'x-ratelimit-reset-tokens': '507ms', 'x-request-id': 'req_e1c6fc284f554eaf8e418ca3276caaa2', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989a97207c7ce9fb-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 14:41:34,076 - openai._base_client - DEBUG - request_id: req_e1c6fc284f554eaf8e418ca3276caaa2
2025-10-05 14:41:34,076 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: intent_analysis | Model: gpt-4o-mini-2024-07-18 | Tokens: 2103 (prompt: 1927, completion: 176)
2025-10-05 14:41:34,076 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM Intent Analysis Result: {'intent': 'MARKET_INQUIRY', 'confidence': 0.9, 'keywords': ['강남구', '아파트', '시세', '대출', '가능 금액'], 'sub_intents': ['LOAN_CONSULT'], 'is_compound': True, 'decomposed_tasks': ['강남구 아파트 시세 조회', '대출 가능 금액 계산'], 'entities': {'location': '강남구', 'property_type': '아파트', 'action_verbs': ['확인', '계산']}, 'reasoning': '강남구 아파트 시세 확인이 주된 의도이며, 대출 가능 금액 계산이 부가적인 의도이므로 MARKET_INQUIRY로 분류'}
2025-10-05 14:41:34,077 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-66b9ef1d-52e6-4e75-af7c-54d64f8f1cc2', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 Agent 선택 전문가입니다.\n사용자의 요청에 가장 적합한 Agent/Team을 선택하는 것이 목표입니다.\n\n## 현재 상황\n\n**사용자 질문:** 강남구 아파트 시세 확인하고 대출 가능 금액 계산해줘\n**분석된 의도:** 시세조회\n**추출된 키워드:** [\'강남구\', \'아파트\', \'시세\', \'대출\', \'가능 금액\']\n\n## 사용 가능한 Agent/Team 정보\n\n{\'search_team\': {\'name\': \'search_team\', \'capabilities\': \'법률 검색, 부동산 시세 조회, 대출 상품 검색\', \'tools\': [\'legal_search\', \'market_data\', \'loan_data\'], \'use_cases\': [\'법률 상담\', \'시세 조회\', \'대출 정보\']}, \'analysis_team\': {\'name\': \'analysis_team\', \'capabilities\': \'데이터 분석, 리스크 평가, 인사이트 생성, 추천\', \'tools\': [\'data_analyzer\', \'risk_evaluator\'], \'use_cases\': [\'시장 분석\', \'리스크 평가\', \'투자 분석\']}, \'document_team\': {\'name\': \'document_team\', \'capabilities\': \'계약서 작성, 문서 생성, 문서 검토\', \'tools\': [\'document_generator\', \'contract_reviewer\'], \'use_cases\': [\'계약서 작성\', \'문서 검토\']}}\n\n## Agent 역할 및 상세 가이드\n\n### 1. search_team (검색 팀)\n- **주요 기능**: 정보 검색 및 데이터 수집\n- **전문 분야**:\n  * 법률 정보 검색 (전세법, 임대차보호법, 부동산 관련 법규)\n  * 부동산 시세 조회 (매매가, 전세가, 월세, 실거래가)\n  * 대출 상품 정보 검색 (금리, 한도, 조건)\n  * 지역 정보 및 인프라 조회\n- **도구**: legal_search, market_data, loan_data\n- **적합한 작업**: 정보 조회, 데이터 수집, 법률 확인, 시세 파악\n- **예시**:\n  * "전세금 5% 인상 가능한가요?"\n  * "강남구 아파트 전세 시세"\n  * "전세자금대출 한도 얼마?"\n\n### 2. analysis_team (분석 팀)\n- **주요 기능**: 데이터 분석 및 평가\n- **전문 분야**:\n  * 시장 동향 분석 (상승률, 하락률, 추세)\n  * 리스크 평가 (계약, 투자 위험도)\n  * 투자 수익률 계산 (ROI, 월세 수익률)\n  * 대출 한도 및 조건 분석 (LTV, DTI, DSR)\n  * 비교 분석 (지역별, 상품별)\n- **도구**: data_analyzer, risk_evaluator, calculator\n- **적합한 작업**: 데이터 분석, 리스크 평가, 계산, 비교, 예측\n- **의존성**: 보통 search_team의 데이터가 필요\n- **예시**:\n  * "이 지역 투자 가치 분석해줘"\n  * "계약 리스크 평가해줘"\n  * "대출 가능 금액 계산해줘"\n\n### 3. document_team (문서 팀)\n- **주요 기능**: 문서 생성 및 관리\n- **전문 분야**:\n  * 계약서 작성 (임대차, 매매, 전세)\n  * 문서 템플릿 관리\n  * 특약사항 생성\n  * 계약서 수정안 작성\n  * 법률 문서 검토\n- **도구**: document_generator, contract_template, contract_reviewer\n- **적합한 작업**: 문서 작성, 계약서 생성, 문서 수정, 검토\n- **예시**:\n  * "임대차계약서 작성해줘"\n  * "특약사항 추가해줘"\n  * "계약서 수정안 만들어줘"\n\n## Agent 선택 전략\n\n### 1단계: 작업 유형 식별\n```\n정보 필요 → search_team\n분석/계산 필요 → analysis_team\n문서 작성 필요 → document_team\n```\n\n### 2단계: 의존성 분석\n```\n독립적 작업 → 단일 팀\n순차적 의존 → 여러 팀 (순서 중요)\n병렬 가능 → 여러 팀 (순서 무관)\n```\n\n### 3단계: 최적화\n```\n중복 제거 → 가장 적합한 팀만 선택\n효율성 → 병렬 처리 가능한 경우 표시\n```\n\n## 의도별 Agent 매핑 가이드\n\n| 의도 (Intent) | 추천 Agent 조합 | 이유 |\n|--------------|-----------------|------|\n| LEGAL_CONSULT | ["search_team"] | 법률 정보 검색 전문 |\n| MARKET_INQUIRY | ["search_team"] | 시세 데이터 조회 |\n| LOAN_CONSULT | ["search_team", "analysis_team"] | 대출 정보 조회 후 분석 |\n| CONTRACT_CREATION | ["document_team"] | 문서 생성 전문 |\n| CONTRACT_REVIEW | ["search_team", "analysis_team"] | 법률 검토 및 리스크 분석 |\n| COMPREHENSIVE | ["search_team", "analysis_team"] | 종합 정보 수집 및 분석 |\n| RISK_ANALYSIS | ["analysis_team"] | 리스크 평가 전문 |\n| UNCLEAR | ["search_team", "analysis_team"] | 포괄적 대응 |\n\n## 복합 질문 처리 예시\n\n### 예시 1: 순차적 처리\n질문: "강남구 시세 확인하고 투자 가치 분석해줘"\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "먼저 search_team이 시세 데이터를 수집하고, 그 결과를 analysis_team이 분석하여 투자 가치 평가"\n}\n```\n\n### 예시 2: 병렬 처리 가능\n질문: "법률 정보와 시세 정보 모두 알려줘"\n```json\n{\n    "selected_agents": ["search_team"],\n    "reasoning": "search_team이 법률과 시세 정보를 병렬로 조회 가능. 두 작업이 독립적이므로 동시 처리"\n}\n```\n\n### 예시 3: 3단계 파이프라인\n질문: "시세 조회하고 분석한 후 계약서 작성해줘"\n```json\n{\n    "selected_agents": ["search_team", "analysis_team", "document_team"],\n    "reasoning": "search_team이 데이터 수집 → analysis_team이 분석 → document_team이 분석 결과 기반 계약서 작성"\n}\n```\n\n## 응답 형식 (JSON)\n\n{\n    "selected_agents": ["선택된 agent/team 목록"],\n    "reasoning": "선택 이유를 구체적으로 설명. 각 Agent의 역할과 처리 순서 포함",\n    "coordination": "single/sequential/parallel/pipeline",\n    "dependencies": {"agent2": ["agent1"]},\n    "estimated_time": 30,\n    "confidence": 0.9\n}\n\n## 선택 가이드라인\n\n1. **최소 Agent 원칙**: 가능한 적은 수의 Agent로 처리\n2. **전문성 우선**: 해당 작업에 가장 전문적인 Agent 선택\n3. **효율성 고려**: 병렬 처리 가능한 경우 명시\n4. **의존성 관리**: 데이터 흐름을 고려한 순서 지정\n5. **폴백 전략**: 불확실한 경우 ["search_team", "analysis_team"] 조합\n\n## 주의사항\n\n- selected_agents는 반드시 배열 형태\n- Agent 이름은 정확히: "search_team", "analysis_team", "document_team"\n- 최소 1개, 최대 3개 선택\n- 순서는 실행 우선순위 (앞에 있을수록 먼저 실행)\n- reasoning은 상세하고 논리적으로 작성\n- coordination 필드로 실행 방식 명시\n- 복합 질문의 경우 의존성 관계 명확히 표시'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 14:41:34,077 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 14:41:34,078 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 14:41:34,078 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 14:41:34,078 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 14:41:34,079 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 14:41:34,079 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 14:41:36,293 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 05:41:36 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'2019'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'2034'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9919'), (b'x-ratelimit-remaining-tokens', b'198421'), (b'x-ratelimit-reset-requests', b'11m36.15s'), (b'x-ratelimit-reset-tokens', b'473ms'), (b'x-request-id', b'req_2195785389724698a239908516ae90c7'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989a9737dac2e9fb-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 14:41:36,293 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 14:41:36,293 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 14:41:36,297 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 14:41:36,297 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 14:41:36,298 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 14:41:36,298 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 05:41:36 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '2019', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '2034', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9919', 'x-ratelimit-remaining-tokens': '198421', 'x-ratelimit-reset-requests': '11m36.15s', 'x-ratelimit-reset-tokens': '473ms', 'x-request-id': 'req_2195785389724698a239908516ae90c7', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989a9737dac2e9fb-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 14:41:36,298 - openai._base_client - DEBUG - request_id: req_2195785389724698a239908516ae90c7
2025-10-05 14:41:36,298 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: agent_selection | Model: gpt-4o-mini-2024-07-18 | Tokens: 1841 (prompt: 1716, completion: 125)
2025-10-05 14:41:36,298 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM agent selection reasoning: 사용자가 강남구 아파트의 시세를 확인하고 대출 가능 금액을 계산하고자 하므로, 먼저 search_team이 강남구 아파트의 시세 정보를 조회한 후, 그 데이터를 바탕으로 analysis_team이 대출 가능 금액을 계산하는 순서로 진행해야 합니다.
2025-10-05 14:41:36,298 - app.service_agent.cognitive_agents.planning_agent - INFO - ✅ Primary LLM selected agents: ['search_team', 'analysis_team']
2025-10-05 14:41:36,298 - app.service_agent.cognitive_agents.planning_agent - INFO - Intent analyzed: 시세조회 (confidence: 0.90)
2025-10-05 14:41:36,298 - app.service_agent.cognitive_agents.query_decomposer - INFO - Decomposing query: 강남구 아파트 시세 확인하고 대출 가능 금액 계산해줘...
2025-10-05 14:41:36,298 - app.service_agent.llm_manager.prompt_manager - DEBUG - Loaded prompt template: query_decomposition from C:\kdy\Projects\holmesnyangz\beta_v001\backend\app\service_agent\llm_manager\prompts\cognitive\query_decomposition.txt
2025-10-05 14:41:36,299 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-617c557a-c1be-4c02-8ae7-795a94eeea99', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 질문 분해 전문가입니다.\n복잡한 사용자 질문을 독립적으로 처리 가능한 작업 단위로 분해하는 것이 목표입니다.\n\n## 중요 원칙:\n1. 각 작업은 하나의 명확한 목표를 가져야 합니다\n2. 작업 간 의존성을 명확히 파악해야 합니다\n3. 병렬 처리 가능한 작업은 구분해야 합니다\n4. 불필요한 분해는 피해야 합니다 (단순 질문은 분해하지 않음)\n\n## 작업 유형 (type):\n- search: 정보 검색 (법률, 시세, 대출 정보 등)\n- analysis: 데이터 분석 (리스크 평가, 시장 분석 등)\n- generation: 문서 생성 (계약서 작성 등)\n- review: 검토/평가 (계약서 검토, 조건 확인 등)\n- calculation: 계산/산출 (대출 한도, 세금 등)\n- comparison: 비교 분석 (여러 옵션 비교)\n\n## 담당 팀 (agent):\n- search_team: 법률, 시세, 대출 정보 검색\n- analysis_team: 데이터 분석, 리스크 평가, 계산\n- document_team: 문서 생성, 계약서 작성\n\n## 학습 예시:\n\n### 예시 1: 복합 질문 (순차적)\n질문: "강남구 아파트 시세 확인하고 대출 가능 금액 계산해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "강남구 아파트 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "대출 가능 금액 계산",\n            "type": "calculation",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "required_data": {"price": "task_0.result.price"},\n            "estimated_time": 15\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "시세 정보가 있어야 대출 금액 계산이 가능하므로 순차 실행"\n}\n```\n\n### 예시 2: 복합 질문 (병렬 가능)\n질문: "이 지역 전세 시세와 매매 시세 모두 알려주고 비교 분석해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "전세 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "매매 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "전세/매매 시세 비교 분석",\n            "type": "comparison",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0", "task_1"],\n            "required_data": {\n                "lease_price": "task_0.result",\n                "sale_price": "task_1.result"\n            },\n            "estimated_time": 25\n        }\n    ],\n    "execution_mode": "mixed",\n    "parallel_groups": [["task_0", "task_1"], ["task_2"]],\n    "reasoning": "시세 조회는 독립적이므로 병렬 처리, 비교는 두 결과 필요"\n}\n```\n\n### 예시 3: 복합 질문 (3단계 이상)\n질문: "이 계약서 검토해서 위험한 부분 찾고 수정안 만들어서 최종 계약서 작성해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "계약서 내용 전체 검토",\n            "type": "review",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 30\n        },\n        {\n            "description": "위험 요소 및 문제점 분석",\n            "type": "analysis",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "estimated_time": 25\n        },\n        {\n            "description": "수정안 제안 생성",\n            "type": "generation",\n            "agent": "document_team",\n            "priority": 3,\n            "depends_on": ["task_1"],\n            "estimated_time": 20\n        },\n        {\n            "description": "최종 계약서 작성",\n            "type": "generation",\n            "agent": "document_team",\n            "priority": 4,\n            "depends_on": ["task_2"],\n            "estimated_time": 30\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "각 단계가 이전 결과에 의존하므로 순차 실행 필요"\n}\n```\n\n### 예시 4: 단순 질문 (분해 불필요)\n질문: "전세금 인상률 상한이 얼마야?"\n분해:\n```json\n{\n    "is_compound": false,\n    "sub_tasks": [\n        {\n            "description": "전세금 인상률 상한 법률 정보 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 15\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "단일 정보 조회 요청으로 분해 불필요"\n}\n```\n\n### 예시 5: 조건부 실행\n질문: "이 물건 시세 확인하고 적정가면 대출 상담도 받고 싶어"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "물건 시세 조회 및 적정성 평가",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 25\n        },\n        {\n            "description": "대출 상담 정보 제공",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "optional": true,\n            "context": {"condition": "if_reasonable_price"},\n            "estimated_time": 20\n        }\n    ],\n    "execution_mode": "conditional",\n    "reasoning": "시세 확인 결과에 따라 대출 상담 진행 여부 결정"\n}\n```\n\n## Chain-of-Thought 프로세스:\n\n1. **질문 분석**: 어떤 정보나 작업을 요구하는가?\n2. **연결어 확인**: "그리고", "또한", "해서", "한 후" 등이 있는가?\n3. **의존성 파악**: 어떤 작업이 다른 작업의 결과를 필요로 하는가?\n4. **병렬성 판단**: 독립적으로 실행 가능한 작업이 있는가?\n5. **최적화**: 불필요한 분해는 없는가?\n\n## 응답 형식 (JSON):\n\n{\n    "is_compound": true/false,\n    "sub_tasks": [\n        {\n            "description": "작업 설명",\n            "type": "작업 유형",\n            "agent": "담당 팀",\n            "priority": 우선순위 (1이 가장 높음),\n            "depends_on": ["선행 작업 ID 리스트"],\n            "required_data": {"필요한 데이터 매핑"},\n            "estimated_time": 예상 소요 시간(초),\n            "optional": true/false,\n            "context": {"추가 컨텍스트"}\n        }\n    ],\n    "execution_mode": "sequential/parallel/mixed/conditional",\n    "parallel_groups": [["병렬 실행 가능한 작업 ID 그룹"]],\n    "confidence": 0.0-1.0,\n    "reasoning": "분해 결정의 이유와 근거"\n}\n\n## 분해 가이드라인:\n\n1. **분해가 필요한 경우**:\n   - 여러 종류의 정보를 요청하는 경우\n   - 순차적 처리가 필요한 경우 (A의 결과로 B 수행)\n   - 서로 다른 팀의 전문성이 필요한 경우\n\n2. **분해가 불필요한 경우**:\n   - 단일 정보 조회\n   - 단순한 질문-답변\n   - 하나의 팀에서 완전히 처리 가능한 경우\n\n3. **병렬 처리 기준**:\n   - 서로 독립적인 정보 조회\n   - 의존성이 없는 분석 작업\n   - 동시에 진행해도 충돌하지 않는 작업\n\n4. **우선순위 설정**:\n   - 의존성이 없는 작업: priority 1\n   - 1차 의존 작업: priority 2\n   - 2차 의존 작업: priority 3\n   - 이런 식으로 증가\n\n현재 의도: 시세조회\n추출된 엔티티: {\'location\': \'강남구\', \'property_type\': \'아파트\', \'action_verbs\': [\'확인\', \'계산\']}\n\n분석할 질문: 강남구 아파트 시세 확인하고 대출 가능 금액 계산해줘'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 14:41:36,299 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 14:41:36,299 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 14:41:36,300 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 14:41:36,300 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 14:41:36,300 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 14:41:36,300 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 14:41:39,825 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 05:41:39 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'3328'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'3341'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9918'), (b'x-ratelimit-remaining-tokens', b'197971'), (b'x-ratelimit-reset-requests', b'11m42.564s'), (b'x-ratelimit-reset-tokens', b'608ms'), (b'x-request-id', b'req_086af29be5e147c4b6ba16b9fb580984'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989a9745b9f7e9fb-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 14:41:39,825 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 14:41:39,825 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 14:41:39,828 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 14:41:39,828 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 14:41:39,828 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 14:41:39,828 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 05:41:39 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '3328', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '3341', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9918', 'x-ratelimit-remaining-tokens': '197971', 'x-ratelimit-reset-requests': '11m42.564s', 'x-ratelimit-reset-tokens': '608ms', 'x-request-id': 'req_086af29be5e147c4b6ba16b9fb580984', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989a9745b9f7e9fb-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 14:41:39,829 - openai._base_client - DEBUG - request_id: req_086af29be5e147c4b6ba16b9fb580984
2025-10-05 14:41:39,829 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: query_decomposition | Model: gpt-4o-mini-2024-07-18 | Tokens: 2214 (prompt: 2036, completion: 178)
2025-10-05 14:41:39,829 - app.service_agent.cognitive_agents.query_decomposer - INFO - Successfully decomposed into 2 tasks
2025-10-05 14:41:39,829 - app.service_agent.cognitive_agents.planning_agent - INFO - Query decomposed into 2 tasks
2025-10-05 14:41:39,829 - app.service_agent.cognitive_agents.planning_agent - WARNING - Plan validation errors: ["Agent 'search_team' not found in registry", "Agent 'analysis_team' depends on missing 'task_0'", "Agent 'analysis_team' not found in registry"]
2025-10-05 14:41:39,829 - app.service_agent.cognitive_agents.planning_agent - INFO - Optimizing execution plan
2025-10-05 14:41:39,829 - app.service_agent.cognitive_agents.planning_agent - INFO - Comprehensive plan created: Intent: 시세조회 (confidence: 0.90) | Strategy: sequential | Agents: search_team, analysis_team | Estimated time: 35.0s
2025-10-05 14:41:39,829 - __main__ - INFO -   전략: sequential
2025-10-05 14:41:39,829 - __main__ - INFO -   단계 수: 2
2025-10-05 14:41:39,829 - __main__ - INFO - 
✓ 테스트 성공 (소요시간: 21.53초)
2025-10-05 14:41:39,829 - __main__ - INFO - 
================================================================================
2025-10-05 14:41:39,829 - __main__ - INFO - [22] 복합 질문 테스트: D002
2025-10-05 14:41:39,829 - __main__ - INFO - 질문: 서초동 전세 시세 알려주고 법적 주의사항도 알려줘
2025-10-05 14:41:39,829 - __main__ - INFO - ================================================================================
2025-10-05 14:41:39,829 - __main__ - INFO - 
[Step 1] Intent 분석...
2025-10-05 14:41:39,829 - app.service_agent.cognitive_agents.planning_agent - INFO - Analyzing intent for query: 서초동 전세 시세 알려주고 법적 주의사항도 알려줘...
2025-10-05 14:41:39,830 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-73c65f40-a143-4db8-8f56-0c60b11e8bee', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 의도 분석 전문가입니다.\n사용자의 질문을 정확히 이해하고, 어떤 종류의 도움이 필요한지 분류해야 합니다.\n\n## 중요: 복합 질문 처리\n복합적인 질문(여러 의도가 섞인 질문)의 경우, 가장 핵심적인 의도를 파악하되,\nsub_intents 필드에 부가적인 의도들도 함께 기록해주세요.\n\n## 분류 카테고리 설명:\n\n1. **LEGAL_CONSULT (법률상담)**\n   - 설명: 부동산 관련 법률, 권리, 의무에 대한 질문\n   - 예시:\n     * 단순: "전세금 5% 인상이 가능한가요?", "임대차계약 갱신 거부할 수 있나요?"\n     * 복합: "전세금 인상 가능한지 확인하고 법적 근거도 알려주세요"\n   - 키워드: 법, 전세, 임대, 보증금, 계약, 권리, 의무, 갱신, 임차인, 임대인, 법률, 규정, 조항\n   - 필요한 처리: 법률 데이터베이스 검색, 관련 법조항 찾기\n\n2. **MARKET_INQUIRY (시세조회)**\n   - 설명: 부동산 시장 가격, 시세, 거래 동향에 대한 질문\n   - 예시:\n     * 단순: "강남구 아파트 전세 시세 알려주세요", "서초동 매매가 얼마나 올랐나요?"\n     * 복합: "강남구 시세 확인하고 대출 가능 금액도 계산해줘"\n   - 키워드: 시세, 가격, 매매가, 전세가, 월세, 시장, 동향, 평균, 지역명, 상승률, 하락률\n   - 필요한 처리: 부동산 시세 데이터 조회, 지역별 가격 분석\n\n3. **LOAN_CONSULT (대출상담)**\n   - 설명: 주택담보대출, 전세자금대출 등 금융 관련 질문\n   - 예시:\n     * 단순: "전세자금대출 한도가 얼마인가요?", "LTV가 뭔가요?"\n     * 복합: "대출 한도 확인하고 금리 비교도 해주세요"\n   - 키워드: 대출, 금리, 한도, 조건, 상환, LTV, DTI, DSR, 담보, 금융, 은행\n   - 필요한 처리: 대출 상품 조회, 금리 정보 검색, 한도 계산\n\n4. **CONTRACT_CREATION (계약서작성)**\n   - 설명: 새로운 계약서나 문서를 작성해달라는 요청\n   - 예시:\n     * 단순: "임대차계약서 작성해주세요", "전세계약서 초안 만들어주세요"\n     * 복합: "계약서 작성하고 주의사항도 검토해주세요"\n   - 키워드: 작성, 만들, 생성, 초안, 계약서, 문서, 양식\n   - 필요한 처리: 문서 생성 에이전트 호출, 템플릿 기반 작성\n\n5. **CONTRACT_REVIEW (계약서검토)**\n   - 설명: 기존 계약서나 문서를 검토해달라는 요청\n   - 예시:\n     * 단순: "이 계약서 검토해주세요", "특약사항 문제없나요?"\n     * 복합: "계약서 검토하고 수정사항도 제안해주세요"\n   - 키워드: 검토, 확인, 점검, 리뷰, 분석해, 살펴봐, 체크\n   - 필요한 처리: 문서 분석, 위험 요소 식별, 개선사항 제안\n\n6. **COMPREHENSIVE (종합분석)**\n   - 설명: 여러 측면을 종합적으로 분석해달라는 요청\n   - 예시:\n     * 단순: "이 물건 전체적으로 분석해주세요"\n     * 복합: "시세, 법률, 대출 모두 검토해서 종합 의견 주세요"\n   - 키워드: 종합, 전체, 모든, 전반적, 종합적, 평가, 분석\n   - 필요한 처리: 다중 데이터 소스 통합 분석\n\n7. **RISK_ANALYSIS (리스크분석)**\n   - 설명: 위험 요소나 주의사항에 대한 질문\n   - 예시:\n     * 단순: "이 계약 위험한가요?", "주의할 점 알려주세요"\n     * 복합: "리스크 분석하고 대안도 제시해주세요"\n   - 키워드: 위험, 리스크, 주의, 문제점, 조심, 걱정, 우려\n   - 필요한 처리: 위험 요소 분석, 주의사항 추출\n\n8. **UNCLEAR (불분명)**\n   - 설명: 의도를 명확히 파악하기 어려운 질문\n   - 예시: "이거 좀 봐주세요", "어떻게 해야 할까요?", "도와주세요"\n   - 처리: 추가 질문으로 의도 명확화 필요\n\n9. **IRRELEVANT (무관)**\n   - 설명: 부동산과 전혀 관련 없는 질문\n   - 예시: "날씨 어때?", "저녁 뭐 먹지?", "주식 추천해줘"\n   - 처리: 부동산 관련 질문을 유도\n\n## 복합 질문 예시와 분석:\n\n### 예시 1: "강남구 아파트 시세 알려주고 전세자금대출 가능한지도 확인해줘"\n- 주 의도: MARKET_INQUIRY (시세 조회가 먼저 필요)\n- 부가 의도: LOAN_CONSULT (대출 확인)\n- 분해: ["강남구 아파트 시세 조회", "전세자금대출 가능 여부 확인"]\n\n### 예시 2: "이 계약서 검토해서 위험한 부분 있는지 알려주고 수정 제안도 해줘"\n- 주 의도: CONTRACT_REVIEW (계약서 검토)\n- 부가 의도: RISK_ANALYSIS (위험 분석)\n- 분해: ["계약서 전체 검토", "위험 요소 식별", "수정사항 제안"]\n\n### 예시 3: "서초동 전세가 확인하고 법적으로 문제없는지도 봐줘"\n- 주 의도: MARKET_INQUIRY (시세 확인)\n- 부가 의도: LEGAL_CONSULT (법적 검토)\n- 분해: ["서초동 전세가 조회", "법적 이슈 검토"]\n\n## 응답 형식 (JSON 형식으로 응답):\n\n{\n    "intent": "LEGAL_CONSULT",\n    "confidence": 0.9,\n    "keywords": ["전세금", "인상", "제한"],\n    "sub_intents": [],\n    "is_compound": false,\n    "decomposed_tasks": [],\n    "entities": {\n        "location": "강남구",\n        "price": "5억",\n        "contract_type": "전세",\n        "date": "2024년",\n        "area": "84㎡",\n        "action_verbs": ["확인", "검토"]\n    },\n    "reasoning": "전세금 인상에 대한 법률 질문이므로 LEGAL_CONSULT로 분류"\n}\n\n응답 규칙:\n- intent: 위 9개 카테고리 중 하나 (대문자_언더스코어 형식)\n- confidence: 0.0~1.0 (0.8 이상이면 매우 확실, 0.5 미만이면 불확실)\n- keywords: 추출된 주요 키워드 목록\n- sub_intents: 복합 질문일 경우 부가적인 의도들\n- is_compound: 복합 질문 여부 (true/false)\n- decomposed_tasks: 복합 질문을 분해한 개별 작업들\n- entities: 추출된 엔티티 정보\n- reasoning: 분류한 이유와 근거 (상세하게)\n\n## 판단 가이드:\n- 여러 의도가 섞여있다면, 가장 주된 의도를 intent에, 나머지를 sub_intents에 기록\n- "그리고", "또한", "함께", "같이" 등의 연결어가 있으면 복합 질문일 가능성 높음\n- 법률 관련 키워드가 있으면 LEGAL_CONSULT 우선\n- 가격/시세 언급이 명확하면 MARKET_INQUIRY\n- 계약서라는 단어와 함께 "작성/만들기"가 있으면 CONTRACT_CREATION\n- 계약서라는 단어와 함께 "검토/확인"이 있으면 CONTRACT_REVIEW\n- 불확실하면 confidence를 낮게 설정하고 UNCLEAR 선택\n- 복합 질문은 is_compound를 true로 설정하고 개별 작업으로 분해\n\n분석할 질문: 서초동 전세 시세 알려주고 법적 주의사항도 알려줘'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 14:41:39,830 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 14:41:39,830 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 14:41:39,830 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 14:41:39,830 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 14:41:39,831 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 14:41:39,831 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 14:41:43,830 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 05:41:43 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'3634'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'3652'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9918'), (b'x-ratelimit-remaining-tokens', b'198310'), (b'x-ratelimit-reset-requests', b'11m47.515s'), (b'x-ratelimit-reset-tokens', b'507ms'), (b'x-request-id', b'req_78b559f958fb4bb6be531eba274b9a88'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989a975bccd8e9fb-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 14:41:43,830 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 14:41:43,830 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 14:41:43,836 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 14:41:43,836 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 14:41:43,836 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 14:41:43,837 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 05:41:43 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '3634', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '3652', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9918', 'x-ratelimit-remaining-tokens': '198310', 'x-ratelimit-reset-requests': '11m47.515s', 'x-ratelimit-reset-tokens': '507ms', 'x-request-id': 'req_78b559f958fb4bb6be531eba274b9a88', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989a975bccd8e9fb-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 14:41:43,837 - openai._base_client - DEBUG - request_id: req_78b559f958fb4bb6be531eba274b9a88
2025-10-05 14:41:43,837 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: intent_analysis | Model: gpt-4o-mini-2024-07-18 | Tokens: 2121 (prompt: 1928, completion: 193)
2025-10-05 14:41:43,837 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM Intent Analysis Result: {'intent': 'MARKET_INQUIRY', 'confidence': 0.85, 'keywords': ['서초동', '전세', '시세', '법적', '주의사항'], 'sub_intents': ['LEGAL_CONSULT'], 'is_compound': True, 'decomposed_tasks': ['서초동 전세 시세 조회', '법적 주의사항 확인'], 'entities': {'location': '서초동', 'contract_type': '전세', 'action_verbs': ['알려주다', '확인하다']}, 'reasoning': '전세 시세에 대한 질문이 주된 의도이며, 법적 주의사항에 대한 요청이 부가적으로 포함되어 있어 MARKET_INQUIRY로 분류하였고, LEGAL_CONSULT을 sub_intent로 추가함.'}
2025-10-05 14:41:43,838 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-16003b07-382a-4ffb-a91b-a5fd260deba8', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 Agent 선택 전문가입니다.\n사용자의 요청에 가장 적합한 Agent/Team을 선택하는 것이 목표입니다.\n\n## 현재 상황\n\n**사용자 질문:** 서초동 전세 시세 알려주고 법적 주의사항도 알려줘\n**분석된 의도:** 시세조회\n**추출된 키워드:** [\'서초동\', \'전세\', \'시세\', \'법적\', \'주의사항\']\n\n## 사용 가능한 Agent/Team 정보\n\n{\'search_team\': {\'name\': \'search_team\', \'capabilities\': \'법률 검색, 부동산 시세 조회, 대출 상품 검색\', \'tools\': [\'legal_search\', \'market_data\', \'loan_data\'], \'use_cases\': [\'법률 상담\', \'시세 조회\', \'대출 정보\']}, \'analysis_team\': {\'name\': \'analysis_team\', \'capabilities\': \'데이터 분석, 리스크 평가, 인사이트 생성, 추천\', \'tools\': [\'data_analyzer\', \'risk_evaluator\'], \'use_cases\': [\'시장 분석\', \'리스크 평가\', \'투자 분석\']}, \'document_team\': {\'name\': \'document_team\', \'capabilities\': \'계약서 작성, 문서 생성, 문서 검토\', \'tools\': [\'document_generator\', \'contract_reviewer\'], \'use_cases\': [\'계약서 작성\', \'문서 검토\']}}\n\n## Agent 역할 및 상세 가이드\n\n### 1. search_team (검색 팀)\n- **주요 기능**: 정보 검색 및 데이터 수집\n- **전문 분야**:\n  * 법률 정보 검색 (전세법, 임대차보호법, 부동산 관련 법규)\n  * 부동산 시세 조회 (매매가, 전세가, 월세, 실거래가)\n  * 대출 상품 정보 검색 (금리, 한도, 조건)\n  * 지역 정보 및 인프라 조회\n- **도구**: legal_search, market_data, loan_data\n- **적합한 작업**: 정보 조회, 데이터 수집, 법률 확인, 시세 파악\n- **예시**:\n  * "전세금 5% 인상 가능한가요?"\n  * "강남구 아파트 전세 시세"\n  * "전세자금대출 한도 얼마?"\n\n### 2. analysis_team (분석 팀)\n- **주요 기능**: 데이터 분석 및 평가\n- **전문 분야**:\n  * 시장 동향 분석 (상승률, 하락률, 추세)\n  * 리스크 평가 (계약, 투자 위험도)\n  * 투자 수익률 계산 (ROI, 월세 수익률)\n  * 대출 한도 및 조건 분석 (LTV, DTI, DSR)\n  * 비교 분석 (지역별, 상품별)\n- **도구**: data_analyzer, risk_evaluator, calculator\n- **적합한 작업**: 데이터 분석, 리스크 평가, 계산, 비교, 예측\n- **의존성**: 보통 search_team의 데이터가 필요\n- **예시**:\n  * "이 지역 투자 가치 분석해줘"\n  * "계약 리스크 평가해줘"\n  * "대출 가능 금액 계산해줘"\n\n### 3. document_team (문서 팀)\n- **주요 기능**: 문서 생성 및 관리\n- **전문 분야**:\n  * 계약서 작성 (임대차, 매매, 전세)\n  * 문서 템플릿 관리\n  * 특약사항 생성\n  * 계약서 수정안 작성\n  * 법률 문서 검토\n- **도구**: document_generator, contract_template, contract_reviewer\n- **적합한 작업**: 문서 작성, 계약서 생성, 문서 수정, 검토\n- **예시**:\n  * "임대차계약서 작성해줘"\n  * "특약사항 추가해줘"\n  * "계약서 수정안 만들어줘"\n\n## Agent 선택 전략\n\n### 1단계: 작업 유형 식별\n```\n정보 필요 → search_team\n분석/계산 필요 → analysis_team\n문서 작성 필요 → document_team\n```\n\n### 2단계: 의존성 분석\n```\n독립적 작업 → 단일 팀\n순차적 의존 → 여러 팀 (순서 중요)\n병렬 가능 → 여러 팀 (순서 무관)\n```\n\n### 3단계: 최적화\n```\n중복 제거 → 가장 적합한 팀만 선택\n효율성 → 병렬 처리 가능한 경우 표시\n```\n\n## 의도별 Agent 매핑 가이드\n\n| 의도 (Intent) | 추천 Agent 조합 | 이유 |\n|--------------|-----------------|------|\n| LEGAL_CONSULT | ["search_team"] | 법률 정보 검색 전문 |\n| MARKET_INQUIRY | ["search_team"] | 시세 데이터 조회 |\n| LOAN_CONSULT | ["search_team", "analysis_team"] | 대출 정보 조회 후 분석 |\n| CONTRACT_CREATION | ["document_team"] | 문서 생성 전문 |\n| CONTRACT_REVIEW | ["search_team", "analysis_team"] | 법률 검토 및 리스크 분석 |\n| COMPREHENSIVE | ["search_team", "analysis_team"] | 종합 정보 수집 및 분석 |\n| RISK_ANALYSIS | ["analysis_team"] | 리스크 평가 전문 |\n| UNCLEAR | ["search_team", "analysis_team"] | 포괄적 대응 |\n\n## 복합 질문 처리 예시\n\n### 예시 1: 순차적 처리\n질문: "강남구 시세 확인하고 투자 가치 분석해줘"\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "먼저 search_team이 시세 데이터를 수집하고, 그 결과를 analysis_team이 분석하여 투자 가치 평가"\n}\n```\n\n### 예시 2: 병렬 처리 가능\n질문: "법률 정보와 시세 정보 모두 알려줘"\n```json\n{\n    "selected_agents": ["search_team"],\n    "reasoning": "search_team이 법률과 시세 정보를 병렬로 조회 가능. 두 작업이 독립적이므로 동시 처리"\n}\n```\n\n### 예시 3: 3단계 파이프라인\n질문: "시세 조회하고 분석한 후 계약서 작성해줘"\n```json\n{\n    "selected_agents": ["search_team", "analysis_team", "document_team"],\n    "reasoning": "search_team이 데이터 수집 → analysis_team이 분석 → document_team이 분석 결과 기반 계약서 작성"\n}\n```\n\n## 응답 형식 (JSON)\n\n{\n    "selected_agents": ["선택된 agent/team 목록"],\n    "reasoning": "선택 이유를 구체적으로 설명. 각 Agent의 역할과 처리 순서 포함",\n    "coordination": "single/sequential/parallel/pipeline",\n    "dependencies": {"agent2": ["agent1"]},\n    "estimated_time": 30,\n    "confidence": 0.9\n}\n\n## 선택 가이드라인\n\n1. **최소 Agent 원칙**: 가능한 적은 수의 Agent로 처리\n2. **전문성 우선**: 해당 작업에 가장 전문적인 Agent 선택\n3. **효율성 고려**: 병렬 처리 가능한 경우 명시\n4. **의존성 관리**: 데이터 흐름을 고려한 순서 지정\n5. **폴백 전략**: 불확실한 경우 ["search_team", "analysis_team"] 조합\n\n## 주의사항\n\n- selected_agents는 반드시 배열 형태\n- Agent 이름은 정확히: "search_team", "analysis_team", "document_team"\n- 최소 1개, 최대 3개 선택\n- 순서는 실행 우선순위 (앞에 있을수록 먼저 실행)\n- reasoning은 상세하고 논리적으로 작성\n- coordination 필드로 실행 방식 명시\n- 복합 질문의 경우 의존성 관계 명확히 표시'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 14:41:43,838 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 14:41:43,838 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 14:41:43,839 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 14:41:43,839 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 14:41:43,839 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 14:41:43,839 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 14:41:46,216 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 05:41:46 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'2131'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'2147'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9917'), (b'x-ratelimit-remaining-tokens', b'198423'), (b'x-ratelimit-reset-requests', b'11m52.304s'), (b'x-ratelimit-reset-tokens', b'473ms'), (b'x-request-id', b'req_f2614a13ce2b4bcaba6d3b926350de54'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989a9774db7ce9fb-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 14:41:46,217 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 14:41:46,217 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 14:41:46,217 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 14:41:46,217 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 14:41:46,217 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 14:41:46,217 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 05:41:46 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '2131', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '2147', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9917', 'x-ratelimit-remaining-tokens': '198423', 'x-ratelimit-reset-requests': '11m52.304s', 'x-ratelimit-reset-tokens': '473ms', 'x-request-id': 'req_f2614a13ce2b4bcaba6d3b926350de54', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989a9774db7ce9fb-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 14:41:46,217 - openai._base_client - DEBUG - request_id: req_f2614a13ce2b4bcaba6d3b926350de54
2025-10-05 14:41:46,218 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: agent_selection | Model: gpt-4o-mini-2024-07-18 | Tokens: 1829 (prompt: 1716, completion: 113)
2025-10-05 14:41:46,218 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM agent selection reasoning: 사용자가 요청한 서초동 전세 시세와 법적 주의사항에 대한 정보는 모두 search_team이 전문적으로 처리할 수 있는 영역입니다. search_team은 부동산 시세 조회와 법률 정보 검색을 동시에 수행할 수 있어, 두 가지 정보를 병렬로 조회할 수 있습니다.
2025-10-05 14:41:46,218 - app.service_agent.cognitive_agents.planning_agent - INFO - ✅ Primary LLM selected agents: ['search_team']
2025-10-05 14:41:46,218 - __main__ - INFO -   의도: 시세조회
2025-10-05 14:41:46,218 - __main__ - INFO -   신뢰도: 0.85
2025-10-05 14:41:46,218 - __main__ - INFO -   추천 Agent: ['search_team']
2025-10-05 14:41:46,218 - __main__ - INFO - 
[Step 2] Query Decomposition...
2025-10-05 14:41:46,218 - app.service_agent.cognitive_agents.query_decomposer - INFO - Decomposing query: 서초동 전세 시세 알려주고 법적 주의사항도 알려줘...
2025-10-05 14:41:46,218 - app.service_agent.cognitive_agents.query_decomposer - INFO - Query is simple, no decomposition needed
2025-10-05 14:41:46,218 - __main__ - INFO -   복합 질문: False
2025-10-05 14:41:46,218 - __main__ - INFO -   작업 수: 1
2025-10-05 14:41:46,218 - __main__ - INFO -   실행 모드: sequential
2025-10-05 14:41:46,218 - __main__ - INFO -     - task_0: 서초동 전세 시세 알려주고 법적 주의사항도 알려줘 (search_team)
2025-10-05 14:41:46,218 - __main__ - INFO - 
[Step 3] Comprehensive Plan 생성...
2025-10-05 14:41:46,218 - app.service_agent.cognitive_agents.planning_agent - INFO - Creating comprehensive plan for query: 서초동 전세 시세 알려주고 법적 주의사항도 알려줘...
2025-10-05 14:41:46,218 - app.service_agent.cognitive_agents.planning_agent - INFO - Analyzing intent for query: 서초동 전세 시세 알려주고 법적 주의사항도 알려줘...
2025-10-05 14:41:46,218 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-59fdf7a3-ff6c-4751-ab2b-9942eabce3ab', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 의도 분석 전문가입니다.\n사용자의 질문을 정확히 이해하고, 어떤 종류의 도움이 필요한지 분류해야 합니다.\n\n## 중요: 복합 질문 처리\n복합적인 질문(여러 의도가 섞인 질문)의 경우, 가장 핵심적인 의도를 파악하되,\nsub_intents 필드에 부가적인 의도들도 함께 기록해주세요.\n\n## 분류 카테고리 설명:\n\n1. **LEGAL_CONSULT (법률상담)**\n   - 설명: 부동산 관련 법률, 권리, 의무에 대한 질문\n   - 예시:\n     * 단순: "전세금 5% 인상이 가능한가요?", "임대차계약 갱신 거부할 수 있나요?"\n     * 복합: "전세금 인상 가능한지 확인하고 법적 근거도 알려주세요"\n   - 키워드: 법, 전세, 임대, 보증금, 계약, 권리, 의무, 갱신, 임차인, 임대인, 법률, 규정, 조항\n   - 필요한 처리: 법률 데이터베이스 검색, 관련 법조항 찾기\n\n2. **MARKET_INQUIRY (시세조회)**\n   - 설명: 부동산 시장 가격, 시세, 거래 동향에 대한 질문\n   - 예시:\n     * 단순: "강남구 아파트 전세 시세 알려주세요", "서초동 매매가 얼마나 올랐나요?"\n     * 복합: "강남구 시세 확인하고 대출 가능 금액도 계산해줘"\n   - 키워드: 시세, 가격, 매매가, 전세가, 월세, 시장, 동향, 평균, 지역명, 상승률, 하락률\n   - 필요한 처리: 부동산 시세 데이터 조회, 지역별 가격 분석\n\n3. **LOAN_CONSULT (대출상담)**\n   - 설명: 주택담보대출, 전세자금대출 등 금융 관련 질문\n   - 예시:\n     * 단순: "전세자금대출 한도가 얼마인가요?", "LTV가 뭔가요?"\n     * 복합: "대출 한도 확인하고 금리 비교도 해주세요"\n   - 키워드: 대출, 금리, 한도, 조건, 상환, LTV, DTI, DSR, 담보, 금융, 은행\n   - 필요한 처리: 대출 상품 조회, 금리 정보 검색, 한도 계산\n\n4. **CONTRACT_CREATION (계약서작성)**\n   - 설명: 새로운 계약서나 문서를 작성해달라는 요청\n   - 예시:\n     * 단순: "임대차계약서 작성해주세요", "전세계약서 초안 만들어주세요"\n     * 복합: "계약서 작성하고 주의사항도 검토해주세요"\n   - 키워드: 작성, 만들, 생성, 초안, 계약서, 문서, 양식\n   - 필요한 처리: 문서 생성 에이전트 호출, 템플릿 기반 작성\n\n5. **CONTRACT_REVIEW (계약서검토)**\n   - 설명: 기존 계약서나 문서를 검토해달라는 요청\n   - 예시:\n     * 단순: "이 계약서 검토해주세요", "특약사항 문제없나요?"\n     * 복합: "계약서 검토하고 수정사항도 제안해주세요"\n   - 키워드: 검토, 확인, 점검, 리뷰, 분석해, 살펴봐, 체크\n   - 필요한 처리: 문서 분석, 위험 요소 식별, 개선사항 제안\n\n6. **COMPREHENSIVE (종합분석)**\n   - 설명: 여러 측면을 종합적으로 분석해달라는 요청\n   - 예시:\n     * 단순: "이 물건 전체적으로 분석해주세요"\n     * 복합: "시세, 법률, 대출 모두 검토해서 종합 의견 주세요"\n   - 키워드: 종합, 전체, 모든, 전반적, 종합적, 평가, 분석\n   - 필요한 처리: 다중 데이터 소스 통합 분석\n\n7. **RISK_ANALYSIS (리스크분석)**\n   - 설명: 위험 요소나 주의사항에 대한 질문\n   - 예시:\n     * 단순: "이 계약 위험한가요?", "주의할 점 알려주세요"\n     * 복합: "리스크 분석하고 대안도 제시해주세요"\n   - 키워드: 위험, 리스크, 주의, 문제점, 조심, 걱정, 우려\n   - 필요한 처리: 위험 요소 분석, 주의사항 추출\n\n8. **UNCLEAR (불분명)**\n   - 설명: 의도를 명확히 파악하기 어려운 질문\n   - 예시: "이거 좀 봐주세요", "어떻게 해야 할까요?", "도와주세요"\n   - 처리: 추가 질문으로 의도 명확화 필요\n\n9. **IRRELEVANT (무관)**\n   - 설명: 부동산과 전혀 관련 없는 질문\n   - 예시: "날씨 어때?", "저녁 뭐 먹지?", "주식 추천해줘"\n   - 처리: 부동산 관련 질문을 유도\n\n## 복합 질문 예시와 분석:\n\n### 예시 1: "강남구 아파트 시세 알려주고 전세자금대출 가능한지도 확인해줘"\n- 주 의도: MARKET_INQUIRY (시세 조회가 먼저 필요)\n- 부가 의도: LOAN_CONSULT (대출 확인)\n- 분해: ["강남구 아파트 시세 조회", "전세자금대출 가능 여부 확인"]\n\n### 예시 2: "이 계약서 검토해서 위험한 부분 있는지 알려주고 수정 제안도 해줘"\n- 주 의도: CONTRACT_REVIEW (계약서 검토)\n- 부가 의도: RISK_ANALYSIS (위험 분석)\n- 분해: ["계약서 전체 검토", "위험 요소 식별", "수정사항 제안"]\n\n### 예시 3: "서초동 전세가 확인하고 법적으로 문제없는지도 봐줘"\n- 주 의도: MARKET_INQUIRY (시세 확인)\n- 부가 의도: LEGAL_CONSULT (법적 검토)\n- 분해: ["서초동 전세가 조회", "법적 이슈 검토"]\n\n## 응답 형식 (JSON 형식으로 응답):\n\n{\n    "intent": "LEGAL_CONSULT",\n    "confidence": 0.9,\n    "keywords": ["전세금", "인상", "제한"],\n    "sub_intents": [],\n    "is_compound": false,\n    "decomposed_tasks": [],\n    "entities": {\n        "location": "강남구",\n        "price": "5억",\n        "contract_type": "전세",\n        "date": "2024년",\n        "area": "84㎡",\n        "action_verbs": ["확인", "검토"]\n    },\n    "reasoning": "전세금 인상에 대한 법률 질문이므로 LEGAL_CONSULT로 분류"\n}\n\n응답 규칙:\n- intent: 위 9개 카테고리 중 하나 (대문자_언더스코어 형식)\n- confidence: 0.0~1.0 (0.8 이상이면 매우 확실, 0.5 미만이면 불확실)\n- keywords: 추출된 주요 키워드 목록\n- sub_intents: 복합 질문일 경우 부가적인 의도들\n- is_compound: 복합 질문 여부 (true/false)\n- decomposed_tasks: 복합 질문을 분해한 개별 작업들\n- entities: 추출된 엔티티 정보\n- reasoning: 분류한 이유와 근거 (상세하게)\n\n## 판단 가이드:\n- 여러 의도가 섞여있다면, 가장 주된 의도를 intent에, 나머지를 sub_intents에 기록\n- "그리고", "또한", "함께", "같이" 등의 연결어가 있으면 복합 질문일 가능성 높음\n- 법률 관련 키워드가 있으면 LEGAL_CONSULT 우선\n- 가격/시세 언급이 명확하면 MARKET_INQUIRY\n- 계약서라는 단어와 함께 "작성/만들기"가 있으면 CONTRACT_CREATION\n- 계약서라는 단어와 함께 "검토/확인"이 있으면 CONTRACT_REVIEW\n- 불확실하면 confidence를 낮게 설정하고 UNCLEAR 선택\n- 복합 질문은 is_compound를 true로 설정하고 개별 작업으로 분해\n\n분석할 질문: 서초동 전세 시세 알려주고 법적 주의사항도 알려줘'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 14:41:46,219 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 14:41:46,219 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 14:41:46,219 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 14:41:46,219 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 14:41:46,220 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 14:41:46,220 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 14:41:50,622 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 05:41:50 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'4205'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'4218'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9916'), (b'x-ratelimit-remaining-tokens', b'198310'), (b'x-ratelimit-reset-requests', b'11m58.566s'), (b'x-ratelimit-reset-tokens', b'507ms'), (b'x-request-id', b'req_4aee40afe17041d19f00a39d1802aeac'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989a9783b835e9fb-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 14:41:50,623 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 14:41:50,623 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 14:41:50,623 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 14:41:50,624 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 14:41:50,624 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 14:41:50,624 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 05:41:50 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '4205', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '4218', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9916', 'x-ratelimit-remaining-tokens': '198310', 'x-ratelimit-reset-requests': '11m58.566s', 'x-ratelimit-reset-tokens': '507ms', 'x-request-id': 'req_4aee40afe17041d19f00a39d1802aeac', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989a9783b835e9fb-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 14:41:50,624 - openai._base_client - DEBUG - request_id: req_4aee40afe17041d19f00a39d1802aeac
2025-10-05 14:41:50,624 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: intent_analysis | Model: gpt-4o-mini-2024-07-18 | Tokens: 2113 (prompt: 1928, completion: 185)
2025-10-05 14:41:50,624 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM Intent Analysis Result: {'intent': 'MARKET_INQUIRY', 'confidence': 0.85, 'keywords': ['서초동', '전세', '시세', '법적', '주의사항'], 'sub_intents': ['LEGAL_CONSULT'], 'is_compound': True, 'decomposed_tasks': ['서초동 전세 시세 조회', '법적 주의사항 확인'], 'entities': {'location': '서초동', 'contract_type': '전세', 'action_verbs': ['알려주다', '확인하다']}, 'reasoning': '전세 시세에 대한 질문이 주된 의도이며, 법적 주의사항에 대한 추가 요청이 있어 MARKET_INQUIRY로 분류하고 LEGAL_CONSULT를 부가 의도로 설정'}
2025-10-05 14:41:50,624 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-053830d4-05d2-4199-8def-fae00fc5d86b', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 Agent 선택 전문가입니다.\n사용자의 요청에 가장 적합한 Agent/Team을 선택하는 것이 목표입니다.\n\n## 현재 상황\n\n**사용자 질문:** 서초동 전세 시세 알려주고 법적 주의사항도 알려줘\n**분석된 의도:** 시세조회\n**추출된 키워드:** [\'서초동\', \'전세\', \'시세\', \'법적\', \'주의사항\']\n\n## 사용 가능한 Agent/Team 정보\n\n{\'search_team\': {\'name\': \'search_team\', \'capabilities\': \'법률 검색, 부동산 시세 조회, 대출 상품 검색\', \'tools\': [\'legal_search\', \'market_data\', \'loan_data\'], \'use_cases\': [\'법률 상담\', \'시세 조회\', \'대출 정보\']}, \'analysis_team\': {\'name\': \'analysis_team\', \'capabilities\': \'데이터 분석, 리스크 평가, 인사이트 생성, 추천\', \'tools\': [\'data_analyzer\', \'risk_evaluator\'], \'use_cases\': [\'시장 분석\', \'리스크 평가\', \'투자 분석\']}, \'document_team\': {\'name\': \'document_team\', \'capabilities\': \'계약서 작성, 문서 생성, 문서 검토\', \'tools\': [\'document_generator\', \'contract_reviewer\'], \'use_cases\': [\'계약서 작성\', \'문서 검토\']}}\n\n## Agent 역할 및 상세 가이드\n\n### 1. search_team (검색 팀)\n- **주요 기능**: 정보 검색 및 데이터 수집\n- **전문 분야**:\n  * 법률 정보 검색 (전세법, 임대차보호법, 부동산 관련 법규)\n  * 부동산 시세 조회 (매매가, 전세가, 월세, 실거래가)\n  * 대출 상품 정보 검색 (금리, 한도, 조건)\n  * 지역 정보 및 인프라 조회\n- **도구**: legal_search, market_data, loan_data\n- **적합한 작업**: 정보 조회, 데이터 수집, 법률 확인, 시세 파악\n- **예시**:\n  * "전세금 5% 인상 가능한가요?"\n  * "강남구 아파트 전세 시세"\n  * "전세자금대출 한도 얼마?"\n\n### 2. analysis_team (분석 팀)\n- **주요 기능**: 데이터 분석 및 평가\n- **전문 분야**:\n  * 시장 동향 분석 (상승률, 하락률, 추세)\n  * 리스크 평가 (계약, 투자 위험도)\n  * 투자 수익률 계산 (ROI, 월세 수익률)\n  * 대출 한도 및 조건 분석 (LTV, DTI, DSR)\n  * 비교 분석 (지역별, 상품별)\n- **도구**: data_analyzer, risk_evaluator, calculator\n- **적합한 작업**: 데이터 분석, 리스크 평가, 계산, 비교, 예측\n- **의존성**: 보통 search_team의 데이터가 필요\n- **예시**:\n  * "이 지역 투자 가치 분석해줘"\n  * "계약 리스크 평가해줘"\n  * "대출 가능 금액 계산해줘"\n\n### 3. document_team (문서 팀)\n- **주요 기능**: 문서 생성 및 관리\n- **전문 분야**:\n  * 계약서 작성 (임대차, 매매, 전세)\n  * 문서 템플릿 관리\n  * 특약사항 생성\n  * 계약서 수정안 작성\n  * 법률 문서 검토\n- **도구**: document_generator, contract_template, contract_reviewer\n- **적합한 작업**: 문서 작성, 계약서 생성, 문서 수정, 검토\n- **예시**:\n  * "임대차계약서 작성해줘"\n  * "특약사항 추가해줘"\n  * "계약서 수정안 만들어줘"\n\n## Agent 선택 전략\n\n### 1단계: 작업 유형 식별\n```\n정보 필요 → search_team\n분석/계산 필요 → analysis_team\n문서 작성 필요 → document_team\n```\n\n### 2단계: 의존성 분석\n```\n독립적 작업 → 단일 팀\n순차적 의존 → 여러 팀 (순서 중요)\n병렬 가능 → 여러 팀 (순서 무관)\n```\n\n### 3단계: 최적화\n```\n중복 제거 → 가장 적합한 팀만 선택\n효율성 → 병렬 처리 가능한 경우 표시\n```\n\n## 의도별 Agent 매핑 가이드\n\n| 의도 (Intent) | 추천 Agent 조합 | 이유 |\n|--------------|-----------------|------|\n| LEGAL_CONSULT | ["search_team"] | 법률 정보 검색 전문 |\n| MARKET_INQUIRY | ["search_team"] | 시세 데이터 조회 |\n| LOAN_CONSULT | ["search_team", "analysis_team"] | 대출 정보 조회 후 분석 |\n| CONTRACT_CREATION | ["document_team"] | 문서 생성 전문 |\n| CONTRACT_REVIEW | ["search_team", "analysis_team"] | 법률 검토 및 리스크 분석 |\n| COMPREHENSIVE | ["search_team", "analysis_team"] | 종합 정보 수집 및 분석 |\n| RISK_ANALYSIS | ["analysis_team"] | 리스크 평가 전문 |\n| UNCLEAR | ["search_team", "analysis_team"] | 포괄적 대응 |\n\n## 복합 질문 처리 예시\n\n### 예시 1: 순차적 처리\n질문: "강남구 시세 확인하고 투자 가치 분석해줘"\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "먼저 search_team이 시세 데이터를 수집하고, 그 결과를 analysis_team이 분석하여 투자 가치 평가"\n}\n```\n\n### 예시 2: 병렬 처리 가능\n질문: "법률 정보와 시세 정보 모두 알려줘"\n```json\n{\n    "selected_agents": ["search_team"],\n    "reasoning": "search_team이 법률과 시세 정보를 병렬로 조회 가능. 두 작업이 독립적이므로 동시 처리"\n}\n```\n\n### 예시 3: 3단계 파이프라인\n질문: "시세 조회하고 분석한 후 계약서 작성해줘"\n```json\n{\n    "selected_agents": ["search_team", "analysis_team", "document_team"],\n    "reasoning": "search_team이 데이터 수집 → analysis_team이 분석 → document_team이 분석 결과 기반 계약서 작성"\n}\n```\n\n## 응답 형식 (JSON)\n\n{\n    "selected_agents": ["선택된 agent/team 목록"],\n    "reasoning": "선택 이유를 구체적으로 설명. 각 Agent의 역할과 처리 순서 포함",\n    "coordination": "single/sequential/parallel/pipeline",\n    "dependencies": {"agent2": ["agent1"]},\n    "estimated_time": 30,\n    "confidence": 0.9\n}\n\n## 선택 가이드라인\n\n1. **최소 Agent 원칙**: 가능한 적은 수의 Agent로 처리\n2. **전문성 우선**: 해당 작업에 가장 전문적인 Agent 선택\n3. **효율성 고려**: 병렬 처리 가능한 경우 명시\n4. **의존성 관리**: 데이터 흐름을 고려한 순서 지정\n5. **폴백 전략**: 불확실한 경우 ["search_team", "analysis_team"] 조합\n\n## 주의사항\n\n- selected_agents는 반드시 배열 형태\n- Agent 이름은 정확히: "search_team", "analysis_team", "document_team"\n- 최소 1개, 최대 3개 선택\n- 순서는 실행 우선순위 (앞에 있을수록 먼저 실행)\n- reasoning은 상세하고 논리적으로 작성\n- coordination 필드로 실행 방식 명시\n- 복합 질문의 경우 의존성 관계 명확히 표시'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 14:41:50,625 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 14:41:50,625 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 14:41:50,625 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 14:41:50,625 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 14:41:50,625 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 14:41:50,625 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 14:41:53,345 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 05:41:53 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'2454'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'2471'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9916'), (b'x-ratelimit-remaining-tokens', b'198423'), (b'x-ratelimit-reset-requests', b'12m2.8s'), (b'x-ratelimit-reset-tokens', b'473ms'), (b'x-request-id', b'req_660a55d9ae9a4fef9fb89fe2db5ff02b'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989a979f3d3ee9fb-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 14:41:53,345 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 14:41:53,345 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 14:41:53,346 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 14:41:53,346 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 14:41:53,346 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 14:41:53,346 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 05:41:53 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '2454', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '2471', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9916', 'x-ratelimit-remaining-tokens': '198423', 'x-ratelimit-reset-requests': '12m2.8s', 'x-ratelimit-reset-tokens': '473ms', 'x-request-id': 'req_660a55d9ae9a4fef9fb89fe2db5ff02b', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989a979f3d3ee9fb-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 14:41:53,346 - openai._base_client - DEBUG - request_id: req_660a55d9ae9a4fef9fb89fe2db5ff02b
2025-10-05 14:41:53,346 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: agent_selection | Model: gpt-4o-mini-2024-07-18 | Tokens: 1825 (prompt: 1716, completion: 109)
2025-10-05 14:41:53,346 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM agent selection reasoning: 사용자가 요청한 서초동 전세 시세 조회와 법적 주의사항에 대한 정보는 모두 search_team의 전문 분야입니다. search_team은 부동산 시세 조회와 법률 정보 검색을 동시에 수행할 수 있어, 두 가지 정보를 병렬로 처리할 수 있습니다.
2025-10-05 14:41:53,346 - app.service_agent.cognitive_agents.planning_agent - INFO - ✅ Primary LLM selected agents: ['search_team']
2025-10-05 14:41:53,346 - app.service_agent.cognitive_agents.planning_agent - INFO - Intent analyzed: 시세조회 (confidence: 0.85)
2025-10-05 14:41:53,346 - app.service_agent.cognitive_agents.query_decomposer - INFO - Decomposing query: 서초동 전세 시세 알려주고 법적 주의사항도 알려줘...
2025-10-05 14:41:53,346 - app.service_agent.cognitive_agents.query_decomposer - INFO - Query is simple, no decomposition needed
2025-10-05 14:41:53,347 - app.service_agent.cognitive_agents.planning_agent - INFO - Query decomposed into 1 tasks
2025-10-05 14:41:53,347 - app.service_agent.cognitive_agents.planning_agent - INFO - Creating execution plan for intent: 시세조회
2025-10-05 14:41:53,347 - app.service_agent.cognitive_agents.planning_agent - WARNING - AgentRegistry is empty, using default teams
2025-10-05 14:41:53,347 - app.service_agent.cognitive_agents.planning_agent - DEBUG - Suggested agents: ['search_team']
2025-10-05 14:41:53,347 - app.service_agent.cognitive_agents.planning_agent - DEBUG - Available agents: ['search_team', 'analysis_team', 'document_team']
2025-10-05 14:41:53,347 - app.service_agent.cognitive_agents.planning_agent - INFO - Selected agents/teams for execution: ['search_team']
2025-10-05 14:41:53,347 - app.service_agent.cognitive_agents.planning_agent - WARNING - Plan validation errors: ["Agent 'search_team' not found in registry"]
2025-10-05 14:41:53,347 - app.service_agent.cognitive_agents.planning_agent - INFO - Optimizing execution plan
2025-10-05 14:41:53,347 - app.service_agent.cognitive_agents.planning_agent - INFO - Comprehensive plan created: Intent: 시세조회 (confidence: 0.85) | Strategy: sequential | Agents: search_team | Estimated time: 30.0s
2025-10-05 14:41:53,347 - __main__ - INFO -   전략: sequential
2025-10-05 14:41:53,347 - __main__ - INFO -   단계 수: 1
2025-10-05 14:41:53,347 - __main__ - INFO - 
✓ 테스트 성공 (소요시간: 13.52초)
2025-10-05 14:41:53,347 - __main__ - INFO - 
================================================================================
2025-10-05 14:41:53,347 - __main__ - INFO - [23] 복합 질문 테스트: D003
2025-10-05 14:41:53,347 - __main__ - INFO - 질문: 이 계약서 검토하고 위험 요소 분석해줘
2025-10-05 14:41:53,347 - __main__ - INFO - ================================================================================
2025-10-05 14:41:53,347 - __main__ - INFO - 
[Step 1] Intent 분석...
2025-10-05 14:41:53,347 - app.service_agent.cognitive_agents.planning_agent - INFO - Analyzing intent for query: 이 계약서 검토하고 위험 요소 분석해줘...
2025-10-05 14:41:53,347 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-41b1248b-9e70-42ac-b7c3-8822d5a401ea', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 의도 분석 전문가입니다.\n사용자의 질문을 정확히 이해하고, 어떤 종류의 도움이 필요한지 분류해야 합니다.\n\n## 중요: 복합 질문 처리\n복합적인 질문(여러 의도가 섞인 질문)의 경우, 가장 핵심적인 의도를 파악하되,\nsub_intents 필드에 부가적인 의도들도 함께 기록해주세요.\n\n## 분류 카테고리 설명:\n\n1. **LEGAL_CONSULT (법률상담)**\n   - 설명: 부동산 관련 법률, 권리, 의무에 대한 질문\n   - 예시:\n     * 단순: "전세금 5% 인상이 가능한가요?", "임대차계약 갱신 거부할 수 있나요?"\n     * 복합: "전세금 인상 가능한지 확인하고 법적 근거도 알려주세요"\n   - 키워드: 법, 전세, 임대, 보증금, 계약, 권리, 의무, 갱신, 임차인, 임대인, 법률, 규정, 조항\n   - 필요한 처리: 법률 데이터베이스 검색, 관련 법조항 찾기\n\n2. **MARKET_INQUIRY (시세조회)**\n   - 설명: 부동산 시장 가격, 시세, 거래 동향에 대한 질문\n   - 예시:\n     * 단순: "강남구 아파트 전세 시세 알려주세요", "서초동 매매가 얼마나 올랐나요?"\n     * 복합: "강남구 시세 확인하고 대출 가능 금액도 계산해줘"\n   - 키워드: 시세, 가격, 매매가, 전세가, 월세, 시장, 동향, 평균, 지역명, 상승률, 하락률\n   - 필요한 처리: 부동산 시세 데이터 조회, 지역별 가격 분석\n\n3. **LOAN_CONSULT (대출상담)**\n   - 설명: 주택담보대출, 전세자금대출 등 금융 관련 질문\n   - 예시:\n     * 단순: "전세자금대출 한도가 얼마인가요?", "LTV가 뭔가요?"\n     * 복합: "대출 한도 확인하고 금리 비교도 해주세요"\n   - 키워드: 대출, 금리, 한도, 조건, 상환, LTV, DTI, DSR, 담보, 금융, 은행\n   - 필요한 처리: 대출 상품 조회, 금리 정보 검색, 한도 계산\n\n4. **CONTRACT_CREATION (계약서작성)**\n   - 설명: 새로운 계약서나 문서를 작성해달라는 요청\n   - 예시:\n     * 단순: "임대차계약서 작성해주세요", "전세계약서 초안 만들어주세요"\n     * 복합: "계약서 작성하고 주의사항도 검토해주세요"\n   - 키워드: 작성, 만들, 생성, 초안, 계약서, 문서, 양식\n   - 필요한 처리: 문서 생성 에이전트 호출, 템플릿 기반 작성\n\n5. **CONTRACT_REVIEW (계약서검토)**\n   - 설명: 기존 계약서나 문서를 검토해달라는 요청\n   - 예시:\n     * 단순: "이 계약서 검토해주세요", "특약사항 문제없나요?"\n     * 복합: "계약서 검토하고 수정사항도 제안해주세요"\n   - 키워드: 검토, 확인, 점검, 리뷰, 분석해, 살펴봐, 체크\n   - 필요한 처리: 문서 분석, 위험 요소 식별, 개선사항 제안\n\n6. **COMPREHENSIVE (종합분석)**\n   - 설명: 여러 측면을 종합적으로 분석해달라는 요청\n   - 예시:\n     * 단순: "이 물건 전체적으로 분석해주세요"\n     * 복합: "시세, 법률, 대출 모두 검토해서 종합 의견 주세요"\n   - 키워드: 종합, 전체, 모든, 전반적, 종합적, 평가, 분석\n   - 필요한 처리: 다중 데이터 소스 통합 분석\n\n7. **RISK_ANALYSIS (리스크분석)**\n   - 설명: 위험 요소나 주의사항에 대한 질문\n   - 예시:\n     * 단순: "이 계약 위험한가요?", "주의할 점 알려주세요"\n     * 복합: "리스크 분석하고 대안도 제시해주세요"\n   - 키워드: 위험, 리스크, 주의, 문제점, 조심, 걱정, 우려\n   - 필요한 처리: 위험 요소 분석, 주의사항 추출\n\n8. **UNCLEAR (불분명)**\n   - 설명: 의도를 명확히 파악하기 어려운 질문\n   - 예시: "이거 좀 봐주세요", "어떻게 해야 할까요?", "도와주세요"\n   - 처리: 추가 질문으로 의도 명확화 필요\n\n9. **IRRELEVANT (무관)**\n   - 설명: 부동산과 전혀 관련 없는 질문\n   - 예시: "날씨 어때?", "저녁 뭐 먹지?", "주식 추천해줘"\n   - 처리: 부동산 관련 질문을 유도\n\n## 복합 질문 예시와 분석:\n\n### 예시 1: "강남구 아파트 시세 알려주고 전세자금대출 가능한지도 확인해줘"\n- 주 의도: MARKET_INQUIRY (시세 조회가 먼저 필요)\n- 부가 의도: LOAN_CONSULT (대출 확인)\n- 분해: ["강남구 아파트 시세 조회", "전세자금대출 가능 여부 확인"]\n\n### 예시 2: "이 계약서 검토해서 위험한 부분 있는지 알려주고 수정 제안도 해줘"\n- 주 의도: CONTRACT_REVIEW (계약서 검토)\n- 부가 의도: RISK_ANALYSIS (위험 분석)\n- 분해: ["계약서 전체 검토", "위험 요소 식별", "수정사항 제안"]\n\n### 예시 3: "서초동 전세가 확인하고 법적으로 문제없는지도 봐줘"\n- 주 의도: MARKET_INQUIRY (시세 확인)\n- 부가 의도: LEGAL_CONSULT (법적 검토)\n- 분해: ["서초동 전세가 조회", "법적 이슈 검토"]\n\n## 응답 형식 (JSON 형식으로 응답):\n\n{\n    "intent": "LEGAL_CONSULT",\n    "confidence": 0.9,\n    "keywords": ["전세금", "인상", "제한"],\n    "sub_intents": [],\n    "is_compound": false,\n    "decomposed_tasks": [],\n    "entities": {\n        "location": "강남구",\n        "price": "5억",\n        "contract_type": "전세",\n        "date": "2024년",\n        "area": "84㎡",\n        "action_verbs": ["확인", "검토"]\n    },\n    "reasoning": "전세금 인상에 대한 법률 질문이므로 LEGAL_CONSULT로 분류"\n}\n\n응답 규칙:\n- intent: 위 9개 카테고리 중 하나 (대문자_언더스코어 형식)\n- confidence: 0.0~1.0 (0.8 이상이면 매우 확실, 0.5 미만이면 불확실)\n- keywords: 추출된 주요 키워드 목록\n- sub_intents: 복합 질문일 경우 부가적인 의도들\n- is_compound: 복합 질문 여부 (true/false)\n- decomposed_tasks: 복합 질문을 분해한 개별 작업들\n- entities: 추출된 엔티티 정보\n- reasoning: 분류한 이유와 근거 (상세하게)\n\n## 판단 가이드:\n- 여러 의도가 섞여있다면, 가장 주된 의도를 intent에, 나머지를 sub_intents에 기록\n- "그리고", "또한", "함께", "같이" 등의 연결어가 있으면 복합 질문일 가능성 높음\n- 법률 관련 키워드가 있으면 LEGAL_CONSULT 우선\n- 가격/시세 언급이 명확하면 MARKET_INQUIRY\n- 계약서라는 단어와 함께 "작성/만들기"가 있으면 CONTRACT_CREATION\n- 계약서라는 단어와 함께 "검토/확인"이 있으면 CONTRACT_REVIEW\n- 불확실하면 confidence를 낮게 설정하고 UNCLEAR 선택\n- 복합 질문은 is_compound를 true로 설정하고 개별 작업으로 분해\n\n분석할 질문: 이 계약서 검토하고 위험 요소 분석해줘'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 14:41:53,348 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 14:41:53,348 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 14:41:53,348 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 14:41:53,348 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 14:41:53,348 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 14:41:53,348 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 14:41:56,153 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 05:41:56 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'2522'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'2564'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9915'), (b'x-ratelimit-remaining-tokens', b'198314'), (b'x-ratelimit-reset-requests', b'12m8.714s'), (b'x-ratelimit-reset-tokens', b'505ms'), (b'x-request-id', b'req_8a215bf70d39496bbfc4deb6753c12bf'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989a97b04f9de9fb-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 14:41:56,154 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 14:41:56,154 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 14:41:56,155 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 14:41:56,155 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 14:41:56,155 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 14:41:56,155 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 05:41:56 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '2522', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '2564', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9915', 'x-ratelimit-remaining-tokens': '198314', 'x-ratelimit-reset-requests': '12m8.714s', 'x-ratelimit-reset-tokens': '505ms', 'x-request-id': 'req_8a215bf70d39496bbfc4deb6753c12bf', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989a97b04f9de9fb-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 14:41:56,155 - openai._base_client - DEBUG - request_id: req_8a215bf70d39496bbfc4deb6753c12bf
2025-10-05 14:41:56,156 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: intent_analysis | Model: gpt-4o-mini-2024-07-18 | Tokens: 2048 (prompt: 1921, completion: 127)
2025-10-05 14:41:56,156 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM Intent Analysis Result: {'intent': 'CONTRACT_REVIEW', 'confidence': 0.9, 'keywords': ['계약서', '검토', '위험', '분석'], 'sub_intents': ['RISK_ANALYSIS'], 'is_compound': True, 'decomposed_tasks': ['계약서 검토', '위험 요소 분석'], 'entities': {}, 'reasoning': '계약서 검토와 위험 요소 분석 요청이 포함되어 있어 CONTRACT_REVIEW가 주 의도이며, 위험 분석이 부가적인 의도로 판단됨.'}
2025-10-05 14:41:56,156 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-71d85c04-f8e3-4fa7-90f7-8ae971865007', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 Agent 선택 전문가입니다.\n사용자의 요청에 가장 적합한 Agent/Team을 선택하는 것이 목표입니다.\n\n## 현재 상황\n\n**사용자 질문:** 이 계약서 검토하고 위험 요소 분석해줘\n**분석된 의도:** 계약서검토\n**추출된 키워드:** [\'계약서\', \'검토\', \'위험\', \'분석\']\n\n## 사용 가능한 Agent/Team 정보\n\n{\'search_team\': {\'name\': \'search_team\', \'capabilities\': \'법률 검색, 부동산 시세 조회, 대출 상품 검색\', \'tools\': [\'legal_search\', \'market_data\', \'loan_data\'], \'use_cases\': [\'법률 상담\', \'시세 조회\', \'대출 정보\']}, \'analysis_team\': {\'name\': \'analysis_team\', \'capabilities\': \'데이터 분석, 리스크 평가, 인사이트 생성, 추천\', \'tools\': [\'data_analyzer\', \'risk_evaluator\'], \'use_cases\': [\'시장 분석\', \'리스크 평가\', \'투자 분석\']}, \'document_team\': {\'name\': \'document_team\', \'capabilities\': \'계약서 작성, 문서 생성, 문서 검토\', \'tools\': [\'document_generator\', \'contract_reviewer\'], \'use_cases\': [\'계약서 작성\', \'문서 검토\']}}\n\n## Agent 역할 및 상세 가이드\n\n### 1. search_team (검색 팀)\n- **주요 기능**: 정보 검색 및 데이터 수집\n- **전문 분야**:\n  * 법률 정보 검색 (전세법, 임대차보호법, 부동산 관련 법규)\n  * 부동산 시세 조회 (매매가, 전세가, 월세, 실거래가)\n  * 대출 상품 정보 검색 (금리, 한도, 조건)\n  * 지역 정보 및 인프라 조회\n- **도구**: legal_search, market_data, loan_data\n- **적합한 작업**: 정보 조회, 데이터 수집, 법률 확인, 시세 파악\n- **예시**:\n  * "전세금 5% 인상 가능한가요?"\n  * "강남구 아파트 전세 시세"\n  * "전세자금대출 한도 얼마?"\n\n### 2. analysis_team (분석 팀)\n- **주요 기능**: 데이터 분석 및 평가\n- **전문 분야**:\n  * 시장 동향 분석 (상승률, 하락률, 추세)\n  * 리스크 평가 (계약, 투자 위험도)\n  * 투자 수익률 계산 (ROI, 월세 수익률)\n  * 대출 한도 및 조건 분석 (LTV, DTI, DSR)\n  * 비교 분석 (지역별, 상품별)\n- **도구**: data_analyzer, risk_evaluator, calculator\n- **적합한 작업**: 데이터 분석, 리스크 평가, 계산, 비교, 예측\n- **의존성**: 보통 search_team의 데이터가 필요\n- **예시**:\n  * "이 지역 투자 가치 분석해줘"\n  * "계약 리스크 평가해줘"\n  * "대출 가능 금액 계산해줘"\n\n### 3. document_team (문서 팀)\n- **주요 기능**: 문서 생성 및 관리\n- **전문 분야**:\n  * 계약서 작성 (임대차, 매매, 전세)\n  * 문서 템플릿 관리\n  * 특약사항 생성\n  * 계약서 수정안 작성\n  * 법률 문서 검토\n- **도구**: document_generator, contract_template, contract_reviewer\n- **적합한 작업**: 문서 작성, 계약서 생성, 문서 수정, 검토\n- **예시**:\n  * "임대차계약서 작성해줘"\n  * "특약사항 추가해줘"\n  * "계약서 수정안 만들어줘"\n\n## Agent 선택 전략\n\n### 1단계: 작업 유형 식별\n```\n정보 필요 → search_team\n분석/계산 필요 → analysis_team\n문서 작성 필요 → document_team\n```\n\n### 2단계: 의존성 분석\n```\n독립적 작업 → 단일 팀\n순차적 의존 → 여러 팀 (순서 중요)\n병렬 가능 → 여러 팀 (순서 무관)\n```\n\n### 3단계: 최적화\n```\n중복 제거 → 가장 적합한 팀만 선택\n효율성 → 병렬 처리 가능한 경우 표시\n```\n\n## 의도별 Agent 매핑 가이드\n\n| 의도 (Intent) | 추천 Agent 조합 | 이유 |\n|--------------|-----------------|------|\n| LEGAL_CONSULT | ["search_team"] | 법률 정보 검색 전문 |\n| MARKET_INQUIRY | ["search_team"] | 시세 데이터 조회 |\n| LOAN_CONSULT | ["search_team", "analysis_team"] | 대출 정보 조회 후 분석 |\n| CONTRACT_CREATION | ["document_team"] | 문서 생성 전문 |\n| CONTRACT_REVIEW | ["search_team", "analysis_team"] | 법률 검토 및 리스크 분석 |\n| COMPREHENSIVE | ["search_team", "analysis_team"] | 종합 정보 수집 및 분석 |\n| RISK_ANALYSIS | ["analysis_team"] | 리스크 평가 전문 |\n| UNCLEAR | ["search_team", "analysis_team"] | 포괄적 대응 |\n\n## 복합 질문 처리 예시\n\n### 예시 1: 순차적 처리\n질문: "강남구 시세 확인하고 투자 가치 분석해줘"\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "먼저 search_team이 시세 데이터를 수집하고, 그 결과를 analysis_team이 분석하여 투자 가치 평가"\n}\n```\n\n### 예시 2: 병렬 처리 가능\n질문: "법률 정보와 시세 정보 모두 알려줘"\n```json\n{\n    "selected_agents": ["search_team"],\n    "reasoning": "search_team이 법률과 시세 정보를 병렬로 조회 가능. 두 작업이 독립적이므로 동시 처리"\n}\n```\n\n### 예시 3: 3단계 파이프라인\n질문: "시세 조회하고 분석한 후 계약서 작성해줘"\n```json\n{\n    "selected_agents": ["search_team", "analysis_team", "document_team"],\n    "reasoning": "search_team이 데이터 수집 → analysis_team이 분석 → document_team이 분석 결과 기반 계약서 작성"\n}\n```\n\n## 응답 형식 (JSON)\n\n{\n    "selected_agents": ["선택된 agent/team 목록"],\n    "reasoning": "선택 이유를 구체적으로 설명. 각 Agent의 역할과 처리 순서 포함",\n    "coordination": "single/sequential/parallel/pipeline",\n    "dependencies": {"agent2": ["agent1"]},\n    "estimated_time": 30,\n    "confidence": 0.9\n}\n\n## 선택 가이드라인\n\n1. **최소 Agent 원칙**: 가능한 적은 수의 Agent로 처리\n2. **전문성 우선**: 해당 작업에 가장 전문적인 Agent 선택\n3. **효율성 고려**: 병렬 처리 가능한 경우 명시\n4. **의존성 관리**: 데이터 흐름을 고려한 순서 지정\n5. **폴백 전략**: 불확실한 경우 ["search_team", "analysis_team"] 조합\n\n## 주의사항\n\n- selected_agents는 반드시 배열 형태\n- Agent 이름은 정확히: "search_team", "analysis_team", "document_team"\n- 최소 1개, 최대 3개 선택\n- 순서는 실행 우선순위 (앞에 있을수록 먼저 실행)\n- reasoning은 상세하고 논리적으로 작성\n- coordination 필드로 실행 방식 명시\n- 복합 질문의 경우 의존성 관계 명확히 표시'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 14:41:56,157 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 14:41:56,157 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 14:41:56,157 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 14:41:56,157 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 14:41:56,157 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 14:41:56,157 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 14:41:58,505 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 05:41:58 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'2028'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'2053'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9914'), (b'x-ratelimit-remaining-tokens', b'198430'), (b'x-ratelimit-reset-requests', b'12m14.533s'), (b'x-ratelimit-reset-tokens', b'471ms'), (b'x-request-id', b'req_d0b4aca006774cb3b3cbe551fd9284f9'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989a97c1da44e9fb-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 14:41:58,505 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 14:41:58,506 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 14:41:58,506 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 14:41:58,506 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 14:41:58,506 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 14:41:58,506 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 05:41:58 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '2028', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '2053', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9914', 'x-ratelimit-remaining-tokens': '198430', 'x-ratelimit-reset-requests': '12m14.533s', 'x-ratelimit-reset-tokens': '471ms', 'x-request-id': 'req_d0b4aca006774cb3b3cbe551fd9284f9', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989a97c1da44e9fb-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 14:41:58,506 - openai._base_client - DEBUG - request_id: req_d0b4aca006774cb3b3cbe551fd9284f9
2025-10-05 14:41:58,507 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: agent_selection | Model: gpt-4o-mini-2024-07-18 | Tokens: 1835 (prompt: 1706, completion: 129)
2025-10-05 14:41:58,507 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM agent selection reasoning: 사용자가 계약서 검토와 위험 요소 분석을 요청했으므로, document_team이 계약서를 검토하고, 그 결과를 바탕으로 analysis_team이 리스크를 평가하는 순서로 진행해야 합니다. document_team은 계약서 검토에 전문적이며, analysis_team은 리스크 평가에 특화되어 있습니다.
2025-10-05 14:41:58,507 - app.service_agent.cognitive_agents.planning_agent - INFO - ✅ Primary LLM selected agents: ['document_team', 'analysis_team']
2025-10-05 14:41:58,507 - __main__ - INFO -   의도: 계약서검토
2025-10-05 14:41:58,507 - __main__ - INFO -   신뢰도: 0.90
2025-10-05 14:41:58,507 - __main__ - INFO -   추천 Agent: ['document_team', 'analysis_team']
2025-10-05 14:41:58,507 - __main__ - INFO - 
[Step 2] Query Decomposition...
2025-10-05 14:41:58,507 - app.service_agent.cognitive_agents.query_decomposer - INFO - Decomposing query: 이 계약서 검토하고 위험 요소 분석해줘...
2025-10-05 14:41:58,507 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-12d71369-1e16-49c8-875a-7f34f0c8659d', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 질문 분해 전문가입니다.\n복잡한 사용자 질문을 독립적으로 처리 가능한 작업 단위로 분해하는 것이 목표입니다.\n\n## 중요 원칙:\n1. 각 작업은 하나의 명확한 목표를 가져야 합니다\n2. 작업 간 의존성을 명확히 파악해야 합니다\n3. 병렬 처리 가능한 작업은 구분해야 합니다\n4. 불필요한 분해는 피해야 합니다 (단순 질문은 분해하지 않음)\n\n## 작업 유형 (type):\n- search: 정보 검색 (법률, 시세, 대출 정보 등)\n- analysis: 데이터 분석 (리스크 평가, 시장 분석 등)\n- generation: 문서 생성 (계약서 작성 등)\n- review: 검토/평가 (계약서 검토, 조건 확인 등)\n- calculation: 계산/산출 (대출 한도, 세금 등)\n- comparison: 비교 분석 (여러 옵션 비교)\n\n## 담당 팀 (agent):\n- search_team: 법률, 시세, 대출 정보 검색\n- analysis_team: 데이터 분석, 리스크 평가, 계산\n- document_team: 문서 생성, 계약서 작성\n\n## 학습 예시:\n\n### 예시 1: 복합 질문 (순차적)\n질문: "강남구 아파트 시세 확인하고 대출 가능 금액 계산해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "강남구 아파트 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "대출 가능 금액 계산",\n            "type": "calculation",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "required_data": {"price": "task_0.result.price"},\n            "estimated_time": 15\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "시세 정보가 있어야 대출 금액 계산이 가능하므로 순차 실행"\n}\n```\n\n### 예시 2: 복합 질문 (병렬 가능)\n질문: "이 지역 전세 시세와 매매 시세 모두 알려주고 비교 분석해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "전세 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "매매 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "전세/매매 시세 비교 분석",\n            "type": "comparison",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0", "task_1"],\n            "required_data": {\n                "lease_price": "task_0.result",\n                "sale_price": "task_1.result"\n            },\n            "estimated_time": 25\n        }\n    ],\n    "execution_mode": "mixed",\n    "parallel_groups": [["task_0", "task_1"], ["task_2"]],\n    "reasoning": "시세 조회는 독립적이므로 병렬 처리, 비교는 두 결과 필요"\n}\n```\n\n### 예시 3: 복합 질문 (3단계 이상)\n질문: "이 계약서 검토해서 위험한 부분 찾고 수정안 만들어서 최종 계약서 작성해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "계약서 내용 전체 검토",\n            "type": "review",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 30\n        },\n        {\n            "description": "위험 요소 및 문제점 분석",\n            "type": "analysis",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "estimated_time": 25\n        },\n        {\n            "description": "수정안 제안 생성",\n            "type": "generation",\n            "agent": "document_team",\n            "priority": 3,\n            "depends_on": ["task_1"],\n            "estimated_time": 20\n        },\n        {\n            "description": "최종 계약서 작성",\n            "type": "generation",\n            "agent": "document_team",\n            "priority": 4,\n            "depends_on": ["task_2"],\n            "estimated_time": 30\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "각 단계가 이전 결과에 의존하므로 순차 실행 필요"\n}\n```\n\n### 예시 4: 단순 질문 (분해 불필요)\n질문: "전세금 인상률 상한이 얼마야?"\n분해:\n```json\n{\n    "is_compound": false,\n    "sub_tasks": [\n        {\n            "description": "전세금 인상률 상한 법률 정보 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 15\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "단일 정보 조회 요청으로 분해 불필요"\n}\n```\n\n### 예시 5: 조건부 실행\n질문: "이 물건 시세 확인하고 적정가면 대출 상담도 받고 싶어"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "물건 시세 조회 및 적정성 평가",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 25\n        },\n        {\n            "description": "대출 상담 정보 제공",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "optional": true,\n            "context": {"condition": "if_reasonable_price"},\n            "estimated_time": 20\n        }\n    ],\n    "execution_mode": "conditional",\n    "reasoning": "시세 확인 결과에 따라 대출 상담 진행 여부 결정"\n}\n```\n\n## Chain-of-Thought 프로세스:\n\n1. **질문 분석**: 어떤 정보나 작업을 요구하는가?\n2. **연결어 확인**: "그리고", "또한", "해서", "한 후" 등이 있는가?\n3. **의존성 파악**: 어떤 작업이 다른 작업의 결과를 필요로 하는가?\n4. **병렬성 판단**: 독립적으로 실행 가능한 작업이 있는가?\n5. **최적화**: 불필요한 분해는 없는가?\n\n## 응답 형식 (JSON):\n\n{\n    "is_compound": true/false,\n    "sub_tasks": [\n        {\n            "description": "작업 설명",\n            "type": "작업 유형",\n            "agent": "담당 팀",\n            "priority": 우선순위 (1이 가장 높음),\n            "depends_on": ["선행 작업 ID 리스트"],\n            "required_data": {"필요한 데이터 매핑"},\n            "estimated_time": 예상 소요 시간(초),\n            "optional": true/false,\n            "context": {"추가 컨텍스트"}\n        }\n    ],\n    "execution_mode": "sequential/parallel/mixed/conditional",\n    "parallel_groups": [["병렬 실행 가능한 작업 ID 그룹"]],\n    "confidence": 0.0-1.0,\n    "reasoning": "분해 결정의 이유와 근거"\n}\n\n## 분해 가이드라인:\n\n1. **분해가 필요한 경우**:\n   - 여러 종류의 정보를 요청하는 경우\n   - 순차적 처리가 필요한 경우 (A의 결과로 B 수행)\n   - 서로 다른 팀의 전문성이 필요한 경우\n\n2. **분해가 불필요한 경우**:\n   - 단일 정보 조회\n   - 단순한 질문-답변\n   - 하나의 팀에서 완전히 처리 가능한 경우\n\n3. **병렬 처리 기준**:\n   - 서로 독립적인 정보 조회\n   - 의존성이 없는 분석 작업\n   - 동시에 진행해도 충돌하지 않는 작업\n\n4. **우선순위 설정**:\n   - 의존성이 없는 작업: priority 1\n   - 1차 의존 작업: priority 2\n   - 2차 의존 작업: priority 3\n   - 이런 식으로 증가\n\n현재 의도: 계약서검토\n추출된 엔티티: None\n\n분석할 질문: 이 계약서 검토하고 위험 요소 분석해줘'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 14:41:58,508 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 14:41:58,508 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 14:41:58,508 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 14:41:58,508 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 14:41:58,508 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 14:41:58,508 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 14:42:01,680 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 05:42:01 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'2861'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'2879'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9914'), (b'x-ratelimit-remaining-tokens', b'197997'), (b'x-ratelimit-reset-requests', b'12m20.827s'), (b'x-ratelimit-reset-tokens', b'600ms'), (b'x-request-id', b'req_ced841bb1ca04c65a9a9df401d16ce05'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989a97d08c73e9fb-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 14:42:01,680 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 14:42:01,680 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 14:42:01,680 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 14:42:01,680 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 14:42:01,680 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 14:42:01,680 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 05:42:01 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '2861', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '2879', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9914', 'x-ratelimit-remaining-tokens': '197997', 'x-ratelimit-reset-requests': '12m20.827s', 'x-ratelimit-reset-tokens': '600ms', 'x-request-id': 'req_ced841bb1ca04c65a9a9df401d16ce05', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989a97d08c73e9fb-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 14:42:01,680 - openai._base_client - DEBUG - request_id: req_ced841bb1ca04c65a9a9df401d16ce05
2025-10-05 14:42:01,681 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: query_decomposition | Model: gpt-4o-mini-2024-07-18 | Tokens: 2166 (prompt: 2003, completion: 163)
2025-10-05 14:42:01,681 - app.service_agent.cognitive_agents.query_decomposer - INFO - Successfully decomposed into 2 tasks
2025-10-05 14:42:01,681 - __main__ - INFO -   복합 질문: True
2025-10-05 14:42:01,681 - __main__ - INFO -   작업 수: 2
2025-10-05 14:42:01,681 - __main__ - INFO -   실행 모드: sequential
2025-10-05 14:42:01,681 - __main__ - INFO -     - task_0: 계약서 내용 전체 검토 (search_team)
2025-10-05 14:42:01,681 - __main__ - INFO -     - task_1: 위험 요소 및 문제점 분석 (analysis_team)
2025-10-05 14:42:01,681 - __main__ - INFO - 
[Step 3] Comprehensive Plan 생성...
2025-10-05 14:42:01,681 - app.service_agent.cognitive_agents.planning_agent - INFO - Creating comprehensive plan for query: 이 계약서 검토하고 위험 요소 분석해줘...
2025-10-05 14:42:01,681 - app.service_agent.cognitive_agents.planning_agent - INFO - Analyzing intent for query: 이 계약서 검토하고 위험 요소 분석해줘...
2025-10-05 14:42:01,681 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-b0c7228a-8e3d-471b-a6f2-28c629e0842f', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 의도 분석 전문가입니다.\n사용자의 질문을 정확히 이해하고, 어떤 종류의 도움이 필요한지 분류해야 합니다.\n\n## 중요: 복합 질문 처리\n복합적인 질문(여러 의도가 섞인 질문)의 경우, 가장 핵심적인 의도를 파악하되,\nsub_intents 필드에 부가적인 의도들도 함께 기록해주세요.\n\n## 분류 카테고리 설명:\n\n1. **LEGAL_CONSULT (법률상담)**\n   - 설명: 부동산 관련 법률, 권리, 의무에 대한 질문\n   - 예시:\n     * 단순: "전세금 5% 인상이 가능한가요?", "임대차계약 갱신 거부할 수 있나요?"\n     * 복합: "전세금 인상 가능한지 확인하고 법적 근거도 알려주세요"\n   - 키워드: 법, 전세, 임대, 보증금, 계약, 권리, 의무, 갱신, 임차인, 임대인, 법률, 규정, 조항\n   - 필요한 처리: 법률 데이터베이스 검색, 관련 법조항 찾기\n\n2. **MARKET_INQUIRY (시세조회)**\n   - 설명: 부동산 시장 가격, 시세, 거래 동향에 대한 질문\n   - 예시:\n     * 단순: "강남구 아파트 전세 시세 알려주세요", "서초동 매매가 얼마나 올랐나요?"\n     * 복합: "강남구 시세 확인하고 대출 가능 금액도 계산해줘"\n   - 키워드: 시세, 가격, 매매가, 전세가, 월세, 시장, 동향, 평균, 지역명, 상승률, 하락률\n   - 필요한 처리: 부동산 시세 데이터 조회, 지역별 가격 분석\n\n3. **LOAN_CONSULT (대출상담)**\n   - 설명: 주택담보대출, 전세자금대출 등 금융 관련 질문\n   - 예시:\n     * 단순: "전세자금대출 한도가 얼마인가요?", "LTV가 뭔가요?"\n     * 복합: "대출 한도 확인하고 금리 비교도 해주세요"\n   - 키워드: 대출, 금리, 한도, 조건, 상환, LTV, DTI, DSR, 담보, 금융, 은행\n   - 필요한 처리: 대출 상품 조회, 금리 정보 검색, 한도 계산\n\n4. **CONTRACT_CREATION (계약서작성)**\n   - 설명: 새로운 계약서나 문서를 작성해달라는 요청\n   - 예시:\n     * 단순: "임대차계약서 작성해주세요", "전세계약서 초안 만들어주세요"\n     * 복합: "계약서 작성하고 주의사항도 검토해주세요"\n   - 키워드: 작성, 만들, 생성, 초안, 계약서, 문서, 양식\n   - 필요한 처리: 문서 생성 에이전트 호출, 템플릿 기반 작성\n\n5. **CONTRACT_REVIEW (계약서검토)**\n   - 설명: 기존 계약서나 문서를 검토해달라는 요청\n   - 예시:\n     * 단순: "이 계약서 검토해주세요", "특약사항 문제없나요?"\n     * 복합: "계약서 검토하고 수정사항도 제안해주세요"\n   - 키워드: 검토, 확인, 점검, 리뷰, 분석해, 살펴봐, 체크\n   - 필요한 처리: 문서 분석, 위험 요소 식별, 개선사항 제안\n\n6. **COMPREHENSIVE (종합분석)**\n   - 설명: 여러 측면을 종합적으로 분석해달라는 요청\n   - 예시:\n     * 단순: "이 물건 전체적으로 분석해주세요"\n     * 복합: "시세, 법률, 대출 모두 검토해서 종합 의견 주세요"\n   - 키워드: 종합, 전체, 모든, 전반적, 종합적, 평가, 분석\n   - 필요한 처리: 다중 데이터 소스 통합 분석\n\n7. **RISK_ANALYSIS (리스크분석)**\n   - 설명: 위험 요소나 주의사항에 대한 질문\n   - 예시:\n     * 단순: "이 계약 위험한가요?", "주의할 점 알려주세요"\n     * 복합: "리스크 분석하고 대안도 제시해주세요"\n   - 키워드: 위험, 리스크, 주의, 문제점, 조심, 걱정, 우려\n   - 필요한 처리: 위험 요소 분석, 주의사항 추출\n\n8. **UNCLEAR (불분명)**\n   - 설명: 의도를 명확히 파악하기 어려운 질문\n   - 예시: "이거 좀 봐주세요", "어떻게 해야 할까요?", "도와주세요"\n   - 처리: 추가 질문으로 의도 명확화 필요\n\n9. **IRRELEVANT (무관)**\n   - 설명: 부동산과 전혀 관련 없는 질문\n   - 예시: "날씨 어때?", "저녁 뭐 먹지?", "주식 추천해줘"\n   - 처리: 부동산 관련 질문을 유도\n\n## 복합 질문 예시와 분석:\n\n### 예시 1: "강남구 아파트 시세 알려주고 전세자금대출 가능한지도 확인해줘"\n- 주 의도: MARKET_INQUIRY (시세 조회가 먼저 필요)\n- 부가 의도: LOAN_CONSULT (대출 확인)\n- 분해: ["강남구 아파트 시세 조회", "전세자금대출 가능 여부 확인"]\n\n### 예시 2: "이 계약서 검토해서 위험한 부분 있는지 알려주고 수정 제안도 해줘"\n- 주 의도: CONTRACT_REVIEW (계약서 검토)\n- 부가 의도: RISK_ANALYSIS (위험 분석)\n- 분해: ["계약서 전체 검토", "위험 요소 식별", "수정사항 제안"]\n\n### 예시 3: "서초동 전세가 확인하고 법적으로 문제없는지도 봐줘"\n- 주 의도: MARKET_INQUIRY (시세 확인)\n- 부가 의도: LEGAL_CONSULT (법적 검토)\n- 분해: ["서초동 전세가 조회", "법적 이슈 검토"]\n\n## 응답 형식 (JSON 형식으로 응답):\n\n{\n    "intent": "LEGAL_CONSULT",\n    "confidence": 0.9,\n    "keywords": ["전세금", "인상", "제한"],\n    "sub_intents": [],\n    "is_compound": false,\n    "decomposed_tasks": [],\n    "entities": {\n        "location": "강남구",\n        "price": "5억",\n        "contract_type": "전세",\n        "date": "2024년",\n        "area": "84㎡",\n        "action_verbs": ["확인", "검토"]\n    },\n    "reasoning": "전세금 인상에 대한 법률 질문이므로 LEGAL_CONSULT로 분류"\n}\n\n응답 규칙:\n- intent: 위 9개 카테고리 중 하나 (대문자_언더스코어 형식)\n- confidence: 0.0~1.0 (0.8 이상이면 매우 확실, 0.5 미만이면 불확실)\n- keywords: 추출된 주요 키워드 목록\n- sub_intents: 복합 질문일 경우 부가적인 의도들\n- is_compound: 복합 질문 여부 (true/false)\n- decomposed_tasks: 복합 질문을 분해한 개별 작업들\n- entities: 추출된 엔티티 정보\n- reasoning: 분류한 이유와 근거 (상세하게)\n\n## 판단 가이드:\n- 여러 의도가 섞여있다면, 가장 주된 의도를 intent에, 나머지를 sub_intents에 기록\n- "그리고", "또한", "함께", "같이" 등의 연결어가 있으면 복합 질문일 가능성 높음\n- 법률 관련 키워드가 있으면 LEGAL_CONSULT 우선\n- 가격/시세 언급이 명확하면 MARKET_INQUIRY\n- 계약서라는 단어와 함께 "작성/만들기"가 있으면 CONTRACT_CREATION\n- 계약서라는 단어와 함께 "검토/확인"이 있으면 CONTRACT_REVIEW\n- 불확실하면 confidence를 낮게 설정하고 UNCLEAR 선택\n- 복합 질문은 is_compound를 true로 설정하고 개별 작업으로 분해\n\n분석할 질문: 이 계약서 검토하고 위험 요소 분석해줘'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 14:42:01,682 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 14:42:01,682 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 14:42:01,682 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 14:42:01,682 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 14:42:01,682 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 14:42:01,682 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 14:42:04,733 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 05:42:04 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'2792'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'2808'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9913'), (b'x-ratelimit-remaining-tokens', b'198314'), (b'x-ratelimit-reset-requests', b'12m26.3s'), (b'x-ratelimit-reset-tokens', b'505ms'), (b'x-request-id', b'req_98809c5f429e4347ac5ec9b33b80ba77'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989a97e45d94e9fb-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 14:42:04,733 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 14:42:04,733 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 14:42:04,734 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 14:42:04,734 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 14:42:04,734 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 14:42:04,734 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 05:42:04 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '2792', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '2808', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9913', 'x-ratelimit-remaining-tokens': '198314', 'x-ratelimit-reset-requests': '12m26.3s', 'x-ratelimit-reset-tokens': '505ms', 'x-request-id': 'req_98809c5f429e4347ac5ec9b33b80ba77', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989a97e45d94e9fb-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 14:42:04,734 - openai._base_client - DEBUG - request_id: req_98809c5f429e4347ac5ec9b33b80ba77
2025-10-05 14:42:04,734 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: intent_analysis | Model: gpt-4o-mini-2024-07-18 | Tokens: 2048 (prompt: 1921, completion: 127)
2025-10-05 14:42:04,734 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM Intent Analysis Result: {'intent': 'CONTRACT_REVIEW', 'confidence': 0.9, 'keywords': ['계약서', '검토', '위험', '분석'], 'sub_intents': ['RISK_ANALYSIS'], 'is_compound': True, 'decomposed_tasks': ['계약서 검토', '위험 요소 분석'], 'entities': {}, 'reasoning': '계약서 검토와 위험 요소 분석 요청이 포함되어 있어 CONTRACT_REVIEW가 주 의도이며, 위험 분석이 부가적인 의도로 판단됨.'}
2025-10-05 14:42:04,735 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-13124dde-4138-4d05-b472-dc786b28ca0f', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 Agent 선택 전문가입니다.\n사용자의 요청에 가장 적합한 Agent/Team을 선택하는 것이 목표입니다.\n\n## 현재 상황\n\n**사용자 질문:** 이 계약서 검토하고 위험 요소 분석해줘\n**분석된 의도:** 계약서검토\n**추출된 키워드:** [\'계약서\', \'검토\', \'위험\', \'분석\']\n\n## 사용 가능한 Agent/Team 정보\n\n{\'search_team\': {\'name\': \'search_team\', \'capabilities\': \'법률 검색, 부동산 시세 조회, 대출 상품 검색\', \'tools\': [\'legal_search\', \'market_data\', \'loan_data\'], \'use_cases\': [\'법률 상담\', \'시세 조회\', \'대출 정보\']}, \'analysis_team\': {\'name\': \'analysis_team\', \'capabilities\': \'데이터 분석, 리스크 평가, 인사이트 생성, 추천\', \'tools\': [\'data_analyzer\', \'risk_evaluator\'], \'use_cases\': [\'시장 분석\', \'리스크 평가\', \'투자 분석\']}, \'document_team\': {\'name\': \'document_team\', \'capabilities\': \'계약서 작성, 문서 생성, 문서 검토\', \'tools\': [\'document_generator\', \'contract_reviewer\'], \'use_cases\': [\'계약서 작성\', \'문서 검토\']}}\n\n## Agent 역할 및 상세 가이드\n\n### 1. search_team (검색 팀)\n- **주요 기능**: 정보 검색 및 데이터 수집\n- **전문 분야**:\n  * 법률 정보 검색 (전세법, 임대차보호법, 부동산 관련 법규)\n  * 부동산 시세 조회 (매매가, 전세가, 월세, 실거래가)\n  * 대출 상품 정보 검색 (금리, 한도, 조건)\n  * 지역 정보 및 인프라 조회\n- **도구**: legal_search, market_data, loan_data\n- **적합한 작업**: 정보 조회, 데이터 수집, 법률 확인, 시세 파악\n- **예시**:\n  * "전세금 5% 인상 가능한가요?"\n  * "강남구 아파트 전세 시세"\n  * "전세자금대출 한도 얼마?"\n\n### 2. analysis_team (분석 팀)\n- **주요 기능**: 데이터 분석 및 평가\n- **전문 분야**:\n  * 시장 동향 분석 (상승률, 하락률, 추세)\n  * 리스크 평가 (계약, 투자 위험도)\n  * 투자 수익률 계산 (ROI, 월세 수익률)\n  * 대출 한도 및 조건 분석 (LTV, DTI, DSR)\n  * 비교 분석 (지역별, 상품별)\n- **도구**: data_analyzer, risk_evaluator, calculator\n- **적합한 작업**: 데이터 분석, 리스크 평가, 계산, 비교, 예측\n- **의존성**: 보통 search_team의 데이터가 필요\n- **예시**:\n  * "이 지역 투자 가치 분석해줘"\n  * "계약 리스크 평가해줘"\n  * "대출 가능 금액 계산해줘"\n\n### 3. document_team (문서 팀)\n- **주요 기능**: 문서 생성 및 관리\n- **전문 분야**:\n  * 계약서 작성 (임대차, 매매, 전세)\n  * 문서 템플릿 관리\n  * 특약사항 생성\n  * 계약서 수정안 작성\n  * 법률 문서 검토\n- **도구**: document_generator, contract_template, contract_reviewer\n- **적합한 작업**: 문서 작성, 계약서 생성, 문서 수정, 검토\n- **예시**:\n  * "임대차계약서 작성해줘"\n  * "특약사항 추가해줘"\n  * "계약서 수정안 만들어줘"\n\n## Agent 선택 전략\n\n### 1단계: 작업 유형 식별\n```\n정보 필요 → search_team\n분석/계산 필요 → analysis_team\n문서 작성 필요 → document_team\n```\n\n### 2단계: 의존성 분석\n```\n독립적 작업 → 단일 팀\n순차적 의존 → 여러 팀 (순서 중요)\n병렬 가능 → 여러 팀 (순서 무관)\n```\n\n### 3단계: 최적화\n```\n중복 제거 → 가장 적합한 팀만 선택\n효율성 → 병렬 처리 가능한 경우 표시\n```\n\n## 의도별 Agent 매핑 가이드\n\n| 의도 (Intent) | 추천 Agent 조합 | 이유 |\n|--------------|-----------------|------|\n| LEGAL_CONSULT | ["search_team"] | 법률 정보 검색 전문 |\n| MARKET_INQUIRY | ["search_team"] | 시세 데이터 조회 |\n| LOAN_CONSULT | ["search_team", "analysis_team"] | 대출 정보 조회 후 분석 |\n| CONTRACT_CREATION | ["document_team"] | 문서 생성 전문 |\n| CONTRACT_REVIEW | ["search_team", "analysis_team"] | 법률 검토 및 리스크 분석 |\n| COMPREHENSIVE | ["search_team", "analysis_team"] | 종합 정보 수집 및 분석 |\n| RISK_ANALYSIS | ["analysis_team"] | 리스크 평가 전문 |\n| UNCLEAR | ["search_team", "analysis_team"] | 포괄적 대응 |\n\n## 복합 질문 처리 예시\n\n### 예시 1: 순차적 처리\n질문: "강남구 시세 확인하고 투자 가치 분석해줘"\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "먼저 search_team이 시세 데이터를 수집하고, 그 결과를 analysis_team이 분석하여 투자 가치 평가"\n}\n```\n\n### 예시 2: 병렬 처리 가능\n질문: "법률 정보와 시세 정보 모두 알려줘"\n```json\n{\n    "selected_agents": ["search_team"],\n    "reasoning": "search_team이 법률과 시세 정보를 병렬로 조회 가능. 두 작업이 독립적이므로 동시 처리"\n}\n```\n\n### 예시 3: 3단계 파이프라인\n질문: "시세 조회하고 분석한 후 계약서 작성해줘"\n```json\n{\n    "selected_agents": ["search_team", "analysis_team", "document_team"],\n    "reasoning": "search_team이 데이터 수집 → analysis_team이 분석 → document_team이 분석 결과 기반 계약서 작성"\n}\n```\n\n## 응답 형식 (JSON)\n\n{\n    "selected_agents": ["선택된 agent/team 목록"],\n    "reasoning": "선택 이유를 구체적으로 설명. 각 Agent의 역할과 처리 순서 포함",\n    "coordination": "single/sequential/parallel/pipeline",\n    "dependencies": {"agent2": ["agent1"]},\n    "estimated_time": 30,\n    "confidence": 0.9\n}\n\n## 선택 가이드라인\n\n1. **최소 Agent 원칙**: 가능한 적은 수의 Agent로 처리\n2. **전문성 우선**: 해당 작업에 가장 전문적인 Agent 선택\n3. **효율성 고려**: 병렬 처리 가능한 경우 명시\n4. **의존성 관리**: 데이터 흐름을 고려한 순서 지정\n5. **폴백 전략**: 불확실한 경우 ["search_team", "analysis_team"] 조합\n\n## 주의사항\n\n- selected_agents는 반드시 배열 형태\n- Agent 이름은 정확히: "search_team", "analysis_team", "document_team"\n- 최소 1개, 최대 3개 선택\n- 순서는 실행 우선순위 (앞에 있을수록 먼저 실행)\n- reasoning은 상세하고 논리적으로 작성\n- coordination 필드로 실행 방식 명시\n- 복합 질문의 경우 의존성 관계 명확히 표시'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 14:42:04,735 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 14:42:04,735 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 14:42:04,735 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 14:42:04,735 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 14:42:04,735 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 14:42:04,735 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 14:42:07,312 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 05:42:07 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'2330'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'2345'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9912'), (b'x-ratelimit-remaining-tokens', b'198430'), (b'x-ratelimit-reset-requests', b'12m31.881s'), (b'x-ratelimit-reset-tokens', b'471ms'), (b'x-request-id', b'req_5bb662235b6541a9a0b832ca17661473'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989a97f77cdfe9fb-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 14:42:07,312 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 14:42:07,313 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 14:42:07,313 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 14:42:07,313 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 14:42:07,313 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 14:42:07,313 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 05:42:07 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '2330', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '2345', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9912', 'x-ratelimit-remaining-tokens': '198430', 'x-ratelimit-reset-requests': '12m31.881s', 'x-ratelimit-reset-tokens': '471ms', 'x-request-id': 'req_5bb662235b6541a9a0b832ca17661473', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989a97f77cdfe9fb-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 14:42:07,313 - openai._base_client - DEBUG - request_id: req_5bb662235b6541a9a0b832ca17661473
2025-10-05 14:42:07,314 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: agent_selection | Model: gpt-4o-mini-2024-07-18 | Tokens: 1811 (prompt: 1706, completion: 105)
2025-10-05 14:42:07,314 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM agent selection reasoning: 사용자가 계약서 검토와 위험 요소 분석을 요청했기 때문에, document_team이 계약서를 검토하고, 그 결과를 바탕으로 analysis_team이 리스크를 평가하는 순서로 진행합니다.
2025-10-05 14:42:07,314 - app.service_agent.cognitive_agents.planning_agent - INFO - ✅ Primary LLM selected agents: ['document_team', 'analysis_team']
2025-10-05 14:42:07,314 - app.service_agent.cognitive_agents.planning_agent - INFO - Intent analyzed: 계약서검토 (confidence: 0.90)
2025-10-05 14:42:07,314 - app.service_agent.cognitive_agents.query_decomposer - INFO - Decomposing query: 이 계약서 검토하고 위험 요소 분석해줘...
2025-10-05 14:42:07,314 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-66ac1c30-32b7-4237-8e5a-94612a661ec1', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 질문 분해 전문가입니다.\n복잡한 사용자 질문을 독립적으로 처리 가능한 작업 단위로 분해하는 것이 목표입니다.\n\n## 중요 원칙:\n1. 각 작업은 하나의 명확한 목표를 가져야 합니다\n2. 작업 간 의존성을 명확히 파악해야 합니다\n3. 병렬 처리 가능한 작업은 구분해야 합니다\n4. 불필요한 분해는 피해야 합니다 (단순 질문은 분해하지 않음)\n\n## 작업 유형 (type):\n- search: 정보 검색 (법률, 시세, 대출 정보 등)\n- analysis: 데이터 분석 (리스크 평가, 시장 분석 등)\n- generation: 문서 생성 (계약서 작성 등)\n- review: 검토/평가 (계약서 검토, 조건 확인 등)\n- calculation: 계산/산출 (대출 한도, 세금 등)\n- comparison: 비교 분석 (여러 옵션 비교)\n\n## 담당 팀 (agent):\n- search_team: 법률, 시세, 대출 정보 검색\n- analysis_team: 데이터 분석, 리스크 평가, 계산\n- document_team: 문서 생성, 계약서 작성\n\n## 학습 예시:\n\n### 예시 1: 복합 질문 (순차적)\n질문: "강남구 아파트 시세 확인하고 대출 가능 금액 계산해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "강남구 아파트 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "대출 가능 금액 계산",\n            "type": "calculation",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "required_data": {"price": "task_0.result.price"},\n            "estimated_time": 15\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "시세 정보가 있어야 대출 금액 계산이 가능하므로 순차 실행"\n}\n```\n\n### 예시 2: 복합 질문 (병렬 가능)\n질문: "이 지역 전세 시세와 매매 시세 모두 알려주고 비교 분석해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "전세 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "매매 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "전세/매매 시세 비교 분석",\n            "type": "comparison",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0", "task_1"],\n            "required_data": {\n                "lease_price": "task_0.result",\n                "sale_price": "task_1.result"\n            },\n            "estimated_time": 25\n        }\n    ],\n    "execution_mode": "mixed",\n    "parallel_groups": [["task_0", "task_1"], ["task_2"]],\n    "reasoning": "시세 조회는 독립적이므로 병렬 처리, 비교는 두 결과 필요"\n}\n```\n\n### 예시 3: 복합 질문 (3단계 이상)\n질문: "이 계약서 검토해서 위험한 부분 찾고 수정안 만들어서 최종 계약서 작성해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "계약서 내용 전체 검토",\n            "type": "review",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 30\n        },\n        {\n            "description": "위험 요소 및 문제점 분석",\n            "type": "analysis",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "estimated_time": 25\n        },\n        {\n            "description": "수정안 제안 생성",\n            "type": "generation",\n            "agent": "document_team",\n            "priority": 3,\n            "depends_on": ["task_1"],\n            "estimated_time": 20\n        },\n        {\n            "description": "최종 계약서 작성",\n            "type": "generation",\n            "agent": "document_team",\n            "priority": 4,\n            "depends_on": ["task_2"],\n            "estimated_time": 30\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "각 단계가 이전 결과에 의존하므로 순차 실행 필요"\n}\n```\n\n### 예시 4: 단순 질문 (분해 불필요)\n질문: "전세금 인상률 상한이 얼마야?"\n분해:\n```json\n{\n    "is_compound": false,\n    "sub_tasks": [\n        {\n            "description": "전세금 인상률 상한 법률 정보 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 15\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "단일 정보 조회 요청으로 분해 불필요"\n}\n```\n\n### 예시 5: 조건부 실행\n질문: "이 물건 시세 확인하고 적정가면 대출 상담도 받고 싶어"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "물건 시세 조회 및 적정성 평가",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 25\n        },\n        {\n            "description": "대출 상담 정보 제공",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "optional": true,\n            "context": {"condition": "if_reasonable_price"},\n            "estimated_time": 20\n        }\n    ],\n    "execution_mode": "conditional",\n    "reasoning": "시세 확인 결과에 따라 대출 상담 진행 여부 결정"\n}\n```\n\n## Chain-of-Thought 프로세스:\n\n1. **질문 분석**: 어떤 정보나 작업을 요구하는가?\n2. **연결어 확인**: "그리고", "또한", "해서", "한 후" 등이 있는가?\n3. **의존성 파악**: 어떤 작업이 다른 작업의 결과를 필요로 하는가?\n4. **병렬성 판단**: 독립적으로 실행 가능한 작업이 있는가?\n5. **최적화**: 불필요한 분해는 없는가?\n\n## 응답 형식 (JSON):\n\n{\n    "is_compound": true/false,\n    "sub_tasks": [\n        {\n            "description": "작업 설명",\n            "type": "작업 유형",\n            "agent": "담당 팀",\n            "priority": 우선순위 (1이 가장 높음),\n            "depends_on": ["선행 작업 ID 리스트"],\n            "required_data": {"필요한 데이터 매핑"},\n            "estimated_time": 예상 소요 시간(초),\n            "optional": true/false,\n            "context": {"추가 컨텍스트"}\n        }\n    ],\n    "execution_mode": "sequential/parallel/mixed/conditional",\n    "parallel_groups": [["병렬 실행 가능한 작업 ID 그룹"]],\n    "confidence": 0.0-1.0,\n    "reasoning": "분해 결정의 이유와 근거"\n}\n\n## 분해 가이드라인:\n\n1. **분해가 필요한 경우**:\n   - 여러 종류의 정보를 요청하는 경우\n   - 순차적 처리가 필요한 경우 (A의 결과로 B 수행)\n   - 서로 다른 팀의 전문성이 필요한 경우\n\n2. **분해가 불필요한 경우**:\n   - 단일 정보 조회\n   - 단순한 질문-답변\n   - 하나의 팀에서 완전히 처리 가능한 경우\n\n3. **병렬 처리 기준**:\n   - 서로 독립적인 정보 조회\n   - 의존성이 없는 분석 작업\n   - 동시에 진행해도 충돌하지 않는 작업\n\n4. **우선순위 설정**:\n   - 의존성이 없는 작업: priority 1\n   - 1차 의존 작업: priority 2\n   - 2차 의존 작업: priority 3\n   - 이런 식으로 증가\n\n현재 의도: 계약서검토\n추출된 엔티티: {}\n\n분석할 질문: 이 계약서 검토하고 위험 요소 분석해줘'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 14:42:07,315 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 14:42:07,315 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 14:42:07,315 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 14:42:07,315 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 14:42:07,315 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 14:42:07,315 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 14:42:10,570 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 05:42:10 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'3055'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'3071'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9912'), (b'x-ratelimit-remaining-tokens', b'197998'), (b'x-ratelimit-reset-requests', b'12m37.957s'), (b'x-ratelimit-reset-tokens', b'600ms'), (b'x-request-id', b'req_91b7bac18e2543418774617e71baa860'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989a98078858e9fb-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 14:42:10,570 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 14:42:10,570 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 14:42:10,570 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 14:42:10,571 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 14:42:10,571 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 14:42:10,571 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 05:42:10 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '3055', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '3071', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9912', 'x-ratelimit-remaining-tokens': '197998', 'x-ratelimit-reset-requests': '12m37.957s', 'x-ratelimit-reset-tokens': '600ms', 'x-request-id': 'req_91b7bac18e2543418774617e71baa860', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989a98078858e9fb-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 14:42:10,571 - openai._base_client - DEBUG - request_id: req_91b7bac18e2543418774617e71baa860
2025-10-05 14:42:10,571 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: query_decomposition | Model: gpt-4o-mini-2024-07-18 | Tokens: 2165 (prompt: 2002, completion: 163)
2025-10-05 14:42:10,571 - app.service_agent.cognitive_agents.query_decomposer - INFO - Successfully decomposed into 2 tasks
2025-10-05 14:42:10,571 - app.service_agent.cognitive_agents.planning_agent - INFO - Query decomposed into 2 tasks
2025-10-05 14:42:10,571 - app.service_agent.cognitive_agents.planning_agent - WARNING - Plan validation errors: ["Agent 'search_team' not found in registry", "Agent 'analysis_team' depends on missing 'task_0'", "Agent 'analysis_team' not found in registry"]
2025-10-05 14:42:10,571 - app.service_agent.cognitive_agents.planning_agent - INFO - Optimizing execution plan
2025-10-05 14:42:10,571 - app.service_agent.cognitive_agents.planning_agent - INFO - Comprehensive plan created: Intent: 계약서검토 (confidence: 0.90) | Strategy: sequential | Agents: search_team, analysis_team | Estimated time: 55.0s
2025-10-05 14:42:10,571 - __main__ - INFO -   전략: sequential
2025-10-05 14:42:10,571 - __main__ - INFO -   단계 수: 2
2025-10-05 14:42:10,571 - __main__ - INFO - 
✓ 테스트 성공 (소요시간: 17.22초)
2025-10-05 14:42:10,571 - __main__ - INFO - 
================================================================================
2025-10-05 14:42:10,571 - __main__ - INFO - [24] 복합 질문 테스트: D004
2025-10-05 14:42:10,571 - __main__ - INFO - 질문: 송파구 시세 조회하고 투자 가치 평가해줘
2025-10-05 14:42:10,571 - __main__ - INFO - ================================================================================
2025-10-05 14:42:10,571 - __main__ - INFO - 
[Step 1] Intent 분석...
2025-10-05 14:42:10,571 - app.service_agent.cognitive_agents.planning_agent - INFO - Analyzing intent for query: 송파구 시세 조회하고 투자 가치 평가해줘...
2025-10-05 14:42:10,572 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-f970a7fb-269f-4f94-a59d-5d72c92be6e3', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 의도 분석 전문가입니다.\n사용자의 질문을 정확히 이해하고, 어떤 종류의 도움이 필요한지 분류해야 합니다.\n\n## 중요: 복합 질문 처리\n복합적인 질문(여러 의도가 섞인 질문)의 경우, 가장 핵심적인 의도를 파악하되,\nsub_intents 필드에 부가적인 의도들도 함께 기록해주세요.\n\n## 분류 카테고리 설명:\n\n1. **LEGAL_CONSULT (법률상담)**\n   - 설명: 부동산 관련 법률, 권리, 의무에 대한 질문\n   - 예시:\n     * 단순: "전세금 5% 인상이 가능한가요?", "임대차계약 갱신 거부할 수 있나요?"\n     * 복합: "전세금 인상 가능한지 확인하고 법적 근거도 알려주세요"\n   - 키워드: 법, 전세, 임대, 보증금, 계약, 권리, 의무, 갱신, 임차인, 임대인, 법률, 규정, 조항\n   - 필요한 처리: 법률 데이터베이스 검색, 관련 법조항 찾기\n\n2. **MARKET_INQUIRY (시세조회)**\n   - 설명: 부동산 시장 가격, 시세, 거래 동향에 대한 질문\n   - 예시:\n     * 단순: "강남구 아파트 전세 시세 알려주세요", "서초동 매매가 얼마나 올랐나요?"\n     * 복합: "강남구 시세 확인하고 대출 가능 금액도 계산해줘"\n   - 키워드: 시세, 가격, 매매가, 전세가, 월세, 시장, 동향, 평균, 지역명, 상승률, 하락률\n   - 필요한 처리: 부동산 시세 데이터 조회, 지역별 가격 분석\n\n3. **LOAN_CONSULT (대출상담)**\n   - 설명: 주택담보대출, 전세자금대출 등 금융 관련 질문\n   - 예시:\n     * 단순: "전세자금대출 한도가 얼마인가요?", "LTV가 뭔가요?"\n     * 복합: "대출 한도 확인하고 금리 비교도 해주세요"\n   - 키워드: 대출, 금리, 한도, 조건, 상환, LTV, DTI, DSR, 담보, 금융, 은행\n   - 필요한 처리: 대출 상품 조회, 금리 정보 검색, 한도 계산\n\n4. **CONTRACT_CREATION (계약서작성)**\n   - 설명: 새로운 계약서나 문서를 작성해달라는 요청\n   - 예시:\n     * 단순: "임대차계약서 작성해주세요", "전세계약서 초안 만들어주세요"\n     * 복합: "계약서 작성하고 주의사항도 검토해주세요"\n   - 키워드: 작성, 만들, 생성, 초안, 계약서, 문서, 양식\n   - 필요한 처리: 문서 생성 에이전트 호출, 템플릿 기반 작성\n\n5. **CONTRACT_REVIEW (계약서검토)**\n   - 설명: 기존 계약서나 문서를 검토해달라는 요청\n   - 예시:\n     * 단순: "이 계약서 검토해주세요", "특약사항 문제없나요?"\n     * 복합: "계약서 검토하고 수정사항도 제안해주세요"\n   - 키워드: 검토, 확인, 점검, 리뷰, 분석해, 살펴봐, 체크\n   - 필요한 처리: 문서 분석, 위험 요소 식별, 개선사항 제안\n\n6. **COMPREHENSIVE (종합분석)**\n   - 설명: 여러 측면을 종합적으로 분석해달라는 요청\n   - 예시:\n     * 단순: "이 물건 전체적으로 분석해주세요"\n     * 복합: "시세, 법률, 대출 모두 검토해서 종합 의견 주세요"\n   - 키워드: 종합, 전체, 모든, 전반적, 종합적, 평가, 분석\n   - 필요한 처리: 다중 데이터 소스 통합 분석\n\n7. **RISK_ANALYSIS (리스크분석)**\n   - 설명: 위험 요소나 주의사항에 대한 질문\n   - 예시:\n     * 단순: "이 계약 위험한가요?", "주의할 점 알려주세요"\n     * 복합: "리스크 분석하고 대안도 제시해주세요"\n   - 키워드: 위험, 리스크, 주의, 문제점, 조심, 걱정, 우려\n   - 필요한 처리: 위험 요소 분석, 주의사항 추출\n\n8. **UNCLEAR (불분명)**\n   - 설명: 의도를 명확히 파악하기 어려운 질문\n   - 예시: "이거 좀 봐주세요", "어떻게 해야 할까요?", "도와주세요"\n   - 처리: 추가 질문으로 의도 명확화 필요\n\n9. **IRRELEVANT (무관)**\n   - 설명: 부동산과 전혀 관련 없는 질문\n   - 예시: "날씨 어때?", "저녁 뭐 먹지?", "주식 추천해줘"\n   - 처리: 부동산 관련 질문을 유도\n\n## 복합 질문 예시와 분석:\n\n### 예시 1: "강남구 아파트 시세 알려주고 전세자금대출 가능한지도 확인해줘"\n- 주 의도: MARKET_INQUIRY (시세 조회가 먼저 필요)\n- 부가 의도: LOAN_CONSULT (대출 확인)\n- 분해: ["강남구 아파트 시세 조회", "전세자금대출 가능 여부 확인"]\n\n### 예시 2: "이 계약서 검토해서 위험한 부분 있는지 알려주고 수정 제안도 해줘"\n- 주 의도: CONTRACT_REVIEW (계약서 검토)\n- 부가 의도: RISK_ANALYSIS (위험 분석)\n- 분해: ["계약서 전체 검토", "위험 요소 식별", "수정사항 제안"]\n\n### 예시 3: "서초동 전세가 확인하고 법적으로 문제없는지도 봐줘"\n- 주 의도: MARKET_INQUIRY (시세 확인)\n- 부가 의도: LEGAL_CONSULT (법적 검토)\n- 분해: ["서초동 전세가 조회", "법적 이슈 검토"]\n\n## 응답 형식 (JSON 형식으로 응답):\n\n{\n    "intent": "LEGAL_CONSULT",\n    "confidence": 0.9,\n    "keywords": ["전세금", "인상", "제한"],\n    "sub_intents": [],\n    "is_compound": false,\n    "decomposed_tasks": [],\n    "entities": {\n        "location": "강남구",\n        "price": "5억",\n        "contract_type": "전세",\n        "date": "2024년",\n        "area": "84㎡",\n        "action_verbs": ["확인", "검토"]\n    },\n    "reasoning": "전세금 인상에 대한 법률 질문이므로 LEGAL_CONSULT로 분류"\n}\n\n응답 규칙:\n- intent: 위 9개 카테고리 중 하나 (대문자_언더스코어 형식)\n- confidence: 0.0~1.0 (0.8 이상이면 매우 확실, 0.5 미만이면 불확실)\n- keywords: 추출된 주요 키워드 목록\n- sub_intents: 복합 질문일 경우 부가적인 의도들\n- is_compound: 복합 질문 여부 (true/false)\n- decomposed_tasks: 복합 질문을 분해한 개별 작업들\n- entities: 추출된 엔티티 정보\n- reasoning: 분류한 이유와 근거 (상세하게)\n\n## 판단 가이드:\n- 여러 의도가 섞여있다면, 가장 주된 의도를 intent에, 나머지를 sub_intents에 기록\n- "그리고", "또한", "함께", "같이" 등의 연결어가 있으면 복합 질문일 가능성 높음\n- 법률 관련 키워드가 있으면 LEGAL_CONSULT 우선\n- 가격/시세 언급이 명확하면 MARKET_INQUIRY\n- 계약서라는 단어와 함께 "작성/만들기"가 있으면 CONTRACT_CREATION\n- 계약서라는 단어와 함께 "검토/확인"이 있으면 CONTRACT_REVIEW\n- 불확실하면 confidence를 낮게 설정하고 UNCLEAR 선택\n- 복합 질문은 is_compound를 true로 설정하고 개별 작업으로 분해\n\n분석할 질문: 송파구 시세 조회하고 투자 가치 평가해줘'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 14:42:10,572 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 14:42:10,572 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 14:42:10,572 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 14:42:10,572 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 14:42:10,573 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 14:42:10,573 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 14:42:13,579 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 05:42:13 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'2806'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'2823'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9911'), (b'x-ratelimit-remaining-tokens', b'198314'), (b'x-ratelimit-reset-requests', b'12m43.332s'), (b'x-ratelimit-reset-tokens', b'505ms'), (b'x-request-id', b'req_afeb4d7d34ee4202b3a5395931e68b09'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989a981be831e9fb-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 14:42:13,579 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 14:42:13,579 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 14:42:13,585 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 14:42:13,585 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 14:42:13,585 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 14:42:13,586 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 05:42:13 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '2806', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '2823', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9911', 'x-ratelimit-remaining-tokens': '198314', 'x-ratelimit-reset-requests': '12m43.332s', 'x-ratelimit-reset-tokens': '505ms', 'x-request-id': 'req_afeb4d7d34ee4202b3a5395931e68b09', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989a981be831e9fb-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 14:42:13,586 - openai._base_client - DEBUG - request_id: req_afeb4d7d34ee4202b3a5395931e68b09
2025-10-05 14:42:13,586 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: intent_analysis | Model: gpt-4o-mini-2024-07-18 | Tokens: 2094 (prompt: 1922, completion: 172)
2025-10-05 14:42:13,587 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM Intent Analysis Result: {'intent': 'MARKET_INQUIRY', 'confidence': 0.85, 'keywords': ['송파구', '시세', '투자', '가치', '평가'], 'sub_intents': ['COMPREHENSIVE'], 'is_compound': True, 'decomposed_tasks': ['송파구 시세 조회', '투자 가치 평가'], 'entities': {'location': '송파구', 'action_verbs': ['조회', '평가']}, 'reasoning': '주된 의도는 송파구의 시세 조회이며, 투자 가치 평가가 부가적인 의도로 포함되어 있어 MARKET_INQUIRY로 분류하고, COMPREHENSIVE를 sub_intent로 추가했습니다.'}
2025-10-05 14:42:13,587 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-78cbb7ac-16de-4025-824a-2f68b7c4c6cb', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 Agent 선택 전문가입니다.\n사용자의 요청에 가장 적합한 Agent/Team을 선택하는 것이 목표입니다.\n\n## 현재 상황\n\n**사용자 질문:** 송파구 시세 조회하고 투자 가치 평가해줘\n**분석된 의도:** 시세조회\n**추출된 키워드:** [\'송파구\', \'시세\', \'투자\', \'가치\', \'평가\']\n\n## 사용 가능한 Agent/Team 정보\n\n{\'search_team\': {\'name\': \'search_team\', \'capabilities\': \'법률 검색, 부동산 시세 조회, 대출 상품 검색\', \'tools\': [\'legal_search\', \'market_data\', \'loan_data\'], \'use_cases\': [\'법률 상담\', \'시세 조회\', \'대출 정보\']}, \'analysis_team\': {\'name\': \'analysis_team\', \'capabilities\': \'데이터 분석, 리스크 평가, 인사이트 생성, 추천\', \'tools\': [\'data_analyzer\', \'risk_evaluator\'], \'use_cases\': [\'시장 분석\', \'리스크 평가\', \'투자 분석\']}, \'document_team\': {\'name\': \'document_team\', \'capabilities\': \'계약서 작성, 문서 생성, 문서 검토\', \'tools\': [\'document_generator\', \'contract_reviewer\'], \'use_cases\': [\'계약서 작성\', \'문서 검토\']}}\n\n## Agent 역할 및 상세 가이드\n\n### 1. search_team (검색 팀)\n- **주요 기능**: 정보 검색 및 데이터 수집\n- **전문 분야**:\n  * 법률 정보 검색 (전세법, 임대차보호법, 부동산 관련 법규)\n  * 부동산 시세 조회 (매매가, 전세가, 월세, 실거래가)\n  * 대출 상품 정보 검색 (금리, 한도, 조건)\n  * 지역 정보 및 인프라 조회\n- **도구**: legal_search, market_data, loan_data\n- **적합한 작업**: 정보 조회, 데이터 수집, 법률 확인, 시세 파악\n- **예시**:\n  * "전세금 5% 인상 가능한가요?"\n  * "강남구 아파트 전세 시세"\n  * "전세자금대출 한도 얼마?"\n\n### 2. analysis_team (분석 팀)\n- **주요 기능**: 데이터 분석 및 평가\n- **전문 분야**:\n  * 시장 동향 분석 (상승률, 하락률, 추세)\n  * 리스크 평가 (계약, 투자 위험도)\n  * 투자 수익률 계산 (ROI, 월세 수익률)\n  * 대출 한도 및 조건 분석 (LTV, DTI, DSR)\n  * 비교 분석 (지역별, 상품별)\n- **도구**: data_analyzer, risk_evaluator, calculator\n- **적합한 작업**: 데이터 분석, 리스크 평가, 계산, 비교, 예측\n- **의존성**: 보통 search_team의 데이터가 필요\n- **예시**:\n  * "이 지역 투자 가치 분석해줘"\n  * "계약 리스크 평가해줘"\n  * "대출 가능 금액 계산해줘"\n\n### 3. document_team (문서 팀)\n- **주요 기능**: 문서 생성 및 관리\n- **전문 분야**:\n  * 계약서 작성 (임대차, 매매, 전세)\n  * 문서 템플릿 관리\n  * 특약사항 생성\n  * 계약서 수정안 작성\n  * 법률 문서 검토\n- **도구**: document_generator, contract_template, contract_reviewer\n- **적합한 작업**: 문서 작성, 계약서 생성, 문서 수정, 검토\n- **예시**:\n  * "임대차계약서 작성해줘"\n  * "특약사항 추가해줘"\n  * "계약서 수정안 만들어줘"\n\n## Agent 선택 전략\n\n### 1단계: 작업 유형 식별\n```\n정보 필요 → search_team\n분석/계산 필요 → analysis_team\n문서 작성 필요 → document_team\n```\n\n### 2단계: 의존성 분석\n```\n독립적 작업 → 단일 팀\n순차적 의존 → 여러 팀 (순서 중요)\n병렬 가능 → 여러 팀 (순서 무관)\n```\n\n### 3단계: 최적화\n```\n중복 제거 → 가장 적합한 팀만 선택\n효율성 → 병렬 처리 가능한 경우 표시\n```\n\n## 의도별 Agent 매핑 가이드\n\n| 의도 (Intent) | 추천 Agent 조합 | 이유 |\n|--------------|-----------------|------|\n| LEGAL_CONSULT | ["search_team"] | 법률 정보 검색 전문 |\n| MARKET_INQUIRY | ["search_team"] | 시세 데이터 조회 |\n| LOAN_CONSULT | ["search_team", "analysis_team"] | 대출 정보 조회 후 분석 |\n| CONTRACT_CREATION | ["document_team"] | 문서 생성 전문 |\n| CONTRACT_REVIEW | ["search_team", "analysis_team"] | 법률 검토 및 리스크 분석 |\n| COMPREHENSIVE | ["search_team", "analysis_team"] | 종합 정보 수집 및 분석 |\n| RISK_ANALYSIS | ["analysis_team"] | 리스크 평가 전문 |\n| UNCLEAR | ["search_team", "analysis_team"] | 포괄적 대응 |\n\n## 복합 질문 처리 예시\n\n### 예시 1: 순차적 처리\n질문: "강남구 시세 확인하고 투자 가치 분석해줘"\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "먼저 search_team이 시세 데이터를 수집하고, 그 결과를 analysis_team이 분석하여 투자 가치 평가"\n}\n```\n\n### 예시 2: 병렬 처리 가능\n질문: "법률 정보와 시세 정보 모두 알려줘"\n```json\n{\n    "selected_agents": ["search_team"],\n    "reasoning": "search_team이 법률과 시세 정보를 병렬로 조회 가능. 두 작업이 독립적이므로 동시 처리"\n}\n```\n\n### 예시 3: 3단계 파이프라인\n질문: "시세 조회하고 분석한 후 계약서 작성해줘"\n```json\n{\n    "selected_agents": ["search_team", "analysis_team", "document_team"],\n    "reasoning": "search_team이 데이터 수집 → analysis_team이 분석 → document_team이 분석 결과 기반 계약서 작성"\n}\n```\n\n## 응답 형식 (JSON)\n\n{\n    "selected_agents": ["선택된 agent/team 목록"],\n    "reasoning": "선택 이유를 구체적으로 설명. 각 Agent의 역할과 처리 순서 포함",\n    "coordination": "single/sequential/parallel/pipeline",\n    "dependencies": {"agent2": ["agent1"]},\n    "estimated_time": 30,\n    "confidence": 0.9\n}\n\n## 선택 가이드라인\n\n1. **최소 Agent 원칙**: 가능한 적은 수의 Agent로 처리\n2. **전문성 우선**: 해당 작업에 가장 전문적인 Agent 선택\n3. **효율성 고려**: 병렬 처리 가능한 경우 명시\n4. **의존성 관리**: 데이터 흐름을 고려한 순서 지정\n5. **폴백 전략**: 불확실한 경우 ["search_team", "analysis_team"] 조합\n\n## 주의사항\n\n- selected_agents는 반드시 배열 형태\n- Agent 이름은 정확히: "search_team", "analysis_team", "document_team"\n- 최소 1개, 최대 3개 선택\n- 순서는 실행 우선순위 (앞에 있을수록 먼저 실행)\n- reasoning은 상세하고 논리적으로 작성\n- coordination 필드로 실행 방식 명시\n- 복합 질문의 경우 의존성 관계 명확히 표시'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 14:42:13,589 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 14:42:13,589 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 14:42:13,589 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 14:42:13,589 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 14:42:13,589 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 14:42:13,589 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 14:42:15,902 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 05:42:15 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'2092'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'2125'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9911'), (b'x-ratelimit-remaining-tokens', b'198427'), (b'x-ratelimit-reset-requests', b'12m48.946s'), (b'x-ratelimit-reset-tokens', b'471ms'), (b'x-request-id', b'req_50a8ef9aa7be492a8d14c5ee4e2b3484'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989a982ecb76e9fb-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 14:42:15,903 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 14:42:15,903 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 14:42:15,905 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 14:42:15,905 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 14:42:15,905 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 14:42:15,905 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 05:42:15 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '2092', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '2125', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9911', 'x-ratelimit-remaining-tokens': '198427', 'x-ratelimit-reset-requests': '12m48.946s', 'x-ratelimit-reset-tokens': '471ms', 'x-request-id': 'req_50a8ef9aa7be492a8d14c5ee4e2b3484', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989a982ecb76e9fb-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 14:42:15,905 - openai._base_client - DEBUG - request_id: req_50a8ef9aa7be492a8d14c5ee4e2b3484
2025-10-05 14:42:15,906 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: agent_selection | Model: gpt-4o-mini-2024-07-18 | Tokens: 1824 (prompt: 1710, completion: 114)
2025-10-05 14:42:15,906 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM agent selection reasoning: 사용자가 송파구의 시세를 조회하고 투자 가치를 평가해달라고 요청했기 때문에, 먼저 search_team이 송파구의 시세 데이터를 수집하고, 그 결과를 기반으로 analysis_team이 투자 가치 평가를 진행해야 합니다.
2025-10-05 14:42:15,906 - app.service_agent.cognitive_agents.planning_agent - INFO - ✅ Primary LLM selected agents: ['search_team', 'analysis_team']
2025-10-05 14:42:15,906 - __main__ - INFO -   의도: 시세조회
2025-10-05 14:42:15,906 - __main__ - INFO -   신뢰도: 0.85
2025-10-05 14:42:15,906 - __main__ - INFO -   추천 Agent: ['search_team', 'analysis_team']
2025-10-05 14:42:15,906 - __main__ - INFO - 
[Step 2] Query Decomposition...
2025-10-05 14:42:15,906 - app.service_agent.cognitive_agents.query_decomposer - INFO - Decomposing query: 송파구 시세 조회하고 투자 가치 평가해줘...
2025-10-05 14:42:15,906 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-c52bb3bb-e693-4832-af03-2858396abeb9', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 질문 분해 전문가입니다.\n복잡한 사용자 질문을 독립적으로 처리 가능한 작업 단위로 분해하는 것이 목표입니다.\n\n## 중요 원칙:\n1. 각 작업은 하나의 명확한 목표를 가져야 합니다\n2. 작업 간 의존성을 명확히 파악해야 합니다\n3. 병렬 처리 가능한 작업은 구분해야 합니다\n4. 불필요한 분해는 피해야 합니다 (단순 질문은 분해하지 않음)\n\n## 작업 유형 (type):\n- search: 정보 검색 (법률, 시세, 대출 정보 등)\n- analysis: 데이터 분석 (리스크 평가, 시장 분석 등)\n- generation: 문서 생성 (계약서 작성 등)\n- review: 검토/평가 (계약서 검토, 조건 확인 등)\n- calculation: 계산/산출 (대출 한도, 세금 등)\n- comparison: 비교 분석 (여러 옵션 비교)\n\n## 담당 팀 (agent):\n- search_team: 법률, 시세, 대출 정보 검색\n- analysis_team: 데이터 분석, 리스크 평가, 계산\n- document_team: 문서 생성, 계약서 작성\n\n## 학습 예시:\n\n### 예시 1: 복합 질문 (순차적)\n질문: "강남구 아파트 시세 확인하고 대출 가능 금액 계산해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "강남구 아파트 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "대출 가능 금액 계산",\n            "type": "calculation",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "required_data": {"price": "task_0.result.price"},\n            "estimated_time": 15\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "시세 정보가 있어야 대출 금액 계산이 가능하므로 순차 실행"\n}\n```\n\n### 예시 2: 복합 질문 (병렬 가능)\n질문: "이 지역 전세 시세와 매매 시세 모두 알려주고 비교 분석해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "전세 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "매매 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "전세/매매 시세 비교 분석",\n            "type": "comparison",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0", "task_1"],\n            "required_data": {\n                "lease_price": "task_0.result",\n                "sale_price": "task_1.result"\n            },\n            "estimated_time": 25\n        }\n    ],\n    "execution_mode": "mixed",\n    "parallel_groups": [["task_0", "task_1"], ["task_2"]],\n    "reasoning": "시세 조회는 독립적이므로 병렬 처리, 비교는 두 결과 필요"\n}\n```\n\n### 예시 3: 복합 질문 (3단계 이상)\n질문: "이 계약서 검토해서 위험한 부분 찾고 수정안 만들어서 최종 계약서 작성해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "계약서 내용 전체 검토",\n            "type": "review",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 30\n        },\n        {\n            "description": "위험 요소 및 문제점 분석",\n            "type": "analysis",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "estimated_time": 25\n        },\n        {\n            "description": "수정안 제안 생성",\n            "type": "generation",\n            "agent": "document_team",\n            "priority": 3,\n            "depends_on": ["task_1"],\n            "estimated_time": 20\n        },\n        {\n            "description": "최종 계약서 작성",\n            "type": "generation",\n            "agent": "document_team",\n            "priority": 4,\n            "depends_on": ["task_2"],\n            "estimated_time": 30\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "각 단계가 이전 결과에 의존하므로 순차 실행 필요"\n}\n```\n\n### 예시 4: 단순 질문 (분해 불필요)\n질문: "전세금 인상률 상한이 얼마야?"\n분해:\n```json\n{\n    "is_compound": false,\n    "sub_tasks": [\n        {\n            "description": "전세금 인상률 상한 법률 정보 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 15\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "단일 정보 조회 요청으로 분해 불필요"\n}\n```\n\n### 예시 5: 조건부 실행\n질문: "이 물건 시세 확인하고 적정가면 대출 상담도 받고 싶어"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "물건 시세 조회 및 적정성 평가",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 25\n        },\n        {\n            "description": "대출 상담 정보 제공",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "optional": true,\n            "context": {"condition": "if_reasonable_price"},\n            "estimated_time": 20\n        }\n    ],\n    "execution_mode": "conditional",\n    "reasoning": "시세 확인 결과에 따라 대출 상담 진행 여부 결정"\n}\n```\n\n## Chain-of-Thought 프로세스:\n\n1. **질문 분석**: 어떤 정보나 작업을 요구하는가?\n2. **연결어 확인**: "그리고", "또한", "해서", "한 후" 등이 있는가?\n3. **의존성 파악**: 어떤 작업이 다른 작업의 결과를 필요로 하는가?\n4. **병렬성 판단**: 독립적으로 실행 가능한 작업이 있는가?\n5. **최적화**: 불필요한 분해는 없는가?\n\n## 응답 형식 (JSON):\n\n{\n    "is_compound": true/false,\n    "sub_tasks": [\n        {\n            "description": "작업 설명",\n            "type": "작업 유형",\n            "agent": "담당 팀",\n            "priority": 우선순위 (1이 가장 높음),\n            "depends_on": ["선행 작업 ID 리스트"],\n            "required_data": {"필요한 데이터 매핑"},\n            "estimated_time": 예상 소요 시간(초),\n            "optional": true/false,\n            "context": {"추가 컨텍스트"}\n        }\n    ],\n    "execution_mode": "sequential/parallel/mixed/conditional",\n    "parallel_groups": [["병렬 실행 가능한 작업 ID 그룹"]],\n    "confidence": 0.0-1.0,\n    "reasoning": "분해 결정의 이유와 근거"\n}\n\n## 분해 가이드라인:\n\n1. **분해가 필요한 경우**:\n   - 여러 종류의 정보를 요청하는 경우\n   - 순차적 처리가 필요한 경우 (A의 결과로 B 수행)\n   - 서로 다른 팀의 전문성이 필요한 경우\n\n2. **분해가 불필요한 경우**:\n   - 단일 정보 조회\n   - 단순한 질문-답변\n   - 하나의 팀에서 완전히 처리 가능한 경우\n\n3. **병렬 처리 기준**:\n   - 서로 독립적인 정보 조회\n   - 의존성이 없는 분석 작업\n   - 동시에 진행해도 충돌하지 않는 작업\n\n4. **우선순위 설정**:\n   - 의존성이 없는 작업: priority 1\n   - 1차 의존 작업: priority 2\n   - 2차 의존 작업: priority 3\n   - 이런 식으로 증가\n\n현재 의도: 시세조회\n추출된 엔티티: None\n\n분석할 질문: 송파구 시세 조회하고 투자 가치 평가해줘'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 14:42:15,907 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 14:42:15,907 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 14:42:15,907 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 14:42:15,907 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 14:42:15,907 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 14:42:15,907 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 14:42:19,199 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 05:42:19 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'3082'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'3104'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9910'), (b'x-ratelimit-remaining-tokens', b'197997'), (b'x-ratelimit-reset-requests', b'12m55.27s'), (b'x-ratelimit-reset-tokens', b'600ms'), (b'x-request-id', b'req_b36fedd07dfe4718bfde499454c70b6f'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989a983d4843e9fb-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 14:42:19,199 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 14:42:19,199 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 14:42:19,204 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 14:42:19,204 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 14:42:19,204 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 14:42:19,204 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 05:42:19 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '3082', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '3104', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9910', 'x-ratelimit-remaining-tokens': '197997', 'x-ratelimit-reset-requests': '12m55.27s', 'x-ratelimit-reset-tokens': '600ms', 'x-request-id': 'req_b36fedd07dfe4718bfde499454c70b6f', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989a983d4843e9fb-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 14:42:19,204 - openai._base_client - DEBUG - request_id: req_b36fedd07dfe4718bfde499454c70b6f
2025-10-05 14:42:19,205 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: query_decomposition | Model: gpt-4o-mini-2024-07-18 | Tokens: 2179 (prompt: 2003, completion: 176)
2025-10-05 14:42:19,205 - app.service_agent.cognitive_agents.query_decomposer - INFO - Successfully decomposed into 2 tasks
2025-10-05 14:42:19,205 - __main__ - INFO -   복합 질문: True
2025-10-05 14:42:19,205 - __main__ - INFO -   작업 수: 2
2025-10-05 14:42:19,205 - __main__ - INFO -   실행 모드: sequential
2025-10-05 14:42:19,205 - __main__ - INFO -     - task_0: 송파구 시세 조회 (search_team)
2025-10-05 14:42:19,205 - __main__ - INFO -     - task_1: 송파구 시세에 대한 투자 가치 평가 (analysis_team)
2025-10-05 14:42:19,205 - __main__ - INFO - 
[Step 3] Comprehensive Plan 생성...
2025-10-05 14:42:19,205 - app.service_agent.cognitive_agents.planning_agent - INFO - Creating comprehensive plan for query: 송파구 시세 조회하고 투자 가치 평가해줘...
2025-10-05 14:42:19,205 - app.service_agent.cognitive_agents.planning_agent - INFO - Analyzing intent for query: 송파구 시세 조회하고 투자 가치 평가해줘...
2025-10-05 14:42:19,205 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-39eec1f1-7bc0-4079-a720-ee47d32c9136', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 의도 분석 전문가입니다.\n사용자의 질문을 정확히 이해하고, 어떤 종류의 도움이 필요한지 분류해야 합니다.\n\n## 중요: 복합 질문 처리\n복합적인 질문(여러 의도가 섞인 질문)의 경우, 가장 핵심적인 의도를 파악하되,\nsub_intents 필드에 부가적인 의도들도 함께 기록해주세요.\n\n## 분류 카테고리 설명:\n\n1. **LEGAL_CONSULT (법률상담)**\n   - 설명: 부동산 관련 법률, 권리, 의무에 대한 질문\n   - 예시:\n     * 단순: "전세금 5% 인상이 가능한가요?", "임대차계약 갱신 거부할 수 있나요?"\n     * 복합: "전세금 인상 가능한지 확인하고 법적 근거도 알려주세요"\n   - 키워드: 법, 전세, 임대, 보증금, 계약, 권리, 의무, 갱신, 임차인, 임대인, 법률, 규정, 조항\n   - 필요한 처리: 법률 데이터베이스 검색, 관련 법조항 찾기\n\n2. **MARKET_INQUIRY (시세조회)**\n   - 설명: 부동산 시장 가격, 시세, 거래 동향에 대한 질문\n   - 예시:\n     * 단순: "강남구 아파트 전세 시세 알려주세요", "서초동 매매가 얼마나 올랐나요?"\n     * 복합: "강남구 시세 확인하고 대출 가능 금액도 계산해줘"\n   - 키워드: 시세, 가격, 매매가, 전세가, 월세, 시장, 동향, 평균, 지역명, 상승률, 하락률\n   - 필요한 처리: 부동산 시세 데이터 조회, 지역별 가격 분석\n\n3. **LOAN_CONSULT (대출상담)**\n   - 설명: 주택담보대출, 전세자금대출 등 금융 관련 질문\n   - 예시:\n     * 단순: "전세자금대출 한도가 얼마인가요?", "LTV가 뭔가요?"\n     * 복합: "대출 한도 확인하고 금리 비교도 해주세요"\n   - 키워드: 대출, 금리, 한도, 조건, 상환, LTV, DTI, DSR, 담보, 금융, 은행\n   - 필요한 처리: 대출 상품 조회, 금리 정보 검색, 한도 계산\n\n4. **CONTRACT_CREATION (계약서작성)**\n   - 설명: 새로운 계약서나 문서를 작성해달라는 요청\n   - 예시:\n     * 단순: "임대차계약서 작성해주세요", "전세계약서 초안 만들어주세요"\n     * 복합: "계약서 작성하고 주의사항도 검토해주세요"\n   - 키워드: 작성, 만들, 생성, 초안, 계약서, 문서, 양식\n   - 필요한 처리: 문서 생성 에이전트 호출, 템플릿 기반 작성\n\n5. **CONTRACT_REVIEW (계약서검토)**\n   - 설명: 기존 계약서나 문서를 검토해달라는 요청\n   - 예시:\n     * 단순: "이 계약서 검토해주세요", "특약사항 문제없나요?"\n     * 복합: "계약서 검토하고 수정사항도 제안해주세요"\n   - 키워드: 검토, 확인, 점검, 리뷰, 분석해, 살펴봐, 체크\n   - 필요한 처리: 문서 분석, 위험 요소 식별, 개선사항 제안\n\n6. **COMPREHENSIVE (종합분석)**\n   - 설명: 여러 측면을 종합적으로 분석해달라는 요청\n   - 예시:\n     * 단순: "이 물건 전체적으로 분석해주세요"\n     * 복합: "시세, 법률, 대출 모두 검토해서 종합 의견 주세요"\n   - 키워드: 종합, 전체, 모든, 전반적, 종합적, 평가, 분석\n   - 필요한 처리: 다중 데이터 소스 통합 분석\n\n7. **RISK_ANALYSIS (리스크분석)**\n   - 설명: 위험 요소나 주의사항에 대한 질문\n   - 예시:\n     * 단순: "이 계약 위험한가요?", "주의할 점 알려주세요"\n     * 복합: "리스크 분석하고 대안도 제시해주세요"\n   - 키워드: 위험, 리스크, 주의, 문제점, 조심, 걱정, 우려\n   - 필요한 처리: 위험 요소 분석, 주의사항 추출\n\n8. **UNCLEAR (불분명)**\n   - 설명: 의도를 명확히 파악하기 어려운 질문\n   - 예시: "이거 좀 봐주세요", "어떻게 해야 할까요?", "도와주세요"\n   - 처리: 추가 질문으로 의도 명확화 필요\n\n9. **IRRELEVANT (무관)**\n   - 설명: 부동산과 전혀 관련 없는 질문\n   - 예시: "날씨 어때?", "저녁 뭐 먹지?", "주식 추천해줘"\n   - 처리: 부동산 관련 질문을 유도\n\n## 복합 질문 예시와 분석:\n\n### 예시 1: "강남구 아파트 시세 알려주고 전세자금대출 가능한지도 확인해줘"\n- 주 의도: MARKET_INQUIRY (시세 조회가 먼저 필요)\n- 부가 의도: LOAN_CONSULT (대출 확인)\n- 분해: ["강남구 아파트 시세 조회", "전세자금대출 가능 여부 확인"]\n\n### 예시 2: "이 계약서 검토해서 위험한 부분 있는지 알려주고 수정 제안도 해줘"\n- 주 의도: CONTRACT_REVIEW (계약서 검토)\n- 부가 의도: RISK_ANALYSIS (위험 분석)\n- 분해: ["계약서 전체 검토", "위험 요소 식별", "수정사항 제안"]\n\n### 예시 3: "서초동 전세가 확인하고 법적으로 문제없는지도 봐줘"\n- 주 의도: MARKET_INQUIRY (시세 확인)\n- 부가 의도: LEGAL_CONSULT (법적 검토)\n- 분해: ["서초동 전세가 조회", "법적 이슈 검토"]\n\n## 응답 형식 (JSON 형식으로 응답):\n\n{\n    "intent": "LEGAL_CONSULT",\n    "confidence": 0.9,\n    "keywords": ["전세금", "인상", "제한"],\n    "sub_intents": [],\n    "is_compound": false,\n    "decomposed_tasks": [],\n    "entities": {\n        "location": "강남구",\n        "price": "5억",\n        "contract_type": "전세",\n        "date": "2024년",\n        "area": "84㎡",\n        "action_verbs": ["확인", "검토"]\n    },\n    "reasoning": "전세금 인상에 대한 법률 질문이므로 LEGAL_CONSULT로 분류"\n}\n\n응답 규칙:\n- intent: 위 9개 카테고리 중 하나 (대문자_언더스코어 형식)\n- confidence: 0.0~1.0 (0.8 이상이면 매우 확실, 0.5 미만이면 불확실)\n- keywords: 추출된 주요 키워드 목록\n- sub_intents: 복합 질문일 경우 부가적인 의도들\n- is_compound: 복합 질문 여부 (true/false)\n- decomposed_tasks: 복합 질문을 분해한 개별 작업들\n- entities: 추출된 엔티티 정보\n- reasoning: 분류한 이유와 근거 (상세하게)\n\n## 판단 가이드:\n- 여러 의도가 섞여있다면, 가장 주된 의도를 intent에, 나머지를 sub_intents에 기록\n- "그리고", "또한", "함께", "같이" 등의 연결어가 있으면 복합 질문일 가능성 높음\n- 법률 관련 키워드가 있으면 LEGAL_CONSULT 우선\n- 가격/시세 언급이 명확하면 MARKET_INQUIRY\n- 계약서라는 단어와 함께 "작성/만들기"가 있으면 CONTRACT_CREATION\n- 계약서라는 단어와 함께 "검토/확인"이 있으면 CONTRACT_REVIEW\n- 불확실하면 confidence를 낮게 설정하고 UNCLEAR 선택\n- 복합 질문은 is_compound를 true로 설정하고 개별 작업으로 분해\n\n분석할 질문: 송파구 시세 조회하고 투자 가치 평가해줘'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 14:42:19,206 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 14:42:19,206 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 14:42:19,206 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 14:42:19,206 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 14:42:19,206 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 14:42:19,206 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 14:42:22,405 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 05:42:22 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'3006'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'3018'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9909'), (b'x-ratelimit-remaining-tokens', b'198314'), (b'x-ratelimit-reset-requests', b'13m0.621s'), (b'x-ratelimit-reset-tokens', b'505ms'), (b'x-request-id', b'req_d73489ffa5ee47b79779dd1f219a3e62'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989a9851effde9fb-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 14:42:22,405 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 14:42:22,405 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 14:42:22,408 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 14:42:22,408 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 14:42:22,408 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 14:42:22,408 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 05:42:22 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '3006', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '3018', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9909', 'x-ratelimit-remaining-tokens': '198314', 'x-ratelimit-reset-requests': '13m0.621s', 'x-ratelimit-reset-tokens': '505ms', 'x-request-id': 'req_d73489ffa5ee47b79779dd1f219a3e62', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989a9851effde9fb-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 14:42:22,408 - openai._base_client - DEBUG - request_id: req_d73489ffa5ee47b79779dd1f219a3e62
2025-10-05 14:42:22,409 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: intent_analysis | Model: gpt-4o-mini-2024-07-18 | Tokens: 2074 (prompt: 1922, completion: 152)
2025-10-05 14:42:22,409 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM Intent Analysis Result: {'intent': 'MARKET_INQUIRY', 'confidence': 0.85, 'keywords': ['송파구', '시세', '투자 가치'], 'sub_intents': ['COMPREHENSIVE'], 'is_compound': True, 'decomposed_tasks': ['송파구 시세 조회', '투자 가치 평가'], 'entities': {'location': '송파구', 'action_verbs': ['조회', '평가']}, 'reasoning': '시세 조회가 주된 요청이며, 투자 가치 평가가 부가적인 요청으로 포함되어 있어 MARKET_INQUIRY와 COMPREHENSIVE로 분류'}
2025-10-05 14:42:22,409 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-fe4947be-ae86-4a69-9693-3639da0d4fcb', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 Agent 선택 전문가입니다.\n사용자의 요청에 가장 적합한 Agent/Team을 선택하는 것이 목표입니다.\n\n## 현재 상황\n\n**사용자 질문:** 송파구 시세 조회하고 투자 가치 평가해줘\n**분석된 의도:** 시세조회\n**추출된 키워드:** [\'송파구\', \'시세\', \'투자 가치\']\n\n## 사용 가능한 Agent/Team 정보\n\n{\'search_team\': {\'name\': \'search_team\', \'capabilities\': \'법률 검색, 부동산 시세 조회, 대출 상품 검색\', \'tools\': [\'legal_search\', \'market_data\', \'loan_data\'], \'use_cases\': [\'법률 상담\', \'시세 조회\', \'대출 정보\']}, \'analysis_team\': {\'name\': \'analysis_team\', \'capabilities\': \'데이터 분석, 리스크 평가, 인사이트 생성, 추천\', \'tools\': [\'data_analyzer\', \'risk_evaluator\'], \'use_cases\': [\'시장 분석\', \'리스크 평가\', \'투자 분석\']}, \'document_team\': {\'name\': \'document_team\', \'capabilities\': \'계약서 작성, 문서 생성, 문서 검토\', \'tools\': [\'document_generator\', \'contract_reviewer\'], \'use_cases\': [\'계약서 작성\', \'문서 검토\']}}\n\n## Agent 역할 및 상세 가이드\n\n### 1. search_team (검색 팀)\n- **주요 기능**: 정보 검색 및 데이터 수집\n- **전문 분야**:\n  * 법률 정보 검색 (전세법, 임대차보호법, 부동산 관련 법규)\n  * 부동산 시세 조회 (매매가, 전세가, 월세, 실거래가)\n  * 대출 상품 정보 검색 (금리, 한도, 조건)\n  * 지역 정보 및 인프라 조회\n- **도구**: legal_search, market_data, loan_data\n- **적합한 작업**: 정보 조회, 데이터 수집, 법률 확인, 시세 파악\n- **예시**:\n  * "전세금 5% 인상 가능한가요?"\n  * "강남구 아파트 전세 시세"\n  * "전세자금대출 한도 얼마?"\n\n### 2. analysis_team (분석 팀)\n- **주요 기능**: 데이터 분석 및 평가\n- **전문 분야**:\n  * 시장 동향 분석 (상승률, 하락률, 추세)\n  * 리스크 평가 (계약, 투자 위험도)\n  * 투자 수익률 계산 (ROI, 월세 수익률)\n  * 대출 한도 및 조건 분석 (LTV, DTI, DSR)\n  * 비교 분석 (지역별, 상품별)\n- **도구**: data_analyzer, risk_evaluator, calculator\n- **적합한 작업**: 데이터 분석, 리스크 평가, 계산, 비교, 예측\n- **의존성**: 보통 search_team의 데이터가 필요\n- **예시**:\n  * "이 지역 투자 가치 분석해줘"\n  * "계약 리스크 평가해줘"\n  * "대출 가능 금액 계산해줘"\n\n### 3. document_team (문서 팀)\n- **주요 기능**: 문서 생성 및 관리\n- **전문 분야**:\n  * 계약서 작성 (임대차, 매매, 전세)\n  * 문서 템플릿 관리\n  * 특약사항 생성\n  * 계약서 수정안 작성\n  * 법률 문서 검토\n- **도구**: document_generator, contract_template, contract_reviewer\n- **적합한 작업**: 문서 작성, 계약서 생성, 문서 수정, 검토\n- **예시**:\n  * "임대차계약서 작성해줘"\n  * "특약사항 추가해줘"\n  * "계약서 수정안 만들어줘"\n\n## Agent 선택 전략\n\n### 1단계: 작업 유형 식별\n```\n정보 필요 → search_team\n분석/계산 필요 → analysis_team\n문서 작성 필요 → document_team\n```\n\n### 2단계: 의존성 분석\n```\n독립적 작업 → 단일 팀\n순차적 의존 → 여러 팀 (순서 중요)\n병렬 가능 → 여러 팀 (순서 무관)\n```\n\n### 3단계: 최적화\n```\n중복 제거 → 가장 적합한 팀만 선택\n효율성 → 병렬 처리 가능한 경우 표시\n```\n\n## 의도별 Agent 매핑 가이드\n\n| 의도 (Intent) | 추천 Agent 조합 | 이유 |\n|--------------|-----------------|------|\n| LEGAL_CONSULT | ["search_team"] | 법률 정보 검색 전문 |\n| MARKET_INQUIRY | ["search_team"] | 시세 데이터 조회 |\n| LOAN_CONSULT | ["search_team", "analysis_team"] | 대출 정보 조회 후 분석 |\n| CONTRACT_CREATION | ["document_team"] | 문서 생성 전문 |\n| CONTRACT_REVIEW | ["search_team", "analysis_team"] | 법률 검토 및 리스크 분석 |\n| COMPREHENSIVE | ["search_team", "analysis_team"] | 종합 정보 수집 및 분석 |\n| RISK_ANALYSIS | ["analysis_team"] | 리스크 평가 전문 |\n| UNCLEAR | ["search_team", "analysis_team"] | 포괄적 대응 |\n\n## 복합 질문 처리 예시\n\n### 예시 1: 순차적 처리\n질문: "강남구 시세 확인하고 투자 가치 분석해줘"\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "먼저 search_team이 시세 데이터를 수집하고, 그 결과를 analysis_team이 분석하여 투자 가치 평가"\n}\n```\n\n### 예시 2: 병렬 처리 가능\n질문: "법률 정보와 시세 정보 모두 알려줘"\n```json\n{\n    "selected_agents": ["search_team"],\n    "reasoning": "search_team이 법률과 시세 정보를 병렬로 조회 가능. 두 작업이 독립적이므로 동시 처리"\n}\n```\n\n### 예시 3: 3단계 파이프라인\n질문: "시세 조회하고 분석한 후 계약서 작성해줘"\n```json\n{\n    "selected_agents": ["search_team", "analysis_team", "document_team"],\n    "reasoning": "search_team이 데이터 수집 → analysis_team이 분석 → document_team이 분석 결과 기반 계약서 작성"\n}\n```\n\n## 응답 형식 (JSON)\n\n{\n    "selected_agents": ["선택된 agent/team 목록"],\n    "reasoning": "선택 이유를 구체적으로 설명. 각 Agent의 역할과 처리 순서 포함",\n    "coordination": "single/sequential/parallel/pipeline",\n    "dependencies": {"agent2": ["agent1"]},\n    "estimated_time": 30,\n    "confidence": 0.9\n}\n\n## 선택 가이드라인\n\n1. **최소 Agent 원칙**: 가능한 적은 수의 Agent로 처리\n2. **전문성 우선**: 해당 작업에 가장 전문적인 Agent 선택\n3. **효율성 고려**: 병렬 처리 가능한 경우 명시\n4. **의존성 관리**: 데이터 흐름을 고려한 순서 지정\n5. **폴백 전략**: 불확실한 경우 ["search_team", "analysis_team"] 조합\n\n## 주의사항\n\n- selected_agents는 반드시 배열 형태\n- Agent 이름은 정확히: "search_team", "analysis_team", "document_team"\n- 최소 1개, 최대 3개 선택\n- 순서는 실행 우선순위 (앞에 있을수록 먼저 실행)\n- reasoning은 상세하고 논리적으로 작성\n- coordination 필드로 실행 방식 명시\n- 복합 질문의 경우 의존성 관계 명확히 표시'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 14:42:22,410 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 14:42:22,410 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 14:42:22,410 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 14:42:22,410 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 14:42:22,410 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 14:42:22,410 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 14:42:25,133 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 05:42:25 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'2507'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'2534'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9909'), (b'x-ratelimit-remaining-tokens', b'198431'), (b'x-ratelimit-reset-requests', b'13m6.043s'), (b'x-ratelimit-reset-tokens', b'470ms'), (b'x-request-id', b'req_ad905a24d0484f3da73d574ce1416719'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989a9865edc9e9fb-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 14:42:25,133 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 14:42:25,133 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 14:42:25,138 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 14:42:25,138 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 14:42:25,138 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 14:42:25,139 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 05:42:25 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '2507', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '2534', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9909', 'x-ratelimit-remaining-tokens': '198431', 'x-ratelimit-reset-requests': '13m6.043s', 'x-ratelimit-reset-tokens': '470ms', 'x-request-id': 'req_ad905a24d0484f3da73d574ce1416719', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989a9865edc9e9fb-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 14:42:25,139 - openai._base_client - DEBUG - request_id: req_ad905a24d0484f3da73d574ce1416719
2025-10-05 14:42:25,139 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: agent_selection | Model: gpt-4o-mini-2024-07-18 | Tokens: 1815 (prompt: 1703, completion: 112)
2025-10-05 14:42:25,139 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM agent selection reasoning: 먼저 search_team이 송파구의 시세 데이터를 수집하고, 그 결과를 analysis_team이 분석하여 투자 가치를 평가합니다. 시세 조회가 먼저 이루어져야 투자 가치 평가가 가능하기 때문에 순차적으로 진행됩니다.
2025-10-05 14:42:25,139 - app.service_agent.cognitive_agents.planning_agent - INFO - ✅ Primary LLM selected agents: ['search_team', 'analysis_team']
2025-10-05 14:42:25,139 - app.service_agent.cognitive_agents.planning_agent - INFO - Intent analyzed: 시세조회 (confidence: 0.85)
2025-10-05 14:42:25,139 - app.service_agent.cognitive_agents.query_decomposer - INFO - Decomposing query: 송파구 시세 조회하고 투자 가치 평가해줘...
2025-10-05 14:42:25,140 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-56984df0-da0b-4f04-b7f0-c87dc35a4db3', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 질문 분해 전문가입니다.\n복잡한 사용자 질문을 독립적으로 처리 가능한 작업 단위로 분해하는 것이 목표입니다.\n\n## 중요 원칙:\n1. 각 작업은 하나의 명확한 목표를 가져야 합니다\n2. 작업 간 의존성을 명확히 파악해야 합니다\n3. 병렬 처리 가능한 작업은 구분해야 합니다\n4. 불필요한 분해는 피해야 합니다 (단순 질문은 분해하지 않음)\n\n## 작업 유형 (type):\n- search: 정보 검색 (법률, 시세, 대출 정보 등)\n- analysis: 데이터 분석 (리스크 평가, 시장 분석 등)\n- generation: 문서 생성 (계약서 작성 등)\n- review: 검토/평가 (계약서 검토, 조건 확인 등)\n- calculation: 계산/산출 (대출 한도, 세금 등)\n- comparison: 비교 분석 (여러 옵션 비교)\n\n## 담당 팀 (agent):\n- search_team: 법률, 시세, 대출 정보 검색\n- analysis_team: 데이터 분석, 리스크 평가, 계산\n- document_team: 문서 생성, 계약서 작성\n\n## 학습 예시:\n\n### 예시 1: 복합 질문 (순차적)\n질문: "강남구 아파트 시세 확인하고 대출 가능 금액 계산해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "강남구 아파트 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "대출 가능 금액 계산",\n            "type": "calculation",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "required_data": {"price": "task_0.result.price"},\n            "estimated_time": 15\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "시세 정보가 있어야 대출 금액 계산이 가능하므로 순차 실행"\n}\n```\n\n### 예시 2: 복합 질문 (병렬 가능)\n질문: "이 지역 전세 시세와 매매 시세 모두 알려주고 비교 분석해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "전세 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "매매 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "전세/매매 시세 비교 분석",\n            "type": "comparison",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0", "task_1"],\n            "required_data": {\n                "lease_price": "task_0.result",\n                "sale_price": "task_1.result"\n            },\n            "estimated_time": 25\n        }\n    ],\n    "execution_mode": "mixed",\n    "parallel_groups": [["task_0", "task_1"], ["task_2"]],\n    "reasoning": "시세 조회는 독립적이므로 병렬 처리, 비교는 두 결과 필요"\n}\n```\n\n### 예시 3: 복합 질문 (3단계 이상)\n질문: "이 계약서 검토해서 위험한 부분 찾고 수정안 만들어서 최종 계약서 작성해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "계약서 내용 전체 검토",\n            "type": "review",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 30\n        },\n        {\n            "description": "위험 요소 및 문제점 분석",\n            "type": "analysis",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "estimated_time": 25\n        },\n        {\n            "description": "수정안 제안 생성",\n            "type": "generation",\n            "agent": "document_team",\n            "priority": 3,\n            "depends_on": ["task_1"],\n            "estimated_time": 20\n        },\n        {\n            "description": "최종 계약서 작성",\n            "type": "generation",\n            "agent": "document_team",\n            "priority": 4,\n            "depends_on": ["task_2"],\n            "estimated_time": 30\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "각 단계가 이전 결과에 의존하므로 순차 실행 필요"\n}\n```\n\n### 예시 4: 단순 질문 (분해 불필요)\n질문: "전세금 인상률 상한이 얼마야?"\n분해:\n```json\n{\n    "is_compound": false,\n    "sub_tasks": [\n        {\n            "description": "전세금 인상률 상한 법률 정보 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 15\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "단일 정보 조회 요청으로 분해 불필요"\n}\n```\n\n### 예시 5: 조건부 실행\n질문: "이 물건 시세 확인하고 적정가면 대출 상담도 받고 싶어"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "물건 시세 조회 및 적정성 평가",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 25\n        },\n        {\n            "description": "대출 상담 정보 제공",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "optional": true,\n            "context": {"condition": "if_reasonable_price"},\n            "estimated_time": 20\n        }\n    ],\n    "execution_mode": "conditional",\n    "reasoning": "시세 확인 결과에 따라 대출 상담 진행 여부 결정"\n}\n```\n\n## Chain-of-Thought 프로세스:\n\n1. **질문 분석**: 어떤 정보나 작업을 요구하는가?\n2. **연결어 확인**: "그리고", "또한", "해서", "한 후" 등이 있는가?\n3. **의존성 파악**: 어떤 작업이 다른 작업의 결과를 필요로 하는가?\n4. **병렬성 판단**: 독립적으로 실행 가능한 작업이 있는가?\n5. **최적화**: 불필요한 분해는 없는가?\n\n## 응답 형식 (JSON):\n\n{\n    "is_compound": true/false,\n    "sub_tasks": [\n        {\n            "description": "작업 설명",\n            "type": "작업 유형",\n            "agent": "담당 팀",\n            "priority": 우선순위 (1이 가장 높음),\n            "depends_on": ["선행 작업 ID 리스트"],\n            "required_data": {"필요한 데이터 매핑"},\n            "estimated_time": 예상 소요 시간(초),\n            "optional": true/false,\n            "context": {"추가 컨텍스트"}\n        }\n    ],\n    "execution_mode": "sequential/parallel/mixed/conditional",\n    "parallel_groups": [["병렬 실행 가능한 작업 ID 그룹"]],\n    "confidence": 0.0-1.0,\n    "reasoning": "분해 결정의 이유와 근거"\n}\n\n## 분해 가이드라인:\n\n1. **분해가 필요한 경우**:\n   - 여러 종류의 정보를 요청하는 경우\n   - 순차적 처리가 필요한 경우 (A의 결과로 B 수행)\n   - 서로 다른 팀의 전문성이 필요한 경우\n\n2. **분해가 불필요한 경우**:\n   - 단일 정보 조회\n   - 단순한 질문-답변\n   - 하나의 팀에서 완전히 처리 가능한 경우\n\n3. **병렬 처리 기준**:\n   - 서로 독립적인 정보 조회\n   - 의존성이 없는 분석 작업\n   - 동시에 진행해도 충돌하지 않는 작업\n\n4. **우선순위 설정**:\n   - 의존성이 없는 작업: priority 1\n   - 1차 의존 작업: priority 2\n   - 2차 의존 작업: priority 3\n   - 이런 식으로 증가\n\n현재 의도: 시세조회\n추출된 엔티티: {\'location\': \'송파구\', \'action_verbs\': [\'조회\', \'평가\']}\n\n분석할 질문: 송파구 시세 조회하고 투자 가치 평가해줘'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 14:42:25,140 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 14:42:25,141 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 14:42:25,141 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 14:42:25,141 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 14:42:25,141 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 14:42:25,141 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 14:42:28,917 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 05:42:28 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'3477'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'3495'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9908'), (b'x-ratelimit-remaining-tokens', b'197983'), (b'x-ratelimit-reset-requests', b'13m11.971s'), (b'x-ratelimit-reset-tokens', b'605ms'), (b'x-request-id', b'req_f9f1ca9bdc5547a28f79da09f2c0af63'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989a9876fd30e9fb-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 14:42:28,918 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 14:42:28,918 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 14:42:28,918 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 14:42:28,918 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 14:42:28,918 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 14:42:28,918 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 05:42:28 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '3477', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '3495', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9908', 'x-ratelimit-remaining-tokens': '197983', 'x-ratelimit-reset-requests': '13m11.971s', 'x-ratelimit-reset-tokens': '605ms', 'x-request-id': 'req_f9f1ca9bdc5547a28f79da09f2c0af63', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989a9876fd30e9fb-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 14:42:28,918 - openai._base_client - DEBUG - request_id: req_f9f1ca9bdc5547a28f79da09f2c0af63
2025-10-05 14:42:28,919 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: query_decomposition | Model: gpt-4o-mini-2024-07-18 | Tokens: 2198 (prompt: 2022, completion: 176)
2025-10-05 14:42:28,919 - app.service_agent.cognitive_agents.query_decomposer - INFO - Successfully decomposed into 2 tasks
2025-10-05 14:42:28,919 - app.service_agent.cognitive_agents.planning_agent - INFO - Query decomposed into 2 tasks
2025-10-05 14:42:28,919 - app.service_agent.cognitive_agents.planning_agent - WARNING - Plan validation errors: ["Agent 'search_team' not found in registry", "Agent 'analysis_team' depends on missing 'task_0'", "Agent 'analysis_team' not found in registry"]
2025-10-05 14:42:28,919 - app.service_agent.cognitive_agents.planning_agent - INFO - Optimizing execution plan
2025-10-05 14:42:28,919 - app.service_agent.cognitive_agents.planning_agent - INFO - Comprehensive plan created: Intent: 시세조회 (confidence: 0.85) | Strategy: sequential | Agents: search_team, analysis_team | Estimated time: 45.0s
2025-10-05 14:42:28,919 - __main__ - INFO -   전략: sequential
2025-10-05 14:42:28,919 - __main__ - INFO -   단계 수: 2
2025-10-05 14:42:28,919 - __main__ - INFO - 
✓ 테스트 성공 (소요시간: 18.35초)
2025-10-05 14:42:28,919 - __main__ - INFO - 
================================================================================
2025-10-05 14:42:28,919 - __main__ - INFO - [25] 복합 질문 테스트: D005
2025-10-05 14:42:28,919 - __main__ - INFO - 질문: 전세금 인상 가능 여부 확인하고 관련 법조항 찾아줘
2025-10-05 14:42:28,919 - __main__ - INFO - ================================================================================
2025-10-05 14:42:28,919 - __main__ - INFO - 
[Step 1] Intent 분석...
2025-10-05 14:42:28,919 - app.service_agent.cognitive_agents.planning_agent - INFO - Analyzing intent for query: 전세금 인상 가능 여부 확인하고 관련 법조항 찾아줘...
2025-10-05 14:42:28,920 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-a5b8ab51-4574-4631-8c96-d162c0494d4f', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 의도 분석 전문가입니다.\n사용자의 질문을 정확히 이해하고, 어떤 종류의 도움이 필요한지 분류해야 합니다.\n\n## 중요: 복합 질문 처리\n복합적인 질문(여러 의도가 섞인 질문)의 경우, 가장 핵심적인 의도를 파악하되,\nsub_intents 필드에 부가적인 의도들도 함께 기록해주세요.\n\n## 분류 카테고리 설명:\n\n1. **LEGAL_CONSULT (법률상담)**\n   - 설명: 부동산 관련 법률, 권리, 의무에 대한 질문\n   - 예시:\n     * 단순: "전세금 5% 인상이 가능한가요?", "임대차계약 갱신 거부할 수 있나요?"\n     * 복합: "전세금 인상 가능한지 확인하고 법적 근거도 알려주세요"\n   - 키워드: 법, 전세, 임대, 보증금, 계약, 권리, 의무, 갱신, 임차인, 임대인, 법률, 규정, 조항\n   - 필요한 처리: 법률 데이터베이스 검색, 관련 법조항 찾기\n\n2. **MARKET_INQUIRY (시세조회)**\n   - 설명: 부동산 시장 가격, 시세, 거래 동향에 대한 질문\n   - 예시:\n     * 단순: "강남구 아파트 전세 시세 알려주세요", "서초동 매매가 얼마나 올랐나요?"\n     * 복합: "강남구 시세 확인하고 대출 가능 금액도 계산해줘"\n   - 키워드: 시세, 가격, 매매가, 전세가, 월세, 시장, 동향, 평균, 지역명, 상승률, 하락률\n   - 필요한 처리: 부동산 시세 데이터 조회, 지역별 가격 분석\n\n3. **LOAN_CONSULT (대출상담)**\n   - 설명: 주택담보대출, 전세자금대출 등 금융 관련 질문\n   - 예시:\n     * 단순: "전세자금대출 한도가 얼마인가요?", "LTV가 뭔가요?"\n     * 복합: "대출 한도 확인하고 금리 비교도 해주세요"\n   - 키워드: 대출, 금리, 한도, 조건, 상환, LTV, DTI, DSR, 담보, 금융, 은행\n   - 필요한 처리: 대출 상품 조회, 금리 정보 검색, 한도 계산\n\n4. **CONTRACT_CREATION (계약서작성)**\n   - 설명: 새로운 계약서나 문서를 작성해달라는 요청\n   - 예시:\n     * 단순: "임대차계약서 작성해주세요", "전세계약서 초안 만들어주세요"\n     * 복합: "계약서 작성하고 주의사항도 검토해주세요"\n   - 키워드: 작성, 만들, 생성, 초안, 계약서, 문서, 양식\n   - 필요한 처리: 문서 생성 에이전트 호출, 템플릿 기반 작성\n\n5. **CONTRACT_REVIEW (계약서검토)**\n   - 설명: 기존 계약서나 문서를 검토해달라는 요청\n   - 예시:\n     * 단순: "이 계약서 검토해주세요", "특약사항 문제없나요?"\n     * 복합: "계약서 검토하고 수정사항도 제안해주세요"\n   - 키워드: 검토, 확인, 점검, 리뷰, 분석해, 살펴봐, 체크\n   - 필요한 처리: 문서 분석, 위험 요소 식별, 개선사항 제안\n\n6. **COMPREHENSIVE (종합분석)**\n   - 설명: 여러 측면을 종합적으로 분석해달라는 요청\n   - 예시:\n     * 단순: "이 물건 전체적으로 분석해주세요"\n     * 복합: "시세, 법률, 대출 모두 검토해서 종합 의견 주세요"\n   - 키워드: 종합, 전체, 모든, 전반적, 종합적, 평가, 분석\n   - 필요한 처리: 다중 데이터 소스 통합 분석\n\n7. **RISK_ANALYSIS (리스크분석)**\n   - 설명: 위험 요소나 주의사항에 대한 질문\n   - 예시:\n     * 단순: "이 계약 위험한가요?", "주의할 점 알려주세요"\n     * 복합: "리스크 분석하고 대안도 제시해주세요"\n   - 키워드: 위험, 리스크, 주의, 문제점, 조심, 걱정, 우려\n   - 필요한 처리: 위험 요소 분석, 주의사항 추출\n\n8. **UNCLEAR (불분명)**\n   - 설명: 의도를 명확히 파악하기 어려운 질문\n   - 예시: "이거 좀 봐주세요", "어떻게 해야 할까요?", "도와주세요"\n   - 처리: 추가 질문으로 의도 명확화 필요\n\n9. **IRRELEVANT (무관)**\n   - 설명: 부동산과 전혀 관련 없는 질문\n   - 예시: "날씨 어때?", "저녁 뭐 먹지?", "주식 추천해줘"\n   - 처리: 부동산 관련 질문을 유도\n\n## 복합 질문 예시와 분석:\n\n### 예시 1: "강남구 아파트 시세 알려주고 전세자금대출 가능한지도 확인해줘"\n- 주 의도: MARKET_INQUIRY (시세 조회가 먼저 필요)\n- 부가 의도: LOAN_CONSULT (대출 확인)\n- 분해: ["강남구 아파트 시세 조회", "전세자금대출 가능 여부 확인"]\n\n### 예시 2: "이 계약서 검토해서 위험한 부분 있는지 알려주고 수정 제안도 해줘"\n- 주 의도: CONTRACT_REVIEW (계약서 검토)\n- 부가 의도: RISK_ANALYSIS (위험 분석)\n- 분해: ["계약서 전체 검토", "위험 요소 식별", "수정사항 제안"]\n\n### 예시 3: "서초동 전세가 확인하고 법적으로 문제없는지도 봐줘"\n- 주 의도: MARKET_INQUIRY (시세 확인)\n- 부가 의도: LEGAL_CONSULT (법적 검토)\n- 분해: ["서초동 전세가 조회", "법적 이슈 검토"]\n\n## 응답 형식 (JSON 형식으로 응답):\n\n{\n    "intent": "LEGAL_CONSULT",\n    "confidence": 0.9,\n    "keywords": ["전세금", "인상", "제한"],\n    "sub_intents": [],\n    "is_compound": false,\n    "decomposed_tasks": [],\n    "entities": {\n        "location": "강남구",\n        "price": "5억",\n        "contract_type": "전세",\n        "date": "2024년",\n        "area": "84㎡",\n        "action_verbs": ["확인", "검토"]\n    },\n    "reasoning": "전세금 인상에 대한 법률 질문이므로 LEGAL_CONSULT로 분류"\n}\n\n응답 규칙:\n- intent: 위 9개 카테고리 중 하나 (대문자_언더스코어 형식)\n- confidence: 0.0~1.0 (0.8 이상이면 매우 확실, 0.5 미만이면 불확실)\n- keywords: 추출된 주요 키워드 목록\n- sub_intents: 복합 질문일 경우 부가적인 의도들\n- is_compound: 복합 질문 여부 (true/false)\n- decomposed_tasks: 복합 질문을 분해한 개별 작업들\n- entities: 추출된 엔티티 정보\n- reasoning: 분류한 이유와 근거 (상세하게)\n\n## 판단 가이드:\n- 여러 의도가 섞여있다면, 가장 주된 의도를 intent에, 나머지를 sub_intents에 기록\n- "그리고", "또한", "함께", "같이" 등의 연결어가 있으면 복합 질문일 가능성 높음\n- 법률 관련 키워드가 있으면 LEGAL_CONSULT 우선\n- 가격/시세 언급이 명확하면 MARKET_INQUIRY\n- 계약서라는 단어와 함께 "작성/만들기"가 있으면 CONTRACT_CREATION\n- 계약서라는 단어와 함께 "검토/확인"이 있으면 CONTRACT_REVIEW\n- 불확실하면 confidence를 낮게 설정하고 UNCLEAR 선택\n- 복합 질문은 is_compound를 true로 설정하고 개별 작업으로 분해\n\n분석할 질문: 전세금 인상 가능 여부 확인하고 관련 법조항 찾아줘'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 14:42:28,920 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 14:42:28,920 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 14:42:28,920 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 14:42:28,920 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 14:42:28,921 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 14:42:28,921 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 14:42:31,739 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 05:42:31 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'2542'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'2555'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9907'), (b'x-ratelimit-remaining-tokens', b'198310'), (b'x-ratelimit-reset-requests', b'13m16.825s'), (b'x-ratelimit-reset-tokens', b'507ms'), (b'x-request-id', b'req_7e31f893138f4fd5a058d7b8f7c94d44'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989a988e9dd3e9fb-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 14:42:31,739 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 14:42:31,740 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 14:42:31,740 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 14:42:31,740 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 14:42:31,740 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 14:42:31,741 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 05:42:31 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '2542', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '2555', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9907', 'x-ratelimit-remaining-tokens': '198310', 'x-ratelimit-reset-requests': '13m16.825s', 'x-ratelimit-reset-tokens': '507ms', 'x-request-id': 'req_7e31f893138f4fd5a058d7b8f7c94d44', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989a988e9dd3e9fb-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 14:42:31,741 - openai._base_client - DEBUG - request_id: req_7e31f893138f4fd5a058d7b8f7c94d44
2025-10-05 14:42:31,741 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: intent_analysis | Model: gpt-4o-mini-2024-07-18 | Tokens: 2037 (prompt: 1925, completion: 112)
2025-10-05 14:42:31,741 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM Intent Analysis Result: {'intent': 'LEGAL_CONSULT', 'confidence': 0.9, 'keywords': ['전세금', '인상', '법조항'], 'sub_intents': [], 'is_compound': False, 'decomposed_tasks': [], 'entities': {'action_verbs': ['확인', '찾다']}, 'reasoning': '전세금 인상 가능 여부에 대한 법률 질문이므로 LEGAL_CONSULT로 분류'}
2025-10-05 14:42:31,742 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-7ec4db9a-e313-4815-aeb2-f0a999218146', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 Agent 선택 전문가입니다.\n사용자의 요청에 가장 적합한 Agent/Team을 선택하는 것이 목표입니다.\n\n## 현재 상황\n\n**사용자 질문:** 전세금 인상 가능 여부 확인하고 관련 법조항 찾아줘\n**분석된 의도:** 법률상담\n**추출된 키워드:** [\'전세금\', \'인상\', \'법조항\']\n\n## 사용 가능한 Agent/Team 정보\n\n{\'search_team\': {\'name\': \'search_team\', \'capabilities\': \'법률 검색, 부동산 시세 조회, 대출 상품 검색\', \'tools\': [\'legal_search\', \'market_data\', \'loan_data\'], \'use_cases\': [\'법률 상담\', \'시세 조회\', \'대출 정보\']}, \'analysis_team\': {\'name\': \'analysis_team\', \'capabilities\': \'데이터 분석, 리스크 평가, 인사이트 생성, 추천\', \'tools\': [\'data_analyzer\', \'risk_evaluator\'], \'use_cases\': [\'시장 분석\', \'리스크 평가\', \'투자 분석\']}, \'document_team\': {\'name\': \'document_team\', \'capabilities\': \'계약서 작성, 문서 생성, 문서 검토\', \'tools\': [\'document_generator\', \'contract_reviewer\'], \'use_cases\': [\'계약서 작성\', \'문서 검토\']}}\n\n## Agent 역할 및 상세 가이드\n\n### 1. search_team (검색 팀)\n- **주요 기능**: 정보 검색 및 데이터 수집\n- **전문 분야**:\n  * 법률 정보 검색 (전세법, 임대차보호법, 부동산 관련 법규)\n  * 부동산 시세 조회 (매매가, 전세가, 월세, 실거래가)\n  * 대출 상품 정보 검색 (금리, 한도, 조건)\n  * 지역 정보 및 인프라 조회\n- **도구**: legal_search, market_data, loan_data\n- **적합한 작업**: 정보 조회, 데이터 수집, 법률 확인, 시세 파악\n- **예시**:\n  * "전세금 5% 인상 가능한가요?"\n  * "강남구 아파트 전세 시세"\n  * "전세자금대출 한도 얼마?"\n\n### 2. analysis_team (분석 팀)\n- **주요 기능**: 데이터 분석 및 평가\n- **전문 분야**:\n  * 시장 동향 분석 (상승률, 하락률, 추세)\n  * 리스크 평가 (계약, 투자 위험도)\n  * 투자 수익률 계산 (ROI, 월세 수익률)\n  * 대출 한도 및 조건 분석 (LTV, DTI, DSR)\n  * 비교 분석 (지역별, 상품별)\n- **도구**: data_analyzer, risk_evaluator, calculator\n- **적합한 작업**: 데이터 분석, 리스크 평가, 계산, 비교, 예측\n- **의존성**: 보통 search_team의 데이터가 필요\n- **예시**:\n  * "이 지역 투자 가치 분석해줘"\n  * "계약 리스크 평가해줘"\n  * "대출 가능 금액 계산해줘"\n\n### 3. document_team (문서 팀)\n- **주요 기능**: 문서 생성 및 관리\n- **전문 분야**:\n  * 계약서 작성 (임대차, 매매, 전세)\n  * 문서 템플릿 관리\n  * 특약사항 생성\n  * 계약서 수정안 작성\n  * 법률 문서 검토\n- **도구**: document_generator, contract_template, contract_reviewer\n- **적합한 작업**: 문서 작성, 계약서 생성, 문서 수정, 검토\n- **예시**:\n  * "임대차계약서 작성해줘"\n  * "특약사항 추가해줘"\n  * "계약서 수정안 만들어줘"\n\n## Agent 선택 전략\n\n### 1단계: 작업 유형 식별\n```\n정보 필요 → search_team\n분석/계산 필요 → analysis_team\n문서 작성 필요 → document_team\n```\n\n### 2단계: 의존성 분석\n```\n독립적 작업 → 단일 팀\n순차적 의존 → 여러 팀 (순서 중요)\n병렬 가능 → 여러 팀 (순서 무관)\n```\n\n### 3단계: 최적화\n```\n중복 제거 → 가장 적합한 팀만 선택\n효율성 → 병렬 처리 가능한 경우 표시\n```\n\n## 의도별 Agent 매핑 가이드\n\n| 의도 (Intent) | 추천 Agent 조합 | 이유 |\n|--------------|-----------------|------|\n| LEGAL_CONSULT | ["search_team"] | 법률 정보 검색 전문 |\n| MARKET_INQUIRY | ["search_team"] | 시세 데이터 조회 |\n| LOAN_CONSULT | ["search_team", "analysis_team"] | 대출 정보 조회 후 분석 |\n| CONTRACT_CREATION | ["document_team"] | 문서 생성 전문 |\n| CONTRACT_REVIEW | ["search_team", "analysis_team"] | 법률 검토 및 리스크 분석 |\n| COMPREHENSIVE | ["search_team", "analysis_team"] | 종합 정보 수집 및 분석 |\n| RISK_ANALYSIS | ["analysis_team"] | 리스크 평가 전문 |\n| UNCLEAR | ["search_team", "analysis_team"] | 포괄적 대응 |\n\n## 복합 질문 처리 예시\n\n### 예시 1: 순차적 처리\n질문: "강남구 시세 확인하고 투자 가치 분석해줘"\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "먼저 search_team이 시세 데이터를 수집하고, 그 결과를 analysis_team이 분석하여 투자 가치 평가"\n}\n```\n\n### 예시 2: 병렬 처리 가능\n질문: "법률 정보와 시세 정보 모두 알려줘"\n```json\n{\n    "selected_agents": ["search_team"],\n    "reasoning": "search_team이 법률과 시세 정보를 병렬로 조회 가능. 두 작업이 독립적이므로 동시 처리"\n}\n```\n\n### 예시 3: 3단계 파이프라인\n질문: "시세 조회하고 분석한 후 계약서 작성해줘"\n```json\n{\n    "selected_agents": ["search_team", "analysis_team", "document_team"],\n    "reasoning": "search_team이 데이터 수집 → analysis_team이 분석 → document_team이 분석 결과 기반 계약서 작성"\n}\n```\n\n## 응답 형식 (JSON)\n\n{\n    "selected_agents": ["선택된 agent/team 목록"],\n    "reasoning": "선택 이유를 구체적으로 설명. 각 Agent의 역할과 처리 순서 포함",\n    "coordination": "single/sequential/parallel/pipeline",\n    "dependencies": {"agent2": ["agent1"]},\n    "estimated_time": 30,\n    "confidence": 0.9\n}\n\n## 선택 가이드라인\n\n1. **최소 Agent 원칙**: 가능한 적은 수의 Agent로 처리\n2. **전문성 우선**: 해당 작업에 가장 전문적인 Agent 선택\n3. **효율성 고려**: 병렬 처리 가능한 경우 명시\n4. **의존성 관리**: 데이터 흐름을 고려한 순서 지정\n5. **폴백 전략**: 불확실한 경우 ["search_team", "analysis_team"] 조합\n\n## 주의사항\n\n- selected_agents는 반드시 배열 형태\n- Agent 이름은 정확히: "search_team", "analysis_team", "document_team"\n- 최소 1개, 최대 3개 선택\n- 순서는 실행 우선순위 (앞에 있을수록 먼저 실행)\n- reasoning은 상세하고 논리적으로 작성\n- coordination 필드로 실행 방식 명시\n- 복합 질문의 경우 의존성 관계 명확히 표시'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 14:42:31,742 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 14:42:31,742 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 14:42:31,743 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 14:42:31,743 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 14:42:31,743 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 14:42:31,743 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 14:42:34,388 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 05:42:34 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'2319'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'2349'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9907'), (b'x-ratelimit-remaining-tokens', b'198428'), (b'x-ratelimit-reset-requests', b'13m22.629s'), (b'x-ratelimit-reset-tokens', b'471ms'), (b'x-request-id', b'req_913fe0c2e8bf46feb886e2cc99676b5d'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989a98a04d6fe9fb-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 14:42:34,388 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 14:42:34,389 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 14:42:34,389 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 14:42:34,389 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 14:42:34,390 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 14:42:34,390 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 05:42:34 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '2319', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '2349', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9907', 'x-ratelimit-remaining-tokens': '198428', 'x-ratelimit-reset-requests': '13m22.629s', 'x-ratelimit-reset-tokens': '471ms', 'x-request-id': 'req_913fe0c2e8bf46feb886e2cc99676b5d', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989a98a04d6fe9fb-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 14:42:34,390 - openai._base_client - DEBUG - request_id: req_913fe0c2e8bf46feb886e2cc99676b5d
2025-10-05 14:42:34,390 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: agent_selection | Model: gpt-4o-mini-2024-07-18 | Tokens: 1816 (prompt: 1707, completion: 109)
2025-10-05 14:42:34,392 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM agent selection reasoning: 사용자의 요청은 전세금 인상 가능 여부와 관련된 법조항을 확인하는 것이므로, 법률 정보 검색에 전문적인 search_team이 가장 적합합니다. 이 팀은 전세법 및 임대차보호법과 같은 관련 법규를 검색할 수 있습니다.
2025-10-05 14:42:34,392 - app.service_agent.cognitive_agents.planning_agent - INFO - ✅ Primary LLM selected agents: ['search_team']
2025-10-05 14:42:34,392 - __main__ - INFO -   의도: 법률상담
2025-10-05 14:42:34,392 - __main__ - INFO -   신뢰도: 0.90
2025-10-05 14:42:34,392 - __main__ - INFO -   추천 Agent: ['search_team']
2025-10-05 14:42:34,392 - __main__ - INFO - 
[Step 2] Query Decomposition...
2025-10-05 14:42:34,392 - app.service_agent.cognitive_agents.query_decomposer - INFO - Decomposing query: 전세금 인상 가능 여부 확인하고 관련 법조항 찾아줘...
2025-10-05 14:42:34,392 - app.service_agent.cognitive_agents.query_decomposer - DEBUG - Found compound indicator: 하고
2025-10-05 14:42:34,392 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-3e29c636-691d-4445-a789-7e9d4760865e', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 질문 분해 전문가입니다.\n복잡한 사용자 질문을 독립적으로 처리 가능한 작업 단위로 분해하는 것이 목표입니다.\n\n## 중요 원칙:\n1. 각 작업은 하나의 명확한 목표를 가져야 합니다\n2. 작업 간 의존성을 명확히 파악해야 합니다\n3. 병렬 처리 가능한 작업은 구분해야 합니다\n4. 불필요한 분해는 피해야 합니다 (단순 질문은 분해하지 않음)\n\n## 작업 유형 (type):\n- search: 정보 검색 (법률, 시세, 대출 정보 등)\n- analysis: 데이터 분석 (리스크 평가, 시장 분석 등)\n- generation: 문서 생성 (계약서 작성 등)\n- review: 검토/평가 (계약서 검토, 조건 확인 등)\n- calculation: 계산/산출 (대출 한도, 세금 등)\n- comparison: 비교 분석 (여러 옵션 비교)\n\n## 담당 팀 (agent):\n- search_team: 법률, 시세, 대출 정보 검색\n- analysis_team: 데이터 분석, 리스크 평가, 계산\n- document_team: 문서 생성, 계약서 작성\n\n## 학습 예시:\n\n### 예시 1: 복합 질문 (순차적)\n질문: "강남구 아파트 시세 확인하고 대출 가능 금액 계산해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "강남구 아파트 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "대출 가능 금액 계산",\n            "type": "calculation",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "required_data": {"price": "task_0.result.price"},\n            "estimated_time": 15\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "시세 정보가 있어야 대출 금액 계산이 가능하므로 순차 실행"\n}\n```\n\n### 예시 2: 복합 질문 (병렬 가능)\n질문: "이 지역 전세 시세와 매매 시세 모두 알려주고 비교 분석해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "전세 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "매매 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "전세/매매 시세 비교 분석",\n            "type": "comparison",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0", "task_1"],\n            "required_data": {\n                "lease_price": "task_0.result",\n                "sale_price": "task_1.result"\n            },\n            "estimated_time": 25\n        }\n    ],\n    "execution_mode": "mixed",\n    "parallel_groups": [["task_0", "task_1"], ["task_2"]],\n    "reasoning": "시세 조회는 독립적이므로 병렬 처리, 비교는 두 결과 필요"\n}\n```\n\n### 예시 3: 복합 질문 (3단계 이상)\n질문: "이 계약서 검토해서 위험한 부분 찾고 수정안 만들어서 최종 계약서 작성해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "계약서 내용 전체 검토",\n            "type": "review",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 30\n        },\n        {\n            "description": "위험 요소 및 문제점 분석",\n            "type": "analysis",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "estimated_time": 25\n        },\n        {\n            "description": "수정안 제안 생성",\n            "type": "generation",\n            "agent": "document_team",\n            "priority": 3,\n            "depends_on": ["task_1"],\n            "estimated_time": 20\n        },\n        {\n            "description": "최종 계약서 작성",\n            "type": "generation",\n            "agent": "document_team",\n            "priority": 4,\n            "depends_on": ["task_2"],\n            "estimated_time": 30\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "각 단계가 이전 결과에 의존하므로 순차 실행 필요"\n}\n```\n\n### 예시 4: 단순 질문 (분해 불필요)\n질문: "전세금 인상률 상한이 얼마야?"\n분해:\n```json\n{\n    "is_compound": false,\n    "sub_tasks": [\n        {\n            "description": "전세금 인상률 상한 법률 정보 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 15\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "단일 정보 조회 요청으로 분해 불필요"\n}\n```\n\n### 예시 5: 조건부 실행\n질문: "이 물건 시세 확인하고 적정가면 대출 상담도 받고 싶어"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "물건 시세 조회 및 적정성 평가",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 25\n        },\n        {\n            "description": "대출 상담 정보 제공",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "optional": true,\n            "context": {"condition": "if_reasonable_price"},\n            "estimated_time": 20\n        }\n    ],\n    "execution_mode": "conditional",\n    "reasoning": "시세 확인 결과에 따라 대출 상담 진행 여부 결정"\n}\n```\n\n## Chain-of-Thought 프로세스:\n\n1. **질문 분석**: 어떤 정보나 작업을 요구하는가?\n2. **연결어 확인**: "그리고", "또한", "해서", "한 후" 등이 있는가?\n3. **의존성 파악**: 어떤 작업이 다른 작업의 결과를 필요로 하는가?\n4. **병렬성 판단**: 독립적으로 실행 가능한 작업이 있는가?\n5. **최적화**: 불필요한 분해는 없는가?\n\n## 응답 형식 (JSON):\n\n{\n    "is_compound": true/false,\n    "sub_tasks": [\n        {\n            "description": "작업 설명",\n            "type": "작업 유형",\n            "agent": "담당 팀",\n            "priority": 우선순위 (1이 가장 높음),\n            "depends_on": ["선행 작업 ID 리스트"],\n            "required_data": {"필요한 데이터 매핑"},\n            "estimated_time": 예상 소요 시간(초),\n            "optional": true/false,\n            "context": {"추가 컨텍스트"}\n        }\n    ],\n    "execution_mode": "sequential/parallel/mixed/conditional",\n    "parallel_groups": [["병렬 실행 가능한 작업 ID 그룹"]],\n    "confidence": 0.0-1.0,\n    "reasoning": "분해 결정의 이유와 근거"\n}\n\n## 분해 가이드라인:\n\n1. **분해가 필요한 경우**:\n   - 여러 종류의 정보를 요청하는 경우\n   - 순차적 처리가 필요한 경우 (A의 결과로 B 수행)\n   - 서로 다른 팀의 전문성이 필요한 경우\n\n2. **분해가 불필요한 경우**:\n   - 단일 정보 조회\n   - 단순한 질문-답변\n   - 하나의 팀에서 완전히 처리 가능한 경우\n\n3. **병렬 처리 기준**:\n   - 서로 독립적인 정보 조회\n   - 의존성이 없는 분석 작업\n   - 동시에 진행해도 충돌하지 않는 작업\n\n4. **우선순위 설정**:\n   - 의존성이 없는 작업: priority 1\n   - 1차 의존 작업: priority 2\n   - 2차 의존 작업: priority 3\n   - 이런 식으로 증가\n\n현재 의도: 법률상담\n추출된 엔티티: None\n\n분석할 질문: 전세금 인상 가능 여부 확인하고 관련 법조항 찾아줘'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 14:42:34,393 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 14:42:34,393 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 14:42:34,393 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 14:42:34,393 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 14:42:34,393 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 14:42:34,393 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 14:42:37,470 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 05:42:37 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'2872'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'2891'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9906'), (b'x-ratelimit-remaining-tokens', b'197994'), (b'x-ratelimit-reset-requests', b'13m28.632s'), (b'x-ratelimit-reset-tokens', b'601ms'), (b'x-request-id', b'req_b84c2ddd65814de1a815426a7d04b054'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989a98b0c9b4e9fb-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 14:42:37,470 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 14:42:37,470 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 14:42:37,475 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 14:42:37,475 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 14:42:37,475 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 14:42:37,475 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 05:42:37 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '2872', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '2891', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9906', 'x-ratelimit-remaining-tokens': '197994', 'x-ratelimit-reset-requests': '13m28.632s', 'x-ratelimit-reset-tokens': '601ms', 'x-request-id': 'req_b84c2ddd65814de1a815426a7d04b054', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989a98b0c9b4e9fb-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 14:42:37,475 - openai._base_client - DEBUG - request_id: req_b84c2ddd65814de1a815426a7d04b054
2025-10-05 14:42:37,476 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: query_decomposition | Model: gpt-4o-mini-2024-07-18 | Tokens: 2180 (prompt: 2007, completion: 173)
2025-10-05 14:42:37,476 - app.service_agent.cognitive_agents.query_decomposer - INFO - Successfully decomposed into 2 tasks
2025-10-05 14:42:37,476 - __main__ - INFO -   복합 질문: True
2025-10-05 14:42:37,476 - __main__ - INFO -   작업 수: 2
2025-10-05 14:42:37,476 - __main__ - INFO -   실행 모드: sequential
2025-10-05 14:42:37,476 - __main__ - INFO -     - task_0: 전세금 인상 가능 여부 확인 (search_team)
2025-10-05 14:42:37,476 - __main__ - INFO -     - task_1: 전세금 인상 관련 법조항 조회 (search_team)
2025-10-05 14:42:37,476 - __main__ - INFO - 
[Step 3] Comprehensive Plan 생성...
2025-10-05 14:42:37,476 - app.service_agent.cognitive_agents.planning_agent - INFO - Creating comprehensive plan for query: 전세금 인상 가능 여부 확인하고 관련 법조항 찾아줘...
2025-10-05 14:42:37,476 - app.service_agent.cognitive_agents.planning_agent - INFO - Analyzing intent for query: 전세금 인상 가능 여부 확인하고 관련 법조항 찾아줘...
2025-10-05 14:42:37,476 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-2182df95-16e7-4f09-bc30-1914d66551b2', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 의도 분석 전문가입니다.\n사용자의 질문을 정확히 이해하고, 어떤 종류의 도움이 필요한지 분류해야 합니다.\n\n## 중요: 복합 질문 처리\n복합적인 질문(여러 의도가 섞인 질문)의 경우, 가장 핵심적인 의도를 파악하되,\nsub_intents 필드에 부가적인 의도들도 함께 기록해주세요.\n\n## 분류 카테고리 설명:\n\n1. **LEGAL_CONSULT (법률상담)**\n   - 설명: 부동산 관련 법률, 권리, 의무에 대한 질문\n   - 예시:\n     * 단순: "전세금 5% 인상이 가능한가요?", "임대차계약 갱신 거부할 수 있나요?"\n     * 복합: "전세금 인상 가능한지 확인하고 법적 근거도 알려주세요"\n   - 키워드: 법, 전세, 임대, 보증금, 계약, 권리, 의무, 갱신, 임차인, 임대인, 법률, 규정, 조항\n   - 필요한 처리: 법률 데이터베이스 검색, 관련 법조항 찾기\n\n2. **MARKET_INQUIRY (시세조회)**\n   - 설명: 부동산 시장 가격, 시세, 거래 동향에 대한 질문\n   - 예시:\n     * 단순: "강남구 아파트 전세 시세 알려주세요", "서초동 매매가 얼마나 올랐나요?"\n     * 복합: "강남구 시세 확인하고 대출 가능 금액도 계산해줘"\n   - 키워드: 시세, 가격, 매매가, 전세가, 월세, 시장, 동향, 평균, 지역명, 상승률, 하락률\n   - 필요한 처리: 부동산 시세 데이터 조회, 지역별 가격 분석\n\n3. **LOAN_CONSULT (대출상담)**\n   - 설명: 주택담보대출, 전세자금대출 등 금융 관련 질문\n   - 예시:\n     * 단순: "전세자금대출 한도가 얼마인가요?", "LTV가 뭔가요?"\n     * 복합: "대출 한도 확인하고 금리 비교도 해주세요"\n   - 키워드: 대출, 금리, 한도, 조건, 상환, LTV, DTI, DSR, 담보, 금융, 은행\n   - 필요한 처리: 대출 상품 조회, 금리 정보 검색, 한도 계산\n\n4. **CONTRACT_CREATION (계약서작성)**\n   - 설명: 새로운 계약서나 문서를 작성해달라는 요청\n   - 예시:\n     * 단순: "임대차계약서 작성해주세요", "전세계약서 초안 만들어주세요"\n     * 복합: "계약서 작성하고 주의사항도 검토해주세요"\n   - 키워드: 작성, 만들, 생성, 초안, 계약서, 문서, 양식\n   - 필요한 처리: 문서 생성 에이전트 호출, 템플릿 기반 작성\n\n5. **CONTRACT_REVIEW (계약서검토)**\n   - 설명: 기존 계약서나 문서를 검토해달라는 요청\n   - 예시:\n     * 단순: "이 계약서 검토해주세요", "특약사항 문제없나요?"\n     * 복합: "계약서 검토하고 수정사항도 제안해주세요"\n   - 키워드: 검토, 확인, 점검, 리뷰, 분석해, 살펴봐, 체크\n   - 필요한 처리: 문서 분석, 위험 요소 식별, 개선사항 제안\n\n6. **COMPREHENSIVE (종합분석)**\n   - 설명: 여러 측면을 종합적으로 분석해달라는 요청\n   - 예시:\n     * 단순: "이 물건 전체적으로 분석해주세요"\n     * 복합: "시세, 법률, 대출 모두 검토해서 종합 의견 주세요"\n   - 키워드: 종합, 전체, 모든, 전반적, 종합적, 평가, 분석\n   - 필요한 처리: 다중 데이터 소스 통합 분석\n\n7. **RISK_ANALYSIS (리스크분석)**\n   - 설명: 위험 요소나 주의사항에 대한 질문\n   - 예시:\n     * 단순: "이 계약 위험한가요?", "주의할 점 알려주세요"\n     * 복합: "리스크 분석하고 대안도 제시해주세요"\n   - 키워드: 위험, 리스크, 주의, 문제점, 조심, 걱정, 우려\n   - 필요한 처리: 위험 요소 분석, 주의사항 추출\n\n8. **UNCLEAR (불분명)**\n   - 설명: 의도를 명확히 파악하기 어려운 질문\n   - 예시: "이거 좀 봐주세요", "어떻게 해야 할까요?", "도와주세요"\n   - 처리: 추가 질문으로 의도 명확화 필요\n\n9. **IRRELEVANT (무관)**\n   - 설명: 부동산과 전혀 관련 없는 질문\n   - 예시: "날씨 어때?", "저녁 뭐 먹지?", "주식 추천해줘"\n   - 처리: 부동산 관련 질문을 유도\n\n## 복합 질문 예시와 분석:\n\n### 예시 1: "강남구 아파트 시세 알려주고 전세자금대출 가능한지도 확인해줘"\n- 주 의도: MARKET_INQUIRY (시세 조회가 먼저 필요)\n- 부가 의도: LOAN_CONSULT (대출 확인)\n- 분해: ["강남구 아파트 시세 조회", "전세자금대출 가능 여부 확인"]\n\n### 예시 2: "이 계약서 검토해서 위험한 부분 있는지 알려주고 수정 제안도 해줘"\n- 주 의도: CONTRACT_REVIEW (계약서 검토)\n- 부가 의도: RISK_ANALYSIS (위험 분석)\n- 분해: ["계약서 전체 검토", "위험 요소 식별", "수정사항 제안"]\n\n### 예시 3: "서초동 전세가 확인하고 법적으로 문제없는지도 봐줘"\n- 주 의도: MARKET_INQUIRY (시세 확인)\n- 부가 의도: LEGAL_CONSULT (법적 검토)\n- 분해: ["서초동 전세가 조회", "법적 이슈 검토"]\n\n## 응답 형식 (JSON 형식으로 응답):\n\n{\n    "intent": "LEGAL_CONSULT",\n    "confidence": 0.9,\n    "keywords": ["전세금", "인상", "제한"],\n    "sub_intents": [],\n    "is_compound": false,\n    "decomposed_tasks": [],\n    "entities": {\n        "location": "강남구",\n        "price": "5억",\n        "contract_type": "전세",\n        "date": "2024년",\n        "area": "84㎡",\n        "action_verbs": ["확인", "검토"]\n    },\n    "reasoning": "전세금 인상에 대한 법률 질문이므로 LEGAL_CONSULT로 분류"\n}\n\n응답 규칙:\n- intent: 위 9개 카테고리 중 하나 (대문자_언더스코어 형식)\n- confidence: 0.0~1.0 (0.8 이상이면 매우 확실, 0.5 미만이면 불확실)\n- keywords: 추출된 주요 키워드 목록\n- sub_intents: 복합 질문일 경우 부가적인 의도들\n- is_compound: 복합 질문 여부 (true/false)\n- decomposed_tasks: 복합 질문을 분해한 개별 작업들\n- entities: 추출된 엔티티 정보\n- reasoning: 분류한 이유와 근거 (상세하게)\n\n## 판단 가이드:\n- 여러 의도가 섞여있다면, 가장 주된 의도를 intent에, 나머지를 sub_intents에 기록\n- "그리고", "또한", "함께", "같이" 등의 연결어가 있으면 복합 질문일 가능성 높음\n- 법률 관련 키워드가 있으면 LEGAL_CONSULT 우선\n- 가격/시세 언급이 명확하면 MARKET_INQUIRY\n- 계약서라는 단어와 함께 "작성/만들기"가 있으면 CONTRACT_CREATION\n- 계약서라는 단어와 함께 "검토/확인"이 있으면 CONTRACT_REVIEW\n- 불확실하면 confidence를 낮게 설정하고 UNCLEAR 선택\n- 복합 질문은 is_compound를 true로 설정하고 개별 작업으로 분해\n\n분석할 질문: 전세금 인상 가능 여부 확인하고 관련 법조항 찾아줘'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 14:42:37,477 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 14:42:37,477 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 14:42:37,477 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 14:42:37,477 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 14:42:37,477 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 14:42:37,477 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 14:42:39,977 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 05:42:39 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'2141'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'2164'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9905'), (b'x-ratelimit-remaining-tokens', b'198310'), (b'x-ratelimit-reset-requests', b'13m34.16s'), (b'x-ratelimit-reset-tokens', b'507ms'), (b'x-request-id', b'req_7efae327d633464cbb822f4ba7c479de'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989a98c41f3ae9fb-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 14:42:39,977 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 14:42:39,977 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 14:42:39,977 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 14:42:39,977 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 14:42:39,977 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 14:42:39,977 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 05:42:39 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '2141', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '2164', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9905', 'x-ratelimit-remaining-tokens': '198310', 'x-ratelimit-reset-requests': '13m34.16s', 'x-ratelimit-reset-tokens': '507ms', 'x-request-id': 'req_7efae327d633464cbb822f4ba7c479de', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989a98c41f3ae9fb-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 14:42:39,978 - openai._base_client - DEBUG - request_id: req_7efae327d633464cbb822f4ba7c479de
2025-10-05 14:42:39,978 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: intent_analysis | Model: gpt-4o-mini-2024-07-18 | Tokens: 2037 (prompt: 1925, completion: 112)
2025-10-05 14:42:39,978 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM Intent Analysis Result: {'intent': 'LEGAL_CONSULT', 'confidence': 0.9, 'keywords': ['전세금', '인상', '법조항'], 'sub_intents': [], 'is_compound': False, 'decomposed_tasks': [], 'entities': {'action_verbs': ['확인', '찾다']}, 'reasoning': '전세금 인상 가능 여부에 대한 법률 질문이므로 LEGAL_CONSULT로 분류'}
2025-10-05 14:42:39,979 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-68bce38d-b12f-4003-a5d0-b4de8aaaf885', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 Agent 선택 전문가입니다.\n사용자의 요청에 가장 적합한 Agent/Team을 선택하는 것이 목표입니다.\n\n## 현재 상황\n\n**사용자 질문:** 전세금 인상 가능 여부 확인하고 관련 법조항 찾아줘\n**분석된 의도:** 법률상담\n**추출된 키워드:** [\'전세금\', \'인상\', \'법조항\']\n\n## 사용 가능한 Agent/Team 정보\n\n{\'search_team\': {\'name\': \'search_team\', \'capabilities\': \'법률 검색, 부동산 시세 조회, 대출 상품 검색\', \'tools\': [\'legal_search\', \'market_data\', \'loan_data\'], \'use_cases\': [\'법률 상담\', \'시세 조회\', \'대출 정보\']}, \'analysis_team\': {\'name\': \'analysis_team\', \'capabilities\': \'데이터 분석, 리스크 평가, 인사이트 생성, 추천\', \'tools\': [\'data_analyzer\', \'risk_evaluator\'], \'use_cases\': [\'시장 분석\', \'리스크 평가\', \'투자 분석\']}, \'document_team\': {\'name\': \'document_team\', \'capabilities\': \'계약서 작성, 문서 생성, 문서 검토\', \'tools\': [\'document_generator\', \'contract_reviewer\'], \'use_cases\': [\'계약서 작성\', \'문서 검토\']}}\n\n## Agent 역할 및 상세 가이드\n\n### 1. search_team (검색 팀)\n- **주요 기능**: 정보 검색 및 데이터 수집\n- **전문 분야**:\n  * 법률 정보 검색 (전세법, 임대차보호법, 부동산 관련 법규)\n  * 부동산 시세 조회 (매매가, 전세가, 월세, 실거래가)\n  * 대출 상품 정보 검색 (금리, 한도, 조건)\n  * 지역 정보 및 인프라 조회\n- **도구**: legal_search, market_data, loan_data\n- **적합한 작업**: 정보 조회, 데이터 수집, 법률 확인, 시세 파악\n- **예시**:\n  * "전세금 5% 인상 가능한가요?"\n  * "강남구 아파트 전세 시세"\n  * "전세자금대출 한도 얼마?"\n\n### 2. analysis_team (분석 팀)\n- **주요 기능**: 데이터 분석 및 평가\n- **전문 분야**:\n  * 시장 동향 분석 (상승률, 하락률, 추세)\n  * 리스크 평가 (계약, 투자 위험도)\n  * 투자 수익률 계산 (ROI, 월세 수익률)\n  * 대출 한도 및 조건 분석 (LTV, DTI, DSR)\n  * 비교 분석 (지역별, 상품별)\n- **도구**: data_analyzer, risk_evaluator, calculator\n- **적합한 작업**: 데이터 분석, 리스크 평가, 계산, 비교, 예측\n- **의존성**: 보통 search_team의 데이터가 필요\n- **예시**:\n  * "이 지역 투자 가치 분석해줘"\n  * "계약 리스크 평가해줘"\n  * "대출 가능 금액 계산해줘"\n\n### 3. document_team (문서 팀)\n- **주요 기능**: 문서 생성 및 관리\n- **전문 분야**:\n  * 계약서 작성 (임대차, 매매, 전세)\n  * 문서 템플릿 관리\n  * 특약사항 생성\n  * 계약서 수정안 작성\n  * 법률 문서 검토\n- **도구**: document_generator, contract_template, contract_reviewer\n- **적합한 작업**: 문서 작성, 계약서 생성, 문서 수정, 검토\n- **예시**:\n  * "임대차계약서 작성해줘"\n  * "특약사항 추가해줘"\n  * "계약서 수정안 만들어줘"\n\n## Agent 선택 전략\n\n### 1단계: 작업 유형 식별\n```\n정보 필요 → search_team\n분석/계산 필요 → analysis_team\n문서 작성 필요 → document_team\n```\n\n### 2단계: 의존성 분석\n```\n독립적 작업 → 단일 팀\n순차적 의존 → 여러 팀 (순서 중요)\n병렬 가능 → 여러 팀 (순서 무관)\n```\n\n### 3단계: 최적화\n```\n중복 제거 → 가장 적합한 팀만 선택\n효율성 → 병렬 처리 가능한 경우 표시\n```\n\n## 의도별 Agent 매핑 가이드\n\n| 의도 (Intent) | 추천 Agent 조합 | 이유 |\n|--------------|-----------------|------|\n| LEGAL_CONSULT | ["search_team"] | 법률 정보 검색 전문 |\n| MARKET_INQUIRY | ["search_team"] | 시세 데이터 조회 |\n| LOAN_CONSULT | ["search_team", "analysis_team"] | 대출 정보 조회 후 분석 |\n| CONTRACT_CREATION | ["document_team"] | 문서 생성 전문 |\n| CONTRACT_REVIEW | ["search_team", "analysis_team"] | 법률 검토 및 리스크 분석 |\n| COMPREHENSIVE | ["search_team", "analysis_team"] | 종합 정보 수집 및 분석 |\n| RISK_ANALYSIS | ["analysis_team"] | 리스크 평가 전문 |\n| UNCLEAR | ["search_team", "analysis_team"] | 포괄적 대응 |\n\n## 복합 질문 처리 예시\n\n### 예시 1: 순차적 처리\n질문: "강남구 시세 확인하고 투자 가치 분석해줘"\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "먼저 search_team이 시세 데이터를 수집하고, 그 결과를 analysis_team이 분석하여 투자 가치 평가"\n}\n```\n\n### 예시 2: 병렬 처리 가능\n질문: "법률 정보와 시세 정보 모두 알려줘"\n```json\n{\n    "selected_agents": ["search_team"],\n    "reasoning": "search_team이 법률과 시세 정보를 병렬로 조회 가능. 두 작업이 독립적이므로 동시 처리"\n}\n```\n\n### 예시 3: 3단계 파이프라인\n질문: "시세 조회하고 분석한 후 계약서 작성해줘"\n```json\n{\n    "selected_agents": ["search_team", "analysis_team", "document_team"],\n    "reasoning": "search_team이 데이터 수집 → analysis_team이 분석 → document_team이 분석 결과 기반 계약서 작성"\n}\n```\n\n## 응답 형식 (JSON)\n\n{\n    "selected_agents": ["선택된 agent/team 목록"],\n    "reasoning": "선택 이유를 구체적으로 설명. 각 Agent의 역할과 처리 순서 포함",\n    "coordination": "single/sequential/parallel/pipeline",\n    "dependencies": {"agent2": ["agent1"]},\n    "estimated_time": 30,\n    "confidence": 0.9\n}\n\n## 선택 가이드라인\n\n1. **최소 Agent 원칙**: 가능한 적은 수의 Agent로 처리\n2. **전문성 우선**: 해당 작업에 가장 전문적인 Agent 선택\n3. **효율성 고려**: 병렬 처리 가능한 경우 명시\n4. **의존성 관리**: 데이터 흐름을 고려한 순서 지정\n5. **폴백 전략**: 불확실한 경우 ["search_team", "analysis_team"] 조합\n\n## 주의사항\n\n- selected_agents는 반드시 배열 형태\n- Agent 이름은 정확히: "search_team", "analysis_team", "document_team"\n- 최소 1개, 최대 3개 선택\n- 순서는 실행 우선순위 (앞에 있을수록 먼저 실행)\n- reasoning은 상세하고 논리적으로 작성\n- coordination 필드로 실행 방식 명시\n- 복합 질문의 경우 의존성 관계 명확히 표시'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 14:42:39,979 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 14:42:39,979 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 14:42:39,979 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 14:42:39,979 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 14:42:39,980 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 14:42:39,980 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 14:42:42,073 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 05:42:42 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'1884'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'1907'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9905'), (b'x-ratelimit-remaining-tokens', b'198428'), (b'x-ratelimit-reset-requests', b'13m40.322s'), (b'x-ratelimit-reset-tokens', b'471ms'), (b'x-request-id', b'req_978db7584d614c27a56bdfe1ccdc712e'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989a98d3bc6be9fb-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 14:42:42,073 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 14:42:42,074 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 14:42:42,077 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 14:42:42,077 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 14:42:42,077 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 14:42:42,077 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 05:42:42 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '1884', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '1907', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9905', 'x-ratelimit-remaining-tokens': '198428', 'x-ratelimit-reset-requests': '13m40.322s', 'x-ratelimit-reset-tokens': '471ms', 'x-request-id': 'req_978db7584d614c27a56bdfe1ccdc712e', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989a98d3bc6be9fb-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 14:42:42,078 - openai._base_client - DEBUG - request_id: req_978db7584d614c27a56bdfe1ccdc712e
2025-10-05 14:42:42,078 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: agent_selection | Model: gpt-4o-mini-2024-07-18 | Tokens: 1816 (prompt: 1707, completion: 109)
2025-10-05 14:42:42,078 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM agent selection reasoning: 사용자의 요청은 전세금 인상 가능 여부와 관련된 법조항을 확인하는 것이므로, 법률 정보 검색에 전문적인 search_team이 가장 적합합니다. 이 팀은 전세법 및 임대차보호법과 같은 관련 법규를 검색할 수 있습니다.
2025-10-05 14:42:42,078 - app.service_agent.cognitive_agents.planning_agent - INFO - ✅ Primary LLM selected agents: ['search_team']
2025-10-05 14:42:42,078 - app.service_agent.cognitive_agents.planning_agent - INFO - Intent analyzed: 법률상담 (confidence: 0.90)
2025-10-05 14:42:42,078 - app.service_agent.cognitive_agents.query_decomposer - INFO - Decomposing query: 전세금 인상 가능 여부 확인하고 관련 법조항 찾아줘...
2025-10-05 14:42:42,078 - app.service_agent.cognitive_agents.query_decomposer - DEBUG - Found compound indicator: 하고
2025-10-05 14:42:42,078 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-97b58d94-8156-40f6-af1f-b00f21ba03d6', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 질문 분해 전문가입니다.\n복잡한 사용자 질문을 독립적으로 처리 가능한 작업 단위로 분해하는 것이 목표입니다.\n\n## 중요 원칙:\n1. 각 작업은 하나의 명확한 목표를 가져야 합니다\n2. 작업 간 의존성을 명확히 파악해야 합니다\n3. 병렬 처리 가능한 작업은 구분해야 합니다\n4. 불필요한 분해는 피해야 합니다 (단순 질문은 분해하지 않음)\n\n## 작업 유형 (type):\n- search: 정보 검색 (법률, 시세, 대출 정보 등)\n- analysis: 데이터 분석 (리스크 평가, 시장 분석 등)\n- generation: 문서 생성 (계약서 작성 등)\n- review: 검토/평가 (계약서 검토, 조건 확인 등)\n- calculation: 계산/산출 (대출 한도, 세금 등)\n- comparison: 비교 분석 (여러 옵션 비교)\n\n## 담당 팀 (agent):\n- search_team: 법률, 시세, 대출 정보 검색\n- analysis_team: 데이터 분석, 리스크 평가, 계산\n- document_team: 문서 생성, 계약서 작성\n\n## 학습 예시:\n\n### 예시 1: 복합 질문 (순차적)\n질문: "강남구 아파트 시세 확인하고 대출 가능 금액 계산해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "강남구 아파트 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "대출 가능 금액 계산",\n            "type": "calculation",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "required_data": {"price": "task_0.result.price"},\n            "estimated_time": 15\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "시세 정보가 있어야 대출 금액 계산이 가능하므로 순차 실행"\n}\n```\n\n### 예시 2: 복합 질문 (병렬 가능)\n질문: "이 지역 전세 시세와 매매 시세 모두 알려주고 비교 분석해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "전세 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "매매 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "전세/매매 시세 비교 분석",\n            "type": "comparison",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0", "task_1"],\n            "required_data": {\n                "lease_price": "task_0.result",\n                "sale_price": "task_1.result"\n            },\n            "estimated_time": 25\n        }\n    ],\n    "execution_mode": "mixed",\n    "parallel_groups": [["task_0", "task_1"], ["task_2"]],\n    "reasoning": "시세 조회는 독립적이므로 병렬 처리, 비교는 두 결과 필요"\n}\n```\n\n### 예시 3: 복합 질문 (3단계 이상)\n질문: "이 계약서 검토해서 위험한 부분 찾고 수정안 만들어서 최종 계약서 작성해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "계약서 내용 전체 검토",\n            "type": "review",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 30\n        },\n        {\n            "description": "위험 요소 및 문제점 분석",\n            "type": "analysis",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "estimated_time": 25\n        },\n        {\n            "description": "수정안 제안 생성",\n            "type": "generation",\n            "agent": "document_team",\n            "priority": 3,\n            "depends_on": ["task_1"],\n            "estimated_time": 20\n        },\n        {\n            "description": "최종 계약서 작성",\n            "type": "generation",\n            "agent": "document_team",\n            "priority": 4,\n            "depends_on": ["task_2"],\n            "estimated_time": 30\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "각 단계가 이전 결과에 의존하므로 순차 실행 필요"\n}\n```\n\n### 예시 4: 단순 질문 (분해 불필요)\n질문: "전세금 인상률 상한이 얼마야?"\n분해:\n```json\n{\n    "is_compound": false,\n    "sub_tasks": [\n        {\n            "description": "전세금 인상률 상한 법률 정보 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 15\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "단일 정보 조회 요청으로 분해 불필요"\n}\n```\n\n### 예시 5: 조건부 실행\n질문: "이 물건 시세 확인하고 적정가면 대출 상담도 받고 싶어"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "물건 시세 조회 및 적정성 평가",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 25\n        },\n        {\n            "description": "대출 상담 정보 제공",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "optional": true,\n            "context": {"condition": "if_reasonable_price"},\n            "estimated_time": 20\n        }\n    ],\n    "execution_mode": "conditional",\n    "reasoning": "시세 확인 결과에 따라 대출 상담 진행 여부 결정"\n}\n```\n\n## Chain-of-Thought 프로세스:\n\n1. **질문 분석**: 어떤 정보나 작업을 요구하는가?\n2. **연결어 확인**: "그리고", "또한", "해서", "한 후" 등이 있는가?\n3. **의존성 파악**: 어떤 작업이 다른 작업의 결과를 필요로 하는가?\n4. **병렬성 판단**: 독립적으로 실행 가능한 작업이 있는가?\n5. **최적화**: 불필요한 분해는 없는가?\n\n## 응답 형식 (JSON):\n\n{\n    "is_compound": true/false,\n    "sub_tasks": [\n        {\n            "description": "작업 설명",\n            "type": "작업 유형",\n            "agent": "담당 팀",\n            "priority": 우선순위 (1이 가장 높음),\n            "depends_on": ["선행 작업 ID 리스트"],\n            "required_data": {"필요한 데이터 매핑"},\n            "estimated_time": 예상 소요 시간(초),\n            "optional": true/false,\n            "context": {"추가 컨텍스트"}\n        }\n    ],\n    "execution_mode": "sequential/parallel/mixed/conditional",\n    "parallel_groups": [["병렬 실행 가능한 작업 ID 그룹"]],\n    "confidence": 0.0-1.0,\n    "reasoning": "분해 결정의 이유와 근거"\n}\n\n## 분해 가이드라인:\n\n1. **분해가 필요한 경우**:\n   - 여러 종류의 정보를 요청하는 경우\n   - 순차적 처리가 필요한 경우 (A의 결과로 B 수행)\n   - 서로 다른 팀의 전문성이 필요한 경우\n\n2. **분해가 불필요한 경우**:\n   - 단일 정보 조회\n   - 단순한 질문-답변\n   - 하나의 팀에서 완전히 처리 가능한 경우\n\n3. **병렬 처리 기준**:\n   - 서로 독립적인 정보 조회\n   - 의존성이 없는 분석 작업\n   - 동시에 진행해도 충돌하지 않는 작업\n\n4. **우선순위 설정**:\n   - 의존성이 없는 작업: priority 1\n   - 1차 의존 작업: priority 2\n   - 2차 의존 작업: priority 3\n   - 이런 식으로 증가\n\n현재 의도: 법률상담\n추출된 엔티티: {\'action_verbs\': [\'확인\', \'찾다\']}\n\n분석할 질문: 전세금 인상 가능 여부 확인하고 관련 법조항 찾아줘'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 14:42:42,079 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 14:42:42,079 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 14:42:42,079 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 14:42:42,079 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 14:42:42,080 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 14:42:42,080 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 14:42:45,302 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 05:42:45 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'2987'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'3033'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9904'), (b'x-ratelimit-remaining-tokens', b'197985'), (b'x-ratelimit-reset-requests', b'13m46.866s'), (b'x-ratelimit-reset-tokens', b'604ms'), (b'x-request-id', b'req_2926a477ff5e4e03babdf1affbc71d6d'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989a98e0df9de9fb-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 14:42:45,303 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 14:42:45,303 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 14:42:45,303 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 14:42:45,303 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 14:42:45,303 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 14:42:45,303 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 05:42:45 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '2987', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '3033', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9904', 'x-ratelimit-remaining-tokens': '197985', 'x-ratelimit-reset-requests': '13m46.866s', 'x-ratelimit-reset-tokens': '604ms', 'x-request-id': 'req_2926a477ff5e4e03babdf1affbc71d6d', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989a98e0df9de9fb-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 14:42:45,303 - openai._base_client - DEBUG - request_id: req_2926a477ff5e4e03babdf1affbc71d6d
2025-10-05 14:42:45,303 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: query_decomposition | Model: gpt-4o-mini-2024-07-18 | Tokens: 2192 (prompt: 2019, completion: 173)
2025-10-05 14:42:45,303 - app.service_agent.cognitive_agents.query_decomposer - INFO - Successfully decomposed into 2 tasks
2025-10-05 14:42:45,304 - app.service_agent.cognitive_agents.planning_agent - INFO - Query decomposed into 2 tasks
2025-10-05 14:42:45,304 - app.service_agent.cognitive_agents.planning_agent - WARNING - Plan validation errors: ["Agent 'search_team' not found in registry", "Agent 'search_team' depends on missing 'task_0'", "Agent 'search_team' not found in registry"]
2025-10-05 14:42:45,304 - app.service_agent.cognitive_agents.planning_agent - INFO - Optimizing execution plan
2025-10-05 14:42:45,304 - app.service_agent.cognitive_agents.planning_agent - INFO - Comprehensive plan created: Intent: 법률상담 (confidence: 0.90) | Strategy: sequential | Agents: search_team, search_team | Estimated time: 35.0s
2025-10-05 14:42:45,304 - __main__ - INFO -   전략: sequential
2025-10-05 14:42:45,304 - __main__ - INFO -   단계 수: 2
2025-10-05 14:42:45,304 - __main__ - INFO - 
✓ 테스트 성공 (소요시간: 16.39초)
2025-10-05 14:42:45,306 - __main__ - INFO - 
결과 저장: C:\kdy\Projects\holmesnyangz\beta_v001\backend\app\service_agent\reports\phase1_test_results.json
2025-10-05 14:42:45,306 - __main__ - INFO - 
================================================================================
2025-10-05 14:42:45,306 - __main__ - INFO - [26] 복합 질문 테스트: D006
2025-10-05 14:42:45,306 - __main__ - INFO - 질문: 대출 한도 조회하고 금리 비교해줘
2025-10-05 14:42:45,307 - __main__ - INFO - ================================================================================
2025-10-05 14:42:45,307 - __main__ - INFO - 
[Step 1] Intent 분석...
2025-10-05 14:42:45,307 - app.service_agent.cognitive_agents.planning_agent - INFO - Analyzing intent for query: 대출 한도 조회하고 금리 비교해줘...
2025-10-05 14:42:45,307 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-ad286f63-a4dc-4177-a664-113f4a505019', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 의도 분석 전문가입니다.\n사용자의 질문을 정확히 이해하고, 어떤 종류의 도움이 필요한지 분류해야 합니다.\n\n## 중요: 복합 질문 처리\n복합적인 질문(여러 의도가 섞인 질문)의 경우, 가장 핵심적인 의도를 파악하되,\nsub_intents 필드에 부가적인 의도들도 함께 기록해주세요.\n\n## 분류 카테고리 설명:\n\n1. **LEGAL_CONSULT (법률상담)**\n   - 설명: 부동산 관련 법률, 권리, 의무에 대한 질문\n   - 예시:\n     * 단순: "전세금 5% 인상이 가능한가요?", "임대차계약 갱신 거부할 수 있나요?"\n     * 복합: "전세금 인상 가능한지 확인하고 법적 근거도 알려주세요"\n   - 키워드: 법, 전세, 임대, 보증금, 계약, 권리, 의무, 갱신, 임차인, 임대인, 법률, 규정, 조항\n   - 필요한 처리: 법률 데이터베이스 검색, 관련 법조항 찾기\n\n2. **MARKET_INQUIRY (시세조회)**\n   - 설명: 부동산 시장 가격, 시세, 거래 동향에 대한 질문\n   - 예시:\n     * 단순: "강남구 아파트 전세 시세 알려주세요", "서초동 매매가 얼마나 올랐나요?"\n     * 복합: "강남구 시세 확인하고 대출 가능 금액도 계산해줘"\n   - 키워드: 시세, 가격, 매매가, 전세가, 월세, 시장, 동향, 평균, 지역명, 상승률, 하락률\n   - 필요한 처리: 부동산 시세 데이터 조회, 지역별 가격 분석\n\n3. **LOAN_CONSULT (대출상담)**\n   - 설명: 주택담보대출, 전세자금대출 등 금융 관련 질문\n   - 예시:\n     * 단순: "전세자금대출 한도가 얼마인가요?", "LTV가 뭔가요?"\n     * 복합: "대출 한도 확인하고 금리 비교도 해주세요"\n   - 키워드: 대출, 금리, 한도, 조건, 상환, LTV, DTI, DSR, 담보, 금융, 은행\n   - 필요한 처리: 대출 상품 조회, 금리 정보 검색, 한도 계산\n\n4. **CONTRACT_CREATION (계약서작성)**\n   - 설명: 새로운 계약서나 문서를 작성해달라는 요청\n   - 예시:\n     * 단순: "임대차계약서 작성해주세요", "전세계약서 초안 만들어주세요"\n     * 복합: "계약서 작성하고 주의사항도 검토해주세요"\n   - 키워드: 작성, 만들, 생성, 초안, 계약서, 문서, 양식\n   - 필요한 처리: 문서 생성 에이전트 호출, 템플릿 기반 작성\n\n5. **CONTRACT_REVIEW (계약서검토)**\n   - 설명: 기존 계약서나 문서를 검토해달라는 요청\n   - 예시:\n     * 단순: "이 계약서 검토해주세요", "특약사항 문제없나요?"\n     * 복합: "계약서 검토하고 수정사항도 제안해주세요"\n   - 키워드: 검토, 확인, 점검, 리뷰, 분석해, 살펴봐, 체크\n   - 필요한 처리: 문서 분석, 위험 요소 식별, 개선사항 제안\n\n6. **COMPREHENSIVE (종합분석)**\n   - 설명: 여러 측면을 종합적으로 분석해달라는 요청\n   - 예시:\n     * 단순: "이 물건 전체적으로 분석해주세요"\n     * 복합: "시세, 법률, 대출 모두 검토해서 종합 의견 주세요"\n   - 키워드: 종합, 전체, 모든, 전반적, 종합적, 평가, 분석\n   - 필요한 처리: 다중 데이터 소스 통합 분석\n\n7. **RISK_ANALYSIS (리스크분석)**\n   - 설명: 위험 요소나 주의사항에 대한 질문\n   - 예시:\n     * 단순: "이 계약 위험한가요?", "주의할 점 알려주세요"\n     * 복합: "리스크 분석하고 대안도 제시해주세요"\n   - 키워드: 위험, 리스크, 주의, 문제점, 조심, 걱정, 우려\n   - 필요한 처리: 위험 요소 분석, 주의사항 추출\n\n8. **UNCLEAR (불분명)**\n   - 설명: 의도를 명확히 파악하기 어려운 질문\n   - 예시: "이거 좀 봐주세요", "어떻게 해야 할까요?", "도와주세요"\n   - 처리: 추가 질문으로 의도 명확화 필요\n\n9. **IRRELEVANT (무관)**\n   - 설명: 부동산과 전혀 관련 없는 질문\n   - 예시: "날씨 어때?", "저녁 뭐 먹지?", "주식 추천해줘"\n   - 처리: 부동산 관련 질문을 유도\n\n## 복합 질문 예시와 분석:\n\n### 예시 1: "강남구 아파트 시세 알려주고 전세자금대출 가능한지도 확인해줘"\n- 주 의도: MARKET_INQUIRY (시세 조회가 먼저 필요)\n- 부가 의도: LOAN_CONSULT (대출 확인)\n- 분해: ["강남구 아파트 시세 조회", "전세자금대출 가능 여부 확인"]\n\n### 예시 2: "이 계약서 검토해서 위험한 부분 있는지 알려주고 수정 제안도 해줘"\n- 주 의도: CONTRACT_REVIEW (계약서 검토)\n- 부가 의도: RISK_ANALYSIS (위험 분석)\n- 분해: ["계약서 전체 검토", "위험 요소 식별", "수정사항 제안"]\n\n### 예시 3: "서초동 전세가 확인하고 법적으로 문제없는지도 봐줘"\n- 주 의도: MARKET_INQUIRY (시세 확인)\n- 부가 의도: LEGAL_CONSULT (법적 검토)\n- 분해: ["서초동 전세가 조회", "법적 이슈 검토"]\n\n## 응답 형식 (JSON 형식으로 응답):\n\n{\n    "intent": "LEGAL_CONSULT",\n    "confidence": 0.9,\n    "keywords": ["전세금", "인상", "제한"],\n    "sub_intents": [],\n    "is_compound": false,\n    "decomposed_tasks": [],\n    "entities": {\n        "location": "강남구",\n        "price": "5억",\n        "contract_type": "전세",\n        "date": "2024년",\n        "area": "84㎡",\n        "action_verbs": ["확인", "검토"]\n    },\n    "reasoning": "전세금 인상에 대한 법률 질문이므로 LEGAL_CONSULT로 분류"\n}\n\n응답 규칙:\n- intent: 위 9개 카테고리 중 하나 (대문자_언더스코어 형식)\n- confidence: 0.0~1.0 (0.8 이상이면 매우 확실, 0.5 미만이면 불확실)\n- keywords: 추출된 주요 키워드 목록\n- sub_intents: 복합 질문일 경우 부가적인 의도들\n- is_compound: 복합 질문 여부 (true/false)\n- decomposed_tasks: 복합 질문을 분해한 개별 작업들\n- entities: 추출된 엔티티 정보\n- reasoning: 분류한 이유와 근거 (상세하게)\n\n## 판단 가이드:\n- 여러 의도가 섞여있다면, 가장 주된 의도를 intent에, 나머지를 sub_intents에 기록\n- "그리고", "또한", "함께", "같이" 등의 연결어가 있으면 복합 질문일 가능성 높음\n- 법률 관련 키워드가 있으면 LEGAL_CONSULT 우선\n- 가격/시세 언급이 명확하면 MARKET_INQUIRY\n- 계약서라는 단어와 함께 "작성/만들기"가 있으면 CONTRACT_CREATION\n- 계약서라는 단어와 함께 "검토/확인"이 있으면 CONTRACT_REVIEW\n- 불확실하면 confidence를 낮게 설정하고 UNCLEAR 선택\n- 복합 질문은 is_compound를 true로 설정하고 개별 작업으로 분해\n\n분석할 질문: 대출 한도 조회하고 금리 비교해줘'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 14:42:45,308 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 14:42:45,308 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 14:42:45,308 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 14:42:45,308 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 14:42:45,309 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 14:42:45,309 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 14:42:47,657 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 05:42:47 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'2041'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'2060'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9903'), (b'x-ratelimit-remaining-tokens', b'198316'), (b'x-ratelimit-reset-requests', b'13m52.275s'), (b'x-ratelimit-reset-tokens', b'505ms'), (b'x-request-id', b'req_3cf67d2a4faa4d18aeb58e730d987cf3'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989a98f50f36e9fb-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 14:42:47,657 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 14:42:47,657 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 14:42:47,657 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 14:42:47,657 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 14:42:47,658 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 14:42:47,658 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 05:42:47 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '2041', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '2060', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9903', 'x-ratelimit-remaining-tokens': '198316', 'x-ratelimit-reset-requests': '13m52.275s', 'x-ratelimit-reset-tokens': '505ms', 'x-request-id': 'req_3cf67d2a4faa4d18aeb58e730d987cf3', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989a98f50f36e9fb-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 14:42:47,658 - openai._base_client - DEBUG - request_id: req_3cf67d2a4faa4d18aeb58e730d987cf3
2025-10-05 14:42:47,658 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: intent_analysis | Model: gpt-4o-mini-2024-07-18 | Tokens: 2039 (prompt: 1921, completion: 118)
2025-10-05 14:42:47,658 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM Intent Analysis Result: {'intent': 'LOAN_CONSULT', 'confidence': 0.9, 'keywords': ['대출', '한도', '금리', '비교'], 'sub_intents': [], 'is_compound': True, 'decomposed_tasks': ['대출 한도 조회', '금리 비교'], 'entities': {}, 'reasoning': '대출 한도와 금리에 대한 질문이므로 LOAN_CONSULT로 분류하였으며, 두 가지 작업으로 분해됨.'}
2025-10-05 14:42:47,658 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-9322f141-dc6d-4168-a4e5-defe13cb5b86', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 Agent 선택 전문가입니다.\n사용자의 요청에 가장 적합한 Agent/Team을 선택하는 것이 목표입니다.\n\n## 현재 상황\n\n**사용자 질문:** 대출 한도 조회하고 금리 비교해줘\n**분석된 의도:** 대출상담\n**추출된 키워드:** [\'대출\', \'한도\', \'금리\', \'비교\']\n\n## 사용 가능한 Agent/Team 정보\n\n{\'search_team\': {\'name\': \'search_team\', \'capabilities\': \'법률 검색, 부동산 시세 조회, 대출 상품 검색\', \'tools\': [\'legal_search\', \'market_data\', \'loan_data\'], \'use_cases\': [\'법률 상담\', \'시세 조회\', \'대출 정보\']}, \'analysis_team\': {\'name\': \'analysis_team\', \'capabilities\': \'데이터 분석, 리스크 평가, 인사이트 생성, 추천\', \'tools\': [\'data_analyzer\', \'risk_evaluator\'], \'use_cases\': [\'시장 분석\', \'리스크 평가\', \'투자 분석\']}, \'document_team\': {\'name\': \'document_team\', \'capabilities\': \'계약서 작성, 문서 생성, 문서 검토\', \'tools\': [\'document_generator\', \'contract_reviewer\'], \'use_cases\': [\'계약서 작성\', \'문서 검토\']}}\n\n## Agent 역할 및 상세 가이드\n\n### 1. search_team (검색 팀)\n- **주요 기능**: 정보 검색 및 데이터 수집\n- **전문 분야**:\n  * 법률 정보 검색 (전세법, 임대차보호법, 부동산 관련 법규)\n  * 부동산 시세 조회 (매매가, 전세가, 월세, 실거래가)\n  * 대출 상품 정보 검색 (금리, 한도, 조건)\n  * 지역 정보 및 인프라 조회\n- **도구**: legal_search, market_data, loan_data\n- **적합한 작업**: 정보 조회, 데이터 수집, 법률 확인, 시세 파악\n- **예시**:\n  * "전세금 5% 인상 가능한가요?"\n  * "강남구 아파트 전세 시세"\n  * "전세자금대출 한도 얼마?"\n\n### 2. analysis_team (분석 팀)\n- **주요 기능**: 데이터 분석 및 평가\n- **전문 분야**:\n  * 시장 동향 분석 (상승률, 하락률, 추세)\n  * 리스크 평가 (계약, 투자 위험도)\n  * 투자 수익률 계산 (ROI, 월세 수익률)\n  * 대출 한도 및 조건 분석 (LTV, DTI, DSR)\n  * 비교 분석 (지역별, 상품별)\n- **도구**: data_analyzer, risk_evaluator, calculator\n- **적합한 작업**: 데이터 분석, 리스크 평가, 계산, 비교, 예측\n- **의존성**: 보통 search_team의 데이터가 필요\n- **예시**:\n  * "이 지역 투자 가치 분석해줘"\n  * "계약 리스크 평가해줘"\n  * "대출 가능 금액 계산해줘"\n\n### 3. document_team (문서 팀)\n- **주요 기능**: 문서 생성 및 관리\n- **전문 분야**:\n  * 계약서 작성 (임대차, 매매, 전세)\n  * 문서 템플릿 관리\n  * 특약사항 생성\n  * 계약서 수정안 작성\n  * 법률 문서 검토\n- **도구**: document_generator, contract_template, contract_reviewer\n- **적합한 작업**: 문서 작성, 계약서 생성, 문서 수정, 검토\n- **예시**:\n  * "임대차계약서 작성해줘"\n  * "특약사항 추가해줘"\n  * "계약서 수정안 만들어줘"\n\n## Agent 선택 전략\n\n### 1단계: 작업 유형 식별\n```\n정보 필요 → search_team\n분석/계산 필요 → analysis_team\n문서 작성 필요 → document_team\n```\n\n### 2단계: 의존성 분석\n```\n독립적 작업 → 단일 팀\n순차적 의존 → 여러 팀 (순서 중요)\n병렬 가능 → 여러 팀 (순서 무관)\n```\n\n### 3단계: 최적화\n```\n중복 제거 → 가장 적합한 팀만 선택\n효율성 → 병렬 처리 가능한 경우 표시\n```\n\n## 의도별 Agent 매핑 가이드\n\n| 의도 (Intent) | 추천 Agent 조합 | 이유 |\n|--------------|-----------------|------|\n| LEGAL_CONSULT | ["search_team"] | 법률 정보 검색 전문 |\n| MARKET_INQUIRY | ["search_team"] | 시세 데이터 조회 |\n| LOAN_CONSULT | ["search_team", "analysis_team"] | 대출 정보 조회 후 분석 |\n| CONTRACT_CREATION | ["document_team"] | 문서 생성 전문 |\n| CONTRACT_REVIEW | ["search_team", "analysis_team"] | 법률 검토 및 리스크 분석 |\n| COMPREHENSIVE | ["search_team", "analysis_team"] | 종합 정보 수집 및 분석 |\n| RISK_ANALYSIS | ["analysis_team"] | 리스크 평가 전문 |\n| UNCLEAR | ["search_team", "analysis_team"] | 포괄적 대응 |\n\n## 복합 질문 처리 예시\n\n### 예시 1: 순차적 처리\n질문: "강남구 시세 확인하고 투자 가치 분석해줘"\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "먼저 search_team이 시세 데이터를 수집하고, 그 결과를 analysis_team이 분석하여 투자 가치 평가"\n}\n```\n\n### 예시 2: 병렬 처리 가능\n질문: "법률 정보와 시세 정보 모두 알려줘"\n```json\n{\n    "selected_agents": ["search_team"],\n    "reasoning": "search_team이 법률과 시세 정보를 병렬로 조회 가능. 두 작업이 독립적이므로 동시 처리"\n}\n```\n\n### 예시 3: 3단계 파이프라인\n질문: "시세 조회하고 분석한 후 계약서 작성해줘"\n```json\n{\n    "selected_agents": ["search_team", "analysis_team", "document_team"],\n    "reasoning": "search_team이 데이터 수집 → analysis_team이 분석 → document_team이 분석 결과 기반 계약서 작성"\n}\n```\n\n## 응답 형식 (JSON)\n\n{\n    "selected_agents": ["선택된 agent/team 목록"],\n    "reasoning": "선택 이유를 구체적으로 설명. 각 Agent의 역할과 처리 순서 포함",\n    "coordination": "single/sequential/parallel/pipeline",\n    "dependencies": {"agent2": ["agent1"]},\n    "estimated_time": 30,\n    "confidence": 0.9\n}\n\n## 선택 가이드라인\n\n1. **최소 Agent 원칙**: 가능한 적은 수의 Agent로 처리\n2. **전문성 우선**: 해당 작업에 가장 전문적인 Agent 선택\n3. **효율성 고려**: 병렬 처리 가능한 경우 명시\n4. **의존성 관리**: 데이터 흐름을 고려한 순서 지정\n5. **폴백 전략**: 불확실한 경우 ["search_team", "analysis_team"] 조합\n\n## 주의사항\n\n- selected_agents는 반드시 배열 형태\n- Agent 이름은 정확히: "search_team", "analysis_team", "document_team"\n- 최소 1개, 최대 3개 선택\n- 순서는 실행 우선순위 (앞에 있을수록 먼저 실행)\n- reasoning은 상세하고 논리적으로 작성\n- coordination 필드로 실행 방식 명시\n- 복합 질문의 경우 의존성 관계 명확히 표시'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 14:42:47,659 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 14:42:47,659 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 14:42:47,659 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 14:42:47,659 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 14:42:47,659 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 14:42:47,659 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 14:42:49,526 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 05:42:49 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'1655'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'1678'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9902'), (b'x-ratelimit-remaining-tokens', b'198433'), (b'x-ratelimit-reset-requests', b'13m58.557s'), (b'x-ratelimit-reset-tokens', b'470ms'), (b'x-request-id', b'req_0fe0de8058094a1f9e21cb9455d644d6'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989a9903bf5ce9fb-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 14:42:49,526 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 14:42:49,526 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 14:42:49,533 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 14:42:49,533 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 14:42:49,533 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 14:42:49,534 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 05:42:49 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '1655', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '1678', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9902', 'x-ratelimit-remaining-tokens': '198433', 'x-ratelimit-reset-requests': '13m58.557s', 'x-ratelimit-reset-tokens': '470ms', 'x-request-id': 'req_0fe0de8058094a1f9e21cb9455d644d6', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989a9903bf5ce9fb-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 14:42:49,534 - openai._base_client - DEBUG - request_id: req_0fe0de8058094a1f9e21cb9455d644d6
2025-10-05 14:42:49,534 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: agent_selection | Model: gpt-4o-mini-2024-07-18 | Tokens: 1812 (prompt: 1705, completion: 107)
2025-10-05 14:42:49,534 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM agent selection reasoning: 사용자가 대출 한도 조회와 금리 비교를 요청했으므로, 먼저 search_team이 대출 상품 정보를 수집하고, 그 결과를 analysis_team이 분석하여 금리를 비교하는 작업을 수행해야 합니다.
2025-10-05 14:42:49,534 - app.service_agent.cognitive_agents.planning_agent - INFO - ✅ Primary LLM selected agents: ['search_team', 'analysis_team']
2025-10-05 14:42:49,534 - __main__ - INFO -   의도: 대출상담
2025-10-05 14:42:49,534 - __main__ - INFO -   신뢰도: 0.90
2025-10-05 14:42:49,534 - __main__ - INFO -   추천 Agent: ['search_team', 'analysis_team']
2025-10-05 14:42:49,534 - __main__ - INFO - 
[Step 2] Query Decomposition...
2025-10-05 14:42:49,534 - app.service_agent.cognitive_agents.query_decomposer - INFO - Decomposing query: 대출 한도 조회하고 금리 비교해줘...
2025-10-05 14:42:49,535 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-3dde6273-a9db-4681-b248-3008d549d644', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 질문 분해 전문가입니다.\n복잡한 사용자 질문을 독립적으로 처리 가능한 작업 단위로 분해하는 것이 목표입니다.\n\n## 중요 원칙:\n1. 각 작업은 하나의 명확한 목표를 가져야 합니다\n2. 작업 간 의존성을 명확히 파악해야 합니다\n3. 병렬 처리 가능한 작업은 구분해야 합니다\n4. 불필요한 분해는 피해야 합니다 (단순 질문은 분해하지 않음)\n\n## 작업 유형 (type):\n- search: 정보 검색 (법률, 시세, 대출 정보 등)\n- analysis: 데이터 분석 (리스크 평가, 시장 분석 등)\n- generation: 문서 생성 (계약서 작성 등)\n- review: 검토/평가 (계약서 검토, 조건 확인 등)\n- calculation: 계산/산출 (대출 한도, 세금 등)\n- comparison: 비교 분석 (여러 옵션 비교)\n\n## 담당 팀 (agent):\n- search_team: 법률, 시세, 대출 정보 검색\n- analysis_team: 데이터 분석, 리스크 평가, 계산\n- document_team: 문서 생성, 계약서 작성\n\n## 학습 예시:\n\n### 예시 1: 복합 질문 (순차적)\n질문: "강남구 아파트 시세 확인하고 대출 가능 금액 계산해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "강남구 아파트 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "대출 가능 금액 계산",\n            "type": "calculation",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "required_data": {"price": "task_0.result.price"},\n            "estimated_time": 15\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "시세 정보가 있어야 대출 금액 계산이 가능하므로 순차 실행"\n}\n```\n\n### 예시 2: 복합 질문 (병렬 가능)\n질문: "이 지역 전세 시세와 매매 시세 모두 알려주고 비교 분석해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "전세 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "매매 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "전세/매매 시세 비교 분석",\n            "type": "comparison",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0", "task_1"],\n            "required_data": {\n                "lease_price": "task_0.result",\n                "sale_price": "task_1.result"\n            },\n            "estimated_time": 25\n        }\n    ],\n    "execution_mode": "mixed",\n    "parallel_groups": [["task_0", "task_1"], ["task_2"]],\n    "reasoning": "시세 조회는 독립적이므로 병렬 처리, 비교는 두 결과 필요"\n}\n```\n\n### 예시 3: 복합 질문 (3단계 이상)\n질문: "이 계약서 검토해서 위험한 부분 찾고 수정안 만들어서 최종 계약서 작성해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "계약서 내용 전체 검토",\n            "type": "review",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 30\n        },\n        {\n            "description": "위험 요소 및 문제점 분석",\n            "type": "analysis",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "estimated_time": 25\n        },\n        {\n            "description": "수정안 제안 생성",\n            "type": "generation",\n            "agent": "document_team",\n            "priority": 3,\n            "depends_on": ["task_1"],\n            "estimated_time": 20\n        },\n        {\n            "description": "최종 계약서 작성",\n            "type": "generation",\n            "agent": "document_team",\n            "priority": 4,\n            "depends_on": ["task_2"],\n            "estimated_time": 30\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "각 단계가 이전 결과에 의존하므로 순차 실행 필요"\n}\n```\n\n### 예시 4: 단순 질문 (분해 불필요)\n질문: "전세금 인상률 상한이 얼마야?"\n분해:\n```json\n{\n    "is_compound": false,\n    "sub_tasks": [\n        {\n            "description": "전세금 인상률 상한 법률 정보 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 15\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "단일 정보 조회 요청으로 분해 불필요"\n}\n```\n\n### 예시 5: 조건부 실행\n질문: "이 물건 시세 확인하고 적정가면 대출 상담도 받고 싶어"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "물건 시세 조회 및 적정성 평가",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 25\n        },\n        {\n            "description": "대출 상담 정보 제공",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "optional": true,\n            "context": {"condition": "if_reasonable_price"},\n            "estimated_time": 20\n        }\n    ],\n    "execution_mode": "conditional",\n    "reasoning": "시세 확인 결과에 따라 대출 상담 진행 여부 결정"\n}\n```\n\n## Chain-of-Thought 프로세스:\n\n1. **질문 분석**: 어떤 정보나 작업을 요구하는가?\n2. **연결어 확인**: "그리고", "또한", "해서", "한 후" 등이 있는가?\n3. **의존성 파악**: 어떤 작업이 다른 작업의 결과를 필요로 하는가?\n4. **병렬성 판단**: 독립적으로 실행 가능한 작업이 있는가?\n5. **최적화**: 불필요한 분해는 없는가?\n\n## 응답 형식 (JSON):\n\n{\n    "is_compound": true/false,\n    "sub_tasks": [\n        {\n            "description": "작업 설명",\n            "type": "작업 유형",\n            "agent": "담당 팀",\n            "priority": 우선순위 (1이 가장 높음),\n            "depends_on": ["선행 작업 ID 리스트"],\n            "required_data": {"필요한 데이터 매핑"},\n            "estimated_time": 예상 소요 시간(초),\n            "optional": true/false,\n            "context": {"추가 컨텍스트"}\n        }\n    ],\n    "execution_mode": "sequential/parallel/mixed/conditional",\n    "parallel_groups": [["병렬 실행 가능한 작업 ID 그룹"]],\n    "confidence": 0.0-1.0,\n    "reasoning": "분해 결정의 이유와 근거"\n}\n\n## 분해 가이드라인:\n\n1. **분해가 필요한 경우**:\n   - 여러 종류의 정보를 요청하는 경우\n   - 순차적 처리가 필요한 경우 (A의 결과로 B 수행)\n   - 서로 다른 팀의 전문성이 필요한 경우\n\n2. **분해가 불필요한 경우**:\n   - 단일 정보 조회\n   - 단순한 질문-답변\n   - 하나의 팀에서 완전히 처리 가능한 경우\n\n3. **병렬 처리 기준**:\n   - 서로 독립적인 정보 조회\n   - 의존성이 없는 분석 작업\n   - 동시에 진행해도 충돌하지 않는 작업\n\n4. **우선순위 설정**:\n   - 의존성이 없는 작업: priority 1\n   - 1차 의존 작업: priority 2\n   - 2차 의존 작업: priority 3\n   - 이런 식으로 증가\n\n현재 의도: 대출상담\n추출된 엔티티: None\n\n분석할 질문: 대출 한도 조회하고 금리 비교해줘'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 14:42:49,535 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 14:42:49,535 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 14:42:49,535 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 14:42:49,535 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 14:42:49,536 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 14:42:49,536 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 14:42:56,448 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 05:42:56 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'6710'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'6725'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9902'), (b'x-ratelimit-remaining-tokens', b'198000'), (b'x-ratelimit-reset-requests', b'14m5.328s'), (b'x-ratelimit-reset-tokens', b'600ms'), (b'x-request-id', b'req_fa7b1720920a4c74847fefa8b9547199'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989a990f7853e9fb-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 14:42:56,449 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 14:42:56,449 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 14:42:56,451 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 14:42:56,451 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 14:42:56,451 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 14:42:56,451 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 05:42:56 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '6710', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '6725', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9902', 'x-ratelimit-remaining-tokens': '198000', 'x-ratelimit-reset-requests': '14m5.328s', 'x-ratelimit-reset-tokens': '600ms', 'x-request-id': 'req_fa7b1720920a4c74847fefa8b9547199', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989a990f7853e9fb-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 14:42:56,451 - openai._base_client - DEBUG - request_id: req_fa7b1720920a4c74847fefa8b9547199
2025-10-05 14:42:56,451 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: query_decomposition | Model: gpt-4o-mini-2024-07-18 | Tokens: 2291 (prompt: 2003, completion: 288)
2025-10-05 14:42:56,451 - app.service_agent.cognitive_agents.query_decomposer - INFO - Successfully decomposed into 3 tasks
2025-10-05 14:42:56,451 - __main__ - INFO -   복합 질문: True
2025-10-05 14:42:56,452 - __main__ - INFO -   작업 수: 3
2025-10-05 14:42:56,452 - __main__ - INFO -   실행 모드: conditional
2025-10-05 14:42:56,452 - __main__ - INFO -     - task_0: 대출 한도 조회 (analysis_team)
2025-10-05 14:42:56,452 - __main__ - INFO -     - task_1: 대출 금리 정보 조회 (search_team)
2025-10-05 14:42:56,452 - __main__ - INFO -     - task_2: 대출 한도와 금리 비교 분석 (analysis_team)
2025-10-05 14:42:56,452 - __main__ - INFO - 
[Step 3] Comprehensive Plan 생성...
2025-10-05 14:42:56,452 - app.service_agent.cognitive_agents.planning_agent - INFO - Creating comprehensive plan for query: 대출 한도 조회하고 금리 비교해줘...
2025-10-05 14:42:56,452 - app.service_agent.cognitive_agents.planning_agent - INFO - Analyzing intent for query: 대출 한도 조회하고 금리 비교해줘...
2025-10-05 14:42:56,452 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-c933ab88-6c4b-43bf-a125-531146d14eb9', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 의도 분석 전문가입니다.\n사용자의 질문을 정확히 이해하고, 어떤 종류의 도움이 필요한지 분류해야 합니다.\n\n## 중요: 복합 질문 처리\n복합적인 질문(여러 의도가 섞인 질문)의 경우, 가장 핵심적인 의도를 파악하되,\nsub_intents 필드에 부가적인 의도들도 함께 기록해주세요.\n\n## 분류 카테고리 설명:\n\n1. **LEGAL_CONSULT (법률상담)**\n   - 설명: 부동산 관련 법률, 권리, 의무에 대한 질문\n   - 예시:\n     * 단순: "전세금 5% 인상이 가능한가요?", "임대차계약 갱신 거부할 수 있나요?"\n     * 복합: "전세금 인상 가능한지 확인하고 법적 근거도 알려주세요"\n   - 키워드: 법, 전세, 임대, 보증금, 계약, 권리, 의무, 갱신, 임차인, 임대인, 법률, 규정, 조항\n   - 필요한 처리: 법률 데이터베이스 검색, 관련 법조항 찾기\n\n2. **MARKET_INQUIRY (시세조회)**\n   - 설명: 부동산 시장 가격, 시세, 거래 동향에 대한 질문\n   - 예시:\n     * 단순: "강남구 아파트 전세 시세 알려주세요", "서초동 매매가 얼마나 올랐나요?"\n     * 복합: "강남구 시세 확인하고 대출 가능 금액도 계산해줘"\n   - 키워드: 시세, 가격, 매매가, 전세가, 월세, 시장, 동향, 평균, 지역명, 상승률, 하락률\n   - 필요한 처리: 부동산 시세 데이터 조회, 지역별 가격 분석\n\n3. **LOAN_CONSULT (대출상담)**\n   - 설명: 주택담보대출, 전세자금대출 등 금융 관련 질문\n   - 예시:\n     * 단순: "전세자금대출 한도가 얼마인가요?", "LTV가 뭔가요?"\n     * 복합: "대출 한도 확인하고 금리 비교도 해주세요"\n   - 키워드: 대출, 금리, 한도, 조건, 상환, LTV, DTI, DSR, 담보, 금융, 은행\n   - 필요한 처리: 대출 상품 조회, 금리 정보 검색, 한도 계산\n\n4. **CONTRACT_CREATION (계약서작성)**\n   - 설명: 새로운 계약서나 문서를 작성해달라는 요청\n   - 예시:\n     * 단순: "임대차계약서 작성해주세요", "전세계약서 초안 만들어주세요"\n     * 복합: "계약서 작성하고 주의사항도 검토해주세요"\n   - 키워드: 작성, 만들, 생성, 초안, 계약서, 문서, 양식\n   - 필요한 처리: 문서 생성 에이전트 호출, 템플릿 기반 작성\n\n5. **CONTRACT_REVIEW (계약서검토)**\n   - 설명: 기존 계약서나 문서를 검토해달라는 요청\n   - 예시:\n     * 단순: "이 계약서 검토해주세요", "특약사항 문제없나요?"\n     * 복합: "계약서 검토하고 수정사항도 제안해주세요"\n   - 키워드: 검토, 확인, 점검, 리뷰, 분석해, 살펴봐, 체크\n   - 필요한 처리: 문서 분석, 위험 요소 식별, 개선사항 제안\n\n6. **COMPREHENSIVE (종합분석)**\n   - 설명: 여러 측면을 종합적으로 분석해달라는 요청\n   - 예시:\n     * 단순: "이 물건 전체적으로 분석해주세요"\n     * 복합: "시세, 법률, 대출 모두 검토해서 종합 의견 주세요"\n   - 키워드: 종합, 전체, 모든, 전반적, 종합적, 평가, 분석\n   - 필요한 처리: 다중 데이터 소스 통합 분석\n\n7. **RISK_ANALYSIS (리스크분석)**\n   - 설명: 위험 요소나 주의사항에 대한 질문\n   - 예시:\n     * 단순: "이 계약 위험한가요?", "주의할 점 알려주세요"\n     * 복합: "리스크 분석하고 대안도 제시해주세요"\n   - 키워드: 위험, 리스크, 주의, 문제점, 조심, 걱정, 우려\n   - 필요한 처리: 위험 요소 분석, 주의사항 추출\n\n8. **UNCLEAR (불분명)**\n   - 설명: 의도를 명확히 파악하기 어려운 질문\n   - 예시: "이거 좀 봐주세요", "어떻게 해야 할까요?", "도와주세요"\n   - 처리: 추가 질문으로 의도 명확화 필요\n\n9. **IRRELEVANT (무관)**\n   - 설명: 부동산과 전혀 관련 없는 질문\n   - 예시: "날씨 어때?", "저녁 뭐 먹지?", "주식 추천해줘"\n   - 처리: 부동산 관련 질문을 유도\n\n## 복합 질문 예시와 분석:\n\n### 예시 1: "강남구 아파트 시세 알려주고 전세자금대출 가능한지도 확인해줘"\n- 주 의도: MARKET_INQUIRY (시세 조회가 먼저 필요)\n- 부가 의도: LOAN_CONSULT (대출 확인)\n- 분해: ["강남구 아파트 시세 조회", "전세자금대출 가능 여부 확인"]\n\n### 예시 2: "이 계약서 검토해서 위험한 부분 있는지 알려주고 수정 제안도 해줘"\n- 주 의도: CONTRACT_REVIEW (계약서 검토)\n- 부가 의도: RISK_ANALYSIS (위험 분석)\n- 분해: ["계약서 전체 검토", "위험 요소 식별", "수정사항 제안"]\n\n### 예시 3: "서초동 전세가 확인하고 법적으로 문제없는지도 봐줘"\n- 주 의도: MARKET_INQUIRY (시세 확인)\n- 부가 의도: LEGAL_CONSULT (법적 검토)\n- 분해: ["서초동 전세가 조회", "법적 이슈 검토"]\n\n## 응답 형식 (JSON 형식으로 응답):\n\n{\n    "intent": "LEGAL_CONSULT",\n    "confidence": 0.9,\n    "keywords": ["전세금", "인상", "제한"],\n    "sub_intents": [],\n    "is_compound": false,\n    "decomposed_tasks": [],\n    "entities": {\n        "location": "강남구",\n        "price": "5억",\n        "contract_type": "전세",\n        "date": "2024년",\n        "area": "84㎡",\n        "action_verbs": ["확인", "검토"]\n    },\n    "reasoning": "전세금 인상에 대한 법률 질문이므로 LEGAL_CONSULT로 분류"\n}\n\n응답 규칙:\n- intent: 위 9개 카테고리 중 하나 (대문자_언더스코어 형식)\n- confidence: 0.0~1.0 (0.8 이상이면 매우 확실, 0.5 미만이면 불확실)\n- keywords: 추출된 주요 키워드 목록\n- sub_intents: 복합 질문일 경우 부가적인 의도들\n- is_compound: 복합 질문 여부 (true/false)\n- decomposed_tasks: 복합 질문을 분해한 개별 작업들\n- entities: 추출된 엔티티 정보\n- reasoning: 분류한 이유와 근거 (상세하게)\n\n## 판단 가이드:\n- 여러 의도가 섞여있다면, 가장 주된 의도를 intent에, 나머지를 sub_intents에 기록\n- "그리고", "또한", "함께", "같이" 등의 연결어가 있으면 복합 질문일 가능성 높음\n- 법률 관련 키워드가 있으면 LEGAL_CONSULT 우선\n- 가격/시세 언급이 명확하면 MARKET_INQUIRY\n- 계약서라는 단어와 함께 "작성/만들기"가 있으면 CONTRACT_CREATION\n- 계약서라는 단어와 함께 "검토/확인"이 있으면 CONTRACT_REVIEW\n- 불확실하면 confidence를 낮게 설정하고 UNCLEAR 선택\n- 복합 질문은 is_compound를 true로 설정하고 개별 작업으로 분해\n\n분석할 질문: 대출 한도 조회하고 금리 비교해줘'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 14:42:56,453 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 14:42:56,453 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 14:42:56,453 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 14:42:56,453 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 14:42:56,453 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 14:42:56,453 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 14:42:58,920 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 05:42:58 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'2210'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'2238'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9901'), (b'x-ratelimit-remaining-tokens', b'198316'), (b'x-ratelimit-reset-requests', b'14m7.046s'), (b'x-ratelimit-reset-tokens', b'505ms'), (b'x-request-id', b'req_fdf54483a99c45fe8479ea949b435e08'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989a993aaa05e9fb-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 14:42:58,920 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 14:42:58,921 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 14:42:58,921 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 14:42:58,921 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 14:42:58,921 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 14:42:58,921 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 05:42:58 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '2210', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '2238', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9901', 'x-ratelimit-remaining-tokens': '198316', 'x-ratelimit-reset-requests': '14m7.046s', 'x-ratelimit-reset-tokens': '505ms', 'x-request-id': 'req_fdf54483a99c45fe8479ea949b435e08', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989a993aaa05e9fb-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 14:42:58,921 - openai._base_client - DEBUG - request_id: req_fdf54483a99c45fe8479ea949b435e08
2025-10-05 14:42:58,921 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: intent_analysis | Model: gpt-4o-mini-2024-07-18 | Tokens: 2046 (prompt: 1921, completion: 125)
2025-10-05 14:42:58,921 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM Intent Analysis Result: {'intent': 'LOAN_CONSULT', 'confidence': 0.9, 'keywords': ['대출', '한도', '금리', '비교'], 'sub_intents': [], 'is_compound': True, 'decomposed_tasks': ['대출 한도 조회', '금리 비교'], 'entities': {}, 'reasoning': '대출 한도와 금리에 대한 질문이므로 LOAN_CONSULT로 분류하였고, 두 가지 작업으로 분해할 수 있어 복합 질문으로 판단'}
2025-10-05 14:42:58,922 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-25086cc1-b61b-491c-94fb-186abac18262', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 Agent 선택 전문가입니다.\n사용자의 요청에 가장 적합한 Agent/Team을 선택하는 것이 목표입니다.\n\n## 현재 상황\n\n**사용자 질문:** 대출 한도 조회하고 금리 비교해줘\n**분석된 의도:** 대출상담\n**추출된 키워드:** [\'대출\', \'한도\', \'금리\', \'비교\']\n\n## 사용 가능한 Agent/Team 정보\n\n{\'search_team\': {\'name\': \'search_team\', \'capabilities\': \'법률 검색, 부동산 시세 조회, 대출 상품 검색\', \'tools\': [\'legal_search\', \'market_data\', \'loan_data\'], \'use_cases\': [\'법률 상담\', \'시세 조회\', \'대출 정보\']}, \'analysis_team\': {\'name\': \'analysis_team\', \'capabilities\': \'데이터 분석, 리스크 평가, 인사이트 생성, 추천\', \'tools\': [\'data_analyzer\', \'risk_evaluator\'], \'use_cases\': [\'시장 분석\', \'리스크 평가\', \'투자 분석\']}, \'document_team\': {\'name\': \'document_team\', \'capabilities\': \'계약서 작성, 문서 생성, 문서 검토\', \'tools\': [\'document_generator\', \'contract_reviewer\'], \'use_cases\': [\'계약서 작성\', \'문서 검토\']}}\n\n## Agent 역할 및 상세 가이드\n\n### 1. search_team (검색 팀)\n- **주요 기능**: 정보 검색 및 데이터 수집\n- **전문 분야**:\n  * 법률 정보 검색 (전세법, 임대차보호법, 부동산 관련 법규)\n  * 부동산 시세 조회 (매매가, 전세가, 월세, 실거래가)\n  * 대출 상품 정보 검색 (금리, 한도, 조건)\n  * 지역 정보 및 인프라 조회\n- **도구**: legal_search, market_data, loan_data\n- **적합한 작업**: 정보 조회, 데이터 수집, 법률 확인, 시세 파악\n- **예시**:\n  * "전세금 5% 인상 가능한가요?"\n  * "강남구 아파트 전세 시세"\n  * "전세자금대출 한도 얼마?"\n\n### 2. analysis_team (분석 팀)\n- **주요 기능**: 데이터 분석 및 평가\n- **전문 분야**:\n  * 시장 동향 분석 (상승률, 하락률, 추세)\n  * 리스크 평가 (계약, 투자 위험도)\n  * 투자 수익률 계산 (ROI, 월세 수익률)\n  * 대출 한도 및 조건 분석 (LTV, DTI, DSR)\n  * 비교 분석 (지역별, 상품별)\n- **도구**: data_analyzer, risk_evaluator, calculator\n- **적합한 작업**: 데이터 분석, 리스크 평가, 계산, 비교, 예측\n- **의존성**: 보통 search_team의 데이터가 필요\n- **예시**:\n  * "이 지역 투자 가치 분석해줘"\n  * "계약 리스크 평가해줘"\n  * "대출 가능 금액 계산해줘"\n\n### 3. document_team (문서 팀)\n- **주요 기능**: 문서 생성 및 관리\n- **전문 분야**:\n  * 계약서 작성 (임대차, 매매, 전세)\n  * 문서 템플릿 관리\n  * 특약사항 생성\n  * 계약서 수정안 작성\n  * 법률 문서 검토\n- **도구**: document_generator, contract_template, contract_reviewer\n- **적합한 작업**: 문서 작성, 계약서 생성, 문서 수정, 검토\n- **예시**:\n  * "임대차계약서 작성해줘"\n  * "특약사항 추가해줘"\n  * "계약서 수정안 만들어줘"\n\n## Agent 선택 전략\n\n### 1단계: 작업 유형 식별\n```\n정보 필요 → search_team\n분석/계산 필요 → analysis_team\n문서 작성 필요 → document_team\n```\n\n### 2단계: 의존성 분석\n```\n독립적 작업 → 단일 팀\n순차적 의존 → 여러 팀 (순서 중요)\n병렬 가능 → 여러 팀 (순서 무관)\n```\n\n### 3단계: 최적화\n```\n중복 제거 → 가장 적합한 팀만 선택\n효율성 → 병렬 처리 가능한 경우 표시\n```\n\n## 의도별 Agent 매핑 가이드\n\n| 의도 (Intent) | 추천 Agent 조합 | 이유 |\n|--------------|-----------------|------|\n| LEGAL_CONSULT | ["search_team"] | 법률 정보 검색 전문 |\n| MARKET_INQUIRY | ["search_team"] | 시세 데이터 조회 |\n| LOAN_CONSULT | ["search_team", "analysis_team"] | 대출 정보 조회 후 분석 |\n| CONTRACT_CREATION | ["document_team"] | 문서 생성 전문 |\n| CONTRACT_REVIEW | ["search_team", "analysis_team"] | 법률 검토 및 리스크 분석 |\n| COMPREHENSIVE | ["search_team", "analysis_team"] | 종합 정보 수집 및 분석 |\n| RISK_ANALYSIS | ["analysis_team"] | 리스크 평가 전문 |\n| UNCLEAR | ["search_team", "analysis_team"] | 포괄적 대응 |\n\n## 복합 질문 처리 예시\n\n### 예시 1: 순차적 처리\n질문: "강남구 시세 확인하고 투자 가치 분석해줘"\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "먼저 search_team이 시세 데이터를 수집하고, 그 결과를 analysis_team이 분석하여 투자 가치 평가"\n}\n```\n\n### 예시 2: 병렬 처리 가능\n질문: "법률 정보와 시세 정보 모두 알려줘"\n```json\n{\n    "selected_agents": ["search_team"],\n    "reasoning": "search_team이 법률과 시세 정보를 병렬로 조회 가능. 두 작업이 독립적이므로 동시 처리"\n}\n```\n\n### 예시 3: 3단계 파이프라인\n질문: "시세 조회하고 분석한 후 계약서 작성해줘"\n```json\n{\n    "selected_agents": ["search_team", "analysis_team", "document_team"],\n    "reasoning": "search_team이 데이터 수집 → analysis_team이 분석 → document_team이 분석 결과 기반 계약서 작성"\n}\n```\n\n## 응답 형식 (JSON)\n\n{\n    "selected_agents": ["선택된 agent/team 목록"],\n    "reasoning": "선택 이유를 구체적으로 설명. 각 Agent의 역할과 처리 순서 포함",\n    "coordination": "single/sequential/parallel/pipeline",\n    "dependencies": {"agent2": ["agent1"]},\n    "estimated_time": 30,\n    "confidence": 0.9\n}\n\n## 선택 가이드라인\n\n1. **최소 Agent 원칙**: 가능한 적은 수의 Agent로 처리\n2. **전문성 우선**: 해당 작업에 가장 전문적인 Agent 선택\n3. **효율성 고려**: 병렬 처리 가능한 경우 명시\n4. **의존성 관리**: 데이터 흐름을 고려한 순서 지정\n5. **폴백 전략**: 불확실한 경우 ["search_team", "analysis_team"] 조합\n\n## 주의사항\n\n- selected_agents는 반드시 배열 형태\n- Agent 이름은 정확히: "search_team", "analysis_team", "document_team"\n- 최소 1개, 최대 3개 선택\n- 순서는 실행 우선순위 (앞에 있을수록 먼저 실행)\n- reasoning은 상세하고 논리적으로 작성\n- coordination 필드로 실행 방식 명시\n- 복합 질문의 경우 의존성 관계 명확히 표시'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 14:42:58,924 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 14:42:58,924 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 14:42:58,924 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 14:42:58,924 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 14:42:58,924 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 14:42:58,924 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 14:43:00,687 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 05:43:00 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'1563'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'1578'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9901'), (b'x-ratelimit-remaining-tokens', b'198433'), (b'x-ratelimit-reset-requests', b'14m13.224s'), (b'x-ratelimit-reset-tokens', b'470ms'), (b'x-request-id', b'req_b926d22709454067bdb674b82ec69b7d'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989a994a1d62e9fb-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 14:43:00,687 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 14:43:00,687 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 14:43:00,690 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 14:43:00,690 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 14:43:00,690 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 14:43:00,691 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 05:43:00 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '1563', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '1578', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9901', 'x-ratelimit-remaining-tokens': '198433', 'x-ratelimit-reset-requests': '14m13.224s', 'x-ratelimit-reset-tokens': '470ms', 'x-request-id': 'req_b926d22709454067bdb674b82ec69b7d', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989a994a1d62e9fb-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 14:43:00,691 - openai._base_client - DEBUG - request_id: req_b926d22709454067bdb674b82ec69b7d
2025-10-05 14:43:00,691 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: agent_selection | Model: gpt-4o-mini-2024-07-18 | Tokens: 1817 (prompt: 1705, completion: 112)
2025-10-05 14:43:00,691 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM agent selection reasoning: 사용자가 대출 한도를 조회하고 금리를 비교하고자 하므로, 먼저 search_team이 대출 상품 정보를 수집한 후, analysis_team이 수집된 데이터를 기반으로 대출 한도와 금리를 비교 분석할 수 있도록 합니다.
2025-10-05 14:43:00,691 - app.service_agent.cognitive_agents.planning_agent - INFO - ✅ Primary LLM selected agents: ['search_team', 'analysis_team']
2025-10-05 14:43:00,691 - app.service_agent.cognitive_agents.planning_agent - INFO - Intent analyzed: 대출상담 (confidence: 0.90)
2025-10-05 14:43:00,691 - app.service_agent.cognitive_agents.query_decomposer - INFO - Decomposing query: 대출 한도 조회하고 금리 비교해줘...
2025-10-05 14:43:00,692 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-c4142e10-86da-4b18-bd10-d9e7875271e2', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 질문 분해 전문가입니다.\n복잡한 사용자 질문을 독립적으로 처리 가능한 작업 단위로 분해하는 것이 목표입니다.\n\n## 중요 원칙:\n1. 각 작업은 하나의 명확한 목표를 가져야 합니다\n2. 작업 간 의존성을 명확히 파악해야 합니다\n3. 병렬 처리 가능한 작업은 구분해야 합니다\n4. 불필요한 분해는 피해야 합니다 (단순 질문은 분해하지 않음)\n\n## 작업 유형 (type):\n- search: 정보 검색 (법률, 시세, 대출 정보 등)\n- analysis: 데이터 분석 (리스크 평가, 시장 분석 등)\n- generation: 문서 생성 (계약서 작성 등)\n- review: 검토/평가 (계약서 검토, 조건 확인 등)\n- calculation: 계산/산출 (대출 한도, 세금 등)\n- comparison: 비교 분석 (여러 옵션 비교)\n\n## 담당 팀 (agent):\n- search_team: 법률, 시세, 대출 정보 검색\n- analysis_team: 데이터 분석, 리스크 평가, 계산\n- document_team: 문서 생성, 계약서 작성\n\n## 학습 예시:\n\n### 예시 1: 복합 질문 (순차적)\n질문: "강남구 아파트 시세 확인하고 대출 가능 금액 계산해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "강남구 아파트 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "대출 가능 금액 계산",\n            "type": "calculation",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "required_data": {"price": "task_0.result.price"},\n            "estimated_time": 15\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "시세 정보가 있어야 대출 금액 계산이 가능하므로 순차 실행"\n}\n```\n\n### 예시 2: 복합 질문 (병렬 가능)\n질문: "이 지역 전세 시세와 매매 시세 모두 알려주고 비교 분석해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "전세 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "매매 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "전세/매매 시세 비교 분석",\n            "type": "comparison",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0", "task_1"],\n            "required_data": {\n                "lease_price": "task_0.result",\n                "sale_price": "task_1.result"\n            },\n            "estimated_time": 25\n        }\n    ],\n    "execution_mode": "mixed",\n    "parallel_groups": [["task_0", "task_1"], ["task_2"]],\n    "reasoning": "시세 조회는 독립적이므로 병렬 처리, 비교는 두 결과 필요"\n}\n```\n\n### 예시 3: 복합 질문 (3단계 이상)\n질문: "이 계약서 검토해서 위험한 부분 찾고 수정안 만들어서 최종 계약서 작성해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "계약서 내용 전체 검토",\n            "type": "review",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 30\n        },\n        {\n            "description": "위험 요소 및 문제점 분석",\n            "type": "analysis",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "estimated_time": 25\n        },\n        {\n            "description": "수정안 제안 생성",\n            "type": "generation",\n            "agent": "document_team",\n            "priority": 3,\n            "depends_on": ["task_1"],\n            "estimated_time": 20\n        },\n        {\n            "description": "최종 계약서 작성",\n            "type": "generation",\n            "agent": "document_team",\n            "priority": 4,\n            "depends_on": ["task_2"],\n            "estimated_time": 30\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "각 단계가 이전 결과에 의존하므로 순차 실행 필요"\n}\n```\n\n### 예시 4: 단순 질문 (분해 불필요)\n질문: "전세금 인상률 상한이 얼마야?"\n분해:\n```json\n{\n    "is_compound": false,\n    "sub_tasks": [\n        {\n            "description": "전세금 인상률 상한 법률 정보 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 15\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "단일 정보 조회 요청으로 분해 불필요"\n}\n```\n\n### 예시 5: 조건부 실행\n질문: "이 물건 시세 확인하고 적정가면 대출 상담도 받고 싶어"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "물건 시세 조회 및 적정성 평가",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 25\n        },\n        {\n            "description": "대출 상담 정보 제공",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "optional": true,\n            "context": {"condition": "if_reasonable_price"},\n            "estimated_time": 20\n        }\n    ],\n    "execution_mode": "conditional",\n    "reasoning": "시세 확인 결과에 따라 대출 상담 진행 여부 결정"\n}\n```\n\n## Chain-of-Thought 프로세스:\n\n1. **질문 분석**: 어떤 정보나 작업을 요구하는가?\n2. **연결어 확인**: "그리고", "또한", "해서", "한 후" 등이 있는가?\n3. **의존성 파악**: 어떤 작업이 다른 작업의 결과를 필요로 하는가?\n4. **병렬성 판단**: 독립적으로 실행 가능한 작업이 있는가?\n5. **최적화**: 불필요한 분해는 없는가?\n\n## 응답 형식 (JSON):\n\n{\n    "is_compound": true/false,\n    "sub_tasks": [\n        {\n            "description": "작업 설명",\n            "type": "작업 유형",\n            "agent": "담당 팀",\n            "priority": 우선순위 (1이 가장 높음),\n            "depends_on": ["선행 작업 ID 리스트"],\n            "required_data": {"필요한 데이터 매핑"},\n            "estimated_time": 예상 소요 시간(초),\n            "optional": true/false,\n            "context": {"추가 컨텍스트"}\n        }\n    ],\n    "execution_mode": "sequential/parallel/mixed/conditional",\n    "parallel_groups": [["병렬 실행 가능한 작업 ID 그룹"]],\n    "confidence": 0.0-1.0,\n    "reasoning": "분해 결정의 이유와 근거"\n}\n\n## 분해 가이드라인:\n\n1. **분해가 필요한 경우**:\n   - 여러 종류의 정보를 요청하는 경우\n   - 순차적 처리가 필요한 경우 (A의 결과로 B 수행)\n   - 서로 다른 팀의 전문성이 필요한 경우\n\n2. **분해가 불필요한 경우**:\n   - 단일 정보 조회\n   - 단순한 질문-답변\n   - 하나의 팀에서 완전히 처리 가능한 경우\n\n3. **병렬 처리 기준**:\n   - 서로 독립적인 정보 조회\n   - 의존성이 없는 분석 작업\n   - 동시에 진행해도 충돌하지 않는 작업\n\n4. **우선순위 설정**:\n   - 의존성이 없는 작업: priority 1\n   - 1차 의존 작업: priority 2\n   - 2차 의존 작업: priority 3\n   - 이런 식으로 증가\n\n현재 의도: 대출상담\n추출된 엔티티: {}\n\n분석할 질문: 대출 한도 조회하고 금리 비교해줘'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 14:43:00,692 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 14:43:00,692 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 14:43:00,692 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 14:43:00,692 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 14:43:00,693 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 14:43:00,693 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 14:43:07,830 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 05:43:07 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'6906'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'6929'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9900'), (b'x-ratelimit-remaining-tokens', b'198000'), (b'x-ratelimit-reset-requests', b'14m20.081s'), (b'x-ratelimit-reset-tokens', b'600ms'), (b'x-request-id', b'req_e28461be649a4dedb969be49a4fdcc73'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989a99552d25e9fb-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 14:43:07,831 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 14:43:07,831 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 14:43:07,832 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 14:43:07,832 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 14:43:07,832 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 14:43:07,832 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 05:43:07 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '6906', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '6929', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9900', 'x-ratelimit-remaining-tokens': '198000', 'x-ratelimit-reset-requests': '14m20.081s', 'x-ratelimit-reset-tokens': '600ms', 'x-request-id': 'req_e28461be649a4dedb969be49a4fdcc73', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989a99552d25e9fb-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 14:43:07,832 - openai._base_client - DEBUG - request_id: req_e28461be649a4dedb969be49a4fdcc73
2025-10-05 14:43:07,832 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: query_decomposition | Model: gpt-4o-mini-2024-07-18 | Tokens: 2289 (prompt: 2002, completion: 287)
2025-10-05 14:43:07,832 - app.service_agent.cognitive_agents.query_decomposer - INFO - Successfully decomposed into 3 tasks
2025-10-05 14:43:07,832 - app.service_agent.cognitive_agents.planning_agent - INFO - Query decomposed into 3 tasks
2025-10-05 14:43:07,833 - app.service_agent.cognitive_agents.planning_agent - WARNING - Plan validation errors: ["Agent 'analysis_team' not found in registry", "Agent 'search_team' not found in registry", "Agent 'analysis_team' depends on missing 'task_0'", "Agent 'analysis_team' depends on missing 'task_1'", "Agent 'analysis_team' not found in registry"]
2025-10-05 14:43:07,833 - app.service_agent.cognitive_agents.planning_agent - INFO - Optimizing execution plan
2025-10-05 14:43:07,833 - app.service_agent.cognitive_agents.planning_agent - INFO - Comprehensive plan created: Intent: 대출상담 (confidence: 0.90) | Strategy: sequential | Agents: analysis_team, search_team, analysis_team | Estimated time: 45.0s
2025-10-05 14:43:07,833 - __main__ - INFO -   전략: sequential
2025-10-05 14:43:07,833 - __main__ - INFO -   단계 수: 3
2025-10-05 14:43:07,833 - __main__ - INFO - 
✓ 테스트 성공 (소요시간: 22.53초)
2025-10-05 14:43:07,833 - __main__ - INFO - 
================================================================================
2025-10-05 14:43:07,833 - __main__ - INFO - [27] 복합 질문 테스트: D007
2025-10-05 14:43:07,833 - __main__ - INFO - 질문: 마포구 아파트 시세 알려주고 계약서 작성해줘
2025-10-05 14:43:07,833 - __main__ - INFO - ================================================================================
2025-10-05 14:43:07,833 - __main__ - INFO - 
[Step 1] Intent 분석...
2025-10-05 14:43:07,833 - app.service_agent.cognitive_agents.planning_agent - INFO - Analyzing intent for query: 마포구 아파트 시세 알려주고 계약서 작성해줘...
2025-10-05 14:43:07,833 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-5f1f7776-7f8e-4b3d-bb03-cdda747c44ee', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 의도 분석 전문가입니다.\n사용자의 질문을 정확히 이해하고, 어떤 종류의 도움이 필요한지 분류해야 합니다.\n\n## 중요: 복합 질문 처리\n복합적인 질문(여러 의도가 섞인 질문)의 경우, 가장 핵심적인 의도를 파악하되,\nsub_intents 필드에 부가적인 의도들도 함께 기록해주세요.\n\n## 분류 카테고리 설명:\n\n1. **LEGAL_CONSULT (법률상담)**\n   - 설명: 부동산 관련 법률, 권리, 의무에 대한 질문\n   - 예시:\n     * 단순: "전세금 5% 인상이 가능한가요?", "임대차계약 갱신 거부할 수 있나요?"\n     * 복합: "전세금 인상 가능한지 확인하고 법적 근거도 알려주세요"\n   - 키워드: 법, 전세, 임대, 보증금, 계약, 권리, 의무, 갱신, 임차인, 임대인, 법률, 규정, 조항\n   - 필요한 처리: 법률 데이터베이스 검색, 관련 법조항 찾기\n\n2. **MARKET_INQUIRY (시세조회)**\n   - 설명: 부동산 시장 가격, 시세, 거래 동향에 대한 질문\n   - 예시:\n     * 단순: "강남구 아파트 전세 시세 알려주세요", "서초동 매매가 얼마나 올랐나요?"\n     * 복합: "강남구 시세 확인하고 대출 가능 금액도 계산해줘"\n   - 키워드: 시세, 가격, 매매가, 전세가, 월세, 시장, 동향, 평균, 지역명, 상승률, 하락률\n   - 필요한 처리: 부동산 시세 데이터 조회, 지역별 가격 분석\n\n3. **LOAN_CONSULT (대출상담)**\n   - 설명: 주택담보대출, 전세자금대출 등 금융 관련 질문\n   - 예시:\n     * 단순: "전세자금대출 한도가 얼마인가요?", "LTV가 뭔가요?"\n     * 복합: "대출 한도 확인하고 금리 비교도 해주세요"\n   - 키워드: 대출, 금리, 한도, 조건, 상환, LTV, DTI, DSR, 담보, 금융, 은행\n   - 필요한 처리: 대출 상품 조회, 금리 정보 검색, 한도 계산\n\n4. **CONTRACT_CREATION (계약서작성)**\n   - 설명: 새로운 계약서나 문서를 작성해달라는 요청\n   - 예시:\n     * 단순: "임대차계약서 작성해주세요", "전세계약서 초안 만들어주세요"\n     * 복합: "계약서 작성하고 주의사항도 검토해주세요"\n   - 키워드: 작성, 만들, 생성, 초안, 계약서, 문서, 양식\n   - 필요한 처리: 문서 생성 에이전트 호출, 템플릿 기반 작성\n\n5. **CONTRACT_REVIEW (계약서검토)**\n   - 설명: 기존 계약서나 문서를 검토해달라는 요청\n   - 예시:\n     * 단순: "이 계약서 검토해주세요", "특약사항 문제없나요?"\n     * 복합: "계약서 검토하고 수정사항도 제안해주세요"\n   - 키워드: 검토, 확인, 점검, 리뷰, 분석해, 살펴봐, 체크\n   - 필요한 처리: 문서 분석, 위험 요소 식별, 개선사항 제안\n\n6. **COMPREHENSIVE (종합분석)**\n   - 설명: 여러 측면을 종합적으로 분석해달라는 요청\n   - 예시:\n     * 단순: "이 물건 전체적으로 분석해주세요"\n     * 복합: "시세, 법률, 대출 모두 검토해서 종합 의견 주세요"\n   - 키워드: 종합, 전체, 모든, 전반적, 종합적, 평가, 분석\n   - 필요한 처리: 다중 데이터 소스 통합 분석\n\n7. **RISK_ANALYSIS (리스크분석)**\n   - 설명: 위험 요소나 주의사항에 대한 질문\n   - 예시:\n     * 단순: "이 계약 위험한가요?", "주의할 점 알려주세요"\n     * 복합: "리스크 분석하고 대안도 제시해주세요"\n   - 키워드: 위험, 리스크, 주의, 문제점, 조심, 걱정, 우려\n   - 필요한 처리: 위험 요소 분석, 주의사항 추출\n\n8. **UNCLEAR (불분명)**\n   - 설명: 의도를 명확히 파악하기 어려운 질문\n   - 예시: "이거 좀 봐주세요", "어떻게 해야 할까요?", "도와주세요"\n   - 처리: 추가 질문으로 의도 명확화 필요\n\n9. **IRRELEVANT (무관)**\n   - 설명: 부동산과 전혀 관련 없는 질문\n   - 예시: "날씨 어때?", "저녁 뭐 먹지?", "주식 추천해줘"\n   - 처리: 부동산 관련 질문을 유도\n\n## 복합 질문 예시와 분석:\n\n### 예시 1: "강남구 아파트 시세 알려주고 전세자금대출 가능한지도 확인해줘"\n- 주 의도: MARKET_INQUIRY (시세 조회가 먼저 필요)\n- 부가 의도: LOAN_CONSULT (대출 확인)\n- 분해: ["강남구 아파트 시세 조회", "전세자금대출 가능 여부 확인"]\n\n### 예시 2: "이 계약서 검토해서 위험한 부분 있는지 알려주고 수정 제안도 해줘"\n- 주 의도: CONTRACT_REVIEW (계약서 검토)\n- 부가 의도: RISK_ANALYSIS (위험 분석)\n- 분해: ["계약서 전체 검토", "위험 요소 식별", "수정사항 제안"]\n\n### 예시 3: "서초동 전세가 확인하고 법적으로 문제없는지도 봐줘"\n- 주 의도: MARKET_INQUIRY (시세 확인)\n- 부가 의도: LEGAL_CONSULT (법적 검토)\n- 분해: ["서초동 전세가 조회", "법적 이슈 검토"]\n\n## 응답 형식 (JSON 형식으로 응답):\n\n{\n    "intent": "LEGAL_CONSULT",\n    "confidence": 0.9,\n    "keywords": ["전세금", "인상", "제한"],\n    "sub_intents": [],\n    "is_compound": false,\n    "decomposed_tasks": [],\n    "entities": {\n        "location": "강남구",\n        "price": "5억",\n        "contract_type": "전세",\n        "date": "2024년",\n        "area": "84㎡",\n        "action_verbs": ["확인", "검토"]\n    },\n    "reasoning": "전세금 인상에 대한 법률 질문이므로 LEGAL_CONSULT로 분류"\n}\n\n응답 규칙:\n- intent: 위 9개 카테고리 중 하나 (대문자_언더스코어 형식)\n- confidence: 0.0~1.0 (0.8 이상이면 매우 확실, 0.5 미만이면 불확실)\n- keywords: 추출된 주요 키워드 목록\n- sub_intents: 복합 질문일 경우 부가적인 의도들\n- is_compound: 복합 질문 여부 (true/false)\n- decomposed_tasks: 복합 질문을 분해한 개별 작업들\n- entities: 추출된 엔티티 정보\n- reasoning: 분류한 이유와 근거 (상세하게)\n\n## 판단 가이드:\n- 여러 의도가 섞여있다면, 가장 주된 의도를 intent에, 나머지를 sub_intents에 기록\n- "그리고", "또한", "함께", "같이" 등의 연결어가 있으면 복합 질문일 가능성 높음\n- 법률 관련 키워드가 있으면 LEGAL_CONSULT 우선\n- 가격/시세 언급이 명확하면 MARKET_INQUIRY\n- 계약서라는 단어와 함께 "작성/만들기"가 있으면 CONTRACT_CREATION\n- 계약서라는 단어와 함께 "검토/확인"이 있으면 CONTRACT_REVIEW\n- 불확실하면 confidence를 낮게 설정하고 UNCLEAR 선택\n- 복합 질문은 is_compound를 true로 설정하고 개별 작업으로 분해\n\n분석할 질문: 마포구 아파트 시세 알려주고 계약서 작성해줘'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 14:43:07,833 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 14:43:07,834 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 14:43:07,834 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 14:43:07,834 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 14:43:07,834 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 14:43:07,834 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 14:43:11,067 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 05:43:11 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'3017'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'3042'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9900'), (b'x-ratelimit-remaining-tokens', b'198312'), (b'x-ratelimit-reset-requests', b'14m21.586s'), (b'x-ratelimit-reset-tokens', b'506ms'), (b'x-request-id', b'req_4f4b4b9aaa6b428096e536970f3b94e2'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989a9981cb8de9fb-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 14:43:11,067 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 14:43:11,067 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 14:43:11,070 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 14:43:11,070 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 14:43:11,070 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 14:43:11,071 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 05:43:11 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '3017', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '3042', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9900', 'x-ratelimit-remaining-tokens': '198312', 'x-ratelimit-reset-requests': '14m21.586s', 'x-ratelimit-reset-tokens': '506ms', 'x-request-id': 'req_4f4b4b9aaa6b428096e536970f3b94e2', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989a9981cb8de9fb-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 14:43:11,071 - openai._base_client - DEBUG - request_id: req_4f4b4b9aaa6b428096e536970f3b94e2
2025-10-05 14:43:11,071 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: intent_analysis | Model: gpt-4o-mini-2024-07-18 | Tokens: 2103 (prompt: 1925, completion: 178)
2025-10-05 14:43:11,071 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM Intent Analysis Result: {'intent': 'MARKET_INQUIRY', 'confidence': 0.85, 'keywords': ['마포구', '아파트', '시세'], 'sub_intents': ['CONTRACT_CREATION'], 'is_compound': True, 'decomposed_tasks': ['마포구 아파트 시세 조회', '계약서 작성'], 'entities': {'location': '마포구', 'contract_type': '아파트', 'action_verbs': ['알려주다', '작성하다']}, 'reasoning': '마포구 아파트 시세에 대한 질문이 주된 의도이며, 계약서 작성 요청이 부가적인 의도로 포함되어 있어 MARKET_INQUIRY로 분류하고 CONTRACT_CREATION을 sub_intent로 추가함.'}
2025-10-05 14:43:11,071 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-bbffc986-4d46-48b8-a321-969a70e834a5', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 Agent 선택 전문가입니다.\n사용자의 요청에 가장 적합한 Agent/Team을 선택하는 것이 목표입니다.\n\n## 현재 상황\n\n**사용자 질문:** 마포구 아파트 시세 알려주고 계약서 작성해줘\n**분석된 의도:** 시세조회\n**추출된 키워드:** [\'마포구\', \'아파트\', \'시세\']\n\n## 사용 가능한 Agent/Team 정보\n\n{\'search_team\': {\'name\': \'search_team\', \'capabilities\': \'법률 검색, 부동산 시세 조회, 대출 상품 검색\', \'tools\': [\'legal_search\', \'market_data\', \'loan_data\'], \'use_cases\': [\'법률 상담\', \'시세 조회\', \'대출 정보\']}, \'analysis_team\': {\'name\': \'analysis_team\', \'capabilities\': \'데이터 분석, 리스크 평가, 인사이트 생성, 추천\', \'tools\': [\'data_analyzer\', \'risk_evaluator\'], \'use_cases\': [\'시장 분석\', \'리스크 평가\', \'투자 분석\']}, \'document_team\': {\'name\': \'document_team\', \'capabilities\': \'계약서 작성, 문서 생성, 문서 검토\', \'tools\': [\'document_generator\', \'contract_reviewer\'], \'use_cases\': [\'계약서 작성\', \'문서 검토\']}}\n\n## Agent 역할 및 상세 가이드\n\n### 1. search_team (검색 팀)\n- **주요 기능**: 정보 검색 및 데이터 수집\n- **전문 분야**:\n  * 법률 정보 검색 (전세법, 임대차보호법, 부동산 관련 법규)\n  * 부동산 시세 조회 (매매가, 전세가, 월세, 실거래가)\n  * 대출 상품 정보 검색 (금리, 한도, 조건)\n  * 지역 정보 및 인프라 조회\n- **도구**: legal_search, market_data, loan_data\n- **적합한 작업**: 정보 조회, 데이터 수집, 법률 확인, 시세 파악\n- **예시**:\n  * "전세금 5% 인상 가능한가요?"\n  * "강남구 아파트 전세 시세"\n  * "전세자금대출 한도 얼마?"\n\n### 2. analysis_team (분석 팀)\n- **주요 기능**: 데이터 분석 및 평가\n- **전문 분야**:\n  * 시장 동향 분석 (상승률, 하락률, 추세)\n  * 리스크 평가 (계약, 투자 위험도)\n  * 투자 수익률 계산 (ROI, 월세 수익률)\n  * 대출 한도 및 조건 분석 (LTV, DTI, DSR)\n  * 비교 분석 (지역별, 상품별)\n- **도구**: data_analyzer, risk_evaluator, calculator\n- **적합한 작업**: 데이터 분석, 리스크 평가, 계산, 비교, 예측\n- **의존성**: 보통 search_team의 데이터가 필요\n- **예시**:\n  * "이 지역 투자 가치 분석해줘"\n  * "계약 리스크 평가해줘"\n  * "대출 가능 금액 계산해줘"\n\n### 3. document_team (문서 팀)\n- **주요 기능**: 문서 생성 및 관리\n- **전문 분야**:\n  * 계약서 작성 (임대차, 매매, 전세)\n  * 문서 템플릿 관리\n  * 특약사항 생성\n  * 계약서 수정안 작성\n  * 법률 문서 검토\n- **도구**: document_generator, contract_template, contract_reviewer\n- **적합한 작업**: 문서 작성, 계약서 생성, 문서 수정, 검토\n- **예시**:\n  * "임대차계약서 작성해줘"\n  * "특약사항 추가해줘"\n  * "계약서 수정안 만들어줘"\n\n## Agent 선택 전략\n\n### 1단계: 작업 유형 식별\n```\n정보 필요 → search_team\n분석/계산 필요 → analysis_team\n문서 작성 필요 → document_team\n```\n\n### 2단계: 의존성 분석\n```\n독립적 작업 → 단일 팀\n순차적 의존 → 여러 팀 (순서 중요)\n병렬 가능 → 여러 팀 (순서 무관)\n```\n\n### 3단계: 최적화\n```\n중복 제거 → 가장 적합한 팀만 선택\n효율성 → 병렬 처리 가능한 경우 표시\n```\n\n## 의도별 Agent 매핑 가이드\n\n| 의도 (Intent) | 추천 Agent 조합 | 이유 |\n|--------------|-----------------|------|\n| LEGAL_CONSULT | ["search_team"] | 법률 정보 검색 전문 |\n| MARKET_INQUIRY | ["search_team"] | 시세 데이터 조회 |\n| LOAN_CONSULT | ["search_team", "analysis_team"] | 대출 정보 조회 후 분석 |\n| CONTRACT_CREATION | ["document_team"] | 문서 생성 전문 |\n| CONTRACT_REVIEW | ["search_team", "analysis_team"] | 법률 검토 및 리스크 분석 |\n| COMPREHENSIVE | ["search_team", "analysis_team"] | 종합 정보 수집 및 분석 |\n| RISK_ANALYSIS | ["analysis_team"] | 리스크 평가 전문 |\n| UNCLEAR | ["search_team", "analysis_team"] | 포괄적 대응 |\n\n## 복합 질문 처리 예시\n\n### 예시 1: 순차적 처리\n질문: "강남구 시세 확인하고 투자 가치 분석해줘"\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "먼저 search_team이 시세 데이터를 수집하고, 그 결과를 analysis_team이 분석하여 투자 가치 평가"\n}\n```\n\n### 예시 2: 병렬 처리 가능\n질문: "법률 정보와 시세 정보 모두 알려줘"\n```json\n{\n    "selected_agents": ["search_team"],\n    "reasoning": "search_team이 법률과 시세 정보를 병렬로 조회 가능. 두 작업이 독립적이므로 동시 처리"\n}\n```\n\n### 예시 3: 3단계 파이프라인\n질문: "시세 조회하고 분석한 후 계약서 작성해줘"\n```json\n{\n    "selected_agents": ["search_team", "analysis_team", "document_team"],\n    "reasoning": "search_team이 데이터 수집 → analysis_team이 분석 → document_team이 분석 결과 기반 계약서 작성"\n}\n```\n\n## 응답 형식 (JSON)\n\n{\n    "selected_agents": ["선택된 agent/team 목록"],\n    "reasoning": "선택 이유를 구체적으로 설명. 각 Agent의 역할과 처리 순서 포함",\n    "coordination": "single/sequential/parallel/pipeline",\n    "dependencies": {"agent2": ["agent1"]},\n    "estimated_time": 30,\n    "confidence": 0.9\n}\n\n## 선택 가이드라인\n\n1. **최소 Agent 원칙**: 가능한 적은 수의 Agent로 처리\n2. **전문성 우선**: 해당 작업에 가장 전문적인 Agent 선택\n3. **효율성 고려**: 병렬 처리 가능한 경우 명시\n4. **의존성 관리**: 데이터 흐름을 고려한 순서 지정\n5. **폴백 전략**: 불확실한 경우 ["search_team", "analysis_team"] 조합\n\n## 주의사항\n\n- selected_agents는 반드시 배열 형태\n- Agent 이름은 정확히: "search_team", "analysis_team", "document_team"\n- 최소 1개, 최대 3개 선택\n- 순서는 실행 우선순위 (앞에 있을수록 먼저 실행)\n- reasoning은 상세하고 논리적으로 작성\n- coordination 필드로 실행 방식 명시\n- 복합 질문의 경우 의존성 관계 명확히 표시'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 14:43:11,072 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 14:43:11,072 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 14:43:11,073 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 14:43:11,073 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 14:43:11,073 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 14:43:11,073 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 14:43:12,336 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 05:43:12 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'961'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'976'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9899'), (b'x-ratelimit-remaining-tokens', b'198430'), (b'x-ratelimit-reset-requests', b'14m26.996s'), (b'x-ratelimit-reset-tokens', b'471ms'), (b'x-request-id', b'req_232d02c3837e4ebe890f214ad1b43234'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989a99960f16e9fb-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 14:43:12,336 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 14:43:12,336 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 14:43:12,336 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 14:43:12,336 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 14:43:12,336 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 14:43:12,337 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 05:43:12 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '961', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '976', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9899', 'x-ratelimit-remaining-tokens': '198430', 'x-ratelimit-reset-requests': '14m26.996s', 'x-ratelimit-reset-tokens': '471ms', 'x-request-id': 'req_232d02c3837e4ebe890f214ad1b43234', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989a99960f16e9fb-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 14:43:12,337 - openai._base_client - DEBUG - request_id: req_232d02c3837e4ebe890f214ad1b43234
2025-10-05 14:43:12,337 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: agent_selection | Model: gpt-4o-mini-2024-07-18 | Tokens: 1809 (prompt: 1705, completion: 104)
2025-10-05 14:43:12,337 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM agent selection reasoning: 먼저 search_team이 마포구 아파트의 시세를 조회하고, 그 정보를 바탕으로 document_team이 계약서를 작성합니다. 시세 조회와 계약서 작성은 서로 독립적인 작업이므로 병렬로 진행할 수 있습니다.
2025-10-05 14:43:12,337 - app.service_agent.cognitive_agents.planning_agent - INFO - ✅ Primary LLM selected agents: ['search_team', 'document_team']
2025-10-05 14:43:12,337 - __main__ - INFO -   의도: 시세조회
2025-10-05 14:43:12,337 - __main__ - INFO -   신뢰도: 0.85
2025-10-05 14:43:12,337 - __main__ - INFO -   추천 Agent: ['search_team', 'document_team']
2025-10-05 14:43:12,337 - __main__ - INFO - 
[Step 2] Query Decomposition...
2025-10-05 14:43:12,337 - app.service_agent.cognitive_agents.query_decomposer - INFO - Decomposing query: 마포구 아파트 시세 알려주고 계약서 작성해줘...
2025-10-05 14:43:12,337 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-586e931a-529c-4d61-a725-856cf219fb27', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 질문 분해 전문가입니다.\n복잡한 사용자 질문을 독립적으로 처리 가능한 작업 단위로 분해하는 것이 목표입니다.\n\n## 중요 원칙:\n1. 각 작업은 하나의 명확한 목표를 가져야 합니다\n2. 작업 간 의존성을 명확히 파악해야 합니다\n3. 병렬 처리 가능한 작업은 구분해야 합니다\n4. 불필요한 분해는 피해야 합니다 (단순 질문은 분해하지 않음)\n\n## 작업 유형 (type):\n- search: 정보 검색 (법률, 시세, 대출 정보 등)\n- analysis: 데이터 분석 (리스크 평가, 시장 분석 등)\n- generation: 문서 생성 (계약서 작성 등)\n- review: 검토/평가 (계약서 검토, 조건 확인 등)\n- calculation: 계산/산출 (대출 한도, 세금 등)\n- comparison: 비교 분석 (여러 옵션 비교)\n\n## 담당 팀 (agent):\n- search_team: 법률, 시세, 대출 정보 검색\n- analysis_team: 데이터 분석, 리스크 평가, 계산\n- document_team: 문서 생성, 계약서 작성\n\n## 학습 예시:\n\n### 예시 1: 복합 질문 (순차적)\n질문: "강남구 아파트 시세 확인하고 대출 가능 금액 계산해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "강남구 아파트 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "대출 가능 금액 계산",\n            "type": "calculation",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "required_data": {"price": "task_0.result.price"},\n            "estimated_time": 15\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "시세 정보가 있어야 대출 금액 계산이 가능하므로 순차 실행"\n}\n```\n\n### 예시 2: 복합 질문 (병렬 가능)\n질문: "이 지역 전세 시세와 매매 시세 모두 알려주고 비교 분석해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "전세 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "매매 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "전세/매매 시세 비교 분석",\n            "type": "comparison",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0", "task_1"],\n            "required_data": {\n                "lease_price": "task_0.result",\n                "sale_price": "task_1.result"\n            },\n            "estimated_time": 25\n        }\n    ],\n    "execution_mode": "mixed",\n    "parallel_groups": [["task_0", "task_1"], ["task_2"]],\n    "reasoning": "시세 조회는 독립적이므로 병렬 처리, 비교는 두 결과 필요"\n}\n```\n\n### 예시 3: 복합 질문 (3단계 이상)\n질문: "이 계약서 검토해서 위험한 부분 찾고 수정안 만들어서 최종 계약서 작성해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "계약서 내용 전체 검토",\n            "type": "review",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 30\n        },\n        {\n            "description": "위험 요소 및 문제점 분석",\n            "type": "analysis",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "estimated_time": 25\n        },\n        {\n            "description": "수정안 제안 생성",\n            "type": "generation",\n            "agent": "document_team",\n            "priority": 3,\n            "depends_on": ["task_1"],\n            "estimated_time": 20\n        },\n        {\n            "description": "최종 계약서 작성",\n            "type": "generation",\n            "agent": "document_team",\n            "priority": 4,\n            "depends_on": ["task_2"],\n            "estimated_time": 30\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "각 단계가 이전 결과에 의존하므로 순차 실행 필요"\n}\n```\n\n### 예시 4: 단순 질문 (분해 불필요)\n질문: "전세금 인상률 상한이 얼마야?"\n분해:\n```json\n{\n    "is_compound": false,\n    "sub_tasks": [\n        {\n            "description": "전세금 인상률 상한 법률 정보 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 15\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "단일 정보 조회 요청으로 분해 불필요"\n}\n```\n\n### 예시 5: 조건부 실행\n질문: "이 물건 시세 확인하고 적정가면 대출 상담도 받고 싶어"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "물건 시세 조회 및 적정성 평가",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 25\n        },\n        {\n            "description": "대출 상담 정보 제공",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "optional": true,\n            "context": {"condition": "if_reasonable_price"},\n            "estimated_time": 20\n        }\n    ],\n    "execution_mode": "conditional",\n    "reasoning": "시세 확인 결과에 따라 대출 상담 진행 여부 결정"\n}\n```\n\n## Chain-of-Thought 프로세스:\n\n1. **질문 분석**: 어떤 정보나 작업을 요구하는가?\n2. **연결어 확인**: "그리고", "또한", "해서", "한 후" 등이 있는가?\n3. **의존성 파악**: 어떤 작업이 다른 작업의 결과를 필요로 하는가?\n4. **병렬성 판단**: 독립적으로 실행 가능한 작업이 있는가?\n5. **최적화**: 불필요한 분해는 없는가?\n\n## 응답 형식 (JSON):\n\n{\n    "is_compound": true/false,\n    "sub_tasks": [\n        {\n            "description": "작업 설명",\n            "type": "작업 유형",\n            "agent": "담당 팀",\n            "priority": 우선순위 (1이 가장 높음),\n            "depends_on": ["선행 작업 ID 리스트"],\n            "required_data": {"필요한 데이터 매핑"},\n            "estimated_time": 예상 소요 시간(초),\n            "optional": true/false,\n            "context": {"추가 컨텍스트"}\n        }\n    ],\n    "execution_mode": "sequential/parallel/mixed/conditional",\n    "parallel_groups": [["병렬 실행 가능한 작업 ID 그룹"]],\n    "confidence": 0.0-1.0,\n    "reasoning": "분해 결정의 이유와 근거"\n}\n\n## 분해 가이드라인:\n\n1. **분해가 필요한 경우**:\n   - 여러 종류의 정보를 요청하는 경우\n   - 순차적 처리가 필요한 경우 (A의 결과로 B 수행)\n   - 서로 다른 팀의 전문성이 필요한 경우\n\n2. **분해가 불필요한 경우**:\n   - 단일 정보 조회\n   - 단순한 질문-답변\n   - 하나의 팀에서 완전히 처리 가능한 경우\n\n3. **병렬 처리 기준**:\n   - 서로 독립적인 정보 조회\n   - 의존성이 없는 분석 작업\n   - 동시에 진행해도 충돌하지 않는 작업\n\n4. **우선순위 설정**:\n   - 의존성이 없는 작업: priority 1\n   - 1차 의존 작업: priority 2\n   - 2차 의존 작업: priority 3\n   - 이런 식으로 증가\n\n현재 의도: 시세조회\n추출된 엔티티: None\n\n분석할 질문: 마포구 아파트 시세 알려주고 계약서 작성해줘'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 14:43:12,338 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 14:43:12,338 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 14:43:12,338 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 14:43:12,338 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 14:43:12,338 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 14:43:12,338 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 14:43:15,700 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 05:43:15 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'3143'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'3168'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9898'), (b'x-ratelimit-remaining-tokens', b'197996'), (b'x-ratelimit-reset-requests', b'14m34.357s'), (b'x-ratelimit-reset-tokens', b'601ms'), (b'x-request-id', b'req_6b96bff3433d4f69bca81addced66dc0'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989a999df890e9fb-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 14:43:15,700 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 14:43:15,700 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 14:43:15,706 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 14:43:15,706 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 14:43:15,706 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 14:43:15,706 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 05:43:15 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '3143', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '3168', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9898', 'x-ratelimit-remaining-tokens': '197996', 'x-ratelimit-reset-requests': '14m34.357s', 'x-ratelimit-reset-tokens': '601ms', 'x-request-id': 'req_6b96bff3433d4f69bca81addced66dc0', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989a999df890e9fb-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 14:43:15,706 - openai._base_client - DEBUG - request_id: req_6b96bff3433d4f69bca81addced66dc0
2025-10-05 14:43:15,706 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: query_decomposition | Model: gpt-4o-mini-2024-07-18 | Tokens: 2181 (prompt: 2006, completion: 175)
2025-10-05 14:43:15,706 - app.service_agent.cognitive_agents.query_decomposer - INFO - Successfully decomposed into 2 tasks
2025-10-05 14:43:15,706 - __main__ - INFO -   복합 질문: True
2025-10-05 14:43:15,706 - __main__ - INFO -   작업 수: 2
2025-10-05 14:43:15,706 - __main__ - INFO -   실행 모드: sequential
2025-10-05 14:43:15,707 - __main__ - INFO -     - task_0: 마포구 아파트 시세 조회 (search_team)
2025-10-05 14:43:15,707 - __main__ - INFO -     - task_1: 계약서 작성 (document_team)
2025-10-05 14:43:15,707 - __main__ - INFO - 
[Step 3] Comprehensive Plan 생성...
2025-10-05 14:43:15,707 - app.service_agent.cognitive_agents.planning_agent - INFO - Creating comprehensive plan for query: 마포구 아파트 시세 알려주고 계약서 작성해줘...
2025-10-05 14:43:15,707 - app.service_agent.cognitive_agents.planning_agent - INFO - Analyzing intent for query: 마포구 아파트 시세 알려주고 계약서 작성해줘...
2025-10-05 14:43:15,707 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-5656940a-2148-4cfb-8b83-06de0af9987e', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 의도 분석 전문가입니다.\n사용자의 질문을 정확히 이해하고, 어떤 종류의 도움이 필요한지 분류해야 합니다.\n\n## 중요: 복합 질문 처리\n복합적인 질문(여러 의도가 섞인 질문)의 경우, 가장 핵심적인 의도를 파악하되,\nsub_intents 필드에 부가적인 의도들도 함께 기록해주세요.\n\n## 분류 카테고리 설명:\n\n1. **LEGAL_CONSULT (법률상담)**\n   - 설명: 부동산 관련 법률, 권리, 의무에 대한 질문\n   - 예시:\n     * 단순: "전세금 5% 인상이 가능한가요?", "임대차계약 갱신 거부할 수 있나요?"\n     * 복합: "전세금 인상 가능한지 확인하고 법적 근거도 알려주세요"\n   - 키워드: 법, 전세, 임대, 보증금, 계약, 권리, 의무, 갱신, 임차인, 임대인, 법률, 규정, 조항\n   - 필요한 처리: 법률 데이터베이스 검색, 관련 법조항 찾기\n\n2. **MARKET_INQUIRY (시세조회)**\n   - 설명: 부동산 시장 가격, 시세, 거래 동향에 대한 질문\n   - 예시:\n     * 단순: "강남구 아파트 전세 시세 알려주세요", "서초동 매매가 얼마나 올랐나요?"\n     * 복합: "강남구 시세 확인하고 대출 가능 금액도 계산해줘"\n   - 키워드: 시세, 가격, 매매가, 전세가, 월세, 시장, 동향, 평균, 지역명, 상승률, 하락률\n   - 필요한 처리: 부동산 시세 데이터 조회, 지역별 가격 분석\n\n3. **LOAN_CONSULT (대출상담)**\n   - 설명: 주택담보대출, 전세자금대출 등 금융 관련 질문\n   - 예시:\n     * 단순: "전세자금대출 한도가 얼마인가요?", "LTV가 뭔가요?"\n     * 복합: "대출 한도 확인하고 금리 비교도 해주세요"\n   - 키워드: 대출, 금리, 한도, 조건, 상환, LTV, DTI, DSR, 담보, 금융, 은행\n   - 필요한 처리: 대출 상품 조회, 금리 정보 검색, 한도 계산\n\n4. **CONTRACT_CREATION (계약서작성)**\n   - 설명: 새로운 계약서나 문서를 작성해달라는 요청\n   - 예시:\n     * 단순: "임대차계약서 작성해주세요", "전세계약서 초안 만들어주세요"\n     * 복합: "계약서 작성하고 주의사항도 검토해주세요"\n   - 키워드: 작성, 만들, 생성, 초안, 계약서, 문서, 양식\n   - 필요한 처리: 문서 생성 에이전트 호출, 템플릿 기반 작성\n\n5. **CONTRACT_REVIEW (계약서검토)**\n   - 설명: 기존 계약서나 문서를 검토해달라는 요청\n   - 예시:\n     * 단순: "이 계약서 검토해주세요", "특약사항 문제없나요?"\n     * 복합: "계약서 검토하고 수정사항도 제안해주세요"\n   - 키워드: 검토, 확인, 점검, 리뷰, 분석해, 살펴봐, 체크\n   - 필요한 처리: 문서 분석, 위험 요소 식별, 개선사항 제안\n\n6. **COMPREHENSIVE (종합분석)**\n   - 설명: 여러 측면을 종합적으로 분석해달라는 요청\n   - 예시:\n     * 단순: "이 물건 전체적으로 분석해주세요"\n     * 복합: "시세, 법률, 대출 모두 검토해서 종합 의견 주세요"\n   - 키워드: 종합, 전체, 모든, 전반적, 종합적, 평가, 분석\n   - 필요한 처리: 다중 데이터 소스 통합 분석\n\n7. **RISK_ANALYSIS (리스크분석)**\n   - 설명: 위험 요소나 주의사항에 대한 질문\n   - 예시:\n     * 단순: "이 계약 위험한가요?", "주의할 점 알려주세요"\n     * 복합: "리스크 분석하고 대안도 제시해주세요"\n   - 키워드: 위험, 리스크, 주의, 문제점, 조심, 걱정, 우려\n   - 필요한 처리: 위험 요소 분석, 주의사항 추출\n\n8. **UNCLEAR (불분명)**\n   - 설명: 의도를 명확히 파악하기 어려운 질문\n   - 예시: "이거 좀 봐주세요", "어떻게 해야 할까요?", "도와주세요"\n   - 처리: 추가 질문으로 의도 명확화 필요\n\n9. **IRRELEVANT (무관)**\n   - 설명: 부동산과 전혀 관련 없는 질문\n   - 예시: "날씨 어때?", "저녁 뭐 먹지?", "주식 추천해줘"\n   - 처리: 부동산 관련 질문을 유도\n\n## 복합 질문 예시와 분석:\n\n### 예시 1: "강남구 아파트 시세 알려주고 전세자금대출 가능한지도 확인해줘"\n- 주 의도: MARKET_INQUIRY (시세 조회가 먼저 필요)\n- 부가 의도: LOAN_CONSULT (대출 확인)\n- 분해: ["강남구 아파트 시세 조회", "전세자금대출 가능 여부 확인"]\n\n### 예시 2: "이 계약서 검토해서 위험한 부분 있는지 알려주고 수정 제안도 해줘"\n- 주 의도: CONTRACT_REVIEW (계약서 검토)\n- 부가 의도: RISK_ANALYSIS (위험 분석)\n- 분해: ["계약서 전체 검토", "위험 요소 식별", "수정사항 제안"]\n\n### 예시 3: "서초동 전세가 확인하고 법적으로 문제없는지도 봐줘"\n- 주 의도: MARKET_INQUIRY (시세 확인)\n- 부가 의도: LEGAL_CONSULT (법적 검토)\n- 분해: ["서초동 전세가 조회", "법적 이슈 검토"]\n\n## 응답 형식 (JSON 형식으로 응답):\n\n{\n    "intent": "LEGAL_CONSULT",\n    "confidence": 0.9,\n    "keywords": ["전세금", "인상", "제한"],\n    "sub_intents": [],\n    "is_compound": false,\n    "decomposed_tasks": [],\n    "entities": {\n        "location": "강남구",\n        "price": "5억",\n        "contract_type": "전세",\n        "date": "2024년",\n        "area": "84㎡",\n        "action_verbs": ["확인", "검토"]\n    },\n    "reasoning": "전세금 인상에 대한 법률 질문이므로 LEGAL_CONSULT로 분류"\n}\n\n응답 규칙:\n- intent: 위 9개 카테고리 중 하나 (대문자_언더스코어 형식)\n- confidence: 0.0~1.0 (0.8 이상이면 매우 확실, 0.5 미만이면 불확실)\n- keywords: 추출된 주요 키워드 목록\n- sub_intents: 복합 질문일 경우 부가적인 의도들\n- is_compound: 복합 질문 여부 (true/false)\n- decomposed_tasks: 복합 질문을 분해한 개별 작업들\n- entities: 추출된 엔티티 정보\n- reasoning: 분류한 이유와 근거 (상세하게)\n\n## 판단 가이드:\n- 여러 의도가 섞여있다면, 가장 주된 의도를 intent에, 나머지를 sub_intents에 기록\n- "그리고", "또한", "함께", "같이" 등의 연결어가 있으면 복합 질문일 가능성 높음\n- 법률 관련 키워드가 있으면 LEGAL_CONSULT 우선\n- 가격/시세 언급이 명확하면 MARKET_INQUIRY\n- 계약서라는 단어와 함께 "작성/만들기"가 있으면 CONTRACT_CREATION\n- 계약서라는 단어와 함께 "검토/확인"이 있으면 CONTRACT_REVIEW\n- 불확실하면 confidence를 낮게 설정하고 UNCLEAR 선택\n- 복합 질문은 is_compound를 true로 설정하고 개별 작업으로 분해\n\n분석할 질문: 마포구 아파트 시세 알려주고 계약서 작성해줘'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 14:43:15,707 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 14:43:15,708 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 14:43:15,708 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 14:43:15,708 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 14:43:15,708 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 14:43:15,708 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 14:43:18,634 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 05:43:18 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'2722'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'2744'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9898'), (b'x-ratelimit-remaining-tokens', b'198312'), (b'x-ratelimit-reset-requests', b'14m39.635s'), (b'x-ratelimit-reset-tokens', b'506ms'), (b'x-request-id', b'req_33e60892fcb34bff95ec6f143531008c'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989a99b30cc0e9fb-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 14:43:18,634 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 14:43:18,636 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 14:43:18,645 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 14:43:18,645 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 14:43:18,645 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 14:43:18,645 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 05:43:18 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '2722', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '2744', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9898', 'x-ratelimit-remaining-tokens': '198312', 'x-ratelimit-reset-requests': '14m39.635s', 'x-ratelimit-reset-tokens': '506ms', 'x-request-id': 'req_33e60892fcb34bff95ec6f143531008c', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989a99b30cc0e9fb-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 14:43:18,645 - openai._base_client - DEBUG - request_id: req_33e60892fcb34bff95ec6f143531008c
2025-10-05 14:43:18,646 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: intent_analysis | Model: gpt-4o-mini-2024-07-18 | Tokens: 2092 (prompt: 1925, completion: 167)
2025-10-05 14:43:18,646 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM Intent Analysis Result: {'intent': 'MARKET_INQUIRY', 'confidence': 0.85, 'keywords': ['마포구', '아파트', '시세'], 'sub_intents': ['CONTRACT_CREATION'], 'is_compound': True, 'decomposed_tasks': ['마포구 아파트 시세 조회', '계약서 작성'], 'entities': {'location': '마포구', 'contract_type': '아파트', 'action_verbs': ['알려주', '작성해줘']}, 'reasoning': '마포구 아파트 시세에 대한 질문이 주된 의도이며, 계약서 작성 요청이 부가적인 의도로 포함되어 있어 MARKET_INQUIRY로 분류'}
2025-10-05 14:43:18,646 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-a1310bf7-63f6-44d6-a2cb-22d088493924', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 Agent 선택 전문가입니다.\n사용자의 요청에 가장 적합한 Agent/Team을 선택하는 것이 목표입니다.\n\n## 현재 상황\n\n**사용자 질문:** 마포구 아파트 시세 알려주고 계약서 작성해줘\n**분석된 의도:** 시세조회\n**추출된 키워드:** [\'마포구\', \'아파트\', \'시세\']\n\n## 사용 가능한 Agent/Team 정보\n\n{\'search_team\': {\'name\': \'search_team\', \'capabilities\': \'법률 검색, 부동산 시세 조회, 대출 상품 검색\', \'tools\': [\'legal_search\', \'market_data\', \'loan_data\'], \'use_cases\': [\'법률 상담\', \'시세 조회\', \'대출 정보\']}, \'analysis_team\': {\'name\': \'analysis_team\', \'capabilities\': \'데이터 분석, 리스크 평가, 인사이트 생성, 추천\', \'tools\': [\'data_analyzer\', \'risk_evaluator\'], \'use_cases\': [\'시장 분석\', \'리스크 평가\', \'투자 분석\']}, \'document_team\': {\'name\': \'document_team\', \'capabilities\': \'계약서 작성, 문서 생성, 문서 검토\', \'tools\': [\'document_generator\', \'contract_reviewer\'], \'use_cases\': [\'계약서 작성\', \'문서 검토\']}}\n\n## Agent 역할 및 상세 가이드\n\n### 1. search_team (검색 팀)\n- **주요 기능**: 정보 검색 및 데이터 수집\n- **전문 분야**:\n  * 법률 정보 검색 (전세법, 임대차보호법, 부동산 관련 법규)\n  * 부동산 시세 조회 (매매가, 전세가, 월세, 실거래가)\n  * 대출 상품 정보 검색 (금리, 한도, 조건)\n  * 지역 정보 및 인프라 조회\n- **도구**: legal_search, market_data, loan_data\n- **적합한 작업**: 정보 조회, 데이터 수집, 법률 확인, 시세 파악\n- **예시**:\n  * "전세금 5% 인상 가능한가요?"\n  * "강남구 아파트 전세 시세"\n  * "전세자금대출 한도 얼마?"\n\n### 2. analysis_team (분석 팀)\n- **주요 기능**: 데이터 분석 및 평가\n- **전문 분야**:\n  * 시장 동향 분석 (상승률, 하락률, 추세)\n  * 리스크 평가 (계약, 투자 위험도)\n  * 투자 수익률 계산 (ROI, 월세 수익률)\n  * 대출 한도 및 조건 분석 (LTV, DTI, DSR)\n  * 비교 분석 (지역별, 상품별)\n- **도구**: data_analyzer, risk_evaluator, calculator\n- **적합한 작업**: 데이터 분석, 리스크 평가, 계산, 비교, 예측\n- **의존성**: 보통 search_team의 데이터가 필요\n- **예시**:\n  * "이 지역 투자 가치 분석해줘"\n  * "계약 리스크 평가해줘"\n  * "대출 가능 금액 계산해줘"\n\n### 3. document_team (문서 팀)\n- **주요 기능**: 문서 생성 및 관리\n- **전문 분야**:\n  * 계약서 작성 (임대차, 매매, 전세)\n  * 문서 템플릿 관리\n  * 특약사항 생성\n  * 계약서 수정안 작성\n  * 법률 문서 검토\n- **도구**: document_generator, contract_template, contract_reviewer\n- **적합한 작업**: 문서 작성, 계약서 생성, 문서 수정, 검토\n- **예시**:\n  * "임대차계약서 작성해줘"\n  * "특약사항 추가해줘"\n  * "계약서 수정안 만들어줘"\n\n## Agent 선택 전략\n\n### 1단계: 작업 유형 식별\n```\n정보 필요 → search_team\n분석/계산 필요 → analysis_team\n문서 작성 필요 → document_team\n```\n\n### 2단계: 의존성 분석\n```\n독립적 작업 → 단일 팀\n순차적 의존 → 여러 팀 (순서 중요)\n병렬 가능 → 여러 팀 (순서 무관)\n```\n\n### 3단계: 최적화\n```\n중복 제거 → 가장 적합한 팀만 선택\n효율성 → 병렬 처리 가능한 경우 표시\n```\n\n## 의도별 Agent 매핑 가이드\n\n| 의도 (Intent) | 추천 Agent 조합 | 이유 |\n|--------------|-----------------|------|\n| LEGAL_CONSULT | ["search_team"] | 법률 정보 검색 전문 |\n| MARKET_INQUIRY | ["search_team"] | 시세 데이터 조회 |\n| LOAN_CONSULT | ["search_team", "analysis_team"] | 대출 정보 조회 후 분석 |\n| CONTRACT_CREATION | ["document_team"] | 문서 생성 전문 |\n| CONTRACT_REVIEW | ["search_team", "analysis_team"] | 법률 검토 및 리스크 분석 |\n| COMPREHENSIVE | ["search_team", "analysis_team"] | 종합 정보 수집 및 분석 |\n| RISK_ANALYSIS | ["analysis_team"] | 리스크 평가 전문 |\n| UNCLEAR | ["search_team", "analysis_team"] | 포괄적 대응 |\n\n## 복합 질문 처리 예시\n\n### 예시 1: 순차적 처리\n질문: "강남구 시세 확인하고 투자 가치 분석해줘"\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "먼저 search_team이 시세 데이터를 수집하고, 그 결과를 analysis_team이 분석하여 투자 가치 평가"\n}\n```\n\n### 예시 2: 병렬 처리 가능\n질문: "법률 정보와 시세 정보 모두 알려줘"\n```json\n{\n    "selected_agents": ["search_team"],\n    "reasoning": "search_team이 법률과 시세 정보를 병렬로 조회 가능. 두 작업이 독립적이므로 동시 처리"\n}\n```\n\n### 예시 3: 3단계 파이프라인\n질문: "시세 조회하고 분석한 후 계약서 작성해줘"\n```json\n{\n    "selected_agents": ["search_team", "analysis_team", "document_team"],\n    "reasoning": "search_team이 데이터 수집 → analysis_team이 분석 → document_team이 분석 결과 기반 계약서 작성"\n}\n```\n\n## 응답 형식 (JSON)\n\n{\n    "selected_agents": ["선택된 agent/team 목록"],\n    "reasoning": "선택 이유를 구체적으로 설명. 각 Agent의 역할과 처리 순서 포함",\n    "coordination": "single/sequential/parallel/pipeline",\n    "dependencies": {"agent2": ["agent1"]},\n    "estimated_time": 30,\n    "confidence": 0.9\n}\n\n## 선택 가이드라인\n\n1. **최소 Agent 원칙**: 가능한 적은 수의 Agent로 처리\n2. **전문성 우선**: 해당 작업에 가장 전문적인 Agent 선택\n3. **효율성 고려**: 병렬 처리 가능한 경우 명시\n4. **의존성 관리**: 데이터 흐름을 고려한 순서 지정\n5. **폴백 전략**: 불확실한 경우 ["search_team", "analysis_team"] 조합\n\n## 주의사항\n\n- selected_agents는 반드시 배열 형태\n- Agent 이름은 정확히: "search_team", "analysis_team", "document_team"\n- 최소 1개, 최대 3개 선택\n- 순서는 실행 우선순위 (앞에 있을수록 먼저 실행)\n- reasoning은 상세하고 논리적으로 작성\n- coordination 필드로 실행 방식 명시\n- 복합 질문의 경우 의존성 관계 명확히 표시'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 14:43:18,647 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 14:43:18,648 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 14:43:18,648 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 14:43:18,649 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 14:43:18,649 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 14:43:18,649 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 14:43:19,730 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 05:43:19 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'865'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'893'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9897'), (b'x-ratelimit-remaining-tokens', b'198430'), (b'x-ratelimit-reset-requests', b'14m45.33s'), (b'x-ratelimit-reset-tokens', b'471ms'), (b'x-request-id', b'req_2766668531354394a4831adb4c3c3e90'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989a99c56fcee9fb-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 14:43:19,731 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 14:43:19,731 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 14:43:19,738 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 14:43:19,738 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 14:43:19,738 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 14:43:19,739 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 05:43:19 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '865', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '893', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9897', 'x-ratelimit-remaining-tokens': '198430', 'x-ratelimit-reset-requests': '14m45.33s', 'x-ratelimit-reset-tokens': '471ms', 'x-request-id': 'req_2766668531354394a4831adb4c3c3e90', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989a99c56fcee9fb-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 14:43:19,739 - openai._base_client - DEBUG - request_id: req_2766668531354394a4831adb4c3c3e90
2025-10-05 14:43:19,739 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: agent_selection | Model: gpt-4o-mini-2024-07-18 | Tokens: 1806 (prompt: 1705, completion: 101)
2025-10-05 14:43:19,739 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM agent selection reasoning: 사용자가 마포구 아파트 시세를 알고 싶어 하므로, 먼저 search_team이 시세 정보를 조회하고, 그 후 document_team이 계약서를 작성하는 순서로 진행합니다.
2025-10-05 14:43:19,739 - app.service_agent.cognitive_agents.planning_agent - INFO - ✅ Primary LLM selected agents: ['search_team', 'document_team']
2025-10-05 14:43:19,739 - app.service_agent.cognitive_agents.planning_agent - INFO - Intent analyzed: 시세조회 (confidence: 0.85)
2025-10-05 14:43:19,740 - app.service_agent.cognitive_agents.query_decomposer - INFO - Decomposing query: 마포구 아파트 시세 알려주고 계약서 작성해줘...
2025-10-05 14:43:19,740 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-4e6e581d-48cb-4fb0-81bf-4966eadfddca', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 질문 분해 전문가입니다.\n복잡한 사용자 질문을 독립적으로 처리 가능한 작업 단위로 분해하는 것이 목표입니다.\n\n## 중요 원칙:\n1. 각 작업은 하나의 명확한 목표를 가져야 합니다\n2. 작업 간 의존성을 명확히 파악해야 합니다\n3. 병렬 처리 가능한 작업은 구분해야 합니다\n4. 불필요한 분해는 피해야 합니다 (단순 질문은 분해하지 않음)\n\n## 작업 유형 (type):\n- search: 정보 검색 (법률, 시세, 대출 정보 등)\n- analysis: 데이터 분석 (리스크 평가, 시장 분석 등)\n- generation: 문서 생성 (계약서 작성 등)\n- review: 검토/평가 (계약서 검토, 조건 확인 등)\n- calculation: 계산/산출 (대출 한도, 세금 등)\n- comparison: 비교 분석 (여러 옵션 비교)\n\n## 담당 팀 (agent):\n- search_team: 법률, 시세, 대출 정보 검색\n- analysis_team: 데이터 분석, 리스크 평가, 계산\n- document_team: 문서 생성, 계약서 작성\n\n## 학습 예시:\n\n### 예시 1: 복합 질문 (순차적)\n질문: "강남구 아파트 시세 확인하고 대출 가능 금액 계산해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "강남구 아파트 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "대출 가능 금액 계산",\n            "type": "calculation",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "required_data": {"price": "task_0.result.price"},\n            "estimated_time": 15\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "시세 정보가 있어야 대출 금액 계산이 가능하므로 순차 실행"\n}\n```\n\n### 예시 2: 복합 질문 (병렬 가능)\n질문: "이 지역 전세 시세와 매매 시세 모두 알려주고 비교 분석해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "전세 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "매매 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "전세/매매 시세 비교 분석",\n            "type": "comparison",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0", "task_1"],\n            "required_data": {\n                "lease_price": "task_0.result",\n                "sale_price": "task_1.result"\n            },\n            "estimated_time": 25\n        }\n    ],\n    "execution_mode": "mixed",\n    "parallel_groups": [["task_0", "task_1"], ["task_2"]],\n    "reasoning": "시세 조회는 독립적이므로 병렬 처리, 비교는 두 결과 필요"\n}\n```\n\n### 예시 3: 복합 질문 (3단계 이상)\n질문: "이 계약서 검토해서 위험한 부분 찾고 수정안 만들어서 최종 계약서 작성해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "계약서 내용 전체 검토",\n            "type": "review",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 30\n        },\n        {\n            "description": "위험 요소 및 문제점 분석",\n            "type": "analysis",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "estimated_time": 25\n        },\n        {\n            "description": "수정안 제안 생성",\n            "type": "generation",\n            "agent": "document_team",\n            "priority": 3,\n            "depends_on": ["task_1"],\n            "estimated_time": 20\n        },\n        {\n            "description": "최종 계약서 작성",\n            "type": "generation",\n            "agent": "document_team",\n            "priority": 4,\n            "depends_on": ["task_2"],\n            "estimated_time": 30\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "각 단계가 이전 결과에 의존하므로 순차 실행 필요"\n}\n```\n\n### 예시 4: 단순 질문 (분해 불필요)\n질문: "전세금 인상률 상한이 얼마야?"\n분해:\n```json\n{\n    "is_compound": false,\n    "sub_tasks": [\n        {\n            "description": "전세금 인상률 상한 법률 정보 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 15\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "단일 정보 조회 요청으로 분해 불필요"\n}\n```\n\n### 예시 5: 조건부 실행\n질문: "이 물건 시세 확인하고 적정가면 대출 상담도 받고 싶어"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "물건 시세 조회 및 적정성 평가",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 25\n        },\n        {\n            "description": "대출 상담 정보 제공",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "optional": true,\n            "context": {"condition": "if_reasonable_price"},\n            "estimated_time": 20\n        }\n    ],\n    "execution_mode": "conditional",\n    "reasoning": "시세 확인 결과에 따라 대출 상담 진행 여부 결정"\n}\n```\n\n## Chain-of-Thought 프로세스:\n\n1. **질문 분석**: 어떤 정보나 작업을 요구하는가?\n2. **연결어 확인**: "그리고", "또한", "해서", "한 후" 등이 있는가?\n3. **의존성 파악**: 어떤 작업이 다른 작업의 결과를 필요로 하는가?\n4. **병렬성 판단**: 독립적으로 실행 가능한 작업이 있는가?\n5. **최적화**: 불필요한 분해는 없는가?\n\n## 응답 형식 (JSON):\n\n{\n    "is_compound": true/false,\n    "sub_tasks": [\n        {\n            "description": "작업 설명",\n            "type": "작업 유형",\n            "agent": "담당 팀",\n            "priority": 우선순위 (1이 가장 높음),\n            "depends_on": ["선행 작업 ID 리스트"],\n            "required_data": {"필요한 데이터 매핑"},\n            "estimated_time": 예상 소요 시간(초),\n            "optional": true/false,\n            "context": {"추가 컨텍스트"}\n        }\n    ],\n    "execution_mode": "sequential/parallel/mixed/conditional",\n    "parallel_groups": [["병렬 실행 가능한 작업 ID 그룹"]],\n    "confidence": 0.0-1.0,\n    "reasoning": "분해 결정의 이유와 근거"\n}\n\n## 분해 가이드라인:\n\n1. **분해가 필요한 경우**:\n   - 여러 종류의 정보를 요청하는 경우\n   - 순차적 처리가 필요한 경우 (A의 결과로 B 수행)\n   - 서로 다른 팀의 전문성이 필요한 경우\n\n2. **분해가 불필요한 경우**:\n   - 단일 정보 조회\n   - 단순한 질문-답변\n   - 하나의 팀에서 완전히 처리 가능한 경우\n\n3. **병렬 처리 기준**:\n   - 서로 독립적인 정보 조회\n   - 의존성이 없는 분석 작업\n   - 동시에 진행해도 충돌하지 않는 작업\n\n4. **우선순위 설정**:\n   - 의존성이 없는 작업: priority 1\n   - 1차 의존 작업: priority 2\n   - 2차 의존 작업: priority 3\n   - 이런 식으로 증가\n\n현재 의도: 시세조회\n추출된 엔티티: {\'location\': \'마포구\', \'contract_type\': \'아파트\', \'action_verbs\': [\'알려주\', \'작성해줘\']}\n\n분석할 질문: 마포구 아파트 시세 알려주고 계약서 작성해줘'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 14:43:19,741 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 14:43:19,741 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 14:43:19,741 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 14:43:19,741 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 14:43:19,741 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 14:43:19,742 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 14:43:22,424 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 05:43:22 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'2471'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'2493'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9897'), (b'x-ratelimit-remaining-tokens', b'197971'), (b'x-ratelimit-reset-requests', b'14m44.243s'), (b'x-ratelimit-reset-tokens', b'608ms'), (b'x-request-id', b'req_819cfe2eff4b42cbaa1d7c741a3d7f54'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989a99cc3b5fe9fb-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 14:43:22,424 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 14:43:22,424 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 14:43:22,424 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 14:43:22,425 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 14:43:22,425 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 14:43:22,425 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 05:43:22 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '2471', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '2493', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9897', 'x-ratelimit-remaining-tokens': '197971', 'x-ratelimit-reset-requests': '14m44.243s', 'x-ratelimit-reset-tokens': '608ms', 'x-request-id': 'req_819cfe2eff4b42cbaa1d7c741a3d7f54', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989a99cc3b5fe9fb-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 14:43:22,425 - openai._base_client - DEBUG - request_id: req_819cfe2eff4b42cbaa1d7c741a3d7f54
2025-10-05 14:43:22,425 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: query_decomposition | Model: gpt-4o-mini-2024-07-18 | Tokens: 2210 (prompt: 2036, completion: 174)
2025-10-05 14:43:22,425 - app.service_agent.cognitive_agents.query_decomposer - INFO - Successfully decomposed into 2 tasks
2025-10-05 14:43:22,425 - app.service_agent.cognitive_agents.planning_agent - INFO - Query decomposed into 2 tasks
2025-10-05 14:43:22,425 - app.service_agent.cognitive_agents.planning_agent - WARNING - Plan validation errors: ["Agent 'search_team' not found in registry", "Agent 'document_team' depends on missing 'task_0'", "Agent 'document_team' not found in registry"]
2025-10-05 14:43:22,425 - app.service_agent.cognitive_agents.planning_agent - INFO - Optimizing execution plan
2025-10-05 14:43:22,425 - app.service_agent.cognitive_agents.planning_agent - INFO - Comprehensive plan created: Intent: 시세조회 (confidence: 0.85) | Strategy: sequential | Agents: search_team, document_team | Estimated time: 50.0s
2025-10-05 14:43:22,425 - __main__ - INFO -   전략: sequential
2025-10-05 14:43:22,425 - __main__ - INFO -   단계 수: 2
2025-10-05 14:43:22,425 - __main__ - INFO - 
✓ 테스트 성공 (소요시간: 14.59초)
2025-10-05 14:43:22,425 - __main__ - INFO - 
================================================================================
2025-10-05 14:43:22,425 - __main__ - INFO - [28] 복합 질문 테스트: D008
2025-10-05 14:43:22,425 - __main__ - INFO - 질문: 전세 시세 확인하고 리스크 평가해줘
2025-10-05 14:43:22,426 - __main__ - INFO - ================================================================================
2025-10-05 14:43:22,426 - __main__ - INFO - 
[Step 1] Intent 분석...
2025-10-05 14:43:22,426 - app.service_agent.cognitive_agents.planning_agent - INFO - Analyzing intent for query: 전세 시세 확인하고 리스크 평가해줘...
2025-10-05 14:43:22,426 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-8a5773a1-70ea-41e6-9bdc-c8b7aedb46e2', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 의도 분석 전문가입니다.\n사용자의 질문을 정확히 이해하고, 어떤 종류의 도움이 필요한지 분류해야 합니다.\n\n## 중요: 복합 질문 처리\n복합적인 질문(여러 의도가 섞인 질문)의 경우, 가장 핵심적인 의도를 파악하되,\nsub_intents 필드에 부가적인 의도들도 함께 기록해주세요.\n\n## 분류 카테고리 설명:\n\n1. **LEGAL_CONSULT (법률상담)**\n   - 설명: 부동산 관련 법률, 권리, 의무에 대한 질문\n   - 예시:\n     * 단순: "전세금 5% 인상이 가능한가요?", "임대차계약 갱신 거부할 수 있나요?"\n     * 복합: "전세금 인상 가능한지 확인하고 법적 근거도 알려주세요"\n   - 키워드: 법, 전세, 임대, 보증금, 계약, 권리, 의무, 갱신, 임차인, 임대인, 법률, 규정, 조항\n   - 필요한 처리: 법률 데이터베이스 검색, 관련 법조항 찾기\n\n2. **MARKET_INQUIRY (시세조회)**\n   - 설명: 부동산 시장 가격, 시세, 거래 동향에 대한 질문\n   - 예시:\n     * 단순: "강남구 아파트 전세 시세 알려주세요", "서초동 매매가 얼마나 올랐나요?"\n     * 복합: "강남구 시세 확인하고 대출 가능 금액도 계산해줘"\n   - 키워드: 시세, 가격, 매매가, 전세가, 월세, 시장, 동향, 평균, 지역명, 상승률, 하락률\n   - 필요한 처리: 부동산 시세 데이터 조회, 지역별 가격 분석\n\n3. **LOAN_CONSULT (대출상담)**\n   - 설명: 주택담보대출, 전세자금대출 등 금융 관련 질문\n   - 예시:\n     * 단순: "전세자금대출 한도가 얼마인가요?", "LTV가 뭔가요?"\n     * 복합: "대출 한도 확인하고 금리 비교도 해주세요"\n   - 키워드: 대출, 금리, 한도, 조건, 상환, LTV, DTI, DSR, 담보, 금융, 은행\n   - 필요한 처리: 대출 상품 조회, 금리 정보 검색, 한도 계산\n\n4. **CONTRACT_CREATION (계약서작성)**\n   - 설명: 새로운 계약서나 문서를 작성해달라는 요청\n   - 예시:\n     * 단순: "임대차계약서 작성해주세요", "전세계약서 초안 만들어주세요"\n     * 복합: "계약서 작성하고 주의사항도 검토해주세요"\n   - 키워드: 작성, 만들, 생성, 초안, 계약서, 문서, 양식\n   - 필요한 처리: 문서 생성 에이전트 호출, 템플릿 기반 작성\n\n5. **CONTRACT_REVIEW (계약서검토)**\n   - 설명: 기존 계약서나 문서를 검토해달라는 요청\n   - 예시:\n     * 단순: "이 계약서 검토해주세요", "특약사항 문제없나요?"\n     * 복합: "계약서 검토하고 수정사항도 제안해주세요"\n   - 키워드: 검토, 확인, 점검, 리뷰, 분석해, 살펴봐, 체크\n   - 필요한 처리: 문서 분석, 위험 요소 식별, 개선사항 제안\n\n6. **COMPREHENSIVE (종합분석)**\n   - 설명: 여러 측면을 종합적으로 분석해달라는 요청\n   - 예시:\n     * 단순: "이 물건 전체적으로 분석해주세요"\n     * 복합: "시세, 법률, 대출 모두 검토해서 종합 의견 주세요"\n   - 키워드: 종합, 전체, 모든, 전반적, 종합적, 평가, 분석\n   - 필요한 처리: 다중 데이터 소스 통합 분석\n\n7. **RISK_ANALYSIS (리스크분석)**\n   - 설명: 위험 요소나 주의사항에 대한 질문\n   - 예시:\n     * 단순: "이 계약 위험한가요?", "주의할 점 알려주세요"\n     * 복합: "리스크 분석하고 대안도 제시해주세요"\n   - 키워드: 위험, 리스크, 주의, 문제점, 조심, 걱정, 우려\n   - 필요한 처리: 위험 요소 분석, 주의사항 추출\n\n8. **UNCLEAR (불분명)**\n   - 설명: 의도를 명확히 파악하기 어려운 질문\n   - 예시: "이거 좀 봐주세요", "어떻게 해야 할까요?", "도와주세요"\n   - 처리: 추가 질문으로 의도 명확화 필요\n\n9. **IRRELEVANT (무관)**\n   - 설명: 부동산과 전혀 관련 없는 질문\n   - 예시: "날씨 어때?", "저녁 뭐 먹지?", "주식 추천해줘"\n   - 처리: 부동산 관련 질문을 유도\n\n## 복합 질문 예시와 분석:\n\n### 예시 1: "강남구 아파트 시세 알려주고 전세자금대출 가능한지도 확인해줘"\n- 주 의도: MARKET_INQUIRY (시세 조회가 먼저 필요)\n- 부가 의도: LOAN_CONSULT (대출 확인)\n- 분해: ["강남구 아파트 시세 조회", "전세자금대출 가능 여부 확인"]\n\n### 예시 2: "이 계약서 검토해서 위험한 부분 있는지 알려주고 수정 제안도 해줘"\n- 주 의도: CONTRACT_REVIEW (계약서 검토)\n- 부가 의도: RISK_ANALYSIS (위험 분석)\n- 분해: ["계약서 전체 검토", "위험 요소 식별", "수정사항 제안"]\n\n### 예시 3: "서초동 전세가 확인하고 법적으로 문제없는지도 봐줘"\n- 주 의도: MARKET_INQUIRY (시세 확인)\n- 부가 의도: LEGAL_CONSULT (법적 검토)\n- 분해: ["서초동 전세가 조회", "법적 이슈 검토"]\n\n## 응답 형식 (JSON 형식으로 응답):\n\n{\n    "intent": "LEGAL_CONSULT",\n    "confidence": 0.9,\n    "keywords": ["전세금", "인상", "제한"],\n    "sub_intents": [],\n    "is_compound": false,\n    "decomposed_tasks": [],\n    "entities": {\n        "location": "강남구",\n        "price": "5억",\n        "contract_type": "전세",\n        "date": "2024년",\n        "area": "84㎡",\n        "action_verbs": ["확인", "검토"]\n    },\n    "reasoning": "전세금 인상에 대한 법률 질문이므로 LEGAL_CONSULT로 분류"\n}\n\n응답 규칙:\n- intent: 위 9개 카테고리 중 하나 (대문자_언더스코어 형식)\n- confidence: 0.0~1.0 (0.8 이상이면 매우 확실, 0.5 미만이면 불확실)\n- keywords: 추출된 주요 키워드 목록\n- sub_intents: 복합 질문일 경우 부가적인 의도들\n- is_compound: 복합 질문 여부 (true/false)\n- decomposed_tasks: 복합 질문을 분해한 개별 작업들\n- entities: 추출된 엔티티 정보\n- reasoning: 분류한 이유와 근거 (상세하게)\n\n## 판단 가이드:\n- 여러 의도가 섞여있다면, 가장 주된 의도를 intent에, 나머지를 sub_intents에 기록\n- "그리고", "또한", "함께", "같이" 등의 연결어가 있으면 복합 질문일 가능성 높음\n- 법률 관련 키워드가 있으면 LEGAL_CONSULT 우선\n- 가격/시세 언급이 명확하면 MARKET_INQUIRY\n- 계약서라는 단어와 함께 "작성/만들기"가 있으면 CONTRACT_CREATION\n- 계약서라는 단어와 함께 "검토/확인"이 있으면 CONTRACT_REVIEW\n- 불확실하면 confidence를 낮게 설정하고 UNCLEAR 선택\n- 복합 질문은 is_compound를 true로 설정하고 개별 작업으로 분해\n\n분석할 질문: 전세 시세 확인하고 리스크 평가해줘'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 14:43:22,426 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 14:43:22,427 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 14:43:22,427 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 14:43:22,427 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 14:43:22,427 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 14:43:22,427 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 14:43:24,831 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 05:43:24 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'2133'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'2173'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9895'), (b'x-ratelimit-remaining-tokens', b'198315'), (b'x-ratelimit-reset-requests', b'14m58.823s'), (b'x-ratelimit-reset-tokens', b'505ms'), (b'x-request-id', b'req_5eaad08e5d0543e9b5627e14e92b8220'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989a99dd0fe8e9fb-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 14:43:24,832 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 14:43:24,832 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 14:43:24,832 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 14:43:24,832 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 14:43:24,833 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 14:43:24,833 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 05:43:24 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '2133', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '2173', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9895', 'x-ratelimit-remaining-tokens': '198315', 'x-ratelimit-reset-requests': '14m58.823s', 'x-ratelimit-reset-tokens': '505ms', 'x-request-id': 'req_5eaad08e5d0543e9b5627e14e92b8220', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989a99dd0fe8e9fb-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 14:43:24,833 - openai._base_client - DEBUG - request_id: req_5eaad08e5d0543e9b5627e14e92b8220
2025-10-05 14:43:24,833 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: intent_analysis | Model: gpt-4o-mini-2024-07-18 | Tokens: 2070 (prompt: 1921, completion: 149)
2025-10-05 14:43:24,833 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM Intent Analysis Result: {'intent': 'MARKET_INQUIRY', 'confidence': 0.85, 'keywords': ['전세', '시세', '리스크', '평가'], 'sub_intents': ['RISK_ANALYSIS'], 'is_compound': True, 'decomposed_tasks': ['전세 시세 확인', '리스크 평가'], 'entities': {'contract_type': '전세', 'action_verbs': ['확인', '평가']}, 'reasoning': '전세 시세 확인이 주된 의도이며, 리스크 평가가 부가적인 의도로 포함되어 있어 MARKET_INQUIRY로 분류'}
2025-10-05 14:43:24,833 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-d3185854-8783-4b76-a90e-ba1cab8783de', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 Agent 선택 전문가입니다.\n사용자의 요청에 가장 적합한 Agent/Team을 선택하는 것이 목표입니다.\n\n## 현재 상황\n\n**사용자 질문:** 전세 시세 확인하고 리스크 평가해줘\n**분석된 의도:** 시세조회\n**추출된 키워드:** [\'전세\', \'시세\', \'리스크\', \'평가\']\n\n## 사용 가능한 Agent/Team 정보\n\n{\'search_team\': {\'name\': \'search_team\', \'capabilities\': \'법률 검색, 부동산 시세 조회, 대출 상품 검색\', \'tools\': [\'legal_search\', \'market_data\', \'loan_data\'], \'use_cases\': [\'법률 상담\', \'시세 조회\', \'대출 정보\']}, \'analysis_team\': {\'name\': \'analysis_team\', \'capabilities\': \'데이터 분석, 리스크 평가, 인사이트 생성, 추천\', \'tools\': [\'data_analyzer\', \'risk_evaluator\'], \'use_cases\': [\'시장 분석\', \'리스크 평가\', \'투자 분석\']}, \'document_team\': {\'name\': \'document_team\', \'capabilities\': \'계약서 작성, 문서 생성, 문서 검토\', \'tools\': [\'document_generator\', \'contract_reviewer\'], \'use_cases\': [\'계약서 작성\', \'문서 검토\']}}\n\n## Agent 역할 및 상세 가이드\n\n### 1. search_team (검색 팀)\n- **주요 기능**: 정보 검색 및 데이터 수집\n- **전문 분야**:\n  * 법률 정보 검색 (전세법, 임대차보호법, 부동산 관련 법규)\n  * 부동산 시세 조회 (매매가, 전세가, 월세, 실거래가)\n  * 대출 상품 정보 검색 (금리, 한도, 조건)\n  * 지역 정보 및 인프라 조회\n- **도구**: legal_search, market_data, loan_data\n- **적합한 작업**: 정보 조회, 데이터 수집, 법률 확인, 시세 파악\n- **예시**:\n  * "전세금 5% 인상 가능한가요?"\n  * "강남구 아파트 전세 시세"\n  * "전세자금대출 한도 얼마?"\n\n### 2. analysis_team (분석 팀)\n- **주요 기능**: 데이터 분석 및 평가\n- **전문 분야**:\n  * 시장 동향 분석 (상승률, 하락률, 추세)\n  * 리스크 평가 (계약, 투자 위험도)\n  * 투자 수익률 계산 (ROI, 월세 수익률)\n  * 대출 한도 및 조건 분석 (LTV, DTI, DSR)\n  * 비교 분석 (지역별, 상품별)\n- **도구**: data_analyzer, risk_evaluator, calculator\n- **적합한 작업**: 데이터 분석, 리스크 평가, 계산, 비교, 예측\n- **의존성**: 보통 search_team의 데이터가 필요\n- **예시**:\n  * "이 지역 투자 가치 분석해줘"\n  * "계약 리스크 평가해줘"\n  * "대출 가능 금액 계산해줘"\n\n### 3. document_team (문서 팀)\n- **주요 기능**: 문서 생성 및 관리\n- **전문 분야**:\n  * 계약서 작성 (임대차, 매매, 전세)\n  * 문서 템플릿 관리\n  * 특약사항 생성\n  * 계약서 수정안 작성\n  * 법률 문서 검토\n- **도구**: document_generator, contract_template, contract_reviewer\n- **적합한 작업**: 문서 작성, 계약서 생성, 문서 수정, 검토\n- **예시**:\n  * "임대차계약서 작성해줘"\n  * "특약사항 추가해줘"\n  * "계약서 수정안 만들어줘"\n\n## Agent 선택 전략\n\n### 1단계: 작업 유형 식별\n```\n정보 필요 → search_team\n분석/계산 필요 → analysis_team\n문서 작성 필요 → document_team\n```\n\n### 2단계: 의존성 분석\n```\n독립적 작업 → 단일 팀\n순차적 의존 → 여러 팀 (순서 중요)\n병렬 가능 → 여러 팀 (순서 무관)\n```\n\n### 3단계: 최적화\n```\n중복 제거 → 가장 적합한 팀만 선택\n효율성 → 병렬 처리 가능한 경우 표시\n```\n\n## 의도별 Agent 매핑 가이드\n\n| 의도 (Intent) | 추천 Agent 조합 | 이유 |\n|--------------|-----------------|------|\n| LEGAL_CONSULT | ["search_team"] | 법률 정보 검색 전문 |\n| MARKET_INQUIRY | ["search_team"] | 시세 데이터 조회 |\n| LOAN_CONSULT | ["search_team", "analysis_team"] | 대출 정보 조회 후 분석 |\n| CONTRACT_CREATION | ["document_team"] | 문서 생성 전문 |\n| CONTRACT_REVIEW | ["search_team", "analysis_team"] | 법률 검토 및 리스크 분석 |\n| COMPREHENSIVE | ["search_team", "analysis_team"] | 종합 정보 수집 및 분석 |\n| RISK_ANALYSIS | ["analysis_team"] | 리스크 평가 전문 |\n| UNCLEAR | ["search_team", "analysis_team"] | 포괄적 대응 |\n\n## 복합 질문 처리 예시\n\n### 예시 1: 순차적 처리\n질문: "강남구 시세 확인하고 투자 가치 분석해줘"\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "먼저 search_team이 시세 데이터를 수집하고, 그 결과를 analysis_team이 분석하여 투자 가치 평가"\n}\n```\n\n### 예시 2: 병렬 처리 가능\n질문: "법률 정보와 시세 정보 모두 알려줘"\n```json\n{\n    "selected_agents": ["search_team"],\n    "reasoning": "search_team이 법률과 시세 정보를 병렬로 조회 가능. 두 작업이 독립적이므로 동시 처리"\n}\n```\n\n### 예시 3: 3단계 파이프라인\n질문: "시세 조회하고 분석한 후 계약서 작성해줘"\n```json\n{\n    "selected_agents": ["search_team", "analysis_team", "document_team"],\n    "reasoning": "search_team이 데이터 수집 → analysis_team이 분석 → document_team이 분석 결과 기반 계약서 작성"\n}\n```\n\n## 응답 형식 (JSON)\n\n{\n    "selected_agents": ["선택된 agent/team 목록"],\n    "reasoning": "선택 이유를 구체적으로 설명. 각 Agent의 역할과 처리 순서 포함",\n    "coordination": "single/sequential/parallel/pipeline",\n    "dependencies": {"agent2": ["agent1"]},\n    "estimated_time": 30,\n    "confidence": 0.9\n}\n\n## 선택 가이드라인\n\n1. **최소 Agent 원칙**: 가능한 적은 수의 Agent로 처리\n2. **전문성 우선**: 해당 작업에 가장 전문적인 Agent 선택\n3. **효율성 고려**: 병렬 처리 가능한 경우 명시\n4. **의존성 관리**: 데이터 흐름을 고려한 순서 지정\n5. **폴백 전략**: 불확실한 경우 ["search_team", "analysis_team"] 조합\n\n## 주의사항\n\n- selected_agents는 반드시 배열 형태\n- Agent 이름은 정확히: "search_team", "analysis_team", "document_team"\n- 최소 1개, 최대 3개 선택\n- 순서는 실행 우선순위 (앞에 있을수록 먼저 실행)\n- reasoning은 상세하고 논리적으로 작성\n- coordination 필드로 실행 방식 명시\n- 복합 질문의 경우 의존성 관계 명확히 표시'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 14:43:24,834 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 14:43:24,834 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 14:43:24,834 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 14:43:24,834 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 14:43:24,834 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 14:43:24,834 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 14:43:26,957 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 05:43:26 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'1926'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'1940'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9895'), (b'x-ratelimit-remaining-tokens', b'198432'), (b'x-ratelimit-reset-requests', b'15m5.072s'), (b'x-ratelimit-reset-tokens', b'470ms'), (b'x-request-id', b'req_fba122d365c14ab38be7f3439215785c'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989a99ec08d5e9fb-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 14:43:26,958 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 14:43:26,958 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 14:43:26,963 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 14:43:26,964 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 14:43:26,964 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 14:43:26,964 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 05:43:26 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '1926', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '1940', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9895', 'x-ratelimit-remaining-tokens': '198432', 'x-ratelimit-reset-requests': '15m5.072s', 'x-ratelimit-reset-tokens': '470ms', 'x-request-id': 'req_fba122d365c14ab38be7f3439215785c', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989a99ec08d5e9fb-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 14:43:26,964 - openai._base_client - DEBUG - request_id: req_fba122d365c14ab38be7f3439215785c
2025-10-05 14:43:26,965 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: agent_selection | Model: gpt-4o-mini-2024-07-18 | Tokens: 1811 (prompt: 1704, completion: 107)
2025-10-05 14:43:26,965 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM agent selection reasoning: 먼저 search_team이 전세 시세 데이터를 조회하고, 그 결과를 기반으로 analysis_team이 리스크 평가를 수행합니다. 이 두 팀은 각각의 전문 분야에서 최적의 결과를 제공할 수 있습니다.
2025-10-05 14:43:26,965 - app.service_agent.cognitive_agents.planning_agent - INFO - ✅ Primary LLM selected agents: ['search_team', 'analysis_team']
2025-10-05 14:43:26,965 - __main__ - INFO -   의도: 시세조회
2025-10-05 14:43:26,965 - __main__ - INFO -   신뢰도: 0.85
2025-10-05 14:43:26,965 - __main__ - INFO -   추천 Agent: ['search_team', 'analysis_team']
2025-10-05 14:43:26,965 - __main__ - INFO - 
[Step 2] Query Decomposition...
2025-10-05 14:43:26,965 - app.service_agent.cognitive_agents.query_decomposer - INFO - Decomposing query: 전세 시세 확인하고 리스크 평가해줘...
2025-10-05 14:43:26,965 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-4f5bf9f9-299d-4480-839a-c90030b9283e', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 질문 분해 전문가입니다.\n복잡한 사용자 질문을 독립적으로 처리 가능한 작업 단위로 분해하는 것이 목표입니다.\n\n## 중요 원칙:\n1. 각 작업은 하나의 명확한 목표를 가져야 합니다\n2. 작업 간 의존성을 명확히 파악해야 합니다\n3. 병렬 처리 가능한 작업은 구분해야 합니다\n4. 불필요한 분해는 피해야 합니다 (단순 질문은 분해하지 않음)\n\n## 작업 유형 (type):\n- search: 정보 검색 (법률, 시세, 대출 정보 등)\n- analysis: 데이터 분석 (리스크 평가, 시장 분석 등)\n- generation: 문서 생성 (계약서 작성 등)\n- review: 검토/평가 (계약서 검토, 조건 확인 등)\n- calculation: 계산/산출 (대출 한도, 세금 등)\n- comparison: 비교 분석 (여러 옵션 비교)\n\n## 담당 팀 (agent):\n- search_team: 법률, 시세, 대출 정보 검색\n- analysis_team: 데이터 분석, 리스크 평가, 계산\n- document_team: 문서 생성, 계약서 작성\n\n## 학습 예시:\n\n### 예시 1: 복합 질문 (순차적)\n질문: "강남구 아파트 시세 확인하고 대출 가능 금액 계산해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "강남구 아파트 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "대출 가능 금액 계산",\n            "type": "calculation",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "required_data": {"price": "task_0.result.price"},\n            "estimated_time": 15\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "시세 정보가 있어야 대출 금액 계산이 가능하므로 순차 실행"\n}\n```\n\n### 예시 2: 복합 질문 (병렬 가능)\n질문: "이 지역 전세 시세와 매매 시세 모두 알려주고 비교 분석해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "전세 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "매매 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "전세/매매 시세 비교 분석",\n            "type": "comparison",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0", "task_1"],\n            "required_data": {\n                "lease_price": "task_0.result",\n                "sale_price": "task_1.result"\n            },\n            "estimated_time": 25\n        }\n    ],\n    "execution_mode": "mixed",\n    "parallel_groups": [["task_0", "task_1"], ["task_2"]],\n    "reasoning": "시세 조회는 독립적이므로 병렬 처리, 비교는 두 결과 필요"\n}\n```\n\n### 예시 3: 복합 질문 (3단계 이상)\n질문: "이 계약서 검토해서 위험한 부분 찾고 수정안 만들어서 최종 계약서 작성해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "계약서 내용 전체 검토",\n            "type": "review",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 30\n        },\n        {\n            "description": "위험 요소 및 문제점 분석",\n            "type": "analysis",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "estimated_time": 25\n        },\n        {\n            "description": "수정안 제안 생성",\n            "type": "generation",\n            "agent": "document_team",\n            "priority": 3,\n            "depends_on": ["task_1"],\n            "estimated_time": 20\n        },\n        {\n            "description": "최종 계약서 작성",\n            "type": "generation",\n            "agent": "document_team",\n            "priority": 4,\n            "depends_on": ["task_2"],\n            "estimated_time": 30\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "각 단계가 이전 결과에 의존하므로 순차 실행 필요"\n}\n```\n\n### 예시 4: 단순 질문 (분해 불필요)\n질문: "전세금 인상률 상한이 얼마야?"\n분해:\n```json\n{\n    "is_compound": false,\n    "sub_tasks": [\n        {\n            "description": "전세금 인상률 상한 법률 정보 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 15\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "단일 정보 조회 요청으로 분해 불필요"\n}\n```\n\n### 예시 5: 조건부 실행\n질문: "이 물건 시세 확인하고 적정가면 대출 상담도 받고 싶어"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "물건 시세 조회 및 적정성 평가",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 25\n        },\n        {\n            "description": "대출 상담 정보 제공",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "optional": true,\n            "context": {"condition": "if_reasonable_price"},\n            "estimated_time": 20\n        }\n    ],\n    "execution_mode": "conditional",\n    "reasoning": "시세 확인 결과에 따라 대출 상담 진행 여부 결정"\n}\n```\n\n## Chain-of-Thought 프로세스:\n\n1. **질문 분석**: 어떤 정보나 작업을 요구하는가?\n2. **연결어 확인**: "그리고", "또한", "해서", "한 후" 등이 있는가?\n3. **의존성 파악**: 어떤 작업이 다른 작업의 결과를 필요로 하는가?\n4. **병렬성 판단**: 독립적으로 실행 가능한 작업이 있는가?\n5. **최적화**: 불필요한 분해는 없는가?\n\n## 응답 형식 (JSON):\n\n{\n    "is_compound": true/false,\n    "sub_tasks": [\n        {\n            "description": "작업 설명",\n            "type": "작업 유형",\n            "agent": "담당 팀",\n            "priority": 우선순위 (1이 가장 높음),\n            "depends_on": ["선행 작업 ID 리스트"],\n            "required_data": {"필요한 데이터 매핑"},\n            "estimated_time": 예상 소요 시간(초),\n            "optional": true/false,\n            "context": {"추가 컨텍스트"}\n        }\n    ],\n    "execution_mode": "sequential/parallel/mixed/conditional",\n    "parallel_groups": [["병렬 실행 가능한 작업 ID 그룹"]],\n    "confidence": 0.0-1.0,\n    "reasoning": "분해 결정의 이유와 근거"\n}\n\n## 분해 가이드라인:\n\n1. **분해가 필요한 경우**:\n   - 여러 종류의 정보를 요청하는 경우\n   - 순차적 처리가 필요한 경우 (A의 결과로 B 수행)\n   - 서로 다른 팀의 전문성이 필요한 경우\n\n2. **분해가 불필요한 경우**:\n   - 단일 정보 조회\n   - 단순한 질문-답변\n   - 하나의 팀에서 완전히 처리 가능한 경우\n\n3. **병렬 처리 기준**:\n   - 서로 독립적인 정보 조회\n   - 의존성이 없는 분석 작업\n   - 동시에 진행해도 충돌하지 않는 작업\n\n4. **우선순위 설정**:\n   - 의존성이 없는 작업: priority 1\n   - 1차 의존 작업: priority 2\n   - 2차 의존 작업: priority 3\n   - 이런 식으로 증가\n\n현재 의도: 시세조회\n추출된 엔티티: None\n\n분석할 질문: 전세 시세 확인하고 리스크 평가해줘'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 14:43:26,966 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 14:43:26,966 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 14:43:26,966 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 14:43:26,966 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 14:43:26,966 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 14:43:26,966 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 14:43:31,744 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 05:43:31 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'4585'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'4597'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9894'), (b'x-ratelimit-remaining-tokens', b'197999'), (b'x-ratelimit-reset-requests', b'15m11.581s'), (b'x-ratelimit-reset-tokens', b'600ms'), (b'x-request-id', b'req_a4685e4dbded4e49bc778f550d0ce238'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989a99f96e5ee9fb-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 14:43:31,745 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 14:43:31,745 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 14:43:31,747 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 14:43:31,748 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 14:43:31,748 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 14:43:31,748 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 05:43:31 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '4585', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '4597', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9894', 'x-ratelimit-remaining-tokens': '197999', 'x-ratelimit-reset-requests': '15m11.581s', 'x-ratelimit-reset-tokens': '600ms', 'x-request-id': 'req_a4685e4dbded4e49bc778f550d0ce238', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989a99f96e5ee9fb-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 14:43:31,748 - openai._base_client - DEBUG - request_id: req_a4685e4dbded4e49bc778f550d0ce238
2025-10-05 14:43:31,748 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: query_decomposition | Model: gpt-4o-mini-2024-07-18 | Tokens: 2173 (prompt: 2002, completion: 171)
2025-10-05 14:43:31,748 - app.service_agent.cognitive_agents.query_decomposer - INFO - Successfully decomposed into 2 tasks
2025-10-05 14:43:31,748 - __main__ - INFO -   복합 질문: True
2025-10-05 14:43:31,748 - __main__ - INFO -   작업 수: 2
2025-10-05 14:43:31,748 - __main__ - INFO -   실행 모드: sequential
2025-10-05 14:43:31,748 - __main__ - INFO -     - task_0: 전세 시세 조회 (search_team)
2025-10-05 14:43:31,748 - __main__ - INFO -     - task_1: 리스크 평가 (analysis_team)
2025-10-05 14:43:31,748 - __main__ - INFO - 
[Step 3] Comprehensive Plan 생성...
2025-10-05 14:43:31,748 - app.service_agent.cognitive_agents.planning_agent - INFO - Creating comprehensive plan for query: 전세 시세 확인하고 리스크 평가해줘...
2025-10-05 14:43:31,748 - app.service_agent.cognitive_agents.planning_agent - INFO - Analyzing intent for query: 전세 시세 확인하고 리스크 평가해줘...
2025-10-05 14:43:31,749 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-55630146-8123-4bb3-be42-29d8297e529d', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 의도 분석 전문가입니다.\n사용자의 질문을 정확히 이해하고, 어떤 종류의 도움이 필요한지 분류해야 합니다.\n\n## 중요: 복합 질문 처리\n복합적인 질문(여러 의도가 섞인 질문)의 경우, 가장 핵심적인 의도를 파악하되,\nsub_intents 필드에 부가적인 의도들도 함께 기록해주세요.\n\n## 분류 카테고리 설명:\n\n1. **LEGAL_CONSULT (법률상담)**\n   - 설명: 부동산 관련 법률, 권리, 의무에 대한 질문\n   - 예시:\n     * 단순: "전세금 5% 인상이 가능한가요?", "임대차계약 갱신 거부할 수 있나요?"\n     * 복합: "전세금 인상 가능한지 확인하고 법적 근거도 알려주세요"\n   - 키워드: 법, 전세, 임대, 보증금, 계약, 권리, 의무, 갱신, 임차인, 임대인, 법률, 규정, 조항\n   - 필요한 처리: 법률 데이터베이스 검색, 관련 법조항 찾기\n\n2. **MARKET_INQUIRY (시세조회)**\n   - 설명: 부동산 시장 가격, 시세, 거래 동향에 대한 질문\n   - 예시:\n     * 단순: "강남구 아파트 전세 시세 알려주세요", "서초동 매매가 얼마나 올랐나요?"\n     * 복합: "강남구 시세 확인하고 대출 가능 금액도 계산해줘"\n   - 키워드: 시세, 가격, 매매가, 전세가, 월세, 시장, 동향, 평균, 지역명, 상승률, 하락률\n   - 필요한 처리: 부동산 시세 데이터 조회, 지역별 가격 분석\n\n3. **LOAN_CONSULT (대출상담)**\n   - 설명: 주택담보대출, 전세자금대출 등 금융 관련 질문\n   - 예시:\n     * 단순: "전세자금대출 한도가 얼마인가요?", "LTV가 뭔가요?"\n     * 복합: "대출 한도 확인하고 금리 비교도 해주세요"\n   - 키워드: 대출, 금리, 한도, 조건, 상환, LTV, DTI, DSR, 담보, 금융, 은행\n   - 필요한 처리: 대출 상품 조회, 금리 정보 검색, 한도 계산\n\n4. **CONTRACT_CREATION (계약서작성)**\n   - 설명: 새로운 계약서나 문서를 작성해달라는 요청\n   - 예시:\n     * 단순: "임대차계약서 작성해주세요", "전세계약서 초안 만들어주세요"\n     * 복합: "계약서 작성하고 주의사항도 검토해주세요"\n   - 키워드: 작성, 만들, 생성, 초안, 계약서, 문서, 양식\n   - 필요한 처리: 문서 생성 에이전트 호출, 템플릿 기반 작성\n\n5. **CONTRACT_REVIEW (계약서검토)**\n   - 설명: 기존 계약서나 문서를 검토해달라는 요청\n   - 예시:\n     * 단순: "이 계약서 검토해주세요", "특약사항 문제없나요?"\n     * 복합: "계약서 검토하고 수정사항도 제안해주세요"\n   - 키워드: 검토, 확인, 점검, 리뷰, 분석해, 살펴봐, 체크\n   - 필요한 처리: 문서 분석, 위험 요소 식별, 개선사항 제안\n\n6. **COMPREHENSIVE (종합분석)**\n   - 설명: 여러 측면을 종합적으로 분석해달라는 요청\n   - 예시:\n     * 단순: "이 물건 전체적으로 분석해주세요"\n     * 복합: "시세, 법률, 대출 모두 검토해서 종합 의견 주세요"\n   - 키워드: 종합, 전체, 모든, 전반적, 종합적, 평가, 분석\n   - 필요한 처리: 다중 데이터 소스 통합 분석\n\n7. **RISK_ANALYSIS (리스크분석)**\n   - 설명: 위험 요소나 주의사항에 대한 질문\n   - 예시:\n     * 단순: "이 계약 위험한가요?", "주의할 점 알려주세요"\n     * 복합: "리스크 분석하고 대안도 제시해주세요"\n   - 키워드: 위험, 리스크, 주의, 문제점, 조심, 걱정, 우려\n   - 필요한 처리: 위험 요소 분석, 주의사항 추출\n\n8. **UNCLEAR (불분명)**\n   - 설명: 의도를 명확히 파악하기 어려운 질문\n   - 예시: "이거 좀 봐주세요", "어떻게 해야 할까요?", "도와주세요"\n   - 처리: 추가 질문으로 의도 명확화 필요\n\n9. **IRRELEVANT (무관)**\n   - 설명: 부동산과 전혀 관련 없는 질문\n   - 예시: "날씨 어때?", "저녁 뭐 먹지?", "주식 추천해줘"\n   - 처리: 부동산 관련 질문을 유도\n\n## 복합 질문 예시와 분석:\n\n### 예시 1: "강남구 아파트 시세 알려주고 전세자금대출 가능한지도 확인해줘"\n- 주 의도: MARKET_INQUIRY (시세 조회가 먼저 필요)\n- 부가 의도: LOAN_CONSULT (대출 확인)\n- 분해: ["강남구 아파트 시세 조회", "전세자금대출 가능 여부 확인"]\n\n### 예시 2: "이 계약서 검토해서 위험한 부분 있는지 알려주고 수정 제안도 해줘"\n- 주 의도: CONTRACT_REVIEW (계약서 검토)\n- 부가 의도: RISK_ANALYSIS (위험 분석)\n- 분해: ["계약서 전체 검토", "위험 요소 식별", "수정사항 제안"]\n\n### 예시 3: "서초동 전세가 확인하고 법적으로 문제없는지도 봐줘"\n- 주 의도: MARKET_INQUIRY (시세 확인)\n- 부가 의도: LEGAL_CONSULT (법적 검토)\n- 분해: ["서초동 전세가 조회", "법적 이슈 검토"]\n\n## 응답 형식 (JSON 형식으로 응답):\n\n{\n    "intent": "LEGAL_CONSULT",\n    "confidence": 0.9,\n    "keywords": ["전세금", "인상", "제한"],\n    "sub_intents": [],\n    "is_compound": false,\n    "decomposed_tasks": [],\n    "entities": {\n        "location": "강남구",\n        "price": "5억",\n        "contract_type": "전세",\n        "date": "2024년",\n        "area": "84㎡",\n        "action_verbs": ["확인", "검토"]\n    },\n    "reasoning": "전세금 인상에 대한 법률 질문이므로 LEGAL_CONSULT로 분류"\n}\n\n응답 규칙:\n- intent: 위 9개 카테고리 중 하나 (대문자_언더스코어 형식)\n- confidence: 0.0~1.0 (0.8 이상이면 매우 확실, 0.5 미만이면 불확실)\n- keywords: 추출된 주요 키워드 목록\n- sub_intents: 복합 질문일 경우 부가적인 의도들\n- is_compound: 복합 질문 여부 (true/false)\n- decomposed_tasks: 복합 질문을 분해한 개별 작업들\n- entities: 추출된 엔티티 정보\n- reasoning: 분류한 이유와 근거 (상세하게)\n\n## 판단 가이드:\n- 여러 의도가 섞여있다면, 가장 주된 의도를 intent에, 나머지를 sub_intents에 기록\n- "그리고", "또한", "함께", "같이" 등의 연결어가 있으면 복합 질문일 가능성 높음\n- 법률 관련 키워드가 있으면 LEGAL_CONSULT 우선\n- 가격/시세 언급이 명확하면 MARKET_INQUIRY\n- 계약서라는 단어와 함께 "작성/만들기"가 있으면 CONTRACT_CREATION\n- 계약서라는 단어와 함께 "검토/확인"이 있으면 CONTRACT_REVIEW\n- 불확실하면 confidence를 낮게 설정하고 UNCLEAR 선택\n- 복합 질문은 is_compound를 true로 설정하고 개별 작업으로 분해\n\n분석할 질문: 전세 시세 확인하고 리스크 평가해줘'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 14:43:31,749 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 14:43:31,749 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 14:43:31,749 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 14:43:31,749 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 14:43:31,750 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 14:43:31,750 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 14:43:34,351 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 05:43:34 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'2314'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'2327'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9894'), (b'x-ratelimit-remaining-tokens', b'198315'), (b'x-ratelimit-reset-requests', b'15m15.437s'), (b'x-ratelimit-reset-tokens', b'505ms'), (b'x-request-id', b'req_83976061873a4aacb381ffaa102c80d4'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989a9a174d70e9fb-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 14:43:34,352 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 14:43:34,352 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 14:43:34,352 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 14:43:34,352 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 14:43:34,352 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 14:43:34,352 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 05:43:34 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '2314', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '2327', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9894', 'x-ratelimit-remaining-tokens': '198315', 'x-ratelimit-reset-requests': '15m15.437s', 'x-ratelimit-reset-tokens': '505ms', 'x-request-id': 'req_83976061873a4aacb381ffaa102c80d4', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989a9a174d70e9fb-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 14:43:34,352 - openai._base_client - DEBUG - request_id: req_83976061873a4aacb381ffaa102c80d4
2025-10-05 14:43:34,353 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: intent_analysis | Model: gpt-4o-mini-2024-07-18 | Tokens: 2070 (prompt: 1921, completion: 149)
2025-10-05 14:43:34,353 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM Intent Analysis Result: {'intent': 'MARKET_INQUIRY', 'confidence': 0.85, 'keywords': ['전세', '시세', '리스크', '평가'], 'sub_intents': ['RISK_ANALYSIS'], 'is_compound': True, 'decomposed_tasks': ['전세 시세 확인', '리스크 평가'], 'entities': {'contract_type': '전세', 'action_verbs': ['확인', '평가']}, 'reasoning': '전세 시세 확인이 주된 의도이며, 리스크 평가가 부가적인 의도로 포함되어 있어 MARKET_INQUIRY로 분류'}
2025-10-05 14:43:34,353 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-a7e52cc8-189f-427b-9080-86be27970c3f', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 Agent 선택 전문가입니다.\n사용자의 요청에 가장 적합한 Agent/Team을 선택하는 것이 목표입니다.\n\n## 현재 상황\n\n**사용자 질문:** 전세 시세 확인하고 리스크 평가해줘\n**분석된 의도:** 시세조회\n**추출된 키워드:** [\'전세\', \'시세\', \'리스크\', \'평가\']\n\n## 사용 가능한 Agent/Team 정보\n\n{\'search_team\': {\'name\': \'search_team\', \'capabilities\': \'법률 검색, 부동산 시세 조회, 대출 상품 검색\', \'tools\': [\'legal_search\', \'market_data\', \'loan_data\'], \'use_cases\': [\'법률 상담\', \'시세 조회\', \'대출 정보\']}, \'analysis_team\': {\'name\': \'analysis_team\', \'capabilities\': \'데이터 분석, 리스크 평가, 인사이트 생성, 추천\', \'tools\': [\'data_analyzer\', \'risk_evaluator\'], \'use_cases\': [\'시장 분석\', \'리스크 평가\', \'투자 분석\']}, \'document_team\': {\'name\': \'document_team\', \'capabilities\': \'계약서 작성, 문서 생성, 문서 검토\', \'tools\': [\'document_generator\', \'contract_reviewer\'], \'use_cases\': [\'계약서 작성\', \'문서 검토\']}}\n\n## Agent 역할 및 상세 가이드\n\n### 1. search_team (검색 팀)\n- **주요 기능**: 정보 검색 및 데이터 수집\n- **전문 분야**:\n  * 법률 정보 검색 (전세법, 임대차보호법, 부동산 관련 법규)\n  * 부동산 시세 조회 (매매가, 전세가, 월세, 실거래가)\n  * 대출 상품 정보 검색 (금리, 한도, 조건)\n  * 지역 정보 및 인프라 조회\n- **도구**: legal_search, market_data, loan_data\n- **적합한 작업**: 정보 조회, 데이터 수집, 법률 확인, 시세 파악\n- **예시**:\n  * "전세금 5% 인상 가능한가요?"\n  * "강남구 아파트 전세 시세"\n  * "전세자금대출 한도 얼마?"\n\n### 2. analysis_team (분석 팀)\n- **주요 기능**: 데이터 분석 및 평가\n- **전문 분야**:\n  * 시장 동향 분석 (상승률, 하락률, 추세)\n  * 리스크 평가 (계약, 투자 위험도)\n  * 투자 수익률 계산 (ROI, 월세 수익률)\n  * 대출 한도 및 조건 분석 (LTV, DTI, DSR)\n  * 비교 분석 (지역별, 상품별)\n- **도구**: data_analyzer, risk_evaluator, calculator\n- **적합한 작업**: 데이터 분석, 리스크 평가, 계산, 비교, 예측\n- **의존성**: 보통 search_team의 데이터가 필요\n- **예시**:\n  * "이 지역 투자 가치 분석해줘"\n  * "계약 리스크 평가해줘"\n  * "대출 가능 금액 계산해줘"\n\n### 3. document_team (문서 팀)\n- **주요 기능**: 문서 생성 및 관리\n- **전문 분야**:\n  * 계약서 작성 (임대차, 매매, 전세)\n  * 문서 템플릿 관리\n  * 특약사항 생성\n  * 계약서 수정안 작성\n  * 법률 문서 검토\n- **도구**: document_generator, contract_template, contract_reviewer\n- **적합한 작업**: 문서 작성, 계약서 생성, 문서 수정, 검토\n- **예시**:\n  * "임대차계약서 작성해줘"\n  * "특약사항 추가해줘"\n  * "계약서 수정안 만들어줘"\n\n## Agent 선택 전략\n\n### 1단계: 작업 유형 식별\n```\n정보 필요 → search_team\n분석/계산 필요 → analysis_team\n문서 작성 필요 → document_team\n```\n\n### 2단계: 의존성 분석\n```\n독립적 작업 → 단일 팀\n순차적 의존 → 여러 팀 (순서 중요)\n병렬 가능 → 여러 팀 (순서 무관)\n```\n\n### 3단계: 최적화\n```\n중복 제거 → 가장 적합한 팀만 선택\n효율성 → 병렬 처리 가능한 경우 표시\n```\n\n## 의도별 Agent 매핑 가이드\n\n| 의도 (Intent) | 추천 Agent 조합 | 이유 |\n|--------------|-----------------|------|\n| LEGAL_CONSULT | ["search_team"] | 법률 정보 검색 전문 |\n| MARKET_INQUIRY | ["search_team"] | 시세 데이터 조회 |\n| LOAN_CONSULT | ["search_team", "analysis_team"] | 대출 정보 조회 후 분석 |\n| CONTRACT_CREATION | ["document_team"] | 문서 생성 전문 |\n| CONTRACT_REVIEW | ["search_team", "analysis_team"] | 법률 검토 및 리스크 분석 |\n| COMPREHENSIVE | ["search_team", "analysis_team"] | 종합 정보 수집 및 분석 |\n| RISK_ANALYSIS | ["analysis_team"] | 리스크 평가 전문 |\n| UNCLEAR | ["search_team", "analysis_team"] | 포괄적 대응 |\n\n## 복합 질문 처리 예시\n\n### 예시 1: 순차적 처리\n질문: "강남구 시세 확인하고 투자 가치 분석해줘"\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "먼저 search_team이 시세 데이터를 수집하고, 그 결과를 analysis_team이 분석하여 투자 가치 평가"\n}\n```\n\n### 예시 2: 병렬 처리 가능\n질문: "법률 정보와 시세 정보 모두 알려줘"\n```json\n{\n    "selected_agents": ["search_team"],\n    "reasoning": "search_team이 법률과 시세 정보를 병렬로 조회 가능. 두 작업이 독립적이므로 동시 처리"\n}\n```\n\n### 예시 3: 3단계 파이프라인\n질문: "시세 조회하고 분석한 후 계약서 작성해줘"\n```json\n{\n    "selected_agents": ["search_team", "analysis_team", "document_team"],\n    "reasoning": "search_team이 데이터 수집 → analysis_team이 분석 → document_team이 분석 결과 기반 계약서 작성"\n}\n```\n\n## 응답 형식 (JSON)\n\n{\n    "selected_agents": ["선택된 agent/team 목록"],\n    "reasoning": "선택 이유를 구체적으로 설명. 각 Agent의 역할과 처리 순서 포함",\n    "coordination": "single/sequential/parallel/pipeline",\n    "dependencies": {"agent2": ["agent1"]},\n    "estimated_time": 30,\n    "confidence": 0.9\n}\n\n## 선택 가이드라인\n\n1. **최소 Agent 원칙**: 가능한 적은 수의 Agent로 처리\n2. **전문성 우선**: 해당 작업에 가장 전문적인 Agent 선택\n3. **효율성 고려**: 병렬 처리 가능한 경우 명시\n4. **의존성 관리**: 데이터 흐름을 고려한 순서 지정\n5. **폴백 전략**: 불확실한 경우 ["search_team", "analysis_team"] 조합\n\n## 주의사항\n\n- selected_agents는 반드시 배열 형태\n- Agent 이름은 정확히: "search_team", "analysis_team", "document_team"\n- 최소 1개, 최대 3개 선택\n- 순서는 실행 우선순위 (앞에 있을수록 먼저 실행)\n- reasoning은 상세하고 논리적으로 작성\n- coordination 필드로 실행 방식 명시\n- 복합 질문의 경우 의존성 관계 명확히 표시'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 14:43:34,354 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 14:43:34,354 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 14:43:34,354 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 14:43:34,354 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 14:43:34,354 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 14:43:34,354 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 14:43:37,117 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 05:43:37 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'2515'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'2545'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9893'), (b'x-ratelimit-remaining-tokens', b'198432'), (b'x-ratelimit-reset-requests', b'15m21.468s'), (b'x-ratelimit-reset-tokens', b'470ms'), (b'x-request-id', b'req_fb840c65d82745cdb4ca824a66329f75'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989a9a278c93e9fb-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 14:43:37,117 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 14:43:37,117 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 14:43:37,117 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 14:43:37,117 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 14:43:37,117 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 14:43:37,117 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 05:43:37 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '2515', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '2545', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9893', 'x-ratelimit-remaining-tokens': '198432', 'x-ratelimit-reset-requests': '15m21.468s', 'x-ratelimit-reset-tokens': '470ms', 'x-request-id': 'req_fb840c65d82745cdb4ca824a66329f75', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989a9a278c93e9fb-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 14:43:37,117 - openai._base_client - DEBUG - request_id: req_fb840c65d82745cdb4ca824a66329f75
2025-10-05 14:43:37,117 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: agent_selection | Model: gpt-4o-mini-2024-07-18 | Tokens: 1818 (prompt: 1704, completion: 114)
2025-10-05 14:43:37,118 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM agent selection reasoning: 사용자가 전세 시세를 확인하고 리스크를 평가해달라고 요청했으므로, 먼저 search_team이 전세 시세 데이터를 조회하고, 그 결과를 바탕으로 analysis_team이 리스크를 평가하는 순서로 진행해야 합니다.
2025-10-05 14:43:37,118 - app.service_agent.cognitive_agents.planning_agent - INFO - ✅ Primary LLM selected agents: ['search_team', 'analysis_team']
2025-10-05 14:43:37,118 - app.service_agent.cognitive_agents.planning_agent - INFO - Intent analyzed: 시세조회 (confidence: 0.85)
2025-10-05 14:43:37,118 - app.service_agent.cognitive_agents.query_decomposer - INFO - Decomposing query: 전세 시세 확인하고 리스크 평가해줘...
2025-10-05 14:43:37,118 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-03c5ef1a-30fc-4da6-9888-4abf0c30fb7b', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 질문 분해 전문가입니다.\n복잡한 사용자 질문을 독립적으로 처리 가능한 작업 단위로 분해하는 것이 목표입니다.\n\n## 중요 원칙:\n1. 각 작업은 하나의 명확한 목표를 가져야 합니다\n2. 작업 간 의존성을 명확히 파악해야 합니다\n3. 병렬 처리 가능한 작업은 구분해야 합니다\n4. 불필요한 분해는 피해야 합니다 (단순 질문은 분해하지 않음)\n\n## 작업 유형 (type):\n- search: 정보 검색 (법률, 시세, 대출 정보 등)\n- analysis: 데이터 분석 (리스크 평가, 시장 분석 등)\n- generation: 문서 생성 (계약서 작성 등)\n- review: 검토/평가 (계약서 검토, 조건 확인 등)\n- calculation: 계산/산출 (대출 한도, 세금 등)\n- comparison: 비교 분석 (여러 옵션 비교)\n\n## 담당 팀 (agent):\n- search_team: 법률, 시세, 대출 정보 검색\n- analysis_team: 데이터 분석, 리스크 평가, 계산\n- document_team: 문서 생성, 계약서 작성\n\n## 학습 예시:\n\n### 예시 1: 복합 질문 (순차적)\n질문: "강남구 아파트 시세 확인하고 대출 가능 금액 계산해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "강남구 아파트 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "대출 가능 금액 계산",\n            "type": "calculation",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "required_data": {"price": "task_0.result.price"},\n            "estimated_time": 15\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "시세 정보가 있어야 대출 금액 계산이 가능하므로 순차 실행"\n}\n```\n\n### 예시 2: 복합 질문 (병렬 가능)\n질문: "이 지역 전세 시세와 매매 시세 모두 알려주고 비교 분석해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "전세 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "매매 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "전세/매매 시세 비교 분석",\n            "type": "comparison",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0", "task_1"],\n            "required_data": {\n                "lease_price": "task_0.result",\n                "sale_price": "task_1.result"\n            },\n            "estimated_time": 25\n        }\n    ],\n    "execution_mode": "mixed",\n    "parallel_groups": [["task_0", "task_1"], ["task_2"]],\n    "reasoning": "시세 조회는 독립적이므로 병렬 처리, 비교는 두 결과 필요"\n}\n```\n\n### 예시 3: 복합 질문 (3단계 이상)\n질문: "이 계약서 검토해서 위험한 부분 찾고 수정안 만들어서 최종 계약서 작성해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "계약서 내용 전체 검토",\n            "type": "review",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 30\n        },\n        {\n            "description": "위험 요소 및 문제점 분석",\n            "type": "analysis",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "estimated_time": 25\n        },\n        {\n            "description": "수정안 제안 생성",\n            "type": "generation",\n            "agent": "document_team",\n            "priority": 3,\n            "depends_on": ["task_1"],\n            "estimated_time": 20\n        },\n        {\n            "description": "최종 계약서 작성",\n            "type": "generation",\n            "agent": "document_team",\n            "priority": 4,\n            "depends_on": ["task_2"],\n            "estimated_time": 30\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "각 단계가 이전 결과에 의존하므로 순차 실행 필요"\n}\n```\n\n### 예시 4: 단순 질문 (분해 불필요)\n질문: "전세금 인상률 상한이 얼마야?"\n분해:\n```json\n{\n    "is_compound": false,\n    "sub_tasks": [\n        {\n            "description": "전세금 인상률 상한 법률 정보 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 15\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "단일 정보 조회 요청으로 분해 불필요"\n}\n```\n\n### 예시 5: 조건부 실행\n질문: "이 물건 시세 확인하고 적정가면 대출 상담도 받고 싶어"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "물건 시세 조회 및 적정성 평가",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 25\n        },\n        {\n            "description": "대출 상담 정보 제공",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "optional": true,\n            "context": {"condition": "if_reasonable_price"},\n            "estimated_time": 20\n        }\n    ],\n    "execution_mode": "conditional",\n    "reasoning": "시세 확인 결과에 따라 대출 상담 진행 여부 결정"\n}\n```\n\n## Chain-of-Thought 프로세스:\n\n1. **질문 분석**: 어떤 정보나 작업을 요구하는가?\n2. **연결어 확인**: "그리고", "또한", "해서", "한 후" 등이 있는가?\n3. **의존성 파악**: 어떤 작업이 다른 작업의 결과를 필요로 하는가?\n4. **병렬성 판단**: 독립적으로 실행 가능한 작업이 있는가?\n5. **최적화**: 불필요한 분해는 없는가?\n\n## 응답 형식 (JSON):\n\n{\n    "is_compound": true/false,\n    "sub_tasks": [\n        {\n            "description": "작업 설명",\n            "type": "작업 유형",\n            "agent": "담당 팀",\n            "priority": 우선순위 (1이 가장 높음),\n            "depends_on": ["선행 작업 ID 리스트"],\n            "required_data": {"필요한 데이터 매핑"},\n            "estimated_time": 예상 소요 시간(초),\n            "optional": true/false,\n            "context": {"추가 컨텍스트"}\n        }\n    ],\n    "execution_mode": "sequential/parallel/mixed/conditional",\n    "parallel_groups": [["병렬 실행 가능한 작업 ID 그룹"]],\n    "confidence": 0.0-1.0,\n    "reasoning": "분해 결정의 이유와 근거"\n}\n\n## 분해 가이드라인:\n\n1. **분해가 필요한 경우**:\n   - 여러 종류의 정보를 요청하는 경우\n   - 순차적 처리가 필요한 경우 (A의 결과로 B 수행)\n   - 서로 다른 팀의 전문성이 필요한 경우\n\n2. **분해가 불필요한 경우**:\n   - 단일 정보 조회\n   - 단순한 질문-답변\n   - 하나의 팀에서 완전히 처리 가능한 경우\n\n3. **병렬 처리 기준**:\n   - 서로 독립적인 정보 조회\n   - 의존성이 없는 분석 작업\n   - 동시에 진행해도 충돌하지 않는 작업\n\n4. **우선순위 설정**:\n   - 의존성이 없는 작업: priority 1\n   - 1차 의존 작업: priority 2\n   - 2차 의존 작업: priority 3\n   - 이런 식으로 증가\n\n현재 의도: 시세조회\n추출된 엔티티: {\'contract_type\': \'전세\', \'action_verbs\': [\'확인\', \'평가\']}\n\n분석할 질문: 전세 시세 확인하고 리스크 평가해줘'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 14:43:37,118 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 14:43:37,118 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 14:43:37,119 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 14:43:37,119 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 14:43:37,119 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 14:43:37,119 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 14:43:41,007 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 05:43:40 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'3622'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'3642'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9892'), (b'x-ratelimit-remaining-tokens', b'197984'), (b'x-ratelimit-reset-requests', b'15m27.338s'), (b'x-ratelimit-reset-tokens', b'604ms'), (b'x-request-id', b'req_8506c64feef14d08aaa8ce4079c65e9d'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989a9a38de99e9fb-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 14:43:41,008 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 14:43:41,008 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 14:43:41,008 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 14:43:41,009 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 14:43:41,009 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 14:43:41,009 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 05:43:40 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '3622', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '3642', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9892', 'x-ratelimit-remaining-tokens': '197984', 'x-ratelimit-reset-requests': '15m27.338s', 'x-ratelimit-reset-tokens': '604ms', 'x-request-id': 'req_8506c64feef14d08aaa8ce4079c65e9d', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989a9a38de99e9fb-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 14:43:41,009 - openai._base_client - DEBUG - request_id: req_8506c64feef14d08aaa8ce4079c65e9d
2025-10-05 14:43:41,009 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: query_decomposition | Model: gpt-4o-mini-2024-07-18 | Tokens: 2192 (prompt: 2022, completion: 170)
2025-10-05 14:43:41,009 - app.service_agent.cognitive_agents.query_decomposer - INFO - Successfully decomposed into 2 tasks
2025-10-05 14:43:41,009 - app.service_agent.cognitive_agents.planning_agent - INFO - Query decomposed into 2 tasks
2025-10-05 14:43:41,009 - app.service_agent.cognitive_agents.planning_agent - WARNING - Plan validation errors: ["Agent 'search_team' not found in registry", "Agent 'analysis_team' depends on missing 'task_0'", "Agent 'analysis_team' not found in registry"]
2025-10-05 14:43:41,009 - app.service_agent.cognitive_agents.planning_agent - INFO - Optimizing execution plan
2025-10-05 14:43:41,009 - app.service_agent.cognitive_agents.planning_agent - INFO - Comprehensive plan created: Intent: 시세조회 (confidence: 0.85) | Strategy: sequential | Agents: search_team, analysis_team | Estimated time: 45.0s
2025-10-05 14:43:41,009 - __main__ - INFO -   전략: sequential
2025-10-05 14:43:41,009 - __main__ - INFO -   단계 수: 2
2025-10-05 14:43:41,009 - __main__ - INFO - 
✓ 테스트 성공 (소요시간: 18.58초)
2025-10-05 14:43:41,009 - __main__ - INFO - 
================================================================================
2025-10-05 14:43:41,009 - __main__ - INFO - [29] 복합 질문 테스트: D009
2025-10-05 14:43:41,009 - __main__ - INFO - 질문: 임대차보호법 내용 찾고 적용 가능 여부 판단해줘
2025-10-05 14:43:41,009 - __main__ - INFO - ================================================================================
2025-10-05 14:43:41,009 - __main__ - INFO - 
[Step 1] Intent 분석...
2025-10-05 14:43:41,009 - app.service_agent.cognitive_agents.planning_agent - INFO - Analyzing intent for query: 임대차보호법 내용 찾고 적용 가능 여부 판단해줘...
2025-10-05 14:43:41,010 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-b571dc11-851f-4350-bf2d-0688c4596ed8', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 의도 분석 전문가입니다.\n사용자의 질문을 정확히 이해하고, 어떤 종류의 도움이 필요한지 분류해야 합니다.\n\n## 중요: 복합 질문 처리\n복합적인 질문(여러 의도가 섞인 질문)의 경우, 가장 핵심적인 의도를 파악하되,\nsub_intents 필드에 부가적인 의도들도 함께 기록해주세요.\n\n## 분류 카테고리 설명:\n\n1. **LEGAL_CONSULT (법률상담)**\n   - 설명: 부동산 관련 법률, 권리, 의무에 대한 질문\n   - 예시:\n     * 단순: "전세금 5% 인상이 가능한가요?", "임대차계약 갱신 거부할 수 있나요?"\n     * 복합: "전세금 인상 가능한지 확인하고 법적 근거도 알려주세요"\n   - 키워드: 법, 전세, 임대, 보증금, 계약, 권리, 의무, 갱신, 임차인, 임대인, 법률, 규정, 조항\n   - 필요한 처리: 법률 데이터베이스 검색, 관련 법조항 찾기\n\n2. **MARKET_INQUIRY (시세조회)**\n   - 설명: 부동산 시장 가격, 시세, 거래 동향에 대한 질문\n   - 예시:\n     * 단순: "강남구 아파트 전세 시세 알려주세요", "서초동 매매가 얼마나 올랐나요?"\n     * 복합: "강남구 시세 확인하고 대출 가능 금액도 계산해줘"\n   - 키워드: 시세, 가격, 매매가, 전세가, 월세, 시장, 동향, 평균, 지역명, 상승률, 하락률\n   - 필요한 처리: 부동산 시세 데이터 조회, 지역별 가격 분석\n\n3. **LOAN_CONSULT (대출상담)**\n   - 설명: 주택담보대출, 전세자금대출 등 금융 관련 질문\n   - 예시:\n     * 단순: "전세자금대출 한도가 얼마인가요?", "LTV가 뭔가요?"\n     * 복합: "대출 한도 확인하고 금리 비교도 해주세요"\n   - 키워드: 대출, 금리, 한도, 조건, 상환, LTV, DTI, DSR, 담보, 금융, 은행\n   - 필요한 처리: 대출 상품 조회, 금리 정보 검색, 한도 계산\n\n4. **CONTRACT_CREATION (계약서작성)**\n   - 설명: 새로운 계약서나 문서를 작성해달라는 요청\n   - 예시:\n     * 단순: "임대차계약서 작성해주세요", "전세계약서 초안 만들어주세요"\n     * 복합: "계약서 작성하고 주의사항도 검토해주세요"\n   - 키워드: 작성, 만들, 생성, 초안, 계약서, 문서, 양식\n   - 필요한 처리: 문서 생성 에이전트 호출, 템플릿 기반 작성\n\n5. **CONTRACT_REVIEW (계약서검토)**\n   - 설명: 기존 계약서나 문서를 검토해달라는 요청\n   - 예시:\n     * 단순: "이 계약서 검토해주세요", "특약사항 문제없나요?"\n     * 복합: "계약서 검토하고 수정사항도 제안해주세요"\n   - 키워드: 검토, 확인, 점검, 리뷰, 분석해, 살펴봐, 체크\n   - 필요한 처리: 문서 분석, 위험 요소 식별, 개선사항 제안\n\n6. **COMPREHENSIVE (종합분석)**\n   - 설명: 여러 측면을 종합적으로 분석해달라는 요청\n   - 예시:\n     * 단순: "이 물건 전체적으로 분석해주세요"\n     * 복합: "시세, 법률, 대출 모두 검토해서 종합 의견 주세요"\n   - 키워드: 종합, 전체, 모든, 전반적, 종합적, 평가, 분석\n   - 필요한 처리: 다중 데이터 소스 통합 분석\n\n7. **RISK_ANALYSIS (리스크분석)**\n   - 설명: 위험 요소나 주의사항에 대한 질문\n   - 예시:\n     * 단순: "이 계약 위험한가요?", "주의할 점 알려주세요"\n     * 복합: "리스크 분석하고 대안도 제시해주세요"\n   - 키워드: 위험, 리스크, 주의, 문제점, 조심, 걱정, 우려\n   - 필요한 처리: 위험 요소 분석, 주의사항 추출\n\n8. **UNCLEAR (불분명)**\n   - 설명: 의도를 명확히 파악하기 어려운 질문\n   - 예시: "이거 좀 봐주세요", "어떻게 해야 할까요?", "도와주세요"\n   - 처리: 추가 질문으로 의도 명확화 필요\n\n9. **IRRELEVANT (무관)**\n   - 설명: 부동산과 전혀 관련 없는 질문\n   - 예시: "날씨 어때?", "저녁 뭐 먹지?", "주식 추천해줘"\n   - 처리: 부동산 관련 질문을 유도\n\n## 복합 질문 예시와 분석:\n\n### 예시 1: "강남구 아파트 시세 알려주고 전세자금대출 가능한지도 확인해줘"\n- 주 의도: MARKET_INQUIRY (시세 조회가 먼저 필요)\n- 부가 의도: LOAN_CONSULT (대출 확인)\n- 분해: ["강남구 아파트 시세 조회", "전세자금대출 가능 여부 확인"]\n\n### 예시 2: "이 계약서 검토해서 위험한 부분 있는지 알려주고 수정 제안도 해줘"\n- 주 의도: CONTRACT_REVIEW (계약서 검토)\n- 부가 의도: RISK_ANALYSIS (위험 분석)\n- 분해: ["계약서 전체 검토", "위험 요소 식별", "수정사항 제안"]\n\n### 예시 3: "서초동 전세가 확인하고 법적으로 문제없는지도 봐줘"\n- 주 의도: MARKET_INQUIRY (시세 확인)\n- 부가 의도: LEGAL_CONSULT (법적 검토)\n- 분해: ["서초동 전세가 조회", "법적 이슈 검토"]\n\n## 응답 형식 (JSON 형식으로 응답):\n\n{\n    "intent": "LEGAL_CONSULT",\n    "confidence": 0.9,\n    "keywords": ["전세금", "인상", "제한"],\n    "sub_intents": [],\n    "is_compound": false,\n    "decomposed_tasks": [],\n    "entities": {\n        "location": "강남구",\n        "price": "5억",\n        "contract_type": "전세",\n        "date": "2024년",\n        "area": "84㎡",\n        "action_verbs": ["확인", "검토"]\n    },\n    "reasoning": "전세금 인상에 대한 법률 질문이므로 LEGAL_CONSULT로 분류"\n}\n\n응답 규칙:\n- intent: 위 9개 카테고리 중 하나 (대문자_언더스코어 형식)\n- confidence: 0.0~1.0 (0.8 이상이면 매우 확실, 0.5 미만이면 불확실)\n- keywords: 추출된 주요 키워드 목록\n- sub_intents: 복합 질문일 경우 부가적인 의도들\n- is_compound: 복합 질문 여부 (true/false)\n- decomposed_tasks: 복합 질문을 분해한 개별 작업들\n- entities: 추출된 엔티티 정보\n- reasoning: 분류한 이유와 근거 (상세하게)\n\n## 판단 가이드:\n- 여러 의도가 섞여있다면, 가장 주된 의도를 intent에, 나머지를 sub_intents에 기록\n- "그리고", "또한", "함께", "같이" 등의 연결어가 있으면 복합 질문일 가능성 높음\n- 법률 관련 키워드가 있으면 LEGAL_CONSULT 우선\n- 가격/시세 언급이 명확하면 MARKET_INQUIRY\n- 계약서라는 단어와 함께 "작성/만들기"가 있으면 CONTRACT_CREATION\n- 계약서라는 단어와 함께 "검토/확인"이 있으면 CONTRACT_REVIEW\n- 불확실하면 confidence를 낮게 설정하고 UNCLEAR 선택\n- 복합 질문은 is_compound를 true로 설정하고 개별 작업으로 분해\n\n분석할 질문: 임대차보호법 내용 찾고 적용 가능 여부 판단해줘'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 14:43:41,010 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 14:43:41,010 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 14:43:41,010 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 14:43:41,011 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 14:43:41,011 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 14:43:41,011 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 14:43:43,178 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 05:43:43 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'1972'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'1990'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9892'), (b'x-ratelimit-remaining-tokens', b'198311'), (b'x-ratelimit-reset-requests', b'15m32.099s'), (b'x-ratelimit-reset-tokens', b'506ms'), (b'x-request-id', b'req_3212eb1d3e4047a2ba78ff11a2b52d91'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989a9a512d9ee9fb-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 14:43:43,178 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 14:43:43,178 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 14:43:43,183 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 14:43:43,183 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 14:43:43,183 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 14:43:43,183 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 05:43:43 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '1972', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '1990', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9892', 'x-ratelimit-remaining-tokens': '198311', 'x-ratelimit-reset-requests': '15m32.099s', 'x-ratelimit-reset-tokens': '506ms', 'x-request-id': 'req_3212eb1d3e4047a2ba78ff11a2b52d91', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989a9a512d9ee9fb-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 14:43:43,183 - openai._base_client - DEBUG - request_id: req_3212eb1d3e4047a2ba78ff11a2b52d91
2025-10-05 14:43:43,183 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: intent_analysis | Model: gpt-4o-mini-2024-07-18 | Tokens: 2056 (prompt: 1925, completion: 131)
2025-10-05 14:43:43,183 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM Intent Analysis Result: {'intent': 'LEGAL_CONSULT', 'confidence': 0.85, 'keywords': ['임대차보호법', '적용', '가능 여부'], 'sub_intents': [], 'is_compound': False, 'decomposed_tasks': [], 'entities': {'law': '임대차보호법', 'action_verbs': ['찾고', '판단']}, 'reasoning': '임대차보호법에 대한 내용과 적용 가능 여부를 묻고 있으므로 LEGAL_CONSULT로 분류'}
2025-10-05 14:43:43,184 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-6152c488-4432-4308-b512-0ec0ccb0aa2d', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 Agent 선택 전문가입니다.\n사용자의 요청에 가장 적합한 Agent/Team을 선택하는 것이 목표입니다.\n\n## 현재 상황\n\n**사용자 질문:** 임대차보호법 내용 찾고 적용 가능 여부 판단해줘\n**분석된 의도:** 법률상담\n**추출된 키워드:** [\'임대차보호법\', \'적용\', \'가능 여부\']\n\n## 사용 가능한 Agent/Team 정보\n\n{\'search_team\': {\'name\': \'search_team\', \'capabilities\': \'법률 검색, 부동산 시세 조회, 대출 상품 검색\', \'tools\': [\'legal_search\', \'market_data\', \'loan_data\'], \'use_cases\': [\'법률 상담\', \'시세 조회\', \'대출 정보\']}, \'analysis_team\': {\'name\': \'analysis_team\', \'capabilities\': \'데이터 분석, 리스크 평가, 인사이트 생성, 추천\', \'tools\': [\'data_analyzer\', \'risk_evaluator\'], \'use_cases\': [\'시장 분석\', \'리스크 평가\', \'투자 분석\']}, \'document_team\': {\'name\': \'document_team\', \'capabilities\': \'계약서 작성, 문서 생성, 문서 검토\', \'tools\': [\'document_generator\', \'contract_reviewer\'], \'use_cases\': [\'계약서 작성\', \'문서 검토\']}}\n\n## Agent 역할 및 상세 가이드\n\n### 1. search_team (검색 팀)\n- **주요 기능**: 정보 검색 및 데이터 수집\n- **전문 분야**:\n  * 법률 정보 검색 (전세법, 임대차보호법, 부동산 관련 법규)\n  * 부동산 시세 조회 (매매가, 전세가, 월세, 실거래가)\n  * 대출 상품 정보 검색 (금리, 한도, 조건)\n  * 지역 정보 및 인프라 조회\n- **도구**: legal_search, market_data, loan_data\n- **적합한 작업**: 정보 조회, 데이터 수집, 법률 확인, 시세 파악\n- **예시**:\n  * "전세금 5% 인상 가능한가요?"\n  * "강남구 아파트 전세 시세"\n  * "전세자금대출 한도 얼마?"\n\n### 2. analysis_team (분석 팀)\n- **주요 기능**: 데이터 분석 및 평가\n- **전문 분야**:\n  * 시장 동향 분석 (상승률, 하락률, 추세)\n  * 리스크 평가 (계약, 투자 위험도)\n  * 투자 수익률 계산 (ROI, 월세 수익률)\n  * 대출 한도 및 조건 분석 (LTV, DTI, DSR)\n  * 비교 분석 (지역별, 상품별)\n- **도구**: data_analyzer, risk_evaluator, calculator\n- **적합한 작업**: 데이터 분석, 리스크 평가, 계산, 비교, 예측\n- **의존성**: 보통 search_team의 데이터가 필요\n- **예시**:\n  * "이 지역 투자 가치 분석해줘"\n  * "계약 리스크 평가해줘"\n  * "대출 가능 금액 계산해줘"\n\n### 3. document_team (문서 팀)\n- **주요 기능**: 문서 생성 및 관리\n- **전문 분야**:\n  * 계약서 작성 (임대차, 매매, 전세)\n  * 문서 템플릿 관리\n  * 특약사항 생성\n  * 계약서 수정안 작성\n  * 법률 문서 검토\n- **도구**: document_generator, contract_template, contract_reviewer\n- **적합한 작업**: 문서 작성, 계약서 생성, 문서 수정, 검토\n- **예시**:\n  * "임대차계약서 작성해줘"\n  * "특약사항 추가해줘"\n  * "계약서 수정안 만들어줘"\n\n## Agent 선택 전략\n\n### 1단계: 작업 유형 식별\n```\n정보 필요 → search_team\n분석/계산 필요 → analysis_team\n문서 작성 필요 → document_team\n```\n\n### 2단계: 의존성 분석\n```\n독립적 작업 → 단일 팀\n순차적 의존 → 여러 팀 (순서 중요)\n병렬 가능 → 여러 팀 (순서 무관)\n```\n\n### 3단계: 최적화\n```\n중복 제거 → 가장 적합한 팀만 선택\n효율성 → 병렬 처리 가능한 경우 표시\n```\n\n## 의도별 Agent 매핑 가이드\n\n| 의도 (Intent) | 추천 Agent 조합 | 이유 |\n|--------------|-----------------|------|\n| LEGAL_CONSULT | ["search_team"] | 법률 정보 검색 전문 |\n| MARKET_INQUIRY | ["search_team"] | 시세 데이터 조회 |\n| LOAN_CONSULT | ["search_team", "analysis_team"] | 대출 정보 조회 후 분석 |\n| CONTRACT_CREATION | ["document_team"] | 문서 생성 전문 |\n| CONTRACT_REVIEW | ["search_team", "analysis_team"] | 법률 검토 및 리스크 분석 |\n| COMPREHENSIVE | ["search_team", "analysis_team"] | 종합 정보 수집 및 분석 |\n| RISK_ANALYSIS | ["analysis_team"] | 리스크 평가 전문 |\n| UNCLEAR | ["search_team", "analysis_team"] | 포괄적 대응 |\n\n## 복합 질문 처리 예시\n\n### 예시 1: 순차적 처리\n질문: "강남구 시세 확인하고 투자 가치 분석해줘"\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "먼저 search_team이 시세 데이터를 수집하고, 그 결과를 analysis_team이 분석하여 투자 가치 평가"\n}\n```\n\n### 예시 2: 병렬 처리 가능\n질문: "법률 정보와 시세 정보 모두 알려줘"\n```json\n{\n    "selected_agents": ["search_team"],\n    "reasoning": "search_team이 법률과 시세 정보를 병렬로 조회 가능. 두 작업이 독립적이므로 동시 처리"\n}\n```\n\n### 예시 3: 3단계 파이프라인\n질문: "시세 조회하고 분석한 후 계약서 작성해줘"\n```json\n{\n    "selected_agents": ["search_team", "analysis_team", "document_team"],\n    "reasoning": "search_team이 데이터 수집 → analysis_team이 분석 → document_team이 분석 결과 기반 계약서 작성"\n}\n```\n\n## 응답 형식 (JSON)\n\n{\n    "selected_agents": ["선택된 agent/team 목록"],\n    "reasoning": "선택 이유를 구체적으로 설명. 각 Agent의 역할과 처리 순서 포함",\n    "coordination": "single/sequential/parallel/pipeline",\n    "dependencies": {"agent2": ["agent1"]},\n    "estimated_time": 30,\n    "confidence": 0.9\n}\n\n## 선택 가이드라인\n\n1. **최소 Agent 원칙**: 가능한 적은 수의 Agent로 처리\n2. **전문성 우선**: 해당 작업에 가장 전문적인 Agent 선택\n3. **효율성 고려**: 병렬 처리 가능한 경우 명시\n4. **의존성 관리**: 데이터 흐름을 고려한 순서 지정\n5. **폴백 전략**: 불확실한 경우 ["search_team", "analysis_team"] 조합\n\n## 주의사항\n\n- selected_agents는 반드시 배열 형태\n- Agent 이름은 정확히: "search_team", "analysis_team", "document_team"\n- 최소 1개, 최대 3개 선택\n- 순서는 실행 우선순위 (앞에 있을수록 먼저 실행)\n- reasoning은 상세하고 논리적으로 작성\n- coordination 필드로 실행 방식 명시\n- 복합 질문의 경우 의존성 관계 명확히 표시'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 14:43:43,184 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 14:43:43,184 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 14:43:43,185 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 14:43:43,185 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 14:43:43,185 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 14:43:43,185 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 14:43:45,550 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 05:43:45 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'2140'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'2177'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9891'), (b'x-ratelimit-remaining-tokens', b'198426'), (b'x-ratelimit-reset-requests', b'15m38.558s'), (b'x-ratelimit-reset-tokens', b'472ms'), (b'x-request-id', b'req_22453ba383b84777af27c9d3cdda25d2'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989a9a5ebebee9fb-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 14:43:45,550 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 14:43:45,550 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 14:43:45,550 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 14:43:45,551 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 14:43:45,551 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 14:43:45,551 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 05:43:45 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '2140', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '2177', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9891', 'x-ratelimit-remaining-tokens': '198426', 'x-ratelimit-reset-requests': '15m38.558s', 'x-ratelimit-reset-tokens': '472ms', 'x-request-id': 'req_22453ba383b84777af27c9d3cdda25d2', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989a9a5ebebee9fb-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 14:43:45,551 - openai._base_client - DEBUG - request_id: req_22453ba383b84777af27c9d3cdda25d2
2025-10-05 14:43:45,551 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: agent_selection | Model: gpt-4o-mini-2024-07-18 | Tokens: 1825 (prompt: 1709, completion: 116)
2025-10-05 14:43:45,551 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM agent selection reasoning: 사용자의 요청은 임대차보호법에 대한 정보 검색과 적용 가능 여부 판단을 포함하고 있습니다. search_team은 법률 정보 검색에 전문화되어 있어 임대차보호법의 내용을 정확히 찾아 제공할 수 있습니다. 이 작업은 독립적으로 수행 가능하므로 단일 팀으로 처리합니다.
2025-10-05 14:43:45,551 - app.service_agent.cognitive_agents.planning_agent - INFO - ✅ Primary LLM selected agents: ['search_team']
2025-10-05 14:43:45,551 - __main__ - INFO -   의도: 법률상담
2025-10-05 14:43:45,551 - __main__ - INFO -   신뢰도: 0.85
2025-10-05 14:43:45,551 - __main__ - INFO -   추천 Agent: ['search_team']
2025-10-05 14:43:45,551 - __main__ - INFO - 
[Step 2] Query Decomposition...
2025-10-05 14:43:45,551 - app.service_agent.cognitive_agents.query_decomposer - INFO - Decomposing query: 임대차보호법 내용 찾고 적용 가능 여부 판단해줘...
2025-10-05 14:43:45,551 - app.service_agent.cognitive_agents.query_decomposer - INFO - Query is simple, no decomposition needed
2025-10-05 14:43:45,551 - __main__ - INFO -   복합 질문: False
2025-10-05 14:43:45,551 - __main__ - INFO -   작업 수: 1
2025-10-05 14:43:45,551 - __main__ - INFO -   실행 모드: sequential
2025-10-05 14:43:45,551 - __main__ - INFO -     - task_0: 임대차보호법 내용 찾고 적용 가능 여부 판단해줘 (search_team)
2025-10-05 14:43:45,551 - __main__ - INFO - 
[Step 3] Comprehensive Plan 생성...
2025-10-05 14:43:45,551 - app.service_agent.cognitive_agents.planning_agent - INFO - Creating comprehensive plan for query: 임대차보호법 내용 찾고 적용 가능 여부 판단해줘...
2025-10-05 14:43:45,551 - app.service_agent.cognitive_agents.planning_agent - INFO - Analyzing intent for query: 임대차보호법 내용 찾고 적용 가능 여부 판단해줘...
2025-10-05 14:43:45,552 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-a39c8e05-7178-43d0-a15d-49cdb4f81246', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 의도 분석 전문가입니다.\n사용자의 질문을 정확히 이해하고, 어떤 종류의 도움이 필요한지 분류해야 합니다.\n\n## 중요: 복합 질문 처리\n복합적인 질문(여러 의도가 섞인 질문)의 경우, 가장 핵심적인 의도를 파악하되,\nsub_intents 필드에 부가적인 의도들도 함께 기록해주세요.\n\n## 분류 카테고리 설명:\n\n1. **LEGAL_CONSULT (법률상담)**\n   - 설명: 부동산 관련 법률, 권리, 의무에 대한 질문\n   - 예시:\n     * 단순: "전세금 5% 인상이 가능한가요?", "임대차계약 갱신 거부할 수 있나요?"\n     * 복합: "전세금 인상 가능한지 확인하고 법적 근거도 알려주세요"\n   - 키워드: 법, 전세, 임대, 보증금, 계약, 권리, 의무, 갱신, 임차인, 임대인, 법률, 규정, 조항\n   - 필요한 처리: 법률 데이터베이스 검색, 관련 법조항 찾기\n\n2. **MARKET_INQUIRY (시세조회)**\n   - 설명: 부동산 시장 가격, 시세, 거래 동향에 대한 질문\n   - 예시:\n     * 단순: "강남구 아파트 전세 시세 알려주세요", "서초동 매매가 얼마나 올랐나요?"\n     * 복합: "강남구 시세 확인하고 대출 가능 금액도 계산해줘"\n   - 키워드: 시세, 가격, 매매가, 전세가, 월세, 시장, 동향, 평균, 지역명, 상승률, 하락률\n   - 필요한 처리: 부동산 시세 데이터 조회, 지역별 가격 분석\n\n3. **LOAN_CONSULT (대출상담)**\n   - 설명: 주택담보대출, 전세자금대출 등 금융 관련 질문\n   - 예시:\n     * 단순: "전세자금대출 한도가 얼마인가요?", "LTV가 뭔가요?"\n     * 복합: "대출 한도 확인하고 금리 비교도 해주세요"\n   - 키워드: 대출, 금리, 한도, 조건, 상환, LTV, DTI, DSR, 담보, 금융, 은행\n   - 필요한 처리: 대출 상품 조회, 금리 정보 검색, 한도 계산\n\n4. **CONTRACT_CREATION (계약서작성)**\n   - 설명: 새로운 계약서나 문서를 작성해달라는 요청\n   - 예시:\n     * 단순: "임대차계약서 작성해주세요", "전세계약서 초안 만들어주세요"\n     * 복합: "계약서 작성하고 주의사항도 검토해주세요"\n   - 키워드: 작성, 만들, 생성, 초안, 계약서, 문서, 양식\n   - 필요한 처리: 문서 생성 에이전트 호출, 템플릿 기반 작성\n\n5. **CONTRACT_REVIEW (계약서검토)**\n   - 설명: 기존 계약서나 문서를 검토해달라는 요청\n   - 예시:\n     * 단순: "이 계약서 검토해주세요", "특약사항 문제없나요?"\n     * 복합: "계약서 검토하고 수정사항도 제안해주세요"\n   - 키워드: 검토, 확인, 점검, 리뷰, 분석해, 살펴봐, 체크\n   - 필요한 처리: 문서 분석, 위험 요소 식별, 개선사항 제안\n\n6. **COMPREHENSIVE (종합분석)**\n   - 설명: 여러 측면을 종합적으로 분석해달라는 요청\n   - 예시:\n     * 단순: "이 물건 전체적으로 분석해주세요"\n     * 복합: "시세, 법률, 대출 모두 검토해서 종합 의견 주세요"\n   - 키워드: 종합, 전체, 모든, 전반적, 종합적, 평가, 분석\n   - 필요한 처리: 다중 데이터 소스 통합 분석\n\n7. **RISK_ANALYSIS (리스크분석)**\n   - 설명: 위험 요소나 주의사항에 대한 질문\n   - 예시:\n     * 단순: "이 계약 위험한가요?", "주의할 점 알려주세요"\n     * 복합: "리스크 분석하고 대안도 제시해주세요"\n   - 키워드: 위험, 리스크, 주의, 문제점, 조심, 걱정, 우려\n   - 필요한 처리: 위험 요소 분석, 주의사항 추출\n\n8. **UNCLEAR (불분명)**\n   - 설명: 의도를 명확히 파악하기 어려운 질문\n   - 예시: "이거 좀 봐주세요", "어떻게 해야 할까요?", "도와주세요"\n   - 처리: 추가 질문으로 의도 명확화 필요\n\n9. **IRRELEVANT (무관)**\n   - 설명: 부동산과 전혀 관련 없는 질문\n   - 예시: "날씨 어때?", "저녁 뭐 먹지?", "주식 추천해줘"\n   - 처리: 부동산 관련 질문을 유도\n\n## 복합 질문 예시와 분석:\n\n### 예시 1: "강남구 아파트 시세 알려주고 전세자금대출 가능한지도 확인해줘"\n- 주 의도: MARKET_INQUIRY (시세 조회가 먼저 필요)\n- 부가 의도: LOAN_CONSULT (대출 확인)\n- 분해: ["강남구 아파트 시세 조회", "전세자금대출 가능 여부 확인"]\n\n### 예시 2: "이 계약서 검토해서 위험한 부분 있는지 알려주고 수정 제안도 해줘"\n- 주 의도: CONTRACT_REVIEW (계약서 검토)\n- 부가 의도: RISK_ANALYSIS (위험 분석)\n- 분해: ["계약서 전체 검토", "위험 요소 식별", "수정사항 제안"]\n\n### 예시 3: "서초동 전세가 확인하고 법적으로 문제없는지도 봐줘"\n- 주 의도: MARKET_INQUIRY (시세 확인)\n- 부가 의도: LEGAL_CONSULT (법적 검토)\n- 분해: ["서초동 전세가 조회", "법적 이슈 검토"]\n\n## 응답 형식 (JSON 형식으로 응답):\n\n{\n    "intent": "LEGAL_CONSULT",\n    "confidence": 0.9,\n    "keywords": ["전세금", "인상", "제한"],\n    "sub_intents": [],\n    "is_compound": false,\n    "decomposed_tasks": [],\n    "entities": {\n        "location": "강남구",\n        "price": "5억",\n        "contract_type": "전세",\n        "date": "2024년",\n        "area": "84㎡",\n        "action_verbs": ["확인", "검토"]\n    },\n    "reasoning": "전세금 인상에 대한 법률 질문이므로 LEGAL_CONSULT로 분류"\n}\n\n응답 규칙:\n- intent: 위 9개 카테고리 중 하나 (대문자_언더스코어 형식)\n- confidence: 0.0~1.0 (0.8 이상이면 매우 확실, 0.5 미만이면 불확실)\n- keywords: 추출된 주요 키워드 목록\n- sub_intents: 복합 질문일 경우 부가적인 의도들\n- is_compound: 복합 질문 여부 (true/false)\n- decomposed_tasks: 복합 질문을 분해한 개별 작업들\n- entities: 추출된 엔티티 정보\n- reasoning: 분류한 이유와 근거 (상세하게)\n\n## 판단 가이드:\n- 여러 의도가 섞여있다면, 가장 주된 의도를 intent에, 나머지를 sub_intents에 기록\n- "그리고", "또한", "함께", "같이" 등의 연결어가 있으면 복합 질문일 가능성 높음\n- 법률 관련 키워드가 있으면 LEGAL_CONSULT 우선\n- 가격/시세 언급이 명확하면 MARKET_INQUIRY\n- 계약서라는 단어와 함께 "작성/만들기"가 있으면 CONTRACT_CREATION\n- 계약서라는 단어와 함께 "검토/확인"이 있으면 CONTRACT_REVIEW\n- 불확실하면 confidence를 낮게 설정하고 UNCLEAR 선택\n- 복합 질문은 is_compound를 true로 설정하고 개별 작업으로 분해\n\n분석할 질문: 임대차보호법 내용 찾고 적용 가능 여부 판단해줘'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 14:43:45,552 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 14:43:45,552 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 14:43:45,553 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 14:43:45,553 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 14:43:45,553 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 14:43:45,553 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 14:43:47,528 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 05:43:47 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'1744'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'1767'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9890'), (b'x-ratelimit-remaining-tokens', b'198311'), (b'x-ratelimit-reset-requests', b'15m44.828s'), (b'x-ratelimit-reset-tokens', b'506ms'), (b'x-request-id', b'req_ae5436da78f449bc8f78b8aea20197b3'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989a9a6d8f8de9fb-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 14:43:47,528 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 14:43:47,528 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 14:43:47,528 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 14:43:47,528 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 14:43:47,528 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 14:43:47,529 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 05:43:47 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '1744', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '1767', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9890', 'x-ratelimit-remaining-tokens': '198311', 'x-ratelimit-reset-requests': '15m44.828s', 'x-ratelimit-reset-tokens': '506ms', 'x-request-id': 'req_ae5436da78f449bc8f78b8aea20197b3', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989a9a6d8f8de9fb-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 14:43:47,529 - openai._base_client - DEBUG - request_id: req_ae5436da78f449bc8f78b8aea20197b3
2025-10-05 14:43:47,529 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: intent_analysis | Model: gpt-4o-mini-2024-07-18 | Tokens: 2056 (prompt: 1925, completion: 131)
2025-10-05 14:43:47,529 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM Intent Analysis Result: {'intent': 'LEGAL_CONSULT', 'confidence': 0.85, 'keywords': ['임대차보호법', '적용', '가능 여부'], 'sub_intents': [], 'is_compound': False, 'decomposed_tasks': [], 'entities': {'law': '임대차보호법', 'action_verbs': ['찾고', '판단']}, 'reasoning': '임대차보호법에 대한 내용과 적용 가능 여부를 묻고 있으므로 LEGAL_CONSULT로 분류'}
2025-10-05 14:43:47,530 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-89dec83e-8e31-4f61-9028-99b33b3ac21e', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 Agent 선택 전문가입니다.\n사용자의 요청에 가장 적합한 Agent/Team을 선택하는 것이 목표입니다.\n\n## 현재 상황\n\n**사용자 질문:** 임대차보호법 내용 찾고 적용 가능 여부 판단해줘\n**분석된 의도:** 법률상담\n**추출된 키워드:** [\'임대차보호법\', \'적용\', \'가능 여부\']\n\n## 사용 가능한 Agent/Team 정보\n\n{\'search_team\': {\'name\': \'search_team\', \'capabilities\': \'법률 검색, 부동산 시세 조회, 대출 상품 검색\', \'tools\': [\'legal_search\', \'market_data\', \'loan_data\'], \'use_cases\': [\'법률 상담\', \'시세 조회\', \'대출 정보\']}, \'analysis_team\': {\'name\': \'analysis_team\', \'capabilities\': \'데이터 분석, 리스크 평가, 인사이트 생성, 추천\', \'tools\': [\'data_analyzer\', \'risk_evaluator\'], \'use_cases\': [\'시장 분석\', \'리스크 평가\', \'투자 분석\']}, \'document_team\': {\'name\': \'document_team\', \'capabilities\': \'계약서 작성, 문서 생성, 문서 검토\', \'tools\': [\'document_generator\', \'contract_reviewer\'], \'use_cases\': [\'계약서 작성\', \'문서 검토\']}}\n\n## Agent 역할 및 상세 가이드\n\n### 1. search_team (검색 팀)\n- **주요 기능**: 정보 검색 및 데이터 수집\n- **전문 분야**:\n  * 법률 정보 검색 (전세법, 임대차보호법, 부동산 관련 법규)\n  * 부동산 시세 조회 (매매가, 전세가, 월세, 실거래가)\n  * 대출 상품 정보 검색 (금리, 한도, 조건)\n  * 지역 정보 및 인프라 조회\n- **도구**: legal_search, market_data, loan_data\n- **적합한 작업**: 정보 조회, 데이터 수집, 법률 확인, 시세 파악\n- **예시**:\n  * "전세금 5% 인상 가능한가요?"\n  * "강남구 아파트 전세 시세"\n  * "전세자금대출 한도 얼마?"\n\n### 2. analysis_team (분석 팀)\n- **주요 기능**: 데이터 분석 및 평가\n- **전문 분야**:\n  * 시장 동향 분석 (상승률, 하락률, 추세)\n  * 리스크 평가 (계약, 투자 위험도)\n  * 투자 수익률 계산 (ROI, 월세 수익률)\n  * 대출 한도 및 조건 분석 (LTV, DTI, DSR)\n  * 비교 분석 (지역별, 상품별)\n- **도구**: data_analyzer, risk_evaluator, calculator\n- **적합한 작업**: 데이터 분석, 리스크 평가, 계산, 비교, 예측\n- **의존성**: 보통 search_team의 데이터가 필요\n- **예시**:\n  * "이 지역 투자 가치 분석해줘"\n  * "계약 리스크 평가해줘"\n  * "대출 가능 금액 계산해줘"\n\n### 3. document_team (문서 팀)\n- **주요 기능**: 문서 생성 및 관리\n- **전문 분야**:\n  * 계약서 작성 (임대차, 매매, 전세)\n  * 문서 템플릿 관리\n  * 특약사항 생성\n  * 계약서 수정안 작성\n  * 법률 문서 검토\n- **도구**: document_generator, contract_template, contract_reviewer\n- **적합한 작업**: 문서 작성, 계약서 생성, 문서 수정, 검토\n- **예시**:\n  * "임대차계약서 작성해줘"\n  * "특약사항 추가해줘"\n  * "계약서 수정안 만들어줘"\n\n## Agent 선택 전략\n\n### 1단계: 작업 유형 식별\n```\n정보 필요 → search_team\n분석/계산 필요 → analysis_team\n문서 작성 필요 → document_team\n```\n\n### 2단계: 의존성 분석\n```\n독립적 작업 → 단일 팀\n순차적 의존 → 여러 팀 (순서 중요)\n병렬 가능 → 여러 팀 (순서 무관)\n```\n\n### 3단계: 최적화\n```\n중복 제거 → 가장 적합한 팀만 선택\n효율성 → 병렬 처리 가능한 경우 표시\n```\n\n## 의도별 Agent 매핑 가이드\n\n| 의도 (Intent) | 추천 Agent 조합 | 이유 |\n|--------------|-----------------|------|\n| LEGAL_CONSULT | ["search_team"] | 법률 정보 검색 전문 |\n| MARKET_INQUIRY | ["search_team"] | 시세 데이터 조회 |\n| LOAN_CONSULT | ["search_team", "analysis_team"] | 대출 정보 조회 후 분석 |\n| CONTRACT_CREATION | ["document_team"] | 문서 생성 전문 |\n| CONTRACT_REVIEW | ["search_team", "analysis_team"] | 법률 검토 및 리스크 분석 |\n| COMPREHENSIVE | ["search_team", "analysis_team"] | 종합 정보 수집 및 분석 |\n| RISK_ANALYSIS | ["analysis_team"] | 리스크 평가 전문 |\n| UNCLEAR | ["search_team", "analysis_team"] | 포괄적 대응 |\n\n## 복합 질문 처리 예시\n\n### 예시 1: 순차적 처리\n질문: "강남구 시세 확인하고 투자 가치 분석해줘"\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "먼저 search_team이 시세 데이터를 수집하고, 그 결과를 analysis_team이 분석하여 투자 가치 평가"\n}\n```\n\n### 예시 2: 병렬 처리 가능\n질문: "법률 정보와 시세 정보 모두 알려줘"\n```json\n{\n    "selected_agents": ["search_team"],\n    "reasoning": "search_team이 법률과 시세 정보를 병렬로 조회 가능. 두 작업이 독립적이므로 동시 처리"\n}\n```\n\n### 예시 3: 3단계 파이프라인\n질문: "시세 조회하고 분석한 후 계약서 작성해줘"\n```json\n{\n    "selected_agents": ["search_team", "analysis_team", "document_team"],\n    "reasoning": "search_team이 데이터 수집 → analysis_team이 분석 → document_team이 분석 결과 기반 계약서 작성"\n}\n```\n\n## 응답 형식 (JSON)\n\n{\n    "selected_agents": ["선택된 agent/team 목록"],\n    "reasoning": "선택 이유를 구체적으로 설명. 각 Agent의 역할과 처리 순서 포함",\n    "coordination": "single/sequential/parallel/pipeline",\n    "dependencies": {"agent2": ["agent1"]},\n    "estimated_time": 30,\n    "confidence": 0.9\n}\n\n## 선택 가이드라인\n\n1. **최소 Agent 원칙**: 가능한 적은 수의 Agent로 처리\n2. **전문성 우선**: 해당 작업에 가장 전문적인 Agent 선택\n3. **효율성 고려**: 병렬 처리 가능한 경우 명시\n4. **의존성 관리**: 데이터 흐름을 고려한 순서 지정\n5. **폴백 전략**: 불확실한 경우 ["search_team", "analysis_team"] 조합\n\n## 주의사항\n\n- selected_agents는 반드시 배열 형태\n- Agent 이름은 정확히: "search_team", "analysis_team", "document_team"\n- 최소 1개, 최대 3개 선택\n- 순서는 실행 우선순위 (앞에 있을수록 먼저 실행)\n- reasoning은 상세하고 논리적으로 작성\n- coordination 필드로 실행 방식 명시\n- 복합 질문의 경우 의존성 관계 명확히 표시'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 14:43:47,531 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 14:43:47,531 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 14:43:47,531 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 14:43:47,531 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 14:43:47,531 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 14:43:47,531 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 14:43:50,072 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 05:43:50 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'2333'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'2351'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9889'), (b'x-ratelimit-remaining-tokens', b'198426'), (b'x-ratelimit-reset-requests', b'15m51.497s'), (b'x-ratelimit-reset-tokens', b'472ms'), (b'x-request-id', b'req_b63f6b7b04244b9c8fae48ff7819ff2a'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989a9a79e97ee9fb-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 14:43:50,073 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 14:43:50,074 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 14:43:50,074 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 14:43:50,074 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 14:43:50,074 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 14:43:50,074 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 05:43:50 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '2333', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '2351', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9889', 'x-ratelimit-remaining-tokens': '198426', 'x-ratelimit-reset-requests': '15m51.497s', 'x-ratelimit-reset-tokens': '472ms', 'x-request-id': 'req_b63f6b7b04244b9c8fae48ff7819ff2a', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989a9a79e97ee9fb-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 14:43:50,074 - openai._base_client - DEBUG - request_id: req_b63f6b7b04244b9c8fae48ff7819ff2a
2025-10-05 14:43:50,075 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: agent_selection | Model: gpt-4o-mini-2024-07-18 | Tokens: 1825 (prompt: 1709, completion: 116)
2025-10-05 14:43:50,075 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM agent selection reasoning: 사용자의 요청은 임대차보호법에 대한 정보 검색과 적용 가능 여부 판단을 포함하고 있습니다. search_team은 법률 정보 검색에 전문화되어 있어 임대차보호법의 내용을 정확히 찾아 제공할 수 있습니다. 이 작업은 독립적으로 수행 가능하므로 단일 팀으로 처리합니다.
2025-10-05 14:43:50,075 - app.service_agent.cognitive_agents.planning_agent - INFO - ✅ Primary LLM selected agents: ['search_team']
2025-10-05 14:43:50,075 - app.service_agent.cognitive_agents.planning_agent - INFO - Intent analyzed: 법률상담 (confidence: 0.85)
2025-10-05 14:43:50,075 - app.service_agent.cognitive_agents.query_decomposer - INFO - Decomposing query: 임대차보호법 내용 찾고 적용 가능 여부 판단해줘...
2025-10-05 14:43:50,075 - app.service_agent.cognitive_agents.query_decomposer - INFO - Query is simple, no decomposition needed
2025-10-05 14:43:50,075 - app.service_agent.cognitive_agents.planning_agent - INFO - Query decomposed into 1 tasks
2025-10-05 14:43:50,075 - app.service_agent.cognitive_agents.planning_agent - INFO - Creating execution plan for intent: 법률상담
2025-10-05 14:43:50,075 - app.service_agent.cognitive_agents.planning_agent - WARNING - AgentRegistry is empty, using default teams
2025-10-05 14:43:50,075 - app.service_agent.cognitive_agents.planning_agent - DEBUG - Suggested agents: ['search_team']
2025-10-05 14:43:50,075 - app.service_agent.cognitive_agents.planning_agent - DEBUG - Available agents: ['search_team', 'analysis_team', 'document_team']
2025-10-05 14:43:50,075 - app.service_agent.cognitive_agents.planning_agent - INFO - Selected agents/teams for execution: ['search_team']
2025-10-05 14:43:50,075 - app.service_agent.cognitive_agents.planning_agent - WARNING - Plan validation errors: ["Agent 'search_team' not found in registry"]
2025-10-05 14:43:50,075 - app.service_agent.cognitive_agents.planning_agent - INFO - Optimizing execution plan
2025-10-05 14:43:50,075 - app.service_agent.cognitive_agents.planning_agent - INFO - Comprehensive plan created: Intent: 법률상담 (confidence: 0.85) | Strategy: sequential | Agents: search_team | Estimated time: 30.0s
2025-10-05 14:43:50,075 - __main__ - INFO -   전략: sequential
2025-10-05 14:43:50,075 - __main__ - INFO -   단계 수: 1
2025-10-05 14:43:50,075 - __main__ - INFO - 
✓ 테스트 성공 (소요시간: 9.07초)
2025-10-05 14:43:50,075 - __main__ - INFO - 
================================================================================
2025-10-05 14:43:50,075 - __main__ - INFO - [30] 복합 질문 테스트: D010
2025-10-05 14:43:50,075 - __main__ - INFO - 질문: 용산구 매매 시세 조회하고 전세 전환 계산해줘
2025-10-05 14:43:50,075 - __main__ - INFO - ================================================================================
2025-10-05 14:43:50,075 - __main__ - INFO - 
[Step 1] Intent 분석...
2025-10-05 14:43:50,075 - app.service_agent.cognitive_agents.planning_agent - INFO - Analyzing intent for query: 용산구 매매 시세 조회하고 전세 전환 계산해줘...
2025-10-05 14:43:50,076 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-8c987147-5c92-4ecf-a9cf-c9dd518ab888', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 의도 분석 전문가입니다.\n사용자의 질문을 정확히 이해하고, 어떤 종류의 도움이 필요한지 분류해야 합니다.\n\n## 중요: 복합 질문 처리\n복합적인 질문(여러 의도가 섞인 질문)의 경우, 가장 핵심적인 의도를 파악하되,\nsub_intents 필드에 부가적인 의도들도 함께 기록해주세요.\n\n## 분류 카테고리 설명:\n\n1. **LEGAL_CONSULT (법률상담)**\n   - 설명: 부동산 관련 법률, 권리, 의무에 대한 질문\n   - 예시:\n     * 단순: "전세금 5% 인상이 가능한가요?", "임대차계약 갱신 거부할 수 있나요?"\n     * 복합: "전세금 인상 가능한지 확인하고 법적 근거도 알려주세요"\n   - 키워드: 법, 전세, 임대, 보증금, 계약, 권리, 의무, 갱신, 임차인, 임대인, 법률, 규정, 조항\n   - 필요한 처리: 법률 데이터베이스 검색, 관련 법조항 찾기\n\n2. **MARKET_INQUIRY (시세조회)**\n   - 설명: 부동산 시장 가격, 시세, 거래 동향에 대한 질문\n   - 예시:\n     * 단순: "강남구 아파트 전세 시세 알려주세요", "서초동 매매가 얼마나 올랐나요?"\n     * 복합: "강남구 시세 확인하고 대출 가능 금액도 계산해줘"\n   - 키워드: 시세, 가격, 매매가, 전세가, 월세, 시장, 동향, 평균, 지역명, 상승률, 하락률\n   - 필요한 처리: 부동산 시세 데이터 조회, 지역별 가격 분석\n\n3. **LOAN_CONSULT (대출상담)**\n   - 설명: 주택담보대출, 전세자금대출 등 금융 관련 질문\n   - 예시:\n     * 단순: "전세자금대출 한도가 얼마인가요?", "LTV가 뭔가요?"\n     * 복합: "대출 한도 확인하고 금리 비교도 해주세요"\n   - 키워드: 대출, 금리, 한도, 조건, 상환, LTV, DTI, DSR, 담보, 금융, 은행\n   - 필요한 처리: 대출 상품 조회, 금리 정보 검색, 한도 계산\n\n4. **CONTRACT_CREATION (계약서작성)**\n   - 설명: 새로운 계약서나 문서를 작성해달라는 요청\n   - 예시:\n     * 단순: "임대차계약서 작성해주세요", "전세계약서 초안 만들어주세요"\n     * 복합: "계약서 작성하고 주의사항도 검토해주세요"\n   - 키워드: 작성, 만들, 생성, 초안, 계약서, 문서, 양식\n   - 필요한 처리: 문서 생성 에이전트 호출, 템플릿 기반 작성\n\n5. **CONTRACT_REVIEW (계약서검토)**\n   - 설명: 기존 계약서나 문서를 검토해달라는 요청\n   - 예시:\n     * 단순: "이 계약서 검토해주세요", "특약사항 문제없나요?"\n     * 복합: "계약서 검토하고 수정사항도 제안해주세요"\n   - 키워드: 검토, 확인, 점검, 리뷰, 분석해, 살펴봐, 체크\n   - 필요한 처리: 문서 분석, 위험 요소 식별, 개선사항 제안\n\n6. **COMPREHENSIVE (종합분석)**\n   - 설명: 여러 측면을 종합적으로 분석해달라는 요청\n   - 예시:\n     * 단순: "이 물건 전체적으로 분석해주세요"\n     * 복합: "시세, 법률, 대출 모두 검토해서 종합 의견 주세요"\n   - 키워드: 종합, 전체, 모든, 전반적, 종합적, 평가, 분석\n   - 필요한 처리: 다중 데이터 소스 통합 분석\n\n7. **RISK_ANALYSIS (리스크분석)**\n   - 설명: 위험 요소나 주의사항에 대한 질문\n   - 예시:\n     * 단순: "이 계약 위험한가요?", "주의할 점 알려주세요"\n     * 복합: "리스크 분석하고 대안도 제시해주세요"\n   - 키워드: 위험, 리스크, 주의, 문제점, 조심, 걱정, 우려\n   - 필요한 처리: 위험 요소 분석, 주의사항 추출\n\n8. **UNCLEAR (불분명)**\n   - 설명: 의도를 명확히 파악하기 어려운 질문\n   - 예시: "이거 좀 봐주세요", "어떻게 해야 할까요?", "도와주세요"\n   - 처리: 추가 질문으로 의도 명확화 필요\n\n9. **IRRELEVANT (무관)**\n   - 설명: 부동산과 전혀 관련 없는 질문\n   - 예시: "날씨 어때?", "저녁 뭐 먹지?", "주식 추천해줘"\n   - 처리: 부동산 관련 질문을 유도\n\n## 복합 질문 예시와 분석:\n\n### 예시 1: "강남구 아파트 시세 알려주고 전세자금대출 가능한지도 확인해줘"\n- 주 의도: MARKET_INQUIRY (시세 조회가 먼저 필요)\n- 부가 의도: LOAN_CONSULT (대출 확인)\n- 분해: ["강남구 아파트 시세 조회", "전세자금대출 가능 여부 확인"]\n\n### 예시 2: "이 계약서 검토해서 위험한 부분 있는지 알려주고 수정 제안도 해줘"\n- 주 의도: CONTRACT_REVIEW (계약서 검토)\n- 부가 의도: RISK_ANALYSIS (위험 분석)\n- 분해: ["계약서 전체 검토", "위험 요소 식별", "수정사항 제안"]\n\n### 예시 3: "서초동 전세가 확인하고 법적으로 문제없는지도 봐줘"\n- 주 의도: MARKET_INQUIRY (시세 확인)\n- 부가 의도: LEGAL_CONSULT (법적 검토)\n- 분해: ["서초동 전세가 조회", "법적 이슈 검토"]\n\n## 응답 형식 (JSON 형식으로 응답):\n\n{\n    "intent": "LEGAL_CONSULT",\n    "confidence": 0.9,\n    "keywords": ["전세금", "인상", "제한"],\n    "sub_intents": [],\n    "is_compound": false,\n    "decomposed_tasks": [],\n    "entities": {\n        "location": "강남구",\n        "price": "5억",\n        "contract_type": "전세",\n        "date": "2024년",\n        "area": "84㎡",\n        "action_verbs": ["확인", "검토"]\n    },\n    "reasoning": "전세금 인상에 대한 법률 질문이므로 LEGAL_CONSULT로 분류"\n}\n\n응답 규칙:\n- intent: 위 9개 카테고리 중 하나 (대문자_언더스코어 형식)\n- confidence: 0.0~1.0 (0.8 이상이면 매우 확실, 0.5 미만이면 불확실)\n- keywords: 추출된 주요 키워드 목록\n- sub_intents: 복합 질문일 경우 부가적인 의도들\n- is_compound: 복합 질문 여부 (true/false)\n- decomposed_tasks: 복합 질문을 분해한 개별 작업들\n- entities: 추출된 엔티티 정보\n- reasoning: 분류한 이유와 근거 (상세하게)\n\n## 판단 가이드:\n- 여러 의도가 섞여있다면, 가장 주된 의도를 intent에, 나머지를 sub_intents에 기록\n- "그리고", "또한", "함께", "같이" 등의 연결어가 있으면 복합 질문일 가능성 높음\n- 법률 관련 키워드가 있으면 LEGAL_CONSULT 우선\n- 가격/시세 언급이 명확하면 MARKET_INQUIRY\n- 계약서라는 단어와 함께 "작성/만들기"가 있으면 CONTRACT_CREATION\n- 계약서라는 단어와 함께 "검토/확인"이 있으면 CONTRACT_REVIEW\n- 불확실하면 confidence를 낮게 설정하고 UNCLEAR 선택\n- 복합 질문은 is_compound를 true로 설정하고 개별 작업으로 분해\n\n분석할 질문: 용산구 매매 시세 조회하고 전세 전환 계산해줘'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 14:43:50,076 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 14:43:50,076 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 14:43:50,077 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 14:43:50,077 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 14:43:50,077 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 14:43:50,077 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 14:43:52,524 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 05:43:52 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'2224'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'2243'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9889'), (b'x-ratelimit-remaining-tokens', b'198312'), (b'x-ratelimit-reset-requests', b'15m57.567s'), (b'x-ratelimit-reset-tokens', b'506ms'), (b'x-request-id', b'req_d2dc7aa830814fbebbb0bcc6bcf12bc8'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989a9a89cd01e9fb-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 14:43:52,524 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 14:43:52,524 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 14:43:52,531 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 14:43:52,531 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 14:43:52,531 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 14:43:52,531 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 05:43:52 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '2224', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '2243', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9889', 'x-ratelimit-remaining-tokens': '198312', 'x-ratelimit-reset-requests': '15m57.567s', 'x-ratelimit-reset-tokens': '506ms', 'x-request-id': 'req_d2dc7aa830814fbebbb0bcc6bcf12bc8', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989a9a89cd01e9fb-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 14:43:52,531 - openai._base_client - DEBUG - request_id: req_d2dc7aa830814fbebbb0bcc6bcf12bc8
2025-10-05 14:43:52,531 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: intent_analysis | Model: gpt-4o-mini-2024-07-18 | Tokens: 2091 (prompt: 1926, completion: 165)
2025-10-05 14:43:52,531 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM Intent Analysis Result: {'intent': 'MARKET_INQUIRY', 'confidence': 0.85, 'keywords': ['용산구', '매매', '시세', '전세', '전환', '계산'], 'sub_intents': ['LOAN_CONSULT'], 'is_compound': True, 'decomposed_tasks': ['용산구 매매 시세 조회', '전세 전환 계산'], 'entities': {'location': '용산구', 'action_verbs': ['조회', '계산']}, 'reasoning': '매매 시세 조회가 주된 의도이며, 전세 전환 계산이 부가적인 의도로 포함되어 있어 MARKET_INQUIRY로 분류'}
2025-10-05 14:43:52,531 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-0da4ccc6-c294-4cea-ba97-8e4623a27bdb', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 Agent 선택 전문가입니다.\n사용자의 요청에 가장 적합한 Agent/Team을 선택하는 것이 목표입니다.\n\n## 현재 상황\n\n**사용자 질문:** 용산구 매매 시세 조회하고 전세 전환 계산해줘\n**분석된 의도:** 시세조회\n**추출된 키워드:** [\'용산구\', \'매매\', \'시세\', \'전세\', \'전환\', \'계산\']\n\n## 사용 가능한 Agent/Team 정보\n\n{\'search_team\': {\'name\': \'search_team\', \'capabilities\': \'법률 검색, 부동산 시세 조회, 대출 상품 검색\', \'tools\': [\'legal_search\', \'market_data\', \'loan_data\'], \'use_cases\': [\'법률 상담\', \'시세 조회\', \'대출 정보\']}, \'analysis_team\': {\'name\': \'analysis_team\', \'capabilities\': \'데이터 분석, 리스크 평가, 인사이트 생성, 추천\', \'tools\': [\'data_analyzer\', \'risk_evaluator\'], \'use_cases\': [\'시장 분석\', \'리스크 평가\', \'투자 분석\']}, \'document_team\': {\'name\': \'document_team\', \'capabilities\': \'계약서 작성, 문서 생성, 문서 검토\', \'tools\': [\'document_generator\', \'contract_reviewer\'], \'use_cases\': [\'계약서 작성\', \'문서 검토\']}}\n\n## Agent 역할 및 상세 가이드\n\n### 1. search_team (검색 팀)\n- **주요 기능**: 정보 검색 및 데이터 수집\n- **전문 분야**:\n  * 법률 정보 검색 (전세법, 임대차보호법, 부동산 관련 법규)\n  * 부동산 시세 조회 (매매가, 전세가, 월세, 실거래가)\n  * 대출 상품 정보 검색 (금리, 한도, 조건)\n  * 지역 정보 및 인프라 조회\n- **도구**: legal_search, market_data, loan_data\n- **적합한 작업**: 정보 조회, 데이터 수집, 법률 확인, 시세 파악\n- **예시**:\n  * "전세금 5% 인상 가능한가요?"\n  * "강남구 아파트 전세 시세"\n  * "전세자금대출 한도 얼마?"\n\n### 2. analysis_team (분석 팀)\n- **주요 기능**: 데이터 분석 및 평가\n- **전문 분야**:\n  * 시장 동향 분석 (상승률, 하락률, 추세)\n  * 리스크 평가 (계약, 투자 위험도)\n  * 투자 수익률 계산 (ROI, 월세 수익률)\n  * 대출 한도 및 조건 분석 (LTV, DTI, DSR)\n  * 비교 분석 (지역별, 상품별)\n- **도구**: data_analyzer, risk_evaluator, calculator\n- **적합한 작업**: 데이터 분석, 리스크 평가, 계산, 비교, 예측\n- **의존성**: 보통 search_team의 데이터가 필요\n- **예시**:\n  * "이 지역 투자 가치 분석해줘"\n  * "계약 리스크 평가해줘"\n  * "대출 가능 금액 계산해줘"\n\n### 3. document_team (문서 팀)\n- **주요 기능**: 문서 생성 및 관리\n- **전문 분야**:\n  * 계약서 작성 (임대차, 매매, 전세)\n  * 문서 템플릿 관리\n  * 특약사항 생성\n  * 계약서 수정안 작성\n  * 법률 문서 검토\n- **도구**: document_generator, contract_template, contract_reviewer\n- **적합한 작업**: 문서 작성, 계약서 생성, 문서 수정, 검토\n- **예시**:\n  * "임대차계약서 작성해줘"\n  * "특약사항 추가해줘"\n  * "계약서 수정안 만들어줘"\n\n## Agent 선택 전략\n\n### 1단계: 작업 유형 식별\n```\n정보 필요 → search_team\n분석/계산 필요 → analysis_team\n문서 작성 필요 → document_team\n```\n\n### 2단계: 의존성 분석\n```\n독립적 작업 → 단일 팀\n순차적 의존 → 여러 팀 (순서 중요)\n병렬 가능 → 여러 팀 (순서 무관)\n```\n\n### 3단계: 최적화\n```\n중복 제거 → 가장 적합한 팀만 선택\n효율성 → 병렬 처리 가능한 경우 표시\n```\n\n## 의도별 Agent 매핑 가이드\n\n| 의도 (Intent) | 추천 Agent 조합 | 이유 |\n|--------------|-----------------|------|\n| LEGAL_CONSULT | ["search_team"] | 법률 정보 검색 전문 |\n| MARKET_INQUIRY | ["search_team"] | 시세 데이터 조회 |\n| LOAN_CONSULT | ["search_team", "analysis_team"] | 대출 정보 조회 후 분석 |\n| CONTRACT_CREATION | ["document_team"] | 문서 생성 전문 |\n| CONTRACT_REVIEW | ["search_team", "analysis_team"] | 법률 검토 및 리스크 분석 |\n| COMPREHENSIVE | ["search_team", "analysis_team"] | 종합 정보 수집 및 분석 |\n| RISK_ANALYSIS | ["analysis_team"] | 리스크 평가 전문 |\n| UNCLEAR | ["search_team", "analysis_team"] | 포괄적 대응 |\n\n## 복합 질문 처리 예시\n\n### 예시 1: 순차적 처리\n질문: "강남구 시세 확인하고 투자 가치 분석해줘"\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "먼저 search_team이 시세 데이터를 수집하고, 그 결과를 analysis_team이 분석하여 투자 가치 평가"\n}\n```\n\n### 예시 2: 병렬 처리 가능\n질문: "법률 정보와 시세 정보 모두 알려줘"\n```json\n{\n    "selected_agents": ["search_team"],\n    "reasoning": "search_team이 법률과 시세 정보를 병렬로 조회 가능. 두 작업이 독립적이므로 동시 처리"\n}\n```\n\n### 예시 3: 3단계 파이프라인\n질문: "시세 조회하고 분석한 후 계약서 작성해줘"\n```json\n{\n    "selected_agents": ["search_team", "analysis_team", "document_team"],\n    "reasoning": "search_team이 데이터 수집 → analysis_team이 분석 → document_team이 분석 결과 기반 계약서 작성"\n}\n```\n\n## 응답 형식 (JSON)\n\n{\n    "selected_agents": ["선택된 agent/team 목록"],\n    "reasoning": "선택 이유를 구체적으로 설명. 각 Agent의 역할과 처리 순서 포함",\n    "coordination": "single/sequential/parallel/pipeline",\n    "dependencies": {"agent2": ["agent1"]},\n    "estimated_time": 30,\n    "confidence": 0.9\n}\n\n## 선택 가이드라인\n\n1. **최소 Agent 원칙**: 가능한 적은 수의 Agent로 처리\n2. **전문성 우선**: 해당 작업에 가장 전문적인 Agent 선택\n3. **효율성 고려**: 병렬 처리 가능한 경우 명시\n4. **의존성 관리**: 데이터 흐름을 고려한 순서 지정\n5. **폴백 전략**: 불확실한 경우 ["search_team", "analysis_team"] 조합\n\n## 주의사항\n\n- selected_agents는 반드시 배열 형태\n- Agent 이름은 정확히: "search_team", "analysis_team", "document_team"\n- 최소 1개, 최대 3개 선택\n- 순서는 실행 우선순위 (앞에 있을수록 먼저 실행)\n- reasoning은 상세하고 논리적으로 작성\n- coordination 필드로 실행 방식 명시\n- 복합 질문의 경우 의존성 관계 명확히 표시'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 14:43:52,533 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 14:43:52,533 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 14:43:52,533 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 14:43:52,533 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 14:43:52,533 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 14:43:52,533 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 14:43:55,258 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 05:43:55 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'2517'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'2538'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9888'), (b'x-ratelimit-remaining-tokens', b'198423'), (b'x-ratelimit-reset-requests', b'16m3.768s'), (b'x-ratelimit-reset-tokens', b'473ms'), (b'x-request-id', b'req_7c5297179c3d4becb908f641b266f1c2'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989a9a992824e9fb-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 14:43:55,258 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 14:43:55,258 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 14:43:55,264 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 14:43:55,264 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 14:43:55,265 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 14:43:55,265 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 05:43:55 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '2517', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '2538', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9888', 'x-ratelimit-remaining-tokens': '198423', 'x-ratelimit-reset-requests': '16m3.768s', 'x-ratelimit-reset-tokens': '473ms', 'x-request-id': 'req_7c5297179c3d4becb908f641b266f1c2', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989a9a992824e9fb-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 14:43:55,265 - openai._base_client - DEBUG - request_id: req_7c5297179c3d4becb908f641b266f1c2
2025-10-05 14:43:55,265 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: agent_selection | Model: gpt-4o-mini-2024-07-18 | Tokens: 1838 (prompt: 1718, completion: 120)
2025-10-05 14:43:55,265 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM agent selection reasoning: 사용자가 용산구의 매매 시세를 조회하고 전세 전환 계산을 요청했으므로, 먼저 search_team이 용산구의 매매 시세 데이터를 수집하고, 그 결과를 바탕으로 analysis_team이 전세 전환 계산을 수행해야 합니다.
2025-10-05 14:43:55,266 - app.service_agent.cognitive_agents.planning_agent - INFO - ✅ Primary LLM selected agents: ['search_team', 'analysis_team']
2025-10-05 14:43:55,266 - __main__ - INFO -   의도: 시세조회
2025-10-05 14:43:55,266 - __main__ - INFO -   신뢰도: 0.85
2025-10-05 14:43:55,266 - __main__ - INFO -   추천 Agent: ['search_team', 'analysis_team']
2025-10-05 14:43:55,266 - __main__ - INFO - 
[Step 2] Query Decomposition...
2025-10-05 14:43:55,266 - app.service_agent.cognitive_agents.query_decomposer - INFO - Decomposing query: 용산구 매매 시세 조회하고 전세 전환 계산해줘...
2025-10-05 14:43:55,266 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-2c4d87ef-0361-426d-a299-b3eba00d8f5e', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 질문 분해 전문가입니다.\n복잡한 사용자 질문을 독립적으로 처리 가능한 작업 단위로 분해하는 것이 목표입니다.\n\n## 중요 원칙:\n1. 각 작업은 하나의 명확한 목표를 가져야 합니다\n2. 작업 간 의존성을 명확히 파악해야 합니다\n3. 병렬 처리 가능한 작업은 구분해야 합니다\n4. 불필요한 분해는 피해야 합니다 (단순 질문은 분해하지 않음)\n\n## 작업 유형 (type):\n- search: 정보 검색 (법률, 시세, 대출 정보 등)\n- analysis: 데이터 분석 (리스크 평가, 시장 분석 등)\n- generation: 문서 생성 (계약서 작성 등)\n- review: 검토/평가 (계약서 검토, 조건 확인 등)\n- calculation: 계산/산출 (대출 한도, 세금 등)\n- comparison: 비교 분석 (여러 옵션 비교)\n\n## 담당 팀 (agent):\n- search_team: 법률, 시세, 대출 정보 검색\n- analysis_team: 데이터 분석, 리스크 평가, 계산\n- document_team: 문서 생성, 계약서 작성\n\n## 학습 예시:\n\n### 예시 1: 복합 질문 (순차적)\n질문: "강남구 아파트 시세 확인하고 대출 가능 금액 계산해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "강남구 아파트 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "대출 가능 금액 계산",\n            "type": "calculation",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "required_data": {"price": "task_0.result.price"},\n            "estimated_time": 15\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "시세 정보가 있어야 대출 금액 계산이 가능하므로 순차 실행"\n}\n```\n\n### 예시 2: 복합 질문 (병렬 가능)\n질문: "이 지역 전세 시세와 매매 시세 모두 알려주고 비교 분석해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "전세 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "매매 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "전세/매매 시세 비교 분석",\n            "type": "comparison",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0", "task_1"],\n            "required_data": {\n                "lease_price": "task_0.result",\n                "sale_price": "task_1.result"\n            },\n            "estimated_time": 25\n        }\n    ],\n    "execution_mode": "mixed",\n    "parallel_groups": [["task_0", "task_1"], ["task_2"]],\n    "reasoning": "시세 조회는 독립적이므로 병렬 처리, 비교는 두 결과 필요"\n}\n```\n\n### 예시 3: 복합 질문 (3단계 이상)\n질문: "이 계약서 검토해서 위험한 부분 찾고 수정안 만들어서 최종 계약서 작성해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "계약서 내용 전체 검토",\n            "type": "review",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 30\n        },\n        {\n            "description": "위험 요소 및 문제점 분석",\n            "type": "analysis",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "estimated_time": 25\n        },\n        {\n            "description": "수정안 제안 생성",\n            "type": "generation",\n            "agent": "document_team",\n            "priority": 3,\n            "depends_on": ["task_1"],\n            "estimated_time": 20\n        },\n        {\n            "description": "최종 계약서 작성",\n            "type": "generation",\n            "agent": "document_team",\n            "priority": 4,\n            "depends_on": ["task_2"],\n            "estimated_time": 30\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "각 단계가 이전 결과에 의존하므로 순차 실행 필요"\n}\n```\n\n### 예시 4: 단순 질문 (분해 불필요)\n질문: "전세금 인상률 상한이 얼마야?"\n분해:\n```json\n{\n    "is_compound": false,\n    "sub_tasks": [\n        {\n            "description": "전세금 인상률 상한 법률 정보 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 15\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "단일 정보 조회 요청으로 분해 불필요"\n}\n```\n\n### 예시 5: 조건부 실행\n질문: "이 물건 시세 확인하고 적정가면 대출 상담도 받고 싶어"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "물건 시세 조회 및 적정성 평가",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 25\n        },\n        {\n            "description": "대출 상담 정보 제공",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "optional": true,\n            "context": {"condition": "if_reasonable_price"},\n            "estimated_time": 20\n        }\n    ],\n    "execution_mode": "conditional",\n    "reasoning": "시세 확인 결과에 따라 대출 상담 진행 여부 결정"\n}\n```\n\n## Chain-of-Thought 프로세스:\n\n1. **질문 분석**: 어떤 정보나 작업을 요구하는가?\n2. **연결어 확인**: "그리고", "또한", "해서", "한 후" 등이 있는가?\n3. **의존성 파악**: 어떤 작업이 다른 작업의 결과를 필요로 하는가?\n4. **병렬성 판단**: 독립적으로 실행 가능한 작업이 있는가?\n5. **최적화**: 불필요한 분해는 없는가?\n\n## 응답 형식 (JSON):\n\n{\n    "is_compound": true/false,\n    "sub_tasks": [\n        {\n            "description": "작업 설명",\n            "type": "작업 유형",\n            "agent": "담당 팀",\n            "priority": 우선순위 (1이 가장 높음),\n            "depends_on": ["선행 작업 ID 리스트"],\n            "required_data": {"필요한 데이터 매핑"},\n            "estimated_time": 예상 소요 시간(초),\n            "optional": true/false,\n            "context": {"추가 컨텍스트"}\n        }\n    ],\n    "execution_mode": "sequential/parallel/mixed/conditional",\n    "parallel_groups": [["병렬 실행 가능한 작업 ID 그룹"]],\n    "confidence": 0.0-1.0,\n    "reasoning": "분해 결정의 이유와 근거"\n}\n\n## 분해 가이드라인:\n\n1. **분해가 필요한 경우**:\n   - 여러 종류의 정보를 요청하는 경우\n   - 순차적 처리가 필요한 경우 (A의 결과로 B 수행)\n   - 서로 다른 팀의 전문성이 필요한 경우\n\n2. **분해가 불필요한 경우**:\n   - 단일 정보 조회\n   - 단순한 질문-답변\n   - 하나의 팀에서 완전히 처리 가능한 경우\n\n3. **병렬 처리 기준**:\n   - 서로 독립적인 정보 조회\n   - 의존성이 없는 분석 작업\n   - 동시에 진행해도 충돌하지 않는 작업\n\n4. **우선순위 설정**:\n   - 의존성이 없는 작업: priority 1\n   - 1차 의존 작업: priority 2\n   - 2차 의존 작업: priority 3\n   - 이런 식으로 증가\n\n현재 의도: 시세조회\n추출된 엔티티: None\n\n분석할 질문: 용산구 매매 시세 조회하고 전세 전환 계산해줘'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 14:43:55,267 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 14:43:55,267 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 14:43:55,267 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 14:43:55,267 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 14:43:55,267 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 14:43:55,267 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 14:43:58,519 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 05:43:58 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'2922'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'2934'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9887'), (b'x-ratelimit-remaining-tokens', b'197996'), (b'x-ratelimit-reset-requests', b'16m9.558s'), (b'x-ratelimit-reset-tokens', b'601ms'), (b'x-request-id', b'req_5b4b52784ce7454caa56f7a4d026dc6e'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989a9aaa4f1fe9fb-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 14:43:58,519 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 14:43:58,519 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 14:43:58,519 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 14:43:58,519 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 14:43:58,519 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 14:43:58,520 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 05:43:58 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '2922', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '2934', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9887', 'x-ratelimit-remaining-tokens': '197996', 'x-ratelimit-reset-requests': '16m9.558s', 'x-ratelimit-reset-tokens': '601ms', 'x-request-id': 'req_5b4b52784ce7454caa56f7a4d026dc6e', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989a9aaa4f1fe9fb-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 14:43:58,520 - openai._base_client - DEBUG - request_id: req_5b4b52784ce7454caa56f7a4d026dc6e
2025-10-05 14:43:58,520 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: query_decomposition | Model: gpt-4o-mini-2024-07-18 | Tokens: 2186 (prompt: 2007, completion: 179)
2025-10-05 14:43:58,520 - app.service_agent.cognitive_agents.query_decomposer - INFO - Successfully decomposed into 2 tasks
2025-10-05 14:43:58,520 - __main__ - INFO -   복합 질문: True
2025-10-05 14:43:58,520 - __main__ - INFO -   작업 수: 2
2025-10-05 14:43:58,520 - __main__ - INFO -   실행 모드: sequential
2025-10-05 14:43:58,520 - __main__ - INFO -     - task_0: 용산구 매매 시세 조회 (search_team)
2025-10-05 14:43:58,520 - __main__ - INFO -     - task_1: 전세 전환 계산 (analysis_team)
2025-10-05 14:43:58,520 - __main__ - INFO - 
[Step 3] Comprehensive Plan 생성...
2025-10-05 14:43:58,520 - app.service_agent.cognitive_agents.planning_agent - INFO - Creating comprehensive plan for query: 용산구 매매 시세 조회하고 전세 전환 계산해줘...
2025-10-05 14:43:58,520 - app.service_agent.cognitive_agents.planning_agent - INFO - Analyzing intent for query: 용산구 매매 시세 조회하고 전세 전환 계산해줘...
2025-10-05 14:43:58,521 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-269859b0-abc0-4935-a05e-2eba854a0040', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 의도 분석 전문가입니다.\n사용자의 질문을 정확히 이해하고, 어떤 종류의 도움이 필요한지 분류해야 합니다.\n\n## 중요: 복합 질문 처리\n복합적인 질문(여러 의도가 섞인 질문)의 경우, 가장 핵심적인 의도를 파악하되,\nsub_intents 필드에 부가적인 의도들도 함께 기록해주세요.\n\n## 분류 카테고리 설명:\n\n1. **LEGAL_CONSULT (법률상담)**\n   - 설명: 부동산 관련 법률, 권리, 의무에 대한 질문\n   - 예시:\n     * 단순: "전세금 5% 인상이 가능한가요?", "임대차계약 갱신 거부할 수 있나요?"\n     * 복합: "전세금 인상 가능한지 확인하고 법적 근거도 알려주세요"\n   - 키워드: 법, 전세, 임대, 보증금, 계약, 권리, 의무, 갱신, 임차인, 임대인, 법률, 규정, 조항\n   - 필요한 처리: 법률 데이터베이스 검색, 관련 법조항 찾기\n\n2. **MARKET_INQUIRY (시세조회)**\n   - 설명: 부동산 시장 가격, 시세, 거래 동향에 대한 질문\n   - 예시:\n     * 단순: "강남구 아파트 전세 시세 알려주세요", "서초동 매매가 얼마나 올랐나요?"\n     * 복합: "강남구 시세 확인하고 대출 가능 금액도 계산해줘"\n   - 키워드: 시세, 가격, 매매가, 전세가, 월세, 시장, 동향, 평균, 지역명, 상승률, 하락률\n   - 필요한 처리: 부동산 시세 데이터 조회, 지역별 가격 분석\n\n3. **LOAN_CONSULT (대출상담)**\n   - 설명: 주택담보대출, 전세자금대출 등 금융 관련 질문\n   - 예시:\n     * 단순: "전세자금대출 한도가 얼마인가요?", "LTV가 뭔가요?"\n     * 복합: "대출 한도 확인하고 금리 비교도 해주세요"\n   - 키워드: 대출, 금리, 한도, 조건, 상환, LTV, DTI, DSR, 담보, 금융, 은행\n   - 필요한 처리: 대출 상품 조회, 금리 정보 검색, 한도 계산\n\n4. **CONTRACT_CREATION (계약서작성)**\n   - 설명: 새로운 계약서나 문서를 작성해달라는 요청\n   - 예시:\n     * 단순: "임대차계약서 작성해주세요", "전세계약서 초안 만들어주세요"\n     * 복합: "계약서 작성하고 주의사항도 검토해주세요"\n   - 키워드: 작성, 만들, 생성, 초안, 계약서, 문서, 양식\n   - 필요한 처리: 문서 생성 에이전트 호출, 템플릿 기반 작성\n\n5. **CONTRACT_REVIEW (계약서검토)**\n   - 설명: 기존 계약서나 문서를 검토해달라는 요청\n   - 예시:\n     * 단순: "이 계약서 검토해주세요", "특약사항 문제없나요?"\n     * 복합: "계약서 검토하고 수정사항도 제안해주세요"\n   - 키워드: 검토, 확인, 점검, 리뷰, 분석해, 살펴봐, 체크\n   - 필요한 처리: 문서 분석, 위험 요소 식별, 개선사항 제안\n\n6. **COMPREHENSIVE (종합분석)**\n   - 설명: 여러 측면을 종합적으로 분석해달라는 요청\n   - 예시:\n     * 단순: "이 물건 전체적으로 분석해주세요"\n     * 복합: "시세, 법률, 대출 모두 검토해서 종합 의견 주세요"\n   - 키워드: 종합, 전체, 모든, 전반적, 종합적, 평가, 분석\n   - 필요한 처리: 다중 데이터 소스 통합 분석\n\n7. **RISK_ANALYSIS (리스크분석)**\n   - 설명: 위험 요소나 주의사항에 대한 질문\n   - 예시:\n     * 단순: "이 계약 위험한가요?", "주의할 점 알려주세요"\n     * 복합: "리스크 분석하고 대안도 제시해주세요"\n   - 키워드: 위험, 리스크, 주의, 문제점, 조심, 걱정, 우려\n   - 필요한 처리: 위험 요소 분석, 주의사항 추출\n\n8. **UNCLEAR (불분명)**\n   - 설명: 의도를 명확히 파악하기 어려운 질문\n   - 예시: "이거 좀 봐주세요", "어떻게 해야 할까요?", "도와주세요"\n   - 처리: 추가 질문으로 의도 명확화 필요\n\n9. **IRRELEVANT (무관)**\n   - 설명: 부동산과 전혀 관련 없는 질문\n   - 예시: "날씨 어때?", "저녁 뭐 먹지?", "주식 추천해줘"\n   - 처리: 부동산 관련 질문을 유도\n\n## 복합 질문 예시와 분석:\n\n### 예시 1: "강남구 아파트 시세 알려주고 전세자금대출 가능한지도 확인해줘"\n- 주 의도: MARKET_INQUIRY (시세 조회가 먼저 필요)\n- 부가 의도: LOAN_CONSULT (대출 확인)\n- 분해: ["강남구 아파트 시세 조회", "전세자금대출 가능 여부 확인"]\n\n### 예시 2: "이 계약서 검토해서 위험한 부분 있는지 알려주고 수정 제안도 해줘"\n- 주 의도: CONTRACT_REVIEW (계약서 검토)\n- 부가 의도: RISK_ANALYSIS (위험 분석)\n- 분해: ["계약서 전체 검토", "위험 요소 식별", "수정사항 제안"]\n\n### 예시 3: "서초동 전세가 확인하고 법적으로 문제없는지도 봐줘"\n- 주 의도: MARKET_INQUIRY (시세 확인)\n- 부가 의도: LEGAL_CONSULT (법적 검토)\n- 분해: ["서초동 전세가 조회", "법적 이슈 검토"]\n\n## 응답 형식 (JSON 형식으로 응답):\n\n{\n    "intent": "LEGAL_CONSULT",\n    "confidence": 0.9,\n    "keywords": ["전세금", "인상", "제한"],\n    "sub_intents": [],\n    "is_compound": false,\n    "decomposed_tasks": [],\n    "entities": {\n        "location": "강남구",\n        "price": "5억",\n        "contract_type": "전세",\n        "date": "2024년",\n        "area": "84㎡",\n        "action_verbs": ["확인", "검토"]\n    },\n    "reasoning": "전세금 인상에 대한 법률 질문이므로 LEGAL_CONSULT로 분류"\n}\n\n응답 규칙:\n- intent: 위 9개 카테고리 중 하나 (대문자_언더스코어 형식)\n- confidence: 0.0~1.0 (0.8 이상이면 매우 확실, 0.5 미만이면 불확실)\n- keywords: 추출된 주요 키워드 목록\n- sub_intents: 복합 질문일 경우 부가적인 의도들\n- is_compound: 복합 질문 여부 (true/false)\n- decomposed_tasks: 복합 질문을 분해한 개별 작업들\n- entities: 추출된 엔티티 정보\n- reasoning: 분류한 이유와 근거 (상세하게)\n\n## 판단 가이드:\n- 여러 의도가 섞여있다면, 가장 주된 의도를 intent에, 나머지를 sub_intents에 기록\n- "그리고", "또한", "함께", "같이" 등의 연결어가 있으면 복합 질문일 가능성 높음\n- 법률 관련 키워드가 있으면 LEGAL_CONSULT 우선\n- 가격/시세 언급이 명확하면 MARKET_INQUIRY\n- 계약서라는 단어와 함께 "작성/만들기"가 있으면 CONTRACT_CREATION\n- 계약서라는 단어와 함께 "검토/확인"이 있으면 CONTRACT_REVIEW\n- 불확실하면 confidence를 낮게 설정하고 UNCLEAR 선택\n- 복합 질문은 is_compound를 true로 설정하고 개별 작업으로 분해\n\n분석할 질문: 용산구 매매 시세 조회하고 전세 전환 계산해줘'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 14:43:58,521 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 14:43:58,522 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 14:43:58,522 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 14:43:58,522 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 14:43:58,523 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 14:43:58,523 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 14:44:02,062 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 05:44:02 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'3328'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'3353'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9887'), (b'x-ratelimit-remaining-tokens', b'198312'), (b'x-ratelimit-reset-requests', b'16m15.058s'), (b'x-ratelimit-reset-tokens', b'506ms'), (b'x-request-id', b'req_fc748d3b44fc46d0afc92519b02c4a85'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989a9abe9e00e9fb-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 14:44:02,062 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 14:44:02,063 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 14:44:02,069 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 14:44:02,069 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 14:44:02,069 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 14:44:02,070 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 05:44:02 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '3328', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '3353', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9887', 'x-ratelimit-remaining-tokens': '198312', 'x-ratelimit-reset-requests': '16m15.058s', 'x-ratelimit-reset-tokens': '506ms', 'x-request-id': 'req_fc748d3b44fc46d0afc92519b02c4a85', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989a9abe9e00e9fb-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 14:44:02,070 - openai._base_client - DEBUG - request_id: req_fc748d3b44fc46d0afc92519b02c4a85
2025-10-05 14:44:02,070 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: intent_analysis | Model: gpt-4o-mini-2024-07-18 | Tokens: 2113 (prompt: 1926, completion: 187)
2025-10-05 14:44:02,070 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM Intent Analysis Result: {'intent': 'MARKET_INQUIRY', 'confidence': 0.9, 'keywords': ['용산구', '매매', '시세', '전세', '전환', '계산'], 'sub_intents': ['LOAN_CONSULT'], 'is_compound': True, 'decomposed_tasks': ['용산구 매매 시세 조회', '전세 전환 계산'], 'entities': {'location': '용산구', 'action_verbs': ['조회', '계산']}, 'reasoning': '매매 시세 조회와 전세 전환 계산이 포함된 복합 질문으로, 주된 의도는 시세 조회이므로 MARKET_INQUIRY로 분류하고, 전세 전환 계산은 LOAN_CONSULT로 부가 의도로 설정'}
2025-10-05 14:44:02,071 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-383f03e2-41fa-498c-b688-bc6eb10599d0', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 Agent 선택 전문가입니다.\n사용자의 요청에 가장 적합한 Agent/Team을 선택하는 것이 목표입니다.\n\n## 현재 상황\n\n**사용자 질문:** 용산구 매매 시세 조회하고 전세 전환 계산해줘\n**분석된 의도:** 시세조회\n**추출된 키워드:** [\'용산구\', \'매매\', \'시세\', \'전세\', \'전환\', \'계산\']\n\n## 사용 가능한 Agent/Team 정보\n\n{\'search_team\': {\'name\': \'search_team\', \'capabilities\': \'법률 검색, 부동산 시세 조회, 대출 상품 검색\', \'tools\': [\'legal_search\', \'market_data\', \'loan_data\'], \'use_cases\': [\'법률 상담\', \'시세 조회\', \'대출 정보\']}, \'analysis_team\': {\'name\': \'analysis_team\', \'capabilities\': \'데이터 분석, 리스크 평가, 인사이트 생성, 추천\', \'tools\': [\'data_analyzer\', \'risk_evaluator\'], \'use_cases\': [\'시장 분석\', \'리스크 평가\', \'투자 분석\']}, \'document_team\': {\'name\': \'document_team\', \'capabilities\': \'계약서 작성, 문서 생성, 문서 검토\', \'tools\': [\'document_generator\', \'contract_reviewer\'], \'use_cases\': [\'계약서 작성\', \'문서 검토\']}}\n\n## Agent 역할 및 상세 가이드\n\n### 1. search_team (검색 팀)\n- **주요 기능**: 정보 검색 및 데이터 수집\n- **전문 분야**:\n  * 법률 정보 검색 (전세법, 임대차보호법, 부동산 관련 법규)\n  * 부동산 시세 조회 (매매가, 전세가, 월세, 실거래가)\n  * 대출 상품 정보 검색 (금리, 한도, 조건)\n  * 지역 정보 및 인프라 조회\n- **도구**: legal_search, market_data, loan_data\n- **적합한 작업**: 정보 조회, 데이터 수집, 법률 확인, 시세 파악\n- **예시**:\n  * "전세금 5% 인상 가능한가요?"\n  * "강남구 아파트 전세 시세"\n  * "전세자금대출 한도 얼마?"\n\n### 2. analysis_team (분석 팀)\n- **주요 기능**: 데이터 분석 및 평가\n- **전문 분야**:\n  * 시장 동향 분석 (상승률, 하락률, 추세)\n  * 리스크 평가 (계약, 투자 위험도)\n  * 투자 수익률 계산 (ROI, 월세 수익률)\n  * 대출 한도 및 조건 분석 (LTV, DTI, DSR)\n  * 비교 분석 (지역별, 상품별)\n- **도구**: data_analyzer, risk_evaluator, calculator\n- **적합한 작업**: 데이터 분석, 리스크 평가, 계산, 비교, 예측\n- **의존성**: 보통 search_team의 데이터가 필요\n- **예시**:\n  * "이 지역 투자 가치 분석해줘"\n  * "계약 리스크 평가해줘"\n  * "대출 가능 금액 계산해줘"\n\n### 3. document_team (문서 팀)\n- **주요 기능**: 문서 생성 및 관리\n- **전문 분야**:\n  * 계약서 작성 (임대차, 매매, 전세)\n  * 문서 템플릿 관리\n  * 특약사항 생성\n  * 계약서 수정안 작성\n  * 법률 문서 검토\n- **도구**: document_generator, contract_template, contract_reviewer\n- **적합한 작업**: 문서 작성, 계약서 생성, 문서 수정, 검토\n- **예시**:\n  * "임대차계약서 작성해줘"\n  * "특약사항 추가해줘"\n  * "계약서 수정안 만들어줘"\n\n## Agent 선택 전략\n\n### 1단계: 작업 유형 식별\n```\n정보 필요 → search_team\n분석/계산 필요 → analysis_team\n문서 작성 필요 → document_team\n```\n\n### 2단계: 의존성 분석\n```\n독립적 작업 → 단일 팀\n순차적 의존 → 여러 팀 (순서 중요)\n병렬 가능 → 여러 팀 (순서 무관)\n```\n\n### 3단계: 최적화\n```\n중복 제거 → 가장 적합한 팀만 선택\n효율성 → 병렬 처리 가능한 경우 표시\n```\n\n## 의도별 Agent 매핑 가이드\n\n| 의도 (Intent) | 추천 Agent 조합 | 이유 |\n|--------------|-----------------|------|\n| LEGAL_CONSULT | ["search_team"] | 법률 정보 검색 전문 |\n| MARKET_INQUIRY | ["search_team"] | 시세 데이터 조회 |\n| LOAN_CONSULT | ["search_team", "analysis_team"] | 대출 정보 조회 후 분석 |\n| CONTRACT_CREATION | ["document_team"] | 문서 생성 전문 |\n| CONTRACT_REVIEW | ["search_team", "analysis_team"] | 법률 검토 및 리스크 분석 |\n| COMPREHENSIVE | ["search_team", "analysis_team"] | 종합 정보 수집 및 분석 |\n| RISK_ANALYSIS | ["analysis_team"] | 리스크 평가 전문 |\n| UNCLEAR | ["search_team", "analysis_team"] | 포괄적 대응 |\n\n## 복합 질문 처리 예시\n\n### 예시 1: 순차적 처리\n질문: "강남구 시세 확인하고 투자 가치 분석해줘"\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "먼저 search_team이 시세 데이터를 수집하고, 그 결과를 analysis_team이 분석하여 투자 가치 평가"\n}\n```\n\n### 예시 2: 병렬 처리 가능\n질문: "법률 정보와 시세 정보 모두 알려줘"\n```json\n{\n    "selected_agents": ["search_team"],\n    "reasoning": "search_team이 법률과 시세 정보를 병렬로 조회 가능. 두 작업이 독립적이므로 동시 처리"\n}\n```\n\n### 예시 3: 3단계 파이프라인\n질문: "시세 조회하고 분석한 후 계약서 작성해줘"\n```json\n{\n    "selected_agents": ["search_team", "analysis_team", "document_team"],\n    "reasoning": "search_team이 데이터 수집 → analysis_team이 분석 → document_team이 분석 결과 기반 계약서 작성"\n}\n```\n\n## 응답 형식 (JSON)\n\n{\n    "selected_agents": ["선택된 agent/team 목록"],\n    "reasoning": "선택 이유를 구체적으로 설명. 각 Agent의 역할과 처리 순서 포함",\n    "coordination": "single/sequential/parallel/pipeline",\n    "dependencies": {"agent2": ["agent1"]},\n    "estimated_time": 30,\n    "confidence": 0.9\n}\n\n## 선택 가이드라인\n\n1. **최소 Agent 원칙**: 가능한 적은 수의 Agent로 처리\n2. **전문성 우선**: 해당 작업에 가장 전문적인 Agent 선택\n3. **효율성 고려**: 병렬 처리 가능한 경우 명시\n4. **의존성 관리**: 데이터 흐름을 고려한 순서 지정\n5. **폴백 전략**: 불확실한 경우 ["search_team", "analysis_team"] 조합\n\n## 주의사항\n\n- selected_agents는 반드시 배열 형태\n- Agent 이름은 정확히: "search_team", "analysis_team", "document_team"\n- 최소 1개, 최대 3개 선택\n- 순서는 실행 우선순위 (앞에 있을수록 먼저 실행)\n- reasoning은 상세하고 논리적으로 작성\n- coordination 필드로 실행 방식 명시\n- 복합 질문의 경우 의존성 관계 명확히 표시'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 14:44:02,071 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 14:44:02,071 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 14:44:02,072 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 14:44:02,072 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 14:44:02,073 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 14:44:02,073 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 14:44:04,664 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 05:44:04 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'2352'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'2368'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9886'), (b'x-ratelimit-remaining-tokens', b'198423'), (b'x-ratelimit-reset-requests', b'16m20.157s'), (b'x-ratelimit-reset-tokens', b'473ms'), (b'x-request-id', b'req_3d590623a0e04d92bdb79246c5616f47'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989a9ad4c87fe9fb-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 14:44:04,664 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 14:44:04,665 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 14:44:04,665 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 14:44:04,665 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 14:44:04,665 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 14:44:04,665 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 05:44:04 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '2352', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '2368', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9886', 'x-ratelimit-remaining-tokens': '198423', 'x-ratelimit-reset-requests': '16m20.157s', 'x-ratelimit-reset-tokens': '473ms', 'x-request-id': 'req_3d590623a0e04d92bdb79246c5616f47', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989a9ad4c87fe9fb-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 14:44:04,665 - openai._base_client - DEBUG - request_id: req_3d590623a0e04d92bdb79246c5616f47
2025-10-05 14:44:04,665 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: agent_selection | Model: gpt-4o-mini-2024-07-18 | Tokens: 1838 (prompt: 1718, completion: 120)
2025-10-05 14:44:04,666 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM agent selection reasoning: 사용자가 용산구의 매매 시세를 조회하고 전세 전환 계산을 요청했으므로, 먼저 search_team이 용산구의 매매 시세 데이터를 수집하고, 그 결과를 바탕으로 analysis_team이 전세 전환 계산을 수행해야 합니다.
2025-10-05 14:44:04,666 - app.service_agent.cognitive_agents.planning_agent - INFO - ✅ Primary LLM selected agents: ['search_team', 'analysis_team']
2025-10-05 14:44:04,666 - app.service_agent.cognitive_agents.planning_agent - INFO - Intent analyzed: 시세조회 (confidence: 0.90)
2025-10-05 14:44:04,666 - app.service_agent.cognitive_agents.query_decomposer - INFO - Decomposing query: 용산구 매매 시세 조회하고 전세 전환 계산해줘...
2025-10-05 14:44:04,666 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-7fdffa04-303e-486e-a12c-54de3832f3af', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 질문 분해 전문가입니다.\n복잡한 사용자 질문을 독립적으로 처리 가능한 작업 단위로 분해하는 것이 목표입니다.\n\n## 중요 원칙:\n1. 각 작업은 하나의 명확한 목표를 가져야 합니다\n2. 작업 간 의존성을 명확히 파악해야 합니다\n3. 병렬 처리 가능한 작업은 구분해야 합니다\n4. 불필요한 분해는 피해야 합니다 (단순 질문은 분해하지 않음)\n\n## 작업 유형 (type):\n- search: 정보 검색 (법률, 시세, 대출 정보 등)\n- analysis: 데이터 분석 (리스크 평가, 시장 분석 등)\n- generation: 문서 생성 (계약서 작성 등)\n- review: 검토/평가 (계약서 검토, 조건 확인 등)\n- calculation: 계산/산출 (대출 한도, 세금 등)\n- comparison: 비교 분석 (여러 옵션 비교)\n\n## 담당 팀 (agent):\n- search_team: 법률, 시세, 대출 정보 검색\n- analysis_team: 데이터 분석, 리스크 평가, 계산\n- document_team: 문서 생성, 계약서 작성\n\n## 학습 예시:\n\n### 예시 1: 복합 질문 (순차적)\n질문: "강남구 아파트 시세 확인하고 대출 가능 금액 계산해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "강남구 아파트 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "대출 가능 금액 계산",\n            "type": "calculation",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "required_data": {"price": "task_0.result.price"},\n            "estimated_time": 15\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "시세 정보가 있어야 대출 금액 계산이 가능하므로 순차 실행"\n}\n```\n\n### 예시 2: 복합 질문 (병렬 가능)\n질문: "이 지역 전세 시세와 매매 시세 모두 알려주고 비교 분석해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "전세 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "매매 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "전세/매매 시세 비교 분석",\n            "type": "comparison",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0", "task_1"],\n            "required_data": {\n                "lease_price": "task_0.result",\n                "sale_price": "task_1.result"\n            },\n            "estimated_time": 25\n        }\n    ],\n    "execution_mode": "mixed",\n    "parallel_groups": [["task_0", "task_1"], ["task_2"]],\n    "reasoning": "시세 조회는 독립적이므로 병렬 처리, 비교는 두 결과 필요"\n}\n```\n\n### 예시 3: 복합 질문 (3단계 이상)\n질문: "이 계약서 검토해서 위험한 부분 찾고 수정안 만들어서 최종 계약서 작성해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "계약서 내용 전체 검토",\n            "type": "review",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 30\n        },\n        {\n            "description": "위험 요소 및 문제점 분석",\n            "type": "analysis",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "estimated_time": 25\n        },\n        {\n            "description": "수정안 제안 생성",\n            "type": "generation",\n            "agent": "document_team",\n            "priority": 3,\n            "depends_on": ["task_1"],\n            "estimated_time": 20\n        },\n        {\n            "description": "최종 계약서 작성",\n            "type": "generation",\n            "agent": "document_team",\n            "priority": 4,\n            "depends_on": ["task_2"],\n            "estimated_time": 30\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "각 단계가 이전 결과에 의존하므로 순차 실행 필요"\n}\n```\n\n### 예시 4: 단순 질문 (분해 불필요)\n질문: "전세금 인상률 상한이 얼마야?"\n분해:\n```json\n{\n    "is_compound": false,\n    "sub_tasks": [\n        {\n            "description": "전세금 인상률 상한 법률 정보 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 15\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "단일 정보 조회 요청으로 분해 불필요"\n}\n```\n\n### 예시 5: 조건부 실행\n질문: "이 물건 시세 확인하고 적정가면 대출 상담도 받고 싶어"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "물건 시세 조회 및 적정성 평가",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 25\n        },\n        {\n            "description": "대출 상담 정보 제공",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "optional": true,\n            "context": {"condition": "if_reasonable_price"},\n            "estimated_time": 20\n        }\n    ],\n    "execution_mode": "conditional",\n    "reasoning": "시세 확인 결과에 따라 대출 상담 진행 여부 결정"\n}\n```\n\n## Chain-of-Thought 프로세스:\n\n1. **질문 분석**: 어떤 정보나 작업을 요구하는가?\n2. **연결어 확인**: "그리고", "또한", "해서", "한 후" 등이 있는가?\n3. **의존성 파악**: 어떤 작업이 다른 작업의 결과를 필요로 하는가?\n4. **병렬성 판단**: 독립적으로 실행 가능한 작업이 있는가?\n5. **최적화**: 불필요한 분해는 없는가?\n\n## 응답 형식 (JSON):\n\n{\n    "is_compound": true/false,\n    "sub_tasks": [\n        {\n            "description": "작업 설명",\n            "type": "작업 유형",\n            "agent": "담당 팀",\n            "priority": 우선순위 (1이 가장 높음),\n            "depends_on": ["선행 작업 ID 리스트"],\n            "required_data": {"필요한 데이터 매핑"},\n            "estimated_time": 예상 소요 시간(초),\n            "optional": true/false,\n            "context": {"추가 컨텍스트"}\n        }\n    ],\n    "execution_mode": "sequential/parallel/mixed/conditional",\n    "parallel_groups": [["병렬 실행 가능한 작업 ID 그룹"]],\n    "confidence": 0.0-1.0,\n    "reasoning": "분해 결정의 이유와 근거"\n}\n\n## 분해 가이드라인:\n\n1. **분해가 필요한 경우**:\n   - 여러 종류의 정보를 요청하는 경우\n   - 순차적 처리가 필요한 경우 (A의 결과로 B 수행)\n   - 서로 다른 팀의 전문성이 필요한 경우\n\n2. **분해가 불필요한 경우**:\n   - 단일 정보 조회\n   - 단순한 질문-답변\n   - 하나의 팀에서 완전히 처리 가능한 경우\n\n3. **병렬 처리 기준**:\n   - 서로 독립적인 정보 조회\n   - 의존성이 없는 분석 작업\n   - 동시에 진행해도 충돌하지 않는 작업\n\n4. **우선순위 설정**:\n   - 의존성이 없는 작업: priority 1\n   - 1차 의존 작업: priority 2\n   - 2차 의존 작업: priority 3\n   - 이런 식으로 증가\n\n현재 의도: 시세조회\n추출된 엔티티: {\'location\': \'용산구\', \'action_verbs\': [\'조회\', \'계산\']}\n\n분석할 질문: 용산구 매매 시세 조회하고 전세 전환 계산해줘'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 14:44:04,666 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 14:44:04,667 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 14:44:04,667 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 14:44:04,667 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 14:44:04,667 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 14:44:04,667 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 14:44:08,453 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 05:44:08 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'3512'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'3532'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9885'), (b'x-ratelimit-remaining-tokens', b'197981'), (b'x-ratelimit-reset-requests', b'16m26.198s'), (b'x-ratelimit-reset-tokens', b'605ms'), (b'x-request-id', b'req_53afa1e38e2b4981a508486710ab57f4'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989a9ae50cb8e9fb-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 14:44:08,453 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 14:44:08,453 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 14:44:08,454 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 14:44:08,454 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 14:44:08,454 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 14:44:08,454 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 05:44:08 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '3512', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '3532', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9885', 'x-ratelimit-remaining-tokens': '197981', 'x-ratelimit-reset-requests': '16m26.198s', 'x-ratelimit-reset-tokens': '605ms', 'x-request-id': 'req_53afa1e38e2b4981a508486710ab57f4', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989a9ae50cb8e9fb-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 14:44:08,454 - openai._base_client - DEBUG - request_id: req_53afa1e38e2b4981a508486710ab57f4
2025-10-05 14:44:08,454 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: query_decomposition | Model: gpt-4o-mini-2024-07-18 | Tokens: 2205 (prompt: 2026, completion: 179)
2025-10-05 14:44:08,454 - app.service_agent.cognitive_agents.query_decomposer - INFO - Successfully decomposed into 2 tasks
2025-10-05 14:44:08,454 - app.service_agent.cognitive_agents.planning_agent - INFO - Query decomposed into 2 tasks
2025-10-05 14:44:08,455 - app.service_agent.cognitive_agents.planning_agent - WARNING - Plan validation errors: ["Agent 'search_team' not found in registry", "Agent 'analysis_team' depends on missing 'task_0'", "Agent 'analysis_team' not found in registry"]
2025-10-05 14:44:08,455 - app.service_agent.cognitive_agents.planning_agent - INFO - Optimizing execution plan
2025-10-05 14:44:08,455 - app.service_agent.cognitive_agents.planning_agent - INFO - Comprehensive plan created: Intent: 시세조회 (confidence: 0.90) | Strategy: sequential | Agents: search_team, analysis_team | Estimated time: 35.0s
2025-10-05 14:44:08,457 - __main__ - INFO -   전략: sequential
2025-10-05 14:44:08,457 - __main__ - INFO -   단계 수: 2
2025-10-05 14:44:08,457 - __main__ - INFO - 
✓ 테스트 성공 (소요시간: 18.38초)
2025-10-05 14:44:08,459 - __main__ - INFO - 
결과 저장: C:\kdy\Projects\holmesnyangz\beta_v001\backend\app\service_agent\reports\phase1_test_results.json
2025-10-05 14:44:08,459 - __main__ - INFO - 
================================================================================
2025-10-05 14:44:08,459 - __main__ - INFO - [31] 복합 질문 테스트: D011
2025-10-05 14:44:08,459 - __main__ - INFO - 질문: 주택담보대출 조건 확인하고 한도 계산해줘
2025-10-05 14:44:08,459 - __main__ - INFO - ================================================================================
2025-10-05 14:44:08,459 - __main__ - INFO - 
[Step 1] Intent 분석...
2025-10-05 14:44:08,460 - app.service_agent.cognitive_agents.planning_agent - INFO - Analyzing intent for query: 주택담보대출 조건 확인하고 한도 계산해줘...
2025-10-05 14:44:08,460 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-09293518-277d-4e37-ba23-e5b0eadf1ca4', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 의도 분석 전문가입니다.\n사용자의 질문을 정확히 이해하고, 어떤 종류의 도움이 필요한지 분류해야 합니다.\n\n## 중요: 복합 질문 처리\n복합적인 질문(여러 의도가 섞인 질문)의 경우, 가장 핵심적인 의도를 파악하되,\nsub_intents 필드에 부가적인 의도들도 함께 기록해주세요.\n\n## 분류 카테고리 설명:\n\n1. **LEGAL_CONSULT (법률상담)**\n   - 설명: 부동산 관련 법률, 권리, 의무에 대한 질문\n   - 예시:\n     * 단순: "전세금 5% 인상이 가능한가요?", "임대차계약 갱신 거부할 수 있나요?"\n     * 복합: "전세금 인상 가능한지 확인하고 법적 근거도 알려주세요"\n   - 키워드: 법, 전세, 임대, 보증금, 계약, 권리, 의무, 갱신, 임차인, 임대인, 법률, 규정, 조항\n   - 필요한 처리: 법률 데이터베이스 검색, 관련 법조항 찾기\n\n2. **MARKET_INQUIRY (시세조회)**\n   - 설명: 부동산 시장 가격, 시세, 거래 동향에 대한 질문\n   - 예시:\n     * 단순: "강남구 아파트 전세 시세 알려주세요", "서초동 매매가 얼마나 올랐나요?"\n     * 복합: "강남구 시세 확인하고 대출 가능 금액도 계산해줘"\n   - 키워드: 시세, 가격, 매매가, 전세가, 월세, 시장, 동향, 평균, 지역명, 상승률, 하락률\n   - 필요한 처리: 부동산 시세 데이터 조회, 지역별 가격 분석\n\n3. **LOAN_CONSULT (대출상담)**\n   - 설명: 주택담보대출, 전세자금대출 등 금융 관련 질문\n   - 예시:\n     * 단순: "전세자금대출 한도가 얼마인가요?", "LTV가 뭔가요?"\n     * 복합: "대출 한도 확인하고 금리 비교도 해주세요"\n   - 키워드: 대출, 금리, 한도, 조건, 상환, LTV, DTI, DSR, 담보, 금융, 은행\n   - 필요한 처리: 대출 상품 조회, 금리 정보 검색, 한도 계산\n\n4. **CONTRACT_CREATION (계약서작성)**\n   - 설명: 새로운 계약서나 문서를 작성해달라는 요청\n   - 예시:\n     * 단순: "임대차계약서 작성해주세요", "전세계약서 초안 만들어주세요"\n     * 복합: "계약서 작성하고 주의사항도 검토해주세요"\n   - 키워드: 작성, 만들, 생성, 초안, 계약서, 문서, 양식\n   - 필요한 처리: 문서 생성 에이전트 호출, 템플릿 기반 작성\n\n5. **CONTRACT_REVIEW (계약서검토)**\n   - 설명: 기존 계약서나 문서를 검토해달라는 요청\n   - 예시:\n     * 단순: "이 계약서 검토해주세요", "특약사항 문제없나요?"\n     * 복합: "계약서 검토하고 수정사항도 제안해주세요"\n   - 키워드: 검토, 확인, 점검, 리뷰, 분석해, 살펴봐, 체크\n   - 필요한 처리: 문서 분석, 위험 요소 식별, 개선사항 제안\n\n6. **COMPREHENSIVE (종합분석)**\n   - 설명: 여러 측면을 종합적으로 분석해달라는 요청\n   - 예시:\n     * 단순: "이 물건 전체적으로 분석해주세요"\n     * 복합: "시세, 법률, 대출 모두 검토해서 종합 의견 주세요"\n   - 키워드: 종합, 전체, 모든, 전반적, 종합적, 평가, 분석\n   - 필요한 처리: 다중 데이터 소스 통합 분석\n\n7. **RISK_ANALYSIS (리스크분석)**\n   - 설명: 위험 요소나 주의사항에 대한 질문\n   - 예시:\n     * 단순: "이 계약 위험한가요?", "주의할 점 알려주세요"\n     * 복합: "리스크 분석하고 대안도 제시해주세요"\n   - 키워드: 위험, 리스크, 주의, 문제점, 조심, 걱정, 우려\n   - 필요한 처리: 위험 요소 분석, 주의사항 추출\n\n8. **UNCLEAR (불분명)**\n   - 설명: 의도를 명확히 파악하기 어려운 질문\n   - 예시: "이거 좀 봐주세요", "어떻게 해야 할까요?", "도와주세요"\n   - 처리: 추가 질문으로 의도 명확화 필요\n\n9. **IRRELEVANT (무관)**\n   - 설명: 부동산과 전혀 관련 없는 질문\n   - 예시: "날씨 어때?", "저녁 뭐 먹지?", "주식 추천해줘"\n   - 처리: 부동산 관련 질문을 유도\n\n## 복합 질문 예시와 분석:\n\n### 예시 1: "강남구 아파트 시세 알려주고 전세자금대출 가능한지도 확인해줘"\n- 주 의도: MARKET_INQUIRY (시세 조회가 먼저 필요)\n- 부가 의도: LOAN_CONSULT (대출 확인)\n- 분해: ["강남구 아파트 시세 조회", "전세자금대출 가능 여부 확인"]\n\n### 예시 2: "이 계약서 검토해서 위험한 부분 있는지 알려주고 수정 제안도 해줘"\n- 주 의도: CONTRACT_REVIEW (계약서 검토)\n- 부가 의도: RISK_ANALYSIS (위험 분석)\n- 분해: ["계약서 전체 검토", "위험 요소 식별", "수정사항 제안"]\n\n### 예시 3: "서초동 전세가 확인하고 법적으로 문제없는지도 봐줘"\n- 주 의도: MARKET_INQUIRY (시세 확인)\n- 부가 의도: LEGAL_CONSULT (법적 검토)\n- 분해: ["서초동 전세가 조회", "법적 이슈 검토"]\n\n## 응답 형식 (JSON 형식으로 응답):\n\n{\n    "intent": "LEGAL_CONSULT",\n    "confidence": 0.9,\n    "keywords": ["전세금", "인상", "제한"],\n    "sub_intents": [],\n    "is_compound": false,\n    "decomposed_tasks": [],\n    "entities": {\n        "location": "강남구",\n        "price": "5억",\n        "contract_type": "전세",\n        "date": "2024년",\n        "area": "84㎡",\n        "action_verbs": ["확인", "검토"]\n    },\n    "reasoning": "전세금 인상에 대한 법률 질문이므로 LEGAL_CONSULT로 분류"\n}\n\n응답 규칙:\n- intent: 위 9개 카테고리 중 하나 (대문자_언더스코어 형식)\n- confidence: 0.0~1.0 (0.8 이상이면 매우 확실, 0.5 미만이면 불확실)\n- keywords: 추출된 주요 키워드 목록\n- sub_intents: 복합 질문일 경우 부가적인 의도들\n- is_compound: 복합 질문 여부 (true/false)\n- decomposed_tasks: 복합 질문을 분해한 개별 작업들\n- entities: 추출된 엔티티 정보\n- reasoning: 분류한 이유와 근거 (상세하게)\n\n## 판단 가이드:\n- 여러 의도가 섞여있다면, 가장 주된 의도를 intent에, 나머지를 sub_intents에 기록\n- "그리고", "또한", "함께", "같이" 등의 연결어가 있으면 복합 질문일 가능성 높음\n- 법률 관련 키워드가 있으면 LEGAL_CONSULT 우선\n- 가격/시세 언급이 명확하면 MARKET_INQUIRY\n- 계약서라는 단어와 함께 "작성/만들기"가 있으면 CONTRACT_CREATION\n- 계약서라는 단어와 함께 "검토/확인"이 있으면 CONTRACT_REVIEW\n- 불확실하면 confidence를 낮게 설정하고 UNCLEAR 선택\n- 복합 질문은 is_compound를 true로 설정하고 개별 작업으로 분해\n\n분석할 질문: 주택담보대출 조건 확인하고 한도 계산해줘'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 14:44:08,460 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 14:44:08,460 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 14:44:08,461 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 14:44:08,461 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 14:44:08,461 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 14:44:08,461 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 14:44:11,508 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 05:44:11 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'2829'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'2855'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9886'), (b'x-ratelimit-remaining-tokens', b'198313'), (b'x-ratelimit-reset-requests', b'16m22.397s'), (b'x-ratelimit-reset-tokens', b'506ms'), (b'x-request-id', b'req_4be4a034074145f696686b321cf66f3c'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989a9afcbe28e9fb-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 14:44:11,508 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 14:44:11,508 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 14:44:11,512 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 14:44:11,512 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 14:44:11,512 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 14:44:11,512 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 05:44:11 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '2829', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '2855', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9886', 'x-ratelimit-remaining-tokens': '198313', 'x-ratelimit-reset-requests': '16m22.397s', 'x-ratelimit-reset-tokens': '506ms', 'x-request-id': 'req_4be4a034074145f696686b321cf66f3c', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989a9afcbe28e9fb-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 14:44:11,512 - openai._base_client - DEBUG - request_id: req_4be4a034074145f696686b321cf66f3c
2025-10-05 14:44:11,512 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: intent_analysis | Model: gpt-4o-mini-2024-07-18 | Tokens: 2057 (prompt: 1924, completion: 133)
2025-10-05 14:44:11,512 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM Intent Analysis Result: {'intent': 'LOAN_CONSULT', 'confidence': 0.9, 'keywords': ['주택담보대출', '조건', '한도', '계산'], 'sub_intents': [], 'is_compound': False, 'decomposed_tasks': [], 'entities': {'loan_type': '주택담보대출', 'action_verbs': ['확인', '계산']}, 'reasoning': '주택담보대출의 조건과 한도를 확인하는 질문이므로 LOAN_CONSULT로 분류'}
2025-10-05 14:44:11,513 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-2f36ebf3-27ab-4fb1-9fe9-21c0df196913', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 Agent 선택 전문가입니다.\n사용자의 요청에 가장 적합한 Agent/Team을 선택하는 것이 목표입니다.\n\n## 현재 상황\n\n**사용자 질문:** 주택담보대출 조건 확인하고 한도 계산해줘\n**분석된 의도:** 대출상담\n**추출된 키워드:** [\'주택담보대출\', \'조건\', \'한도\', \'계산\']\n\n## 사용 가능한 Agent/Team 정보\n\n{\'search_team\': {\'name\': \'search_team\', \'capabilities\': \'법률 검색, 부동산 시세 조회, 대출 상품 검색\', \'tools\': [\'legal_search\', \'market_data\', \'loan_data\'], \'use_cases\': [\'법률 상담\', \'시세 조회\', \'대출 정보\']}, \'analysis_team\': {\'name\': \'analysis_team\', \'capabilities\': \'데이터 분석, 리스크 평가, 인사이트 생성, 추천\', \'tools\': [\'data_analyzer\', \'risk_evaluator\'], \'use_cases\': [\'시장 분석\', \'리스크 평가\', \'투자 분석\']}, \'document_team\': {\'name\': \'document_team\', \'capabilities\': \'계약서 작성, 문서 생성, 문서 검토\', \'tools\': [\'document_generator\', \'contract_reviewer\'], \'use_cases\': [\'계약서 작성\', \'문서 검토\']}}\n\n## Agent 역할 및 상세 가이드\n\n### 1. search_team (검색 팀)\n- **주요 기능**: 정보 검색 및 데이터 수집\n- **전문 분야**:\n  * 법률 정보 검색 (전세법, 임대차보호법, 부동산 관련 법규)\n  * 부동산 시세 조회 (매매가, 전세가, 월세, 실거래가)\n  * 대출 상품 정보 검색 (금리, 한도, 조건)\n  * 지역 정보 및 인프라 조회\n- **도구**: legal_search, market_data, loan_data\n- **적합한 작업**: 정보 조회, 데이터 수집, 법률 확인, 시세 파악\n- **예시**:\n  * "전세금 5% 인상 가능한가요?"\n  * "강남구 아파트 전세 시세"\n  * "전세자금대출 한도 얼마?"\n\n### 2. analysis_team (분석 팀)\n- **주요 기능**: 데이터 분석 및 평가\n- **전문 분야**:\n  * 시장 동향 분석 (상승률, 하락률, 추세)\n  * 리스크 평가 (계약, 투자 위험도)\n  * 투자 수익률 계산 (ROI, 월세 수익률)\n  * 대출 한도 및 조건 분석 (LTV, DTI, DSR)\n  * 비교 분석 (지역별, 상품별)\n- **도구**: data_analyzer, risk_evaluator, calculator\n- **적합한 작업**: 데이터 분석, 리스크 평가, 계산, 비교, 예측\n- **의존성**: 보통 search_team의 데이터가 필요\n- **예시**:\n  * "이 지역 투자 가치 분석해줘"\n  * "계약 리스크 평가해줘"\n  * "대출 가능 금액 계산해줘"\n\n### 3. document_team (문서 팀)\n- **주요 기능**: 문서 생성 및 관리\n- **전문 분야**:\n  * 계약서 작성 (임대차, 매매, 전세)\n  * 문서 템플릿 관리\n  * 특약사항 생성\n  * 계약서 수정안 작성\n  * 법률 문서 검토\n- **도구**: document_generator, contract_template, contract_reviewer\n- **적합한 작업**: 문서 작성, 계약서 생성, 문서 수정, 검토\n- **예시**:\n  * "임대차계약서 작성해줘"\n  * "특약사항 추가해줘"\n  * "계약서 수정안 만들어줘"\n\n## Agent 선택 전략\n\n### 1단계: 작업 유형 식별\n```\n정보 필요 → search_team\n분석/계산 필요 → analysis_team\n문서 작성 필요 → document_team\n```\n\n### 2단계: 의존성 분석\n```\n독립적 작업 → 단일 팀\n순차적 의존 → 여러 팀 (순서 중요)\n병렬 가능 → 여러 팀 (순서 무관)\n```\n\n### 3단계: 최적화\n```\n중복 제거 → 가장 적합한 팀만 선택\n효율성 → 병렬 처리 가능한 경우 표시\n```\n\n## 의도별 Agent 매핑 가이드\n\n| 의도 (Intent) | 추천 Agent 조합 | 이유 |\n|--------------|-----------------|------|\n| LEGAL_CONSULT | ["search_team"] | 법률 정보 검색 전문 |\n| MARKET_INQUIRY | ["search_team"] | 시세 데이터 조회 |\n| LOAN_CONSULT | ["search_team", "analysis_team"] | 대출 정보 조회 후 분석 |\n| CONTRACT_CREATION | ["document_team"] | 문서 생성 전문 |\n| CONTRACT_REVIEW | ["search_team", "analysis_team"] | 법률 검토 및 리스크 분석 |\n| COMPREHENSIVE | ["search_team", "analysis_team"] | 종합 정보 수집 및 분석 |\n| RISK_ANALYSIS | ["analysis_team"] | 리스크 평가 전문 |\n| UNCLEAR | ["search_team", "analysis_team"] | 포괄적 대응 |\n\n## 복합 질문 처리 예시\n\n### 예시 1: 순차적 처리\n질문: "강남구 시세 확인하고 투자 가치 분석해줘"\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "먼저 search_team이 시세 데이터를 수집하고, 그 결과를 analysis_team이 분석하여 투자 가치 평가"\n}\n```\n\n### 예시 2: 병렬 처리 가능\n질문: "법률 정보와 시세 정보 모두 알려줘"\n```json\n{\n    "selected_agents": ["search_team"],\n    "reasoning": "search_team이 법률과 시세 정보를 병렬로 조회 가능. 두 작업이 독립적이므로 동시 처리"\n}\n```\n\n### 예시 3: 3단계 파이프라인\n질문: "시세 조회하고 분석한 후 계약서 작성해줘"\n```json\n{\n    "selected_agents": ["search_team", "analysis_team", "document_team"],\n    "reasoning": "search_team이 데이터 수집 → analysis_team이 분석 → document_team이 분석 결과 기반 계약서 작성"\n}\n```\n\n## 응답 형식 (JSON)\n\n{\n    "selected_agents": ["선택된 agent/team 목록"],\n    "reasoning": "선택 이유를 구체적으로 설명. 각 Agent의 역할과 처리 순서 포함",\n    "coordination": "single/sequential/parallel/pipeline",\n    "dependencies": {"agent2": ["agent1"]},\n    "estimated_time": 30,\n    "confidence": 0.9\n}\n\n## 선택 가이드라인\n\n1. **최소 Agent 원칙**: 가능한 적은 수의 Agent로 처리\n2. **전문성 우선**: 해당 작업에 가장 전문적인 Agent 선택\n3. **효율성 고려**: 병렬 처리 가능한 경우 명시\n4. **의존성 관리**: 데이터 흐름을 고려한 순서 지정\n5. **폴백 전략**: 불확실한 경우 ["search_team", "analysis_team"] 조합\n\n## 주의사항\n\n- selected_agents는 반드시 배열 형태\n- Agent 이름은 정확히: "search_team", "analysis_team", "document_team"\n- 최소 1개, 최대 3개 선택\n- 순서는 실행 우선순위 (앞에 있을수록 먼저 실행)\n- reasoning은 상세하고 논리적으로 작성\n- coordination 필드로 실행 방식 명시\n- 복합 질문의 경우 의존성 관계 명확히 표시'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 14:44:11,513 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 14:44:11,514 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 14:44:11,514 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 14:44:11,514 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 14:44:11,514 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 14:44:11,514 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 14:44:14,290 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 05:44:14 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'2499'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'2535'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9885'), (b'x-ratelimit-remaining-tokens', b'198427'), (b'x-ratelimit-reset-requests', b'16m27.98s'), (b'x-ratelimit-reset-tokens', b'471ms'), (b'x-request-id', b'req_6a6aaff9e5b24369aa3c11a195e184bc'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989a9b0fc9e5e9fb-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 14:44:14,290 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 14:44:14,291 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 14:44:14,291 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 14:44:14,291 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 14:44:14,291 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 14:44:14,291 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 05:44:14 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '2499', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '2535', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9885', 'x-ratelimit-remaining-tokens': '198427', 'x-ratelimit-reset-requests': '16m27.98s', 'x-ratelimit-reset-tokens': '471ms', 'x-request-id': 'req_6a6aaff9e5b24369aa3c11a195e184bc', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989a9b0fc9e5e9fb-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 14:44:14,291 - openai._base_client - DEBUG - request_id: req_6a6aaff9e5b24369aa3c11a195e184bc
2025-10-05 14:44:14,292 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: agent_selection | Model: gpt-4o-mini-2024-07-18 | Tokens: 1828 (prompt: 1711, completion: 117)
2025-10-05 14:44:14,292 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM agent selection reasoning: 사용자가 주택담보대출의 조건을 확인하고 한도를 계산하고자 하므로, 먼저 search_team이 대출 상품에 대한 정보를 수집하고, 그 후 analysis_team이 수집된 데이터를 기반으로 대출 한도를 계산하는 방식으로 진행됩니다.
2025-10-05 14:44:14,292 - app.service_agent.cognitive_agents.planning_agent - INFO - ✅ Primary LLM selected agents: ['search_team', 'analysis_team']
2025-10-05 14:44:14,292 - __main__ - INFO -   의도: 대출상담
2025-10-05 14:44:14,292 - __main__ - INFO -   신뢰도: 0.90
2025-10-05 14:44:14,292 - __main__ - INFO -   추천 Agent: ['search_team', 'analysis_team']
2025-10-05 14:44:14,292 - __main__ - INFO - 
[Step 2] Query Decomposition...
2025-10-05 14:44:14,292 - app.service_agent.cognitive_agents.query_decomposer - INFO - Decomposing query: 주택담보대출 조건 확인하고 한도 계산해줘...
2025-10-05 14:44:14,292 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-b91d29df-f0fb-47a6-8e97-caf9052cbc82', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 질문 분해 전문가입니다.\n복잡한 사용자 질문을 독립적으로 처리 가능한 작업 단위로 분해하는 것이 목표입니다.\n\n## 중요 원칙:\n1. 각 작업은 하나의 명확한 목표를 가져야 합니다\n2. 작업 간 의존성을 명확히 파악해야 합니다\n3. 병렬 처리 가능한 작업은 구분해야 합니다\n4. 불필요한 분해는 피해야 합니다 (단순 질문은 분해하지 않음)\n\n## 작업 유형 (type):\n- search: 정보 검색 (법률, 시세, 대출 정보 등)\n- analysis: 데이터 분석 (리스크 평가, 시장 분석 등)\n- generation: 문서 생성 (계약서 작성 등)\n- review: 검토/평가 (계약서 검토, 조건 확인 등)\n- calculation: 계산/산출 (대출 한도, 세금 등)\n- comparison: 비교 분석 (여러 옵션 비교)\n\n## 담당 팀 (agent):\n- search_team: 법률, 시세, 대출 정보 검색\n- analysis_team: 데이터 분석, 리스크 평가, 계산\n- document_team: 문서 생성, 계약서 작성\n\n## 학습 예시:\n\n### 예시 1: 복합 질문 (순차적)\n질문: "강남구 아파트 시세 확인하고 대출 가능 금액 계산해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "강남구 아파트 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "대출 가능 금액 계산",\n            "type": "calculation",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "required_data": {"price": "task_0.result.price"},\n            "estimated_time": 15\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "시세 정보가 있어야 대출 금액 계산이 가능하므로 순차 실행"\n}\n```\n\n### 예시 2: 복합 질문 (병렬 가능)\n질문: "이 지역 전세 시세와 매매 시세 모두 알려주고 비교 분석해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "전세 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "매매 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "전세/매매 시세 비교 분석",\n            "type": "comparison",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0", "task_1"],\n            "required_data": {\n                "lease_price": "task_0.result",\n                "sale_price": "task_1.result"\n            },\n            "estimated_time": 25\n        }\n    ],\n    "execution_mode": "mixed",\n    "parallel_groups": [["task_0", "task_1"], ["task_2"]],\n    "reasoning": "시세 조회는 독립적이므로 병렬 처리, 비교는 두 결과 필요"\n}\n```\n\n### 예시 3: 복합 질문 (3단계 이상)\n질문: "이 계약서 검토해서 위험한 부분 찾고 수정안 만들어서 최종 계약서 작성해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "계약서 내용 전체 검토",\n            "type": "review",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 30\n        },\n        {\n            "description": "위험 요소 및 문제점 분석",\n            "type": "analysis",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "estimated_time": 25\n        },\n        {\n            "description": "수정안 제안 생성",\n            "type": "generation",\n            "agent": "document_team",\n            "priority": 3,\n            "depends_on": ["task_1"],\n            "estimated_time": 20\n        },\n        {\n            "description": "최종 계약서 작성",\n            "type": "generation",\n            "agent": "document_team",\n            "priority": 4,\n            "depends_on": ["task_2"],\n            "estimated_time": 30\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "각 단계가 이전 결과에 의존하므로 순차 실행 필요"\n}\n```\n\n### 예시 4: 단순 질문 (분해 불필요)\n질문: "전세금 인상률 상한이 얼마야?"\n분해:\n```json\n{\n    "is_compound": false,\n    "sub_tasks": [\n        {\n            "description": "전세금 인상률 상한 법률 정보 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 15\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "단일 정보 조회 요청으로 분해 불필요"\n}\n```\n\n### 예시 5: 조건부 실행\n질문: "이 물건 시세 확인하고 적정가면 대출 상담도 받고 싶어"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "물건 시세 조회 및 적정성 평가",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 25\n        },\n        {\n            "description": "대출 상담 정보 제공",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "optional": true,\n            "context": {"condition": "if_reasonable_price"},\n            "estimated_time": 20\n        }\n    ],\n    "execution_mode": "conditional",\n    "reasoning": "시세 확인 결과에 따라 대출 상담 진행 여부 결정"\n}\n```\n\n## Chain-of-Thought 프로세스:\n\n1. **질문 분석**: 어떤 정보나 작업을 요구하는가?\n2. **연결어 확인**: "그리고", "또한", "해서", "한 후" 등이 있는가?\n3. **의존성 파악**: 어떤 작업이 다른 작업의 결과를 필요로 하는가?\n4. **병렬성 판단**: 독립적으로 실행 가능한 작업이 있는가?\n5. **최적화**: 불필요한 분해는 없는가?\n\n## 응답 형식 (JSON):\n\n{\n    "is_compound": true/false,\n    "sub_tasks": [\n        {\n            "description": "작업 설명",\n            "type": "작업 유형",\n            "agent": "담당 팀",\n            "priority": 우선순위 (1이 가장 높음),\n            "depends_on": ["선행 작업 ID 리스트"],\n            "required_data": {"필요한 데이터 매핑"},\n            "estimated_time": 예상 소요 시간(초),\n            "optional": true/false,\n            "context": {"추가 컨텍스트"}\n        }\n    ],\n    "execution_mode": "sequential/parallel/mixed/conditional",\n    "parallel_groups": [["병렬 실행 가능한 작업 ID 그룹"]],\n    "confidence": 0.0-1.0,\n    "reasoning": "분해 결정의 이유와 근거"\n}\n\n## 분해 가이드라인:\n\n1. **분해가 필요한 경우**:\n   - 여러 종류의 정보를 요청하는 경우\n   - 순차적 처리가 필요한 경우 (A의 결과로 B 수행)\n   - 서로 다른 팀의 전문성이 필요한 경우\n\n2. **분해가 불필요한 경우**:\n   - 단일 정보 조회\n   - 단순한 질문-답변\n   - 하나의 팀에서 완전히 처리 가능한 경우\n\n3. **병렬 처리 기준**:\n   - 서로 독립적인 정보 조회\n   - 의존성이 없는 분석 작업\n   - 동시에 진행해도 충돌하지 않는 작업\n\n4. **우선순위 설정**:\n   - 의존성이 없는 작업: priority 1\n   - 1차 의존 작업: priority 2\n   - 2차 의존 작업: priority 3\n   - 이런 식으로 증가\n\n현재 의도: 대출상담\n추출된 엔티티: None\n\n분석할 질문: 주택담보대출 조건 확인하고 한도 계산해줘'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 14:44:14,293 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 14:44:14,293 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 14:44:14,293 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 14:44:14,293 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 14:44:14,293 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 14:44:14,293 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 14:44:17,873 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 05:44:17 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'3317'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'3337'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9883'), (b'x-ratelimit-remaining-tokens', b'197997'), (b'x-ratelimit-reset-requests', b'16m42.486s'), (b'x-ratelimit-reset-tokens', b'600ms'), (b'x-request-id', b'req_ddaa573aef244a03bea894c3d335ba79'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989a9b2128f8e9fb-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 14:44:17,873 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 14:44:17,873 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 14:44:17,873 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 14:44:17,873 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 14:44:17,873 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 14:44:17,874 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 05:44:17 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '3317', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '3337', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9883', 'x-ratelimit-remaining-tokens': '197997', 'x-ratelimit-reset-requests': '16m42.486s', 'x-ratelimit-reset-tokens': '600ms', 'x-request-id': 'req_ddaa573aef244a03bea894c3d335ba79', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989a9b2128f8e9fb-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 14:44:17,874 - openai._base_client - DEBUG - request_id: req_ddaa573aef244a03bea894c3d335ba79
2025-10-05 14:44:17,874 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: query_decomposition | Model: gpt-4o-mini-2024-07-18 | Tokens: 2184 (prompt: 2006, completion: 178)
2025-10-05 14:44:17,874 - app.service_agent.cognitive_agents.query_decomposer - INFO - Successfully decomposed into 2 tasks
2025-10-05 14:44:17,874 - __main__ - INFO -   복합 질문: True
2025-10-05 14:44:17,874 - __main__ - INFO -   작업 수: 2
2025-10-05 14:44:17,874 - __main__ - INFO -   실행 모드: sequential
2025-10-05 14:44:17,874 - __main__ - INFO -     - task_0: 주택담보대출 조건 확인 (search_team)
2025-10-05 14:44:17,874 - __main__ - INFO -     - task_1: 대출 한도 계산 (analysis_team)
2025-10-05 14:44:17,874 - __main__ - INFO - 
[Step 3] Comprehensive Plan 생성...
2025-10-05 14:44:17,874 - app.service_agent.cognitive_agents.planning_agent - INFO - Creating comprehensive plan for query: 주택담보대출 조건 확인하고 한도 계산해줘...
2025-10-05 14:44:17,874 - app.service_agent.cognitive_agents.planning_agent - INFO - Analyzing intent for query: 주택담보대출 조건 확인하고 한도 계산해줘...
2025-10-05 14:44:17,875 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-691c0773-cbe2-48d0-ad66-deb2c09137c4', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 의도 분석 전문가입니다.\n사용자의 질문을 정확히 이해하고, 어떤 종류의 도움이 필요한지 분류해야 합니다.\n\n## 중요: 복합 질문 처리\n복합적인 질문(여러 의도가 섞인 질문)의 경우, 가장 핵심적인 의도를 파악하되,\nsub_intents 필드에 부가적인 의도들도 함께 기록해주세요.\n\n## 분류 카테고리 설명:\n\n1. **LEGAL_CONSULT (법률상담)**\n   - 설명: 부동산 관련 법률, 권리, 의무에 대한 질문\n   - 예시:\n     * 단순: "전세금 5% 인상이 가능한가요?", "임대차계약 갱신 거부할 수 있나요?"\n     * 복합: "전세금 인상 가능한지 확인하고 법적 근거도 알려주세요"\n   - 키워드: 법, 전세, 임대, 보증금, 계약, 권리, 의무, 갱신, 임차인, 임대인, 법률, 규정, 조항\n   - 필요한 처리: 법률 데이터베이스 검색, 관련 법조항 찾기\n\n2. **MARKET_INQUIRY (시세조회)**\n   - 설명: 부동산 시장 가격, 시세, 거래 동향에 대한 질문\n   - 예시:\n     * 단순: "강남구 아파트 전세 시세 알려주세요", "서초동 매매가 얼마나 올랐나요?"\n     * 복합: "강남구 시세 확인하고 대출 가능 금액도 계산해줘"\n   - 키워드: 시세, 가격, 매매가, 전세가, 월세, 시장, 동향, 평균, 지역명, 상승률, 하락률\n   - 필요한 처리: 부동산 시세 데이터 조회, 지역별 가격 분석\n\n3. **LOAN_CONSULT (대출상담)**\n   - 설명: 주택담보대출, 전세자금대출 등 금융 관련 질문\n   - 예시:\n     * 단순: "전세자금대출 한도가 얼마인가요?", "LTV가 뭔가요?"\n     * 복합: "대출 한도 확인하고 금리 비교도 해주세요"\n   - 키워드: 대출, 금리, 한도, 조건, 상환, LTV, DTI, DSR, 담보, 금융, 은행\n   - 필요한 처리: 대출 상품 조회, 금리 정보 검색, 한도 계산\n\n4. **CONTRACT_CREATION (계약서작성)**\n   - 설명: 새로운 계약서나 문서를 작성해달라는 요청\n   - 예시:\n     * 단순: "임대차계약서 작성해주세요", "전세계약서 초안 만들어주세요"\n     * 복합: "계약서 작성하고 주의사항도 검토해주세요"\n   - 키워드: 작성, 만들, 생성, 초안, 계약서, 문서, 양식\n   - 필요한 처리: 문서 생성 에이전트 호출, 템플릿 기반 작성\n\n5. **CONTRACT_REVIEW (계약서검토)**\n   - 설명: 기존 계약서나 문서를 검토해달라는 요청\n   - 예시:\n     * 단순: "이 계약서 검토해주세요", "특약사항 문제없나요?"\n     * 복합: "계약서 검토하고 수정사항도 제안해주세요"\n   - 키워드: 검토, 확인, 점검, 리뷰, 분석해, 살펴봐, 체크\n   - 필요한 처리: 문서 분석, 위험 요소 식별, 개선사항 제안\n\n6. **COMPREHENSIVE (종합분석)**\n   - 설명: 여러 측면을 종합적으로 분석해달라는 요청\n   - 예시:\n     * 단순: "이 물건 전체적으로 분석해주세요"\n     * 복합: "시세, 법률, 대출 모두 검토해서 종합 의견 주세요"\n   - 키워드: 종합, 전체, 모든, 전반적, 종합적, 평가, 분석\n   - 필요한 처리: 다중 데이터 소스 통합 분석\n\n7. **RISK_ANALYSIS (리스크분석)**\n   - 설명: 위험 요소나 주의사항에 대한 질문\n   - 예시:\n     * 단순: "이 계약 위험한가요?", "주의할 점 알려주세요"\n     * 복합: "리스크 분석하고 대안도 제시해주세요"\n   - 키워드: 위험, 리스크, 주의, 문제점, 조심, 걱정, 우려\n   - 필요한 처리: 위험 요소 분석, 주의사항 추출\n\n8. **UNCLEAR (불분명)**\n   - 설명: 의도를 명확히 파악하기 어려운 질문\n   - 예시: "이거 좀 봐주세요", "어떻게 해야 할까요?", "도와주세요"\n   - 처리: 추가 질문으로 의도 명확화 필요\n\n9. **IRRELEVANT (무관)**\n   - 설명: 부동산과 전혀 관련 없는 질문\n   - 예시: "날씨 어때?", "저녁 뭐 먹지?", "주식 추천해줘"\n   - 처리: 부동산 관련 질문을 유도\n\n## 복합 질문 예시와 분석:\n\n### 예시 1: "강남구 아파트 시세 알려주고 전세자금대출 가능한지도 확인해줘"\n- 주 의도: MARKET_INQUIRY (시세 조회가 먼저 필요)\n- 부가 의도: LOAN_CONSULT (대출 확인)\n- 분해: ["강남구 아파트 시세 조회", "전세자금대출 가능 여부 확인"]\n\n### 예시 2: "이 계약서 검토해서 위험한 부분 있는지 알려주고 수정 제안도 해줘"\n- 주 의도: CONTRACT_REVIEW (계약서 검토)\n- 부가 의도: RISK_ANALYSIS (위험 분석)\n- 분해: ["계약서 전체 검토", "위험 요소 식별", "수정사항 제안"]\n\n### 예시 3: "서초동 전세가 확인하고 법적으로 문제없는지도 봐줘"\n- 주 의도: MARKET_INQUIRY (시세 확인)\n- 부가 의도: LEGAL_CONSULT (법적 검토)\n- 분해: ["서초동 전세가 조회", "법적 이슈 검토"]\n\n## 응답 형식 (JSON 형식으로 응답):\n\n{\n    "intent": "LEGAL_CONSULT",\n    "confidence": 0.9,\n    "keywords": ["전세금", "인상", "제한"],\n    "sub_intents": [],\n    "is_compound": false,\n    "decomposed_tasks": [],\n    "entities": {\n        "location": "강남구",\n        "price": "5억",\n        "contract_type": "전세",\n        "date": "2024년",\n        "area": "84㎡",\n        "action_verbs": ["확인", "검토"]\n    },\n    "reasoning": "전세금 인상에 대한 법률 질문이므로 LEGAL_CONSULT로 분류"\n}\n\n응답 규칙:\n- intent: 위 9개 카테고리 중 하나 (대문자_언더스코어 형식)\n- confidence: 0.0~1.0 (0.8 이상이면 매우 확실, 0.5 미만이면 불확실)\n- keywords: 추출된 주요 키워드 목록\n- sub_intents: 복합 질문일 경우 부가적인 의도들\n- is_compound: 복합 질문 여부 (true/false)\n- decomposed_tasks: 복합 질문을 분해한 개별 작업들\n- entities: 추출된 엔티티 정보\n- reasoning: 분류한 이유와 근거 (상세하게)\n\n## 판단 가이드:\n- 여러 의도가 섞여있다면, 가장 주된 의도를 intent에, 나머지를 sub_intents에 기록\n- "그리고", "또한", "함께", "같이" 등의 연결어가 있으면 복합 질문일 가능성 높음\n- 법률 관련 키워드가 있으면 LEGAL_CONSULT 우선\n- 가격/시세 언급이 명확하면 MARKET_INQUIRY\n- 계약서라는 단어와 함께 "작성/만들기"가 있으면 CONTRACT_CREATION\n- 계약서라는 단어와 함께 "검토/확인"이 있으면 CONTRACT_REVIEW\n- 불확실하면 confidence를 낮게 설정하고 UNCLEAR 선택\n- 복합 질문은 is_compound를 true로 설정하고 개별 작업으로 분해\n\n분석할 질문: 주택담보대출 조건 확인하고 한도 계산해줘'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 14:44:17,875 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 14:44:17,875 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 14:44:17,875 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 14:44:17,875 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 14:44:17,875 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 14:44:17,876 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 14:44:21,067 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 05:44:21 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'2996'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'3009'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9883'), (b'x-ratelimit-remaining-tokens', b'198313'), (b'x-ratelimit-reset-requests', b'16m47.551s'), (b'x-ratelimit-reset-tokens', b'506ms'), (b'x-request-id', b'req_942ea7cc1b36470090bd52e0162b2da9'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989a9b379ff6e9fb-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 14:44:21,067 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 14:44:21,067 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 14:44:21,071 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 14:44:21,071 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 14:44:21,071 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 14:44:21,072 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 05:44:21 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '2996', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '3009', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9883', 'x-ratelimit-remaining-tokens': '198313', 'x-ratelimit-reset-requests': '16m47.551s', 'x-ratelimit-reset-tokens': '506ms', 'x-request-id': 'req_942ea7cc1b36470090bd52e0162b2da9', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989a9b379ff6e9fb-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 14:44:21,072 - openai._base_client - DEBUG - request_id: req_942ea7cc1b36470090bd52e0162b2da9
2025-10-05 14:44:21,072 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: intent_analysis | Model: gpt-4o-mini-2024-07-18 | Tokens: 2057 (prompt: 1924, completion: 133)
2025-10-05 14:44:21,072 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM Intent Analysis Result: {'intent': 'LOAN_CONSULT', 'confidence': 0.9, 'keywords': ['주택담보대출', '조건', '한도', '계산'], 'sub_intents': [], 'is_compound': False, 'decomposed_tasks': [], 'entities': {'loan_type': '주택담보대출', 'action_verbs': ['확인', '계산']}, 'reasoning': '주택담보대출의 조건과 한도를 확인하는 질문이므로 LOAN_CONSULT로 분류'}
2025-10-05 14:44:21,073 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-b90d98f9-7efc-4005-82af-354d92aa7935', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 Agent 선택 전문가입니다.\n사용자의 요청에 가장 적합한 Agent/Team을 선택하는 것이 목표입니다.\n\n## 현재 상황\n\n**사용자 질문:** 주택담보대출 조건 확인하고 한도 계산해줘\n**분석된 의도:** 대출상담\n**추출된 키워드:** [\'주택담보대출\', \'조건\', \'한도\', \'계산\']\n\n## 사용 가능한 Agent/Team 정보\n\n{\'search_team\': {\'name\': \'search_team\', \'capabilities\': \'법률 검색, 부동산 시세 조회, 대출 상품 검색\', \'tools\': [\'legal_search\', \'market_data\', \'loan_data\'], \'use_cases\': [\'법률 상담\', \'시세 조회\', \'대출 정보\']}, \'analysis_team\': {\'name\': \'analysis_team\', \'capabilities\': \'데이터 분석, 리스크 평가, 인사이트 생성, 추천\', \'tools\': [\'data_analyzer\', \'risk_evaluator\'], \'use_cases\': [\'시장 분석\', \'리스크 평가\', \'투자 분석\']}, \'document_team\': {\'name\': \'document_team\', \'capabilities\': \'계약서 작성, 문서 생성, 문서 검토\', \'tools\': [\'document_generator\', \'contract_reviewer\'], \'use_cases\': [\'계약서 작성\', \'문서 검토\']}}\n\n## Agent 역할 및 상세 가이드\n\n### 1. search_team (검색 팀)\n- **주요 기능**: 정보 검색 및 데이터 수집\n- **전문 분야**:\n  * 법률 정보 검색 (전세법, 임대차보호법, 부동산 관련 법규)\n  * 부동산 시세 조회 (매매가, 전세가, 월세, 실거래가)\n  * 대출 상품 정보 검색 (금리, 한도, 조건)\n  * 지역 정보 및 인프라 조회\n- **도구**: legal_search, market_data, loan_data\n- **적합한 작업**: 정보 조회, 데이터 수집, 법률 확인, 시세 파악\n- **예시**:\n  * "전세금 5% 인상 가능한가요?"\n  * "강남구 아파트 전세 시세"\n  * "전세자금대출 한도 얼마?"\n\n### 2. analysis_team (분석 팀)\n- **주요 기능**: 데이터 분석 및 평가\n- **전문 분야**:\n  * 시장 동향 분석 (상승률, 하락률, 추세)\n  * 리스크 평가 (계약, 투자 위험도)\n  * 투자 수익률 계산 (ROI, 월세 수익률)\n  * 대출 한도 및 조건 분석 (LTV, DTI, DSR)\n  * 비교 분석 (지역별, 상품별)\n- **도구**: data_analyzer, risk_evaluator, calculator\n- **적합한 작업**: 데이터 분석, 리스크 평가, 계산, 비교, 예측\n- **의존성**: 보통 search_team의 데이터가 필요\n- **예시**:\n  * "이 지역 투자 가치 분석해줘"\n  * "계약 리스크 평가해줘"\n  * "대출 가능 금액 계산해줘"\n\n### 3. document_team (문서 팀)\n- **주요 기능**: 문서 생성 및 관리\n- **전문 분야**:\n  * 계약서 작성 (임대차, 매매, 전세)\n  * 문서 템플릿 관리\n  * 특약사항 생성\n  * 계약서 수정안 작성\n  * 법률 문서 검토\n- **도구**: document_generator, contract_template, contract_reviewer\n- **적합한 작업**: 문서 작성, 계약서 생성, 문서 수정, 검토\n- **예시**:\n  * "임대차계약서 작성해줘"\n  * "특약사항 추가해줘"\n  * "계약서 수정안 만들어줘"\n\n## Agent 선택 전략\n\n### 1단계: 작업 유형 식별\n```\n정보 필요 → search_team\n분석/계산 필요 → analysis_team\n문서 작성 필요 → document_team\n```\n\n### 2단계: 의존성 분석\n```\n독립적 작업 → 단일 팀\n순차적 의존 → 여러 팀 (순서 중요)\n병렬 가능 → 여러 팀 (순서 무관)\n```\n\n### 3단계: 최적화\n```\n중복 제거 → 가장 적합한 팀만 선택\n효율성 → 병렬 처리 가능한 경우 표시\n```\n\n## 의도별 Agent 매핑 가이드\n\n| 의도 (Intent) | 추천 Agent 조합 | 이유 |\n|--------------|-----------------|------|\n| LEGAL_CONSULT | ["search_team"] | 법률 정보 검색 전문 |\n| MARKET_INQUIRY | ["search_team"] | 시세 데이터 조회 |\n| LOAN_CONSULT | ["search_team", "analysis_team"] | 대출 정보 조회 후 분석 |\n| CONTRACT_CREATION | ["document_team"] | 문서 생성 전문 |\n| CONTRACT_REVIEW | ["search_team", "analysis_team"] | 법률 검토 및 리스크 분석 |\n| COMPREHENSIVE | ["search_team", "analysis_team"] | 종합 정보 수집 및 분석 |\n| RISK_ANALYSIS | ["analysis_team"] | 리스크 평가 전문 |\n| UNCLEAR | ["search_team", "analysis_team"] | 포괄적 대응 |\n\n## 복합 질문 처리 예시\n\n### 예시 1: 순차적 처리\n질문: "강남구 시세 확인하고 투자 가치 분석해줘"\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "먼저 search_team이 시세 데이터를 수집하고, 그 결과를 analysis_team이 분석하여 투자 가치 평가"\n}\n```\n\n### 예시 2: 병렬 처리 가능\n질문: "법률 정보와 시세 정보 모두 알려줘"\n```json\n{\n    "selected_agents": ["search_team"],\n    "reasoning": "search_team이 법률과 시세 정보를 병렬로 조회 가능. 두 작업이 독립적이므로 동시 처리"\n}\n```\n\n### 예시 3: 3단계 파이프라인\n질문: "시세 조회하고 분석한 후 계약서 작성해줘"\n```json\n{\n    "selected_agents": ["search_team", "analysis_team", "document_team"],\n    "reasoning": "search_team이 데이터 수집 → analysis_team이 분석 → document_team이 분석 결과 기반 계약서 작성"\n}\n```\n\n## 응답 형식 (JSON)\n\n{\n    "selected_agents": ["선택된 agent/team 목록"],\n    "reasoning": "선택 이유를 구체적으로 설명. 각 Agent의 역할과 처리 순서 포함",\n    "coordination": "single/sequential/parallel/pipeline",\n    "dependencies": {"agent2": ["agent1"]},\n    "estimated_time": 30,\n    "confidence": 0.9\n}\n\n## 선택 가이드라인\n\n1. **최소 Agent 원칙**: 가능한 적은 수의 Agent로 처리\n2. **전문성 우선**: 해당 작업에 가장 전문적인 Agent 선택\n3. **효율성 고려**: 병렬 처리 가능한 경우 명시\n4. **의존성 관리**: 데이터 흐름을 고려한 순서 지정\n5. **폴백 전략**: 불확실한 경우 ["search_team", "analysis_team"] 조합\n\n## 주의사항\n\n- selected_agents는 반드시 배열 형태\n- Agent 이름은 정확히: "search_team", "analysis_team", "document_team"\n- 최소 1개, 최대 3개 선택\n- 순서는 실행 우선순위 (앞에 있을수록 먼저 실행)\n- reasoning은 상세하고 논리적으로 작성\n- coordination 필드로 실행 방식 명시\n- 복합 질문의 경우 의존성 관계 명확히 표시'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 14:44:21,073 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 14:44:21,074 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 14:44:21,074 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 14:44:21,074 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 14:44:21,074 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 14:44:21,074 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 14:44:23,609 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 05:44:23 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'2276'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'2301'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9882'), (b'x-ratelimit-remaining-tokens', b'198427'), (b'x-ratelimit-reset-requests', b'16m52.978s'), (b'x-ratelimit-reset-tokens', b'471ms'), (b'x-request-id', b'req_07597018e9314080a518ea10ad232b75'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989a9b4b8f29e9fb-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 14:44:23,609 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 14:44:23,609 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 14:44:23,610 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 14:44:23,610 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 14:44:23,610 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 14:44:23,610 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 05:44:23 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '2276', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '2301', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9882', 'x-ratelimit-remaining-tokens': '198427', 'x-ratelimit-reset-requests': '16m52.978s', 'x-ratelimit-reset-tokens': '471ms', 'x-request-id': 'req_07597018e9314080a518ea10ad232b75', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989a9b4b8f29e9fb-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 14:44:23,610 - openai._base_client - DEBUG - request_id: req_07597018e9314080a518ea10ad232b75
2025-10-05 14:44:23,610 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: agent_selection | Model: gpt-4o-mini-2024-07-18 | Tokens: 1829 (prompt: 1711, completion: 118)
2025-10-05 14:44:23,610 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM agent selection reasoning: 사용자가 주택담보대출의 조건을 확인하고 한도를 계산하고자 하므로, 먼저 search_team이 대출 상품 정보를 조회하여 조건을 확인하고, 그 결과를 바탕으로 analysis_team이 대출 한도를 계산하는 순서로 진행해야 합니다.
2025-10-05 14:44:23,610 - app.service_agent.cognitive_agents.planning_agent - INFO - ✅ Primary LLM selected agents: ['search_team', 'analysis_team']
2025-10-05 14:44:23,610 - app.service_agent.cognitive_agents.planning_agent - INFO - Intent analyzed: 대출상담 (confidence: 0.90)
2025-10-05 14:44:23,610 - app.service_agent.cognitive_agents.query_decomposer - INFO - Decomposing query: 주택담보대출 조건 확인하고 한도 계산해줘...
2025-10-05 14:44:23,611 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-59cd0d9d-d6eb-4351-9f1d-30b57e2d418f', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 질문 분해 전문가입니다.\n복잡한 사용자 질문을 독립적으로 처리 가능한 작업 단위로 분해하는 것이 목표입니다.\n\n## 중요 원칙:\n1. 각 작업은 하나의 명확한 목표를 가져야 합니다\n2. 작업 간 의존성을 명확히 파악해야 합니다\n3. 병렬 처리 가능한 작업은 구분해야 합니다\n4. 불필요한 분해는 피해야 합니다 (단순 질문은 분해하지 않음)\n\n## 작업 유형 (type):\n- search: 정보 검색 (법률, 시세, 대출 정보 등)\n- analysis: 데이터 분석 (리스크 평가, 시장 분석 등)\n- generation: 문서 생성 (계약서 작성 등)\n- review: 검토/평가 (계약서 검토, 조건 확인 등)\n- calculation: 계산/산출 (대출 한도, 세금 등)\n- comparison: 비교 분석 (여러 옵션 비교)\n\n## 담당 팀 (agent):\n- search_team: 법률, 시세, 대출 정보 검색\n- analysis_team: 데이터 분석, 리스크 평가, 계산\n- document_team: 문서 생성, 계약서 작성\n\n## 학습 예시:\n\n### 예시 1: 복합 질문 (순차적)\n질문: "강남구 아파트 시세 확인하고 대출 가능 금액 계산해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "강남구 아파트 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "대출 가능 금액 계산",\n            "type": "calculation",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "required_data": {"price": "task_0.result.price"},\n            "estimated_time": 15\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "시세 정보가 있어야 대출 금액 계산이 가능하므로 순차 실행"\n}\n```\n\n### 예시 2: 복합 질문 (병렬 가능)\n질문: "이 지역 전세 시세와 매매 시세 모두 알려주고 비교 분석해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "전세 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "매매 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "전세/매매 시세 비교 분석",\n            "type": "comparison",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0", "task_1"],\n            "required_data": {\n                "lease_price": "task_0.result",\n                "sale_price": "task_1.result"\n            },\n            "estimated_time": 25\n        }\n    ],\n    "execution_mode": "mixed",\n    "parallel_groups": [["task_0", "task_1"], ["task_2"]],\n    "reasoning": "시세 조회는 독립적이므로 병렬 처리, 비교는 두 결과 필요"\n}\n```\n\n### 예시 3: 복합 질문 (3단계 이상)\n질문: "이 계약서 검토해서 위험한 부분 찾고 수정안 만들어서 최종 계약서 작성해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "계약서 내용 전체 검토",\n            "type": "review",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 30\n        },\n        {\n            "description": "위험 요소 및 문제점 분석",\n            "type": "analysis",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "estimated_time": 25\n        },\n        {\n            "description": "수정안 제안 생성",\n            "type": "generation",\n            "agent": "document_team",\n            "priority": 3,\n            "depends_on": ["task_1"],\n            "estimated_time": 20\n        },\n        {\n            "description": "최종 계약서 작성",\n            "type": "generation",\n            "agent": "document_team",\n            "priority": 4,\n            "depends_on": ["task_2"],\n            "estimated_time": 30\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "각 단계가 이전 결과에 의존하므로 순차 실행 필요"\n}\n```\n\n### 예시 4: 단순 질문 (분해 불필요)\n질문: "전세금 인상률 상한이 얼마야?"\n분해:\n```json\n{\n    "is_compound": false,\n    "sub_tasks": [\n        {\n            "description": "전세금 인상률 상한 법률 정보 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 15\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "단일 정보 조회 요청으로 분해 불필요"\n}\n```\n\n### 예시 5: 조건부 실행\n질문: "이 물건 시세 확인하고 적정가면 대출 상담도 받고 싶어"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "물건 시세 조회 및 적정성 평가",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 25\n        },\n        {\n            "description": "대출 상담 정보 제공",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "optional": true,\n            "context": {"condition": "if_reasonable_price"},\n            "estimated_time": 20\n        }\n    ],\n    "execution_mode": "conditional",\n    "reasoning": "시세 확인 결과에 따라 대출 상담 진행 여부 결정"\n}\n```\n\n## Chain-of-Thought 프로세스:\n\n1. **질문 분석**: 어떤 정보나 작업을 요구하는가?\n2. **연결어 확인**: "그리고", "또한", "해서", "한 후" 등이 있는가?\n3. **의존성 파악**: 어떤 작업이 다른 작업의 결과를 필요로 하는가?\n4. **병렬성 판단**: 독립적으로 실행 가능한 작업이 있는가?\n5. **최적화**: 불필요한 분해는 없는가?\n\n## 응답 형식 (JSON):\n\n{\n    "is_compound": true/false,\n    "sub_tasks": [\n        {\n            "description": "작업 설명",\n            "type": "작업 유형",\n            "agent": "담당 팀",\n            "priority": 우선순위 (1이 가장 높음),\n            "depends_on": ["선행 작업 ID 리스트"],\n            "required_data": {"필요한 데이터 매핑"},\n            "estimated_time": 예상 소요 시간(초),\n            "optional": true/false,\n            "context": {"추가 컨텍스트"}\n        }\n    ],\n    "execution_mode": "sequential/parallel/mixed/conditional",\n    "parallel_groups": [["병렬 실행 가능한 작업 ID 그룹"]],\n    "confidence": 0.0-1.0,\n    "reasoning": "분해 결정의 이유와 근거"\n}\n\n## 분해 가이드라인:\n\n1. **분해가 필요한 경우**:\n   - 여러 종류의 정보를 요청하는 경우\n   - 순차적 처리가 필요한 경우 (A의 결과로 B 수행)\n   - 서로 다른 팀의 전문성이 필요한 경우\n\n2. **분해가 불필요한 경우**:\n   - 단일 정보 조회\n   - 단순한 질문-답변\n   - 하나의 팀에서 완전히 처리 가능한 경우\n\n3. **병렬 처리 기준**:\n   - 서로 독립적인 정보 조회\n   - 의존성이 없는 분석 작업\n   - 동시에 진행해도 충돌하지 않는 작업\n\n4. **우선순위 설정**:\n   - 의존성이 없는 작업: priority 1\n   - 1차 의존 작업: priority 2\n   - 2차 의존 작업: priority 3\n   - 이런 식으로 증가\n\n현재 의도: 대출상담\n추출된 엔티티: {\'loan_type\': \'주택담보대출\', \'action_verbs\': [\'확인\', \'계산\']}\n\n분석할 질문: 주택담보대출 조건 확인하고 한도 계산해줘'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 14:44:23,611 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 14:44:23,611 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 14:44:23,612 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 14:44:23,612 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 14:44:23,612 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 14:44:23,612 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 14:44:27,191 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 05:44:27 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'3358'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'3379'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9882'), (b'x-ratelimit-remaining-tokens', b'197980'), (b'x-ratelimit-reset-requests', b'16m59.093s'), (b'x-ratelimit-reset-tokens', b'606ms'), (b'x-request-id', b'req_382330912399469d9db0d5aa8233054b'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989a9b5b6ba1e9fb-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 14:44:27,191 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 14:44:27,191 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 14:44:27,192 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 14:44:27,192 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 14:44:27,192 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 14:44:27,192 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 05:44:27 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '3358', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '3379', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9882', 'x-ratelimit-remaining-tokens': '197980', 'x-ratelimit-reset-requests': '16m59.093s', 'x-ratelimit-reset-tokens': '606ms', 'x-request-id': 'req_382330912399469d9db0d5aa8233054b', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989a9b5b6ba1e9fb-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 14:44:27,192 - openai._base_client - DEBUG - request_id: req_382330912399469d9db0d5aa8233054b
2025-10-05 14:44:27,192 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: query_decomposition | Model: gpt-4o-mini-2024-07-18 | Tokens: 2208 (prompt: 2030, completion: 178)
2025-10-05 14:44:27,192 - app.service_agent.cognitive_agents.query_decomposer - INFO - Successfully decomposed into 2 tasks
2025-10-05 14:44:27,192 - app.service_agent.cognitive_agents.planning_agent - INFO - Query decomposed into 2 tasks
2025-10-05 14:44:27,192 - app.service_agent.cognitive_agents.planning_agent - WARNING - Plan validation errors: ["Agent 'search_team' not found in registry", "Agent 'analysis_team' depends on missing 'task_0'", "Agent 'analysis_team' not found in registry"]
2025-10-05 14:44:27,192 - app.service_agent.cognitive_agents.planning_agent - INFO - Optimizing execution plan
2025-10-05 14:44:27,192 - app.service_agent.cognitive_agents.planning_agent - INFO - Comprehensive plan created: Intent: 대출상담 (confidence: 0.90) | Strategy: sequential | Agents: search_team, analysis_team | Estimated time: 35.0s
2025-10-05 14:44:27,192 - __main__ - INFO -   전략: sequential
2025-10-05 14:44:27,192 - __main__ - INFO -   단계 수: 2
2025-10-05 14:44:27,192 - __main__ - INFO - 
✓ 테스트 성공 (소요시간: 18.73초)
2025-10-05 14:44:27,192 - __main__ - INFO - 
================================================================================
2025-10-05 14:44:27,192 - __main__ - INFO - [32] 복합 질문 테스트: D012
2025-10-05 14:44:27,193 - __main__ - INFO - 질문: 계약 갱신 청구권 확인하고 행사 방법 알려줘
2025-10-05 14:44:27,193 - __main__ - INFO - ================================================================================
2025-10-05 14:44:27,193 - __main__ - INFO - 
[Step 1] Intent 분석...
2025-10-05 14:44:27,193 - app.service_agent.cognitive_agents.planning_agent - INFO - Analyzing intent for query: 계약 갱신 청구권 확인하고 행사 방법 알려줘...
2025-10-05 14:44:27,193 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-f07f1553-2565-405a-8d8a-c767ba646021', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 의도 분석 전문가입니다.\n사용자의 질문을 정확히 이해하고, 어떤 종류의 도움이 필요한지 분류해야 합니다.\n\n## 중요: 복합 질문 처리\n복합적인 질문(여러 의도가 섞인 질문)의 경우, 가장 핵심적인 의도를 파악하되,\nsub_intents 필드에 부가적인 의도들도 함께 기록해주세요.\n\n## 분류 카테고리 설명:\n\n1. **LEGAL_CONSULT (법률상담)**\n   - 설명: 부동산 관련 법률, 권리, 의무에 대한 질문\n   - 예시:\n     * 단순: "전세금 5% 인상이 가능한가요?", "임대차계약 갱신 거부할 수 있나요?"\n     * 복합: "전세금 인상 가능한지 확인하고 법적 근거도 알려주세요"\n   - 키워드: 법, 전세, 임대, 보증금, 계약, 권리, 의무, 갱신, 임차인, 임대인, 법률, 규정, 조항\n   - 필요한 처리: 법률 데이터베이스 검색, 관련 법조항 찾기\n\n2. **MARKET_INQUIRY (시세조회)**\n   - 설명: 부동산 시장 가격, 시세, 거래 동향에 대한 질문\n   - 예시:\n     * 단순: "강남구 아파트 전세 시세 알려주세요", "서초동 매매가 얼마나 올랐나요?"\n     * 복합: "강남구 시세 확인하고 대출 가능 금액도 계산해줘"\n   - 키워드: 시세, 가격, 매매가, 전세가, 월세, 시장, 동향, 평균, 지역명, 상승률, 하락률\n   - 필요한 처리: 부동산 시세 데이터 조회, 지역별 가격 분석\n\n3. **LOAN_CONSULT (대출상담)**\n   - 설명: 주택담보대출, 전세자금대출 등 금융 관련 질문\n   - 예시:\n     * 단순: "전세자금대출 한도가 얼마인가요?", "LTV가 뭔가요?"\n     * 복합: "대출 한도 확인하고 금리 비교도 해주세요"\n   - 키워드: 대출, 금리, 한도, 조건, 상환, LTV, DTI, DSR, 담보, 금융, 은행\n   - 필요한 처리: 대출 상품 조회, 금리 정보 검색, 한도 계산\n\n4. **CONTRACT_CREATION (계약서작성)**\n   - 설명: 새로운 계약서나 문서를 작성해달라는 요청\n   - 예시:\n     * 단순: "임대차계약서 작성해주세요", "전세계약서 초안 만들어주세요"\n     * 복합: "계약서 작성하고 주의사항도 검토해주세요"\n   - 키워드: 작성, 만들, 생성, 초안, 계약서, 문서, 양식\n   - 필요한 처리: 문서 생성 에이전트 호출, 템플릿 기반 작성\n\n5. **CONTRACT_REVIEW (계약서검토)**\n   - 설명: 기존 계약서나 문서를 검토해달라는 요청\n   - 예시:\n     * 단순: "이 계약서 검토해주세요", "특약사항 문제없나요?"\n     * 복합: "계약서 검토하고 수정사항도 제안해주세요"\n   - 키워드: 검토, 확인, 점검, 리뷰, 분석해, 살펴봐, 체크\n   - 필요한 처리: 문서 분석, 위험 요소 식별, 개선사항 제안\n\n6. **COMPREHENSIVE (종합분석)**\n   - 설명: 여러 측면을 종합적으로 분석해달라는 요청\n   - 예시:\n     * 단순: "이 물건 전체적으로 분석해주세요"\n     * 복합: "시세, 법률, 대출 모두 검토해서 종합 의견 주세요"\n   - 키워드: 종합, 전체, 모든, 전반적, 종합적, 평가, 분석\n   - 필요한 처리: 다중 데이터 소스 통합 분석\n\n7. **RISK_ANALYSIS (리스크분석)**\n   - 설명: 위험 요소나 주의사항에 대한 질문\n   - 예시:\n     * 단순: "이 계약 위험한가요?", "주의할 점 알려주세요"\n     * 복합: "리스크 분석하고 대안도 제시해주세요"\n   - 키워드: 위험, 리스크, 주의, 문제점, 조심, 걱정, 우려\n   - 필요한 처리: 위험 요소 분석, 주의사항 추출\n\n8. **UNCLEAR (불분명)**\n   - 설명: 의도를 명확히 파악하기 어려운 질문\n   - 예시: "이거 좀 봐주세요", "어떻게 해야 할까요?", "도와주세요"\n   - 처리: 추가 질문으로 의도 명확화 필요\n\n9. **IRRELEVANT (무관)**\n   - 설명: 부동산과 전혀 관련 없는 질문\n   - 예시: "날씨 어때?", "저녁 뭐 먹지?", "주식 추천해줘"\n   - 처리: 부동산 관련 질문을 유도\n\n## 복합 질문 예시와 분석:\n\n### 예시 1: "강남구 아파트 시세 알려주고 전세자금대출 가능한지도 확인해줘"\n- 주 의도: MARKET_INQUIRY (시세 조회가 먼저 필요)\n- 부가 의도: LOAN_CONSULT (대출 확인)\n- 분해: ["강남구 아파트 시세 조회", "전세자금대출 가능 여부 확인"]\n\n### 예시 2: "이 계약서 검토해서 위험한 부분 있는지 알려주고 수정 제안도 해줘"\n- 주 의도: CONTRACT_REVIEW (계약서 검토)\n- 부가 의도: RISK_ANALYSIS (위험 분석)\n- 분해: ["계약서 전체 검토", "위험 요소 식별", "수정사항 제안"]\n\n### 예시 3: "서초동 전세가 확인하고 법적으로 문제없는지도 봐줘"\n- 주 의도: MARKET_INQUIRY (시세 확인)\n- 부가 의도: LEGAL_CONSULT (법적 검토)\n- 분해: ["서초동 전세가 조회", "법적 이슈 검토"]\n\n## 응답 형식 (JSON 형식으로 응답):\n\n{\n    "intent": "LEGAL_CONSULT",\n    "confidence": 0.9,\n    "keywords": ["전세금", "인상", "제한"],\n    "sub_intents": [],\n    "is_compound": false,\n    "decomposed_tasks": [],\n    "entities": {\n        "location": "강남구",\n        "price": "5억",\n        "contract_type": "전세",\n        "date": "2024년",\n        "area": "84㎡",\n        "action_verbs": ["확인", "검토"]\n    },\n    "reasoning": "전세금 인상에 대한 법률 질문이므로 LEGAL_CONSULT로 분류"\n}\n\n응답 규칙:\n- intent: 위 9개 카테고리 중 하나 (대문자_언더스코어 형식)\n- confidence: 0.0~1.0 (0.8 이상이면 매우 확실, 0.5 미만이면 불확실)\n- keywords: 추출된 주요 키워드 목록\n- sub_intents: 복합 질문일 경우 부가적인 의도들\n- is_compound: 복합 질문 여부 (true/false)\n- decomposed_tasks: 복합 질문을 분해한 개별 작업들\n- entities: 추출된 엔티티 정보\n- reasoning: 분류한 이유와 근거 (상세하게)\n\n## 판단 가이드:\n- 여러 의도가 섞여있다면, 가장 주된 의도를 intent에, 나머지를 sub_intents에 기록\n- "그리고", "또한", "함께", "같이" 등의 연결어가 있으면 복합 질문일 가능성 높음\n- 법률 관련 키워드가 있으면 LEGAL_CONSULT 우선\n- 가격/시세 언급이 명확하면 MARKET_INQUIRY\n- 계약서라는 단어와 함께 "작성/만들기"가 있으면 CONTRACT_CREATION\n- 계약서라는 단어와 함께 "검토/확인"이 있으면 CONTRACT_REVIEW\n- 불확실하면 confidence를 낮게 설정하고 UNCLEAR 선택\n- 복합 질문은 is_compound를 true로 설정하고 개별 작업으로 분해\n\n분석할 질문: 계약 갱신 청구권 확인하고 행사 방법 알려줘'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 14:44:27,193 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 14:44:27,193 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 14:44:27,194 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 14:44:27,194 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 14:44:27,194 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 14:44:27,194 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 14:44:30,015 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 05:44:29 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'2609'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'2629'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9881'), (b'x-ratelimit-remaining-tokens', b'198313'), (b'x-ratelimit-reset-requests', b'17m4.144s'), (b'x-ratelimit-reset-tokens', b'506ms'), (b'x-request-id', b'req_7d374816c0504b9c96933452aaf601d6'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989a9b71cf51e9fb-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 14:44:30,015 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 14:44:30,016 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 14:44:30,021 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 14:44:30,021 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 14:44:30,021 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 14:44:30,021 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 05:44:29 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '2609', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '2629', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9881', 'x-ratelimit-remaining-tokens': '198313', 'x-ratelimit-reset-requests': '17m4.144s', 'x-ratelimit-reset-tokens': '506ms', 'x-request-id': 'req_7d374816c0504b9c96933452aaf601d6', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989a9b71cf51e9fb-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 14:44:30,021 - openai._base_client - DEBUG - request_id: req_7d374816c0504b9c96933452aaf601d6
2025-10-05 14:44:30,022 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: intent_analysis | Model: gpt-4o-mini-2024-07-18 | Tokens: 2045 (prompt: 1923, completion: 122)
2025-10-05 14:44:30,022 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM Intent Analysis Result: {'intent': 'LEGAL_CONSULT', 'confidence': 0.85, 'keywords': ['계약', '갱신', '청구권', '행사', '방법'], 'sub_intents': [], 'is_compound': False, 'decomposed_tasks': [], 'entities': {'action_verbs': ['확인', '알려줘']}, 'reasoning': '계약 갱신 청구권에 대한 법률적 질문이므로 LEGAL_CONSULT로 분류'}
2025-10-05 14:44:30,023 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-951ba049-1a0d-482e-95aa-53836c46993a', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 Agent 선택 전문가입니다.\n사용자의 요청에 가장 적합한 Agent/Team을 선택하는 것이 목표입니다.\n\n## 현재 상황\n\n**사용자 질문:** 계약 갱신 청구권 확인하고 행사 방법 알려줘\n**분석된 의도:** 법률상담\n**추출된 키워드:** [\'계약\', \'갱신\', \'청구권\', \'행사\', \'방법\']\n\n## 사용 가능한 Agent/Team 정보\n\n{\'search_team\': {\'name\': \'search_team\', \'capabilities\': \'법률 검색, 부동산 시세 조회, 대출 상품 검색\', \'tools\': [\'legal_search\', \'market_data\', \'loan_data\'], \'use_cases\': [\'법률 상담\', \'시세 조회\', \'대출 정보\']}, \'analysis_team\': {\'name\': \'analysis_team\', \'capabilities\': \'데이터 분석, 리스크 평가, 인사이트 생성, 추천\', \'tools\': [\'data_analyzer\', \'risk_evaluator\'], \'use_cases\': [\'시장 분석\', \'리스크 평가\', \'투자 분석\']}, \'document_team\': {\'name\': \'document_team\', \'capabilities\': \'계약서 작성, 문서 생성, 문서 검토\', \'tools\': [\'document_generator\', \'contract_reviewer\'], \'use_cases\': [\'계약서 작성\', \'문서 검토\']}}\n\n## Agent 역할 및 상세 가이드\n\n### 1. search_team (검색 팀)\n- **주요 기능**: 정보 검색 및 데이터 수집\n- **전문 분야**:\n  * 법률 정보 검색 (전세법, 임대차보호법, 부동산 관련 법규)\n  * 부동산 시세 조회 (매매가, 전세가, 월세, 실거래가)\n  * 대출 상품 정보 검색 (금리, 한도, 조건)\n  * 지역 정보 및 인프라 조회\n- **도구**: legal_search, market_data, loan_data\n- **적합한 작업**: 정보 조회, 데이터 수집, 법률 확인, 시세 파악\n- **예시**:\n  * "전세금 5% 인상 가능한가요?"\n  * "강남구 아파트 전세 시세"\n  * "전세자금대출 한도 얼마?"\n\n### 2. analysis_team (분석 팀)\n- **주요 기능**: 데이터 분석 및 평가\n- **전문 분야**:\n  * 시장 동향 분석 (상승률, 하락률, 추세)\n  * 리스크 평가 (계약, 투자 위험도)\n  * 투자 수익률 계산 (ROI, 월세 수익률)\n  * 대출 한도 및 조건 분석 (LTV, DTI, DSR)\n  * 비교 분석 (지역별, 상품별)\n- **도구**: data_analyzer, risk_evaluator, calculator\n- **적합한 작업**: 데이터 분석, 리스크 평가, 계산, 비교, 예측\n- **의존성**: 보통 search_team의 데이터가 필요\n- **예시**:\n  * "이 지역 투자 가치 분석해줘"\n  * "계약 리스크 평가해줘"\n  * "대출 가능 금액 계산해줘"\n\n### 3. document_team (문서 팀)\n- **주요 기능**: 문서 생성 및 관리\n- **전문 분야**:\n  * 계약서 작성 (임대차, 매매, 전세)\n  * 문서 템플릿 관리\n  * 특약사항 생성\n  * 계약서 수정안 작성\n  * 법률 문서 검토\n- **도구**: document_generator, contract_template, contract_reviewer\n- **적합한 작업**: 문서 작성, 계약서 생성, 문서 수정, 검토\n- **예시**:\n  * "임대차계약서 작성해줘"\n  * "특약사항 추가해줘"\n  * "계약서 수정안 만들어줘"\n\n## Agent 선택 전략\n\n### 1단계: 작업 유형 식별\n```\n정보 필요 → search_team\n분석/계산 필요 → analysis_team\n문서 작성 필요 → document_team\n```\n\n### 2단계: 의존성 분석\n```\n독립적 작업 → 단일 팀\n순차적 의존 → 여러 팀 (순서 중요)\n병렬 가능 → 여러 팀 (순서 무관)\n```\n\n### 3단계: 최적화\n```\n중복 제거 → 가장 적합한 팀만 선택\n효율성 → 병렬 처리 가능한 경우 표시\n```\n\n## 의도별 Agent 매핑 가이드\n\n| 의도 (Intent) | 추천 Agent 조합 | 이유 |\n|--------------|-----------------|------|\n| LEGAL_CONSULT | ["search_team"] | 법률 정보 검색 전문 |\n| MARKET_INQUIRY | ["search_team"] | 시세 데이터 조회 |\n| LOAN_CONSULT | ["search_team", "analysis_team"] | 대출 정보 조회 후 분석 |\n| CONTRACT_CREATION | ["document_team"] | 문서 생성 전문 |\n| CONTRACT_REVIEW | ["search_team", "analysis_team"] | 법률 검토 및 리스크 분석 |\n| COMPREHENSIVE | ["search_team", "analysis_team"] | 종합 정보 수집 및 분석 |\n| RISK_ANALYSIS | ["analysis_team"] | 리스크 평가 전문 |\n| UNCLEAR | ["search_team", "analysis_team"] | 포괄적 대응 |\n\n## 복합 질문 처리 예시\n\n### 예시 1: 순차적 처리\n질문: "강남구 시세 확인하고 투자 가치 분석해줘"\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "먼저 search_team이 시세 데이터를 수집하고, 그 결과를 analysis_team이 분석하여 투자 가치 평가"\n}\n```\n\n### 예시 2: 병렬 처리 가능\n질문: "법률 정보와 시세 정보 모두 알려줘"\n```json\n{\n    "selected_agents": ["search_team"],\n    "reasoning": "search_team이 법률과 시세 정보를 병렬로 조회 가능. 두 작업이 독립적이므로 동시 처리"\n}\n```\n\n### 예시 3: 3단계 파이프라인\n질문: "시세 조회하고 분석한 후 계약서 작성해줘"\n```json\n{\n    "selected_agents": ["search_team", "analysis_team", "document_team"],\n    "reasoning": "search_team이 데이터 수집 → analysis_team이 분석 → document_team이 분석 결과 기반 계약서 작성"\n}\n```\n\n## 응답 형식 (JSON)\n\n{\n    "selected_agents": ["선택된 agent/team 목록"],\n    "reasoning": "선택 이유를 구체적으로 설명. 각 Agent의 역할과 처리 순서 포함",\n    "coordination": "single/sequential/parallel/pipeline",\n    "dependencies": {"agent2": ["agent1"]},\n    "estimated_time": 30,\n    "confidence": 0.9\n}\n\n## 선택 가이드라인\n\n1. **최소 Agent 원칙**: 가능한 적은 수의 Agent로 처리\n2. **전문성 우선**: 해당 작업에 가장 전문적인 Agent 선택\n3. **효율성 고려**: 병렬 처리 가능한 경우 명시\n4. **의존성 관리**: 데이터 흐름을 고려한 순서 지정\n5. **폴백 전략**: 불확실한 경우 ["search_team", "analysis_team"] 조합\n\n## 주의사항\n\n- selected_agents는 반드시 배열 형태\n- Agent 이름은 정확히: "search_team", "analysis_team", "document_team"\n- 최소 1개, 최대 3개 선택\n- 순서는 실행 우선순위 (앞에 있을수록 먼저 실행)\n- reasoning은 상세하고 논리적으로 작성\n- coordination 필드로 실행 방식 명시\n- 복합 질문의 경우 의존성 관계 명확히 표시'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 14:44:30,023 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 14:44:30,023 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 14:44:30,023 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 14:44:30,023 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 14:44:30,024 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 14:44:30,024 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 14:44:32,367 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 05:44:32 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'2140'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'2162'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9881'), (b'x-ratelimit-remaining-tokens', b'198426'), (b'x-ratelimit-reset-requests', b'17m1.322s'), (b'x-ratelimit-reset-tokens', b'472ms'), (b'x-request-id', b'req_d7cbc65235e243d59b9d19ccbf9411d3'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989a9b837f02e9fb-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 14:44:32,367 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 14:44:32,367 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 14:44:32,373 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 14:44:32,373 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 14:44:32,373 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 14:44:32,373 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 05:44:32 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '2140', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '2162', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9881', 'x-ratelimit-remaining-tokens': '198426', 'x-ratelimit-reset-requests': '17m1.322s', 'x-ratelimit-reset-tokens': '472ms', 'x-request-id': 'req_d7cbc65235e243d59b9d19ccbf9411d3', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989a9b837f02e9fb-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 14:44:32,373 - openai._base_client - DEBUG - request_id: req_d7cbc65235e243d59b9d19ccbf9411d3
2025-10-05 14:44:32,374 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: agent_selection | Model: gpt-4o-mini-2024-07-18 | Tokens: 1800 (prompt: 1712, completion: 88)
2025-10-05 14:44:32,374 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM agent selection reasoning: 사용자의 요청은 계약 갱신 청구권에 대한 법률 상담으로, 법률 정보 검색이 필요한 상황입니다. search_team은 법률 정보 검색 전문이므로 적합합니다.
2025-10-05 14:44:32,374 - app.service_agent.cognitive_agents.planning_agent - INFO - ✅ Primary LLM selected agents: ['search_team']
2025-10-05 14:44:32,374 - __main__ - INFO -   의도: 법률상담
2025-10-05 14:44:32,374 - __main__ - INFO -   신뢰도: 0.85
2025-10-05 14:44:32,374 - __main__ - INFO -   추천 Agent: ['search_team']
2025-10-05 14:44:32,374 - __main__ - INFO - 
[Step 2] Query Decomposition...
2025-10-05 14:44:32,374 - app.service_agent.cognitive_agents.query_decomposer - INFO - Decomposing query: 계약 갱신 청구권 확인하고 행사 방법 알려줘...
2025-10-05 14:44:32,374 - app.service_agent.cognitive_agents.query_decomposer - DEBUG - Found compound indicator: 하고
2025-10-05 14:44:32,374 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-7610c051-30cc-400a-8f3e-2987b147f9d0', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 질문 분해 전문가입니다.\n복잡한 사용자 질문을 독립적으로 처리 가능한 작업 단위로 분해하는 것이 목표입니다.\n\n## 중요 원칙:\n1. 각 작업은 하나의 명확한 목표를 가져야 합니다\n2. 작업 간 의존성을 명확히 파악해야 합니다\n3. 병렬 처리 가능한 작업은 구분해야 합니다\n4. 불필요한 분해는 피해야 합니다 (단순 질문은 분해하지 않음)\n\n## 작업 유형 (type):\n- search: 정보 검색 (법률, 시세, 대출 정보 등)\n- analysis: 데이터 분석 (리스크 평가, 시장 분석 등)\n- generation: 문서 생성 (계약서 작성 등)\n- review: 검토/평가 (계약서 검토, 조건 확인 등)\n- calculation: 계산/산출 (대출 한도, 세금 등)\n- comparison: 비교 분석 (여러 옵션 비교)\n\n## 담당 팀 (agent):\n- search_team: 법률, 시세, 대출 정보 검색\n- analysis_team: 데이터 분석, 리스크 평가, 계산\n- document_team: 문서 생성, 계약서 작성\n\n## 학습 예시:\n\n### 예시 1: 복합 질문 (순차적)\n질문: "강남구 아파트 시세 확인하고 대출 가능 금액 계산해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "강남구 아파트 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "대출 가능 금액 계산",\n            "type": "calculation",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "required_data": {"price": "task_0.result.price"},\n            "estimated_time": 15\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "시세 정보가 있어야 대출 금액 계산이 가능하므로 순차 실행"\n}\n```\n\n### 예시 2: 복합 질문 (병렬 가능)\n질문: "이 지역 전세 시세와 매매 시세 모두 알려주고 비교 분석해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "전세 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "매매 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "전세/매매 시세 비교 분석",\n            "type": "comparison",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0", "task_1"],\n            "required_data": {\n                "lease_price": "task_0.result",\n                "sale_price": "task_1.result"\n            },\n            "estimated_time": 25\n        }\n    ],\n    "execution_mode": "mixed",\n    "parallel_groups": [["task_0", "task_1"], ["task_2"]],\n    "reasoning": "시세 조회는 독립적이므로 병렬 처리, 비교는 두 결과 필요"\n}\n```\n\n### 예시 3: 복합 질문 (3단계 이상)\n질문: "이 계약서 검토해서 위험한 부분 찾고 수정안 만들어서 최종 계약서 작성해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "계약서 내용 전체 검토",\n            "type": "review",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 30\n        },\n        {\n            "description": "위험 요소 및 문제점 분석",\n            "type": "analysis",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "estimated_time": 25\n        },\n        {\n            "description": "수정안 제안 생성",\n            "type": "generation",\n            "agent": "document_team",\n            "priority": 3,\n            "depends_on": ["task_1"],\n            "estimated_time": 20\n        },\n        {\n            "description": "최종 계약서 작성",\n            "type": "generation",\n            "agent": "document_team",\n            "priority": 4,\n            "depends_on": ["task_2"],\n            "estimated_time": 30\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "각 단계가 이전 결과에 의존하므로 순차 실행 필요"\n}\n```\n\n### 예시 4: 단순 질문 (분해 불필요)\n질문: "전세금 인상률 상한이 얼마야?"\n분해:\n```json\n{\n    "is_compound": false,\n    "sub_tasks": [\n        {\n            "description": "전세금 인상률 상한 법률 정보 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 15\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "단일 정보 조회 요청으로 분해 불필요"\n}\n```\n\n### 예시 5: 조건부 실행\n질문: "이 물건 시세 확인하고 적정가면 대출 상담도 받고 싶어"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "물건 시세 조회 및 적정성 평가",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 25\n        },\n        {\n            "description": "대출 상담 정보 제공",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "optional": true,\n            "context": {"condition": "if_reasonable_price"},\n            "estimated_time": 20\n        }\n    ],\n    "execution_mode": "conditional",\n    "reasoning": "시세 확인 결과에 따라 대출 상담 진행 여부 결정"\n}\n```\n\n## Chain-of-Thought 프로세스:\n\n1. **질문 분석**: 어떤 정보나 작업을 요구하는가?\n2. **연결어 확인**: "그리고", "또한", "해서", "한 후" 등이 있는가?\n3. **의존성 파악**: 어떤 작업이 다른 작업의 결과를 필요로 하는가?\n4. **병렬성 판단**: 독립적으로 실행 가능한 작업이 있는가?\n5. **최적화**: 불필요한 분해는 없는가?\n\n## 응답 형식 (JSON):\n\n{\n    "is_compound": true/false,\n    "sub_tasks": [\n        {\n            "description": "작업 설명",\n            "type": "작업 유형",\n            "agent": "담당 팀",\n            "priority": 우선순위 (1이 가장 높음),\n            "depends_on": ["선행 작업 ID 리스트"],\n            "required_data": {"필요한 데이터 매핑"},\n            "estimated_time": 예상 소요 시간(초),\n            "optional": true/false,\n            "context": {"추가 컨텍스트"}\n        }\n    ],\n    "execution_mode": "sequential/parallel/mixed/conditional",\n    "parallel_groups": [["병렬 실행 가능한 작업 ID 그룹"]],\n    "confidence": 0.0-1.0,\n    "reasoning": "분해 결정의 이유와 근거"\n}\n\n## 분해 가이드라인:\n\n1. **분해가 필요한 경우**:\n   - 여러 종류의 정보를 요청하는 경우\n   - 순차적 처리가 필요한 경우 (A의 결과로 B 수행)\n   - 서로 다른 팀의 전문성이 필요한 경우\n\n2. **분해가 불필요한 경우**:\n   - 단일 정보 조회\n   - 단순한 질문-답변\n   - 하나의 팀에서 완전히 처리 가능한 경우\n\n3. **병렬 처리 기준**:\n   - 서로 독립적인 정보 조회\n   - 의존성이 없는 분석 작업\n   - 동시에 진행해도 충돌하지 않는 작업\n\n4. **우선순위 설정**:\n   - 의존성이 없는 작업: priority 1\n   - 1차 의존 작업: priority 2\n   - 2차 의존 작업: priority 3\n   - 이런 식으로 증가\n\n현재 의도: 법률상담\n추출된 엔티티: None\n\n분석할 질문: 계약 갱신 청구권 확인하고 행사 방법 알려줘'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 14:44:32,375 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 14:44:32,375 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 14:44:32,375 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 14:44:32,375 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 14:44:32,375 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 14:44:32,375 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 14:44:36,080 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 05:44:36 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'3500'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'3516'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9880'), (b'x-ratelimit-remaining-tokens', b'197996'), (b'x-ratelimit-reset-requests', b'17m16.247s'), (b'x-ratelimit-reset-tokens', b'601ms'), (b'x-request-id', b'req_6848336137574f9e850ddb688667d2dd'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989a9b922886e9fb-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 14:44:36,080 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 14:44:36,080 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 14:44:36,082 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 14:44:36,082 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 14:44:36,082 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 14:44:36,083 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 05:44:36 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '3500', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '3516', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9880', 'x-ratelimit-remaining-tokens': '197996', 'x-ratelimit-reset-requests': '17m16.247s', 'x-ratelimit-reset-tokens': '601ms', 'x-request-id': 'req_6848336137574f9e850ddb688667d2dd', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989a9b922886e9fb-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 14:44:36,083 - openai._base_client - DEBUG - request_id: req_6848336137574f9e850ddb688667d2dd
2025-10-05 14:44:36,083 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: query_decomposition | Model: gpt-4o-mini-2024-07-18 | Tokens: 2187 (prompt: 2005, completion: 182)
2025-10-05 14:44:36,083 - app.service_agent.cognitive_agents.query_decomposer - INFO - Successfully decomposed into 2 tasks
2025-10-05 14:44:36,083 - __main__ - INFO -   복합 질문: True
2025-10-05 14:44:36,083 - __main__ - INFO -   작업 수: 2
2025-10-05 14:44:36,083 - __main__ - INFO -   실행 모드: sequential
2025-10-05 14:44:36,083 - __main__ - INFO -     - task_0: 계약 갱신 청구권 관련 법률 정보 조회 (search_team)
2025-10-05 14:44:36,083 - __main__ - INFO -     - task_1: 계약 갱신 청구권 행사 방법 안내 (search_team)
2025-10-05 14:44:36,083 - __main__ - INFO - 
[Step 3] Comprehensive Plan 생성...
2025-10-05 14:44:36,083 - app.service_agent.cognitive_agents.planning_agent - INFO - Creating comprehensive plan for query: 계약 갱신 청구권 확인하고 행사 방법 알려줘...
2025-10-05 14:44:36,083 - app.service_agent.cognitive_agents.planning_agent - INFO - Analyzing intent for query: 계약 갱신 청구권 확인하고 행사 방법 알려줘...
2025-10-05 14:44:36,084 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-35d563ab-365b-4d9f-8df1-124dd811f915', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 의도 분석 전문가입니다.\n사용자의 질문을 정확히 이해하고, 어떤 종류의 도움이 필요한지 분류해야 합니다.\n\n## 중요: 복합 질문 처리\n복합적인 질문(여러 의도가 섞인 질문)의 경우, 가장 핵심적인 의도를 파악하되,\nsub_intents 필드에 부가적인 의도들도 함께 기록해주세요.\n\n## 분류 카테고리 설명:\n\n1. **LEGAL_CONSULT (법률상담)**\n   - 설명: 부동산 관련 법률, 권리, 의무에 대한 질문\n   - 예시:\n     * 단순: "전세금 5% 인상이 가능한가요?", "임대차계약 갱신 거부할 수 있나요?"\n     * 복합: "전세금 인상 가능한지 확인하고 법적 근거도 알려주세요"\n   - 키워드: 법, 전세, 임대, 보증금, 계약, 권리, 의무, 갱신, 임차인, 임대인, 법률, 규정, 조항\n   - 필요한 처리: 법률 데이터베이스 검색, 관련 법조항 찾기\n\n2. **MARKET_INQUIRY (시세조회)**\n   - 설명: 부동산 시장 가격, 시세, 거래 동향에 대한 질문\n   - 예시:\n     * 단순: "강남구 아파트 전세 시세 알려주세요", "서초동 매매가 얼마나 올랐나요?"\n     * 복합: "강남구 시세 확인하고 대출 가능 금액도 계산해줘"\n   - 키워드: 시세, 가격, 매매가, 전세가, 월세, 시장, 동향, 평균, 지역명, 상승률, 하락률\n   - 필요한 처리: 부동산 시세 데이터 조회, 지역별 가격 분석\n\n3. **LOAN_CONSULT (대출상담)**\n   - 설명: 주택담보대출, 전세자금대출 등 금융 관련 질문\n   - 예시:\n     * 단순: "전세자금대출 한도가 얼마인가요?", "LTV가 뭔가요?"\n     * 복합: "대출 한도 확인하고 금리 비교도 해주세요"\n   - 키워드: 대출, 금리, 한도, 조건, 상환, LTV, DTI, DSR, 담보, 금융, 은행\n   - 필요한 처리: 대출 상품 조회, 금리 정보 검색, 한도 계산\n\n4. **CONTRACT_CREATION (계약서작성)**\n   - 설명: 새로운 계약서나 문서를 작성해달라는 요청\n   - 예시:\n     * 단순: "임대차계약서 작성해주세요", "전세계약서 초안 만들어주세요"\n     * 복합: "계약서 작성하고 주의사항도 검토해주세요"\n   - 키워드: 작성, 만들, 생성, 초안, 계약서, 문서, 양식\n   - 필요한 처리: 문서 생성 에이전트 호출, 템플릿 기반 작성\n\n5. **CONTRACT_REVIEW (계약서검토)**\n   - 설명: 기존 계약서나 문서를 검토해달라는 요청\n   - 예시:\n     * 단순: "이 계약서 검토해주세요", "특약사항 문제없나요?"\n     * 복합: "계약서 검토하고 수정사항도 제안해주세요"\n   - 키워드: 검토, 확인, 점검, 리뷰, 분석해, 살펴봐, 체크\n   - 필요한 처리: 문서 분석, 위험 요소 식별, 개선사항 제안\n\n6. **COMPREHENSIVE (종합분석)**\n   - 설명: 여러 측면을 종합적으로 분석해달라는 요청\n   - 예시:\n     * 단순: "이 물건 전체적으로 분석해주세요"\n     * 복합: "시세, 법률, 대출 모두 검토해서 종합 의견 주세요"\n   - 키워드: 종합, 전체, 모든, 전반적, 종합적, 평가, 분석\n   - 필요한 처리: 다중 데이터 소스 통합 분석\n\n7. **RISK_ANALYSIS (리스크분석)**\n   - 설명: 위험 요소나 주의사항에 대한 질문\n   - 예시:\n     * 단순: "이 계약 위험한가요?", "주의할 점 알려주세요"\n     * 복합: "리스크 분석하고 대안도 제시해주세요"\n   - 키워드: 위험, 리스크, 주의, 문제점, 조심, 걱정, 우려\n   - 필요한 처리: 위험 요소 분석, 주의사항 추출\n\n8. **UNCLEAR (불분명)**\n   - 설명: 의도를 명확히 파악하기 어려운 질문\n   - 예시: "이거 좀 봐주세요", "어떻게 해야 할까요?", "도와주세요"\n   - 처리: 추가 질문으로 의도 명확화 필요\n\n9. **IRRELEVANT (무관)**\n   - 설명: 부동산과 전혀 관련 없는 질문\n   - 예시: "날씨 어때?", "저녁 뭐 먹지?", "주식 추천해줘"\n   - 처리: 부동산 관련 질문을 유도\n\n## 복합 질문 예시와 분석:\n\n### 예시 1: "강남구 아파트 시세 알려주고 전세자금대출 가능한지도 확인해줘"\n- 주 의도: MARKET_INQUIRY (시세 조회가 먼저 필요)\n- 부가 의도: LOAN_CONSULT (대출 확인)\n- 분해: ["강남구 아파트 시세 조회", "전세자금대출 가능 여부 확인"]\n\n### 예시 2: "이 계약서 검토해서 위험한 부분 있는지 알려주고 수정 제안도 해줘"\n- 주 의도: CONTRACT_REVIEW (계약서 검토)\n- 부가 의도: RISK_ANALYSIS (위험 분석)\n- 분해: ["계약서 전체 검토", "위험 요소 식별", "수정사항 제안"]\n\n### 예시 3: "서초동 전세가 확인하고 법적으로 문제없는지도 봐줘"\n- 주 의도: MARKET_INQUIRY (시세 확인)\n- 부가 의도: LEGAL_CONSULT (법적 검토)\n- 분해: ["서초동 전세가 조회", "법적 이슈 검토"]\n\n## 응답 형식 (JSON 형식으로 응답):\n\n{\n    "intent": "LEGAL_CONSULT",\n    "confidence": 0.9,\n    "keywords": ["전세금", "인상", "제한"],\n    "sub_intents": [],\n    "is_compound": false,\n    "decomposed_tasks": [],\n    "entities": {\n        "location": "강남구",\n        "price": "5억",\n        "contract_type": "전세",\n        "date": "2024년",\n        "area": "84㎡",\n        "action_verbs": ["확인", "검토"]\n    },\n    "reasoning": "전세금 인상에 대한 법률 질문이므로 LEGAL_CONSULT로 분류"\n}\n\n응답 규칙:\n- intent: 위 9개 카테고리 중 하나 (대문자_언더스코어 형식)\n- confidence: 0.0~1.0 (0.8 이상이면 매우 확실, 0.5 미만이면 불확실)\n- keywords: 추출된 주요 키워드 목록\n- sub_intents: 복합 질문일 경우 부가적인 의도들\n- is_compound: 복합 질문 여부 (true/false)\n- decomposed_tasks: 복합 질문을 분해한 개별 작업들\n- entities: 추출된 엔티티 정보\n- reasoning: 분류한 이유와 근거 (상세하게)\n\n## 판단 가이드:\n- 여러 의도가 섞여있다면, 가장 주된 의도를 intent에, 나머지를 sub_intents에 기록\n- "그리고", "또한", "함께", "같이" 등의 연결어가 있으면 복합 질문일 가능성 높음\n- 법률 관련 키워드가 있으면 LEGAL_CONSULT 우선\n- 가격/시세 언급이 명확하면 MARKET_INQUIRY\n- 계약서라는 단어와 함께 "작성/만들기"가 있으면 CONTRACT_CREATION\n- 계약서라는 단어와 함께 "검토/확인"이 있으면 CONTRACT_REVIEW\n- 불확실하면 confidence를 낮게 설정하고 UNCLEAR 선택\n- 복합 질문은 is_compound를 true로 설정하고 개별 작업으로 분해\n\n분석할 질문: 계약 갱신 청구권 확인하고 행사 방법 알려줘'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 14:44:36,084 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 14:44:36,084 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 14:44:36,085 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 14:44:36,085 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 14:44:36,085 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 14:44:36,085 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 14:44:39,421 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 05:44:39 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'3124'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'3151'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9880'), (b'x-ratelimit-remaining-tokens', b'198313'), (b'x-ratelimit-reset-requests', b'17m12.538s'), (b'x-ratelimit-reset-tokens', b'506ms'), (b'x-request-id', b'req_6c11ef56394c4b94b01ee9f796ec967d'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989a9ba95e3be9fb-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 14:44:39,421 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 14:44:39,422 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 14:44:39,429 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 14:44:39,429 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 14:44:39,429 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 14:44:39,429 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 05:44:39 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '3124', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '3151', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9880', 'x-ratelimit-remaining-tokens': '198313', 'x-ratelimit-reset-requests': '17m12.538s', 'x-ratelimit-reset-tokens': '506ms', 'x-request-id': 'req_6c11ef56394c4b94b01ee9f796ec967d', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989a9ba95e3be9fb-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 14:44:39,431 - openai._base_client - DEBUG - request_id: req_6c11ef56394c4b94b01ee9f796ec967d
2025-10-05 14:44:39,431 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: intent_analysis | Model: gpt-4o-mini-2024-07-18 | Tokens: 2045 (prompt: 1923, completion: 122)
2025-10-05 14:44:39,431 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM Intent Analysis Result: {'intent': 'LEGAL_CONSULT', 'confidence': 0.85, 'keywords': ['계약', '갱신', '청구권', '행사', '방법'], 'sub_intents': [], 'is_compound': False, 'decomposed_tasks': [], 'entities': {'action_verbs': ['확인', '알려줘']}, 'reasoning': '계약 갱신 청구권에 대한 법률적 질문이므로 LEGAL_CONSULT로 분류'}
2025-10-05 14:44:39,432 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-ac9791ee-af97-4e4c-9a30-d1b95b02d212', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 Agent 선택 전문가입니다.\n사용자의 요청에 가장 적합한 Agent/Team을 선택하는 것이 목표입니다.\n\n## 현재 상황\n\n**사용자 질문:** 계약 갱신 청구권 확인하고 행사 방법 알려줘\n**분석된 의도:** 법률상담\n**추출된 키워드:** [\'계약\', \'갱신\', \'청구권\', \'행사\', \'방법\']\n\n## 사용 가능한 Agent/Team 정보\n\n{\'search_team\': {\'name\': \'search_team\', \'capabilities\': \'법률 검색, 부동산 시세 조회, 대출 상품 검색\', \'tools\': [\'legal_search\', \'market_data\', \'loan_data\'], \'use_cases\': [\'법률 상담\', \'시세 조회\', \'대출 정보\']}, \'analysis_team\': {\'name\': \'analysis_team\', \'capabilities\': \'데이터 분석, 리스크 평가, 인사이트 생성, 추천\', \'tools\': [\'data_analyzer\', \'risk_evaluator\'], \'use_cases\': [\'시장 분석\', \'리스크 평가\', \'투자 분석\']}, \'document_team\': {\'name\': \'document_team\', \'capabilities\': \'계약서 작성, 문서 생성, 문서 검토\', \'tools\': [\'document_generator\', \'contract_reviewer\'], \'use_cases\': [\'계약서 작성\', \'문서 검토\']}}\n\n## Agent 역할 및 상세 가이드\n\n### 1. search_team (검색 팀)\n- **주요 기능**: 정보 검색 및 데이터 수집\n- **전문 분야**:\n  * 법률 정보 검색 (전세법, 임대차보호법, 부동산 관련 법규)\n  * 부동산 시세 조회 (매매가, 전세가, 월세, 실거래가)\n  * 대출 상품 정보 검색 (금리, 한도, 조건)\n  * 지역 정보 및 인프라 조회\n- **도구**: legal_search, market_data, loan_data\n- **적합한 작업**: 정보 조회, 데이터 수집, 법률 확인, 시세 파악\n- **예시**:\n  * "전세금 5% 인상 가능한가요?"\n  * "강남구 아파트 전세 시세"\n  * "전세자금대출 한도 얼마?"\n\n### 2. analysis_team (분석 팀)\n- **주요 기능**: 데이터 분석 및 평가\n- **전문 분야**:\n  * 시장 동향 분석 (상승률, 하락률, 추세)\n  * 리스크 평가 (계약, 투자 위험도)\n  * 투자 수익률 계산 (ROI, 월세 수익률)\n  * 대출 한도 및 조건 분석 (LTV, DTI, DSR)\n  * 비교 분석 (지역별, 상품별)\n- **도구**: data_analyzer, risk_evaluator, calculator\n- **적합한 작업**: 데이터 분석, 리스크 평가, 계산, 비교, 예측\n- **의존성**: 보통 search_team의 데이터가 필요\n- **예시**:\n  * "이 지역 투자 가치 분석해줘"\n  * "계약 리스크 평가해줘"\n  * "대출 가능 금액 계산해줘"\n\n### 3. document_team (문서 팀)\n- **주요 기능**: 문서 생성 및 관리\n- **전문 분야**:\n  * 계약서 작성 (임대차, 매매, 전세)\n  * 문서 템플릿 관리\n  * 특약사항 생성\n  * 계약서 수정안 작성\n  * 법률 문서 검토\n- **도구**: document_generator, contract_template, contract_reviewer\n- **적합한 작업**: 문서 작성, 계약서 생성, 문서 수정, 검토\n- **예시**:\n  * "임대차계약서 작성해줘"\n  * "특약사항 추가해줘"\n  * "계약서 수정안 만들어줘"\n\n## Agent 선택 전략\n\n### 1단계: 작업 유형 식별\n```\n정보 필요 → search_team\n분석/계산 필요 → analysis_team\n문서 작성 필요 → document_team\n```\n\n### 2단계: 의존성 분석\n```\n독립적 작업 → 단일 팀\n순차적 의존 → 여러 팀 (순서 중요)\n병렬 가능 → 여러 팀 (순서 무관)\n```\n\n### 3단계: 최적화\n```\n중복 제거 → 가장 적합한 팀만 선택\n효율성 → 병렬 처리 가능한 경우 표시\n```\n\n## 의도별 Agent 매핑 가이드\n\n| 의도 (Intent) | 추천 Agent 조합 | 이유 |\n|--------------|-----------------|------|\n| LEGAL_CONSULT | ["search_team"] | 법률 정보 검색 전문 |\n| MARKET_INQUIRY | ["search_team"] | 시세 데이터 조회 |\n| LOAN_CONSULT | ["search_team", "analysis_team"] | 대출 정보 조회 후 분석 |\n| CONTRACT_CREATION | ["document_team"] | 문서 생성 전문 |\n| CONTRACT_REVIEW | ["search_team", "analysis_team"] | 법률 검토 및 리스크 분석 |\n| COMPREHENSIVE | ["search_team", "analysis_team"] | 종합 정보 수집 및 분석 |\n| RISK_ANALYSIS | ["analysis_team"] | 리스크 평가 전문 |\n| UNCLEAR | ["search_team", "analysis_team"] | 포괄적 대응 |\n\n## 복합 질문 처리 예시\n\n### 예시 1: 순차적 처리\n질문: "강남구 시세 확인하고 투자 가치 분석해줘"\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "먼저 search_team이 시세 데이터를 수집하고, 그 결과를 analysis_team이 분석하여 투자 가치 평가"\n}\n```\n\n### 예시 2: 병렬 처리 가능\n질문: "법률 정보와 시세 정보 모두 알려줘"\n```json\n{\n    "selected_agents": ["search_team"],\n    "reasoning": "search_team이 법률과 시세 정보를 병렬로 조회 가능. 두 작업이 독립적이므로 동시 처리"\n}\n```\n\n### 예시 3: 3단계 파이프라인\n질문: "시세 조회하고 분석한 후 계약서 작성해줘"\n```json\n{\n    "selected_agents": ["search_team", "analysis_team", "document_team"],\n    "reasoning": "search_team이 데이터 수집 → analysis_team이 분석 → document_team이 분석 결과 기반 계약서 작성"\n}\n```\n\n## 응답 형식 (JSON)\n\n{\n    "selected_agents": ["선택된 agent/team 목록"],\n    "reasoning": "선택 이유를 구체적으로 설명. 각 Agent의 역할과 처리 순서 포함",\n    "coordination": "single/sequential/parallel/pipeline",\n    "dependencies": {"agent2": ["agent1"]},\n    "estimated_time": 30,\n    "confidence": 0.9\n}\n\n## 선택 가이드라인\n\n1. **최소 Agent 원칙**: 가능한 적은 수의 Agent로 처리\n2. **전문성 우선**: 해당 작업에 가장 전문적인 Agent 선택\n3. **효율성 고려**: 병렬 처리 가능한 경우 명시\n4. **의존성 관리**: 데이터 흐름을 고려한 순서 지정\n5. **폴백 전략**: 불확실한 경우 ["search_team", "analysis_team"] 조합\n\n## 주의사항\n\n- selected_agents는 반드시 배열 형태\n- Agent 이름은 정확히: "search_team", "analysis_team", "document_team"\n- 최소 1개, 최대 3개 선택\n- 순서는 실행 우선순위 (앞에 있을수록 먼저 실행)\n- reasoning은 상세하고 논리적으로 작성\n- coordination 필드로 실행 방식 명시\n- 복합 질문의 경우 의존성 관계 명확히 표시'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 14:44:39,432 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 14:44:39,432 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 14:44:39,432 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 14:44:39,432 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 14:44:39,433 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 14:44:39,433 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
