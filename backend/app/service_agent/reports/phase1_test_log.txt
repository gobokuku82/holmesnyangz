2025-10-05 16:54:24,397 - __main__ - INFO - ================================================================================
2025-10-05 16:54:24,397 - __main__ - INFO - Phase 1 Test Runner 초기화 중...
2025-10-05 16:54:24,397 - __main__ - INFO - ================================================================================
2025-10-05 16:54:24,397 - __main__ - INFO - ✓ LLM Context 초기화 완료
2025-10-05 16:54:24,398 - app.service_agent.llm_manager.prompt_manager - DEBUG - PromptManager initialized with directory: C:\kdy\Projects\holmesnyangz\beta_v001\backend\app\service_agent\llm_manager\prompts
2025-10-05 16:54:24,398 - httpx - DEBUG - load_ssl_context verify=True cert=None trust_env=True http2=False
2025-10-05 16:54:24,399 - httpx - DEBUG - load_verify_locations cafile='C:\\kdy\\Projects\\holmesnyangz\\beta_v001\\venv\\Lib\\site-packages\\certifi\\cacert.pem'
2025-10-05 16:54:24,600 - app.service_agent.llm_manager.llm_service - DEBUG - Created new sync OpenAI client
2025-10-05 16:54:24,600 - httpx - DEBUG - load_ssl_context verify=True cert=None trust_env=True http2=False
2025-10-05 16:54:24,600 - httpx - DEBUG - load_verify_locations cafile='C:\\kdy\\Projects\\holmesnyangz\\beta_v001\\venv\\Lib\\site-packages\\certifi\\cacert.pem'
2025-10-05 16:54:24,801 - app.service_agent.llm_manager.llm_service - DEBUG - Created new async OpenAI client
2025-10-05 16:54:24,801 - __main__ - INFO - ✓ Planning Agent 초기화 완료
2025-10-05 16:54:24,802 - app.service_agent.llm_manager.prompt_manager - DEBUG - PromptManager initialized with directory: C:\kdy\Projects\holmesnyangz\beta_v001\backend\app\service_agent\llm_manager\prompts
2025-10-05 16:54:24,802 - __main__ - INFO - ✓ Query Decomposer 초기화 완료
2025-10-05 16:54:24,802 - __main__ - INFO - 시스템 초기화 완료

2025-10-05 16:54:24,802 - __main__ - INFO - 

================================================================================
2025-10-05 16:54:24,802 - __main__ - INFO - Phase 1 테스트 시작
2025-10-05 16:54:24,802 - __main__ - INFO - ================================================================================

2025-10-05 16:54:24,802 - __main__ - INFO - 테스트 데이터 로드: C:\kdy\Projects\holmesnyangz\beta_v001\backend\app\service_agent\reports\tests\test_queries_phase1.json
2025-10-05 16:54:24,802 - __main__ - INFO - 총 40개 질문 로드 완료

2025-10-05 16:54:24,802 - __main__ - INFO - 
================================================================================
2025-10-05 16:54:24,802 - __main__ - INFO - PART 1: 단일 질문 테스트 (20개)
2025-10-05 16:54:24,802 - __main__ - INFO - ================================================================================
2025-10-05 16:54:24,802 - __main__ - INFO - 
================================================================================
2025-10-05 16:54:24,802 - __main__ - INFO - [1] 단일 질문 테스트: S001
2025-10-05 16:54:24,802 - __main__ - INFO - 질문: 전세금 5% 인상 제한이 언제까지인가요?
2025-10-05 16:54:24,802 - __main__ - INFO - ================================================================================
2025-10-05 16:54:24,802 - __main__ - INFO - 
[Step 1] Intent 분석...
2025-10-05 16:54:24,802 - app.service_agent.cognitive_agents.planning_agent - INFO - Analyzing intent for query: 전세금 5% 인상 제한이 언제까지인가요?...
2025-10-05 16:54:24,803 - app.service_agent.llm_manager.prompt_manager - DEBUG - Loading prompt from: C:\kdy\Projects\holmesnyangz\beta_v001\backend\app\service_agent\llm_manager\prompts\cognitive\intent_analysis.txt
2025-10-05 16:54:25,047 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-d01d0ca9-fbb9-41e8-923e-2632a0087819', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 의도 분석 전문가입니다.\n사용자의 질문을 정확히 이해하고, 어떤 종류의 도움이 필요한지 분류해야 합니다.\n\n## Chain-of-Thought 분석 프로세스\n\n질문을 분석할 때 다음 단계를 **순서대로** 따르세요:\n\n### 1단계: 질문 구조 파악\n- 단순 정보 요청인가? (예: "~이 뭐야?", "~알려줘")\n- 상황 설명이 포함되어 있는가? (배경, 현재 상태)\n- 구체적 수치나 데이터가 있는가? (금액, 비율, 기간 등)\n- 문제 해결을 요구하는가? (예: "어떻게 해야 해?", "방법 알려줘")\n\n### 2단계: 요청 유형 판단\n- **정보 확인형**: 사실, 개념, 규정 확인 → 검색만으로 충분\n- **평가/판단형**: "괜찮아?", "적절해?", "문제있어?" → 검색 + 분석 필요\n- **해결책 요청형**: "어떻게?", "방법?", "대처?" → 검색 + 분석 + 제안 필요\n- **비교/선택형**: "A vs B", "어느게 나아?" → 검색 + 분석(비교) 필요\n\n### 3단계: 복잡도 평가\n- **저**: 단일 개념/사실 확인 (예: "전세금 인상률 한도?")\n- **중**: 특정 상황 + 판단 (예: "3억을 5억으로 올려달래. 가능해?")\n- **고**: 복잡한 상황 + 여러 조건 + 해결책 (예: "10년 거주, 3억→10억 요구. 어떻게 해야 해?")\n\n### 4단계: 필요한 처리 결정\n- **검색만**: 정보 확인형 + 저복잡도\n- **검색+분석**: 평가/판단형 OR 중복잡도 OR 수치 비교 포함\n- **종합처리**: 해결책 요청형 OR 고복잡도 OR 여러 조건 동시 고려\n\n### 5단계: 최종 검증\n- 선택한 의도로 사용자 질문에 완전히 답변 가능한가?\n- 단순 정보 제공으로 끝나는가, 아니면 추가 분석/판단이 필요한가?\n- 상황 설명이 있으면서 "해결", "방법", "어떻게" 등이 있으면 → COMPREHENSIVE 고려\n\n## 중요: 복합 질문 처리\n복합적인 질문(여러 의도가 섞인 질문)의 경우, 가장 핵심적인 의도를 파악하되,\nsub_intents 필드에 부가적인 의도들도 함께 기록해주세요.\n\n**특히 주의**:\n- 법률 키워드가 있어도, "해결방법", "어떻게 해야" 같은 표현이 있으면 단순 LEGAL_CONSULT가 아닐 수 있음\n- 구체적 상황(금액, 기간 등) + 해결책 요구 = COMPREHENSIVE 또는 복합 의도로 분류\n\n## 분류 카테고리 설명:\n\n1. **LEGAL_CONSULT (법률상담)**\n   - 설명: 부동산 관련 법률, 권리, 의무에 대한 질문\n   - 예시:\n     * 단순: "전세금 5% 인상이 가능한가요?", "임대차계약 갱신 거부할 수 있나요?"\n     * 복합: "전세금 인상 가능한지 확인하고 법적 근거도 알려주세요"\n   - 키워드: 법, 전세, 임대, 보증금, 계약, 권리, 의무, 갱신, 임차인, 임대인, 법률, 규정, 조항\n   - 필요한 처리: 법률 데이터베이스 검색, 관련 법조항 찾기\n\n2. **MARKET_INQUIRY (시세조회)**\n   - 설명: 부동산 시장 가격, 시세, 거래 동향에 대한 질문\n   - 예시:\n     * 단순: "강남구 아파트 전세 시세 알려주세요", "서초동 매매가 얼마나 올랐나요?"\n     * 복합: "강남구 시세 확인하고 대출 가능 금액도 계산해줘"\n   - 키워드: 시세, 가격, 매매가, 전세가, 월세, 시장, 동향, 평균, 지역명, 상승률, 하락률\n   - 필요한 처리: 부동산 시세 데이터 조회, 지역별 가격 분석\n\n3. **LOAN_CONSULT (대출상담)**\n   - 설명: 주택담보대출, 전세자금대출 등 금융 관련 질문\n   - 예시:\n     * 단순: "전세자금대출 한도가 얼마인가요?", "LTV가 뭔가요?"\n     * 복합: "대출 한도 확인하고 금리 비교도 해주세요"\n   - 키워드: 대출, 금리, 한도, 조건, 상환, LTV, DTI, DSR, 담보, 금융, 은행\n   - 필요한 처리: 대출 상품 조회, 금리 정보 검색, 한도 계산\n\n4. **CONTRACT_CREATION (계약서작성)**\n   - 설명: 새로운 계약서나 문서를 작성해달라는 요청\n   - 예시:\n     * 단순: "임대차계약서 작성해주세요", "전세계약서 초안 만들어주세요"\n     * 복합: "계약서 작성하고 주의사항도 검토해주세요"\n   - 키워드: 작성, 만들, 생성, 초안, 계약서, 문서, 양식\n   - 필요한 처리: 문서 생성 에이전트 호출, 템플릿 기반 작성\n\n5. **CONTRACT_REVIEW (계약서검토)**\n   - 설명: 기존 계약서나 문서를 검토해달라는 요청\n   - 예시:\n     * 단순: "이 계약서 검토해주세요", "특약사항 문제없나요?"\n     * 복합: "계약서 검토하고 수정사항도 제안해주세요"\n   - 키워드: 검토, 확인, 점검, 리뷰, 분석해, 살펴봐, 체크\n   - 필요한 처리: 문서 분석, 위험 요소 식별, 개선사항 제안\n\n6. **COMPREHENSIVE (종합분석)**\n   - 설명: 여러 측면을 종합적으로 분석해달라는 요청, 또는 복잡한 상황에 대한 해결책 요청\n   - 예시:\n     * 단순: "이 물건 전체적으로 분석해주세요"\n     * 복합: "시세, 법률, 대출 모두 검토해서 종합 의견 주세요"\n     * 해결형: "10년 거주했는데 전세금 3억을 10억으로 올려달래. 어떻게 해야 해?"\n     * 상황+해결: "집주인이 계약 갱신 거부했어. 법적으로 어떻게 대응해야 할까?"\n   - 키워드: 종합, 전체, 모든, 전반적, 종합적, 평가, 분석, 어떻게, 방법, 해결, 대처\n   - 패턴: 구체적 상황 설명 + "어떻게/방법/해결" 요청\n   - 필요한 처리: 다중 데이터 소스 통합 분석, 상황 평가, 해결책 제시\n\n7. **RISK_ANALYSIS (리스크분석)**\n   - 설명: 위험 요소나 주의사항에 대한 질문\n   - 예시:\n     * 단순: "이 계약 위험한가요?", "주의할 점 알려주세요"\n     * 복합: "리스크 분석하고 대안도 제시해주세요"\n   - 키워드: 위험, 리스크, 주의, 문제점, 조심, 걱정, 우려\n   - 필요한 처리: 위험 요소 분석, 주의사항 추출\n\n8. **UNCLEAR (불분명)**\n   - 설명: 의도를 명확히 파악하기 어려운 질문\n   - 예시: "이거 좀 봐주세요", "어떻게 해야 할까요?", "도와주세요"\n   - 처리: 추가 질문으로 의도 명확화 필요\n\n9. **IRRELEVANT (무관)**\n   - 설명: 부동산과 전혀 관련 없는 질문\n   - 예시: "날씨 어때?", "저녁 뭐 먹지?", "주식 추천해줘"\n   - 처리: 부동산 관련 질문을 유도\n\n## 복합 질문 예시와 분석 (CoT 적용):\n\n### 예시 1: "강남구 아파트 시세 알려주고 전세자금대출 가능한지도 확인해줘"\n**CoT 분석**:\n1. 구조: 두 개의 요청 ("시세" + "대출")\n2. 유형: 정보 확인형 (둘 다)\n3. 복잡도: 중 (두 가지 독립적 조회)\n4. 필요 처리: 검색 + 계산/분석\n\n**결론**:\n- 주 의도: MARKET_INQUIRY (시세 조회가 먼저 필요)\n- 부가 의도: LOAN_CONSULT (대출 확인)\n- 분해: ["강남구 아파트 시세 조회", "전세자금대출 가능 여부 확인"]\n\n### 예시 2: "이 계약서 검토해서 위험한 부분 있는지 알려주고 수정 제안도 해줘"\n**CoT 분석**:\n1. 구조: 검토 + 위험 평가 + 수정안\n2. 유형: 평가/판단형 + 해결책 요청형\n3. 복잡도: 고 (3단계 처리)\n4. 필요 처리: 검토 + 분석 + 문서 생성\n\n**결론**:\n- 주 의도: CONTRACT_REVIEW (계약서 검토)\n- 부가 의도: RISK_ANALYSIS (위험 분석)\n- 분해: ["계약서 전체 검토", "위험 요소 식별", "수정사항 제안"]\n\n### 예시 3: "집주인이 짜증나, 10년 살았는데 전세금 3억을 10억으로 올려달래. 법적으로 해결방법 알려줘"\n**CoT 분석**:\n1. 구조: 상황 설명 (10년 거주, 3억→10억) + 해결책 요청\n2. 유형: 해결책 요청형 (단순 정보 X)\n3. 복잡도: 고 (구체적 상황 + 수치 비교 + 법률 + 대응방안)\n4. 필요 처리: 법률 검색 + 상황 분석 + 해결책 제시\n\n**결론**:\n- 주 의도: COMPREHENSIVE (복잡한 상황에 대한 종합 해결)\n- 부가 의도: LEGAL_CONSULT, RISK_ANALYSIS\n- 분해: ["전세금 인상 한도 법률 조회", "3억→10억 인상의 타당성 분석", "구체적 대응 방안 제시"]\n- **이유**: "법적으로"라는 키워드가 있지만, 단순 법률 확인이 아니라 구체적 상황에 대한 해결책을 요구하므로 COMPREHENSIVE\n\n### 예시 4: "전세금 인상률 상한이 얼마야?"\n**CoT 분석**:\n1. 구조: 단순 사실 확인\n2. 유형: 정보 확인형\n3. 복잡도: 저 (단일 개념)\n4. 필요 처리: 검색만\n\n**결론**:\n- 주 의도: LEGAL_CONSULT (법률 정보 조회)\n- 부가 의도: 없음\n- 분해: 필요 없음\n\n## 응답 형식 (JSON 형식으로 응답):\n\n```json\n{\n    "intent": "LEGAL_CONSULT",\n    "confidence": 0.9,\n    "keywords": ["전세금", "인상", "제한"],\n    "sub_intents": [],\n    "is_compound": false,\n    "decomposed_tasks": [],\n    "entities": {\n        "location": "강남구",\n        "price": "5억",\n        "contract_type": "전세",\n        "date": "2024년",\n        "area": "84㎡",\n        "action_verbs": ["확인", "검토"]\n    },\n    "reasoning": "전세금 인상에 대한 법률 질문이므로 LEGAL_CONSULT로 분류"\n}\n```\n\n응답 규칙:\n- intent: 위 9개 카테고리 중 하나 (대문자_언더스코어 형식)\n- confidence: 0.0~1.0 (0.8 이상이면 매우 확실, 0.5 미만이면 불확실)\n- keywords: 추출된 주요 키워드 목록\n- sub_intents: 복합 질문일 경우 부가적인 의도들\n- is_compound: 복합 질문 여부 (true/false)\n- decomposed_tasks: 복합 질문을 분해한 개별 작업들\n- entities: 추출된 엔티티 정보\n- reasoning: **반드시 CoT 5단계를 거쳐 분석한 과정을 포함** (구조 파악 → 유형 판단 → 복잡도 평가 → 필요 처리 → 최종 검증)\n\n## reasoning 작성 예시:\n"1단계(구조): 상황 설명(10년 거주, 3억→10억) + 해결책 요청 포함.\n2단계(유형): 해결책 요청형 - 단순 정보가 아닌 대응방안 필요.\n3단계(복잡도): 고 - 구체적 수치 비교와 복잡한 상황.\n4단계(처리): 법률 검색 + 상황 분석 + 해결책 제시 필요.\n5단계(검증): LEGAL_CONSULT만으로는 불충분, 종합적 분석 필요 → COMPREHENSIVE 선택"\n\n## 판단 가이드:\n- 여러 의도가 섞여있다면, 가장 주된 의도를 intent에, 나머지를 sub_intents에 기록\n- "그리고", "또한", "함께", "같이" 등의 연결어가 있으면 복합 질문일 가능성 높음\n- 법률 관련 키워드가 있으면 LEGAL_CONSULT 우선\n- 가격/시세 언급이 명확하면 MARKET_INQUIRY\n- 계약서라는 단어와 함께 "작성/만들기"가 있으면 CONTRACT_CREATION\n- 계약서라는 단어와 함께 "검토/확인"이 있으면 CONTRACT_REVIEW\n- 불확실하면 confidence를 낮게 설정하고 UNCLEAR 선택\n- 복합 질문은 is_compound를 true로 설정하고 개별 작업으로 분해\n\n분석할 질문: 전세금 5% 인상 제한이 언제까지인가요?'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 16:54:25,047 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 16:54:25,050 - httpcore.connection - DEBUG - connect_tcp.started host='api.openai.com' port=443 local_address=None timeout=5.0 socket_options=None
2025-10-05 16:54:25,061 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x000002811CFDD760>
2025-10-05 16:54:25,061 - httpcore.connection - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x000002811CB5E550> server_hostname='api.openai.com' timeout=5.0
2025-10-05 16:54:25,069 - httpcore.connection - DEBUG - start_tls.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x000002811CF4B080>
2025-10-05 16:54:25,069 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 16:54:25,070 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 16:54:25,070 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 16:54:25,070 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 16:54:25,070 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 16:54:27,591 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 07:54:27 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'2323'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'2336'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9999'), (b'x-ratelimit-remaining-tokens', b'197243'), (b'x-ratelimit-reset-requests', b'8.64s'), (b'x-ratelimit-reset-tokens', b'827ms'), (b'x-request-id', b'req_1fc154862c2b4c428591f7090f7e6753'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Set-Cookie', b'__cf_bm=4iqCo6vy5H2t.l3.N0r.BWOlq3EWYK4YaYZoOjsy6Mw-1759650867-1.0.1.1-sjKDwoO8.Z_oWMBt1XPgdcfWp74wlEOZ7T8JWTJp32CPoldzeaecCyFxLFqnIVgVg4xmixmD2pQznRqnbqL_FcGGzQdiqsrGzR7l4ksOEzs; path=/; expires=Sun, 05-Oct-25 08:24:27 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Set-Cookie', b'_cfuvid=AdWnnRKb77HmHRgDYptbASE29rOZm78KUaUDc_IUIdU-1759650867587-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b59d2ae54ea9b-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 16:54:27,592 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 16:54:27,592 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 16:54:27,602 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 16:54:27,602 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 16:54:27,602 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 16:54:27,602 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers([('date', 'Sun, 05 Oct 2025 07:54:27 GMT'), ('content-type', 'application/json'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('access-control-expose-headers', 'X-Request-ID'), ('openai-organization', 'playdata-7nkoem'), ('openai-processing-ms', '2323'), ('openai-project', 'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), ('openai-version', '2020-10-01'), ('x-envoy-upstream-service-time', '2336'), ('x-ratelimit-limit-requests', '10000'), ('x-ratelimit-limit-tokens', '200000'), ('x-ratelimit-remaining-requests', '9999'), ('x-ratelimit-remaining-tokens', '197243'), ('x-ratelimit-reset-requests', '8.64s'), ('x-ratelimit-reset-tokens', '827ms'), ('x-request-id', 'req_1fc154862c2b4c428591f7090f7e6753'), ('x-openai-proxy-wasm', 'v0.1'), ('cf-cache-status', 'DYNAMIC'), ('set-cookie', '__cf_bm=4iqCo6vy5H2t.l3.N0r.BWOlq3EWYK4YaYZoOjsy6Mw-1759650867-1.0.1.1-sjKDwoO8.Z_oWMBt1XPgdcfWp74wlEOZ7T8JWTJp32CPoldzeaecCyFxLFqnIVgVg4xmixmD2pQznRqnbqL_FcGGzQdiqsrGzR7l4ksOEzs; path=/; expires=Sun, 05-Oct-25 08:24:27 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('strict-transport-security', 'max-age=31536000; includeSubDomains; preload'), ('x-content-type-options', 'nosniff'), ('set-cookie', '_cfuvid=AdWnnRKb77HmHRgDYptbASE29rOZm78KUaUDc_IUIdU-1759650867587-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('server', 'cloudflare'), ('cf-ray', '989b59d2ae54ea9b-ICN'), ('content-encoding', 'gzip'), ('alt-svc', 'h3=":443"; ma=86400')])
2025-10-05 16:54:27,602 - openai._base_client - DEBUG - request_id: req_1fc154862c2b4c428591f7090f7e6753
2025-10-05 16:54:27,611 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: intent_analysis | Model: gpt-4o-mini-2024-07-18 | Tokens: 3383 (prompt: 3184, completion: 199)
2025-10-05 16:54:27,612 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM Intent Analysis Result: {'intent': 'LEGAL_CONSULT', 'confidence': 0.95, 'keywords': ['전세금', '인상', '제한', '언제'], 'sub_intents': [], 'is_compound': False, 'decomposed_tasks': [], 'entities': {'price': '5%', 'action_verbs': ['확인']}, 'reasoning': '1단계(구조): 단순 정보 요청으로 전세금 인상 제한에 대한 질문. 2단계(유형): 정보 확인형 - 법률적 사실 확인 필요. 3단계(복잡도): 저 - 단일 개념 확인. 4단계(처리): 법률 데이터베이스 검색 필요. 5단계(검증): 전세금 인상 제한에 대한 법률 질문이므로 LEGAL_CONSULT로 분류.'}
2025-10-05 16:54:27,612 - app.service_agent.llm_manager.prompt_manager - DEBUG - Loading prompt from: C:\kdy\Projects\holmesnyangz\beta_v001\backend\app\service_agent\llm_manager\prompts\cognitive\agent_selection.txt
2025-10-05 16:54:27,612 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-a2d32560-5c64-4cfe-9230-e1478ab14cbc', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 Agent 선택 전문가입니다.\n사용자의 요청에 가장 적합한 Agent/Team을 선택하는 것이 목표입니다.\n\n## 현재 상황\n\n**사용자 질문:** 전세금 5% 인상 제한이 언제까지인가요?\n**분석된 의도:** 법률상담\n**추출된 키워드:** [\'전세금\', \'인상\', \'제한\', \'언제\']\n\n## 사용 가능한 Agent/Team 정보\n\n{\'search_team\': {\'name\': \'search_team\', \'capabilities\': \'법률 검색, 부동산 시세 조회, 대출 상품 검색\', \'tools\': [\'legal_search\', \'market_data\', \'loan_data\'], \'use_cases\': [\'법률 상담\', \'시세 조회\', \'대출 정보\']}, \'analysis_team\': {\'name\': \'analysis_team\', \'capabilities\': \'데이터 분석, 리스크 평가, 인사이트 생성, 추천\', \'tools\': [\'data_analyzer\', \'risk_evaluator\'], \'use_cases\': [\'시장 분석\', \'리스크 평가\', \'투자 분석\']}, \'document_team\': {\'name\': \'document_team\', \'capabilities\': \'계약서 작성, 문서 생성, 문서 검토\', \'tools\': [\'document_generator\', \'contract_reviewer\'], \'use_cases\': [\'계약서 작성\', \'문서 검토\']}}\n\n## Agent 역할 및 상세 가이드\n\n### 1. search_team (검색 팀)\n- **주요 기능**: 정보 검색 및 데이터 수집\n- **전문 분야**:\n  * 법률 정보 검색 (전세법, 임대차보호법, 부동산 관련 법규)\n  * 부동산 시세 조회 (매매가, 전세가, 월세, 실거래가)\n  * 대출 상품 정보 검색 (금리, 한도, 조건)\n  * 지역 정보 및 인프라 조회\n- **도구**: legal_search, market_data, loan_data\n- **적합한 작업**: 정보 조회, 데이터 수집, 법률 확인, 시세 파악\n- **예시**:\n  * "전세금 5% 인상 가능한가요?"\n  * "강남구 아파트 전세 시세"\n  * "전세자금대출 한도 얼마?"\n\n### 2. analysis_team (분석 팀)\n- **주요 기능**: 데이터 분석 및 평가\n- **전문 분야**:\n  * 시장 동향 분석 (상승률, 하락률, 추세)\n  * 리스크 평가 (계약, 투자 위험도)\n  * 투자 수익률 계산 (ROI, 월세 수익률)\n  * 대출 한도 및 조건 분석 (LTV, DTI, DSR)\n  * 비교 분석 (지역별, 상품별)\n- **도구**: data_analyzer, risk_evaluator, calculator\n- **적합한 작업**: 데이터 분석, 리스크 평가, 계산, 비교, 예측\n- **의존성**: 보통 search_team의 데이터가 필요\n- **예시**:\n  * "이 지역 투자 가치 분석해줘"\n  * "계약 리스크 평가해줘"\n  * "대출 가능 금액 계산해줘"\n\n### 3. document_team (문서 팀)\n- **주요 기능**: 문서 생성 및 관리\n- **전문 분야**:\n  * 계약서 작성 (임대차, 매매, 전세)\n  * 문서 템플릿 관리\n  * 특약사항 생성\n  * 계약서 수정안 작성\n  * 법률 문서 검토\n- **도구**: document_generator, contract_template, contract_reviewer\n- **적합한 작업**: 문서 작성, 계약서 생성, 문서 수정, 검토\n- **예시**:\n  * "임대차계약서 작성해줘"\n  * "특약사항 추가해줘"\n  * "계약서 수정안 만들어줘"\n\n## Chain-of-Thought Agent 선택 프로세스\n\n다음 단계를 **순서대로** 따라 최적의 Agent 조합을 선택하세요:\n\n### 1단계: 질문 요구사항 파악\n- 단순 정보 조회인가? → search_team만 필요\n- 판단/평가가 필요한가? → search + analysis 필요\n- 해결책 제시가 필요한가? → search + analysis 필요\n- 문서 생성이 필요한가? → document_team 추가\n\n### 2단계: 작업 복잡도 판단\n- **단순** (검색만): "~이 뭐야?", "~알려줘" → search_team\n- **중간** (검색+판단): "~괜찮아?", "~적절해?" → search + analysis\n- **복잡** (종합 해결): 구체적 상황 + "어떻게 해야 해?" → search + analysis\n\n### 3단계: 의존성 분석\n- 독립적 작업: 단일 팀으로 처리 가능\n- 순차적 의존: 이전 결과 필요 → 여러 팀 순서대로\n- 병렬 가능: 동시 조회 가능 → coordination: "parallel"\n\n### 4단계: 최종 검증\n- 선택한 팀들로 질문에 완전히 답변 가능한가?\n- 불필요한 팀이 포함되지 않았는가?\n- 순서가 논리적인가? (데이터 흐름 고려)\n\n### 중요 원칙:\n- **법률 키워드만으로 판단하지 말 것**: "법적으로 어떻게 해야 해?" = 법률 검색 + 분석 필요\n- **상황 설명 + 해결책 요청** = 반드시 analysis_team 포함\n- **구체적 수치 비교** (3억→10억 같은) = analysis_team 필요\n\n## 의도별 Agent 매핑 가이드 (기본 가이드 - CoT로 조정 가능)\n\n| 의도 (Intent) | 기본 조합 | 상황별 조정 |\n|--------------|-----------|-------------|\n| LEGAL_CONSULT | ["search_team"] | 해결책 요청시 → + analysis_team |\n| MARKET_INQUIRY | ["search_team"] | 비교/평가시 → + analysis_team |\n| LOAN_CONSULT | ["search_team", "analysis_team"] | 계산 필수 |\n| CONTRACT_CREATION | ["document_team"] | 검토 후 작성 → search + document |\n| CONTRACT_REVIEW | ["search_team", "analysis_team"] | 법률 검토 + 리스크 분석 |\n| COMPREHENSIVE | ["search_team", "analysis_team"] | **항상 분석 포함** |\n| RISK_ANALYSIS | ["analysis_team"] | 법률 근거 필요시 → search + analysis |\n| UNCLEAR | ["search_team", "analysis_team"] | 포괄적 대응 |\n\n**중요**: 위 매핑은 **기본 가이드**일 뿐입니다.\n실제 질문의 내용(CoT 분석 결과)에 따라 조정하세요!\n\n## 복합 질문 처리 예시 (CoT 적용)\n\n### 예시 1: 순차적 처리\n질문: "강남구 시세 확인하고 투자 가치 분석해줘"\n**CoT 분석**:\n1. 요구사항: 시세 조회 + 투자 가치 평가\n2. 복잡도: 중간 (검색 + 분석)\n3. 의존성: 시세 데이터 → 투자 분석 (순차)\n4. 검증: search만으로는 "투자 가치 평가" 불가능\n\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "1단계: 시세 조회+투자 평가 필요. 2단계: 중간 복잡도. 3단계: 순차 의존. 4단계: search로 시세 수집 후 analysis로 투자 가치 평가 필요",\n    "coordination": "sequential"\n}\n```\n\n### 예시 2: 단순 정보 조회\n질문: "전세금 인상률 한도가 얼마야?"\n**CoT 분석**:\n1. 요구사항: 단순 사실 확인\n2. 복잡도: 낮음 (정보 확인형)\n3. 의존성: 없음\n4. 검증: search_team만으로 충분\n\n```json\n{\n    "selected_agents": ["search_team"],\n    "reasoning": "1단계: 단순 정보 조회. 2단계: 저복잡도. 3단계: 독립적. 4단계: 법률 검색만으로 답변 가능",\n    "coordination": "single"\n}\n```\n\n### 예시 3: 해결책 요청 (핵심 예시!)\n질문: "집주인이 전세금 3억을 10억으로 올려달래. 법적으로 어떻게 해야 해?"\n의도: COMPREHENSIVE\n**CoT 분석**:\n1. 요구사항: 상황 설명 + 해결책 요청\n2. 복잡도: 높음 (구체적 상황 + 수치 비교)\n3. 의존성: 법률 확인 → 상황 분석 → 해결책 제시\n4. 검증: "법적으로"만 보고 search만 선택하면 불충분! 해결책 제시 필요\n\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "1단계: 법률 + 상황 분석 + 해결책 필요. 2단계: 고복잡도(3억→10억 비정상). 3단계: 순차(법률 확인 후 타당성 분석). 4단계: \'어떻게 해야\' = 단순 법률 조회 아님, 분석 필수",\n    "coordination": "sequential",\n    "confidence": 0.95\n}\n```\n\n## 응답 형식 (JSON)\n\n```json\n{\n    "selected_agents": ["선택된 agent/team 목록"],\n    "reasoning": "선택 이유를 구체적으로 설명. 각 Agent의 역할과 처리 순서 포함",\n    "coordination": "single/sequential/parallel/pipeline",\n    "dependencies": {"agent2": ["agent1"]},\n    "estimated_time": 30,\n    "confidence": 0.9\n}\n```\n\n## 선택 가이드라인\n\n1. **최소 Agent 원칙**: 가능한 적은 수의 Agent로 처리\n2. **전문성 우선**: 해당 작업에 가장 전문적인 Agent 선택\n3. **효율성 고려**: 병렬 처리 가능한 경우 명시\n4. **의존성 관리**: 데이터 흐름을 고려한 순서 지정\n5. **폴백 전략**: 불확실한 경우 ["search_team", "analysis_team"] 조합\n\n## 주의사항\n\n- selected_agents는 반드시 배열 형태\n- Agent 이름은 정확히: "search_team", "analysis_team", "document_team"\n- 최소 1개, 최대 3개 선택\n- 순서는 실행 우선순위 (앞에 있을수록 먼저 실행)\n- reasoning은 상세하고 논리적으로 작성\n- coordination 필드로 실행 방식 명시\n- 복합 질문의 경우 의존성 관계 명확히 표시'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 16:54:27,613 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 16:54:27,613 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 16:54:27,614 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 16:54:27,614 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 16:54:27,614 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 16:54:27,614 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 16:54:31,560 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 07:54:31 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'3646'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'3767'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9998'), (b'x-ratelimit-remaining-tokens', b'197887'), (b'x-ratelimit-reset-requests', b'14.738s'), (b'x-ratelimit-reset-tokens', b'633ms'), (b'x-request-id', b'req_3d9dd27e87f04559b59f80d0dc82c969'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b59e29f08ea9b-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 16:54:31,560 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 16:54:31,560 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 16:54:31,567 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 16:54:31,568 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 16:54:31,568 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 16:54:31,568 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 07:54:31 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '3646', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '3767', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9998', 'x-ratelimit-remaining-tokens': '197887', 'x-ratelimit-reset-requests': '14.738s', 'x-ratelimit-reset-tokens': '633ms', 'x-request-id': 'req_3d9dd27e87f04559b59f80d0dc82c969', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b59e29f08ea9b-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 16:54:31,568 - openai._base_client - DEBUG - request_id: req_3d9dd27e87f04559b59f80d0dc82c969
2025-10-05 16:54:31,568 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: agent_selection | Model: gpt-4o-mini-2024-07-18 | Tokens: 2537 (prompt: 2364, completion: 173)
2025-10-05 16:54:31,568 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM agent selection reasoning: 1단계: 전세금 인상 제한에 대한 법률 정보 검색이 필요하고, 이와 관련된 상황 분석 및 해결책 제시가 요구됨. 2단계: 법률 상담과 관련된 질문으로 중간 복잡도에 해당. 3단계: 법률 정보를 확인한 후, 인상 제한에 대한 타당성을 분석해야 하므로 순차적 의존성이 있음. 4단계: 단순 법률 조회만으로는 충분하지 않으며, 분석이 필수적임.
2025-10-05 16:54:31,568 - app.service_agent.cognitive_agents.planning_agent - INFO - ✅ Primary LLM selected agents: ['search_team', 'analysis_team']
2025-10-05 16:54:31,568 - __main__ - INFO -   의도: 법률상담
2025-10-05 16:54:31,568 - __main__ - INFO -   신뢰도: 0.95
2025-10-05 16:54:31,568 - __main__ - INFO -   추천 Agent: ['search_team', 'analysis_team']
2025-10-05 16:54:31,568 - __main__ - INFO - 
[Step 2] Query Decomposition...
2025-10-05 16:54:31,568 - app.service_agent.cognitive_agents.query_decomposer - INFO - Decomposing query: 전세금 5% 인상 제한이 언제까지인가요?...
2025-10-05 16:54:31,568 - app.service_agent.cognitive_agents.query_decomposer - INFO - Query is simple, no decomposition needed
2025-10-05 16:54:31,568 - __main__ - INFO -   복합 질문: False
2025-10-05 16:54:31,568 - __main__ - INFO -   작업 수: 1
2025-10-05 16:54:31,568 - __main__ - INFO -   실행 모드: sequential
2025-10-05 16:54:31,569 - __main__ - INFO - 
[Step 3] Execution Plan 생성...
2025-10-05 16:54:31,569 - app.service_agent.cognitive_agents.planning_agent - INFO - Creating execution plan for intent: 법률상담
2025-10-05 16:54:31,569 - app.service_agent.cognitive_agents.planning_agent - WARNING - AgentRegistry is empty, using default teams
2025-10-05 16:54:31,569 - app.service_agent.cognitive_agents.planning_agent - DEBUG - Suggested agents: ['search_team', 'analysis_team']
2025-10-05 16:54:31,569 - app.service_agent.cognitive_agents.planning_agent - DEBUG - Available agents: ['search_team', 'analysis_team', 'document_team']
2025-10-05 16:54:31,569 - app.service_agent.cognitive_agents.planning_agent - INFO - Selected agents/teams for execution: ['search_team', 'analysis_team']
2025-10-05 16:54:31,569 - __main__ - INFO -   전략: sequential
2025-10-05 16:54:31,569 - __main__ - INFO -   단계 수: 2
2025-10-05 16:54:31,569 - __main__ - INFO - 
✓ 테스트 성공 (소요시간: 6.77초)
2025-10-05 16:54:31,569 - __main__ - INFO - 
================================================================================
2025-10-05 16:54:31,569 - __main__ - INFO - [2] 단일 질문 테스트: S002
2025-10-05 16:54:31,569 - __main__ - INFO - 질문: 강남구 아파트 전세 시세 알려주세요
2025-10-05 16:54:31,569 - __main__ - INFO - ================================================================================
2025-10-05 16:54:31,569 - __main__ - INFO - 
[Step 1] Intent 분석...
2025-10-05 16:54:31,569 - app.service_agent.cognitive_agents.planning_agent - INFO - Analyzing intent for query: 강남구 아파트 전세 시세 알려주세요...
2025-10-05 16:54:31,569 - app.service_agent.llm_manager.prompt_manager - DEBUG - Using cached prompt: intent_analysis
2025-10-05 16:54:31,569 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-610dccb3-699e-415f-bbcf-208babdfbe65', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 의도 분석 전문가입니다.\n사용자의 질문을 정확히 이해하고, 어떤 종류의 도움이 필요한지 분류해야 합니다.\n\n## Chain-of-Thought 분석 프로세스\n\n질문을 분석할 때 다음 단계를 **순서대로** 따르세요:\n\n### 1단계: 질문 구조 파악\n- 단순 정보 요청인가? (예: "~이 뭐야?", "~알려줘")\n- 상황 설명이 포함되어 있는가? (배경, 현재 상태)\n- 구체적 수치나 데이터가 있는가? (금액, 비율, 기간 등)\n- 문제 해결을 요구하는가? (예: "어떻게 해야 해?", "방법 알려줘")\n\n### 2단계: 요청 유형 판단\n- **정보 확인형**: 사실, 개념, 규정 확인 → 검색만으로 충분\n- **평가/판단형**: "괜찮아?", "적절해?", "문제있어?" → 검색 + 분석 필요\n- **해결책 요청형**: "어떻게?", "방법?", "대처?" → 검색 + 분석 + 제안 필요\n- **비교/선택형**: "A vs B", "어느게 나아?" → 검색 + 분석(비교) 필요\n\n### 3단계: 복잡도 평가\n- **저**: 단일 개념/사실 확인 (예: "전세금 인상률 한도?")\n- **중**: 특정 상황 + 판단 (예: "3억을 5억으로 올려달래. 가능해?")\n- **고**: 복잡한 상황 + 여러 조건 + 해결책 (예: "10년 거주, 3억→10억 요구. 어떻게 해야 해?")\n\n### 4단계: 필요한 처리 결정\n- **검색만**: 정보 확인형 + 저복잡도\n- **검색+분석**: 평가/판단형 OR 중복잡도 OR 수치 비교 포함\n- **종합처리**: 해결책 요청형 OR 고복잡도 OR 여러 조건 동시 고려\n\n### 5단계: 최종 검증\n- 선택한 의도로 사용자 질문에 완전히 답변 가능한가?\n- 단순 정보 제공으로 끝나는가, 아니면 추가 분석/판단이 필요한가?\n- 상황 설명이 있으면서 "해결", "방법", "어떻게" 등이 있으면 → COMPREHENSIVE 고려\n\n## 중요: 복합 질문 처리\n복합적인 질문(여러 의도가 섞인 질문)의 경우, 가장 핵심적인 의도를 파악하되,\nsub_intents 필드에 부가적인 의도들도 함께 기록해주세요.\n\n**특히 주의**:\n- 법률 키워드가 있어도, "해결방법", "어떻게 해야" 같은 표현이 있으면 단순 LEGAL_CONSULT가 아닐 수 있음\n- 구체적 상황(금액, 기간 등) + 해결책 요구 = COMPREHENSIVE 또는 복합 의도로 분류\n\n## 분류 카테고리 설명:\n\n1. **LEGAL_CONSULT (법률상담)**\n   - 설명: 부동산 관련 법률, 권리, 의무에 대한 질문\n   - 예시:\n     * 단순: "전세금 5% 인상이 가능한가요?", "임대차계약 갱신 거부할 수 있나요?"\n     * 복합: "전세금 인상 가능한지 확인하고 법적 근거도 알려주세요"\n   - 키워드: 법, 전세, 임대, 보증금, 계약, 권리, 의무, 갱신, 임차인, 임대인, 법률, 규정, 조항\n   - 필요한 처리: 법률 데이터베이스 검색, 관련 법조항 찾기\n\n2. **MARKET_INQUIRY (시세조회)**\n   - 설명: 부동산 시장 가격, 시세, 거래 동향에 대한 질문\n   - 예시:\n     * 단순: "강남구 아파트 전세 시세 알려주세요", "서초동 매매가 얼마나 올랐나요?"\n     * 복합: "강남구 시세 확인하고 대출 가능 금액도 계산해줘"\n   - 키워드: 시세, 가격, 매매가, 전세가, 월세, 시장, 동향, 평균, 지역명, 상승률, 하락률\n   - 필요한 처리: 부동산 시세 데이터 조회, 지역별 가격 분석\n\n3. **LOAN_CONSULT (대출상담)**\n   - 설명: 주택담보대출, 전세자금대출 등 금융 관련 질문\n   - 예시:\n     * 단순: "전세자금대출 한도가 얼마인가요?", "LTV가 뭔가요?"\n     * 복합: "대출 한도 확인하고 금리 비교도 해주세요"\n   - 키워드: 대출, 금리, 한도, 조건, 상환, LTV, DTI, DSR, 담보, 금융, 은행\n   - 필요한 처리: 대출 상품 조회, 금리 정보 검색, 한도 계산\n\n4. **CONTRACT_CREATION (계약서작성)**\n   - 설명: 새로운 계약서나 문서를 작성해달라는 요청\n   - 예시:\n     * 단순: "임대차계약서 작성해주세요", "전세계약서 초안 만들어주세요"\n     * 복합: "계약서 작성하고 주의사항도 검토해주세요"\n   - 키워드: 작성, 만들, 생성, 초안, 계약서, 문서, 양식\n   - 필요한 처리: 문서 생성 에이전트 호출, 템플릿 기반 작성\n\n5. **CONTRACT_REVIEW (계약서검토)**\n   - 설명: 기존 계약서나 문서를 검토해달라는 요청\n   - 예시:\n     * 단순: "이 계약서 검토해주세요", "특약사항 문제없나요?"\n     * 복합: "계약서 검토하고 수정사항도 제안해주세요"\n   - 키워드: 검토, 확인, 점검, 리뷰, 분석해, 살펴봐, 체크\n   - 필요한 처리: 문서 분석, 위험 요소 식별, 개선사항 제안\n\n6. **COMPREHENSIVE (종합분석)**\n   - 설명: 여러 측면을 종합적으로 분석해달라는 요청, 또는 복잡한 상황에 대한 해결책 요청\n   - 예시:\n     * 단순: "이 물건 전체적으로 분석해주세요"\n     * 복합: "시세, 법률, 대출 모두 검토해서 종합 의견 주세요"\n     * 해결형: "10년 거주했는데 전세금 3억을 10억으로 올려달래. 어떻게 해야 해?"\n     * 상황+해결: "집주인이 계약 갱신 거부했어. 법적으로 어떻게 대응해야 할까?"\n   - 키워드: 종합, 전체, 모든, 전반적, 종합적, 평가, 분석, 어떻게, 방법, 해결, 대처\n   - 패턴: 구체적 상황 설명 + "어떻게/방법/해결" 요청\n   - 필요한 처리: 다중 데이터 소스 통합 분석, 상황 평가, 해결책 제시\n\n7. **RISK_ANALYSIS (리스크분석)**\n   - 설명: 위험 요소나 주의사항에 대한 질문\n   - 예시:\n     * 단순: "이 계약 위험한가요?", "주의할 점 알려주세요"\n     * 복합: "리스크 분석하고 대안도 제시해주세요"\n   - 키워드: 위험, 리스크, 주의, 문제점, 조심, 걱정, 우려\n   - 필요한 처리: 위험 요소 분석, 주의사항 추출\n\n8. **UNCLEAR (불분명)**\n   - 설명: 의도를 명확히 파악하기 어려운 질문\n   - 예시: "이거 좀 봐주세요", "어떻게 해야 할까요?", "도와주세요"\n   - 처리: 추가 질문으로 의도 명확화 필요\n\n9. **IRRELEVANT (무관)**\n   - 설명: 부동산과 전혀 관련 없는 질문\n   - 예시: "날씨 어때?", "저녁 뭐 먹지?", "주식 추천해줘"\n   - 처리: 부동산 관련 질문을 유도\n\n## 복합 질문 예시와 분석 (CoT 적용):\n\n### 예시 1: "강남구 아파트 시세 알려주고 전세자금대출 가능한지도 확인해줘"\n**CoT 분석**:\n1. 구조: 두 개의 요청 ("시세" + "대출")\n2. 유형: 정보 확인형 (둘 다)\n3. 복잡도: 중 (두 가지 독립적 조회)\n4. 필요 처리: 검색 + 계산/분석\n\n**결론**:\n- 주 의도: MARKET_INQUIRY (시세 조회가 먼저 필요)\n- 부가 의도: LOAN_CONSULT (대출 확인)\n- 분해: ["강남구 아파트 시세 조회", "전세자금대출 가능 여부 확인"]\n\n### 예시 2: "이 계약서 검토해서 위험한 부분 있는지 알려주고 수정 제안도 해줘"\n**CoT 분석**:\n1. 구조: 검토 + 위험 평가 + 수정안\n2. 유형: 평가/판단형 + 해결책 요청형\n3. 복잡도: 고 (3단계 처리)\n4. 필요 처리: 검토 + 분석 + 문서 생성\n\n**결론**:\n- 주 의도: CONTRACT_REVIEW (계약서 검토)\n- 부가 의도: RISK_ANALYSIS (위험 분석)\n- 분해: ["계약서 전체 검토", "위험 요소 식별", "수정사항 제안"]\n\n### 예시 3: "집주인이 짜증나, 10년 살았는데 전세금 3억을 10억으로 올려달래. 법적으로 해결방법 알려줘"\n**CoT 분석**:\n1. 구조: 상황 설명 (10년 거주, 3억→10억) + 해결책 요청\n2. 유형: 해결책 요청형 (단순 정보 X)\n3. 복잡도: 고 (구체적 상황 + 수치 비교 + 법률 + 대응방안)\n4. 필요 처리: 법률 검색 + 상황 분석 + 해결책 제시\n\n**결론**:\n- 주 의도: COMPREHENSIVE (복잡한 상황에 대한 종합 해결)\n- 부가 의도: LEGAL_CONSULT, RISK_ANALYSIS\n- 분해: ["전세금 인상 한도 법률 조회", "3억→10억 인상의 타당성 분석", "구체적 대응 방안 제시"]\n- **이유**: "법적으로"라는 키워드가 있지만, 단순 법률 확인이 아니라 구체적 상황에 대한 해결책을 요구하므로 COMPREHENSIVE\n\n### 예시 4: "전세금 인상률 상한이 얼마야?"\n**CoT 분석**:\n1. 구조: 단순 사실 확인\n2. 유형: 정보 확인형\n3. 복잡도: 저 (단일 개념)\n4. 필요 처리: 검색만\n\n**결론**:\n- 주 의도: LEGAL_CONSULT (법률 정보 조회)\n- 부가 의도: 없음\n- 분해: 필요 없음\n\n## 응답 형식 (JSON 형식으로 응답):\n\n```json\n{\n    "intent": "LEGAL_CONSULT",\n    "confidence": 0.9,\n    "keywords": ["전세금", "인상", "제한"],\n    "sub_intents": [],\n    "is_compound": false,\n    "decomposed_tasks": [],\n    "entities": {\n        "location": "강남구",\n        "price": "5억",\n        "contract_type": "전세",\n        "date": "2024년",\n        "area": "84㎡",\n        "action_verbs": ["확인", "검토"]\n    },\n    "reasoning": "전세금 인상에 대한 법률 질문이므로 LEGAL_CONSULT로 분류"\n}\n```\n\n응답 규칙:\n- intent: 위 9개 카테고리 중 하나 (대문자_언더스코어 형식)\n- confidence: 0.0~1.0 (0.8 이상이면 매우 확실, 0.5 미만이면 불확실)\n- keywords: 추출된 주요 키워드 목록\n- sub_intents: 복합 질문일 경우 부가적인 의도들\n- is_compound: 복합 질문 여부 (true/false)\n- decomposed_tasks: 복합 질문을 분해한 개별 작업들\n- entities: 추출된 엔티티 정보\n- reasoning: **반드시 CoT 5단계를 거쳐 분석한 과정을 포함** (구조 파악 → 유형 판단 → 복잡도 평가 → 필요 처리 → 최종 검증)\n\n## reasoning 작성 예시:\n"1단계(구조): 상황 설명(10년 거주, 3억→10억) + 해결책 요청 포함.\n2단계(유형): 해결책 요청형 - 단순 정보가 아닌 대응방안 필요.\n3단계(복잡도): 고 - 구체적 수치 비교와 복잡한 상황.\n4단계(처리): 법률 검색 + 상황 분석 + 해결책 제시 필요.\n5단계(검증): LEGAL_CONSULT만으로는 불충분, 종합적 분석 필요 → COMPREHENSIVE 선택"\n\n## 판단 가이드:\n- 여러 의도가 섞여있다면, 가장 주된 의도를 intent에, 나머지를 sub_intents에 기록\n- "그리고", "또한", "함께", "같이" 등의 연결어가 있으면 복합 질문일 가능성 높음\n- 법률 관련 키워드가 있으면 LEGAL_CONSULT 우선\n- 가격/시세 언급이 명확하면 MARKET_INQUIRY\n- 계약서라는 단어와 함께 "작성/만들기"가 있으면 CONTRACT_CREATION\n- 계약서라는 단어와 함께 "검토/확인"이 있으면 CONTRACT_REVIEW\n- 불확실하면 confidence를 낮게 설정하고 UNCLEAR 선택\n- 복합 질문은 is_compound를 true로 설정하고 개별 작업으로 분해\n\n분석할 질문: 강남구 아파트 전세 시세 알려주세요'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 16:54:31,570 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 16:54:31,570 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 16:54:31,570 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 16:54:31,570 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 16:54:31,570 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 16:54:31,570 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 16:54:34,228 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 07:54:34 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'2311'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'2473'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9997'), (b'x-ratelimit-remaining-tokens', b'197243'), (b'x-ratelimit-reset-requests', b'19.286s'), (b'x-ratelimit-reset-tokens', b'827ms'), (b'x-request-id', b'req_ebdf9645ab13403a81b2734a1c38e9c3'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b59fb4bd5ea9b-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 16:54:34,229 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 16:54:34,229 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 16:54:34,229 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 16:54:34,229 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 16:54:34,229 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 16:54:34,229 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 07:54:34 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '2311', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '2473', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9997', 'x-ratelimit-remaining-tokens': '197243', 'x-ratelimit-reset-requests': '19.286s', 'x-ratelimit-reset-tokens': '827ms', 'x-request-id': 'req_ebdf9645ab13403a81b2734a1c38e9c3', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b59fb4bd5ea9b-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 16:54:34,229 - openai._base_client - DEBUG - request_id: req_ebdf9645ab13403a81b2734a1c38e9c3
2025-10-05 16:54:34,230 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: intent_analysis | Model: gpt-4o-mini-2024-07-18 | Tokens: 3378 (prompt: 3180, completion: 198)
2025-10-05 16:54:34,230 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM Intent Analysis Result: {'intent': 'MARKET_INQUIRY', 'confidence': 0.95, 'keywords': ['강남구', '아파트', '전세', '시세'], 'sub_intents': [], 'is_compound': False, 'decomposed_tasks': [], 'entities': {'location': '강남구', 'contract_type': '전세'}, 'reasoning': '1단계(구조): 단순 정보 요청으로, 강남구 아파트 전세 시세에 대한 질문. 2단계(유형): 정보 확인형 - 시세에 대한 사실 확인. 3단계(복잡도): 저 - 단일 개념 확인. 4단계(처리): 시세 데이터 조회만 필요. 5단계(검증): 단순 정보 제공으로 충분하므로 MARKET_INQUIRY로 분류.'}
2025-10-05 16:54:34,230 - app.service_agent.llm_manager.prompt_manager - DEBUG - Using cached prompt: agent_selection
2025-10-05 16:54:34,231 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-8e60a623-92d0-43cb-b947-1be7d9409cd5', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 Agent 선택 전문가입니다.\n사용자의 요청에 가장 적합한 Agent/Team을 선택하는 것이 목표입니다.\n\n## 현재 상황\n\n**사용자 질문:** 강남구 아파트 전세 시세 알려주세요\n**분석된 의도:** 시세조회\n**추출된 키워드:** [\'강남구\', \'아파트\', \'전세\', \'시세\']\n\n## 사용 가능한 Agent/Team 정보\n\n{\'search_team\': {\'name\': \'search_team\', \'capabilities\': \'법률 검색, 부동산 시세 조회, 대출 상품 검색\', \'tools\': [\'legal_search\', \'market_data\', \'loan_data\'], \'use_cases\': [\'법률 상담\', \'시세 조회\', \'대출 정보\']}, \'analysis_team\': {\'name\': \'analysis_team\', \'capabilities\': \'데이터 분석, 리스크 평가, 인사이트 생성, 추천\', \'tools\': [\'data_analyzer\', \'risk_evaluator\'], \'use_cases\': [\'시장 분석\', \'리스크 평가\', \'투자 분석\']}, \'document_team\': {\'name\': \'document_team\', \'capabilities\': \'계약서 작성, 문서 생성, 문서 검토\', \'tools\': [\'document_generator\', \'contract_reviewer\'], \'use_cases\': [\'계약서 작성\', \'문서 검토\']}}\n\n## Agent 역할 및 상세 가이드\n\n### 1. search_team (검색 팀)\n- **주요 기능**: 정보 검색 및 데이터 수집\n- **전문 분야**:\n  * 법률 정보 검색 (전세법, 임대차보호법, 부동산 관련 법규)\n  * 부동산 시세 조회 (매매가, 전세가, 월세, 실거래가)\n  * 대출 상품 정보 검색 (금리, 한도, 조건)\n  * 지역 정보 및 인프라 조회\n- **도구**: legal_search, market_data, loan_data\n- **적합한 작업**: 정보 조회, 데이터 수집, 법률 확인, 시세 파악\n- **예시**:\n  * "전세금 5% 인상 가능한가요?"\n  * "강남구 아파트 전세 시세"\n  * "전세자금대출 한도 얼마?"\n\n### 2. analysis_team (분석 팀)\n- **주요 기능**: 데이터 분석 및 평가\n- **전문 분야**:\n  * 시장 동향 분석 (상승률, 하락률, 추세)\n  * 리스크 평가 (계약, 투자 위험도)\n  * 투자 수익률 계산 (ROI, 월세 수익률)\n  * 대출 한도 및 조건 분석 (LTV, DTI, DSR)\n  * 비교 분석 (지역별, 상품별)\n- **도구**: data_analyzer, risk_evaluator, calculator\n- **적합한 작업**: 데이터 분석, 리스크 평가, 계산, 비교, 예측\n- **의존성**: 보통 search_team의 데이터가 필요\n- **예시**:\n  * "이 지역 투자 가치 분석해줘"\n  * "계약 리스크 평가해줘"\n  * "대출 가능 금액 계산해줘"\n\n### 3. document_team (문서 팀)\n- **주요 기능**: 문서 생성 및 관리\n- **전문 분야**:\n  * 계약서 작성 (임대차, 매매, 전세)\n  * 문서 템플릿 관리\n  * 특약사항 생성\n  * 계약서 수정안 작성\n  * 법률 문서 검토\n- **도구**: document_generator, contract_template, contract_reviewer\n- **적합한 작업**: 문서 작성, 계약서 생성, 문서 수정, 검토\n- **예시**:\n  * "임대차계약서 작성해줘"\n  * "특약사항 추가해줘"\n  * "계약서 수정안 만들어줘"\n\n## Chain-of-Thought Agent 선택 프로세스\n\n다음 단계를 **순서대로** 따라 최적의 Agent 조합을 선택하세요:\n\n### 1단계: 질문 요구사항 파악\n- 단순 정보 조회인가? → search_team만 필요\n- 판단/평가가 필요한가? → search + analysis 필요\n- 해결책 제시가 필요한가? → search + analysis 필요\n- 문서 생성이 필요한가? → document_team 추가\n\n### 2단계: 작업 복잡도 판단\n- **단순** (검색만): "~이 뭐야?", "~알려줘" → search_team\n- **중간** (검색+판단): "~괜찮아?", "~적절해?" → search + analysis\n- **복잡** (종합 해결): 구체적 상황 + "어떻게 해야 해?" → search + analysis\n\n### 3단계: 의존성 분석\n- 독립적 작업: 단일 팀으로 처리 가능\n- 순차적 의존: 이전 결과 필요 → 여러 팀 순서대로\n- 병렬 가능: 동시 조회 가능 → coordination: "parallel"\n\n### 4단계: 최종 검증\n- 선택한 팀들로 질문에 완전히 답변 가능한가?\n- 불필요한 팀이 포함되지 않았는가?\n- 순서가 논리적인가? (데이터 흐름 고려)\n\n### 중요 원칙:\n- **법률 키워드만으로 판단하지 말 것**: "법적으로 어떻게 해야 해?" = 법률 검색 + 분석 필요\n- **상황 설명 + 해결책 요청** = 반드시 analysis_team 포함\n- **구체적 수치 비교** (3억→10억 같은) = analysis_team 필요\n\n## 의도별 Agent 매핑 가이드 (기본 가이드 - CoT로 조정 가능)\n\n| 의도 (Intent) | 기본 조합 | 상황별 조정 |\n|--------------|-----------|-------------|\n| LEGAL_CONSULT | ["search_team"] | 해결책 요청시 → + analysis_team |\n| MARKET_INQUIRY | ["search_team"] | 비교/평가시 → + analysis_team |\n| LOAN_CONSULT | ["search_team", "analysis_team"] | 계산 필수 |\n| CONTRACT_CREATION | ["document_team"] | 검토 후 작성 → search + document |\n| CONTRACT_REVIEW | ["search_team", "analysis_team"] | 법률 검토 + 리스크 분석 |\n| COMPREHENSIVE | ["search_team", "analysis_team"] | **항상 분석 포함** |\n| RISK_ANALYSIS | ["analysis_team"] | 법률 근거 필요시 → search + analysis |\n| UNCLEAR | ["search_team", "analysis_team"] | 포괄적 대응 |\n\n**중요**: 위 매핑은 **기본 가이드**일 뿐입니다.\n실제 질문의 내용(CoT 분석 결과)에 따라 조정하세요!\n\n## 복합 질문 처리 예시 (CoT 적용)\n\n### 예시 1: 순차적 처리\n질문: "강남구 시세 확인하고 투자 가치 분석해줘"\n**CoT 분석**:\n1. 요구사항: 시세 조회 + 투자 가치 평가\n2. 복잡도: 중간 (검색 + 분석)\n3. 의존성: 시세 데이터 → 투자 분석 (순차)\n4. 검증: search만으로는 "투자 가치 평가" 불가능\n\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "1단계: 시세 조회+투자 평가 필요. 2단계: 중간 복잡도. 3단계: 순차 의존. 4단계: search로 시세 수집 후 analysis로 투자 가치 평가 필요",\n    "coordination": "sequential"\n}\n```\n\n### 예시 2: 단순 정보 조회\n질문: "전세금 인상률 한도가 얼마야?"\n**CoT 분석**:\n1. 요구사항: 단순 사실 확인\n2. 복잡도: 낮음 (정보 확인형)\n3. 의존성: 없음\n4. 검증: search_team만으로 충분\n\n```json\n{\n    "selected_agents": ["search_team"],\n    "reasoning": "1단계: 단순 정보 조회. 2단계: 저복잡도. 3단계: 독립적. 4단계: 법률 검색만으로 답변 가능",\n    "coordination": "single"\n}\n```\n\n### 예시 3: 해결책 요청 (핵심 예시!)\n질문: "집주인이 전세금 3억을 10억으로 올려달래. 법적으로 어떻게 해야 해?"\n의도: COMPREHENSIVE\n**CoT 분석**:\n1. 요구사항: 상황 설명 + 해결책 요청\n2. 복잡도: 높음 (구체적 상황 + 수치 비교)\n3. 의존성: 법률 확인 → 상황 분석 → 해결책 제시\n4. 검증: "법적으로"만 보고 search만 선택하면 불충분! 해결책 제시 필요\n\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "1단계: 법률 + 상황 분석 + 해결책 필요. 2단계: 고복잡도(3억→10억 비정상). 3단계: 순차(법률 확인 후 타당성 분석). 4단계: \'어떻게 해야\' = 단순 법률 조회 아님, 분석 필수",\n    "coordination": "sequential",\n    "confidence": 0.95\n}\n```\n\n## 응답 형식 (JSON)\n\n```json\n{\n    "selected_agents": ["선택된 agent/team 목록"],\n    "reasoning": "선택 이유를 구체적으로 설명. 각 Agent의 역할과 처리 순서 포함",\n    "coordination": "single/sequential/parallel/pipeline",\n    "dependencies": {"agent2": ["agent1"]},\n    "estimated_time": 30,\n    "confidence": 0.9\n}\n```\n\n## 선택 가이드라인\n\n1. **최소 Agent 원칙**: 가능한 적은 수의 Agent로 처리\n2. **전문성 우선**: 해당 작업에 가장 전문적인 Agent 선택\n3. **효율성 고려**: 병렬 처리 가능한 경우 명시\n4. **의존성 관리**: 데이터 흐름을 고려한 순서 지정\n5. **폴백 전략**: 불확실한 경우 ["search_team", "analysis_team"] 조합\n\n## 주의사항\n\n- selected_agents는 반드시 배열 형태\n- Agent 이름은 정확히: "search_team", "analysis_team", "document_team"\n- 최소 1개, 최대 3개 선택\n- 순서는 실행 우선순위 (앞에 있을수록 먼저 실행)\n- reasoning은 상세하고 논리적으로 작성\n- coordination 필드로 실행 방식 명시\n- 복합 질문의 경우 의존성 관계 명확히 표시'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 16:54:34,231 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 16:54:34,231 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 16:54:34,232 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 16:54:34,232 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 16:54:34,232 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 16:54:34,232 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 16:54:36,490 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 07:54:36 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'2030'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'2056'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9997'), (b'x-ratelimit-remaining-tokens', b'197887'), (b'x-ratelimit-reset-requests', b'25.403s'), (b'x-ratelimit-reset-tokens', b'633ms'), (b'x-request-id', b'req_e48f0767b4df421480a85d24622a98dd'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b5a0bfda7ea9b-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 16:54:36,491 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 16:54:36,491 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 16:54:36,491 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 16:54:36,491 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 16:54:36,491 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 16:54:36,491 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 07:54:36 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '2030', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '2056', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9997', 'x-ratelimit-remaining-tokens': '197887', 'x-ratelimit-reset-requests': '25.403s', 'x-ratelimit-reset-tokens': '633ms', 'x-request-id': 'req_e48f0767b4df421480a85d24622a98dd', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b5a0bfda7ea9b-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 16:54:36,491 - openai._base_client - DEBUG - request_id: req_e48f0767b4df421480a85d24622a98dd
2025-10-05 16:54:36,491 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: agent_selection | Model: gpt-4o-mini-2024-07-18 | Tokens: 2489 (prompt: 2360, completion: 129)
2025-10-05 16:54:36,491 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM agent selection reasoning: 1단계: 사용자는 강남구 아파트 전세 시세를 단순히 조회하고자 함. 2단계: 이는 단순 정보 조회로 저복잡도에 해당. 3단계: 독립적인 작업으로 search_team만으로 충분히 처리 가능. 4단계: search_team이 강남구 아파트 전세 시세를 조회할 수 있으므로 적합.
2025-10-05 16:54:36,491 - app.service_agent.cognitive_agents.planning_agent - INFO - ✅ Primary LLM selected agents: ['search_team']
2025-10-05 16:54:36,492 - __main__ - INFO -   의도: 시세조회
2025-10-05 16:54:36,492 - __main__ - INFO -   신뢰도: 0.95
2025-10-05 16:54:36,492 - __main__ - INFO -   추천 Agent: ['search_team']
2025-10-05 16:54:36,492 - __main__ - INFO - 
[Step 2] Query Decomposition...
2025-10-05 16:54:36,492 - app.service_agent.cognitive_agents.query_decomposer - INFO - Decomposing query: 강남구 아파트 전세 시세 알려주세요...
2025-10-05 16:54:36,492 - app.service_agent.cognitive_agents.query_decomposer - INFO - Query is simple, no decomposition needed
2025-10-05 16:54:36,492 - __main__ - INFO -   복합 질문: False
2025-10-05 16:54:36,492 - __main__ - INFO -   작업 수: 1
2025-10-05 16:54:36,492 - __main__ - INFO -   실행 모드: sequential
2025-10-05 16:54:36,492 - __main__ - INFO - 
[Step 3] Execution Plan 생성...
2025-10-05 16:54:36,492 - app.service_agent.cognitive_agents.planning_agent - INFO - Creating execution plan for intent: 시세조회
2025-10-05 16:54:36,492 - app.service_agent.cognitive_agents.planning_agent - WARNING - AgentRegistry is empty, using default teams
2025-10-05 16:54:36,492 - app.service_agent.cognitive_agents.planning_agent - DEBUG - Suggested agents: ['search_team']
2025-10-05 16:54:36,492 - app.service_agent.cognitive_agents.planning_agent - DEBUG - Available agents: ['search_team', 'analysis_team', 'document_team']
2025-10-05 16:54:36,492 - app.service_agent.cognitive_agents.planning_agent - INFO - Selected agents/teams for execution: ['search_team']
2025-10-05 16:54:36,492 - __main__ - INFO -   전략: sequential
2025-10-05 16:54:36,492 - __main__ - INFO -   단계 수: 1
2025-10-05 16:54:36,492 - __main__ - INFO - 
✓ 테스트 성공 (소요시간: 4.92초)
2025-10-05 16:54:36,492 - __main__ - INFO - 
================================================================================
2025-10-05 16:54:36,492 - __main__ - INFO - [3] 단일 질문 테스트: S003
2025-10-05 16:54:36,492 - __main__ - INFO - 질문: 전세자금대출 한도가 얼마나 되나요?
2025-10-05 16:54:36,492 - __main__ - INFO - ================================================================================
2025-10-05 16:54:36,492 - __main__ - INFO - 
[Step 1] Intent 분석...
2025-10-05 16:54:36,492 - app.service_agent.cognitive_agents.planning_agent - INFO - Analyzing intent for query: 전세자금대출 한도가 얼마나 되나요?...
2025-10-05 16:54:36,492 - app.service_agent.llm_manager.prompt_manager - DEBUG - Using cached prompt: intent_analysis
2025-10-05 16:54:36,493 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-f182e2d5-b0db-490c-8bfa-d2d25a900ef3', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 의도 분석 전문가입니다.\n사용자의 질문을 정확히 이해하고, 어떤 종류의 도움이 필요한지 분류해야 합니다.\n\n## Chain-of-Thought 분석 프로세스\n\n질문을 분석할 때 다음 단계를 **순서대로** 따르세요:\n\n### 1단계: 질문 구조 파악\n- 단순 정보 요청인가? (예: "~이 뭐야?", "~알려줘")\n- 상황 설명이 포함되어 있는가? (배경, 현재 상태)\n- 구체적 수치나 데이터가 있는가? (금액, 비율, 기간 등)\n- 문제 해결을 요구하는가? (예: "어떻게 해야 해?", "방법 알려줘")\n\n### 2단계: 요청 유형 판단\n- **정보 확인형**: 사실, 개념, 규정 확인 → 검색만으로 충분\n- **평가/판단형**: "괜찮아?", "적절해?", "문제있어?" → 검색 + 분석 필요\n- **해결책 요청형**: "어떻게?", "방법?", "대처?" → 검색 + 분석 + 제안 필요\n- **비교/선택형**: "A vs B", "어느게 나아?" → 검색 + 분석(비교) 필요\n\n### 3단계: 복잡도 평가\n- **저**: 단일 개념/사실 확인 (예: "전세금 인상률 한도?")\n- **중**: 특정 상황 + 판단 (예: "3억을 5억으로 올려달래. 가능해?")\n- **고**: 복잡한 상황 + 여러 조건 + 해결책 (예: "10년 거주, 3억→10억 요구. 어떻게 해야 해?")\n\n### 4단계: 필요한 처리 결정\n- **검색만**: 정보 확인형 + 저복잡도\n- **검색+분석**: 평가/판단형 OR 중복잡도 OR 수치 비교 포함\n- **종합처리**: 해결책 요청형 OR 고복잡도 OR 여러 조건 동시 고려\n\n### 5단계: 최종 검증\n- 선택한 의도로 사용자 질문에 완전히 답변 가능한가?\n- 단순 정보 제공으로 끝나는가, 아니면 추가 분석/판단이 필요한가?\n- 상황 설명이 있으면서 "해결", "방법", "어떻게" 등이 있으면 → COMPREHENSIVE 고려\n\n## 중요: 복합 질문 처리\n복합적인 질문(여러 의도가 섞인 질문)의 경우, 가장 핵심적인 의도를 파악하되,\nsub_intents 필드에 부가적인 의도들도 함께 기록해주세요.\n\n**특히 주의**:\n- 법률 키워드가 있어도, "해결방법", "어떻게 해야" 같은 표현이 있으면 단순 LEGAL_CONSULT가 아닐 수 있음\n- 구체적 상황(금액, 기간 등) + 해결책 요구 = COMPREHENSIVE 또는 복합 의도로 분류\n\n## 분류 카테고리 설명:\n\n1. **LEGAL_CONSULT (법률상담)**\n   - 설명: 부동산 관련 법률, 권리, 의무에 대한 질문\n   - 예시:\n     * 단순: "전세금 5% 인상이 가능한가요?", "임대차계약 갱신 거부할 수 있나요?"\n     * 복합: "전세금 인상 가능한지 확인하고 법적 근거도 알려주세요"\n   - 키워드: 법, 전세, 임대, 보증금, 계약, 권리, 의무, 갱신, 임차인, 임대인, 법률, 규정, 조항\n   - 필요한 처리: 법률 데이터베이스 검색, 관련 법조항 찾기\n\n2. **MARKET_INQUIRY (시세조회)**\n   - 설명: 부동산 시장 가격, 시세, 거래 동향에 대한 질문\n   - 예시:\n     * 단순: "강남구 아파트 전세 시세 알려주세요", "서초동 매매가 얼마나 올랐나요?"\n     * 복합: "강남구 시세 확인하고 대출 가능 금액도 계산해줘"\n   - 키워드: 시세, 가격, 매매가, 전세가, 월세, 시장, 동향, 평균, 지역명, 상승률, 하락률\n   - 필요한 처리: 부동산 시세 데이터 조회, 지역별 가격 분석\n\n3. **LOAN_CONSULT (대출상담)**\n   - 설명: 주택담보대출, 전세자금대출 등 금융 관련 질문\n   - 예시:\n     * 단순: "전세자금대출 한도가 얼마인가요?", "LTV가 뭔가요?"\n     * 복합: "대출 한도 확인하고 금리 비교도 해주세요"\n   - 키워드: 대출, 금리, 한도, 조건, 상환, LTV, DTI, DSR, 담보, 금융, 은행\n   - 필요한 처리: 대출 상품 조회, 금리 정보 검색, 한도 계산\n\n4. **CONTRACT_CREATION (계약서작성)**\n   - 설명: 새로운 계약서나 문서를 작성해달라는 요청\n   - 예시:\n     * 단순: "임대차계약서 작성해주세요", "전세계약서 초안 만들어주세요"\n     * 복합: "계약서 작성하고 주의사항도 검토해주세요"\n   - 키워드: 작성, 만들, 생성, 초안, 계약서, 문서, 양식\n   - 필요한 처리: 문서 생성 에이전트 호출, 템플릿 기반 작성\n\n5. **CONTRACT_REVIEW (계약서검토)**\n   - 설명: 기존 계약서나 문서를 검토해달라는 요청\n   - 예시:\n     * 단순: "이 계약서 검토해주세요", "특약사항 문제없나요?"\n     * 복합: "계약서 검토하고 수정사항도 제안해주세요"\n   - 키워드: 검토, 확인, 점검, 리뷰, 분석해, 살펴봐, 체크\n   - 필요한 처리: 문서 분석, 위험 요소 식별, 개선사항 제안\n\n6. **COMPREHENSIVE (종합분석)**\n   - 설명: 여러 측면을 종합적으로 분석해달라는 요청, 또는 복잡한 상황에 대한 해결책 요청\n   - 예시:\n     * 단순: "이 물건 전체적으로 분석해주세요"\n     * 복합: "시세, 법률, 대출 모두 검토해서 종합 의견 주세요"\n     * 해결형: "10년 거주했는데 전세금 3억을 10억으로 올려달래. 어떻게 해야 해?"\n     * 상황+해결: "집주인이 계약 갱신 거부했어. 법적으로 어떻게 대응해야 할까?"\n   - 키워드: 종합, 전체, 모든, 전반적, 종합적, 평가, 분석, 어떻게, 방법, 해결, 대처\n   - 패턴: 구체적 상황 설명 + "어떻게/방법/해결" 요청\n   - 필요한 처리: 다중 데이터 소스 통합 분석, 상황 평가, 해결책 제시\n\n7. **RISK_ANALYSIS (리스크분석)**\n   - 설명: 위험 요소나 주의사항에 대한 질문\n   - 예시:\n     * 단순: "이 계약 위험한가요?", "주의할 점 알려주세요"\n     * 복합: "리스크 분석하고 대안도 제시해주세요"\n   - 키워드: 위험, 리스크, 주의, 문제점, 조심, 걱정, 우려\n   - 필요한 처리: 위험 요소 분석, 주의사항 추출\n\n8. **UNCLEAR (불분명)**\n   - 설명: 의도를 명확히 파악하기 어려운 질문\n   - 예시: "이거 좀 봐주세요", "어떻게 해야 할까요?", "도와주세요"\n   - 처리: 추가 질문으로 의도 명확화 필요\n\n9. **IRRELEVANT (무관)**\n   - 설명: 부동산과 전혀 관련 없는 질문\n   - 예시: "날씨 어때?", "저녁 뭐 먹지?", "주식 추천해줘"\n   - 처리: 부동산 관련 질문을 유도\n\n## 복합 질문 예시와 분석 (CoT 적용):\n\n### 예시 1: "강남구 아파트 시세 알려주고 전세자금대출 가능한지도 확인해줘"\n**CoT 분석**:\n1. 구조: 두 개의 요청 ("시세" + "대출")\n2. 유형: 정보 확인형 (둘 다)\n3. 복잡도: 중 (두 가지 독립적 조회)\n4. 필요 처리: 검색 + 계산/분석\n\n**결론**:\n- 주 의도: MARKET_INQUIRY (시세 조회가 먼저 필요)\n- 부가 의도: LOAN_CONSULT (대출 확인)\n- 분해: ["강남구 아파트 시세 조회", "전세자금대출 가능 여부 확인"]\n\n### 예시 2: "이 계약서 검토해서 위험한 부분 있는지 알려주고 수정 제안도 해줘"\n**CoT 분석**:\n1. 구조: 검토 + 위험 평가 + 수정안\n2. 유형: 평가/판단형 + 해결책 요청형\n3. 복잡도: 고 (3단계 처리)\n4. 필요 처리: 검토 + 분석 + 문서 생성\n\n**결론**:\n- 주 의도: CONTRACT_REVIEW (계약서 검토)\n- 부가 의도: RISK_ANALYSIS (위험 분석)\n- 분해: ["계약서 전체 검토", "위험 요소 식별", "수정사항 제안"]\n\n### 예시 3: "집주인이 짜증나, 10년 살았는데 전세금 3억을 10억으로 올려달래. 법적으로 해결방법 알려줘"\n**CoT 분석**:\n1. 구조: 상황 설명 (10년 거주, 3억→10억) + 해결책 요청\n2. 유형: 해결책 요청형 (단순 정보 X)\n3. 복잡도: 고 (구체적 상황 + 수치 비교 + 법률 + 대응방안)\n4. 필요 처리: 법률 검색 + 상황 분석 + 해결책 제시\n\n**결론**:\n- 주 의도: COMPREHENSIVE (복잡한 상황에 대한 종합 해결)\n- 부가 의도: LEGAL_CONSULT, RISK_ANALYSIS\n- 분해: ["전세금 인상 한도 법률 조회", "3억→10억 인상의 타당성 분석", "구체적 대응 방안 제시"]\n- **이유**: "법적으로"라는 키워드가 있지만, 단순 법률 확인이 아니라 구체적 상황에 대한 해결책을 요구하므로 COMPREHENSIVE\n\n### 예시 4: "전세금 인상률 상한이 얼마야?"\n**CoT 분석**:\n1. 구조: 단순 사실 확인\n2. 유형: 정보 확인형\n3. 복잡도: 저 (단일 개념)\n4. 필요 처리: 검색만\n\n**결론**:\n- 주 의도: LEGAL_CONSULT (법률 정보 조회)\n- 부가 의도: 없음\n- 분해: 필요 없음\n\n## 응답 형식 (JSON 형식으로 응답):\n\n```json\n{\n    "intent": "LEGAL_CONSULT",\n    "confidence": 0.9,\n    "keywords": ["전세금", "인상", "제한"],\n    "sub_intents": [],\n    "is_compound": false,\n    "decomposed_tasks": [],\n    "entities": {\n        "location": "강남구",\n        "price": "5억",\n        "contract_type": "전세",\n        "date": "2024년",\n        "area": "84㎡",\n        "action_verbs": ["확인", "검토"]\n    },\n    "reasoning": "전세금 인상에 대한 법률 질문이므로 LEGAL_CONSULT로 분류"\n}\n```\n\n응답 규칙:\n- intent: 위 9개 카테고리 중 하나 (대문자_언더스코어 형식)\n- confidence: 0.0~1.0 (0.8 이상이면 매우 확실, 0.5 미만이면 불확실)\n- keywords: 추출된 주요 키워드 목록\n- sub_intents: 복합 질문일 경우 부가적인 의도들\n- is_compound: 복합 질문 여부 (true/false)\n- decomposed_tasks: 복합 질문을 분해한 개별 작업들\n- entities: 추출된 엔티티 정보\n- reasoning: **반드시 CoT 5단계를 거쳐 분석한 과정을 포함** (구조 파악 → 유형 판단 → 복잡도 평가 → 필요 처리 → 최종 검증)\n\n## reasoning 작성 예시:\n"1단계(구조): 상황 설명(10년 거주, 3억→10억) + 해결책 요청 포함.\n2단계(유형): 해결책 요청형 - 단순 정보가 아닌 대응방안 필요.\n3단계(복잡도): 고 - 구체적 수치 비교와 복잡한 상황.\n4단계(처리): 법률 검색 + 상황 분석 + 해결책 제시 필요.\n5단계(검증): LEGAL_CONSULT만으로는 불충분, 종합적 분석 필요 → COMPREHENSIVE 선택"\n\n## 판단 가이드:\n- 여러 의도가 섞여있다면, 가장 주된 의도를 intent에, 나머지를 sub_intents에 기록\n- "그리고", "또한", "함께", "같이" 등의 연결어가 있으면 복합 질문일 가능성 높음\n- 법률 관련 키워드가 있으면 LEGAL_CONSULT 우선\n- 가격/시세 언급이 명확하면 MARKET_INQUIRY\n- 계약서라는 단어와 함께 "작성/만들기"가 있으면 CONTRACT_CREATION\n- 계약서라는 단어와 함께 "검토/확인"이 있으면 CONTRACT_REVIEW\n- 불확실하면 confidence를 낮게 설정하고 UNCLEAR 선택\n- 복합 질문은 is_compound를 true로 설정하고 개별 작업으로 분해\n\n분석할 질문: 전세자금대출 한도가 얼마나 되나요?'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 16:54:36,493 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 16:54:36,493 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 16:54:36,494 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 16:54:36,494 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 16:54:36,494 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 16:54:36,494 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 16:54:39,574 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 07:54:39 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'2878'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'2901'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9996'), (b'x-ratelimit-remaining-tokens', b'197243'), (b'x-ratelimit-reset-requests', b'31.781s'), (b'x-ratelimit-reset-tokens', b'827ms'), (b'x-request-id', b'req_992039f2fbcc4a148df29d3c9065276a'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b5a1a1898ea9b-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 16:54:39,574 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 16:54:39,574 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 16:54:39,592 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 16:54:39,592 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 16:54:39,592 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 16:54:39,592 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 07:54:39 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '2878', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '2901', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9996', 'x-ratelimit-remaining-tokens': '197243', 'x-ratelimit-reset-requests': '31.781s', 'x-ratelimit-reset-tokens': '827ms', 'x-request-id': 'req_992039f2fbcc4a148df29d3c9065276a', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b5a1a1898ea9b-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 16:54:39,593 - openai._base_client - DEBUG - request_id: req_992039f2fbcc4a148df29d3c9065276a
2025-10-05 16:54:39,593 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: intent_analysis | Model: gpt-4o-mini-2024-07-18 | Tokens: 3379 (prompt: 3181, completion: 198)
2025-10-05 16:54:39,593 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM Intent Analysis Result: {'intent': 'LOAN_CONSULT', 'confidence': 0.9, 'keywords': ['전세자금대출', '한도'], 'sub_intents': [], 'is_compound': False, 'decomposed_tasks': [], 'entities': {'loan_type': '전세자금대출', 'action_verbs': ['확인']}, 'reasoning': '1단계(구조): 단순 정보 요청으로 전세자금대출 한도에 대한 질문. 2단계(유형): 정보 확인형 - 대출 한도에 대한 사실 확인 필요. 3단계(복잡도): 저 - 단일 개념 확인. 4단계(처리): 검색만으로 충분. 5단계(검증): 단순 정보 제공으로 끝나므로 LOAN_CONSULT로 분류.'}
2025-10-05 16:54:39,593 - app.service_agent.llm_manager.prompt_manager - DEBUG - Using cached prompt: agent_selection
2025-10-05 16:54:39,593 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-59227abb-5938-4bc7-94e9-e556ce88d91a', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 Agent 선택 전문가입니다.\n사용자의 요청에 가장 적합한 Agent/Team을 선택하는 것이 목표입니다.\n\n## 현재 상황\n\n**사용자 질문:** 전세자금대출 한도가 얼마나 되나요?\n**분석된 의도:** 대출상담\n**추출된 키워드:** [\'전세자금대출\', \'한도\']\n\n## 사용 가능한 Agent/Team 정보\n\n{\'search_team\': {\'name\': \'search_team\', \'capabilities\': \'법률 검색, 부동산 시세 조회, 대출 상품 검색\', \'tools\': [\'legal_search\', \'market_data\', \'loan_data\'], \'use_cases\': [\'법률 상담\', \'시세 조회\', \'대출 정보\']}, \'analysis_team\': {\'name\': \'analysis_team\', \'capabilities\': \'데이터 분석, 리스크 평가, 인사이트 생성, 추천\', \'tools\': [\'data_analyzer\', \'risk_evaluator\'], \'use_cases\': [\'시장 분석\', \'리스크 평가\', \'투자 분석\']}, \'document_team\': {\'name\': \'document_team\', \'capabilities\': \'계약서 작성, 문서 생성, 문서 검토\', \'tools\': [\'document_generator\', \'contract_reviewer\'], \'use_cases\': [\'계약서 작성\', \'문서 검토\']}}\n\n## Agent 역할 및 상세 가이드\n\n### 1. search_team (검색 팀)\n- **주요 기능**: 정보 검색 및 데이터 수집\n- **전문 분야**:\n  * 법률 정보 검색 (전세법, 임대차보호법, 부동산 관련 법규)\n  * 부동산 시세 조회 (매매가, 전세가, 월세, 실거래가)\n  * 대출 상품 정보 검색 (금리, 한도, 조건)\n  * 지역 정보 및 인프라 조회\n- **도구**: legal_search, market_data, loan_data\n- **적합한 작업**: 정보 조회, 데이터 수집, 법률 확인, 시세 파악\n- **예시**:\n  * "전세금 5% 인상 가능한가요?"\n  * "강남구 아파트 전세 시세"\n  * "전세자금대출 한도 얼마?"\n\n### 2. analysis_team (분석 팀)\n- **주요 기능**: 데이터 분석 및 평가\n- **전문 분야**:\n  * 시장 동향 분석 (상승률, 하락률, 추세)\n  * 리스크 평가 (계약, 투자 위험도)\n  * 투자 수익률 계산 (ROI, 월세 수익률)\n  * 대출 한도 및 조건 분석 (LTV, DTI, DSR)\n  * 비교 분석 (지역별, 상품별)\n- **도구**: data_analyzer, risk_evaluator, calculator\n- **적합한 작업**: 데이터 분석, 리스크 평가, 계산, 비교, 예측\n- **의존성**: 보통 search_team의 데이터가 필요\n- **예시**:\n  * "이 지역 투자 가치 분석해줘"\n  * "계약 리스크 평가해줘"\n  * "대출 가능 금액 계산해줘"\n\n### 3. document_team (문서 팀)\n- **주요 기능**: 문서 생성 및 관리\n- **전문 분야**:\n  * 계약서 작성 (임대차, 매매, 전세)\n  * 문서 템플릿 관리\n  * 특약사항 생성\n  * 계약서 수정안 작성\n  * 법률 문서 검토\n- **도구**: document_generator, contract_template, contract_reviewer\n- **적합한 작업**: 문서 작성, 계약서 생성, 문서 수정, 검토\n- **예시**:\n  * "임대차계약서 작성해줘"\n  * "특약사항 추가해줘"\n  * "계약서 수정안 만들어줘"\n\n## Chain-of-Thought Agent 선택 프로세스\n\n다음 단계를 **순서대로** 따라 최적의 Agent 조합을 선택하세요:\n\n### 1단계: 질문 요구사항 파악\n- 단순 정보 조회인가? → search_team만 필요\n- 판단/평가가 필요한가? → search + analysis 필요\n- 해결책 제시가 필요한가? → search + analysis 필요\n- 문서 생성이 필요한가? → document_team 추가\n\n### 2단계: 작업 복잡도 판단\n- **단순** (검색만): "~이 뭐야?", "~알려줘" → search_team\n- **중간** (검색+판단): "~괜찮아?", "~적절해?" → search + analysis\n- **복잡** (종합 해결): 구체적 상황 + "어떻게 해야 해?" → search + analysis\n\n### 3단계: 의존성 분석\n- 독립적 작업: 단일 팀으로 처리 가능\n- 순차적 의존: 이전 결과 필요 → 여러 팀 순서대로\n- 병렬 가능: 동시 조회 가능 → coordination: "parallel"\n\n### 4단계: 최종 검증\n- 선택한 팀들로 질문에 완전히 답변 가능한가?\n- 불필요한 팀이 포함되지 않았는가?\n- 순서가 논리적인가? (데이터 흐름 고려)\n\n### 중요 원칙:\n- **법률 키워드만으로 판단하지 말 것**: "법적으로 어떻게 해야 해?" = 법률 검색 + 분석 필요\n- **상황 설명 + 해결책 요청** = 반드시 analysis_team 포함\n- **구체적 수치 비교** (3억→10억 같은) = analysis_team 필요\n\n## 의도별 Agent 매핑 가이드 (기본 가이드 - CoT로 조정 가능)\n\n| 의도 (Intent) | 기본 조합 | 상황별 조정 |\n|--------------|-----------|-------------|\n| LEGAL_CONSULT | ["search_team"] | 해결책 요청시 → + analysis_team |\n| MARKET_INQUIRY | ["search_team"] | 비교/평가시 → + analysis_team |\n| LOAN_CONSULT | ["search_team", "analysis_team"] | 계산 필수 |\n| CONTRACT_CREATION | ["document_team"] | 검토 후 작성 → search + document |\n| CONTRACT_REVIEW | ["search_team", "analysis_team"] | 법률 검토 + 리스크 분석 |\n| COMPREHENSIVE | ["search_team", "analysis_team"] | **항상 분석 포함** |\n| RISK_ANALYSIS | ["analysis_team"] | 법률 근거 필요시 → search + analysis |\n| UNCLEAR | ["search_team", "analysis_team"] | 포괄적 대응 |\n\n**중요**: 위 매핑은 **기본 가이드**일 뿐입니다.\n실제 질문의 내용(CoT 분석 결과)에 따라 조정하세요!\n\n## 복합 질문 처리 예시 (CoT 적용)\n\n### 예시 1: 순차적 처리\n질문: "강남구 시세 확인하고 투자 가치 분석해줘"\n**CoT 분석**:\n1. 요구사항: 시세 조회 + 투자 가치 평가\n2. 복잡도: 중간 (검색 + 분석)\n3. 의존성: 시세 데이터 → 투자 분석 (순차)\n4. 검증: search만으로는 "투자 가치 평가" 불가능\n\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "1단계: 시세 조회+투자 평가 필요. 2단계: 중간 복잡도. 3단계: 순차 의존. 4단계: search로 시세 수집 후 analysis로 투자 가치 평가 필요",\n    "coordination": "sequential"\n}\n```\n\n### 예시 2: 단순 정보 조회\n질문: "전세금 인상률 한도가 얼마야?"\n**CoT 분석**:\n1. 요구사항: 단순 사실 확인\n2. 복잡도: 낮음 (정보 확인형)\n3. 의존성: 없음\n4. 검증: search_team만으로 충분\n\n```json\n{\n    "selected_agents": ["search_team"],\n    "reasoning": "1단계: 단순 정보 조회. 2단계: 저복잡도. 3단계: 독립적. 4단계: 법률 검색만으로 답변 가능",\n    "coordination": "single"\n}\n```\n\n### 예시 3: 해결책 요청 (핵심 예시!)\n질문: "집주인이 전세금 3억을 10억으로 올려달래. 법적으로 어떻게 해야 해?"\n의도: COMPREHENSIVE\n**CoT 분석**:\n1. 요구사항: 상황 설명 + 해결책 요청\n2. 복잡도: 높음 (구체적 상황 + 수치 비교)\n3. 의존성: 법률 확인 → 상황 분석 → 해결책 제시\n4. 검증: "법적으로"만 보고 search만 선택하면 불충분! 해결책 제시 필요\n\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "1단계: 법률 + 상황 분석 + 해결책 필요. 2단계: 고복잡도(3억→10억 비정상). 3단계: 순차(법률 확인 후 타당성 분석). 4단계: \'어떻게 해야\' = 단순 법률 조회 아님, 분석 필수",\n    "coordination": "sequential",\n    "confidence": 0.95\n}\n```\n\n## 응답 형식 (JSON)\n\n```json\n{\n    "selected_agents": ["선택된 agent/team 목록"],\n    "reasoning": "선택 이유를 구체적으로 설명. 각 Agent의 역할과 처리 순서 포함",\n    "coordination": "single/sequential/parallel/pipeline",\n    "dependencies": {"agent2": ["agent1"]},\n    "estimated_time": 30,\n    "confidence": 0.9\n}\n```\n\n## 선택 가이드라인\n\n1. **최소 Agent 원칙**: 가능한 적은 수의 Agent로 처리\n2. **전문성 우선**: 해당 작업에 가장 전문적인 Agent 선택\n3. **효율성 고려**: 병렬 처리 가능한 경우 명시\n4. **의존성 관리**: 데이터 흐름을 고려한 순서 지정\n5. **폴백 전략**: 불확실한 경우 ["search_team", "analysis_team"] 조합\n\n## 주의사항\n\n- selected_agents는 반드시 배열 형태\n- Agent 이름은 정확히: "search_team", "analysis_team", "document_team"\n- 최소 1개, 최대 3개 선택\n- 순서는 실행 우선순위 (앞에 있을수록 먼저 실행)\n- reasoning은 상세하고 논리적으로 작성\n- coordination 필드로 실행 방식 명시\n- 복합 질문의 경우 의존성 관계 명확히 표시'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 16:54:39,594 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 16:54:39,594 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 16:54:39,594 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 16:54:39,594 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 16:54:39,594 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 16:54:39,594 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 16:54:43,534 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 07:54:43 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'3594'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'3758'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9995'), (b'x-ratelimit-remaining-tokens', b'197891'), (b'x-ratelimit-reset-requests', b'37.175s'), (b'x-ratelimit-reset-tokens', b'632ms'), (b'x-request-id', b'req_190695184a314733b3a6b06dd22684fd'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b5a2d7fa3ea9b-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 16:54:43,534 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 16:54:43,534 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 16:54:43,540 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 16:54:43,540 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 16:54:43,540 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 16:54:43,540 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 07:54:43 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '3594', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '3758', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9995', 'x-ratelimit-remaining-tokens': '197891', 'x-ratelimit-reset-requests': '37.175s', 'x-ratelimit-reset-tokens': '632ms', 'x-request-id': 'req_190695184a314733b3a6b06dd22684fd', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b5a2d7fa3ea9b-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 16:54:43,540 - openai._base_client - DEBUG - request_id: req_190695184a314733b3a6b06dd22684fd
2025-10-05 16:54:43,541 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: agent_selection | Model: gpt-4o-mini-2024-07-18 | Tokens: 2540 (prompt: 2356, completion: 184)
2025-10-05 16:54:43,541 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM agent selection reasoning: 1단계: 전세자금대출 한도에 대한 정보 조회와 함께 대출 조건 분석이 필요합니다. 2단계: 대출 한도에 대한 단순 정보 조회가 아닌, 대출 조건에 따른 분석이 필요하므로 중간 복잡도로 판단했습니다. 3단계: 대출 한도 정보를 검색한 후, 그에 따른 분석이 필요하므로 순차적 의존성이 있습니다. 4단계: search_team이 대출 한도를 조회한 후, analysis_team이 그 정보를 바탕으로 대출 조건을 분석해야 합니다.
2025-10-05 16:54:43,541 - app.service_agent.cognitive_agents.planning_agent - INFO - ✅ Primary LLM selected agents: ['search_team', 'analysis_team']
2025-10-05 16:54:43,541 - __main__ - INFO -   의도: 대출상담
2025-10-05 16:54:43,541 - __main__ - INFO -   신뢰도: 0.90
2025-10-05 16:54:43,541 - __main__ - INFO -   추천 Agent: ['search_team', 'analysis_team']
2025-10-05 16:54:43,541 - __main__ - INFO - 
[Step 2] Query Decomposition...
2025-10-05 16:54:43,541 - app.service_agent.cognitive_agents.query_decomposer - INFO - Decomposing query: 전세자금대출 한도가 얼마나 되나요?...
2025-10-05 16:54:43,541 - app.service_agent.cognitive_agents.query_decomposer - INFO - Query is simple, no decomposition needed
2025-10-05 16:54:43,541 - __main__ - INFO -   복합 질문: False
2025-10-05 16:54:43,541 - __main__ - INFO -   작업 수: 1
2025-10-05 16:54:43,541 - __main__ - INFO -   실행 모드: sequential
2025-10-05 16:54:43,541 - __main__ - INFO - 
[Step 3] Execution Plan 생성...
2025-10-05 16:54:43,541 - app.service_agent.cognitive_agents.planning_agent - INFO - Creating execution plan for intent: 대출상담
2025-10-05 16:54:43,541 - app.service_agent.cognitive_agents.planning_agent - WARNING - AgentRegistry is empty, using default teams
2025-10-05 16:54:43,541 - app.service_agent.cognitive_agents.planning_agent - DEBUG - Suggested agents: ['search_team', 'analysis_team']
2025-10-05 16:54:43,541 - app.service_agent.cognitive_agents.planning_agent - DEBUG - Available agents: ['search_team', 'analysis_team', 'document_team']
2025-10-05 16:54:43,541 - app.service_agent.cognitive_agents.planning_agent - INFO - Selected agents/teams for execution: ['search_team', 'analysis_team']
2025-10-05 16:54:43,541 - __main__ - INFO -   전략: sequential
2025-10-05 16:54:43,541 - __main__ - INFO -   단계 수: 2
2025-10-05 16:54:43,541 - __main__ - INFO - 
✓ 테스트 성공 (소요시간: 7.05초)
2025-10-05 16:54:43,541 - __main__ - INFO - 
================================================================================
2025-10-05 16:54:43,541 - __main__ - INFO - [4] 단일 질문 테스트: S004
2025-10-05 16:54:43,541 - __main__ - INFO - 질문: 임대차계약서 작성해주세요
2025-10-05 16:54:43,541 - __main__ - INFO - ================================================================================
2025-10-05 16:54:43,542 - __main__ - INFO - 
[Step 1] Intent 분석...
2025-10-05 16:54:43,542 - app.service_agent.cognitive_agents.planning_agent - INFO - Analyzing intent for query: 임대차계약서 작성해주세요...
2025-10-05 16:54:43,542 - app.service_agent.llm_manager.prompt_manager - DEBUG - Using cached prompt: intent_analysis
2025-10-05 16:54:43,542 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-34b28198-dfd5-4d9c-955d-c4b6cd884745', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 의도 분석 전문가입니다.\n사용자의 질문을 정확히 이해하고, 어떤 종류의 도움이 필요한지 분류해야 합니다.\n\n## Chain-of-Thought 분석 프로세스\n\n질문을 분석할 때 다음 단계를 **순서대로** 따르세요:\n\n### 1단계: 질문 구조 파악\n- 단순 정보 요청인가? (예: "~이 뭐야?", "~알려줘")\n- 상황 설명이 포함되어 있는가? (배경, 현재 상태)\n- 구체적 수치나 데이터가 있는가? (금액, 비율, 기간 등)\n- 문제 해결을 요구하는가? (예: "어떻게 해야 해?", "방법 알려줘")\n\n### 2단계: 요청 유형 판단\n- **정보 확인형**: 사실, 개념, 규정 확인 → 검색만으로 충분\n- **평가/판단형**: "괜찮아?", "적절해?", "문제있어?" → 검색 + 분석 필요\n- **해결책 요청형**: "어떻게?", "방법?", "대처?" → 검색 + 분석 + 제안 필요\n- **비교/선택형**: "A vs B", "어느게 나아?" → 검색 + 분석(비교) 필요\n\n### 3단계: 복잡도 평가\n- **저**: 단일 개념/사실 확인 (예: "전세금 인상률 한도?")\n- **중**: 특정 상황 + 판단 (예: "3억을 5억으로 올려달래. 가능해?")\n- **고**: 복잡한 상황 + 여러 조건 + 해결책 (예: "10년 거주, 3억→10억 요구. 어떻게 해야 해?")\n\n### 4단계: 필요한 처리 결정\n- **검색만**: 정보 확인형 + 저복잡도\n- **검색+분석**: 평가/판단형 OR 중복잡도 OR 수치 비교 포함\n- **종합처리**: 해결책 요청형 OR 고복잡도 OR 여러 조건 동시 고려\n\n### 5단계: 최종 검증\n- 선택한 의도로 사용자 질문에 완전히 답변 가능한가?\n- 단순 정보 제공으로 끝나는가, 아니면 추가 분석/판단이 필요한가?\n- 상황 설명이 있으면서 "해결", "방법", "어떻게" 등이 있으면 → COMPREHENSIVE 고려\n\n## 중요: 복합 질문 처리\n복합적인 질문(여러 의도가 섞인 질문)의 경우, 가장 핵심적인 의도를 파악하되,\nsub_intents 필드에 부가적인 의도들도 함께 기록해주세요.\n\n**특히 주의**:\n- 법률 키워드가 있어도, "해결방법", "어떻게 해야" 같은 표현이 있으면 단순 LEGAL_CONSULT가 아닐 수 있음\n- 구체적 상황(금액, 기간 등) + 해결책 요구 = COMPREHENSIVE 또는 복합 의도로 분류\n\n## 분류 카테고리 설명:\n\n1. **LEGAL_CONSULT (법률상담)**\n   - 설명: 부동산 관련 법률, 권리, 의무에 대한 질문\n   - 예시:\n     * 단순: "전세금 5% 인상이 가능한가요?", "임대차계약 갱신 거부할 수 있나요?"\n     * 복합: "전세금 인상 가능한지 확인하고 법적 근거도 알려주세요"\n   - 키워드: 법, 전세, 임대, 보증금, 계약, 권리, 의무, 갱신, 임차인, 임대인, 법률, 규정, 조항\n   - 필요한 처리: 법률 데이터베이스 검색, 관련 법조항 찾기\n\n2. **MARKET_INQUIRY (시세조회)**\n   - 설명: 부동산 시장 가격, 시세, 거래 동향에 대한 질문\n   - 예시:\n     * 단순: "강남구 아파트 전세 시세 알려주세요", "서초동 매매가 얼마나 올랐나요?"\n     * 복합: "강남구 시세 확인하고 대출 가능 금액도 계산해줘"\n   - 키워드: 시세, 가격, 매매가, 전세가, 월세, 시장, 동향, 평균, 지역명, 상승률, 하락률\n   - 필요한 처리: 부동산 시세 데이터 조회, 지역별 가격 분석\n\n3. **LOAN_CONSULT (대출상담)**\n   - 설명: 주택담보대출, 전세자금대출 등 금융 관련 질문\n   - 예시:\n     * 단순: "전세자금대출 한도가 얼마인가요?", "LTV가 뭔가요?"\n     * 복합: "대출 한도 확인하고 금리 비교도 해주세요"\n   - 키워드: 대출, 금리, 한도, 조건, 상환, LTV, DTI, DSR, 담보, 금융, 은행\n   - 필요한 처리: 대출 상품 조회, 금리 정보 검색, 한도 계산\n\n4. **CONTRACT_CREATION (계약서작성)**\n   - 설명: 새로운 계약서나 문서를 작성해달라는 요청\n   - 예시:\n     * 단순: "임대차계약서 작성해주세요", "전세계약서 초안 만들어주세요"\n     * 복합: "계약서 작성하고 주의사항도 검토해주세요"\n   - 키워드: 작성, 만들, 생성, 초안, 계약서, 문서, 양식\n   - 필요한 처리: 문서 생성 에이전트 호출, 템플릿 기반 작성\n\n5. **CONTRACT_REVIEW (계약서검토)**\n   - 설명: 기존 계약서나 문서를 검토해달라는 요청\n   - 예시:\n     * 단순: "이 계약서 검토해주세요", "특약사항 문제없나요?"\n     * 복합: "계약서 검토하고 수정사항도 제안해주세요"\n   - 키워드: 검토, 확인, 점검, 리뷰, 분석해, 살펴봐, 체크\n   - 필요한 처리: 문서 분석, 위험 요소 식별, 개선사항 제안\n\n6. **COMPREHENSIVE (종합분석)**\n   - 설명: 여러 측면을 종합적으로 분석해달라는 요청, 또는 복잡한 상황에 대한 해결책 요청\n   - 예시:\n     * 단순: "이 물건 전체적으로 분석해주세요"\n     * 복합: "시세, 법률, 대출 모두 검토해서 종합 의견 주세요"\n     * 해결형: "10년 거주했는데 전세금 3억을 10억으로 올려달래. 어떻게 해야 해?"\n     * 상황+해결: "집주인이 계약 갱신 거부했어. 법적으로 어떻게 대응해야 할까?"\n   - 키워드: 종합, 전체, 모든, 전반적, 종합적, 평가, 분석, 어떻게, 방법, 해결, 대처\n   - 패턴: 구체적 상황 설명 + "어떻게/방법/해결" 요청\n   - 필요한 처리: 다중 데이터 소스 통합 분석, 상황 평가, 해결책 제시\n\n7. **RISK_ANALYSIS (리스크분석)**\n   - 설명: 위험 요소나 주의사항에 대한 질문\n   - 예시:\n     * 단순: "이 계약 위험한가요?", "주의할 점 알려주세요"\n     * 복합: "리스크 분석하고 대안도 제시해주세요"\n   - 키워드: 위험, 리스크, 주의, 문제점, 조심, 걱정, 우려\n   - 필요한 처리: 위험 요소 분석, 주의사항 추출\n\n8. **UNCLEAR (불분명)**\n   - 설명: 의도를 명확히 파악하기 어려운 질문\n   - 예시: "이거 좀 봐주세요", "어떻게 해야 할까요?", "도와주세요"\n   - 처리: 추가 질문으로 의도 명확화 필요\n\n9. **IRRELEVANT (무관)**\n   - 설명: 부동산과 전혀 관련 없는 질문\n   - 예시: "날씨 어때?", "저녁 뭐 먹지?", "주식 추천해줘"\n   - 처리: 부동산 관련 질문을 유도\n\n## 복합 질문 예시와 분석 (CoT 적용):\n\n### 예시 1: "강남구 아파트 시세 알려주고 전세자금대출 가능한지도 확인해줘"\n**CoT 분석**:\n1. 구조: 두 개의 요청 ("시세" + "대출")\n2. 유형: 정보 확인형 (둘 다)\n3. 복잡도: 중 (두 가지 독립적 조회)\n4. 필요 처리: 검색 + 계산/분석\n\n**결론**:\n- 주 의도: MARKET_INQUIRY (시세 조회가 먼저 필요)\n- 부가 의도: LOAN_CONSULT (대출 확인)\n- 분해: ["강남구 아파트 시세 조회", "전세자금대출 가능 여부 확인"]\n\n### 예시 2: "이 계약서 검토해서 위험한 부분 있는지 알려주고 수정 제안도 해줘"\n**CoT 분석**:\n1. 구조: 검토 + 위험 평가 + 수정안\n2. 유형: 평가/판단형 + 해결책 요청형\n3. 복잡도: 고 (3단계 처리)\n4. 필요 처리: 검토 + 분석 + 문서 생성\n\n**결론**:\n- 주 의도: CONTRACT_REVIEW (계약서 검토)\n- 부가 의도: RISK_ANALYSIS (위험 분석)\n- 분해: ["계약서 전체 검토", "위험 요소 식별", "수정사항 제안"]\n\n### 예시 3: "집주인이 짜증나, 10년 살았는데 전세금 3억을 10억으로 올려달래. 법적으로 해결방법 알려줘"\n**CoT 분석**:\n1. 구조: 상황 설명 (10년 거주, 3억→10억) + 해결책 요청\n2. 유형: 해결책 요청형 (단순 정보 X)\n3. 복잡도: 고 (구체적 상황 + 수치 비교 + 법률 + 대응방안)\n4. 필요 처리: 법률 검색 + 상황 분석 + 해결책 제시\n\n**결론**:\n- 주 의도: COMPREHENSIVE (복잡한 상황에 대한 종합 해결)\n- 부가 의도: LEGAL_CONSULT, RISK_ANALYSIS\n- 분해: ["전세금 인상 한도 법률 조회", "3억→10억 인상의 타당성 분석", "구체적 대응 방안 제시"]\n- **이유**: "법적으로"라는 키워드가 있지만, 단순 법률 확인이 아니라 구체적 상황에 대한 해결책을 요구하므로 COMPREHENSIVE\n\n### 예시 4: "전세금 인상률 상한이 얼마야?"\n**CoT 분석**:\n1. 구조: 단순 사실 확인\n2. 유형: 정보 확인형\n3. 복잡도: 저 (단일 개념)\n4. 필요 처리: 검색만\n\n**결론**:\n- 주 의도: LEGAL_CONSULT (법률 정보 조회)\n- 부가 의도: 없음\n- 분해: 필요 없음\n\n## 응답 형식 (JSON 형식으로 응답):\n\n```json\n{\n    "intent": "LEGAL_CONSULT",\n    "confidence": 0.9,\n    "keywords": ["전세금", "인상", "제한"],\n    "sub_intents": [],\n    "is_compound": false,\n    "decomposed_tasks": [],\n    "entities": {\n        "location": "강남구",\n        "price": "5억",\n        "contract_type": "전세",\n        "date": "2024년",\n        "area": "84㎡",\n        "action_verbs": ["확인", "검토"]\n    },\n    "reasoning": "전세금 인상에 대한 법률 질문이므로 LEGAL_CONSULT로 분류"\n}\n```\n\n응답 규칙:\n- intent: 위 9개 카테고리 중 하나 (대문자_언더스코어 형식)\n- confidence: 0.0~1.0 (0.8 이상이면 매우 확실, 0.5 미만이면 불확실)\n- keywords: 추출된 주요 키워드 목록\n- sub_intents: 복합 질문일 경우 부가적인 의도들\n- is_compound: 복합 질문 여부 (true/false)\n- decomposed_tasks: 복합 질문을 분해한 개별 작업들\n- entities: 추출된 엔티티 정보\n- reasoning: **반드시 CoT 5단계를 거쳐 분석한 과정을 포함** (구조 파악 → 유형 판단 → 복잡도 평가 → 필요 처리 → 최종 검증)\n\n## reasoning 작성 예시:\n"1단계(구조): 상황 설명(10년 거주, 3억→10억) + 해결책 요청 포함.\n2단계(유형): 해결책 요청형 - 단순 정보가 아닌 대응방안 필요.\n3단계(복잡도): 고 - 구체적 수치 비교와 복잡한 상황.\n4단계(처리): 법률 검색 + 상황 분석 + 해결책 제시 필요.\n5단계(검증): LEGAL_CONSULT만으로는 불충분, 종합적 분석 필요 → COMPREHENSIVE 선택"\n\n## 판단 가이드:\n- 여러 의도가 섞여있다면, 가장 주된 의도를 intent에, 나머지를 sub_intents에 기록\n- "그리고", "또한", "함께", "같이" 등의 연결어가 있으면 복합 질문일 가능성 높음\n- 법률 관련 키워드가 있으면 LEGAL_CONSULT 우선\n- 가격/시세 언급이 명확하면 MARKET_INQUIRY\n- 계약서라는 단어와 함께 "작성/만들기"가 있으면 CONTRACT_CREATION\n- 계약서라는 단어와 함께 "검토/확인"이 있으면 CONTRACT_REVIEW\n- 불확실하면 confidence를 낮게 설정하고 UNCLEAR 선택\n- 복합 질문은 is_compound를 true로 설정하고 개별 작업으로 분해\n\n분석할 질문: 임대차계약서 작성해주세요'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 16:54:43,542 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 16:54:43,543 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 16:54:43,543 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 16:54:43,543 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 16:54:43,543 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 16:54:43,543 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 16:54:47,022 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 07:54:47 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'3282'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'3301'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9995'), (b'x-ratelimit-remaining-tokens', b'197246'), (b'x-ratelimit-reset-requests', b'42.01s'), (b'x-ratelimit-reset-tokens', b'826ms'), (b'x-request-id', b'req_384d0224b0134e248a6a9bf35501f470'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b5a462d00ea9b-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 16:54:47,024 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 16:54:47,024 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 16:54:47,028 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 16:54:47,028 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 16:54:47,028 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 16:54:47,028 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 07:54:47 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '3282', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '3301', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9995', 'x-ratelimit-remaining-tokens': '197246', 'x-ratelimit-reset-requests': '42.01s', 'x-ratelimit-reset-tokens': '826ms', 'x-request-id': 'req_384d0224b0134e248a6a9bf35501f470', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b5a462d00ea9b-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 16:54:47,028 - openai._base_client - DEBUG - request_id: req_384d0224b0134e248a6a9bf35501f470
2025-10-05 16:54:47,029 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: intent_analysis | Model: gpt-4o-mini-2024-07-18 | Tokens: 3374 (prompt: 3177, completion: 197)
2025-10-05 16:54:47,029 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM Intent Analysis Result: {'intent': 'CONTRACT_CREATION', 'confidence': 0.95, 'keywords': ['임대차계약서', '작성'], 'sub_intents': [], 'is_compound': False, 'decomposed_tasks': [], 'entities': {'contract_type': '임대차계약서', 'action_verbs': ['작성', '만들기']}, 'reasoning': '1단계(구조): 단순 요청으로 임대차계약서 작성 요청 포함. 2단계(유형): 계약서 작성 요청형 - 문서 생성 필요. 3단계(복잡도): 저 - 단일 개념 확인. 4단계(처리): 문서 생성 에이전트 호출 필요. 5단계(검증): 단순 계약서 작성 요청이므로 CONTRACT_CREATION으로 분류.'}
2025-10-05 16:54:47,029 - app.service_agent.llm_manager.prompt_manager - DEBUG - Using cached prompt: agent_selection
2025-10-05 16:54:47,029 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-f338ae42-fafc-42d4-85e2-9c0c547597a9', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 Agent 선택 전문가입니다.\n사용자의 요청에 가장 적합한 Agent/Team을 선택하는 것이 목표입니다.\n\n## 현재 상황\n\n**사용자 질문:** 임대차계약서 작성해주세요\n**분석된 의도:** 계약서작성\n**추출된 키워드:** [\'임대차계약서\', \'작성\']\n\n## 사용 가능한 Agent/Team 정보\n\n{\'search_team\': {\'name\': \'search_team\', \'capabilities\': \'법률 검색, 부동산 시세 조회, 대출 상품 검색\', \'tools\': [\'legal_search\', \'market_data\', \'loan_data\'], \'use_cases\': [\'법률 상담\', \'시세 조회\', \'대출 정보\']}, \'analysis_team\': {\'name\': \'analysis_team\', \'capabilities\': \'데이터 분석, 리스크 평가, 인사이트 생성, 추천\', \'tools\': [\'data_analyzer\', \'risk_evaluator\'], \'use_cases\': [\'시장 분석\', \'리스크 평가\', \'투자 분석\']}, \'document_team\': {\'name\': \'document_team\', \'capabilities\': \'계약서 작성, 문서 생성, 문서 검토\', \'tools\': [\'document_generator\', \'contract_reviewer\'], \'use_cases\': [\'계약서 작성\', \'문서 검토\']}}\n\n## Agent 역할 및 상세 가이드\n\n### 1. search_team (검색 팀)\n- **주요 기능**: 정보 검색 및 데이터 수집\n- **전문 분야**:\n  * 법률 정보 검색 (전세법, 임대차보호법, 부동산 관련 법규)\n  * 부동산 시세 조회 (매매가, 전세가, 월세, 실거래가)\n  * 대출 상품 정보 검색 (금리, 한도, 조건)\n  * 지역 정보 및 인프라 조회\n- **도구**: legal_search, market_data, loan_data\n- **적합한 작업**: 정보 조회, 데이터 수집, 법률 확인, 시세 파악\n- **예시**:\n  * "전세금 5% 인상 가능한가요?"\n  * "강남구 아파트 전세 시세"\n  * "전세자금대출 한도 얼마?"\n\n### 2. analysis_team (분석 팀)\n- **주요 기능**: 데이터 분석 및 평가\n- **전문 분야**:\n  * 시장 동향 분석 (상승률, 하락률, 추세)\n  * 리스크 평가 (계약, 투자 위험도)\n  * 투자 수익률 계산 (ROI, 월세 수익률)\n  * 대출 한도 및 조건 분석 (LTV, DTI, DSR)\n  * 비교 분석 (지역별, 상품별)\n- **도구**: data_analyzer, risk_evaluator, calculator\n- **적합한 작업**: 데이터 분석, 리스크 평가, 계산, 비교, 예측\n- **의존성**: 보통 search_team의 데이터가 필요\n- **예시**:\n  * "이 지역 투자 가치 분석해줘"\n  * "계약 리스크 평가해줘"\n  * "대출 가능 금액 계산해줘"\n\n### 3. document_team (문서 팀)\n- **주요 기능**: 문서 생성 및 관리\n- **전문 분야**:\n  * 계약서 작성 (임대차, 매매, 전세)\n  * 문서 템플릿 관리\n  * 특약사항 생성\n  * 계약서 수정안 작성\n  * 법률 문서 검토\n- **도구**: document_generator, contract_template, contract_reviewer\n- **적합한 작업**: 문서 작성, 계약서 생성, 문서 수정, 검토\n- **예시**:\n  * "임대차계약서 작성해줘"\n  * "특약사항 추가해줘"\n  * "계약서 수정안 만들어줘"\n\n## Chain-of-Thought Agent 선택 프로세스\n\n다음 단계를 **순서대로** 따라 최적의 Agent 조합을 선택하세요:\n\n### 1단계: 질문 요구사항 파악\n- 단순 정보 조회인가? → search_team만 필요\n- 판단/평가가 필요한가? → search + analysis 필요\n- 해결책 제시가 필요한가? → search + analysis 필요\n- 문서 생성이 필요한가? → document_team 추가\n\n### 2단계: 작업 복잡도 판단\n- **단순** (검색만): "~이 뭐야?", "~알려줘" → search_team\n- **중간** (검색+판단): "~괜찮아?", "~적절해?" → search + analysis\n- **복잡** (종합 해결): 구체적 상황 + "어떻게 해야 해?" → search + analysis\n\n### 3단계: 의존성 분석\n- 독립적 작업: 단일 팀으로 처리 가능\n- 순차적 의존: 이전 결과 필요 → 여러 팀 순서대로\n- 병렬 가능: 동시 조회 가능 → coordination: "parallel"\n\n### 4단계: 최종 검증\n- 선택한 팀들로 질문에 완전히 답변 가능한가?\n- 불필요한 팀이 포함되지 않았는가?\n- 순서가 논리적인가? (데이터 흐름 고려)\n\n### 중요 원칙:\n- **법률 키워드만으로 판단하지 말 것**: "법적으로 어떻게 해야 해?" = 법률 검색 + 분석 필요\n- **상황 설명 + 해결책 요청** = 반드시 analysis_team 포함\n- **구체적 수치 비교** (3억→10억 같은) = analysis_team 필요\n\n## 의도별 Agent 매핑 가이드 (기본 가이드 - CoT로 조정 가능)\n\n| 의도 (Intent) | 기본 조합 | 상황별 조정 |\n|--------------|-----------|-------------|\n| LEGAL_CONSULT | ["search_team"] | 해결책 요청시 → + analysis_team |\n| MARKET_INQUIRY | ["search_team"] | 비교/평가시 → + analysis_team |\n| LOAN_CONSULT | ["search_team", "analysis_team"] | 계산 필수 |\n| CONTRACT_CREATION | ["document_team"] | 검토 후 작성 → search + document |\n| CONTRACT_REVIEW | ["search_team", "analysis_team"] | 법률 검토 + 리스크 분석 |\n| COMPREHENSIVE | ["search_team", "analysis_team"] | **항상 분석 포함** |\n| RISK_ANALYSIS | ["analysis_team"] | 법률 근거 필요시 → search + analysis |\n| UNCLEAR | ["search_team", "analysis_team"] | 포괄적 대응 |\n\n**중요**: 위 매핑은 **기본 가이드**일 뿐입니다.\n실제 질문의 내용(CoT 분석 결과)에 따라 조정하세요!\n\n## 복합 질문 처리 예시 (CoT 적용)\n\n### 예시 1: 순차적 처리\n질문: "강남구 시세 확인하고 투자 가치 분석해줘"\n**CoT 분석**:\n1. 요구사항: 시세 조회 + 투자 가치 평가\n2. 복잡도: 중간 (검색 + 분석)\n3. 의존성: 시세 데이터 → 투자 분석 (순차)\n4. 검증: search만으로는 "투자 가치 평가" 불가능\n\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "1단계: 시세 조회+투자 평가 필요. 2단계: 중간 복잡도. 3단계: 순차 의존. 4단계: search로 시세 수집 후 analysis로 투자 가치 평가 필요",\n    "coordination": "sequential"\n}\n```\n\n### 예시 2: 단순 정보 조회\n질문: "전세금 인상률 한도가 얼마야?"\n**CoT 분석**:\n1. 요구사항: 단순 사실 확인\n2. 복잡도: 낮음 (정보 확인형)\n3. 의존성: 없음\n4. 검증: search_team만으로 충분\n\n```json\n{\n    "selected_agents": ["search_team"],\n    "reasoning": "1단계: 단순 정보 조회. 2단계: 저복잡도. 3단계: 독립적. 4단계: 법률 검색만으로 답변 가능",\n    "coordination": "single"\n}\n```\n\n### 예시 3: 해결책 요청 (핵심 예시!)\n질문: "집주인이 전세금 3억을 10억으로 올려달래. 법적으로 어떻게 해야 해?"\n의도: COMPREHENSIVE\n**CoT 분석**:\n1. 요구사항: 상황 설명 + 해결책 요청\n2. 복잡도: 높음 (구체적 상황 + 수치 비교)\n3. 의존성: 법률 확인 → 상황 분석 → 해결책 제시\n4. 검증: "법적으로"만 보고 search만 선택하면 불충분! 해결책 제시 필요\n\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "1단계: 법률 + 상황 분석 + 해결책 필요. 2단계: 고복잡도(3억→10억 비정상). 3단계: 순차(법률 확인 후 타당성 분석). 4단계: \'어떻게 해야\' = 단순 법률 조회 아님, 분석 필수",\n    "coordination": "sequential",\n    "confidence": 0.95\n}\n```\n\n## 응답 형식 (JSON)\n\n```json\n{\n    "selected_agents": ["선택된 agent/team 목록"],\n    "reasoning": "선택 이유를 구체적으로 설명. 각 Agent의 역할과 처리 순서 포함",\n    "coordination": "single/sequential/parallel/pipeline",\n    "dependencies": {"agent2": ["agent1"]},\n    "estimated_time": 30,\n    "confidence": 0.9\n}\n```\n\n## 선택 가이드라인\n\n1. **최소 Agent 원칙**: 가능한 적은 수의 Agent로 처리\n2. **전문성 우선**: 해당 작업에 가장 전문적인 Agent 선택\n3. **효율성 고려**: 병렬 처리 가능한 경우 명시\n4. **의존성 관리**: 데이터 흐름을 고려한 순서 지정\n5. **폴백 전략**: 불확실한 경우 ["search_team", "analysis_team"] 조합\n\n## 주의사항\n\n- selected_agents는 반드시 배열 형태\n- Agent 이름은 정확히: "search_team", "analysis_team", "document_team"\n- 최소 1개, 최대 3개 선택\n- 순서는 실행 우선순위 (앞에 있을수록 먼저 실행)\n- reasoning은 상세하고 논리적으로 작성\n- coordination 필드로 실행 방식 명시\n- 복합 질문의 경우 의존성 관계 명확히 표시'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 16:54:47,030 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 16:54:47,030 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 16:54:47,030 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 16:54:47,030 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 16:54:47,030 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 16:54:47,030 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 16:54:49,469 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 07:54:49 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'2110'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'2264'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9994'), (b'x-ratelimit-remaining-tokens', b'197893'), (b'x-ratelimit-reset-requests', b'47.036s'), (b'x-ratelimit-reset-tokens', b'632ms'), (b'x-request-id', b'req_41e9a2693cea4fdca75ac0e1b3e3d69f'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b5a5bfdddea9b-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 16:54:49,469 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 16:54:49,469 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 16:54:49,475 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 16:54:49,475 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 16:54:49,475 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 16:54:49,475 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 07:54:49 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '2110', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '2264', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9994', 'x-ratelimit-remaining-tokens': '197893', 'x-ratelimit-reset-requests': '47.036s', 'x-ratelimit-reset-tokens': '632ms', 'x-request-id': 'req_41e9a2693cea4fdca75ac0e1b3e3d69f', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b5a5bfdddea9b-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 16:54:49,475 - openai._base_client - DEBUG - request_id: req_41e9a2693cea4fdca75ac0e1b3e3d69f
2025-10-05 16:54:49,477 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: agent_selection | Model: gpt-4o-mini-2024-07-18 | Tokens: 2449 (prompt: 2351, completion: 98)
2025-10-05 16:54:49,477 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM agent selection reasoning: 사용자가 요청한 '임대차계약서 작성'은 문서 생성 작업으로, document_team이 전문성을 가지고 있습니다. 이 팀은 계약서 작성 및 문서 생성에 특화되어 있으므로, 단독으로 이 요청을 처리할 수 있습니다.
2025-10-05 16:54:49,477 - app.service_agent.cognitive_agents.planning_agent - INFO - ✅ Primary LLM selected agents: ['document_team']
2025-10-05 16:54:49,477 - __main__ - INFO -   의도: 계약서작성
2025-10-05 16:54:49,477 - __main__ - INFO -   신뢰도: 0.95
2025-10-05 16:54:49,477 - __main__ - INFO -   추천 Agent: ['document_team']
2025-10-05 16:54:49,477 - __main__ - INFO - 
[Step 2] Query Decomposition...
2025-10-05 16:54:49,477 - app.service_agent.cognitive_agents.query_decomposer - INFO - Decomposing query: 임대차계약서 작성해주세요...
2025-10-05 16:54:49,477 - app.service_agent.cognitive_agents.query_decomposer - INFO - Query is simple, no decomposition needed
2025-10-05 16:54:49,477 - __main__ - INFO -   복합 질문: False
2025-10-05 16:54:49,477 - __main__ - INFO -   작업 수: 1
2025-10-05 16:54:49,477 - __main__ - INFO -   실행 모드: sequential
2025-10-05 16:54:49,477 - __main__ - INFO - 
[Step 3] Execution Plan 생성...
2025-10-05 16:54:49,477 - app.service_agent.cognitive_agents.planning_agent - INFO - Creating execution plan for intent: 계약서작성
2025-10-05 16:54:49,477 - app.service_agent.cognitive_agents.planning_agent - WARNING - AgentRegistry is empty, using default teams
2025-10-05 16:54:49,477 - app.service_agent.cognitive_agents.planning_agent - DEBUG - Suggested agents: ['document_team']
2025-10-05 16:54:49,477 - app.service_agent.cognitive_agents.planning_agent - DEBUG - Available agents: ['search_team', 'analysis_team', 'document_team']
2025-10-05 16:54:49,477 - app.service_agent.cognitive_agents.planning_agent - INFO - Selected agents/teams for execution: ['document_team']
2025-10-05 16:54:49,477 - __main__ - INFO -   전략: sequential
2025-10-05 16:54:49,477 - __main__ - INFO -   단계 수: 1
2025-10-05 16:54:49,477 - __main__ - INFO - 
✓ 테스트 성공 (소요시간: 5.94초)
2025-10-05 16:54:49,477 - __main__ - INFO - 
================================================================================
2025-10-05 16:54:49,477 - __main__ - INFO - [5] 단일 질문 테스트: S005
2025-10-05 16:54:49,477 - __main__ - INFO - 질문: 계약 갱신 거부 가능한가요?
2025-10-05 16:54:49,477 - __main__ - INFO - ================================================================================
2025-10-05 16:54:49,477 - __main__ - INFO - 
[Step 1] Intent 분석...
2025-10-05 16:54:49,477 - app.service_agent.cognitive_agents.planning_agent - INFO - Analyzing intent for query: 계약 갱신 거부 가능한가요?...
2025-10-05 16:54:49,477 - app.service_agent.llm_manager.prompt_manager - DEBUG - Using cached prompt: intent_analysis
2025-10-05 16:54:49,478 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-04af3f83-71f8-4266-a5d4-d7492230f55f', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 의도 분석 전문가입니다.\n사용자의 질문을 정확히 이해하고, 어떤 종류의 도움이 필요한지 분류해야 합니다.\n\n## Chain-of-Thought 분석 프로세스\n\n질문을 분석할 때 다음 단계를 **순서대로** 따르세요:\n\n### 1단계: 질문 구조 파악\n- 단순 정보 요청인가? (예: "~이 뭐야?", "~알려줘")\n- 상황 설명이 포함되어 있는가? (배경, 현재 상태)\n- 구체적 수치나 데이터가 있는가? (금액, 비율, 기간 등)\n- 문제 해결을 요구하는가? (예: "어떻게 해야 해?", "방법 알려줘")\n\n### 2단계: 요청 유형 판단\n- **정보 확인형**: 사실, 개념, 규정 확인 → 검색만으로 충분\n- **평가/판단형**: "괜찮아?", "적절해?", "문제있어?" → 검색 + 분석 필요\n- **해결책 요청형**: "어떻게?", "방법?", "대처?" → 검색 + 분석 + 제안 필요\n- **비교/선택형**: "A vs B", "어느게 나아?" → 검색 + 분석(비교) 필요\n\n### 3단계: 복잡도 평가\n- **저**: 단일 개념/사실 확인 (예: "전세금 인상률 한도?")\n- **중**: 특정 상황 + 판단 (예: "3억을 5억으로 올려달래. 가능해?")\n- **고**: 복잡한 상황 + 여러 조건 + 해결책 (예: "10년 거주, 3억→10억 요구. 어떻게 해야 해?")\n\n### 4단계: 필요한 처리 결정\n- **검색만**: 정보 확인형 + 저복잡도\n- **검색+분석**: 평가/판단형 OR 중복잡도 OR 수치 비교 포함\n- **종합처리**: 해결책 요청형 OR 고복잡도 OR 여러 조건 동시 고려\n\n### 5단계: 최종 검증\n- 선택한 의도로 사용자 질문에 완전히 답변 가능한가?\n- 단순 정보 제공으로 끝나는가, 아니면 추가 분석/판단이 필요한가?\n- 상황 설명이 있으면서 "해결", "방법", "어떻게" 등이 있으면 → COMPREHENSIVE 고려\n\n## 중요: 복합 질문 처리\n복합적인 질문(여러 의도가 섞인 질문)의 경우, 가장 핵심적인 의도를 파악하되,\nsub_intents 필드에 부가적인 의도들도 함께 기록해주세요.\n\n**특히 주의**:\n- 법률 키워드가 있어도, "해결방법", "어떻게 해야" 같은 표현이 있으면 단순 LEGAL_CONSULT가 아닐 수 있음\n- 구체적 상황(금액, 기간 등) + 해결책 요구 = COMPREHENSIVE 또는 복합 의도로 분류\n\n## 분류 카테고리 설명:\n\n1. **LEGAL_CONSULT (법률상담)**\n   - 설명: 부동산 관련 법률, 권리, 의무에 대한 질문\n   - 예시:\n     * 단순: "전세금 5% 인상이 가능한가요?", "임대차계약 갱신 거부할 수 있나요?"\n     * 복합: "전세금 인상 가능한지 확인하고 법적 근거도 알려주세요"\n   - 키워드: 법, 전세, 임대, 보증금, 계약, 권리, 의무, 갱신, 임차인, 임대인, 법률, 규정, 조항\n   - 필요한 처리: 법률 데이터베이스 검색, 관련 법조항 찾기\n\n2. **MARKET_INQUIRY (시세조회)**\n   - 설명: 부동산 시장 가격, 시세, 거래 동향에 대한 질문\n   - 예시:\n     * 단순: "강남구 아파트 전세 시세 알려주세요", "서초동 매매가 얼마나 올랐나요?"\n     * 복합: "강남구 시세 확인하고 대출 가능 금액도 계산해줘"\n   - 키워드: 시세, 가격, 매매가, 전세가, 월세, 시장, 동향, 평균, 지역명, 상승률, 하락률\n   - 필요한 처리: 부동산 시세 데이터 조회, 지역별 가격 분석\n\n3. **LOAN_CONSULT (대출상담)**\n   - 설명: 주택담보대출, 전세자금대출 등 금융 관련 질문\n   - 예시:\n     * 단순: "전세자금대출 한도가 얼마인가요?", "LTV가 뭔가요?"\n     * 복합: "대출 한도 확인하고 금리 비교도 해주세요"\n   - 키워드: 대출, 금리, 한도, 조건, 상환, LTV, DTI, DSR, 담보, 금융, 은행\n   - 필요한 처리: 대출 상품 조회, 금리 정보 검색, 한도 계산\n\n4. **CONTRACT_CREATION (계약서작성)**\n   - 설명: 새로운 계약서나 문서를 작성해달라는 요청\n   - 예시:\n     * 단순: "임대차계약서 작성해주세요", "전세계약서 초안 만들어주세요"\n     * 복합: "계약서 작성하고 주의사항도 검토해주세요"\n   - 키워드: 작성, 만들, 생성, 초안, 계약서, 문서, 양식\n   - 필요한 처리: 문서 생성 에이전트 호출, 템플릿 기반 작성\n\n5. **CONTRACT_REVIEW (계약서검토)**\n   - 설명: 기존 계약서나 문서를 검토해달라는 요청\n   - 예시:\n     * 단순: "이 계약서 검토해주세요", "특약사항 문제없나요?"\n     * 복합: "계약서 검토하고 수정사항도 제안해주세요"\n   - 키워드: 검토, 확인, 점검, 리뷰, 분석해, 살펴봐, 체크\n   - 필요한 처리: 문서 분석, 위험 요소 식별, 개선사항 제안\n\n6. **COMPREHENSIVE (종합분석)**\n   - 설명: 여러 측면을 종합적으로 분석해달라는 요청, 또는 복잡한 상황에 대한 해결책 요청\n   - 예시:\n     * 단순: "이 물건 전체적으로 분석해주세요"\n     * 복합: "시세, 법률, 대출 모두 검토해서 종합 의견 주세요"\n     * 해결형: "10년 거주했는데 전세금 3억을 10억으로 올려달래. 어떻게 해야 해?"\n     * 상황+해결: "집주인이 계약 갱신 거부했어. 법적으로 어떻게 대응해야 할까?"\n   - 키워드: 종합, 전체, 모든, 전반적, 종합적, 평가, 분석, 어떻게, 방법, 해결, 대처\n   - 패턴: 구체적 상황 설명 + "어떻게/방법/해결" 요청\n   - 필요한 처리: 다중 데이터 소스 통합 분석, 상황 평가, 해결책 제시\n\n7. **RISK_ANALYSIS (리스크분석)**\n   - 설명: 위험 요소나 주의사항에 대한 질문\n   - 예시:\n     * 단순: "이 계약 위험한가요?", "주의할 점 알려주세요"\n     * 복합: "리스크 분석하고 대안도 제시해주세요"\n   - 키워드: 위험, 리스크, 주의, 문제점, 조심, 걱정, 우려\n   - 필요한 처리: 위험 요소 분석, 주의사항 추출\n\n8. **UNCLEAR (불분명)**\n   - 설명: 의도를 명확히 파악하기 어려운 질문\n   - 예시: "이거 좀 봐주세요", "어떻게 해야 할까요?", "도와주세요"\n   - 처리: 추가 질문으로 의도 명확화 필요\n\n9. **IRRELEVANT (무관)**\n   - 설명: 부동산과 전혀 관련 없는 질문\n   - 예시: "날씨 어때?", "저녁 뭐 먹지?", "주식 추천해줘"\n   - 처리: 부동산 관련 질문을 유도\n\n## 복합 질문 예시와 분석 (CoT 적용):\n\n### 예시 1: "강남구 아파트 시세 알려주고 전세자금대출 가능한지도 확인해줘"\n**CoT 분석**:\n1. 구조: 두 개의 요청 ("시세" + "대출")\n2. 유형: 정보 확인형 (둘 다)\n3. 복잡도: 중 (두 가지 독립적 조회)\n4. 필요 처리: 검색 + 계산/분석\n\n**결론**:\n- 주 의도: MARKET_INQUIRY (시세 조회가 먼저 필요)\n- 부가 의도: LOAN_CONSULT (대출 확인)\n- 분해: ["강남구 아파트 시세 조회", "전세자금대출 가능 여부 확인"]\n\n### 예시 2: "이 계약서 검토해서 위험한 부분 있는지 알려주고 수정 제안도 해줘"\n**CoT 분석**:\n1. 구조: 검토 + 위험 평가 + 수정안\n2. 유형: 평가/판단형 + 해결책 요청형\n3. 복잡도: 고 (3단계 처리)\n4. 필요 처리: 검토 + 분석 + 문서 생성\n\n**결론**:\n- 주 의도: CONTRACT_REVIEW (계약서 검토)\n- 부가 의도: RISK_ANALYSIS (위험 분석)\n- 분해: ["계약서 전체 검토", "위험 요소 식별", "수정사항 제안"]\n\n### 예시 3: "집주인이 짜증나, 10년 살았는데 전세금 3억을 10억으로 올려달래. 법적으로 해결방법 알려줘"\n**CoT 분석**:\n1. 구조: 상황 설명 (10년 거주, 3억→10억) + 해결책 요청\n2. 유형: 해결책 요청형 (단순 정보 X)\n3. 복잡도: 고 (구체적 상황 + 수치 비교 + 법률 + 대응방안)\n4. 필요 처리: 법률 검색 + 상황 분석 + 해결책 제시\n\n**결론**:\n- 주 의도: COMPREHENSIVE (복잡한 상황에 대한 종합 해결)\n- 부가 의도: LEGAL_CONSULT, RISK_ANALYSIS\n- 분해: ["전세금 인상 한도 법률 조회", "3억→10억 인상의 타당성 분석", "구체적 대응 방안 제시"]\n- **이유**: "법적으로"라는 키워드가 있지만, 단순 법률 확인이 아니라 구체적 상황에 대한 해결책을 요구하므로 COMPREHENSIVE\n\n### 예시 4: "전세금 인상률 상한이 얼마야?"\n**CoT 분석**:\n1. 구조: 단순 사실 확인\n2. 유형: 정보 확인형\n3. 복잡도: 저 (단일 개념)\n4. 필요 처리: 검색만\n\n**결론**:\n- 주 의도: LEGAL_CONSULT (법률 정보 조회)\n- 부가 의도: 없음\n- 분해: 필요 없음\n\n## 응답 형식 (JSON 형식으로 응답):\n\n```json\n{\n    "intent": "LEGAL_CONSULT",\n    "confidence": 0.9,\n    "keywords": ["전세금", "인상", "제한"],\n    "sub_intents": [],\n    "is_compound": false,\n    "decomposed_tasks": [],\n    "entities": {\n        "location": "강남구",\n        "price": "5억",\n        "contract_type": "전세",\n        "date": "2024년",\n        "area": "84㎡",\n        "action_verbs": ["확인", "검토"]\n    },\n    "reasoning": "전세금 인상에 대한 법률 질문이므로 LEGAL_CONSULT로 분류"\n}\n```\n\n응답 규칙:\n- intent: 위 9개 카테고리 중 하나 (대문자_언더스코어 형식)\n- confidence: 0.0~1.0 (0.8 이상이면 매우 확실, 0.5 미만이면 불확실)\n- keywords: 추출된 주요 키워드 목록\n- sub_intents: 복합 질문일 경우 부가적인 의도들\n- is_compound: 복합 질문 여부 (true/false)\n- decomposed_tasks: 복합 질문을 분해한 개별 작업들\n- entities: 추출된 엔티티 정보\n- reasoning: **반드시 CoT 5단계를 거쳐 분석한 과정을 포함** (구조 파악 → 유형 판단 → 복잡도 평가 → 필요 처리 → 최종 검증)\n\n## reasoning 작성 예시:\n"1단계(구조): 상황 설명(10년 거주, 3억→10억) + 해결책 요청 포함.\n2단계(유형): 해결책 요청형 - 단순 정보가 아닌 대응방안 필요.\n3단계(복잡도): 고 - 구체적 수치 비교와 복잡한 상황.\n4단계(처리): 법률 검색 + 상황 분석 + 해결책 제시 필요.\n5단계(검증): LEGAL_CONSULT만으로는 불충분, 종합적 분석 필요 → COMPREHENSIVE 선택"\n\n## 판단 가이드:\n- 여러 의도가 섞여있다면, 가장 주된 의도를 intent에, 나머지를 sub_intents에 기록\n- "그리고", "또한", "함께", "같이" 등의 연결어가 있으면 복합 질문일 가능성 높음\n- 법률 관련 키워드가 있으면 LEGAL_CONSULT 우선\n- 가격/시세 언급이 명확하면 MARKET_INQUIRY\n- 계약서라는 단어와 함께 "작성/만들기"가 있으면 CONTRACT_CREATION\n- 계약서라는 단어와 함께 "검토/확인"이 있으면 CONTRACT_REVIEW\n- 불확실하면 confidence를 낮게 설정하고 UNCLEAR 선택\n- 복합 질문은 is_compound를 true로 설정하고 개별 작업으로 분해\n\n분석할 질문: 계약 갱신 거부 가능한가요?'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 16:54:49,478 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 16:54:49,478 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 16:54:49,479 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 16:54:49,479 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 16:54:49,479 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 16:54:49,479 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 16:54:52,694 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 07:54:52 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'3009'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'3035'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9994'), (b'x-ratelimit-remaining-tokens', b'197246'), (b'x-ratelimit-reset-requests', b'44.712s'), (b'x-ratelimit-reset-tokens', b'826ms'), (b'x-request-id', b'req_87f7781b0a9c40eea520568cd4015222'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b5a6b3cebea9b-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 16:54:52,694 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 16:54:52,694 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 16:54:52,704 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 16:54:52,705 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 16:54:52,705 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 16:54:52,705 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 07:54:52 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '3009', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '3035', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9994', 'x-ratelimit-remaining-tokens': '197246', 'x-ratelimit-reset-requests': '44.712s', 'x-ratelimit-reset-tokens': '826ms', 'x-request-id': 'req_87f7781b0a9c40eea520568cd4015222', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b5a6b3cebea9b-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 16:54:52,705 - openai._base_client - DEBUG - request_id: req_87f7781b0a9c40eea520568cd4015222
2025-10-05 16:54:52,705 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: intent_analysis | Model: gpt-4o-mini-2024-07-18 | Tokens: 3388 (prompt: 3179, completion: 209)
2025-10-05 16:54:52,705 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM Intent Analysis Result: {'intent': 'LEGAL_CONSULT', 'confidence': 0.9, 'keywords': ['계약', '갱신', '거부'], 'sub_intents': [], 'is_compound': False, 'decomposed_tasks': [], 'entities': {'contract_type': '임대차계약', 'action_verbs': ['확인', '검토']}, 'reasoning': '1단계(구조): 단순 정보 요청으로 계약 갱신 거부 가능성에 대한 질문. 2단계(유형): 정보 확인형 - 법률적 사실 확인이 필요. 3단계(복잡도): 저 - 단일 개념 확인. 4단계(처리): 법률 데이터베이스 검색 필요. 5단계(검증): 계약 갱신 거부 가능성에 대한 법률 질문이므로 LEGAL_CONSULT로 분류.'}
2025-10-05 16:54:52,705 - app.service_agent.llm_manager.prompt_manager - DEBUG - Using cached prompt: agent_selection
2025-10-05 16:54:52,706 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-14c72b8b-838c-420e-89fe-0c9bd0791abb', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 Agent 선택 전문가입니다.\n사용자의 요청에 가장 적합한 Agent/Team을 선택하는 것이 목표입니다.\n\n## 현재 상황\n\n**사용자 질문:** 계약 갱신 거부 가능한가요?\n**분석된 의도:** 법률상담\n**추출된 키워드:** [\'계약\', \'갱신\', \'거부\']\n\n## 사용 가능한 Agent/Team 정보\n\n{\'search_team\': {\'name\': \'search_team\', \'capabilities\': \'법률 검색, 부동산 시세 조회, 대출 상품 검색\', \'tools\': [\'legal_search\', \'market_data\', \'loan_data\'], \'use_cases\': [\'법률 상담\', \'시세 조회\', \'대출 정보\']}, \'analysis_team\': {\'name\': \'analysis_team\', \'capabilities\': \'데이터 분석, 리스크 평가, 인사이트 생성, 추천\', \'tools\': [\'data_analyzer\', \'risk_evaluator\'], \'use_cases\': [\'시장 분석\', \'리스크 평가\', \'투자 분석\']}, \'document_team\': {\'name\': \'document_team\', \'capabilities\': \'계약서 작성, 문서 생성, 문서 검토\', \'tools\': [\'document_generator\', \'contract_reviewer\'], \'use_cases\': [\'계약서 작성\', \'문서 검토\']}}\n\n## Agent 역할 및 상세 가이드\n\n### 1. search_team (검색 팀)\n- **주요 기능**: 정보 검색 및 데이터 수집\n- **전문 분야**:\n  * 법률 정보 검색 (전세법, 임대차보호법, 부동산 관련 법규)\n  * 부동산 시세 조회 (매매가, 전세가, 월세, 실거래가)\n  * 대출 상품 정보 검색 (금리, 한도, 조건)\n  * 지역 정보 및 인프라 조회\n- **도구**: legal_search, market_data, loan_data\n- **적합한 작업**: 정보 조회, 데이터 수집, 법률 확인, 시세 파악\n- **예시**:\n  * "전세금 5% 인상 가능한가요?"\n  * "강남구 아파트 전세 시세"\n  * "전세자금대출 한도 얼마?"\n\n### 2. analysis_team (분석 팀)\n- **주요 기능**: 데이터 분석 및 평가\n- **전문 분야**:\n  * 시장 동향 분석 (상승률, 하락률, 추세)\n  * 리스크 평가 (계약, 투자 위험도)\n  * 투자 수익률 계산 (ROI, 월세 수익률)\n  * 대출 한도 및 조건 분석 (LTV, DTI, DSR)\n  * 비교 분석 (지역별, 상품별)\n- **도구**: data_analyzer, risk_evaluator, calculator\n- **적합한 작업**: 데이터 분석, 리스크 평가, 계산, 비교, 예측\n- **의존성**: 보통 search_team의 데이터가 필요\n- **예시**:\n  * "이 지역 투자 가치 분석해줘"\n  * "계약 리스크 평가해줘"\n  * "대출 가능 금액 계산해줘"\n\n### 3. document_team (문서 팀)\n- **주요 기능**: 문서 생성 및 관리\n- **전문 분야**:\n  * 계약서 작성 (임대차, 매매, 전세)\n  * 문서 템플릿 관리\n  * 특약사항 생성\n  * 계약서 수정안 작성\n  * 법률 문서 검토\n- **도구**: document_generator, contract_template, contract_reviewer\n- **적합한 작업**: 문서 작성, 계약서 생성, 문서 수정, 검토\n- **예시**:\n  * "임대차계약서 작성해줘"\n  * "특약사항 추가해줘"\n  * "계약서 수정안 만들어줘"\n\n## Chain-of-Thought Agent 선택 프로세스\n\n다음 단계를 **순서대로** 따라 최적의 Agent 조합을 선택하세요:\n\n### 1단계: 질문 요구사항 파악\n- 단순 정보 조회인가? → search_team만 필요\n- 판단/평가가 필요한가? → search + analysis 필요\n- 해결책 제시가 필요한가? → search + analysis 필요\n- 문서 생성이 필요한가? → document_team 추가\n\n### 2단계: 작업 복잡도 판단\n- **단순** (검색만): "~이 뭐야?", "~알려줘" → search_team\n- **중간** (검색+판단): "~괜찮아?", "~적절해?" → search + analysis\n- **복잡** (종합 해결): 구체적 상황 + "어떻게 해야 해?" → search + analysis\n\n### 3단계: 의존성 분석\n- 독립적 작업: 단일 팀으로 처리 가능\n- 순차적 의존: 이전 결과 필요 → 여러 팀 순서대로\n- 병렬 가능: 동시 조회 가능 → coordination: "parallel"\n\n### 4단계: 최종 검증\n- 선택한 팀들로 질문에 완전히 답변 가능한가?\n- 불필요한 팀이 포함되지 않았는가?\n- 순서가 논리적인가? (데이터 흐름 고려)\n\n### 중요 원칙:\n- **법률 키워드만으로 판단하지 말 것**: "법적으로 어떻게 해야 해?" = 법률 검색 + 분석 필요\n- **상황 설명 + 해결책 요청** = 반드시 analysis_team 포함\n- **구체적 수치 비교** (3억→10억 같은) = analysis_team 필요\n\n## 의도별 Agent 매핑 가이드 (기본 가이드 - CoT로 조정 가능)\n\n| 의도 (Intent) | 기본 조합 | 상황별 조정 |\n|--------------|-----------|-------------|\n| LEGAL_CONSULT | ["search_team"] | 해결책 요청시 → + analysis_team |\n| MARKET_INQUIRY | ["search_team"] | 비교/평가시 → + analysis_team |\n| LOAN_CONSULT | ["search_team", "analysis_team"] | 계산 필수 |\n| CONTRACT_CREATION | ["document_team"] | 검토 후 작성 → search + document |\n| CONTRACT_REVIEW | ["search_team", "analysis_team"] | 법률 검토 + 리스크 분석 |\n| COMPREHENSIVE | ["search_team", "analysis_team"] | **항상 분석 포함** |\n| RISK_ANALYSIS | ["analysis_team"] | 법률 근거 필요시 → search + analysis |\n| UNCLEAR | ["search_team", "analysis_team"] | 포괄적 대응 |\n\n**중요**: 위 매핑은 **기본 가이드**일 뿐입니다.\n실제 질문의 내용(CoT 분석 결과)에 따라 조정하세요!\n\n## 복합 질문 처리 예시 (CoT 적용)\n\n### 예시 1: 순차적 처리\n질문: "강남구 시세 확인하고 투자 가치 분석해줘"\n**CoT 분석**:\n1. 요구사항: 시세 조회 + 투자 가치 평가\n2. 복잡도: 중간 (검색 + 분석)\n3. 의존성: 시세 데이터 → 투자 분석 (순차)\n4. 검증: search만으로는 "투자 가치 평가" 불가능\n\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "1단계: 시세 조회+투자 평가 필요. 2단계: 중간 복잡도. 3단계: 순차 의존. 4단계: search로 시세 수집 후 analysis로 투자 가치 평가 필요",\n    "coordination": "sequential"\n}\n```\n\n### 예시 2: 단순 정보 조회\n질문: "전세금 인상률 한도가 얼마야?"\n**CoT 분석**:\n1. 요구사항: 단순 사실 확인\n2. 복잡도: 낮음 (정보 확인형)\n3. 의존성: 없음\n4. 검증: search_team만으로 충분\n\n```json\n{\n    "selected_agents": ["search_team"],\n    "reasoning": "1단계: 단순 정보 조회. 2단계: 저복잡도. 3단계: 독립적. 4단계: 법률 검색만으로 답변 가능",\n    "coordination": "single"\n}\n```\n\n### 예시 3: 해결책 요청 (핵심 예시!)\n질문: "집주인이 전세금 3억을 10억으로 올려달래. 법적으로 어떻게 해야 해?"\n의도: COMPREHENSIVE\n**CoT 분석**:\n1. 요구사항: 상황 설명 + 해결책 요청\n2. 복잡도: 높음 (구체적 상황 + 수치 비교)\n3. 의존성: 법률 확인 → 상황 분석 → 해결책 제시\n4. 검증: "법적으로"만 보고 search만 선택하면 불충분! 해결책 제시 필요\n\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "1단계: 법률 + 상황 분석 + 해결책 필요. 2단계: 고복잡도(3억→10억 비정상). 3단계: 순차(법률 확인 후 타당성 분석). 4단계: \'어떻게 해야\' = 단순 법률 조회 아님, 분석 필수",\n    "coordination": "sequential",\n    "confidence": 0.95\n}\n```\n\n## 응답 형식 (JSON)\n\n```json\n{\n    "selected_agents": ["선택된 agent/team 목록"],\n    "reasoning": "선택 이유를 구체적으로 설명. 각 Agent의 역할과 처리 순서 포함",\n    "coordination": "single/sequential/parallel/pipeline",\n    "dependencies": {"agent2": ["agent1"]},\n    "estimated_time": 30,\n    "confidence": 0.9\n}\n```\n\n## 선택 가이드라인\n\n1. **최소 Agent 원칙**: 가능한 적은 수의 Agent로 처리\n2. **전문성 우선**: 해당 작업에 가장 전문적인 Agent 선택\n3. **효율성 고려**: 병렬 처리 가능한 경우 명시\n4. **의존성 관리**: 데이터 흐름을 고려한 순서 지정\n5. **폴백 전략**: 불확실한 경우 ["search_team", "analysis_team"] 조합\n\n## 주의사항\n\n- selected_agents는 반드시 배열 형태\n- Agent 이름은 정확히: "search_team", "analysis_team", "document_team"\n- 최소 1개, 최대 3개 선택\n- 순서는 실행 우선순위 (앞에 있을수록 먼저 실행)\n- reasoning은 상세하고 논리적으로 작성\n- coordination 필드로 실행 방식 명시\n- 복합 질문의 경우 의존성 관계 명확히 표시'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 16:54:52,706 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 16:54:52,706 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 16:54:52,708 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 16:54:52,708 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 16:54:52,708 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 16:54:52,708 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 16:54:55,815 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 07:54:55 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'2793'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'2920'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9993'), (b'x-ratelimit-remaining-tokens', b'197894'), (b'x-ratelimit-reset-requests', b'58.659s'), (b'x-ratelimit-reset-tokens', b'631ms'), (b'x-request-id', b'req_0ccc4428ebe443ab9614c40e8dae1cfc'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b5a7f6a1eea9b-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 16:54:55,816 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 16:54:55,816 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 16:54:55,816 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 16:54:55,816 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 16:54:55,816 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 16:54:55,816 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 07:54:55 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '2793', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '2920', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9993', 'x-ratelimit-remaining-tokens': '197894', 'x-ratelimit-reset-requests': '58.659s', 'x-ratelimit-reset-tokens': '631ms', 'x-request-id': 'req_0ccc4428ebe443ab9614c40e8dae1cfc', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b5a7f6a1eea9b-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 16:54:55,816 - openai._base_client - DEBUG - request_id: req_0ccc4428ebe443ab9614c40e8dae1cfc
2025-10-05 16:54:55,817 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: agent_selection | Model: gpt-4o-mini-2024-07-18 | Tokens: 2534 (prompt: 2355, completion: 179)
2025-10-05 16:54:55,817 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM agent selection reasoning: 1단계: 계약 갱신 거부 가능성에 대한 법률적 정보 검색이 필요하고, 사용자가 해결책을 요청하고 있으므로 분석이 필요하다. 2단계: 중간 복잡도(법률 정보 확인 + 해결책 제시). 3단계: 법률 정보를 검색한 후, 그에 대한 분석이 필요하므로 순차적 의존성이 있다. 4단계: 단순 법률 검색만으로는 사용자의 질문에 충분히 답변할 수 없으므로 분석 팀을 포함해야 한다.
2025-10-05 16:54:55,817 - app.service_agent.cognitive_agents.planning_agent - INFO - ✅ Primary LLM selected agents: ['search_team', 'analysis_team']
2025-10-05 16:54:55,817 - __main__ - INFO -   의도: 법률상담
2025-10-05 16:54:55,817 - __main__ - INFO -   신뢰도: 0.90
2025-10-05 16:54:55,817 - __main__ - INFO -   추천 Agent: ['search_team', 'analysis_team']
2025-10-05 16:54:55,817 - __main__ - INFO - 
[Step 2] Query Decomposition...
2025-10-05 16:54:55,817 - app.service_agent.cognitive_agents.query_decomposer - INFO - Decomposing query: 계약 갱신 거부 가능한가요?...
2025-10-05 16:54:55,817 - app.service_agent.cognitive_agents.query_decomposer - INFO - Query is simple, no decomposition needed
2025-10-05 16:54:55,817 - __main__ - INFO -   복합 질문: False
2025-10-05 16:54:55,817 - __main__ - INFO -   작업 수: 1
2025-10-05 16:54:55,817 - __main__ - INFO -   실행 모드: sequential
2025-10-05 16:54:55,817 - __main__ - INFO - 
[Step 3] Execution Plan 생성...
2025-10-05 16:54:55,817 - app.service_agent.cognitive_agents.planning_agent - INFO - Creating execution plan for intent: 법률상담
2025-10-05 16:54:55,817 - app.service_agent.cognitive_agents.planning_agent - WARNING - AgentRegistry is empty, using default teams
2025-10-05 16:54:55,817 - app.service_agent.cognitive_agents.planning_agent - DEBUG - Suggested agents: ['search_team', 'analysis_team']
2025-10-05 16:54:55,817 - app.service_agent.cognitive_agents.planning_agent - DEBUG - Available agents: ['search_team', 'analysis_team', 'document_team']
2025-10-05 16:54:55,817 - app.service_agent.cognitive_agents.planning_agent - INFO - Selected agents/teams for execution: ['search_team', 'analysis_team']
2025-10-05 16:54:55,817 - __main__ - INFO -   전략: sequential
2025-10-05 16:54:55,817 - __main__ - INFO -   단계 수: 2
2025-10-05 16:54:55,817 - __main__ - INFO - 
✓ 테스트 성공 (소요시간: 6.34초)
2025-10-05 16:54:55,818 - __main__ - INFO - 
결과 저장: C:\kdy\Projects\holmesnyangz\beta_v001\backend\app\service_agent\reports\phase1_test_results.json
2025-10-05 16:54:55,818 - __main__ - INFO - 
================================================================================
2025-10-05 16:54:55,818 - __main__ - INFO - [6] 단일 질문 테스트: S006
2025-10-05 16:54:55,818 - __main__ - INFO - 질문: 서초구 아파트 매매 시세는?
2025-10-05 16:54:55,818 - __main__ - INFO - ================================================================================
2025-10-05 16:54:55,818 - __main__ - INFO - 
[Step 1] Intent 분석...
2025-10-05 16:54:55,818 - app.service_agent.cognitive_agents.planning_agent - INFO - Analyzing intent for query: 서초구 아파트 매매 시세는?...
2025-10-05 16:54:55,818 - app.service_agent.llm_manager.prompt_manager - DEBUG - Using cached prompt: intent_analysis
2025-10-05 16:54:55,819 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-93329053-0efe-4505-a724-25be1131d4c4', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 의도 분석 전문가입니다.\n사용자의 질문을 정확히 이해하고, 어떤 종류의 도움이 필요한지 분류해야 합니다.\n\n## Chain-of-Thought 분석 프로세스\n\n질문을 분석할 때 다음 단계를 **순서대로** 따르세요:\n\n### 1단계: 질문 구조 파악\n- 단순 정보 요청인가? (예: "~이 뭐야?", "~알려줘")\n- 상황 설명이 포함되어 있는가? (배경, 현재 상태)\n- 구체적 수치나 데이터가 있는가? (금액, 비율, 기간 등)\n- 문제 해결을 요구하는가? (예: "어떻게 해야 해?", "방법 알려줘")\n\n### 2단계: 요청 유형 판단\n- **정보 확인형**: 사실, 개념, 규정 확인 → 검색만으로 충분\n- **평가/판단형**: "괜찮아?", "적절해?", "문제있어?" → 검색 + 분석 필요\n- **해결책 요청형**: "어떻게?", "방법?", "대처?" → 검색 + 분석 + 제안 필요\n- **비교/선택형**: "A vs B", "어느게 나아?" → 검색 + 분석(비교) 필요\n\n### 3단계: 복잡도 평가\n- **저**: 단일 개념/사실 확인 (예: "전세금 인상률 한도?")\n- **중**: 특정 상황 + 판단 (예: "3억을 5억으로 올려달래. 가능해?")\n- **고**: 복잡한 상황 + 여러 조건 + 해결책 (예: "10년 거주, 3억→10억 요구. 어떻게 해야 해?")\n\n### 4단계: 필요한 처리 결정\n- **검색만**: 정보 확인형 + 저복잡도\n- **검색+분석**: 평가/판단형 OR 중복잡도 OR 수치 비교 포함\n- **종합처리**: 해결책 요청형 OR 고복잡도 OR 여러 조건 동시 고려\n\n### 5단계: 최종 검증\n- 선택한 의도로 사용자 질문에 완전히 답변 가능한가?\n- 단순 정보 제공으로 끝나는가, 아니면 추가 분석/판단이 필요한가?\n- 상황 설명이 있으면서 "해결", "방법", "어떻게" 등이 있으면 → COMPREHENSIVE 고려\n\n## 중요: 복합 질문 처리\n복합적인 질문(여러 의도가 섞인 질문)의 경우, 가장 핵심적인 의도를 파악하되,\nsub_intents 필드에 부가적인 의도들도 함께 기록해주세요.\n\n**특히 주의**:\n- 법률 키워드가 있어도, "해결방법", "어떻게 해야" 같은 표현이 있으면 단순 LEGAL_CONSULT가 아닐 수 있음\n- 구체적 상황(금액, 기간 등) + 해결책 요구 = COMPREHENSIVE 또는 복합 의도로 분류\n\n## 분류 카테고리 설명:\n\n1. **LEGAL_CONSULT (법률상담)**\n   - 설명: 부동산 관련 법률, 권리, 의무에 대한 질문\n   - 예시:\n     * 단순: "전세금 5% 인상이 가능한가요?", "임대차계약 갱신 거부할 수 있나요?"\n     * 복합: "전세금 인상 가능한지 확인하고 법적 근거도 알려주세요"\n   - 키워드: 법, 전세, 임대, 보증금, 계약, 권리, 의무, 갱신, 임차인, 임대인, 법률, 규정, 조항\n   - 필요한 처리: 법률 데이터베이스 검색, 관련 법조항 찾기\n\n2. **MARKET_INQUIRY (시세조회)**\n   - 설명: 부동산 시장 가격, 시세, 거래 동향에 대한 질문\n   - 예시:\n     * 단순: "강남구 아파트 전세 시세 알려주세요", "서초동 매매가 얼마나 올랐나요?"\n     * 복합: "강남구 시세 확인하고 대출 가능 금액도 계산해줘"\n   - 키워드: 시세, 가격, 매매가, 전세가, 월세, 시장, 동향, 평균, 지역명, 상승률, 하락률\n   - 필요한 처리: 부동산 시세 데이터 조회, 지역별 가격 분석\n\n3. **LOAN_CONSULT (대출상담)**\n   - 설명: 주택담보대출, 전세자금대출 등 금융 관련 질문\n   - 예시:\n     * 단순: "전세자금대출 한도가 얼마인가요?", "LTV가 뭔가요?"\n     * 복합: "대출 한도 확인하고 금리 비교도 해주세요"\n   - 키워드: 대출, 금리, 한도, 조건, 상환, LTV, DTI, DSR, 담보, 금융, 은행\n   - 필요한 처리: 대출 상품 조회, 금리 정보 검색, 한도 계산\n\n4. **CONTRACT_CREATION (계약서작성)**\n   - 설명: 새로운 계약서나 문서를 작성해달라는 요청\n   - 예시:\n     * 단순: "임대차계약서 작성해주세요", "전세계약서 초안 만들어주세요"\n     * 복합: "계약서 작성하고 주의사항도 검토해주세요"\n   - 키워드: 작성, 만들, 생성, 초안, 계약서, 문서, 양식\n   - 필요한 처리: 문서 생성 에이전트 호출, 템플릿 기반 작성\n\n5. **CONTRACT_REVIEW (계약서검토)**\n   - 설명: 기존 계약서나 문서를 검토해달라는 요청\n   - 예시:\n     * 단순: "이 계약서 검토해주세요", "특약사항 문제없나요?"\n     * 복합: "계약서 검토하고 수정사항도 제안해주세요"\n   - 키워드: 검토, 확인, 점검, 리뷰, 분석해, 살펴봐, 체크\n   - 필요한 처리: 문서 분석, 위험 요소 식별, 개선사항 제안\n\n6. **COMPREHENSIVE (종합분석)**\n   - 설명: 여러 측면을 종합적으로 분석해달라는 요청, 또는 복잡한 상황에 대한 해결책 요청\n   - 예시:\n     * 단순: "이 물건 전체적으로 분석해주세요"\n     * 복합: "시세, 법률, 대출 모두 검토해서 종합 의견 주세요"\n     * 해결형: "10년 거주했는데 전세금 3억을 10억으로 올려달래. 어떻게 해야 해?"\n     * 상황+해결: "집주인이 계약 갱신 거부했어. 법적으로 어떻게 대응해야 할까?"\n   - 키워드: 종합, 전체, 모든, 전반적, 종합적, 평가, 분석, 어떻게, 방법, 해결, 대처\n   - 패턴: 구체적 상황 설명 + "어떻게/방법/해결" 요청\n   - 필요한 처리: 다중 데이터 소스 통합 분석, 상황 평가, 해결책 제시\n\n7. **RISK_ANALYSIS (리스크분석)**\n   - 설명: 위험 요소나 주의사항에 대한 질문\n   - 예시:\n     * 단순: "이 계약 위험한가요?", "주의할 점 알려주세요"\n     * 복합: "리스크 분석하고 대안도 제시해주세요"\n   - 키워드: 위험, 리스크, 주의, 문제점, 조심, 걱정, 우려\n   - 필요한 처리: 위험 요소 분석, 주의사항 추출\n\n8. **UNCLEAR (불분명)**\n   - 설명: 의도를 명확히 파악하기 어려운 질문\n   - 예시: "이거 좀 봐주세요", "어떻게 해야 할까요?", "도와주세요"\n   - 처리: 추가 질문으로 의도 명확화 필요\n\n9. **IRRELEVANT (무관)**\n   - 설명: 부동산과 전혀 관련 없는 질문\n   - 예시: "날씨 어때?", "저녁 뭐 먹지?", "주식 추천해줘"\n   - 처리: 부동산 관련 질문을 유도\n\n## 복합 질문 예시와 분석 (CoT 적용):\n\n### 예시 1: "강남구 아파트 시세 알려주고 전세자금대출 가능한지도 확인해줘"\n**CoT 분석**:\n1. 구조: 두 개의 요청 ("시세" + "대출")\n2. 유형: 정보 확인형 (둘 다)\n3. 복잡도: 중 (두 가지 독립적 조회)\n4. 필요 처리: 검색 + 계산/분석\n\n**결론**:\n- 주 의도: MARKET_INQUIRY (시세 조회가 먼저 필요)\n- 부가 의도: LOAN_CONSULT (대출 확인)\n- 분해: ["강남구 아파트 시세 조회", "전세자금대출 가능 여부 확인"]\n\n### 예시 2: "이 계약서 검토해서 위험한 부분 있는지 알려주고 수정 제안도 해줘"\n**CoT 분석**:\n1. 구조: 검토 + 위험 평가 + 수정안\n2. 유형: 평가/판단형 + 해결책 요청형\n3. 복잡도: 고 (3단계 처리)\n4. 필요 처리: 검토 + 분석 + 문서 생성\n\n**결론**:\n- 주 의도: CONTRACT_REVIEW (계약서 검토)\n- 부가 의도: RISK_ANALYSIS (위험 분석)\n- 분해: ["계약서 전체 검토", "위험 요소 식별", "수정사항 제안"]\n\n### 예시 3: "집주인이 짜증나, 10년 살았는데 전세금 3억을 10억으로 올려달래. 법적으로 해결방법 알려줘"\n**CoT 분석**:\n1. 구조: 상황 설명 (10년 거주, 3억→10억) + 해결책 요청\n2. 유형: 해결책 요청형 (단순 정보 X)\n3. 복잡도: 고 (구체적 상황 + 수치 비교 + 법률 + 대응방안)\n4. 필요 처리: 법률 검색 + 상황 분석 + 해결책 제시\n\n**결론**:\n- 주 의도: COMPREHENSIVE (복잡한 상황에 대한 종합 해결)\n- 부가 의도: LEGAL_CONSULT, RISK_ANALYSIS\n- 분해: ["전세금 인상 한도 법률 조회", "3억→10억 인상의 타당성 분석", "구체적 대응 방안 제시"]\n- **이유**: "법적으로"라는 키워드가 있지만, 단순 법률 확인이 아니라 구체적 상황에 대한 해결책을 요구하므로 COMPREHENSIVE\n\n### 예시 4: "전세금 인상률 상한이 얼마야?"\n**CoT 분석**:\n1. 구조: 단순 사실 확인\n2. 유형: 정보 확인형\n3. 복잡도: 저 (단일 개념)\n4. 필요 처리: 검색만\n\n**결론**:\n- 주 의도: LEGAL_CONSULT (법률 정보 조회)\n- 부가 의도: 없음\n- 분해: 필요 없음\n\n## 응답 형식 (JSON 형식으로 응답):\n\n```json\n{\n    "intent": "LEGAL_CONSULT",\n    "confidence": 0.9,\n    "keywords": ["전세금", "인상", "제한"],\n    "sub_intents": [],\n    "is_compound": false,\n    "decomposed_tasks": [],\n    "entities": {\n        "location": "강남구",\n        "price": "5억",\n        "contract_type": "전세",\n        "date": "2024년",\n        "area": "84㎡",\n        "action_verbs": ["확인", "검토"]\n    },\n    "reasoning": "전세금 인상에 대한 법률 질문이므로 LEGAL_CONSULT로 분류"\n}\n```\n\n응답 규칙:\n- intent: 위 9개 카테고리 중 하나 (대문자_언더스코어 형식)\n- confidence: 0.0~1.0 (0.8 이상이면 매우 확실, 0.5 미만이면 불확실)\n- keywords: 추출된 주요 키워드 목록\n- sub_intents: 복합 질문일 경우 부가적인 의도들\n- is_compound: 복합 질문 여부 (true/false)\n- decomposed_tasks: 복합 질문을 분해한 개별 작업들\n- entities: 추출된 엔티티 정보\n- reasoning: **반드시 CoT 5단계를 거쳐 분석한 과정을 포함** (구조 파악 → 유형 판단 → 복잡도 평가 → 필요 처리 → 최종 검증)\n\n## reasoning 작성 예시:\n"1단계(구조): 상황 설명(10년 거주, 3억→10억) + 해결책 요청 포함.\n2단계(유형): 해결책 요청형 - 단순 정보가 아닌 대응방안 필요.\n3단계(복잡도): 고 - 구체적 수치 비교와 복잡한 상황.\n4단계(처리): 법률 검색 + 상황 분석 + 해결책 제시 필요.\n5단계(검증): LEGAL_CONSULT만으로는 불충분, 종합적 분석 필요 → COMPREHENSIVE 선택"\n\n## 판단 가이드:\n- 여러 의도가 섞여있다면, 가장 주된 의도를 intent에, 나머지를 sub_intents에 기록\n- "그리고", "또한", "함께", "같이" 등의 연결어가 있으면 복합 질문일 가능성 높음\n- 법률 관련 키워드가 있으면 LEGAL_CONSULT 우선\n- 가격/시세 언급이 명확하면 MARKET_INQUIRY\n- 계약서라는 단어와 함께 "작성/만들기"가 있으면 CONTRACT_CREATION\n- 계약서라는 단어와 함께 "검토/확인"이 있으면 CONTRACT_REVIEW\n- 불확실하면 confidence를 낮게 설정하고 UNCLEAR 선택\n- 복합 질문은 is_compound를 true로 설정하고 개별 작업으로 분해\n\n분석할 질문: 서초구 아파트 매매 시세는?'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 16:54:55,819 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 16:54:55,819 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 16:54:55,820 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 16:54:55,820 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 16:54:55,820 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 16:54:55,820 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 16:55:01,271 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 07:55:01 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'5210'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'5268'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9992'), (b'x-ratelimit-remaining-tokens', b'197246'), (b'x-ratelimit-reset-requests', b'1m4.292s'), (b'x-ratelimit-reset-tokens', b'826ms'), (b'x-request-id', b'req_b77c609b996943a49fbc68591ce99c48'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b5a92dd99ea9b-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 16:55:01,271 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 16:55:01,271 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 16:55:01,273 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 16:55:01,274 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 16:55:01,274 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 16:55:01,274 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 07:55:01 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '5210', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '5268', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9992', 'x-ratelimit-remaining-tokens': '197246', 'x-ratelimit-reset-requests': '1m4.292s', 'x-ratelimit-reset-tokens': '826ms', 'x-request-id': 'req_b77c609b996943a49fbc68591ce99c48', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b5a92dd99ea9b-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 16:55:01,274 - openai._base_client - DEBUG - request_id: req_b77c609b996943a49fbc68591ce99c48
2025-10-05 16:55:01,274 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: intent_analysis | Model: gpt-4o-mini-2024-07-18 | Tokens: 3388 (prompt: 3180, completion: 208)
2025-10-05 16:55:01,274 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM Intent Analysis Result: {'intent': 'MARKET_INQUIRY', 'confidence': 0.95, 'keywords': ['서초구', '아파트', '매매', '시세'], 'sub_intents': [], 'is_compound': False, 'decomposed_tasks': [], 'entities': {'location': '서초구', 'property_type': '아파트', 'action_verbs': ['조회', '확인']}, 'reasoning': '1단계(구조): 단순 정보 요청으로, 서초구 아파트 매매 시세에 대한 질문. 2단계(유형): 정보 확인형 - 시세에 대한 사실 확인. 3단계(복잡도): 저 - 단일 개념 확인. 4단계(처리): 검색만으로 충분. 5단계(검증): 단순 시세 조회이므로 MARKET_INQUIRY로 분류.'}
2025-10-05 16:55:01,274 - app.service_agent.llm_manager.prompt_manager - DEBUG - Using cached prompt: agent_selection
2025-10-05 16:55:01,275 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-bbd46b3b-e701-4875-9847-66b48f035b37', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 Agent 선택 전문가입니다.\n사용자의 요청에 가장 적합한 Agent/Team을 선택하는 것이 목표입니다.\n\n## 현재 상황\n\n**사용자 질문:** 서초구 아파트 매매 시세는?\n**분석된 의도:** 시세조회\n**추출된 키워드:** [\'서초구\', \'아파트\', \'매매\', \'시세\']\n\n## 사용 가능한 Agent/Team 정보\n\n{\'search_team\': {\'name\': \'search_team\', \'capabilities\': \'법률 검색, 부동산 시세 조회, 대출 상품 검색\', \'tools\': [\'legal_search\', \'market_data\', \'loan_data\'], \'use_cases\': [\'법률 상담\', \'시세 조회\', \'대출 정보\']}, \'analysis_team\': {\'name\': \'analysis_team\', \'capabilities\': \'데이터 분석, 리스크 평가, 인사이트 생성, 추천\', \'tools\': [\'data_analyzer\', \'risk_evaluator\'], \'use_cases\': [\'시장 분석\', \'리스크 평가\', \'투자 분석\']}, \'document_team\': {\'name\': \'document_team\', \'capabilities\': \'계약서 작성, 문서 생성, 문서 검토\', \'tools\': [\'document_generator\', \'contract_reviewer\'], \'use_cases\': [\'계약서 작성\', \'문서 검토\']}}\n\n## Agent 역할 및 상세 가이드\n\n### 1. search_team (검색 팀)\n- **주요 기능**: 정보 검색 및 데이터 수집\n- **전문 분야**:\n  * 법률 정보 검색 (전세법, 임대차보호법, 부동산 관련 법규)\n  * 부동산 시세 조회 (매매가, 전세가, 월세, 실거래가)\n  * 대출 상품 정보 검색 (금리, 한도, 조건)\n  * 지역 정보 및 인프라 조회\n- **도구**: legal_search, market_data, loan_data\n- **적합한 작업**: 정보 조회, 데이터 수집, 법률 확인, 시세 파악\n- **예시**:\n  * "전세금 5% 인상 가능한가요?"\n  * "강남구 아파트 전세 시세"\n  * "전세자금대출 한도 얼마?"\n\n### 2. analysis_team (분석 팀)\n- **주요 기능**: 데이터 분석 및 평가\n- **전문 분야**:\n  * 시장 동향 분석 (상승률, 하락률, 추세)\n  * 리스크 평가 (계약, 투자 위험도)\n  * 투자 수익률 계산 (ROI, 월세 수익률)\n  * 대출 한도 및 조건 분석 (LTV, DTI, DSR)\n  * 비교 분석 (지역별, 상품별)\n- **도구**: data_analyzer, risk_evaluator, calculator\n- **적합한 작업**: 데이터 분석, 리스크 평가, 계산, 비교, 예측\n- **의존성**: 보통 search_team의 데이터가 필요\n- **예시**:\n  * "이 지역 투자 가치 분석해줘"\n  * "계약 리스크 평가해줘"\n  * "대출 가능 금액 계산해줘"\n\n### 3. document_team (문서 팀)\n- **주요 기능**: 문서 생성 및 관리\n- **전문 분야**:\n  * 계약서 작성 (임대차, 매매, 전세)\n  * 문서 템플릿 관리\n  * 특약사항 생성\n  * 계약서 수정안 작성\n  * 법률 문서 검토\n- **도구**: document_generator, contract_template, contract_reviewer\n- **적합한 작업**: 문서 작성, 계약서 생성, 문서 수정, 검토\n- **예시**:\n  * "임대차계약서 작성해줘"\n  * "특약사항 추가해줘"\n  * "계약서 수정안 만들어줘"\n\n## Chain-of-Thought Agent 선택 프로세스\n\n다음 단계를 **순서대로** 따라 최적의 Agent 조합을 선택하세요:\n\n### 1단계: 질문 요구사항 파악\n- 단순 정보 조회인가? → search_team만 필요\n- 판단/평가가 필요한가? → search + analysis 필요\n- 해결책 제시가 필요한가? → search + analysis 필요\n- 문서 생성이 필요한가? → document_team 추가\n\n### 2단계: 작업 복잡도 판단\n- **단순** (검색만): "~이 뭐야?", "~알려줘" → search_team\n- **중간** (검색+판단): "~괜찮아?", "~적절해?" → search + analysis\n- **복잡** (종합 해결): 구체적 상황 + "어떻게 해야 해?" → search + analysis\n\n### 3단계: 의존성 분석\n- 독립적 작업: 단일 팀으로 처리 가능\n- 순차적 의존: 이전 결과 필요 → 여러 팀 순서대로\n- 병렬 가능: 동시 조회 가능 → coordination: "parallel"\n\n### 4단계: 최종 검증\n- 선택한 팀들로 질문에 완전히 답변 가능한가?\n- 불필요한 팀이 포함되지 않았는가?\n- 순서가 논리적인가? (데이터 흐름 고려)\n\n### 중요 원칙:\n- **법률 키워드만으로 판단하지 말 것**: "법적으로 어떻게 해야 해?" = 법률 검색 + 분석 필요\n- **상황 설명 + 해결책 요청** = 반드시 analysis_team 포함\n- **구체적 수치 비교** (3억→10억 같은) = analysis_team 필요\n\n## 의도별 Agent 매핑 가이드 (기본 가이드 - CoT로 조정 가능)\n\n| 의도 (Intent) | 기본 조합 | 상황별 조정 |\n|--------------|-----------|-------------|\n| LEGAL_CONSULT | ["search_team"] | 해결책 요청시 → + analysis_team |\n| MARKET_INQUIRY | ["search_team"] | 비교/평가시 → + analysis_team |\n| LOAN_CONSULT | ["search_team", "analysis_team"] | 계산 필수 |\n| CONTRACT_CREATION | ["document_team"] | 검토 후 작성 → search + document |\n| CONTRACT_REVIEW | ["search_team", "analysis_team"] | 법률 검토 + 리스크 분석 |\n| COMPREHENSIVE | ["search_team", "analysis_team"] | **항상 분석 포함** |\n| RISK_ANALYSIS | ["analysis_team"] | 법률 근거 필요시 → search + analysis |\n| UNCLEAR | ["search_team", "analysis_team"] | 포괄적 대응 |\n\n**중요**: 위 매핑은 **기본 가이드**일 뿐입니다.\n실제 질문의 내용(CoT 분석 결과)에 따라 조정하세요!\n\n## 복합 질문 처리 예시 (CoT 적용)\n\n### 예시 1: 순차적 처리\n질문: "강남구 시세 확인하고 투자 가치 분석해줘"\n**CoT 분석**:\n1. 요구사항: 시세 조회 + 투자 가치 평가\n2. 복잡도: 중간 (검색 + 분석)\n3. 의존성: 시세 데이터 → 투자 분석 (순차)\n4. 검증: search만으로는 "투자 가치 평가" 불가능\n\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "1단계: 시세 조회+투자 평가 필요. 2단계: 중간 복잡도. 3단계: 순차 의존. 4단계: search로 시세 수집 후 analysis로 투자 가치 평가 필요",\n    "coordination": "sequential"\n}\n```\n\n### 예시 2: 단순 정보 조회\n질문: "전세금 인상률 한도가 얼마야?"\n**CoT 분석**:\n1. 요구사항: 단순 사실 확인\n2. 복잡도: 낮음 (정보 확인형)\n3. 의존성: 없음\n4. 검증: search_team만으로 충분\n\n```json\n{\n    "selected_agents": ["search_team"],\n    "reasoning": "1단계: 단순 정보 조회. 2단계: 저복잡도. 3단계: 독립적. 4단계: 법률 검색만으로 답변 가능",\n    "coordination": "single"\n}\n```\n\n### 예시 3: 해결책 요청 (핵심 예시!)\n질문: "집주인이 전세금 3억을 10억으로 올려달래. 법적으로 어떻게 해야 해?"\n의도: COMPREHENSIVE\n**CoT 분석**:\n1. 요구사항: 상황 설명 + 해결책 요청\n2. 복잡도: 높음 (구체적 상황 + 수치 비교)\n3. 의존성: 법률 확인 → 상황 분석 → 해결책 제시\n4. 검증: "법적으로"만 보고 search만 선택하면 불충분! 해결책 제시 필요\n\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "1단계: 법률 + 상황 분석 + 해결책 필요. 2단계: 고복잡도(3억→10억 비정상). 3단계: 순차(법률 확인 후 타당성 분석). 4단계: \'어떻게 해야\' = 단순 법률 조회 아님, 분석 필수",\n    "coordination": "sequential",\n    "confidence": 0.95\n}\n```\n\n## 응답 형식 (JSON)\n\n```json\n{\n    "selected_agents": ["선택된 agent/team 목록"],\n    "reasoning": "선택 이유를 구체적으로 설명. 각 Agent의 역할과 처리 순서 포함",\n    "coordination": "single/sequential/parallel/pipeline",\n    "dependencies": {"agent2": ["agent1"]},\n    "estimated_time": 30,\n    "confidence": 0.9\n}\n```\n\n## 선택 가이드라인\n\n1. **최소 Agent 원칙**: 가능한 적은 수의 Agent로 처리\n2. **전문성 우선**: 해당 작업에 가장 전문적인 Agent 선택\n3. **효율성 고려**: 병렬 처리 가능한 경우 명시\n4. **의존성 관리**: 데이터 흐름을 고려한 순서 지정\n5. **폴백 전략**: 불확실한 경우 ["search_team", "analysis_team"] 조합\n\n## 주의사항\n\n- selected_agents는 반드시 배열 형태\n- Agent 이름은 정확히: "search_team", "analysis_team", "document_team"\n- 최소 1개, 최대 3개 선택\n- 순서는 실행 우선순위 (앞에 있을수록 먼저 실행)\n- reasoning은 상세하고 논리적으로 작성\n- coordination 필드로 실행 방식 명시\n- 복합 질문의 경우 의존성 관계 명확히 표시'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 16:55:01,275 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 16:55:01,275 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 16:55:01,275 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 16:55:01,275 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 16:55:01,276 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 16:55:01,276 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 16:55:04,478 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 07:55:04 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'2858'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'2877'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9992'), (b'x-ratelimit-remaining-tokens', b'197890'), (b'x-ratelimit-reset-requests', b'1m7.333s'), (b'x-ratelimit-reset-tokens', b'633ms'), (b'x-request-id', b'req_179034cb8473478ca5c7cb657f248c70'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b5ab4fc20ea9b-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 16:55:04,478 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 16:55:04,478 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 16:55:04,484 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 16:55:04,484 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 16:55:04,484 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 16:55:04,484 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 07:55:04 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '2858', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '2877', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9992', 'x-ratelimit-remaining-tokens': '197890', 'x-ratelimit-reset-requests': '1m7.333s', 'x-ratelimit-reset-tokens': '633ms', 'x-request-id': 'req_179034cb8473478ca5c7cb657f248c70', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b5ab4fc20ea9b-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 16:55:04,484 - openai._base_client - DEBUG - request_id: req_179034cb8473478ca5c7cb657f248c70
2025-10-05 16:55:04,485 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: agent_selection | Model: gpt-4o-mini-2024-07-18 | Tokens: 2490 (prompt: 2359, completion: 131)
2025-10-05 16:55:04,485 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM agent selection reasoning: 1단계: 사용자는 서초구 아파트 매매 시세를 조회하고자 하므로 단순 정보 조회가 필요합니다. 2단계: 이 요청은 단순한 정보 확인으로 저복잡도입니다. 3단계: 독립적인 작업으로 search_team만으로 충분합니다. 4단계: search_team이 부동산 시세 조회에 적합하므로 선택하였습니다.
2025-10-05 16:55:04,485 - app.service_agent.cognitive_agents.planning_agent - INFO - ✅ Primary LLM selected agents: ['search_team']
2025-10-05 16:55:04,485 - __main__ - INFO -   의도: 시세조회
2025-10-05 16:55:04,485 - __main__ - INFO -   신뢰도: 0.95
2025-10-05 16:55:04,485 - __main__ - INFO -   추천 Agent: ['search_team']
2025-10-05 16:55:04,485 - __main__ - INFO - 
[Step 2] Query Decomposition...
2025-10-05 16:55:04,485 - app.service_agent.cognitive_agents.query_decomposer - INFO - Decomposing query: 서초구 아파트 매매 시세는?...
2025-10-05 16:55:04,485 - app.service_agent.cognitive_agents.query_decomposer - INFO - Query is simple, no decomposition needed
2025-10-05 16:55:04,485 - __main__ - INFO -   복합 질문: False
2025-10-05 16:55:04,485 - __main__ - INFO -   작업 수: 1
2025-10-05 16:55:04,485 - __main__ - INFO -   실행 모드: sequential
2025-10-05 16:55:04,485 - __main__ - INFO - 
[Step 3] Execution Plan 생성...
2025-10-05 16:55:04,485 - app.service_agent.cognitive_agents.planning_agent - INFO - Creating execution plan for intent: 시세조회
2025-10-05 16:55:04,485 - app.service_agent.cognitive_agents.planning_agent - WARNING - AgentRegistry is empty, using default teams
2025-10-05 16:55:04,485 - app.service_agent.cognitive_agents.planning_agent - DEBUG - Suggested agents: ['search_team']
2025-10-05 16:55:04,485 - app.service_agent.cognitive_agents.planning_agent - DEBUG - Available agents: ['search_team', 'analysis_team', 'document_team']
2025-10-05 16:55:04,485 - app.service_agent.cognitive_agents.planning_agent - INFO - Selected agents/teams for execution: ['search_team']
2025-10-05 16:55:04,485 - __main__ - INFO -   전략: sequential
2025-10-05 16:55:04,485 - __main__ - INFO -   단계 수: 1
2025-10-05 16:55:04,485 - __main__ - INFO - 
✓ 테스트 성공 (소요시간: 8.67초)
2025-10-05 16:55:04,485 - __main__ - INFO - 
================================================================================
2025-10-05 16:55:04,485 - __main__ - INFO - [7] 단일 질문 테스트: S007
2025-10-05 16:55:04,485 - __main__ - INFO - 질문: LTV 비율이 뭔가요?
2025-10-05 16:55:04,485 - __main__ - INFO - ================================================================================
2025-10-05 16:55:04,485 - __main__ - INFO - 
[Step 1] Intent 분석...
2025-10-05 16:55:04,485 - app.service_agent.cognitive_agents.planning_agent - INFO - Analyzing intent for query: LTV 비율이 뭔가요?...
2025-10-05 16:55:04,485 - app.service_agent.llm_manager.prompt_manager - DEBUG - Using cached prompt: intent_analysis
2025-10-05 16:55:04,486 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-17152690-523e-4be5-8b93-b6f736e48bab', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 의도 분석 전문가입니다.\n사용자의 질문을 정확히 이해하고, 어떤 종류의 도움이 필요한지 분류해야 합니다.\n\n## Chain-of-Thought 분석 프로세스\n\n질문을 분석할 때 다음 단계를 **순서대로** 따르세요:\n\n### 1단계: 질문 구조 파악\n- 단순 정보 요청인가? (예: "~이 뭐야?", "~알려줘")\n- 상황 설명이 포함되어 있는가? (배경, 현재 상태)\n- 구체적 수치나 데이터가 있는가? (금액, 비율, 기간 등)\n- 문제 해결을 요구하는가? (예: "어떻게 해야 해?", "방법 알려줘")\n\n### 2단계: 요청 유형 판단\n- **정보 확인형**: 사실, 개념, 규정 확인 → 검색만으로 충분\n- **평가/판단형**: "괜찮아?", "적절해?", "문제있어?" → 검색 + 분석 필요\n- **해결책 요청형**: "어떻게?", "방법?", "대처?" → 검색 + 분석 + 제안 필요\n- **비교/선택형**: "A vs B", "어느게 나아?" → 검색 + 분석(비교) 필요\n\n### 3단계: 복잡도 평가\n- **저**: 단일 개념/사실 확인 (예: "전세금 인상률 한도?")\n- **중**: 특정 상황 + 판단 (예: "3억을 5억으로 올려달래. 가능해?")\n- **고**: 복잡한 상황 + 여러 조건 + 해결책 (예: "10년 거주, 3억→10억 요구. 어떻게 해야 해?")\n\n### 4단계: 필요한 처리 결정\n- **검색만**: 정보 확인형 + 저복잡도\n- **검색+분석**: 평가/판단형 OR 중복잡도 OR 수치 비교 포함\n- **종합처리**: 해결책 요청형 OR 고복잡도 OR 여러 조건 동시 고려\n\n### 5단계: 최종 검증\n- 선택한 의도로 사용자 질문에 완전히 답변 가능한가?\n- 단순 정보 제공으로 끝나는가, 아니면 추가 분석/판단이 필요한가?\n- 상황 설명이 있으면서 "해결", "방법", "어떻게" 등이 있으면 → COMPREHENSIVE 고려\n\n## 중요: 복합 질문 처리\n복합적인 질문(여러 의도가 섞인 질문)의 경우, 가장 핵심적인 의도를 파악하되,\nsub_intents 필드에 부가적인 의도들도 함께 기록해주세요.\n\n**특히 주의**:\n- 법률 키워드가 있어도, "해결방법", "어떻게 해야" 같은 표현이 있으면 단순 LEGAL_CONSULT가 아닐 수 있음\n- 구체적 상황(금액, 기간 등) + 해결책 요구 = COMPREHENSIVE 또는 복합 의도로 분류\n\n## 분류 카테고리 설명:\n\n1. **LEGAL_CONSULT (법률상담)**\n   - 설명: 부동산 관련 법률, 권리, 의무에 대한 질문\n   - 예시:\n     * 단순: "전세금 5% 인상이 가능한가요?", "임대차계약 갱신 거부할 수 있나요?"\n     * 복합: "전세금 인상 가능한지 확인하고 법적 근거도 알려주세요"\n   - 키워드: 법, 전세, 임대, 보증금, 계약, 권리, 의무, 갱신, 임차인, 임대인, 법률, 규정, 조항\n   - 필요한 처리: 법률 데이터베이스 검색, 관련 법조항 찾기\n\n2. **MARKET_INQUIRY (시세조회)**\n   - 설명: 부동산 시장 가격, 시세, 거래 동향에 대한 질문\n   - 예시:\n     * 단순: "강남구 아파트 전세 시세 알려주세요", "서초동 매매가 얼마나 올랐나요?"\n     * 복합: "강남구 시세 확인하고 대출 가능 금액도 계산해줘"\n   - 키워드: 시세, 가격, 매매가, 전세가, 월세, 시장, 동향, 평균, 지역명, 상승률, 하락률\n   - 필요한 처리: 부동산 시세 데이터 조회, 지역별 가격 분석\n\n3. **LOAN_CONSULT (대출상담)**\n   - 설명: 주택담보대출, 전세자금대출 등 금융 관련 질문\n   - 예시:\n     * 단순: "전세자금대출 한도가 얼마인가요?", "LTV가 뭔가요?"\n     * 복합: "대출 한도 확인하고 금리 비교도 해주세요"\n   - 키워드: 대출, 금리, 한도, 조건, 상환, LTV, DTI, DSR, 담보, 금융, 은행\n   - 필요한 처리: 대출 상품 조회, 금리 정보 검색, 한도 계산\n\n4. **CONTRACT_CREATION (계약서작성)**\n   - 설명: 새로운 계약서나 문서를 작성해달라는 요청\n   - 예시:\n     * 단순: "임대차계약서 작성해주세요", "전세계약서 초안 만들어주세요"\n     * 복합: "계약서 작성하고 주의사항도 검토해주세요"\n   - 키워드: 작성, 만들, 생성, 초안, 계약서, 문서, 양식\n   - 필요한 처리: 문서 생성 에이전트 호출, 템플릿 기반 작성\n\n5. **CONTRACT_REVIEW (계약서검토)**\n   - 설명: 기존 계약서나 문서를 검토해달라는 요청\n   - 예시:\n     * 단순: "이 계약서 검토해주세요", "특약사항 문제없나요?"\n     * 복합: "계약서 검토하고 수정사항도 제안해주세요"\n   - 키워드: 검토, 확인, 점검, 리뷰, 분석해, 살펴봐, 체크\n   - 필요한 처리: 문서 분석, 위험 요소 식별, 개선사항 제안\n\n6. **COMPREHENSIVE (종합분석)**\n   - 설명: 여러 측면을 종합적으로 분석해달라는 요청, 또는 복잡한 상황에 대한 해결책 요청\n   - 예시:\n     * 단순: "이 물건 전체적으로 분석해주세요"\n     * 복합: "시세, 법률, 대출 모두 검토해서 종합 의견 주세요"\n     * 해결형: "10년 거주했는데 전세금 3억을 10억으로 올려달래. 어떻게 해야 해?"\n     * 상황+해결: "집주인이 계약 갱신 거부했어. 법적으로 어떻게 대응해야 할까?"\n   - 키워드: 종합, 전체, 모든, 전반적, 종합적, 평가, 분석, 어떻게, 방법, 해결, 대처\n   - 패턴: 구체적 상황 설명 + "어떻게/방법/해결" 요청\n   - 필요한 처리: 다중 데이터 소스 통합 분석, 상황 평가, 해결책 제시\n\n7. **RISK_ANALYSIS (리스크분석)**\n   - 설명: 위험 요소나 주의사항에 대한 질문\n   - 예시:\n     * 단순: "이 계약 위험한가요?", "주의할 점 알려주세요"\n     * 복합: "리스크 분석하고 대안도 제시해주세요"\n   - 키워드: 위험, 리스크, 주의, 문제점, 조심, 걱정, 우려\n   - 필요한 처리: 위험 요소 분석, 주의사항 추출\n\n8. **UNCLEAR (불분명)**\n   - 설명: 의도를 명확히 파악하기 어려운 질문\n   - 예시: "이거 좀 봐주세요", "어떻게 해야 할까요?", "도와주세요"\n   - 처리: 추가 질문으로 의도 명확화 필요\n\n9. **IRRELEVANT (무관)**\n   - 설명: 부동산과 전혀 관련 없는 질문\n   - 예시: "날씨 어때?", "저녁 뭐 먹지?", "주식 추천해줘"\n   - 처리: 부동산 관련 질문을 유도\n\n## 복합 질문 예시와 분석 (CoT 적용):\n\n### 예시 1: "강남구 아파트 시세 알려주고 전세자금대출 가능한지도 확인해줘"\n**CoT 분석**:\n1. 구조: 두 개의 요청 ("시세" + "대출")\n2. 유형: 정보 확인형 (둘 다)\n3. 복잡도: 중 (두 가지 독립적 조회)\n4. 필요 처리: 검색 + 계산/분석\n\n**결론**:\n- 주 의도: MARKET_INQUIRY (시세 조회가 먼저 필요)\n- 부가 의도: LOAN_CONSULT (대출 확인)\n- 분해: ["강남구 아파트 시세 조회", "전세자금대출 가능 여부 확인"]\n\n### 예시 2: "이 계약서 검토해서 위험한 부분 있는지 알려주고 수정 제안도 해줘"\n**CoT 분석**:\n1. 구조: 검토 + 위험 평가 + 수정안\n2. 유형: 평가/판단형 + 해결책 요청형\n3. 복잡도: 고 (3단계 처리)\n4. 필요 처리: 검토 + 분석 + 문서 생성\n\n**결론**:\n- 주 의도: CONTRACT_REVIEW (계약서 검토)\n- 부가 의도: RISK_ANALYSIS (위험 분석)\n- 분해: ["계약서 전체 검토", "위험 요소 식별", "수정사항 제안"]\n\n### 예시 3: "집주인이 짜증나, 10년 살았는데 전세금 3억을 10억으로 올려달래. 법적으로 해결방법 알려줘"\n**CoT 분석**:\n1. 구조: 상황 설명 (10년 거주, 3억→10억) + 해결책 요청\n2. 유형: 해결책 요청형 (단순 정보 X)\n3. 복잡도: 고 (구체적 상황 + 수치 비교 + 법률 + 대응방안)\n4. 필요 처리: 법률 검색 + 상황 분석 + 해결책 제시\n\n**결론**:\n- 주 의도: COMPREHENSIVE (복잡한 상황에 대한 종합 해결)\n- 부가 의도: LEGAL_CONSULT, RISK_ANALYSIS\n- 분해: ["전세금 인상 한도 법률 조회", "3억→10억 인상의 타당성 분석", "구체적 대응 방안 제시"]\n- **이유**: "법적으로"라는 키워드가 있지만, 단순 법률 확인이 아니라 구체적 상황에 대한 해결책을 요구하므로 COMPREHENSIVE\n\n### 예시 4: "전세금 인상률 상한이 얼마야?"\n**CoT 분석**:\n1. 구조: 단순 사실 확인\n2. 유형: 정보 확인형\n3. 복잡도: 저 (단일 개념)\n4. 필요 처리: 검색만\n\n**결론**:\n- 주 의도: LEGAL_CONSULT (법률 정보 조회)\n- 부가 의도: 없음\n- 분해: 필요 없음\n\n## 응답 형식 (JSON 형식으로 응답):\n\n```json\n{\n    "intent": "LEGAL_CONSULT",\n    "confidence": 0.9,\n    "keywords": ["전세금", "인상", "제한"],\n    "sub_intents": [],\n    "is_compound": false,\n    "decomposed_tasks": [],\n    "entities": {\n        "location": "강남구",\n        "price": "5억",\n        "contract_type": "전세",\n        "date": "2024년",\n        "area": "84㎡",\n        "action_verbs": ["확인", "검토"]\n    },\n    "reasoning": "전세금 인상에 대한 법률 질문이므로 LEGAL_CONSULT로 분류"\n}\n```\n\n응답 규칙:\n- intent: 위 9개 카테고리 중 하나 (대문자_언더스코어 형식)\n- confidence: 0.0~1.0 (0.8 이상이면 매우 확실, 0.5 미만이면 불확실)\n- keywords: 추출된 주요 키워드 목록\n- sub_intents: 복합 질문일 경우 부가적인 의도들\n- is_compound: 복합 질문 여부 (true/false)\n- decomposed_tasks: 복합 질문을 분해한 개별 작업들\n- entities: 추출된 엔티티 정보\n- reasoning: **반드시 CoT 5단계를 거쳐 분석한 과정을 포함** (구조 파악 → 유형 판단 → 복잡도 평가 → 필요 처리 → 최종 검증)\n\n## reasoning 작성 예시:\n"1단계(구조): 상황 설명(10년 거주, 3억→10억) + 해결책 요청 포함.\n2단계(유형): 해결책 요청형 - 단순 정보가 아닌 대응방안 필요.\n3단계(복잡도): 고 - 구체적 수치 비교와 복잡한 상황.\n4단계(처리): 법률 검색 + 상황 분석 + 해결책 제시 필요.\n5단계(검증): LEGAL_CONSULT만으로는 불충분, 종합적 분석 필요 → COMPREHENSIVE 선택"\n\n## 판단 가이드:\n- 여러 의도가 섞여있다면, 가장 주된 의도를 intent에, 나머지를 sub_intents에 기록\n- "그리고", "또한", "함께", "같이" 등의 연결어가 있으면 복합 질문일 가능성 높음\n- 법률 관련 키워드가 있으면 LEGAL_CONSULT 우선\n- 가격/시세 언급이 명확하면 MARKET_INQUIRY\n- 계약서라는 단어와 함께 "작성/만들기"가 있으면 CONTRACT_CREATION\n- 계약서라는 단어와 함께 "검토/확인"이 있으면 CONTRACT_REVIEW\n- 불확실하면 confidence를 낮게 설정하고 UNCLEAR 선택\n- 복합 질문은 is_compound를 true로 설정하고 개별 작업으로 분해\n\n분석할 질문: LTV 비율이 뭔가요?'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 16:55:04,486 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 16:55:04,486 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 16:55:04,486 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 16:55:04,486 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 16:55:04,487 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 16:55:04,487 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 16:55:06,989 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 07:55:06 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'2304'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'2327'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9991'), (b'x-ratelimit-remaining-tokens', b'197250'), (b'x-ratelimit-reset-requests', b'1m12.909s'), (b'x-ratelimit-reset-tokens', b'825ms'), (b'x-request-id', b'req_fcf5b236ee4f43179e5aeb282793233b'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b5ac90987ea9b-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 16:55:06,989 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 16:55:06,989 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 16:55:07,000 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 16:55:07,000 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 16:55:07,000 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 16:55:07,000 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 07:55:06 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '2304', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '2327', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9991', 'x-ratelimit-remaining-tokens': '197250', 'x-ratelimit-reset-requests': '1m12.909s', 'x-ratelimit-reset-tokens': '825ms', 'x-request-id': 'req_fcf5b236ee4f43179e5aeb282793233b', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b5ac90987ea9b-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 16:55:07,000 - openai._base_client - DEBUG - request_id: req_fcf5b236ee4f43179e5aeb282793233b
2025-10-05 16:55:07,000 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: intent_analysis | Model: gpt-4o-mini-2024-07-18 | Tokens: 3350 (prompt: 3179, completion: 171)
2025-10-05 16:55:07,000 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM Intent Analysis Result: {'intent': 'LOAN_CONSULT', 'confidence': 0.9, 'keywords': ['LTV', '비율'], 'sub_intents': [], 'is_compound': False, 'decomposed_tasks': [], 'entities': {}, 'reasoning': '1단계(구조): 단순 정보 요청으로 LTV 비율에 대한 정의를 묻고 있음. 2단계(유형): 정보 확인형 - LTV 비율에 대한 사실 확인이 필요. 3단계(복잡도): 저 - 단일 개념 확인. 4단계(처리): 검색만으로 충분. 5단계(검증): 단순 정보 제공으로 끝나므로 LOAN_CONSULT로 분류.'}
2025-10-05 16:55:07,000 - app.service_agent.llm_manager.prompt_manager - DEBUG - Using cached prompt: agent_selection
2025-10-05 16:55:07,001 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-5f3db212-789f-4cc1-bd87-238702e3df60', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 Agent 선택 전문가입니다.\n사용자의 요청에 가장 적합한 Agent/Team을 선택하는 것이 목표입니다.\n\n## 현재 상황\n\n**사용자 질문:** LTV 비율이 뭔가요?\n**분석된 의도:** 대출상담\n**추출된 키워드:** [\'LTV\', \'비율\']\n\n## 사용 가능한 Agent/Team 정보\n\n{\'search_team\': {\'name\': \'search_team\', \'capabilities\': \'법률 검색, 부동산 시세 조회, 대출 상품 검색\', \'tools\': [\'legal_search\', \'market_data\', \'loan_data\'], \'use_cases\': [\'법률 상담\', \'시세 조회\', \'대출 정보\']}, \'analysis_team\': {\'name\': \'analysis_team\', \'capabilities\': \'데이터 분석, 리스크 평가, 인사이트 생성, 추천\', \'tools\': [\'data_analyzer\', \'risk_evaluator\'], \'use_cases\': [\'시장 분석\', \'리스크 평가\', \'투자 분석\']}, \'document_team\': {\'name\': \'document_team\', \'capabilities\': \'계약서 작성, 문서 생성, 문서 검토\', \'tools\': [\'document_generator\', \'contract_reviewer\'], \'use_cases\': [\'계약서 작성\', \'문서 검토\']}}\n\n## Agent 역할 및 상세 가이드\n\n### 1. search_team (검색 팀)\n- **주요 기능**: 정보 검색 및 데이터 수집\n- **전문 분야**:\n  * 법률 정보 검색 (전세법, 임대차보호법, 부동산 관련 법규)\n  * 부동산 시세 조회 (매매가, 전세가, 월세, 실거래가)\n  * 대출 상품 정보 검색 (금리, 한도, 조건)\n  * 지역 정보 및 인프라 조회\n- **도구**: legal_search, market_data, loan_data\n- **적합한 작업**: 정보 조회, 데이터 수집, 법률 확인, 시세 파악\n- **예시**:\n  * "전세금 5% 인상 가능한가요?"\n  * "강남구 아파트 전세 시세"\n  * "전세자금대출 한도 얼마?"\n\n### 2. analysis_team (분석 팀)\n- **주요 기능**: 데이터 분석 및 평가\n- **전문 분야**:\n  * 시장 동향 분석 (상승률, 하락률, 추세)\n  * 리스크 평가 (계약, 투자 위험도)\n  * 투자 수익률 계산 (ROI, 월세 수익률)\n  * 대출 한도 및 조건 분석 (LTV, DTI, DSR)\n  * 비교 분석 (지역별, 상품별)\n- **도구**: data_analyzer, risk_evaluator, calculator\n- **적합한 작업**: 데이터 분석, 리스크 평가, 계산, 비교, 예측\n- **의존성**: 보통 search_team의 데이터가 필요\n- **예시**:\n  * "이 지역 투자 가치 분석해줘"\n  * "계약 리스크 평가해줘"\n  * "대출 가능 금액 계산해줘"\n\n### 3. document_team (문서 팀)\n- **주요 기능**: 문서 생성 및 관리\n- **전문 분야**:\n  * 계약서 작성 (임대차, 매매, 전세)\n  * 문서 템플릿 관리\n  * 특약사항 생성\n  * 계약서 수정안 작성\n  * 법률 문서 검토\n- **도구**: document_generator, contract_template, contract_reviewer\n- **적합한 작업**: 문서 작성, 계약서 생성, 문서 수정, 검토\n- **예시**:\n  * "임대차계약서 작성해줘"\n  * "특약사항 추가해줘"\n  * "계약서 수정안 만들어줘"\n\n## Chain-of-Thought Agent 선택 프로세스\n\n다음 단계를 **순서대로** 따라 최적의 Agent 조합을 선택하세요:\n\n### 1단계: 질문 요구사항 파악\n- 단순 정보 조회인가? → search_team만 필요\n- 판단/평가가 필요한가? → search + analysis 필요\n- 해결책 제시가 필요한가? → search + analysis 필요\n- 문서 생성이 필요한가? → document_team 추가\n\n### 2단계: 작업 복잡도 판단\n- **단순** (검색만): "~이 뭐야?", "~알려줘" → search_team\n- **중간** (검색+판단): "~괜찮아?", "~적절해?" → search + analysis\n- **복잡** (종합 해결): 구체적 상황 + "어떻게 해야 해?" → search + analysis\n\n### 3단계: 의존성 분석\n- 독립적 작업: 단일 팀으로 처리 가능\n- 순차적 의존: 이전 결과 필요 → 여러 팀 순서대로\n- 병렬 가능: 동시 조회 가능 → coordination: "parallel"\n\n### 4단계: 최종 검증\n- 선택한 팀들로 질문에 완전히 답변 가능한가?\n- 불필요한 팀이 포함되지 않았는가?\n- 순서가 논리적인가? (데이터 흐름 고려)\n\n### 중요 원칙:\n- **법률 키워드만으로 판단하지 말 것**: "법적으로 어떻게 해야 해?" = 법률 검색 + 분석 필요\n- **상황 설명 + 해결책 요청** = 반드시 analysis_team 포함\n- **구체적 수치 비교** (3억→10억 같은) = analysis_team 필요\n\n## 의도별 Agent 매핑 가이드 (기본 가이드 - CoT로 조정 가능)\n\n| 의도 (Intent) | 기본 조합 | 상황별 조정 |\n|--------------|-----------|-------------|\n| LEGAL_CONSULT | ["search_team"] | 해결책 요청시 → + analysis_team |\n| MARKET_INQUIRY | ["search_team"] | 비교/평가시 → + analysis_team |\n| LOAN_CONSULT | ["search_team", "analysis_team"] | 계산 필수 |\n| CONTRACT_CREATION | ["document_team"] | 검토 후 작성 → search + document |\n| CONTRACT_REVIEW | ["search_team", "analysis_team"] | 법률 검토 + 리스크 분석 |\n| COMPREHENSIVE | ["search_team", "analysis_team"] | **항상 분석 포함** |\n| RISK_ANALYSIS | ["analysis_team"] | 법률 근거 필요시 → search + analysis |\n| UNCLEAR | ["search_team", "analysis_team"] | 포괄적 대응 |\n\n**중요**: 위 매핑은 **기본 가이드**일 뿐입니다.\n실제 질문의 내용(CoT 분석 결과)에 따라 조정하세요!\n\n## 복합 질문 처리 예시 (CoT 적용)\n\n### 예시 1: 순차적 처리\n질문: "강남구 시세 확인하고 투자 가치 분석해줘"\n**CoT 분석**:\n1. 요구사항: 시세 조회 + 투자 가치 평가\n2. 복잡도: 중간 (검색 + 분석)\n3. 의존성: 시세 데이터 → 투자 분석 (순차)\n4. 검증: search만으로는 "투자 가치 평가" 불가능\n\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "1단계: 시세 조회+투자 평가 필요. 2단계: 중간 복잡도. 3단계: 순차 의존. 4단계: search로 시세 수집 후 analysis로 투자 가치 평가 필요",\n    "coordination": "sequential"\n}\n```\n\n### 예시 2: 단순 정보 조회\n질문: "전세금 인상률 한도가 얼마야?"\n**CoT 분석**:\n1. 요구사항: 단순 사실 확인\n2. 복잡도: 낮음 (정보 확인형)\n3. 의존성: 없음\n4. 검증: search_team만으로 충분\n\n```json\n{\n    "selected_agents": ["search_team"],\n    "reasoning": "1단계: 단순 정보 조회. 2단계: 저복잡도. 3단계: 독립적. 4단계: 법률 검색만으로 답변 가능",\n    "coordination": "single"\n}\n```\n\n### 예시 3: 해결책 요청 (핵심 예시!)\n질문: "집주인이 전세금 3억을 10억으로 올려달래. 법적으로 어떻게 해야 해?"\n의도: COMPREHENSIVE\n**CoT 분석**:\n1. 요구사항: 상황 설명 + 해결책 요청\n2. 복잡도: 높음 (구체적 상황 + 수치 비교)\n3. 의존성: 법률 확인 → 상황 분석 → 해결책 제시\n4. 검증: "법적으로"만 보고 search만 선택하면 불충분! 해결책 제시 필요\n\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "1단계: 법률 + 상황 분석 + 해결책 필요. 2단계: 고복잡도(3억→10억 비정상). 3단계: 순차(법률 확인 후 타당성 분석). 4단계: \'어떻게 해야\' = 단순 법률 조회 아님, 분석 필수",\n    "coordination": "sequential",\n    "confidence": 0.95\n}\n```\n\n## 응답 형식 (JSON)\n\n```json\n{\n    "selected_agents": ["선택된 agent/team 목록"],\n    "reasoning": "선택 이유를 구체적으로 설명. 각 Agent의 역할과 처리 순서 포함",\n    "coordination": "single/sequential/parallel/pipeline",\n    "dependencies": {"agent2": ["agent1"]},\n    "estimated_time": 30,\n    "confidence": 0.9\n}\n```\n\n## 선택 가이드라인\n\n1. **최소 Agent 원칙**: 가능한 적은 수의 Agent로 처리\n2. **전문성 우선**: 해당 작업에 가장 전문적인 Agent 선택\n3. **효율성 고려**: 병렬 처리 가능한 경우 명시\n4. **의존성 관리**: 데이터 흐름을 고려한 순서 지정\n5. **폴백 전략**: 불확실한 경우 ["search_team", "analysis_team"] 조합\n\n## 주의사항\n\n- selected_agents는 반드시 배열 형태\n- Agent 이름은 정확히: "search_team", "analysis_team", "document_team"\n- 최소 1개, 최대 3개 선택\n- 순서는 실행 우선순위 (앞에 있을수록 먼저 실행)\n- reasoning은 상세하고 논리적으로 작성\n- coordination 필드로 실행 방식 명시\n- 복합 질문의 경우 의존성 관계 명확히 표시'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 16:55:07,001 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 16:55:07,001 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 16:55:07,001 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 16:55:07,001 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 16:55:07,001 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 16:55:07,001 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 16:55:10,180 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 07:55:10 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'2955'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'2984'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9990'), (b'x-ratelimit-remaining-tokens', b'197901'), (b'x-ratelimit-reset-requests', b'1m19.017s'), (b'x-ratelimit-reset-tokens', b'629ms'), (b'x-request-id', b'req_fb993c4fb02a4d51b896ff38061e6b7b'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b5ad8c91bea9b-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 16:55:10,181 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 16:55:10,181 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 16:55:10,185 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 16:55:10,185 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 16:55:10,185 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 16:55:10,185 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 07:55:10 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '2955', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '2984', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9990', 'x-ratelimit-remaining-tokens': '197901', 'x-ratelimit-reset-requests': '1m19.017s', 'x-ratelimit-reset-tokens': '629ms', 'x-request-id': 'req_fb993c4fb02a4d51b896ff38061e6b7b', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b5ad8c91bea9b-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 16:55:10,185 - openai._base_client - DEBUG - request_id: req_fb993c4fb02a4d51b896ff38061e6b7b
2025-10-05 16:55:10,186 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: agent_selection | Model: gpt-4o-mini-2024-07-18 | Tokens: 2511 (prompt: 2350, completion: 161)
2025-10-05 16:55:10,186 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM agent selection reasoning: 1단계: LTV 비율에 대한 설명과 관련된 대출 상담이 필요. 2단계: LTV 비율은 대출과 관련된 정보이므로 검색과 분석이 모두 필요. 3단계: LTV 비율에 대한 정보를 검색한 후, 그에 대한 분석이 필요하므로 순차적으로 진행해야 함. 4단계: 단순한 정보 조회가 아닌 대출 상담이므로 search_team과 analysis_team 모두 필요.
2025-10-05 16:55:10,186 - app.service_agent.cognitive_agents.planning_agent - INFO - ✅ Primary LLM selected agents: ['search_team', 'analysis_team']
2025-10-05 16:55:10,186 - __main__ - INFO -   의도: 대출상담
2025-10-05 16:55:10,186 - __main__ - INFO -   신뢰도: 0.90
2025-10-05 16:55:10,186 - __main__ - INFO -   추천 Agent: ['search_team', 'analysis_team']
2025-10-05 16:55:10,186 - __main__ - INFO - 
[Step 2] Query Decomposition...
2025-10-05 16:55:10,186 - app.service_agent.cognitive_agents.query_decomposer - INFO - Decomposing query: LTV 비율이 뭔가요?...
2025-10-05 16:55:10,186 - app.service_agent.cognitive_agents.query_decomposer - INFO - Query is simple, no decomposition needed
2025-10-05 16:55:10,186 - __main__ - INFO -   복합 질문: False
2025-10-05 16:55:10,186 - __main__ - INFO -   작업 수: 1
2025-10-05 16:55:10,186 - __main__ - INFO -   실행 모드: sequential
2025-10-05 16:55:10,186 - __main__ - INFO - 
[Step 3] Execution Plan 생성...
2025-10-05 16:55:10,186 - app.service_agent.cognitive_agents.planning_agent - INFO - Creating execution plan for intent: 대출상담
2025-10-05 16:55:10,186 - app.service_agent.cognitive_agents.planning_agent - WARNING - AgentRegistry is empty, using default teams
2025-10-05 16:55:10,186 - app.service_agent.cognitive_agents.planning_agent - DEBUG - Suggested agents: ['search_team', 'analysis_team']
2025-10-05 16:55:10,186 - app.service_agent.cognitive_agents.planning_agent - DEBUG - Available agents: ['search_team', 'analysis_team', 'document_team']
2025-10-05 16:55:10,186 - app.service_agent.cognitive_agents.planning_agent - INFO - Selected agents/teams for execution: ['search_team', 'analysis_team']
2025-10-05 16:55:10,186 - __main__ - INFO -   전략: sequential
2025-10-05 16:55:10,186 - __main__ - INFO -   단계 수: 2
2025-10-05 16:55:10,186 - __main__ - INFO - 
✓ 테스트 성공 (소요시간: 5.70초)
2025-10-05 16:55:10,186 - __main__ - INFO - 
================================================================================
2025-10-05 16:55:10,186 - __main__ - INFO - [8] 단일 질문 테스트: S008
2025-10-05 16:55:10,186 - __main__ - INFO - 질문: 보증금 반환 보증 가입 방법은?
2025-10-05 16:55:10,186 - __main__ - INFO - ================================================================================
2025-10-05 16:55:10,186 - __main__ - INFO - 
[Step 1] Intent 분석...
2025-10-05 16:55:10,186 - app.service_agent.cognitive_agents.planning_agent - INFO - Analyzing intent for query: 보증금 반환 보증 가입 방법은?...
2025-10-05 16:55:10,186 - app.service_agent.llm_manager.prompt_manager - DEBUG - Using cached prompt: intent_analysis
2025-10-05 16:55:10,187 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-9b0d2fea-d3b8-4d9b-b1b4-c41625922901', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 의도 분석 전문가입니다.\n사용자의 질문을 정확히 이해하고, 어떤 종류의 도움이 필요한지 분류해야 합니다.\n\n## Chain-of-Thought 분석 프로세스\n\n질문을 분석할 때 다음 단계를 **순서대로** 따르세요:\n\n### 1단계: 질문 구조 파악\n- 단순 정보 요청인가? (예: "~이 뭐야?", "~알려줘")\n- 상황 설명이 포함되어 있는가? (배경, 현재 상태)\n- 구체적 수치나 데이터가 있는가? (금액, 비율, 기간 등)\n- 문제 해결을 요구하는가? (예: "어떻게 해야 해?", "방법 알려줘")\n\n### 2단계: 요청 유형 판단\n- **정보 확인형**: 사실, 개념, 규정 확인 → 검색만으로 충분\n- **평가/판단형**: "괜찮아?", "적절해?", "문제있어?" → 검색 + 분석 필요\n- **해결책 요청형**: "어떻게?", "방법?", "대처?" → 검색 + 분석 + 제안 필요\n- **비교/선택형**: "A vs B", "어느게 나아?" → 검색 + 분석(비교) 필요\n\n### 3단계: 복잡도 평가\n- **저**: 단일 개념/사실 확인 (예: "전세금 인상률 한도?")\n- **중**: 특정 상황 + 판단 (예: "3억을 5억으로 올려달래. 가능해?")\n- **고**: 복잡한 상황 + 여러 조건 + 해결책 (예: "10년 거주, 3억→10억 요구. 어떻게 해야 해?")\n\n### 4단계: 필요한 처리 결정\n- **검색만**: 정보 확인형 + 저복잡도\n- **검색+분석**: 평가/판단형 OR 중복잡도 OR 수치 비교 포함\n- **종합처리**: 해결책 요청형 OR 고복잡도 OR 여러 조건 동시 고려\n\n### 5단계: 최종 검증\n- 선택한 의도로 사용자 질문에 완전히 답변 가능한가?\n- 단순 정보 제공으로 끝나는가, 아니면 추가 분석/판단이 필요한가?\n- 상황 설명이 있으면서 "해결", "방법", "어떻게" 등이 있으면 → COMPREHENSIVE 고려\n\n## 중요: 복합 질문 처리\n복합적인 질문(여러 의도가 섞인 질문)의 경우, 가장 핵심적인 의도를 파악하되,\nsub_intents 필드에 부가적인 의도들도 함께 기록해주세요.\n\n**특히 주의**:\n- 법률 키워드가 있어도, "해결방법", "어떻게 해야" 같은 표현이 있으면 단순 LEGAL_CONSULT가 아닐 수 있음\n- 구체적 상황(금액, 기간 등) + 해결책 요구 = COMPREHENSIVE 또는 복합 의도로 분류\n\n## 분류 카테고리 설명:\n\n1. **LEGAL_CONSULT (법률상담)**\n   - 설명: 부동산 관련 법률, 권리, 의무에 대한 질문\n   - 예시:\n     * 단순: "전세금 5% 인상이 가능한가요?", "임대차계약 갱신 거부할 수 있나요?"\n     * 복합: "전세금 인상 가능한지 확인하고 법적 근거도 알려주세요"\n   - 키워드: 법, 전세, 임대, 보증금, 계약, 권리, 의무, 갱신, 임차인, 임대인, 법률, 규정, 조항\n   - 필요한 처리: 법률 데이터베이스 검색, 관련 법조항 찾기\n\n2. **MARKET_INQUIRY (시세조회)**\n   - 설명: 부동산 시장 가격, 시세, 거래 동향에 대한 질문\n   - 예시:\n     * 단순: "강남구 아파트 전세 시세 알려주세요", "서초동 매매가 얼마나 올랐나요?"\n     * 복합: "강남구 시세 확인하고 대출 가능 금액도 계산해줘"\n   - 키워드: 시세, 가격, 매매가, 전세가, 월세, 시장, 동향, 평균, 지역명, 상승률, 하락률\n   - 필요한 처리: 부동산 시세 데이터 조회, 지역별 가격 분석\n\n3. **LOAN_CONSULT (대출상담)**\n   - 설명: 주택담보대출, 전세자금대출 등 금융 관련 질문\n   - 예시:\n     * 단순: "전세자금대출 한도가 얼마인가요?", "LTV가 뭔가요?"\n     * 복합: "대출 한도 확인하고 금리 비교도 해주세요"\n   - 키워드: 대출, 금리, 한도, 조건, 상환, LTV, DTI, DSR, 담보, 금융, 은행\n   - 필요한 처리: 대출 상품 조회, 금리 정보 검색, 한도 계산\n\n4. **CONTRACT_CREATION (계약서작성)**\n   - 설명: 새로운 계약서나 문서를 작성해달라는 요청\n   - 예시:\n     * 단순: "임대차계약서 작성해주세요", "전세계약서 초안 만들어주세요"\n     * 복합: "계약서 작성하고 주의사항도 검토해주세요"\n   - 키워드: 작성, 만들, 생성, 초안, 계약서, 문서, 양식\n   - 필요한 처리: 문서 생성 에이전트 호출, 템플릿 기반 작성\n\n5. **CONTRACT_REVIEW (계약서검토)**\n   - 설명: 기존 계약서나 문서를 검토해달라는 요청\n   - 예시:\n     * 단순: "이 계약서 검토해주세요", "특약사항 문제없나요?"\n     * 복합: "계약서 검토하고 수정사항도 제안해주세요"\n   - 키워드: 검토, 확인, 점검, 리뷰, 분석해, 살펴봐, 체크\n   - 필요한 처리: 문서 분석, 위험 요소 식별, 개선사항 제안\n\n6. **COMPREHENSIVE (종합분석)**\n   - 설명: 여러 측면을 종합적으로 분석해달라는 요청, 또는 복잡한 상황에 대한 해결책 요청\n   - 예시:\n     * 단순: "이 물건 전체적으로 분석해주세요"\n     * 복합: "시세, 법률, 대출 모두 검토해서 종합 의견 주세요"\n     * 해결형: "10년 거주했는데 전세금 3억을 10억으로 올려달래. 어떻게 해야 해?"\n     * 상황+해결: "집주인이 계약 갱신 거부했어. 법적으로 어떻게 대응해야 할까?"\n   - 키워드: 종합, 전체, 모든, 전반적, 종합적, 평가, 분석, 어떻게, 방법, 해결, 대처\n   - 패턴: 구체적 상황 설명 + "어떻게/방법/해결" 요청\n   - 필요한 처리: 다중 데이터 소스 통합 분석, 상황 평가, 해결책 제시\n\n7. **RISK_ANALYSIS (리스크분석)**\n   - 설명: 위험 요소나 주의사항에 대한 질문\n   - 예시:\n     * 단순: "이 계약 위험한가요?", "주의할 점 알려주세요"\n     * 복합: "리스크 분석하고 대안도 제시해주세요"\n   - 키워드: 위험, 리스크, 주의, 문제점, 조심, 걱정, 우려\n   - 필요한 처리: 위험 요소 분석, 주의사항 추출\n\n8. **UNCLEAR (불분명)**\n   - 설명: 의도를 명확히 파악하기 어려운 질문\n   - 예시: "이거 좀 봐주세요", "어떻게 해야 할까요?", "도와주세요"\n   - 처리: 추가 질문으로 의도 명확화 필요\n\n9. **IRRELEVANT (무관)**\n   - 설명: 부동산과 전혀 관련 없는 질문\n   - 예시: "날씨 어때?", "저녁 뭐 먹지?", "주식 추천해줘"\n   - 처리: 부동산 관련 질문을 유도\n\n## 복합 질문 예시와 분석 (CoT 적용):\n\n### 예시 1: "강남구 아파트 시세 알려주고 전세자금대출 가능한지도 확인해줘"\n**CoT 분석**:\n1. 구조: 두 개의 요청 ("시세" + "대출")\n2. 유형: 정보 확인형 (둘 다)\n3. 복잡도: 중 (두 가지 독립적 조회)\n4. 필요 처리: 검색 + 계산/분석\n\n**결론**:\n- 주 의도: MARKET_INQUIRY (시세 조회가 먼저 필요)\n- 부가 의도: LOAN_CONSULT (대출 확인)\n- 분해: ["강남구 아파트 시세 조회", "전세자금대출 가능 여부 확인"]\n\n### 예시 2: "이 계약서 검토해서 위험한 부분 있는지 알려주고 수정 제안도 해줘"\n**CoT 분석**:\n1. 구조: 검토 + 위험 평가 + 수정안\n2. 유형: 평가/판단형 + 해결책 요청형\n3. 복잡도: 고 (3단계 처리)\n4. 필요 처리: 검토 + 분석 + 문서 생성\n\n**결론**:\n- 주 의도: CONTRACT_REVIEW (계약서 검토)\n- 부가 의도: RISK_ANALYSIS (위험 분석)\n- 분해: ["계약서 전체 검토", "위험 요소 식별", "수정사항 제안"]\n\n### 예시 3: "집주인이 짜증나, 10년 살았는데 전세금 3억을 10억으로 올려달래. 법적으로 해결방법 알려줘"\n**CoT 분석**:\n1. 구조: 상황 설명 (10년 거주, 3억→10억) + 해결책 요청\n2. 유형: 해결책 요청형 (단순 정보 X)\n3. 복잡도: 고 (구체적 상황 + 수치 비교 + 법률 + 대응방안)\n4. 필요 처리: 법률 검색 + 상황 분석 + 해결책 제시\n\n**결론**:\n- 주 의도: COMPREHENSIVE (복잡한 상황에 대한 종합 해결)\n- 부가 의도: LEGAL_CONSULT, RISK_ANALYSIS\n- 분해: ["전세금 인상 한도 법률 조회", "3억→10억 인상의 타당성 분석", "구체적 대응 방안 제시"]\n- **이유**: "법적으로"라는 키워드가 있지만, 단순 법률 확인이 아니라 구체적 상황에 대한 해결책을 요구하므로 COMPREHENSIVE\n\n### 예시 4: "전세금 인상률 상한이 얼마야?"\n**CoT 분석**:\n1. 구조: 단순 사실 확인\n2. 유형: 정보 확인형\n3. 복잡도: 저 (단일 개념)\n4. 필요 처리: 검색만\n\n**결론**:\n- 주 의도: LEGAL_CONSULT (법률 정보 조회)\n- 부가 의도: 없음\n- 분해: 필요 없음\n\n## 응답 형식 (JSON 형식으로 응답):\n\n```json\n{\n    "intent": "LEGAL_CONSULT",\n    "confidence": 0.9,\n    "keywords": ["전세금", "인상", "제한"],\n    "sub_intents": [],\n    "is_compound": false,\n    "decomposed_tasks": [],\n    "entities": {\n        "location": "강남구",\n        "price": "5억",\n        "contract_type": "전세",\n        "date": "2024년",\n        "area": "84㎡",\n        "action_verbs": ["확인", "검토"]\n    },\n    "reasoning": "전세금 인상에 대한 법률 질문이므로 LEGAL_CONSULT로 분류"\n}\n```\n\n응답 규칙:\n- intent: 위 9개 카테고리 중 하나 (대문자_언더스코어 형식)\n- confidence: 0.0~1.0 (0.8 이상이면 매우 확실, 0.5 미만이면 불확실)\n- keywords: 추출된 주요 키워드 목록\n- sub_intents: 복합 질문일 경우 부가적인 의도들\n- is_compound: 복합 질문 여부 (true/false)\n- decomposed_tasks: 복합 질문을 분해한 개별 작업들\n- entities: 추출된 엔티티 정보\n- reasoning: **반드시 CoT 5단계를 거쳐 분석한 과정을 포함** (구조 파악 → 유형 판단 → 복잡도 평가 → 필요 처리 → 최종 검증)\n\n## reasoning 작성 예시:\n"1단계(구조): 상황 설명(10년 거주, 3억→10억) + 해결책 요청 포함.\n2단계(유형): 해결책 요청형 - 단순 정보가 아닌 대응방안 필요.\n3단계(복잡도): 고 - 구체적 수치 비교와 복잡한 상황.\n4단계(처리): 법률 검색 + 상황 분석 + 해결책 제시 필요.\n5단계(검증): LEGAL_CONSULT만으로는 불충분, 종합적 분석 필요 → COMPREHENSIVE 선택"\n\n## 판단 가이드:\n- 여러 의도가 섞여있다면, 가장 주된 의도를 intent에, 나머지를 sub_intents에 기록\n- "그리고", "또한", "함께", "같이" 등의 연결어가 있으면 복합 질문일 가능성 높음\n- 법률 관련 키워드가 있으면 LEGAL_CONSULT 우선\n- 가격/시세 언급이 명확하면 MARKET_INQUIRY\n- 계약서라는 단어와 함께 "작성/만들기"가 있으면 CONTRACT_CREATION\n- 계약서라는 단어와 함께 "검토/확인"이 있으면 CONTRACT_REVIEW\n- 불확실하면 confidence를 낮게 설정하고 UNCLEAR 선택\n- 복합 질문은 is_compound를 true로 설정하고 개별 작업으로 분해\n\n분석할 질문: 보증금 반환 보증 가입 방법은?'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 16:55:10,187 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 16:55:10,187 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 16:55:10,188 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 16:55:10,188 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 16:55:10,188 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 16:55:10,188 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 16:55:13,722 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 07:55:13 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'3336'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'3359'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9991'), (b'x-ratelimit-remaining-tokens', b'197245'), (b'x-ratelimit-reset-requests', b'1m15.846s'), (b'x-ratelimit-reset-tokens', b'826ms'), (b'x-request-id', b'req_33c61f5dda40410a898a8a25677faa04'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b5aecaa33ea9b-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 16:55:13,722 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 16:55:13,722 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 16:55:13,729 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 16:55:13,730 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 16:55:13,730 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 16:55:13,730 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 07:55:13 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '3336', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '3359', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9991', 'x-ratelimit-remaining-tokens': '197245', 'x-ratelimit-reset-requests': '1m15.846s', 'x-ratelimit-reset-tokens': '826ms', 'x-request-id': 'req_33c61f5dda40410a898a8a25677faa04', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b5aecaa33ea9b-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 16:55:13,730 - openai._base_client - DEBUG - request_id: req_33c61f5dda40410a898a8a25677faa04
2025-10-05 16:55:13,731 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: intent_analysis | Model: gpt-4o-mini-2024-07-18 | Tokens: 3376 (prompt: 3179, completion: 197)
2025-10-05 16:55:13,731 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM Intent Analysis Result: {'intent': 'LEGAL_CONSULT', 'confidence': 0.85, 'keywords': ['보증금', '반환', '보증', '가입', '방법'], 'sub_intents': [], 'is_compound': False, 'decomposed_tasks': [], 'entities': {'action_verbs': ['가입', '방법']}, 'reasoning': '1단계(구조): 단순 정보 요청으로 보증금 반환 보증 가입 방법에 대한 질문. 2단계(유형): 정보 확인형 - 가입 방법에 대한 사실 확인 필요. 3단계(복잡도): 저 - 단일 개념 확인. 4단계(처리): 검색만으로 충분. 5단계(검증): 보증금 반환 보증 가입 방법에 대한 정보 요청이므로 LEGAL_CONSULT로 분류.'}
2025-10-05 16:55:13,731 - app.service_agent.llm_manager.prompt_manager - DEBUG - Using cached prompt: agent_selection
2025-10-05 16:55:13,731 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-13b83b55-5b18-4564-bcf2-fc75e31eef68', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 Agent 선택 전문가입니다.\n사용자의 요청에 가장 적합한 Agent/Team을 선택하는 것이 목표입니다.\n\n## 현재 상황\n\n**사용자 질문:** 보증금 반환 보증 가입 방법은?\n**분석된 의도:** 법률상담\n**추출된 키워드:** [\'보증금\', \'반환\', \'보증\', \'가입\', \'방법\']\n\n## 사용 가능한 Agent/Team 정보\n\n{\'search_team\': {\'name\': \'search_team\', \'capabilities\': \'법률 검색, 부동산 시세 조회, 대출 상품 검색\', \'tools\': [\'legal_search\', \'market_data\', \'loan_data\'], \'use_cases\': [\'법률 상담\', \'시세 조회\', \'대출 정보\']}, \'analysis_team\': {\'name\': \'analysis_team\', \'capabilities\': \'데이터 분석, 리스크 평가, 인사이트 생성, 추천\', \'tools\': [\'data_analyzer\', \'risk_evaluator\'], \'use_cases\': [\'시장 분석\', \'리스크 평가\', \'투자 분석\']}, \'document_team\': {\'name\': \'document_team\', \'capabilities\': \'계약서 작성, 문서 생성, 문서 검토\', \'tools\': [\'document_generator\', \'contract_reviewer\'], \'use_cases\': [\'계약서 작성\', \'문서 검토\']}}\n\n## Agent 역할 및 상세 가이드\n\n### 1. search_team (검색 팀)\n- **주요 기능**: 정보 검색 및 데이터 수집\n- **전문 분야**:\n  * 법률 정보 검색 (전세법, 임대차보호법, 부동산 관련 법규)\n  * 부동산 시세 조회 (매매가, 전세가, 월세, 실거래가)\n  * 대출 상품 정보 검색 (금리, 한도, 조건)\n  * 지역 정보 및 인프라 조회\n- **도구**: legal_search, market_data, loan_data\n- **적합한 작업**: 정보 조회, 데이터 수집, 법률 확인, 시세 파악\n- **예시**:\n  * "전세금 5% 인상 가능한가요?"\n  * "강남구 아파트 전세 시세"\n  * "전세자금대출 한도 얼마?"\n\n### 2. analysis_team (분석 팀)\n- **주요 기능**: 데이터 분석 및 평가\n- **전문 분야**:\n  * 시장 동향 분석 (상승률, 하락률, 추세)\n  * 리스크 평가 (계약, 투자 위험도)\n  * 투자 수익률 계산 (ROI, 월세 수익률)\n  * 대출 한도 및 조건 분석 (LTV, DTI, DSR)\n  * 비교 분석 (지역별, 상품별)\n- **도구**: data_analyzer, risk_evaluator, calculator\n- **적합한 작업**: 데이터 분석, 리스크 평가, 계산, 비교, 예측\n- **의존성**: 보통 search_team의 데이터가 필요\n- **예시**:\n  * "이 지역 투자 가치 분석해줘"\n  * "계약 리스크 평가해줘"\n  * "대출 가능 금액 계산해줘"\n\n### 3. document_team (문서 팀)\n- **주요 기능**: 문서 생성 및 관리\n- **전문 분야**:\n  * 계약서 작성 (임대차, 매매, 전세)\n  * 문서 템플릿 관리\n  * 특약사항 생성\n  * 계약서 수정안 작성\n  * 법률 문서 검토\n- **도구**: document_generator, contract_template, contract_reviewer\n- **적합한 작업**: 문서 작성, 계약서 생성, 문서 수정, 검토\n- **예시**:\n  * "임대차계약서 작성해줘"\n  * "특약사항 추가해줘"\n  * "계약서 수정안 만들어줘"\n\n## Chain-of-Thought Agent 선택 프로세스\n\n다음 단계를 **순서대로** 따라 최적의 Agent 조합을 선택하세요:\n\n### 1단계: 질문 요구사항 파악\n- 단순 정보 조회인가? → search_team만 필요\n- 판단/평가가 필요한가? → search + analysis 필요\n- 해결책 제시가 필요한가? → search + analysis 필요\n- 문서 생성이 필요한가? → document_team 추가\n\n### 2단계: 작업 복잡도 판단\n- **단순** (검색만): "~이 뭐야?", "~알려줘" → search_team\n- **중간** (검색+판단): "~괜찮아?", "~적절해?" → search + analysis\n- **복잡** (종합 해결): 구체적 상황 + "어떻게 해야 해?" → search + analysis\n\n### 3단계: 의존성 분석\n- 독립적 작업: 단일 팀으로 처리 가능\n- 순차적 의존: 이전 결과 필요 → 여러 팀 순서대로\n- 병렬 가능: 동시 조회 가능 → coordination: "parallel"\n\n### 4단계: 최종 검증\n- 선택한 팀들로 질문에 완전히 답변 가능한가?\n- 불필요한 팀이 포함되지 않았는가?\n- 순서가 논리적인가? (데이터 흐름 고려)\n\n### 중요 원칙:\n- **법률 키워드만으로 판단하지 말 것**: "법적으로 어떻게 해야 해?" = 법률 검색 + 분석 필요\n- **상황 설명 + 해결책 요청** = 반드시 analysis_team 포함\n- **구체적 수치 비교** (3억→10억 같은) = analysis_team 필요\n\n## 의도별 Agent 매핑 가이드 (기본 가이드 - CoT로 조정 가능)\n\n| 의도 (Intent) | 기본 조합 | 상황별 조정 |\n|--------------|-----------|-------------|\n| LEGAL_CONSULT | ["search_team"] | 해결책 요청시 → + analysis_team |\n| MARKET_INQUIRY | ["search_team"] | 비교/평가시 → + analysis_team |\n| LOAN_CONSULT | ["search_team", "analysis_team"] | 계산 필수 |\n| CONTRACT_CREATION | ["document_team"] | 검토 후 작성 → search + document |\n| CONTRACT_REVIEW | ["search_team", "analysis_team"] | 법률 검토 + 리스크 분석 |\n| COMPREHENSIVE | ["search_team", "analysis_team"] | **항상 분석 포함** |\n| RISK_ANALYSIS | ["analysis_team"] | 법률 근거 필요시 → search + analysis |\n| UNCLEAR | ["search_team", "analysis_team"] | 포괄적 대응 |\n\n**중요**: 위 매핑은 **기본 가이드**일 뿐입니다.\n실제 질문의 내용(CoT 분석 결과)에 따라 조정하세요!\n\n## 복합 질문 처리 예시 (CoT 적용)\n\n### 예시 1: 순차적 처리\n질문: "강남구 시세 확인하고 투자 가치 분석해줘"\n**CoT 분석**:\n1. 요구사항: 시세 조회 + 투자 가치 평가\n2. 복잡도: 중간 (검색 + 분석)\n3. 의존성: 시세 데이터 → 투자 분석 (순차)\n4. 검증: search만으로는 "투자 가치 평가" 불가능\n\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "1단계: 시세 조회+투자 평가 필요. 2단계: 중간 복잡도. 3단계: 순차 의존. 4단계: search로 시세 수집 후 analysis로 투자 가치 평가 필요",\n    "coordination": "sequential"\n}\n```\n\n### 예시 2: 단순 정보 조회\n질문: "전세금 인상률 한도가 얼마야?"\n**CoT 분석**:\n1. 요구사항: 단순 사실 확인\n2. 복잡도: 낮음 (정보 확인형)\n3. 의존성: 없음\n4. 검증: search_team만으로 충분\n\n```json\n{\n    "selected_agents": ["search_team"],\n    "reasoning": "1단계: 단순 정보 조회. 2단계: 저복잡도. 3단계: 독립적. 4단계: 법률 검색만으로 답변 가능",\n    "coordination": "single"\n}\n```\n\n### 예시 3: 해결책 요청 (핵심 예시!)\n질문: "집주인이 전세금 3억을 10억으로 올려달래. 법적으로 어떻게 해야 해?"\n의도: COMPREHENSIVE\n**CoT 분석**:\n1. 요구사항: 상황 설명 + 해결책 요청\n2. 복잡도: 높음 (구체적 상황 + 수치 비교)\n3. 의존성: 법률 확인 → 상황 분석 → 해결책 제시\n4. 검증: "법적으로"만 보고 search만 선택하면 불충분! 해결책 제시 필요\n\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "1단계: 법률 + 상황 분석 + 해결책 필요. 2단계: 고복잡도(3억→10억 비정상). 3단계: 순차(법률 확인 후 타당성 분석). 4단계: \'어떻게 해야\' = 단순 법률 조회 아님, 분석 필수",\n    "coordination": "sequential",\n    "confidence": 0.95\n}\n```\n\n## 응답 형식 (JSON)\n\n```json\n{\n    "selected_agents": ["선택된 agent/team 목록"],\n    "reasoning": "선택 이유를 구체적으로 설명. 각 Agent의 역할과 처리 순서 포함",\n    "coordination": "single/sequential/parallel/pipeline",\n    "dependencies": {"agent2": ["agent1"]},\n    "estimated_time": 30,\n    "confidence": 0.9\n}\n```\n\n## 선택 가이드라인\n\n1. **최소 Agent 원칙**: 가능한 적은 수의 Agent로 처리\n2. **전문성 우선**: 해당 작업에 가장 전문적인 Agent 선택\n3. **효율성 고려**: 병렬 처리 가능한 경우 명시\n4. **의존성 관리**: 데이터 흐름을 고려한 순서 지정\n5. **폴백 전략**: 불확실한 경우 ["search_team", "analysis_team"] 조합\n\n## 주의사항\n\n- selected_agents는 반드시 배열 형태\n- Agent 이름은 정확히: "search_team", "analysis_team", "document_team"\n- 최소 1개, 최대 3개 선택\n- 순서는 실행 우선순위 (앞에 있을수록 먼저 실행)\n- reasoning은 상세하고 논리적으로 작성\n- coordination 필드로 실행 방식 명시\n- 복합 질문의 경우 의존성 관계 명확히 표시'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 16:55:13,732 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 16:55:13,732 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 16:55:13,732 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 16:55:13,732 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 16:55:13,732 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 16:55:13,732 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 16:55:18,743 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 07:55:18 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'4793'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'4818'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9990'), (b'x-ratelimit-remaining-tokens', b'197887'), (b'x-ratelimit-reset-requests', b'1m20.94s'), (b'x-ratelimit-reset-tokens', b'633ms'), (b'x-request-id', b'req_936df7009b6c46b29f16524b85024a1b'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b5b02dae9ea9b-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 16:55:18,743 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 16:55:18,743 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 16:55:18,744 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 16:55:18,744 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 16:55:18,744 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 16:55:18,744 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 07:55:18 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '4793', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '4818', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9990', 'x-ratelimit-remaining-tokens': '197887', 'x-ratelimit-reset-requests': '1m20.94s', 'x-ratelimit-reset-tokens': '633ms', 'x-request-id': 'req_936df7009b6c46b29f16524b85024a1b', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b5b02dae9ea9b-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 16:55:18,744 - openai._base_client - DEBUG - request_id: req_936df7009b6c46b29f16524b85024a1b
2025-10-05 16:55:18,744 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: agent_selection | Model: gpt-4o-mini-2024-07-18 | Tokens: 2562 (prompt: 2361, completion: 201)
2025-10-05 16:55:18,744 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM agent selection reasoning: 1단계: 사용자는 보증금 반환 보증 가입 방법에 대한 법률 상담을 요청하고 있습니다. 이는 단순 정보 조회가 아닌, 법률적 상황에 대한 분석과 해결책 제시가 필요합니다. 2단계: 복잡도가 높습니다. 법률 정보 검색 후, 그에 대한 분석이 필요합니다. 3단계: 법률 정보를 먼저 확인한 후, 그에 대한 적절한 해결책을 제시해야 하므로 순차적 의존성이 있습니다. 4단계: 단순 법률 검색만으로는 사용자의 질문에 충분히 답변할 수 없으므로, 분석 팀이 필요합니다.
2025-10-05 16:55:18,744 - app.service_agent.cognitive_agents.planning_agent - INFO - ✅ Primary LLM selected agents: ['search_team', 'analysis_team']
2025-10-05 16:55:18,744 - __main__ - INFO -   의도: 법률상담
2025-10-05 16:55:18,744 - __main__ - INFO -   신뢰도: 0.85
2025-10-05 16:55:18,744 - __main__ - INFO -   추천 Agent: ['search_team', 'analysis_team']
2025-10-05 16:55:18,744 - __main__ - INFO - 
[Step 2] Query Decomposition...
2025-10-05 16:55:18,744 - app.service_agent.cognitive_agents.query_decomposer - INFO - Decomposing query: 보증금 반환 보증 가입 방법은?...
2025-10-05 16:55:18,744 - app.service_agent.cognitive_agents.query_decomposer - DEBUG - Found solution request indicator: 방법
2025-10-05 16:55:18,745 - app.service_agent.llm_manager.prompt_manager - DEBUG - Loading prompt from: C:\kdy\Projects\holmesnyangz\beta_v001\backend\app\service_agent\llm_manager\prompts\cognitive\query_decomposition.txt
2025-10-05 16:55:18,745 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-3be3f46b-7135-4b20-8185-72b182273427', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 질문 분해 전문가입니다.\n복잡한 사용자 질문을 독립적으로 처리 가능한 작업 단위로 분해하는 것이 목표입니다.\n\n## Chain-of-Thought 분해 프로세스:\n\n### 1단계: 복합 질문 여부 판단\n- 단순 정보 조회만 필요한가? → is_compound: false\n- **다음 중 하나라도 해당하면 is_compound: true**:\n  * "그리고", "그 다음", "한 후" 같은 연결어로 여러 요청 연결\n  * 명시적으로 2개 이상의 작업 요청 (예: "시세 확인하고 대출 계산해줘")\n  * 상황 설명 + 해결책 요청 (예: "3억→10억 올려달래. 어떻게 해야 해?")\n  * 해결책을 위해 여러 단계 처리 필요 (검색 → 분석 → 제안)\n\n### 2단계: 필요 작업 식별\n- 정보 수집이 필요한가? → search 작업\n- 평가/판단이 필요한가? → analysis 작업\n- 문서 생성이 필요한가? → generation 작업\n- **해결책 요청**인가? → search + analysis (최소 2개)\n\n### 3단계: 작업 순서 결정\n- 독립적 작업: 병렬 가능\n- 이전 결과 필요: 순차 실행 (depends_on 설정)\n\n## 중요 원칙:\n1. 각 작업은 하나의 명확한 목표를 가져야 합니다\n2. 작업 간 의존성을 명확히 파악해야 합니다\n3. 병렬 처리 가능한 작업은 구분해야 합니다\n4. **주의**: "어떻게 해야", "방법 알려줘" 같은 해결책 요청은 복합 질문!\n\n## 작업 유형 (type):\n- search: 정보 검색 (법률, 시세, 대출 정보 등)\n- analysis: 데이터 분석 (리스크 평가, 시장 분석 등)\n- generation: 문서 생성 (계약서 작성 등)\n- review: 검토/평가 (계약서 검토, 조건 확인 등)\n- calculation: 계산/산출 (대출 한도, 세금 등)\n- comparison: 비교 분석 (여러 옵션 비교)\n\n## 담당 팀 (agent):\n- search_team: 법률, 시세, 대출 정보 검색\n- analysis_team: 데이터 분석, 리스크 평가, 계산\n- document_team: 문서 생성, 계약서 작성\n\n## 학습 예시:\n\n### 예시 1: 복합 질문 (순차적)\n질문: "강남구 아파트 시세 확인하고 대출 가능 금액 계산해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "강남구 아파트 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "대출 가능 금액 계산",\n            "type": "calculation",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "required_data": {"price": "task_0.result.price"},\n            "estimated_time": 15\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "시세 정보가 있어야 대출 금액 계산이 가능하므로 순차 실행"\n}\n```\n\n### 예시 2: 복합 질문 (병렬 가능)\n질문: "이 지역 전세 시세와 매매 시세 모두 알려주고 비교 분석해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "전세 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "매매 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "전세/매매 시세 비교 분석",\n            "type": "comparison",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0", "task_1"],\n            "required_data": {\n                "lease_price": "task_0.result",\n                "sale_price": "task_1.result"\n            },\n            "estimated_time": 25\n        }\n    ],\n    "execution_mode": "mixed",\n    "parallel_groups": [["task_0", "task_1"], ["task_2"]],\n    "reasoning": "시세 조회는 독립적이므로 병렬 처리, 비교는 두 결과 필요"\n}\n```\n\n### 예시 3: 복합 질문 (3단계 이상)\n질문: "이 계약서 검토해서 위험한 부분 찾고 수정안 만들어서 최종 계약서 작성해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "계약서 내용 전체 검토",\n            "type": "review",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 30\n        },\n        {\n            "description": "위험 요소 및 문제점 분석",\n            "type": "analysis",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "estimated_time": 25\n        },\n        {\n            "description": "수정안 제안 생성",\n            "type": "generation",\n            "agent": "document_team",\n            "priority": 3,\n            "depends_on": ["task_1"],\n            "estimated_time": 20\n        },\n        {\n            "description": "최종 계약서 작성",\n            "type": "generation",\n            "agent": "document_team",\n            "priority": 4,\n            "depends_on": ["task_2"],\n            "estimated_time": 30\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "각 단계가 이전 결과에 의존하므로 순차 실행 필요"\n}\n```\n\n### 예시 4: 단순 질문 (분해 불필요)\n질문: "전세금 인상률 상한이 얼마야?"\n분해:\n```json\n{\n    "is_compound": false,\n    "sub_tasks": [\n        {\n            "description": "전세금 인상률 상한 법률 정보 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 15\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "단일 정보 조회 요청으로 분해 불필요"\n}\n```\n\n### 예시 5: 조건부 실행\n질문: "이 물건 시세 확인하고 적정가면 대출 상담도 받고 싶어"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "물건 시세 조회 및 적정성 평가",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 25\n        },\n        {\n            "description": "대출 상담 정보 제공",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "optional": true,\n            "context": {"condition": "if_reasonable_price"},\n            "estimated_time": 20\n        }\n    ],\n    "execution_mode": "conditional",\n    "reasoning": "시세 확인 결과에 따라 대출 상담 진행 여부 결정"\n}\n```\n\n### 예시 6: 상황 설명 + 해결책 요청 (핵심 패턴!)\n질문: "집주인이 전세금 3억을 10억으로 올려달래. 법적으로 어떻게 해야 해?"\n**CoT 분석**:\n1. 질문 분석: 상황 설명 + 해결책 요청\n2. 연결어: 없지만, "어떻게 해야" = 해결책 요청\n3. 의존성: 법률 확인 → 상황 분석 → 대응 방안\n4. 복합 여부: **YES** (해결책을 위해 여러 단계 필요)\n\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "전세금 인상 한도 관련 법률 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "3억→10억 인상의 법적 타당성 및 적정성 분석",\n            "type": "analysis",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "required_data": {"legal_limit": "task_0.result", "current": 300000000, "requested": 1000000000},\n            "estimated_time": 25\n        },\n        {\n            "description": "구체적 대응 방안 및 해결책 제시",\n            "type": "analysis",\n            "agent": "analysis_team",\n            "priority": 3,\n            "depends_on": ["task_1"],\n            "estimated_time": 20\n        }\n    ],\n    "execution_mode": "sequential",\n    "confidence": 0.95,\n    "reasoning": "상황 설명+해결책 요청 패턴. \'어떻게 해야\'는 단순 정보 조회가 아닌 종합 해결책 필요. 법률 조회 → 상황 분석 → 해결책 제시 3단계 순차 처리"\n}\n```\n\n## Chain-of-Thought 프로세스:\n\n1. **질문 분석**: 어떤 정보나 작업을 요구하는가?\n2. **연결어 확인**: "그리고", "또한", "해서", "한 후" 등이 있는가?\n3. **의존성 파악**: 어떤 작업이 다른 작업의 결과를 필요로 하는가?\n4. **병렬성 판단**: 독립적으로 실행 가능한 작업이 있는가?\n5. **최적화**: 불필요한 분해는 없는가?\n\n## 응답 형식 (JSON):\n\n{{\n    "is_compound": true/false,\n    "sub_tasks": [\n        {{\n            "description": "작업 설명",\n            "type": "작업 유형",\n            "agent": "담당 팀",\n            "priority": 우선순위 (1이 가장 높음),\n            "depends_on": ["선행 작업 ID 리스트"],\n            "required_data": {{"필요한 데이터 매핑"}},\n            "estimated_time": 예상 소요 시간(초),\n            "optional": true/false,\n            "context": {{"추가 컨텍스트"}}\n        }}\n    ],\n    "execution_mode": "sequential/parallel/mixed/conditional",\n    "parallel_groups": [["병렬 실행 가능한 작업 ID 그룹"]],\n    "confidence": 0.0-1.0,\n    "reasoning": "분해 결정의 이유와 근거"\n}}\n\n## 분해 가이드라인:\n\n1. **분해가 필요한 경우**:\n   - 여러 종류의 정보를 요청하는 경우\n   - 순차적 처리가 필요한 경우 (A의 결과로 B 수행)\n   - 서로 다른 팀의 전문성이 필요한 경우\n\n2. **분해가 불필요한 경우**:\n   - 단일 정보 조회\n   - 단순한 질문-답변\n   - 하나의 팀에서 완전히 처리 가능한 경우\n\n3. **병렬 처리 기준**:\n   - 서로 독립적인 정보 조회\n   - 의존성이 없는 분석 작업\n   - 동시에 진행해도 충돌하지 않는 작업\n\n4. **우선순위 설정**:\n   - 의존성이 없는 작업: priority 1\n   - 1차 의존 작업: priority 2\n   - 2차 의존 작업: priority 3\n   - 이런 식으로 증가\n\n현재 의도: 법률상담\n추출된 엔티티: None\n\n분석할 질문: 보증금 반환 보증 가입 방법은?'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 16:55:18,746 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 16:55:18,747 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 16:55:18,747 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 16:55:18,747 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 16:55:18,747 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 16:55:18,747 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 16:55:21,097 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 07:55:21 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'2148'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'2174'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9989'), (b'x-ratelimit-remaining-tokens', b'197337'), (b'x-ratelimit-reset-requests', b'1m33.208s'), (b'x-ratelimit-reset-tokens', b'798ms'), (b'x-request-id', b'req_e1b1a20de91e4b41ac2156456f8d8954'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b5b222c5dea9b-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 16:55:21,097 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 16:55:21,098 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 16:55:21,103 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 16:55:21,103 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 16:55:21,103 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 16:55:21,103 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 07:55:21 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '2148', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '2174', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9989', 'x-ratelimit-remaining-tokens': '197337', 'x-ratelimit-reset-requests': '1m33.208s', 'x-ratelimit-reset-tokens': '798ms', 'x-request-id': 'req_e1b1a20de91e4b41ac2156456f8d8954', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b5b222c5dea9b-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 16:55:21,103 - openai._base_client - DEBUG - request_id: req_e1b1a20de91e4b41ac2156456f8d8954
2025-10-05 16:55:21,104 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: query_decomposition | Model: gpt-4o-mini-2024-07-18 | Tokens: 2798 (prompt: 2693, completion: 105)
2025-10-05 16:55:21,104 - app.service_agent.cognitive_agents.query_decomposer - INFO - Successfully decomposed into 1 tasks
2025-10-05 16:55:21,104 - __main__ - INFO -   복합 질문: True
2025-10-05 16:55:21,104 - __main__ - INFO -   작업 수: 1
2025-10-05 16:55:21,104 - __main__ - INFO -   실행 모드: parallel
2025-10-05 16:55:21,104 - __main__ - INFO - 
[Step 3] Execution Plan 생성...
2025-10-05 16:55:21,104 - app.service_agent.cognitive_agents.planning_agent - INFO - Creating execution plan for intent: 법률상담
2025-10-05 16:55:21,104 - app.service_agent.cognitive_agents.planning_agent - WARNING - AgentRegistry is empty, using default teams
2025-10-05 16:55:21,104 - app.service_agent.cognitive_agents.planning_agent - DEBUG - Suggested agents: ['search_team', 'analysis_team']
2025-10-05 16:55:21,104 - app.service_agent.cognitive_agents.planning_agent - DEBUG - Available agents: ['search_team', 'analysis_team', 'document_team']
2025-10-05 16:55:21,104 - app.service_agent.cognitive_agents.planning_agent - INFO - Selected agents/teams for execution: ['search_team', 'analysis_team']
2025-10-05 16:55:21,104 - __main__ - INFO -   전략: sequential
2025-10-05 16:55:21,104 - __main__ - INFO -   단계 수: 2
2025-10-05 16:55:21,104 - __main__ - INFO - 
✓ 테스트 성공 (소요시간: 10.92초)
2025-10-05 16:55:21,104 - __main__ - INFO - 
================================================================================
2025-10-05 16:55:21,104 - __main__ - INFO - [9] 단일 질문 테스트: S009
2025-10-05 16:55:21,105 - __main__ - INFO - 질문: 송파구 아파트 가격 동향 알려주세요
2025-10-05 16:55:21,105 - __main__ - INFO - ================================================================================
2025-10-05 16:55:21,105 - __main__ - INFO - 
[Step 1] Intent 분석...
2025-10-05 16:55:21,105 - app.service_agent.cognitive_agents.planning_agent - INFO - Analyzing intent for query: 송파구 아파트 가격 동향 알려주세요...
2025-10-05 16:55:21,105 - app.service_agent.llm_manager.prompt_manager - DEBUG - Using cached prompt: intent_analysis
2025-10-05 16:55:21,106 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-1ba56949-a635-438e-8ab4-772b2dd6f9e7', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 의도 분석 전문가입니다.\n사용자의 질문을 정확히 이해하고, 어떤 종류의 도움이 필요한지 분류해야 합니다.\n\n## Chain-of-Thought 분석 프로세스\n\n질문을 분석할 때 다음 단계를 **순서대로** 따르세요:\n\n### 1단계: 질문 구조 파악\n- 단순 정보 요청인가? (예: "~이 뭐야?", "~알려줘")\n- 상황 설명이 포함되어 있는가? (배경, 현재 상태)\n- 구체적 수치나 데이터가 있는가? (금액, 비율, 기간 등)\n- 문제 해결을 요구하는가? (예: "어떻게 해야 해?", "방법 알려줘")\n\n### 2단계: 요청 유형 판단\n- **정보 확인형**: 사실, 개념, 규정 확인 → 검색만으로 충분\n- **평가/판단형**: "괜찮아?", "적절해?", "문제있어?" → 검색 + 분석 필요\n- **해결책 요청형**: "어떻게?", "방법?", "대처?" → 검색 + 분석 + 제안 필요\n- **비교/선택형**: "A vs B", "어느게 나아?" → 검색 + 분석(비교) 필요\n\n### 3단계: 복잡도 평가\n- **저**: 단일 개념/사실 확인 (예: "전세금 인상률 한도?")\n- **중**: 특정 상황 + 판단 (예: "3억을 5억으로 올려달래. 가능해?")\n- **고**: 복잡한 상황 + 여러 조건 + 해결책 (예: "10년 거주, 3억→10억 요구. 어떻게 해야 해?")\n\n### 4단계: 필요한 처리 결정\n- **검색만**: 정보 확인형 + 저복잡도\n- **검색+분석**: 평가/판단형 OR 중복잡도 OR 수치 비교 포함\n- **종합처리**: 해결책 요청형 OR 고복잡도 OR 여러 조건 동시 고려\n\n### 5단계: 최종 검증\n- 선택한 의도로 사용자 질문에 완전히 답변 가능한가?\n- 단순 정보 제공으로 끝나는가, 아니면 추가 분석/판단이 필요한가?\n- 상황 설명이 있으면서 "해결", "방법", "어떻게" 등이 있으면 → COMPREHENSIVE 고려\n\n## 중요: 복합 질문 처리\n복합적인 질문(여러 의도가 섞인 질문)의 경우, 가장 핵심적인 의도를 파악하되,\nsub_intents 필드에 부가적인 의도들도 함께 기록해주세요.\n\n**특히 주의**:\n- 법률 키워드가 있어도, "해결방법", "어떻게 해야" 같은 표현이 있으면 단순 LEGAL_CONSULT가 아닐 수 있음\n- 구체적 상황(금액, 기간 등) + 해결책 요구 = COMPREHENSIVE 또는 복합 의도로 분류\n\n## 분류 카테고리 설명:\n\n1. **LEGAL_CONSULT (법률상담)**\n   - 설명: 부동산 관련 법률, 권리, 의무에 대한 질문\n   - 예시:\n     * 단순: "전세금 5% 인상이 가능한가요?", "임대차계약 갱신 거부할 수 있나요?"\n     * 복합: "전세금 인상 가능한지 확인하고 법적 근거도 알려주세요"\n   - 키워드: 법, 전세, 임대, 보증금, 계약, 권리, 의무, 갱신, 임차인, 임대인, 법률, 규정, 조항\n   - 필요한 처리: 법률 데이터베이스 검색, 관련 법조항 찾기\n\n2. **MARKET_INQUIRY (시세조회)**\n   - 설명: 부동산 시장 가격, 시세, 거래 동향에 대한 질문\n   - 예시:\n     * 단순: "강남구 아파트 전세 시세 알려주세요", "서초동 매매가 얼마나 올랐나요?"\n     * 복합: "강남구 시세 확인하고 대출 가능 금액도 계산해줘"\n   - 키워드: 시세, 가격, 매매가, 전세가, 월세, 시장, 동향, 평균, 지역명, 상승률, 하락률\n   - 필요한 처리: 부동산 시세 데이터 조회, 지역별 가격 분석\n\n3. **LOAN_CONSULT (대출상담)**\n   - 설명: 주택담보대출, 전세자금대출 등 금융 관련 질문\n   - 예시:\n     * 단순: "전세자금대출 한도가 얼마인가요?", "LTV가 뭔가요?"\n     * 복합: "대출 한도 확인하고 금리 비교도 해주세요"\n   - 키워드: 대출, 금리, 한도, 조건, 상환, LTV, DTI, DSR, 담보, 금융, 은행\n   - 필요한 처리: 대출 상품 조회, 금리 정보 검색, 한도 계산\n\n4. **CONTRACT_CREATION (계약서작성)**\n   - 설명: 새로운 계약서나 문서를 작성해달라는 요청\n   - 예시:\n     * 단순: "임대차계약서 작성해주세요", "전세계약서 초안 만들어주세요"\n     * 복합: "계약서 작성하고 주의사항도 검토해주세요"\n   - 키워드: 작성, 만들, 생성, 초안, 계약서, 문서, 양식\n   - 필요한 처리: 문서 생성 에이전트 호출, 템플릿 기반 작성\n\n5. **CONTRACT_REVIEW (계약서검토)**\n   - 설명: 기존 계약서나 문서를 검토해달라는 요청\n   - 예시:\n     * 단순: "이 계약서 검토해주세요", "특약사항 문제없나요?"\n     * 복합: "계약서 검토하고 수정사항도 제안해주세요"\n   - 키워드: 검토, 확인, 점검, 리뷰, 분석해, 살펴봐, 체크\n   - 필요한 처리: 문서 분석, 위험 요소 식별, 개선사항 제안\n\n6. **COMPREHENSIVE (종합분석)**\n   - 설명: 여러 측면을 종합적으로 분석해달라는 요청, 또는 복잡한 상황에 대한 해결책 요청\n   - 예시:\n     * 단순: "이 물건 전체적으로 분석해주세요"\n     * 복합: "시세, 법률, 대출 모두 검토해서 종합 의견 주세요"\n     * 해결형: "10년 거주했는데 전세금 3억을 10억으로 올려달래. 어떻게 해야 해?"\n     * 상황+해결: "집주인이 계약 갱신 거부했어. 법적으로 어떻게 대응해야 할까?"\n   - 키워드: 종합, 전체, 모든, 전반적, 종합적, 평가, 분석, 어떻게, 방법, 해결, 대처\n   - 패턴: 구체적 상황 설명 + "어떻게/방법/해결" 요청\n   - 필요한 처리: 다중 데이터 소스 통합 분석, 상황 평가, 해결책 제시\n\n7. **RISK_ANALYSIS (리스크분석)**\n   - 설명: 위험 요소나 주의사항에 대한 질문\n   - 예시:\n     * 단순: "이 계약 위험한가요?", "주의할 점 알려주세요"\n     * 복합: "리스크 분석하고 대안도 제시해주세요"\n   - 키워드: 위험, 리스크, 주의, 문제점, 조심, 걱정, 우려\n   - 필요한 처리: 위험 요소 분석, 주의사항 추출\n\n8. **UNCLEAR (불분명)**\n   - 설명: 의도를 명확히 파악하기 어려운 질문\n   - 예시: "이거 좀 봐주세요", "어떻게 해야 할까요?", "도와주세요"\n   - 처리: 추가 질문으로 의도 명확화 필요\n\n9. **IRRELEVANT (무관)**\n   - 설명: 부동산과 전혀 관련 없는 질문\n   - 예시: "날씨 어때?", "저녁 뭐 먹지?", "주식 추천해줘"\n   - 처리: 부동산 관련 질문을 유도\n\n## 복합 질문 예시와 분석 (CoT 적용):\n\n### 예시 1: "강남구 아파트 시세 알려주고 전세자금대출 가능한지도 확인해줘"\n**CoT 분석**:\n1. 구조: 두 개의 요청 ("시세" + "대출")\n2. 유형: 정보 확인형 (둘 다)\n3. 복잡도: 중 (두 가지 독립적 조회)\n4. 필요 처리: 검색 + 계산/분석\n\n**결론**:\n- 주 의도: MARKET_INQUIRY (시세 조회가 먼저 필요)\n- 부가 의도: LOAN_CONSULT (대출 확인)\n- 분해: ["강남구 아파트 시세 조회", "전세자금대출 가능 여부 확인"]\n\n### 예시 2: "이 계약서 검토해서 위험한 부분 있는지 알려주고 수정 제안도 해줘"\n**CoT 분석**:\n1. 구조: 검토 + 위험 평가 + 수정안\n2. 유형: 평가/판단형 + 해결책 요청형\n3. 복잡도: 고 (3단계 처리)\n4. 필요 처리: 검토 + 분석 + 문서 생성\n\n**결론**:\n- 주 의도: CONTRACT_REVIEW (계약서 검토)\n- 부가 의도: RISK_ANALYSIS (위험 분석)\n- 분해: ["계약서 전체 검토", "위험 요소 식별", "수정사항 제안"]\n\n### 예시 3: "집주인이 짜증나, 10년 살았는데 전세금 3억을 10억으로 올려달래. 법적으로 해결방법 알려줘"\n**CoT 분석**:\n1. 구조: 상황 설명 (10년 거주, 3억→10억) + 해결책 요청\n2. 유형: 해결책 요청형 (단순 정보 X)\n3. 복잡도: 고 (구체적 상황 + 수치 비교 + 법률 + 대응방안)\n4. 필요 처리: 법률 검색 + 상황 분석 + 해결책 제시\n\n**결론**:\n- 주 의도: COMPREHENSIVE (복잡한 상황에 대한 종합 해결)\n- 부가 의도: LEGAL_CONSULT, RISK_ANALYSIS\n- 분해: ["전세금 인상 한도 법률 조회", "3억→10억 인상의 타당성 분석", "구체적 대응 방안 제시"]\n- **이유**: "법적으로"라는 키워드가 있지만, 단순 법률 확인이 아니라 구체적 상황에 대한 해결책을 요구하므로 COMPREHENSIVE\n\n### 예시 4: "전세금 인상률 상한이 얼마야?"\n**CoT 분석**:\n1. 구조: 단순 사실 확인\n2. 유형: 정보 확인형\n3. 복잡도: 저 (단일 개념)\n4. 필요 처리: 검색만\n\n**결론**:\n- 주 의도: LEGAL_CONSULT (법률 정보 조회)\n- 부가 의도: 없음\n- 분해: 필요 없음\n\n## 응답 형식 (JSON 형식으로 응답):\n\n```json\n{\n    "intent": "LEGAL_CONSULT",\n    "confidence": 0.9,\n    "keywords": ["전세금", "인상", "제한"],\n    "sub_intents": [],\n    "is_compound": false,\n    "decomposed_tasks": [],\n    "entities": {\n        "location": "강남구",\n        "price": "5억",\n        "contract_type": "전세",\n        "date": "2024년",\n        "area": "84㎡",\n        "action_verbs": ["확인", "검토"]\n    },\n    "reasoning": "전세금 인상에 대한 법률 질문이므로 LEGAL_CONSULT로 분류"\n}\n```\n\n응답 규칙:\n- intent: 위 9개 카테고리 중 하나 (대문자_언더스코어 형식)\n- confidence: 0.0~1.0 (0.8 이상이면 매우 확실, 0.5 미만이면 불확실)\n- keywords: 추출된 주요 키워드 목록\n- sub_intents: 복합 질문일 경우 부가적인 의도들\n- is_compound: 복합 질문 여부 (true/false)\n- decomposed_tasks: 복합 질문을 분해한 개별 작업들\n- entities: 추출된 엔티티 정보\n- reasoning: **반드시 CoT 5단계를 거쳐 분석한 과정을 포함** (구조 파악 → 유형 판단 → 복잡도 평가 → 필요 처리 → 최종 검증)\n\n## reasoning 작성 예시:\n"1단계(구조): 상황 설명(10년 거주, 3억→10억) + 해결책 요청 포함.\n2단계(유형): 해결책 요청형 - 단순 정보가 아닌 대응방안 필요.\n3단계(복잡도): 고 - 구체적 수치 비교와 복잡한 상황.\n4단계(처리): 법률 검색 + 상황 분석 + 해결책 제시 필요.\n5단계(검증): LEGAL_CONSULT만으로는 불충분, 종합적 분석 필요 → COMPREHENSIVE 선택"\n\n## 판단 가이드:\n- 여러 의도가 섞여있다면, 가장 주된 의도를 intent에, 나머지를 sub_intents에 기록\n- "그리고", "또한", "함께", "같이" 등의 연결어가 있으면 복합 질문일 가능성 높음\n- 법률 관련 키워드가 있으면 LEGAL_CONSULT 우선\n- 가격/시세 언급이 명확하면 MARKET_INQUIRY\n- 계약서라는 단어와 함께 "작성/만들기"가 있으면 CONTRACT_CREATION\n- 계약서라는 단어와 함께 "검토/확인"이 있으면 CONTRACT_REVIEW\n- 불확실하면 confidence를 낮게 설정하고 UNCLEAR 선택\n- 복합 질문은 is_compound를 true로 설정하고 개별 작업으로 분해\n\n분석할 질문: 송파구 아파트 가격 동향 알려주세요'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 16:55:21,107 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 16:55:21,107 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 16:55:21,107 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 16:55:21,107 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 16:55:21,107 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 16:55:21,107 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 16:55:24,037 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 07:55:24 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'2718'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'2739'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9988'), (b'x-ratelimit-remaining-tokens', b'197242'), (b'x-ratelimit-reset-requests', b'1m39.474s'), (b'x-ratelimit-reset-tokens', b'827ms'), (b'x-request-id', b'req_eac0c89b046246c99cae29263e1390fc'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b5b30e883ea9b-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 16:55:24,038 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 16:55:24,038 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 16:55:24,041 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 16:55:24,041 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 16:55:24,041 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 16:55:24,041 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 07:55:24 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '2718', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '2739', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9988', 'x-ratelimit-remaining-tokens': '197242', 'x-ratelimit-reset-requests': '1m39.474s', 'x-ratelimit-reset-tokens': '827ms', 'x-request-id': 'req_eac0c89b046246c99cae29263e1390fc', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b5b30e883ea9b-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 16:55:24,041 - openai._base_client - DEBUG - request_id: req_eac0c89b046246c99cae29263e1390fc
2025-10-05 16:55:24,042 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: intent_analysis | Model: gpt-4o-mini-2024-07-18 | Tokens: 3379 (prompt: 3179, completion: 200)
2025-10-05 16:55:24,042 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM Intent Analysis Result: {'intent': 'MARKET_INQUIRY', 'confidence': 0.95, 'keywords': ['송파구', '아파트', '가격', '동향'], 'sub_intents': [], 'is_compound': False, 'decomposed_tasks': [], 'entities': {'location': '송파구', 'property_type': '아파트', 'action_verbs': ['알려줘']}, 'reasoning': '1단계(구조): 단순 정보 요청으로 가격 동향에 대한 질문. 2단계(유형): 정보 확인형 - 가격 동향에 대한 사실 확인. 3단계(복잡도): 저 - 단일 개념 확인. 4단계(처리): 검색만으로 충분. 5단계(검증): 단순 가격 동향 요청이므로 MARKET_INQUIRY로 분류.'}
2025-10-05 16:55:24,042 - app.service_agent.llm_manager.prompt_manager - DEBUG - Using cached prompt: agent_selection
2025-10-05 16:55:24,042 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-531a373e-06c1-4789-86b0-a77ad555e657', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 Agent 선택 전문가입니다.\n사용자의 요청에 가장 적합한 Agent/Team을 선택하는 것이 목표입니다.\n\n## 현재 상황\n\n**사용자 질문:** 송파구 아파트 가격 동향 알려주세요\n**분석된 의도:** 시세조회\n**추출된 키워드:** [\'송파구\', \'아파트\', \'가격\', \'동향\']\n\n## 사용 가능한 Agent/Team 정보\n\n{\'search_team\': {\'name\': \'search_team\', \'capabilities\': \'법률 검색, 부동산 시세 조회, 대출 상품 검색\', \'tools\': [\'legal_search\', \'market_data\', \'loan_data\'], \'use_cases\': [\'법률 상담\', \'시세 조회\', \'대출 정보\']}, \'analysis_team\': {\'name\': \'analysis_team\', \'capabilities\': \'데이터 분석, 리스크 평가, 인사이트 생성, 추천\', \'tools\': [\'data_analyzer\', \'risk_evaluator\'], \'use_cases\': [\'시장 분석\', \'리스크 평가\', \'투자 분석\']}, \'document_team\': {\'name\': \'document_team\', \'capabilities\': \'계약서 작성, 문서 생성, 문서 검토\', \'tools\': [\'document_generator\', \'contract_reviewer\'], \'use_cases\': [\'계약서 작성\', \'문서 검토\']}}\n\n## Agent 역할 및 상세 가이드\n\n### 1. search_team (검색 팀)\n- **주요 기능**: 정보 검색 및 데이터 수집\n- **전문 분야**:\n  * 법률 정보 검색 (전세법, 임대차보호법, 부동산 관련 법규)\n  * 부동산 시세 조회 (매매가, 전세가, 월세, 실거래가)\n  * 대출 상품 정보 검색 (금리, 한도, 조건)\n  * 지역 정보 및 인프라 조회\n- **도구**: legal_search, market_data, loan_data\n- **적합한 작업**: 정보 조회, 데이터 수집, 법률 확인, 시세 파악\n- **예시**:\n  * "전세금 5% 인상 가능한가요?"\n  * "강남구 아파트 전세 시세"\n  * "전세자금대출 한도 얼마?"\n\n### 2. analysis_team (분석 팀)\n- **주요 기능**: 데이터 분석 및 평가\n- **전문 분야**:\n  * 시장 동향 분석 (상승률, 하락률, 추세)\n  * 리스크 평가 (계약, 투자 위험도)\n  * 투자 수익률 계산 (ROI, 월세 수익률)\n  * 대출 한도 및 조건 분석 (LTV, DTI, DSR)\n  * 비교 분석 (지역별, 상품별)\n- **도구**: data_analyzer, risk_evaluator, calculator\n- **적합한 작업**: 데이터 분석, 리스크 평가, 계산, 비교, 예측\n- **의존성**: 보통 search_team의 데이터가 필요\n- **예시**:\n  * "이 지역 투자 가치 분석해줘"\n  * "계약 리스크 평가해줘"\n  * "대출 가능 금액 계산해줘"\n\n### 3. document_team (문서 팀)\n- **주요 기능**: 문서 생성 및 관리\n- **전문 분야**:\n  * 계약서 작성 (임대차, 매매, 전세)\n  * 문서 템플릿 관리\n  * 특약사항 생성\n  * 계약서 수정안 작성\n  * 법률 문서 검토\n- **도구**: document_generator, contract_template, contract_reviewer\n- **적합한 작업**: 문서 작성, 계약서 생성, 문서 수정, 검토\n- **예시**:\n  * "임대차계약서 작성해줘"\n  * "특약사항 추가해줘"\n  * "계약서 수정안 만들어줘"\n\n## Chain-of-Thought Agent 선택 프로세스\n\n다음 단계를 **순서대로** 따라 최적의 Agent 조합을 선택하세요:\n\n### 1단계: 질문 요구사항 파악\n- 단순 정보 조회인가? → search_team만 필요\n- 판단/평가가 필요한가? → search + analysis 필요\n- 해결책 제시가 필요한가? → search + analysis 필요\n- 문서 생성이 필요한가? → document_team 추가\n\n### 2단계: 작업 복잡도 판단\n- **단순** (검색만): "~이 뭐야?", "~알려줘" → search_team\n- **중간** (검색+판단): "~괜찮아?", "~적절해?" → search + analysis\n- **복잡** (종합 해결): 구체적 상황 + "어떻게 해야 해?" → search + analysis\n\n### 3단계: 의존성 분석\n- 독립적 작업: 단일 팀으로 처리 가능\n- 순차적 의존: 이전 결과 필요 → 여러 팀 순서대로\n- 병렬 가능: 동시 조회 가능 → coordination: "parallel"\n\n### 4단계: 최종 검증\n- 선택한 팀들로 질문에 완전히 답변 가능한가?\n- 불필요한 팀이 포함되지 않았는가?\n- 순서가 논리적인가? (데이터 흐름 고려)\n\n### 중요 원칙:\n- **법률 키워드만으로 판단하지 말 것**: "법적으로 어떻게 해야 해?" = 법률 검색 + 분석 필요\n- **상황 설명 + 해결책 요청** = 반드시 analysis_team 포함\n- **구체적 수치 비교** (3억→10억 같은) = analysis_team 필요\n\n## 의도별 Agent 매핑 가이드 (기본 가이드 - CoT로 조정 가능)\n\n| 의도 (Intent) | 기본 조합 | 상황별 조정 |\n|--------------|-----------|-------------|\n| LEGAL_CONSULT | ["search_team"] | 해결책 요청시 → + analysis_team |\n| MARKET_INQUIRY | ["search_team"] | 비교/평가시 → + analysis_team |\n| LOAN_CONSULT | ["search_team", "analysis_team"] | 계산 필수 |\n| CONTRACT_CREATION | ["document_team"] | 검토 후 작성 → search + document |\n| CONTRACT_REVIEW | ["search_team", "analysis_team"] | 법률 검토 + 리스크 분석 |\n| COMPREHENSIVE | ["search_team", "analysis_team"] | **항상 분석 포함** |\n| RISK_ANALYSIS | ["analysis_team"] | 법률 근거 필요시 → search + analysis |\n| UNCLEAR | ["search_team", "analysis_team"] | 포괄적 대응 |\n\n**중요**: 위 매핑은 **기본 가이드**일 뿐입니다.\n실제 질문의 내용(CoT 분석 결과)에 따라 조정하세요!\n\n## 복합 질문 처리 예시 (CoT 적용)\n\n### 예시 1: 순차적 처리\n질문: "강남구 시세 확인하고 투자 가치 분석해줘"\n**CoT 분석**:\n1. 요구사항: 시세 조회 + 투자 가치 평가\n2. 복잡도: 중간 (검색 + 분석)\n3. 의존성: 시세 데이터 → 투자 분석 (순차)\n4. 검증: search만으로는 "투자 가치 평가" 불가능\n\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "1단계: 시세 조회+투자 평가 필요. 2단계: 중간 복잡도. 3단계: 순차 의존. 4단계: search로 시세 수집 후 analysis로 투자 가치 평가 필요",\n    "coordination": "sequential"\n}\n```\n\n### 예시 2: 단순 정보 조회\n질문: "전세금 인상률 한도가 얼마야?"\n**CoT 분석**:\n1. 요구사항: 단순 사실 확인\n2. 복잡도: 낮음 (정보 확인형)\n3. 의존성: 없음\n4. 검증: search_team만으로 충분\n\n```json\n{\n    "selected_agents": ["search_team"],\n    "reasoning": "1단계: 단순 정보 조회. 2단계: 저복잡도. 3단계: 독립적. 4단계: 법률 검색만으로 답변 가능",\n    "coordination": "single"\n}\n```\n\n### 예시 3: 해결책 요청 (핵심 예시!)\n질문: "집주인이 전세금 3억을 10억으로 올려달래. 법적으로 어떻게 해야 해?"\n의도: COMPREHENSIVE\n**CoT 분석**:\n1. 요구사항: 상황 설명 + 해결책 요청\n2. 복잡도: 높음 (구체적 상황 + 수치 비교)\n3. 의존성: 법률 확인 → 상황 분석 → 해결책 제시\n4. 검증: "법적으로"만 보고 search만 선택하면 불충분! 해결책 제시 필요\n\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "1단계: 법률 + 상황 분석 + 해결책 필요. 2단계: 고복잡도(3억→10억 비정상). 3단계: 순차(법률 확인 후 타당성 분석). 4단계: \'어떻게 해야\' = 단순 법률 조회 아님, 분석 필수",\n    "coordination": "sequential",\n    "confidence": 0.95\n}\n```\n\n## 응답 형식 (JSON)\n\n```json\n{\n    "selected_agents": ["선택된 agent/team 목록"],\n    "reasoning": "선택 이유를 구체적으로 설명. 각 Agent의 역할과 처리 순서 포함",\n    "coordination": "single/sequential/parallel/pipeline",\n    "dependencies": {"agent2": ["agent1"]},\n    "estimated_time": 30,\n    "confidence": 0.9\n}\n```\n\n## 선택 가이드라인\n\n1. **최소 Agent 원칙**: 가능한 적은 수의 Agent로 처리\n2. **전문성 우선**: 해당 작업에 가장 전문적인 Agent 선택\n3. **효율성 고려**: 병렬 처리 가능한 경우 명시\n4. **의존성 관리**: 데이터 흐름을 고려한 순서 지정\n5. **폴백 전략**: 불확실한 경우 ["search_team", "analysis_team"] 조합\n\n## 주의사항\n\n- selected_agents는 반드시 배열 형태\n- Agent 이름은 정확히: "search_team", "analysis_team", "document_team"\n- 최소 1개, 최대 3개 선택\n- 순서는 실행 우선순위 (앞에 있을수록 먼저 실행)\n- reasoning은 상세하고 논리적으로 작성\n- coordination 필드로 실행 방식 명시\n- 복합 질문의 경우 의존성 관계 명확히 표시'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 16:55:24,043 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 16:55:24,043 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 16:55:24,043 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 16:55:24,043 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 16:55:24,043 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 16:55:24,043 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 16:55:26,623 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 07:55:26 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'2374'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'2402'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9987'), (b'x-ratelimit-remaining-tokens', b'197886'), (b'x-ratelimit-reset-requests', b'1m45.189s'), (b'x-ratelimit-reset-tokens', b'633ms'), (b'x-request-id', b'req_8f803d8c176841e9b957d3261e4ff192'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b5b434995ea9b-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 16:55:26,623 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 16:55:26,623 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 16:55:26,627 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 16:55:26,627 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 16:55:26,627 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 16:55:26,627 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 07:55:26 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '2374', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '2402', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9987', 'x-ratelimit-remaining-tokens': '197886', 'x-ratelimit-reset-requests': '1m45.189s', 'x-ratelimit-reset-tokens': '633ms', 'x-request-id': 'req_8f803d8c176841e9b957d3261e4ff192', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b5b434995ea9b-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 16:55:26,627 - openai._base_client - DEBUG - request_id: req_8f803d8c176841e9b957d3261e4ff192
2025-10-05 16:55:26,627 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: agent_selection | Model: gpt-4o-mini-2024-07-18 | Tokens: 2475 (prompt: 2358, completion: 117)
2025-10-05 16:55:26,628 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM agent selection reasoning: 1단계: 송파구 아파트 가격 동향에 대한 시세 조회가 필요. 2단계: 단순 정보 조회로 복잡도가 낮음. 3단계: 독립적 작업으로 search_team만으로 충분. 4단계: search_team이 송파구 아파트의 가격 동향을 조회할 수 있음.
2025-10-05 16:55:26,628 - app.service_agent.cognitive_agents.planning_agent - INFO - ✅ Primary LLM selected agents: ['search_team']
2025-10-05 16:55:26,628 - __main__ - INFO -   의도: 시세조회
2025-10-05 16:55:26,628 - __main__ - INFO -   신뢰도: 0.95
2025-10-05 16:55:26,628 - __main__ - INFO -   추천 Agent: ['search_team']
2025-10-05 16:55:26,628 - __main__ - INFO - 
[Step 2] Query Decomposition...
2025-10-05 16:55:26,628 - app.service_agent.cognitive_agents.query_decomposer - INFO - Decomposing query: 송파구 아파트 가격 동향 알려주세요...
2025-10-05 16:55:26,628 - app.service_agent.cognitive_agents.query_decomposer - INFO - Query is simple, no decomposition needed
2025-10-05 16:55:26,628 - __main__ - INFO -   복합 질문: False
2025-10-05 16:55:26,628 - __main__ - INFO -   작업 수: 1
2025-10-05 16:55:26,628 - __main__ - INFO -   실행 모드: sequential
2025-10-05 16:55:26,628 - __main__ - INFO - 
[Step 3] Execution Plan 생성...
2025-10-05 16:55:26,628 - app.service_agent.cognitive_agents.planning_agent - INFO - Creating execution plan for intent: 시세조회
2025-10-05 16:55:26,628 - app.service_agent.cognitive_agents.planning_agent - WARNING - AgentRegistry is empty, using default teams
2025-10-05 16:55:26,628 - app.service_agent.cognitive_agents.planning_agent - DEBUG - Suggested agents: ['search_team']
2025-10-05 16:55:26,628 - app.service_agent.cognitive_agents.planning_agent - DEBUG - Available agents: ['search_team', 'analysis_team', 'document_team']
2025-10-05 16:55:26,628 - app.service_agent.cognitive_agents.planning_agent - INFO - Selected agents/teams for execution: ['search_team']
2025-10-05 16:55:26,628 - __main__ - INFO -   전략: sequential
2025-10-05 16:55:26,628 - __main__ - INFO -   단계 수: 1
2025-10-05 16:55:26,628 - __main__ - INFO - 
✓ 테스트 성공 (소요시간: 5.52초)
2025-10-05 16:55:26,628 - __main__ - INFO - 
================================================================================
2025-10-05 16:55:26,628 - __main__ - INFO - [10] 단일 질문 테스트: S010
2025-10-05 16:55:26,628 - __main__ - INFO - 질문: 주택담보대출 금리 비교해주세요
2025-10-05 16:55:26,628 - __main__ - INFO - ================================================================================
2025-10-05 16:55:26,628 - __main__ - INFO - 
[Step 1] Intent 분석...
2025-10-05 16:55:26,628 - app.service_agent.cognitive_agents.planning_agent - INFO - Analyzing intent for query: 주택담보대출 금리 비교해주세요...
2025-10-05 16:55:26,628 - app.service_agent.llm_manager.prompt_manager - DEBUG - Using cached prompt: intent_analysis
2025-10-05 16:55:26,629 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-383e95b0-0d7e-4a3f-a99e-1d351b63edeb', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 의도 분석 전문가입니다.\n사용자의 질문을 정확히 이해하고, 어떤 종류의 도움이 필요한지 분류해야 합니다.\n\n## Chain-of-Thought 분석 프로세스\n\n질문을 분석할 때 다음 단계를 **순서대로** 따르세요:\n\n### 1단계: 질문 구조 파악\n- 단순 정보 요청인가? (예: "~이 뭐야?", "~알려줘")\n- 상황 설명이 포함되어 있는가? (배경, 현재 상태)\n- 구체적 수치나 데이터가 있는가? (금액, 비율, 기간 등)\n- 문제 해결을 요구하는가? (예: "어떻게 해야 해?", "방법 알려줘")\n\n### 2단계: 요청 유형 판단\n- **정보 확인형**: 사실, 개념, 규정 확인 → 검색만으로 충분\n- **평가/판단형**: "괜찮아?", "적절해?", "문제있어?" → 검색 + 분석 필요\n- **해결책 요청형**: "어떻게?", "방법?", "대처?" → 검색 + 분석 + 제안 필요\n- **비교/선택형**: "A vs B", "어느게 나아?" → 검색 + 분석(비교) 필요\n\n### 3단계: 복잡도 평가\n- **저**: 단일 개념/사실 확인 (예: "전세금 인상률 한도?")\n- **중**: 특정 상황 + 판단 (예: "3억을 5억으로 올려달래. 가능해?")\n- **고**: 복잡한 상황 + 여러 조건 + 해결책 (예: "10년 거주, 3억→10억 요구. 어떻게 해야 해?")\n\n### 4단계: 필요한 처리 결정\n- **검색만**: 정보 확인형 + 저복잡도\n- **검색+분석**: 평가/판단형 OR 중복잡도 OR 수치 비교 포함\n- **종합처리**: 해결책 요청형 OR 고복잡도 OR 여러 조건 동시 고려\n\n### 5단계: 최종 검증\n- 선택한 의도로 사용자 질문에 완전히 답변 가능한가?\n- 단순 정보 제공으로 끝나는가, 아니면 추가 분석/판단이 필요한가?\n- 상황 설명이 있으면서 "해결", "방법", "어떻게" 등이 있으면 → COMPREHENSIVE 고려\n\n## 중요: 복합 질문 처리\n복합적인 질문(여러 의도가 섞인 질문)의 경우, 가장 핵심적인 의도를 파악하되,\nsub_intents 필드에 부가적인 의도들도 함께 기록해주세요.\n\n**특히 주의**:\n- 법률 키워드가 있어도, "해결방법", "어떻게 해야" 같은 표현이 있으면 단순 LEGAL_CONSULT가 아닐 수 있음\n- 구체적 상황(금액, 기간 등) + 해결책 요구 = COMPREHENSIVE 또는 복합 의도로 분류\n\n## 분류 카테고리 설명:\n\n1. **LEGAL_CONSULT (법률상담)**\n   - 설명: 부동산 관련 법률, 권리, 의무에 대한 질문\n   - 예시:\n     * 단순: "전세금 5% 인상이 가능한가요?", "임대차계약 갱신 거부할 수 있나요?"\n     * 복합: "전세금 인상 가능한지 확인하고 법적 근거도 알려주세요"\n   - 키워드: 법, 전세, 임대, 보증금, 계약, 권리, 의무, 갱신, 임차인, 임대인, 법률, 규정, 조항\n   - 필요한 처리: 법률 데이터베이스 검색, 관련 법조항 찾기\n\n2. **MARKET_INQUIRY (시세조회)**\n   - 설명: 부동산 시장 가격, 시세, 거래 동향에 대한 질문\n   - 예시:\n     * 단순: "강남구 아파트 전세 시세 알려주세요", "서초동 매매가 얼마나 올랐나요?"\n     * 복합: "강남구 시세 확인하고 대출 가능 금액도 계산해줘"\n   - 키워드: 시세, 가격, 매매가, 전세가, 월세, 시장, 동향, 평균, 지역명, 상승률, 하락률\n   - 필요한 처리: 부동산 시세 데이터 조회, 지역별 가격 분석\n\n3. **LOAN_CONSULT (대출상담)**\n   - 설명: 주택담보대출, 전세자금대출 등 금융 관련 질문\n   - 예시:\n     * 단순: "전세자금대출 한도가 얼마인가요?", "LTV가 뭔가요?"\n     * 복합: "대출 한도 확인하고 금리 비교도 해주세요"\n   - 키워드: 대출, 금리, 한도, 조건, 상환, LTV, DTI, DSR, 담보, 금융, 은행\n   - 필요한 처리: 대출 상품 조회, 금리 정보 검색, 한도 계산\n\n4. **CONTRACT_CREATION (계약서작성)**\n   - 설명: 새로운 계약서나 문서를 작성해달라는 요청\n   - 예시:\n     * 단순: "임대차계약서 작성해주세요", "전세계약서 초안 만들어주세요"\n     * 복합: "계약서 작성하고 주의사항도 검토해주세요"\n   - 키워드: 작성, 만들, 생성, 초안, 계약서, 문서, 양식\n   - 필요한 처리: 문서 생성 에이전트 호출, 템플릿 기반 작성\n\n5. **CONTRACT_REVIEW (계약서검토)**\n   - 설명: 기존 계약서나 문서를 검토해달라는 요청\n   - 예시:\n     * 단순: "이 계약서 검토해주세요", "특약사항 문제없나요?"\n     * 복합: "계약서 검토하고 수정사항도 제안해주세요"\n   - 키워드: 검토, 확인, 점검, 리뷰, 분석해, 살펴봐, 체크\n   - 필요한 처리: 문서 분석, 위험 요소 식별, 개선사항 제안\n\n6. **COMPREHENSIVE (종합분석)**\n   - 설명: 여러 측면을 종합적으로 분석해달라는 요청, 또는 복잡한 상황에 대한 해결책 요청\n   - 예시:\n     * 단순: "이 물건 전체적으로 분석해주세요"\n     * 복합: "시세, 법률, 대출 모두 검토해서 종합 의견 주세요"\n     * 해결형: "10년 거주했는데 전세금 3억을 10억으로 올려달래. 어떻게 해야 해?"\n     * 상황+해결: "집주인이 계약 갱신 거부했어. 법적으로 어떻게 대응해야 할까?"\n   - 키워드: 종합, 전체, 모든, 전반적, 종합적, 평가, 분석, 어떻게, 방법, 해결, 대처\n   - 패턴: 구체적 상황 설명 + "어떻게/방법/해결" 요청\n   - 필요한 처리: 다중 데이터 소스 통합 분석, 상황 평가, 해결책 제시\n\n7. **RISK_ANALYSIS (리스크분석)**\n   - 설명: 위험 요소나 주의사항에 대한 질문\n   - 예시:\n     * 단순: "이 계약 위험한가요?", "주의할 점 알려주세요"\n     * 복합: "리스크 분석하고 대안도 제시해주세요"\n   - 키워드: 위험, 리스크, 주의, 문제점, 조심, 걱정, 우려\n   - 필요한 처리: 위험 요소 분석, 주의사항 추출\n\n8. **UNCLEAR (불분명)**\n   - 설명: 의도를 명확히 파악하기 어려운 질문\n   - 예시: "이거 좀 봐주세요", "어떻게 해야 할까요?", "도와주세요"\n   - 처리: 추가 질문으로 의도 명확화 필요\n\n9. **IRRELEVANT (무관)**\n   - 설명: 부동산과 전혀 관련 없는 질문\n   - 예시: "날씨 어때?", "저녁 뭐 먹지?", "주식 추천해줘"\n   - 처리: 부동산 관련 질문을 유도\n\n## 복합 질문 예시와 분석 (CoT 적용):\n\n### 예시 1: "강남구 아파트 시세 알려주고 전세자금대출 가능한지도 확인해줘"\n**CoT 분석**:\n1. 구조: 두 개의 요청 ("시세" + "대출")\n2. 유형: 정보 확인형 (둘 다)\n3. 복잡도: 중 (두 가지 독립적 조회)\n4. 필요 처리: 검색 + 계산/분석\n\n**결론**:\n- 주 의도: MARKET_INQUIRY (시세 조회가 먼저 필요)\n- 부가 의도: LOAN_CONSULT (대출 확인)\n- 분해: ["강남구 아파트 시세 조회", "전세자금대출 가능 여부 확인"]\n\n### 예시 2: "이 계약서 검토해서 위험한 부분 있는지 알려주고 수정 제안도 해줘"\n**CoT 분석**:\n1. 구조: 검토 + 위험 평가 + 수정안\n2. 유형: 평가/판단형 + 해결책 요청형\n3. 복잡도: 고 (3단계 처리)\n4. 필요 처리: 검토 + 분석 + 문서 생성\n\n**결론**:\n- 주 의도: CONTRACT_REVIEW (계약서 검토)\n- 부가 의도: RISK_ANALYSIS (위험 분석)\n- 분해: ["계약서 전체 검토", "위험 요소 식별", "수정사항 제안"]\n\n### 예시 3: "집주인이 짜증나, 10년 살았는데 전세금 3억을 10억으로 올려달래. 법적으로 해결방법 알려줘"\n**CoT 분석**:\n1. 구조: 상황 설명 (10년 거주, 3억→10억) + 해결책 요청\n2. 유형: 해결책 요청형 (단순 정보 X)\n3. 복잡도: 고 (구체적 상황 + 수치 비교 + 법률 + 대응방안)\n4. 필요 처리: 법률 검색 + 상황 분석 + 해결책 제시\n\n**결론**:\n- 주 의도: COMPREHENSIVE (복잡한 상황에 대한 종합 해결)\n- 부가 의도: LEGAL_CONSULT, RISK_ANALYSIS\n- 분해: ["전세금 인상 한도 법률 조회", "3억→10억 인상의 타당성 분석", "구체적 대응 방안 제시"]\n- **이유**: "법적으로"라는 키워드가 있지만, 단순 법률 확인이 아니라 구체적 상황에 대한 해결책을 요구하므로 COMPREHENSIVE\n\n### 예시 4: "전세금 인상률 상한이 얼마야?"\n**CoT 분석**:\n1. 구조: 단순 사실 확인\n2. 유형: 정보 확인형\n3. 복잡도: 저 (단일 개념)\n4. 필요 처리: 검색만\n\n**결론**:\n- 주 의도: LEGAL_CONSULT (법률 정보 조회)\n- 부가 의도: 없음\n- 분해: 필요 없음\n\n## 응답 형식 (JSON 형식으로 응답):\n\n```json\n{\n    "intent": "LEGAL_CONSULT",\n    "confidence": 0.9,\n    "keywords": ["전세금", "인상", "제한"],\n    "sub_intents": [],\n    "is_compound": false,\n    "decomposed_tasks": [],\n    "entities": {\n        "location": "강남구",\n        "price": "5억",\n        "contract_type": "전세",\n        "date": "2024년",\n        "area": "84㎡",\n        "action_verbs": ["확인", "검토"]\n    },\n    "reasoning": "전세금 인상에 대한 법률 질문이므로 LEGAL_CONSULT로 분류"\n}\n```\n\n응답 규칙:\n- intent: 위 9개 카테고리 중 하나 (대문자_언더스코어 형식)\n- confidence: 0.0~1.0 (0.8 이상이면 매우 확실, 0.5 미만이면 불확실)\n- keywords: 추출된 주요 키워드 목록\n- sub_intents: 복합 질문일 경우 부가적인 의도들\n- is_compound: 복합 질문 여부 (true/false)\n- decomposed_tasks: 복합 질문을 분해한 개별 작업들\n- entities: 추출된 엔티티 정보\n- reasoning: **반드시 CoT 5단계를 거쳐 분석한 과정을 포함** (구조 파악 → 유형 판단 → 복잡도 평가 → 필요 처리 → 최종 검증)\n\n## reasoning 작성 예시:\n"1단계(구조): 상황 설명(10년 거주, 3억→10억) + 해결책 요청 포함.\n2단계(유형): 해결책 요청형 - 단순 정보가 아닌 대응방안 필요.\n3단계(복잡도): 고 - 구체적 수치 비교와 복잡한 상황.\n4단계(처리): 법률 검색 + 상황 분석 + 해결책 제시 필요.\n5단계(검증): LEGAL_CONSULT만으로는 불충분, 종합적 분석 필요 → COMPREHENSIVE 선택"\n\n## 판단 가이드:\n- 여러 의도가 섞여있다면, 가장 주된 의도를 intent에, 나머지를 sub_intents에 기록\n- "그리고", "또한", "함께", "같이" 등의 연결어가 있으면 복합 질문일 가능성 높음\n- 법률 관련 키워드가 있으면 LEGAL_CONSULT 우선\n- 가격/시세 언급이 명확하면 MARKET_INQUIRY\n- 계약서라는 단어와 함께 "작성/만들기"가 있으면 CONTRACT_CREATION\n- 계약서라는 단어와 함께 "검토/확인"이 있으면 CONTRACT_REVIEW\n- 불확실하면 confidence를 낮게 설정하고 UNCLEAR 선택\n- 복합 질문은 is_compound를 true로 설정하고 개별 작업으로 분해\n\n분석할 질문: 주택담보대출 금리 비교해주세요'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 16:55:26,629 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 16:55:26,629 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 16:55:26,629 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 16:55:26,629 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 16:55:26,630 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 16:55:26,630 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 16:55:29,916 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 07:55:29 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'3089'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'3103'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9987'), (b'x-ratelimit-remaining-tokens', b'197245'), (b'x-ratelimit-reset-requests', b'1m51.242s'), (b'x-ratelimit-reset-tokens', b'826ms'), (b'x-request-id', b'req_bd841c6e039a4951b0aa007f4ed8d71a'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b5b536a55ea9b-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 16:55:29,916 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 16:55:29,916 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 16:55:29,919 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 16:55:29,919 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 16:55:29,919 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 16:55:29,920 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 07:55:29 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '3089', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '3103', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9987', 'x-ratelimit-remaining-tokens': '197245', 'x-ratelimit-reset-requests': '1m51.242s', 'x-ratelimit-reset-tokens': '826ms', 'x-request-id': 'req_bd841c6e039a4951b0aa007f4ed8d71a', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b5b536a55ea9b-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 16:55:29,920 - openai._base_client - DEBUG - request_id: req_bd841c6e039a4951b0aa007f4ed8d71a
2025-10-05 16:55:29,920 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: intent_analysis | Model: gpt-4o-mini-2024-07-18 | Tokens: 3375 (prompt: 3179, completion: 196)
2025-10-05 16:55:29,920 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM Intent Analysis Result: {'intent': 'LOAN_CONSULT', 'confidence': 0.9, 'keywords': ['주택담보대출', '금리', '비교'], 'sub_intents': [], 'is_compound': False, 'decomposed_tasks': [], 'entities': {'loan_type': '주택담보대출', 'action_verbs': ['비교']}, 'reasoning': '1단계(구조): 단순 정보 요청으로 금리 비교 요청. 2단계(유형): 정보 확인형 - 금리 정보 확인만으로 충분. 3단계(복잡도): 저 - 단일 개념 확인. 4단계(처리): 검색만 필요. 5단계(검증): 주택담보대출 금리 비교 요청이므로 LOAN_CONSULT로 분류.'}
2025-10-05 16:55:29,920 - app.service_agent.llm_manager.prompt_manager - DEBUG - Using cached prompt: agent_selection
2025-10-05 16:55:29,920 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-ff95dcb8-fde7-4dc5-838a-e762e56d1418', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 Agent 선택 전문가입니다.\n사용자의 요청에 가장 적합한 Agent/Team을 선택하는 것이 목표입니다.\n\n## 현재 상황\n\n**사용자 질문:** 주택담보대출 금리 비교해주세요\n**분석된 의도:** 대출상담\n**추출된 키워드:** [\'주택담보대출\', \'금리\', \'비교\']\n\n## 사용 가능한 Agent/Team 정보\n\n{\'search_team\': {\'name\': \'search_team\', \'capabilities\': \'법률 검색, 부동산 시세 조회, 대출 상품 검색\', \'tools\': [\'legal_search\', \'market_data\', \'loan_data\'], \'use_cases\': [\'법률 상담\', \'시세 조회\', \'대출 정보\']}, \'analysis_team\': {\'name\': \'analysis_team\', \'capabilities\': \'데이터 분석, 리스크 평가, 인사이트 생성, 추천\', \'tools\': [\'data_analyzer\', \'risk_evaluator\'], \'use_cases\': [\'시장 분석\', \'리스크 평가\', \'투자 분석\']}, \'document_team\': {\'name\': \'document_team\', \'capabilities\': \'계약서 작성, 문서 생성, 문서 검토\', \'tools\': [\'document_generator\', \'contract_reviewer\'], \'use_cases\': [\'계약서 작성\', \'문서 검토\']}}\n\n## Agent 역할 및 상세 가이드\n\n### 1. search_team (검색 팀)\n- **주요 기능**: 정보 검색 및 데이터 수집\n- **전문 분야**:\n  * 법률 정보 검색 (전세법, 임대차보호법, 부동산 관련 법규)\n  * 부동산 시세 조회 (매매가, 전세가, 월세, 실거래가)\n  * 대출 상품 정보 검색 (금리, 한도, 조건)\n  * 지역 정보 및 인프라 조회\n- **도구**: legal_search, market_data, loan_data\n- **적합한 작업**: 정보 조회, 데이터 수집, 법률 확인, 시세 파악\n- **예시**:\n  * "전세금 5% 인상 가능한가요?"\n  * "강남구 아파트 전세 시세"\n  * "전세자금대출 한도 얼마?"\n\n### 2. analysis_team (분석 팀)\n- **주요 기능**: 데이터 분석 및 평가\n- **전문 분야**:\n  * 시장 동향 분석 (상승률, 하락률, 추세)\n  * 리스크 평가 (계약, 투자 위험도)\n  * 투자 수익률 계산 (ROI, 월세 수익률)\n  * 대출 한도 및 조건 분석 (LTV, DTI, DSR)\n  * 비교 분석 (지역별, 상품별)\n- **도구**: data_analyzer, risk_evaluator, calculator\n- **적합한 작업**: 데이터 분석, 리스크 평가, 계산, 비교, 예측\n- **의존성**: 보통 search_team의 데이터가 필요\n- **예시**:\n  * "이 지역 투자 가치 분석해줘"\n  * "계약 리스크 평가해줘"\n  * "대출 가능 금액 계산해줘"\n\n### 3. document_team (문서 팀)\n- **주요 기능**: 문서 생성 및 관리\n- **전문 분야**:\n  * 계약서 작성 (임대차, 매매, 전세)\n  * 문서 템플릿 관리\n  * 특약사항 생성\n  * 계약서 수정안 작성\n  * 법률 문서 검토\n- **도구**: document_generator, contract_template, contract_reviewer\n- **적합한 작업**: 문서 작성, 계약서 생성, 문서 수정, 검토\n- **예시**:\n  * "임대차계약서 작성해줘"\n  * "특약사항 추가해줘"\n  * "계약서 수정안 만들어줘"\n\n## Chain-of-Thought Agent 선택 프로세스\n\n다음 단계를 **순서대로** 따라 최적의 Agent 조합을 선택하세요:\n\n### 1단계: 질문 요구사항 파악\n- 단순 정보 조회인가? → search_team만 필요\n- 판단/평가가 필요한가? → search + analysis 필요\n- 해결책 제시가 필요한가? → search + analysis 필요\n- 문서 생성이 필요한가? → document_team 추가\n\n### 2단계: 작업 복잡도 판단\n- **단순** (검색만): "~이 뭐야?", "~알려줘" → search_team\n- **중간** (검색+판단): "~괜찮아?", "~적절해?" → search + analysis\n- **복잡** (종합 해결): 구체적 상황 + "어떻게 해야 해?" → search + analysis\n\n### 3단계: 의존성 분석\n- 독립적 작업: 단일 팀으로 처리 가능\n- 순차적 의존: 이전 결과 필요 → 여러 팀 순서대로\n- 병렬 가능: 동시 조회 가능 → coordination: "parallel"\n\n### 4단계: 최종 검증\n- 선택한 팀들로 질문에 완전히 답변 가능한가?\n- 불필요한 팀이 포함되지 않았는가?\n- 순서가 논리적인가? (데이터 흐름 고려)\n\n### 중요 원칙:\n- **법률 키워드만으로 판단하지 말 것**: "법적으로 어떻게 해야 해?" = 법률 검색 + 분석 필요\n- **상황 설명 + 해결책 요청** = 반드시 analysis_team 포함\n- **구체적 수치 비교** (3억→10억 같은) = analysis_team 필요\n\n## 의도별 Agent 매핑 가이드 (기본 가이드 - CoT로 조정 가능)\n\n| 의도 (Intent) | 기본 조합 | 상황별 조정 |\n|--------------|-----------|-------------|\n| LEGAL_CONSULT | ["search_team"] | 해결책 요청시 → + analysis_team |\n| MARKET_INQUIRY | ["search_team"] | 비교/평가시 → + analysis_team |\n| LOAN_CONSULT | ["search_team", "analysis_team"] | 계산 필수 |\n| CONTRACT_CREATION | ["document_team"] | 검토 후 작성 → search + document |\n| CONTRACT_REVIEW | ["search_team", "analysis_team"] | 법률 검토 + 리스크 분석 |\n| COMPREHENSIVE | ["search_team", "analysis_team"] | **항상 분석 포함** |\n| RISK_ANALYSIS | ["analysis_team"] | 법률 근거 필요시 → search + analysis |\n| UNCLEAR | ["search_team", "analysis_team"] | 포괄적 대응 |\n\n**중요**: 위 매핑은 **기본 가이드**일 뿐입니다.\n실제 질문의 내용(CoT 분석 결과)에 따라 조정하세요!\n\n## 복합 질문 처리 예시 (CoT 적용)\n\n### 예시 1: 순차적 처리\n질문: "강남구 시세 확인하고 투자 가치 분석해줘"\n**CoT 분석**:\n1. 요구사항: 시세 조회 + 투자 가치 평가\n2. 복잡도: 중간 (검색 + 분석)\n3. 의존성: 시세 데이터 → 투자 분석 (순차)\n4. 검증: search만으로는 "투자 가치 평가" 불가능\n\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "1단계: 시세 조회+투자 평가 필요. 2단계: 중간 복잡도. 3단계: 순차 의존. 4단계: search로 시세 수집 후 analysis로 투자 가치 평가 필요",\n    "coordination": "sequential"\n}\n```\n\n### 예시 2: 단순 정보 조회\n질문: "전세금 인상률 한도가 얼마야?"\n**CoT 분석**:\n1. 요구사항: 단순 사실 확인\n2. 복잡도: 낮음 (정보 확인형)\n3. 의존성: 없음\n4. 검증: search_team만으로 충분\n\n```json\n{\n    "selected_agents": ["search_team"],\n    "reasoning": "1단계: 단순 정보 조회. 2단계: 저복잡도. 3단계: 독립적. 4단계: 법률 검색만으로 답변 가능",\n    "coordination": "single"\n}\n```\n\n### 예시 3: 해결책 요청 (핵심 예시!)\n질문: "집주인이 전세금 3억을 10억으로 올려달래. 법적으로 어떻게 해야 해?"\n의도: COMPREHENSIVE\n**CoT 분석**:\n1. 요구사항: 상황 설명 + 해결책 요청\n2. 복잡도: 높음 (구체적 상황 + 수치 비교)\n3. 의존성: 법률 확인 → 상황 분석 → 해결책 제시\n4. 검증: "법적으로"만 보고 search만 선택하면 불충분! 해결책 제시 필요\n\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "1단계: 법률 + 상황 분석 + 해결책 필요. 2단계: 고복잡도(3억→10억 비정상). 3단계: 순차(법률 확인 후 타당성 분석). 4단계: \'어떻게 해야\' = 단순 법률 조회 아님, 분석 필수",\n    "coordination": "sequential",\n    "confidence": 0.95\n}\n```\n\n## 응답 형식 (JSON)\n\n```json\n{\n    "selected_agents": ["선택된 agent/team 목록"],\n    "reasoning": "선택 이유를 구체적으로 설명. 각 Agent의 역할과 처리 순서 포함",\n    "coordination": "single/sequential/parallel/pipeline",\n    "dependencies": {"agent2": ["agent1"]},\n    "estimated_time": 30,\n    "confidence": 0.9\n}\n```\n\n## 선택 가이드라인\n\n1. **최소 Agent 원칙**: 가능한 적은 수의 Agent로 처리\n2. **전문성 우선**: 해당 작업에 가장 전문적인 Agent 선택\n3. **효율성 고려**: 병렬 처리 가능한 경우 명시\n4. **의존성 관리**: 데이터 흐름을 고려한 순서 지정\n5. **폴백 전략**: 불확실한 경우 ["search_team", "analysis_team"] 조합\n\n## 주의사항\n\n- selected_agents는 반드시 배열 형태\n- Agent 이름은 정확히: "search_team", "analysis_team", "document_team"\n- 최소 1개, 최대 3개 선택\n- 순서는 실행 우선순위 (앞에 있을수록 먼저 실행)\n- reasoning은 상세하고 논리적으로 작성\n- coordination 필드로 실행 방식 명시\n- 복합 질문의 경우 의존성 관계 명확히 표시'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 16:55:29,921 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 16:55:29,922 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 16:55:29,922 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 16:55:29,922 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 16:55:29,922 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 16:55:29,922 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 16:55:34,263 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 07:55:34 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'4132'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'4164'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9987'), (b'x-ratelimit-remaining-tokens', b'197889'), (b'x-ratelimit-reset-requests', b'1m47.953s'), (b'x-ratelimit-reset-tokens', b'633ms'), (b'x-request-id', b'req_e3471d1c7f2c412f955f547ac18fe32e'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b5b680cf3ea9b-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 16:55:34,265 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 16:55:34,265 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 16:55:34,282 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 16:55:34,282 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 16:55:34,282 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 16:55:34,282 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 07:55:34 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '4132', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '4164', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9987', 'x-ratelimit-remaining-tokens': '197889', 'x-ratelimit-reset-requests': '1m47.953s', 'x-ratelimit-reset-tokens': '633ms', 'x-request-id': 'req_e3471d1c7f2c412f955f547ac18fe32e', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b5b680cf3ea9b-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 16:55:34,282 - openai._base_client - DEBUG - request_id: req_e3471d1c7f2c412f955f547ac18fe32e
2025-10-05 16:55:34,283 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: agent_selection | Model: gpt-4o-mini-2024-07-18 | Tokens: 2518 (prompt: 2359, completion: 159)
2025-10-05 16:55:34,283 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM agent selection reasoning: 1단계: 주택담보대출 금리 비교 요청으로, 대출 상품 정보 검색과 분석이 필요. 2단계: 중간 복잡도 (검색 + 분석). 3단계: 대출 상품 정보를 검색한 후, 금리를 비교 분석해야 하므로 순차적 의존성이 있음. 4단계: search_team으로 대출 상품 정보를 수집한 후, analysis_team으로 금리 비교 및 분석을 진행해야 함.
2025-10-05 16:55:34,283 - app.service_agent.cognitive_agents.planning_agent - INFO - ✅ Primary LLM selected agents: ['search_team', 'analysis_team']
2025-10-05 16:55:34,283 - __main__ - INFO -   의도: 대출상담
2025-10-05 16:55:34,283 - __main__ - INFO -   신뢰도: 0.90
2025-10-05 16:55:34,283 - __main__ - INFO -   추천 Agent: ['search_team', 'analysis_team']
2025-10-05 16:55:34,283 - __main__ - INFO - 
[Step 2] Query Decomposition...
2025-10-05 16:55:34,283 - app.service_agent.cognitive_agents.query_decomposer - INFO - Decomposing query: 주택담보대출 금리 비교해주세요...
2025-10-05 16:55:34,283 - app.service_agent.cognitive_agents.query_decomposer - INFO - Query is simple, no decomposition needed
2025-10-05 16:55:34,283 - __main__ - INFO -   복합 질문: False
2025-10-05 16:55:34,283 - __main__ - INFO -   작업 수: 1
2025-10-05 16:55:34,283 - __main__ - INFO -   실행 모드: sequential
2025-10-05 16:55:34,283 - __main__ - INFO - 
[Step 3] Execution Plan 생성...
2025-10-05 16:55:34,283 - app.service_agent.cognitive_agents.planning_agent - INFO - Creating execution plan for intent: 대출상담
2025-10-05 16:55:34,283 - app.service_agent.cognitive_agents.planning_agent - WARNING - AgentRegistry is empty, using default teams
2025-10-05 16:55:34,283 - app.service_agent.cognitive_agents.planning_agent - DEBUG - Suggested agents: ['search_team', 'analysis_team']
2025-10-05 16:55:34,283 - app.service_agent.cognitive_agents.planning_agent - DEBUG - Available agents: ['search_team', 'analysis_team', 'document_team']
2025-10-05 16:55:34,283 - app.service_agent.cognitive_agents.planning_agent - INFO - Selected agents/teams for execution: ['search_team', 'analysis_team']
2025-10-05 16:55:34,283 - __main__ - INFO -   전략: sequential
2025-10-05 16:55:34,283 - __main__ - INFO -   단계 수: 2
2025-10-05 16:55:34,283 - __main__ - INFO - 
✓ 테스트 성공 (소요시간: 7.66초)
2025-10-05 16:55:34,284 - __main__ - INFO - 
결과 저장: C:\kdy\Projects\holmesnyangz\beta_v001\backend\app\service_agent\reports\phase1_test_results.json
2025-10-05 16:55:34,285 - __main__ - INFO - 
================================================================================
2025-10-05 16:55:34,285 - __main__ - INFO - [11] 단일 질문 테스트: S011
2025-10-05 16:55:34,285 - __main__ - INFO - 질문: 임대차보호법 적용 대상은?
2025-10-05 16:55:34,285 - __main__ - INFO - ================================================================================
2025-10-05 16:55:34,285 - __main__ - INFO - 
[Step 1] Intent 분석...
2025-10-05 16:55:34,285 - app.service_agent.cognitive_agents.planning_agent - INFO - Analyzing intent for query: 임대차보호법 적용 대상은?...
2025-10-05 16:55:34,285 - app.service_agent.llm_manager.prompt_manager - DEBUG - Using cached prompt: intent_analysis
2025-10-05 16:55:34,285 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-bb24d924-648d-4cbd-aae8-7272d5c07a43', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 의도 분석 전문가입니다.\n사용자의 질문을 정확히 이해하고, 어떤 종류의 도움이 필요한지 분류해야 합니다.\n\n## Chain-of-Thought 분석 프로세스\n\n질문을 분석할 때 다음 단계를 **순서대로** 따르세요:\n\n### 1단계: 질문 구조 파악\n- 단순 정보 요청인가? (예: "~이 뭐야?", "~알려줘")\n- 상황 설명이 포함되어 있는가? (배경, 현재 상태)\n- 구체적 수치나 데이터가 있는가? (금액, 비율, 기간 등)\n- 문제 해결을 요구하는가? (예: "어떻게 해야 해?", "방법 알려줘")\n\n### 2단계: 요청 유형 판단\n- **정보 확인형**: 사실, 개념, 규정 확인 → 검색만으로 충분\n- **평가/판단형**: "괜찮아?", "적절해?", "문제있어?" → 검색 + 분석 필요\n- **해결책 요청형**: "어떻게?", "방법?", "대처?" → 검색 + 분석 + 제안 필요\n- **비교/선택형**: "A vs B", "어느게 나아?" → 검색 + 분석(비교) 필요\n\n### 3단계: 복잡도 평가\n- **저**: 단일 개념/사실 확인 (예: "전세금 인상률 한도?")\n- **중**: 특정 상황 + 판단 (예: "3억을 5억으로 올려달래. 가능해?")\n- **고**: 복잡한 상황 + 여러 조건 + 해결책 (예: "10년 거주, 3억→10억 요구. 어떻게 해야 해?")\n\n### 4단계: 필요한 처리 결정\n- **검색만**: 정보 확인형 + 저복잡도\n- **검색+분석**: 평가/판단형 OR 중복잡도 OR 수치 비교 포함\n- **종합처리**: 해결책 요청형 OR 고복잡도 OR 여러 조건 동시 고려\n\n### 5단계: 최종 검증\n- 선택한 의도로 사용자 질문에 완전히 답변 가능한가?\n- 단순 정보 제공으로 끝나는가, 아니면 추가 분석/판단이 필요한가?\n- 상황 설명이 있으면서 "해결", "방법", "어떻게" 등이 있으면 → COMPREHENSIVE 고려\n\n## 중요: 복합 질문 처리\n복합적인 질문(여러 의도가 섞인 질문)의 경우, 가장 핵심적인 의도를 파악하되,\nsub_intents 필드에 부가적인 의도들도 함께 기록해주세요.\n\n**특히 주의**:\n- 법률 키워드가 있어도, "해결방법", "어떻게 해야" 같은 표현이 있으면 단순 LEGAL_CONSULT가 아닐 수 있음\n- 구체적 상황(금액, 기간 등) + 해결책 요구 = COMPREHENSIVE 또는 복합 의도로 분류\n\n## 분류 카테고리 설명:\n\n1. **LEGAL_CONSULT (법률상담)**\n   - 설명: 부동산 관련 법률, 권리, 의무에 대한 질문\n   - 예시:\n     * 단순: "전세금 5% 인상이 가능한가요?", "임대차계약 갱신 거부할 수 있나요?"\n     * 복합: "전세금 인상 가능한지 확인하고 법적 근거도 알려주세요"\n   - 키워드: 법, 전세, 임대, 보증금, 계약, 권리, 의무, 갱신, 임차인, 임대인, 법률, 규정, 조항\n   - 필요한 처리: 법률 데이터베이스 검색, 관련 법조항 찾기\n\n2. **MARKET_INQUIRY (시세조회)**\n   - 설명: 부동산 시장 가격, 시세, 거래 동향에 대한 질문\n   - 예시:\n     * 단순: "강남구 아파트 전세 시세 알려주세요", "서초동 매매가 얼마나 올랐나요?"\n     * 복합: "강남구 시세 확인하고 대출 가능 금액도 계산해줘"\n   - 키워드: 시세, 가격, 매매가, 전세가, 월세, 시장, 동향, 평균, 지역명, 상승률, 하락률\n   - 필요한 처리: 부동산 시세 데이터 조회, 지역별 가격 분석\n\n3. **LOAN_CONSULT (대출상담)**\n   - 설명: 주택담보대출, 전세자금대출 등 금융 관련 질문\n   - 예시:\n     * 단순: "전세자금대출 한도가 얼마인가요?", "LTV가 뭔가요?"\n     * 복합: "대출 한도 확인하고 금리 비교도 해주세요"\n   - 키워드: 대출, 금리, 한도, 조건, 상환, LTV, DTI, DSR, 담보, 금융, 은행\n   - 필요한 처리: 대출 상품 조회, 금리 정보 검색, 한도 계산\n\n4. **CONTRACT_CREATION (계약서작성)**\n   - 설명: 새로운 계약서나 문서를 작성해달라는 요청\n   - 예시:\n     * 단순: "임대차계약서 작성해주세요", "전세계약서 초안 만들어주세요"\n     * 복합: "계약서 작성하고 주의사항도 검토해주세요"\n   - 키워드: 작성, 만들, 생성, 초안, 계약서, 문서, 양식\n   - 필요한 처리: 문서 생성 에이전트 호출, 템플릿 기반 작성\n\n5. **CONTRACT_REVIEW (계약서검토)**\n   - 설명: 기존 계약서나 문서를 검토해달라는 요청\n   - 예시:\n     * 단순: "이 계약서 검토해주세요", "특약사항 문제없나요?"\n     * 복합: "계약서 검토하고 수정사항도 제안해주세요"\n   - 키워드: 검토, 확인, 점검, 리뷰, 분석해, 살펴봐, 체크\n   - 필요한 처리: 문서 분석, 위험 요소 식별, 개선사항 제안\n\n6. **COMPREHENSIVE (종합분석)**\n   - 설명: 여러 측면을 종합적으로 분석해달라는 요청, 또는 복잡한 상황에 대한 해결책 요청\n   - 예시:\n     * 단순: "이 물건 전체적으로 분석해주세요"\n     * 복합: "시세, 법률, 대출 모두 검토해서 종합 의견 주세요"\n     * 해결형: "10년 거주했는데 전세금 3억을 10억으로 올려달래. 어떻게 해야 해?"\n     * 상황+해결: "집주인이 계약 갱신 거부했어. 법적으로 어떻게 대응해야 할까?"\n   - 키워드: 종합, 전체, 모든, 전반적, 종합적, 평가, 분석, 어떻게, 방법, 해결, 대처\n   - 패턴: 구체적 상황 설명 + "어떻게/방법/해결" 요청\n   - 필요한 처리: 다중 데이터 소스 통합 분석, 상황 평가, 해결책 제시\n\n7. **RISK_ANALYSIS (리스크분석)**\n   - 설명: 위험 요소나 주의사항에 대한 질문\n   - 예시:\n     * 단순: "이 계약 위험한가요?", "주의할 점 알려주세요"\n     * 복합: "리스크 분석하고 대안도 제시해주세요"\n   - 키워드: 위험, 리스크, 주의, 문제점, 조심, 걱정, 우려\n   - 필요한 처리: 위험 요소 분석, 주의사항 추출\n\n8. **UNCLEAR (불분명)**\n   - 설명: 의도를 명확히 파악하기 어려운 질문\n   - 예시: "이거 좀 봐주세요", "어떻게 해야 할까요?", "도와주세요"\n   - 처리: 추가 질문으로 의도 명확화 필요\n\n9. **IRRELEVANT (무관)**\n   - 설명: 부동산과 전혀 관련 없는 질문\n   - 예시: "날씨 어때?", "저녁 뭐 먹지?", "주식 추천해줘"\n   - 처리: 부동산 관련 질문을 유도\n\n## 복합 질문 예시와 분석 (CoT 적용):\n\n### 예시 1: "강남구 아파트 시세 알려주고 전세자금대출 가능한지도 확인해줘"\n**CoT 분석**:\n1. 구조: 두 개의 요청 ("시세" + "대출")\n2. 유형: 정보 확인형 (둘 다)\n3. 복잡도: 중 (두 가지 독립적 조회)\n4. 필요 처리: 검색 + 계산/분석\n\n**결론**:\n- 주 의도: MARKET_INQUIRY (시세 조회가 먼저 필요)\n- 부가 의도: LOAN_CONSULT (대출 확인)\n- 분해: ["강남구 아파트 시세 조회", "전세자금대출 가능 여부 확인"]\n\n### 예시 2: "이 계약서 검토해서 위험한 부분 있는지 알려주고 수정 제안도 해줘"\n**CoT 분석**:\n1. 구조: 검토 + 위험 평가 + 수정안\n2. 유형: 평가/판단형 + 해결책 요청형\n3. 복잡도: 고 (3단계 처리)\n4. 필요 처리: 검토 + 분석 + 문서 생성\n\n**결론**:\n- 주 의도: CONTRACT_REVIEW (계약서 검토)\n- 부가 의도: RISK_ANALYSIS (위험 분석)\n- 분해: ["계약서 전체 검토", "위험 요소 식별", "수정사항 제안"]\n\n### 예시 3: "집주인이 짜증나, 10년 살았는데 전세금 3억을 10억으로 올려달래. 법적으로 해결방법 알려줘"\n**CoT 분석**:\n1. 구조: 상황 설명 (10년 거주, 3억→10억) + 해결책 요청\n2. 유형: 해결책 요청형 (단순 정보 X)\n3. 복잡도: 고 (구체적 상황 + 수치 비교 + 법률 + 대응방안)\n4. 필요 처리: 법률 검색 + 상황 분석 + 해결책 제시\n\n**결론**:\n- 주 의도: COMPREHENSIVE (복잡한 상황에 대한 종합 해결)\n- 부가 의도: LEGAL_CONSULT, RISK_ANALYSIS\n- 분해: ["전세금 인상 한도 법률 조회", "3억→10억 인상의 타당성 분석", "구체적 대응 방안 제시"]\n- **이유**: "법적으로"라는 키워드가 있지만, 단순 법률 확인이 아니라 구체적 상황에 대한 해결책을 요구하므로 COMPREHENSIVE\n\n### 예시 4: "전세금 인상률 상한이 얼마야?"\n**CoT 분석**:\n1. 구조: 단순 사실 확인\n2. 유형: 정보 확인형\n3. 복잡도: 저 (단일 개념)\n4. 필요 처리: 검색만\n\n**결론**:\n- 주 의도: LEGAL_CONSULT (법률 정보 조회)\n- 부가 의도: 없음\n- 분해: 필요 없음\n\n## 응답 형식 (JSON 형식으로 응답):\n\n```json\n{\n    "intent": "LEGAL_CONSULT",\n    "confidence": 0.9,\n    "keywords": ["전세금", "인상", "제한"],\n    "sub_intents": [],\n    "is_compound": false,\n    "decomposed_tasks": [],\n    "entities": {\n        "location": "강남구",\n        "price": "5억",\n        "contract_type": "전세",\n        "date": "2024년",\n        "area": "84㎡",\n        "action_verbs": ["확인", "검토"]\n    },\n    "reasoning": "전세금 인상에 대한 법률 질문이므로 LEGAL_CONSULT로 분류"\n}\n```\n\n응답 규칙:\n- intent: 위 9개 카테고리 중 하나 (대문자_언더스코어 형식)\n- confidence: 0.0~1.0 (0.8 이상이면 매우 확실, 0.5 미만이면 불확실)\n- keywords: 추출된 주요 키워드 목록\n- sub_intents: 복합 질문일 경우 부가적인 의도들\n- is_compound: 복합 질문 여부 (true/false)\n- decomposed_tasks: 복합 질문을 분해한 개별 작업들\n- entities: 추출된 엔티티 정보\n- reasoning: **반드시 CoT 5단계를 거쳐 분석한 과정을 포함** (구조 파악 → 유형 판단 → 복잡도 평가 → 필요 처리 → 최종 검증)\n\n## reasoning 작성 예시:\n"1단계(구조): 상황 설명(10년 거주, 3억→10억) + 해결책 요청 포함.\n2단계(유형): 해결책 요청형 - 단순 정보가 아닌 대응방안 필요.\n3단계(복잡도): 고 - 구체적 수치 비교와 복잡한 상황.\n4단계(처리): 법률 검색 + 상황 분석 + 해결책 제시 필요.\n5단계(검증): LEGAL_CONSULT만으로는 불충분, 종합적 분석 필요 → COMPREHENSIVE 선택"\n\n## 판단 가이드:\n- 여러 의도가 섞여있다면, 가장 주된 의도를 intent에, 나머지를 sub_intents에 기록\n- "그리고", "또한", "함께", "같이" 등의 연결어가 있으면 복합 질문일 가능성 높음\n- 법률 관련 키워드가 있으면 LEGAL_CONSULT 우선\n- 가격/시세 언급이 명확하면 MARKET_INQUIRY\n- 계약서라는 단어와 함께 "작성/만들기"가 있으면 CONTRACT_CREATION\n- 계약서라는 단어와 함께 "검토/확인"이 있으면 CONTRACT_REVIEW\n- 불확실하면 confidence를 낮게 설정하고 UNCLEAR 선택\n- 복합 질문은 is_compound를 true로 설정하고 개별 작업으로 분해\n\n분석할 질문: 임대차보호법 적용 대상은?'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 16:55:34,286 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 16:55:34,286 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 16:55:34,286 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 16:55:34,286 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 16:55:34,286 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 16:55:34,286 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 16:55:37,296 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 07:55:37 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'2811'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'2831'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9986'), (b'x-ratelimit-remaining-tokens', b'197247'), (b'x-ratelimit-reset-requests', b'2m0.869s'), (b'x-ratelimit-reset-tokens', b'825ms'), (b'x-request-id', b'req_f60fd0f80ac540b1b140aa7b8519f700'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b5b834e0dea9b-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 16:55:37,297 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 16:55:37,297 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 16:55:37,305 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 16:55:37,305 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 16:55:37,305 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 16:55:37,305 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 07:55:37 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '2811', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '2831', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9986', 'x-ratelimit-remaining-tokens': '197247', 'x-ratelimit-reset-requests': '2m0.869s', 'x-ratelimit-reset-tokens': '825ms', 'x-request-id': 'req_f60fd0f80ac540b1b140aa7b8519f700', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b5b834e0dea9b-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 16:55:37,305 - openai._base_client - DEBUG - request_id: req_f60fd0f80ac540b1b140aa7b8519f700
2025-10-05 16:55:37,306 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: intent_analysis | Model: gpt-4o-mini-2024-07-18 | Tokens: 3387 (prompt: 3179, completion: 208)
2025-10-05 16:55:37,306 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM Intent Analysis Result: {'intent': 'LEGAL_CONSULT', 'confidence': 0.95, 'keywords': ['임대차보호법', '적용', '대상'], 'sub_intents': [], 'is_compound': False, 'decomposed_tasks': [], 'entities': {'law': '임대차보호법', 'action_verbs': ['적용', '확인']}, 'reasoning': '1단계(구조): 단순 정보 요청으로, 임대차보호법의 적용 대상을 묻고 있음. 2단계(유형): 정보 확인형 - 법률 관련 사실 확인 요청. 3단계(복잡도): 저 - 단일 개념 확인. 4단계(처리): 법률 데이터베이스 검색 필요. 5단계(검증): 단순 정보 제공으로 충분하므로 LEGAL_CONSULT로 분류.'}
2025-10-05 16:55:37,306 - app.service_agent.llm_manager.prompt_manager - DEBUG - Using cached prompt: agent_selection
2025-10-05 16:55:37,306 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-53e8da85-886d-4920-9421-ea9b2165eae5', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 Agent 선택 전문가입니다.\n사용자의 요청에 가장 적합한 Agent/Team을 선택하는 것이 목표입니다.\n\n## 현재 상황\n\n**사용자 질문:** 임대차보호법 적용 대상은?\n**분석된 의도:** 법률상담\n**추출된 키워드:** [\'임대차보호법\', \'적용\', \'대상\']\n\n## 사용 가능한 Agent/Team 정보\n\n{\'search_team\': {\'name\': \'search_team\', \'capabilities\': \'법률 검색, 부동산 시세 조회, 대출 상품 검색\', \'tools\': [\'legal_search\', \'market_data\', \'loan_data\'], \'use_cases\': [\'법률 상담\', \'시세 조회\', \'대출 정보\']}, \'analysis_team\': {\'name\': \'analysis_team\', \'capabilities\': \'데이터 분석, 리스크 평가, 인사이트 생성, 추천\', \'tools\': [\'data_analyzer\', \'risk_evaluator\'], \'use_cases\': [\'시장 분석\', \'리스크 평가\', \'투자 분석\']}, \'document_team\': {\'name\': \'document_team\', \'capabilities\': \'계약서 작성, 문서 생성, 문서 검토\', \'tools\': [\'document_generator\', \'contract_reviewer\'], \'use_cases\': [\'계약서 작성\', \'문서 검토\']}}\n\n## Agent 역할 및 상세 가이드\n\n### 1. search_team (검색 팀)\n- **주요 기능**: 정보 검색 및 데이터 수집\n- **전문 분야**:\n  * 법률 정보 검색 (전세법, 임대차보호법, 부동산 관련 법규)\n  * 부동산 시세 조회 (매매가, 전세가, 월세, 실거래가)\n  * 대출 상품 정보 검색 (금리, 한도, 조건)\n  * 지역 정보 및 인프라 조회\n- **도구**: legal_search, market_data, loan_data\n- **적합한 작업**: 정보 조회, 데이터 수집, 법률 확인, 시세 파악\n- **예시**:\n  * "전세금 5% 인상 가능한가요?"\n  * "강남구 아파트 전세 시세"\n  * "전세자금대출 한도 얼마?"\n\n### 2. analysis_team (분석 팀)\n- **주요 기능**: 데이터 분석 및 평가\n- **전문 분야**:\n  * 시장 동향 분석 (상승률, 하락률, 추세)\n  * 리스크 평가 (계약, 투자 위험도)\n  * 투자 수익률 계산 (ROI, 월세 수익률)\n  * 대출 한도 및 조건 분석 (LTV, DTI, DSR)\n  * 비교 분석 (지역별, 상품별)\n- **도구**: data_analyzer, risk_evaluator, calculator\n- **적합한 작업**: 데이터 분석, 리스크 평가, 계산, 비교, 예측\n- **의존성**: 보통 search_team의 데이터가 필요\n- **예시**:\n  * "이 지역 투자 가치 분석해줘"\n  * "계약 리스크 평가해줘"\n  * "대출 가능 금액 계산해줘"\n\n### 3. document_team (문서 팀)\n- **주요 기능**: 문서 생성 및 관리\n- **전문 분야**:\n  * 계약서 작성 (임대차, 매매, 전세)\n  * 문서 템플릿 관리\n  * 특약사항 생성\n  * 계약서 수정안 작성\n  * 법률 문서 검토\n- **도구**: document_generator, contract_template, contract_reviewer\n- **적합한 작업**: 문서 작성, 계약서 생성, 문서 수정, 검토\n- **예시**:\n  * "임대차계약서 작성해줘"\n  * "특약사항 추가해줘"\n  * "계약서 수정안 만들어줘"\n\n## Chain-of-Thought Agent 선택 프로세스\n\n다음 단계를 **순서대로** 따라 최적의 Agent 조합을 선택하세요:\n\n### 1단계: 질문 요구사항 파악\n- 단순 정보 조회인가? → search_team만 필요\n- 판단/평가가 필요한가? → search + analysis 필요\n- 해결책 제시가 필요한가? → search + analysis 필요\n- 문서 생성이 필요한가? → document_team 추가\n\n### 2단계: 작업 복잡도 판단\n- **단순** (검색만): "~이 뭐야?", "~알려줘" → search_team\n- **중간** (검색+판단): "~괜찮아?", "~적절해?" → search + analysis\n- **복잡** (종합 해결): 구체적 상황 + "어떻게 해야 해?" → search + analysis\n\n### 3단계: 의존성 분석\n- 독립적 작업: 단일 팀으로 처리 가능\n- 순차적 의존: 이전 결과 필요 → 여러 팀 순서대로\n- 병렬 가능: 동시 조회 가능 → coordination: "parallel"\n\n### 4단계: 최종 검증\n- 선택한 팀들로 질문에 완전히 답변 가능한가?\n- 불필요한 팀이 포함되지 않았는가?\n- 순서가 논리적인가? (데이터 흐름 고려)\n\n### 중요 원칙:\n- **법률 키워드만으로 판단하지 말 것**: "법적으로 어떻게 해야 해?" = 법률 검색 + 분석 필요\n- **상황 설명 + 해결책 요청** = 반드시 analysis_team 포함\n- **구체적 수치 비교** (3억→10억 같은) = analysis_team 필요\n\n## 의도별 Agent 매핑 가이드 (기본 가이드 - CoT로 조정 가능)\n\n| 의도 (Intent) | 기본 조합 | 상황별 조정 |\n|--------------|-----------|-------------|\n| LEGAL_CONSULT | ["search_team"] | 해결책 요청시 → + analysis_team |\n| MARKET_INQUIRY | ["search_team"] | 비교/평가시 → + analysis_team |\n| LOAN_CONSULT | ["search_team", "analysis_team"] | 계산 필수 |\n| CONTRACT_CREATION | ["document_team"] | 검토 후 작성 → search + document |\n| CONTRACT_REVIEW | ["search_team", "analysis_team"] | 법률 검토 + 리스크 분석 |\n| COMPREHENSIVE | ["search_team", "analysis_team"] | **항상 분석 포함** |\n| RISK_ANALYSIS | ["analysis_team"] | 법률 근거 필요시 → search + analysis |\n| UNCLEAR | ["search_team", "analysis_team"] | 포괄적 대응 |\n\n**중요**: 위 매핑은 **기본 가이드**일 뿐입니다.\n실제 질문의 내용(CoT 분석 결과)에 따라 조정하세요!\n\n## 복합 질문 처리 예시 (CoT 적용)\n\n### 예시 1: 순차적 처리\n질문: "강남구 시세 확인하고 투자 가치 분석해줘"\n**CoT 분석**:\n1. 요구사항: 시세 조회 + 투자 가치 평가\n2. 복잡도: 중간 (검색 + 분석)\n3. 의존성: 시세 데이터 → 투자 분석 (순차)\n4. 검증: search만으로는 "투자 가치 평가" 불가능\n\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "1단계: 시세 조회+투자 평가 필요. 2단계: 중간 복잡도. 3단계: 순차 의존. 4단계: search로 시세 수집 후 analysis로 투자 가치 평가 필요",\n    "coordination": "sequential"\n}\n```\n\n### 예시 2: 단순 정보 조회\n질문: "전세금 인상률 한도가 얼마야?"\n**CoT 분석**:\n1. 요구사항: 단순 사실 확인\n2. 복잡도: 낮음 (정보 확인형)\n3. 의존성: 없음\n4. 검증: search_team만으로 충분\n\n```json\n{\n    "selected_agents": ["search_team"],\n    "reasoning": "1단계: 단순 정보 조회. 2단계: 저복잡도. 3단계: 독립적. 4단계: 법률 검색만으로 답변 가능",\n    "coordination": "single"\n}\n```\n\n### 예시 3: 해결책 요청 (핵심 예시!)\n질문: "집주인이 전세금 3억을 10억으로 올려달래. 법적으로 어떻게 해야 해?"\n의도: COMPREHENSIVE\n**CoT 분석**:\n1. 요구사항: 상황 설명 + 해결책 요청\n2. 복잡도: 높음 (구체적 상황 + 수치 비교)\n3. 의존성: 법률 확인 → 상황 분석 → 해결책 제시\n4. 검증: "법적으로"만 보고 search만 선택하면 불충분! 해결책 제시 필요\n\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "1단계: 법률 + 상황 분석 + 해결책 필요. 2단계: 고복잡도(3억→10억 비정상). 3단계: 순차(법률 확인 후 타당성 분석). 4단계: \'어떻게 해야\' = 단순 법률 조회 아님, 분석 필수",\n    "coordination": "sequential",\n    "confidence": 0.95\n}\n```\n\n## 응답 형식 (JSON)\n\n```json\n{\n    "selected_agents": ["선택된 agent/team 목록"],\n    "reasoning": "선택 이유를 구체적으로 설명. 각 Agent의 역할과 처리 순서 포함",\n    "coordination": "single/sequential/parallel/pipeline",\n    "dependencies": {"agent2": ["agent1"]},\n    "estimated_time": 30,\n    "confidence": 0.9\n}\n```\n\n## 선택 가이드라인\n\n1. **최소 Agent 원칙**: 가능한 적은 수의 Agent로 처리\n2. **전문성 우선**: 해당 작업에 가장 전문적인 Agent 선택\n3. **효율성 고려**: 병렬 처리 가능한 경우 명시\n4. **의존성 관리**: 데이터 흐름을 고려한 순서 지정\n5. **폴백 전략**: 불확실한 경우 ["search_team", "analysis_team"] 조합\n\n## 주의사항\n\n- selected_agents는 반드시 배열 형태\n- Agent 이름은 정확히: "search_team", "analysis_team", "document_team"\n- 최소 1개, 최대 3개 선택\n- 순서는 실행 우선순위 (앞에 있을수록 먼저 실행)\n- reasoning은 상세하고 논리적으로 작성\n- coordination 필드로 실행 방식 명시\n- 복합 질문의 경우 의존성 관계 명확히 표시'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 16:55:37,307 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 16:55:37,307 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 16:55:37,307 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 16:55:37,307 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 16:55:37,307 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 16:55:37,307 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 16:55:40,984 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 07:55:40 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'3466'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'3499'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9985'), (b'x-ratelimit-remaining-tokens', b'197891'), (b'x-ratelimit-reset-requests', b'2m6.482s'), (b'x-ratelimit-reset-tokens', b'632ms'), (b'x-request-id', b'req_5089f08b8c96429fb701f898453bcb9f'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b5b962836ea9b-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 16:55:40,984 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 16:55:40,984 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 16:55:40,992 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 16:55:40,992 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 16:55:40,992 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 16:55:40,992 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 07:55:40 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '3466', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '3499', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9985', 'x-ratelimit-remaining-tokens': '197891', 'x-ratelimit-reset-requests': '2m6.482s', 'x-ratelimit-reset-tokens': '632ms', 'x-request-id': 'req_5089f08b8c96429fb701f898453bcb9f', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b5b962836ea9b-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 16:55:40,992 - openai._base_client - DEBUG - request_id: req_5089f08b8c96429fb701f898453bcb9f
2025-10-05 16:55:40,993 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: agent_selection | Model: gpt-4o-mini-2024-07-18 | Tokens: 2522 (prompt: 2358, completion: 164)
2025-10-05 16:55:40,993 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM agent selection reasoning: 1단계: 임대차보호법의 적용 대상에 대한 법률 정보 검색이 필요하고, 이와 관련된 상황 분석이 필요합니다. 2단계: 법률 상담이므로 중간 복잡도로 판단됩니다. 3단계: 법률 정보를 검색한 후, 그에 대한 분석이 필요하므로 순차적 의존성이 있습니다. 4단계: 단순 법률 검색만으로는 충분하지 않으며, 분석이 필수적입니다.
2025-10-05 16:55:40,993 - app.service_agent.cognitive_agents.planning_agent - INFO - ✅ Primary LLM selected agents: ['search_team', 'analysis_team']
2025-10-05 16:55:40,993 - __main__ - INFO -   의도: 법률상담
2025-10-05 16:55:40,993 - __main__ - INFO -   신뢰도: 0.95
2025-10-05 16:55:40,993 - __main__ - INFO -   추천 Agent: ['search_team', 'analysis_team']
2025-10-05 16:55:40,993 - __main__ - INFO - 
[Step 2] Query Decomposition...
2025-10-05 16:55:40,993 - app.service_agent.cognitive_agents.query_decomposer - INFO - Decomposing query: 임대차보호법 적용 대상은?...
2025-10-05 16:55:40,993 - app.service_agent.cognitive_agents.query_decomposer - INFO - Query is simple, no decomposition needed
2025-10-05 16:55:40,993 - __main__ - INFO -   복합 질문: False
2025-10-05 16:55:40,993 - __main__ - INFO -   작업 수: 1
2025-10-05 16:55:40,993 - __main__ - INFO -   실행 모드: sequential
2025-10-05 16:55:40,993 - __main__ - INFO - 
[Step 3] Execution Plan 생성...
2025-10-05 16:55:40,993 - app.service_agent.cognitive_agents.planning_agent - INFO - Creating execution plan for intent: 법률상담
2025-10-05 16:55:40,993 - app.service_agent.cognitive_agents.planning_agent - WARNING - AgentRegistry is empty, using default teams
2025-10-05 16:55:40,993 - app.service_agent.cognitive_agents.planning_agent - DEBUG - Suggested agents: ['search_team', 'analysis_team']
2025-10-05 16:55:40,993 - app.service_agent.cognitive_agents.planning_agent - DEBUG - Available agents: ['search_team', 'analysis_team', 'document_team']
2025-10-05 16:55:40,993 - app.service_agent.cognitive_agents.planning_agent - INFO - Selected agents/teams for execution: ['search_team', 'analysis_team']
2025-10-05 16:55:40,993 - __main__ - INFO -   전략: sequential
2025-10-05 16:55:40,993 - __main__ - INFO -   단계 수: 2
2025-10-05 16:55:40,993 - __main__ - INFO - 
✓ 테스트 성공 (소요시간: 6.71초)
2025-10-05 16:55:40,993 - __main__ - INFO - 
================================================================================
2025-10-05 16:55:40,993 - __main__ - INFO - [12] 단일 질문 테스트: S012
2025-10-05 16:55:40,993 - __main__ - INFO - 질문: 마포구 오피스텔 전세 시세는?
2025-10-05 16:55:40,993 - __main__ - INFO - ================================================================================
2025-10-05 16:55:40,993 - __main__ - INFO - 
[Step 1] Intent 분석...
2025-10-05 16:55:40,993 - app.service_agent.cognitive_agents.planning_agent - INFO - Analyzing intent for query: 마포구 오피스텔 전세 시세는?...
2025-10-05 16:55:40,993 - app.service_agent.llm_manager.prompt_manager - DEBUG - Using cached prompt: intent_analysis
2025-10-05 16:55:40,994 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-693e3347-8f54-4133-8369-a15e6c84d718', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 의도 분석 전문가입니다.\n사용자의 질문을 정확히 이해하고, 어떤 종류의 도움이 필요한지 분류해야 합니다.\n\n## Chain-of-Thought 분석 프로세스\n\n질문을 분석할 때 다음 단계를 **순서대로** 따르세요:\n\n### 1단계: 질문 구조 파악\n- 단순 정보 요청인가? (예: "~이 뭐야?", "~알려줘")\n- 상황 설명이 포함되어 있는가? (배경, 현재 상태)\n- 구체적 수치나 데이터가 있는가? (금액, 비율, 기간 등)\n- 문제 해결을 요구하는가? (예: "어떻게 해야 해?", "방법 알려줘")\n\n### 2단계: 요청 유형 판단\n- **정보 확인형**: 사실, 개념, 규정 확인 → 검색만으로 충분\n- **평가/판단형**: "괜찮아?", "적절해?", "문제있어?" → 검색 + 분석 필요\n- **해결책 요청형**: "어떻게?", "방법?", "대처?" → 검색 + 분석 + 제안 필요\n- **비교/선택형**: "A vs B", "어느게 나아?" → 검색 + 분석(비교) 필요\n\n### 3단계: 복잡도 평가\n- **저**: 단일 개념/사실 확인 (예: "전세금 인상률 한도?")\n- **중**: 특정 상황 + 판단 (예: "3억을 5억으로 올려달래. 가능해?")\n- **고**: 복잡한 상황 + 여러 조건 + 해결책 (예: "10년 거주, 3억→10억 요구. 어떻게 해야 해?")\n\n### 4단계: 필요한 처리 결정\n- **검색만**: 정보 확인형 + 저복잡도\n- **검색+분석**: 평가/판단형 OR 중복잡도 OR 수치 비교 포함\n- **종합처리**: 해결책 요청형 OR 고복잡도 OR 여러 조건 동시 고려\n\n### 5단계: 최종 검증\n- 선택한 의도로 사용자 질문에 완전히 답변 가능한가?\n- 단순 정보 제공으로 끝나는가, 아니면 추가 분석/판단이 필요한가?\n- 상황 설명이 있으면서 "해결", "방법", "어떻게" 등이 있으면 → COMPREHENSIVE 고려\n\n## 중요: 복합 질문 처리\n복합적인 질문(여러 의도가 섞인 질문)의 경우, 가장 핵심적인 의도를 파악하되,\nsub_intents 필드에 부가적인 의도들도 함께 기록해주세요.\n\n**특히 주의**:\n- 법률 키워드가 있어도, "해결방법", "어떻게 해야" 같은 표현이 있으면 단순 LEGAL_CONSULT가 아닐 수 있음\n- 구체적 상황(금액, 기간 등) + 해결책 요구 = COMPREHENSIVE 또는 복합 의도로 분류\n\n## 분류 카테고리 설명:\n\n1. **LEGAL_CONSULT (법률상담)**\n   - 설명: 부동산 관련 법률, 권리, 의무에 대한 질문\n   - 예시:\n     * 단순: "전세금 5% 인상이 가능한가요?", "임대차계약 갱신 거부할 수 있나요?"\n     * 복합: "전세금 인상 가능한지 확인하고 법적 근거도 알려주세요"\n   - 키워드: 법, 전세, 임대, 보증금, 계약, 권리, 의무, 갱신, 임차인, 임대인, 법률, 규정, 조항\n   - 필요한 처리: 법률 데이터베이스 검색, 관련 법조항 찾기\n\n2. **MARKET_INQUIRY (시세조회)**\n   - 설명: 부동산 시장 가격, 시세, 거래 동향에 대한 질문\n   - 예시:\n     * 단순: "강남구 아파트 전세 시세 알려주세요", "서초동 매매가 얼마나 올랐나요?"\n     * 복합: "강남구 시세 확인하고 대출 가능 금액도 계산해줘"\n   - 키워드: 시세, 가격, 매매가, 전세가, 월세, 시장, 동향, 평균, 지역명, 상승률, 하락률\n   - 필요한 처리: 부동산 시세 데이터 조회, 지역별 가격 분석\n\n3. **LOAN_CONSULT (대출상담)**\n   - 설명: 주택담보대출, 전세자금대출 등 금융 관련 질문\n   - 예시:\n     * 단순: "전세자금대출 한도가 얼마인가요?", "LTV가 뭔가요?"\n     * 복합: "대출 한도 확인하고 금리 비교도 해주세요"\n   - 키워드: 대출, 금리, 한도, 조건, 상환, LTV, DTI, DSR, 담보, 금융, 은행\n   - 필요한 처리: 대출 상품 조회, 금리 정보 검색, 한도 계산\n\n4. **CONTRACT_CREATION (계약서작성)**\n   - 설명: 새로운 계약서나 문서를 작성해달라는 요청\n   - 예시:\n     * 단순: "임대차계약서 작성해주세요", "전세계약서 초안 만들어주세요"\n     * 복합: "계약서 작성하고 주의사항도 검토해주세요"\n   - 키워드: 작성, 만들, 생성, 초안, 계약서, 문서, 양식\n   - 필요한 처리: 문서 생성 에이전트 호출, 템플릿 기반 작성\n\n5. **CONTRACT_REVIEW (계약서검토)**\n   - 설명: 기존 계약서나 문서를 검토해달라는 요청\n   - 예시:\n     * 단순: "이 계약서 검토해주세요", "특약사항 문제없나요?"\n     * 복합: "계약서 검토하고 수정사항도 제안해주세요"\n   - 키워드: 검토, 확인, 점검, 리뷰, 분석해, 살펴봐, 체크\n   - 필요한 처리: 문서 분석, 위험 요소 식별, 개선사항 제안\n\n6. **COMPREHENSIVE (종합분석)**\n   - 설명: 여러 측면을 종합적으로 분석해달라는 요청, 또는 복잡한 상황에 대한 해결책 요청\n   - 예시:\n     * 단순: "이 물건 전체적으로 분석해주세요"\n     * 복합: "시세, 법률, 대출 모두 검토해서 종합 의견 주세요"\n     * 해결형: "10년 거주했는데 전세금 3억을 10억으로 올려달래. 어떻게 해야 해?"\n     * 상황+해결: "집주인이 계약 갱신 거부했어. 법적으로 어떻게 대응해야 할까?"\n   - 키워드: 종합, 전체, 모든, 전반적, 종합적, 평가, 분석, 어떻게, 방법, 해결, 대처\n   - 패턴: 구체적 상황 설명 + "어떻게/방법/해결" 요청\n   - 필요한 처리: 다중 데이터 소스 통합 분석, 상황 평가, 해결책 제시\n\n7. **RISK_ANALYSIS (리스크분석)**\n   - 설명: 위험 요소나 주의사항에 대한 질문\n   - 예시:\n     * 단순: "이 계약 위험한가요?", "주의할 점 알려주세요"\n     * 복합: "리스크 분석하고 대안도 제시해주세요"\n   - 키워드: 위험, 리스크, 주의, 문제점, 조심, 걱정, 우려\n   - 필요한 처리: 위험 요소 분석, 주의사항 추출\n\n8. **UNCLEAR (불분명)**\n   - 설명: 의도를 명확히 파악하기 어려운 질문\n   - 예시: "이거 좀 봐주세요", "어떻게 해야 할까요?", "도와주세요"\n   - 처리: 추가 질문으로 의도 명확화 필요\n\n9. **IRRELEVANT (무관)**\n   - 설명: 부동산과 전혀 관련 없는 질문\n   - 예시: "날씨 어때?", "저녁 뭐 먹지?", "주식 추천해줘"\n   - 처리: 부동산 관련 질문을 유도\n\n## 복합 질문 예시와 분석 (CoT 적용):\n\n### 예시 1: "강남구 아파트 시세 알려주고 전세자금대출 가능한지도 확인해줘"\n**CoT 분석**:\n1. 구조: 두 개의 요청 ("시세" + "대출")\n2. 유형: 정보 확인형 (둘 다)\n3. 복잡도: 중 (두 가지 독립적 조회)\n4. 필요 처리: 검색 + 계산/분석\n\n**결론**:\n- 주 의도: MARKET_INQUIRY (시세 조회가 먼저 필요)\n- 부가 의도: LOAN_CONSULT (대출 확인)\n- 분해: ["강남구 아파트 시세 조회", "전세자금대출 가능 여부 확인"]\n\n### 예시 2: "이 계약서 검토해서 위험한 부분 있는지 알려주고 수정 제안도 해줘"\n**CoT 분석**:\n1. 구조: 검토 + 위험 평가 + 수정안\n2. 유형: 평가/판단형 + 해결책 요청형\n3. 복잡도: 고 (3단계 처리)\n4. 필요 처리: 검토 + 분석 + 문서 생성\n\n**결론**:\n- 주 의도: CONTRACT_REVIEW (계약서 검토)\n- 부가 의도: RISK_ANALYSIS (위험 분석)\n- 분해: ["계약서 전체 검토", "위험 요소 식별", "수정사항 제안"]\n\n### 예시 3: "집주인이 짜증나, 10년 살았는데 전세금 3억을 10억으로 올려달래. 법적으로 해결방법 알려줘"\n**CoT 분석**:\n1. 구조: 상황 설명 (10년 거주, 3억→10억) + 해결책 요청\n2. 유형: 해결책 요청형 (단순 정보 X)\n3. 복잡도: 고 (구체적 상황 + 수치 비교 + 법률 + 대응방안)\n4. 필요 처리: 법률 검색 + 상황 분석 + 해결책 제시\n\n**결론**:\n- 주 의도: COMPREHENSIVE (복잡한 상황에 대한 종합 해결)\n- 부가 의도: LEGAL_CONSULT, RISK_ANALYSIS\n- 분해: ["전세금 인상 한도 법률 조회", "3억→10억 인상의 타당성 분석", "구체적 대응 방안 제시"]\n- **이유**: "법적으로"라는 키워드가 있지만, 단순 법률 확인이 아니라 구체적 상황에 대한 해결책을 요구하므로 COMPREHENSIVE\n\n### 예시 4: "전세금 인상률 상한이 얼마야?"\n**CoT 분석**:\n1. 구조: 단순 사실 확인\n2. 유형: 정보 확인형\n3. 복잡도: 저 (단일 개념)\n4. 필요 처리: 검색만\n\n**결론**:\n- 주 의도: LEGAL_CONSULT (법률 정보 조회)\n- 부가 의도: 없음\n- 분해: 필요 없음\n\n## 응답 형식 (JSON 형식으로 응답):\n\n```json\n{\n    "intent": "LEGAL_CONSULT",\n    "confidence": 0.9,\n    "keywords": ["전세금", "인상", "제한"],\n    "sub_intents": [],\n    "is_compound": false,\n    "decomposed_tasks": [],\n    "entities": {\n        "location": "강남구",\n        "price": "5억",\n        "contract_type": "전세",\n        "date": "2024년",\n        "area": "84㎡",\n        "action_verbs": ["확인", "검토"]\n    },\n    "reasoning": "전세금 인상에 대한 법률 질문이므로 LEGAL_CONSULT로 분류"\n}\n```\n\n응답 규칙:\n- intent: 위 9개 카테고리 중 하나 (대문자_언더스코어 형식)\n- confidence: 0.0~1.0 (0.8 이상이면 매우 확실, 0.5 미만이면 불확실)\n- keywords: 추출된 주요 키워드 목록\n- sub_intents: 복합 질문일 경우 부가적인 의도들\n- is_compound: 복합 질문 여부 (true/false)\n- decomposed_tasks: 복합 질문을 분해한 개별 작업들\n- entities: 추출된 엔티티 정보\n- reasoning: **반드시 CoT 5단계를 거쳐 분석한 과정을 포함** (구조 파악 → 유형 판단 → 복잡도 평가 → 필요 처리 → 최종 검증)\n\n## reasoning 작성 예시:\n"1단계(구조): 상황 설명(10년 거주, 3억→10억) + 해결책 요청 포함.\n2단계(유형): 해결책 요청형 - 단순 정보가 아닌 대응방안 필요.\n3단계(복잡도): 고 - 구체적 수치 비교와 복잡한 상황.\n4단계(처리): 법률 검색 + 상황 분석 + 해결책 제시 필요.\n5단계(검증): LEGAL_CONSULT만으로는 불충분, 종합적 분석 필요 → COMPREHENSIVE 선택"\n\n## 판단 가이드:\n- 여러 의도가 섞여있다면, 가장 주된 의도를 intent에, 나머지를 sub_intents에 기록\n- "그리고", "또한", "함께", "같이" 등의 연결어가 있으면 복합 질문일 가능성 높음\n- 법률 관련 키워드가 있으면 LEGAL_CONSULT 우선\n- 가격/시세 언급이 명확하면 MARKET_INQUIRY\n- 계약서라는 단어와 함께 "작성/만들기"가 있으면 CONTRACT_CREATION\n- 계약서라는 단어와 함께 "검토/확인"이 있으면 CONTRACT_REVIEW\n- 불확실하면 confidence를 낮게 설정하고 UNCLEAR 선택\n- 복합 질문은 is_compound를 true로 설정하고 개별 작업으로 분해\n\n분석할 질문: 마포구 오피스텔 전세 시세는?'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 16:55:40,994 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 16:55:40,994 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 16:55:40,994 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 16:55:40,994 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 16:55:40,995 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 16:55:40,995 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 16:55:43,539 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 07:55:43 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'2347'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'2368'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9984'), (b'x-ratelimit-remaining-tokens', b'197246'), (b'x-ratelimit-reset-requests', b'2m11.439s'), (b'x-ratelimit-reset-tokens', b'826ms'), (b'x-request-id', b'req_84e40465974e47fabb93df23bde91062'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b5bad3a28ea9b-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 16:55:43,540 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 16:55:43,540 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 16:55:43,544 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 16:55:43,544 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 16:55:43,544 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 16:55:43,544 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 07:55:43 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '2347', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '2368', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9984', 'x-ratelimit-remaining-tokens': '197246', 'x-ratelimit-reset-requests': '2m11.439s', 'x-ratelimit-reset-tokens': '826ms', 'x-request-id': 'req_84e40465974e47fabb93df23bde91062', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b5bad3a28ea9b-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 16:55:43,545 - openai._base_client - DEBUG - request_id: req_84e40465974e47fabb93df23bde91062
2025-10-05 16:55:43,545 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: intent_analysis | Model: gpt-4o-mini-2024-07-18 | Tokens: 3386 (prompt: 3182, completion: 204)
2025-10-05 16:55:43,545 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM Intent Analysis Result: {'intent': 'MARKET_INQUIRY', 'confidence': 0.95, 'keywords': ['마포구', '오피스텔', '전세', '시세'], 'sub_intents': [], 'is_compound': False, 'decomposed_tasks': [], 'entities': {'location': '마포구', 'contract_type': '전세', 'property_type': '오피스텔'}, 'reasoning': "1단계(구조): 단순 정보 요청으로 '전세 시세'에 대한 질문. 2단계(유형): 정보 확인형 - 시세에 대한 사실 확인. 3단계(복잡도): 저 - 단일 개념 확인. 4단계(처리): 검색만으로 충분. 5단계(검증): 단순 시세 조회이므로 MARKET_INQUIRY로 분류."}
2025-10-05 16:55:43,545 - app.service_agent.llm_manager.prompt_manager - DEBUG - Using cached prompt: agent_selection
2025-10-05 16:55:43,546 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-37538e77-b1d2-47eb-905c-c85d4c412c4e', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 Agent 선택 전문가입니다.\n사용자의 요청에 가장 적합한 Agent/Team을 선택하는 것이 목표입니다.\n\n## 현재 상황\n\n**사용자 질문:** 마포구 오피스텔 전세 시세는?\n**분석된 의도:** 시세조회\n**추출된 키워드:** [\'마포구\', \'오피스텔\', \'전세\', \'시세\']\n\n## 사용 가능한 Agent/Team 정보\n\n{\'search_team\': {\'name\': \'search_team\', \'capabilities\': \'법률 검색, 부동산 시세 조회, 대출 상품 검색\', \'tools\': [\'legal_search\', \'market_data\', \'loan_data\'], \'use_cases\': [\'법률 상담\', \'시세 조회\', \'대출 정보\']}, \'analysis_team\': {\'name\': \'analysis_team\', \'capabilities\': \'데이터 분석, 리스크 평가, 인사이트 생성, 추천\', \'tools\': [\'data_analyzer\', \'risk_evaluator\'], \'use_cases\': [\'시장 분석\', \'리스크 평가\', \'투자 분석\']}, \'document_team\': {\'name\': \'document_team\', \'capabilities\': \'계약서 작성, 문서 생성, 문서 검토\', \'tools\': [\'document_generator\', \'contract_reviewer\'], \'use_cases\': [\'계약서 작성\', \'문서 검토\']}}\n\n## Agent 역할 및 상세 가이드\n\n### 1. search_team (검색 팀)\n- **주요 기능**: 정보 검색 및 데이터 수집\n- **전문 분야**:\n  * 법률 정보 검색 (전세법, 임대차보호법, 부동산 관련 법규)\n  * 부동산 시세 조회 (매매가, 전세가, 월세, 실거래가)\n  * 대출 상품 정보 검색 (금리, 한도, 조건)\n  * 지역 정보 및 인프라 조회\n- **도구**: legal_search, market_data, loan_data\n- **적합한 작업**: 정보 조회, 데이터 수집, 법률 확인, 시세 파악\n- **예시**:\n  * "전세금 5% 인상 가능한가요?"\n  * "강남구 아파트 전세 시세"\n  * "전세자금대출 한도 얼마?"\n\n### 2. analysis_team (분석 팀)\n- **주요 기능**: 데이터 분석 및 평가\n- **전문 분야**:\n  * 시장 동향 분석 (상승률, 하락률, 추세)\n  * 리스크 평가 (계약, 투자 위험도)\n  * 투자 수익률 계산 (ROI, 월세 수익률)\n  * 대출 한도 및 조건 분석 (LTV, DTI, DSR)\n  * 비교 분석 (지역별, 상품별)\n- **도구**: data_analyzer, risk_evaluator, calculator\n- **적합한 작업**: 데이터 분석, 리스크 평가, 계산, 비교, 예측\n- **의존성**: 보통 search_team의 데이터가 필요\n- **예시**:\n  * "이 지역 투자 가치 분석해줘"\n  * "계약 리스크 평가해줘"\n  * "대출 가능 금액 계산해줘"\n\n### 3. document_team (문서 팀)\n- **주요 기능**: 문서 생성 및 관리\n- **전문 분야**:\n  * 계약서 작성 (임대차, 매매, 전세)\n  * 문서 템플릿 관리\n  * 특약사항 생성\n  * 계약서 수정안 작성\n  * 법률 문서 검토\n- **도구**: document_generator, contract_template, contract_reviewer\n- **적합한 작업**: 문서 작성, 계약서 생성, 문서 수정, 검토\n- **예시**:\n  * "임대차계약서 작성해줘"\n  * "특약사항 추가해줘"\n  * "계약서 수정안 만들어줘"\n\n## Chain-of-Thought Agent 선택 프로세스\n\n다음 단계를 **순서대로** 따라 최적의 Agent 조합을 선택하세요:\n\n### 1단계: 질문 요구사항 파악\n- 단순 정보 조회인가? → search_team만 필요\n- 판단/평가가 필요한가? → search + analysis 필요\n- 해결책 제시가 필요한가? → search + analysis 필요\n- 문서 생성이 필요한가? → document_team 추가\n\n### 2단계: 작업 복잡도 판단\n- **단순** (검색만): "~이 뭐야?", "~알려줘" → search_team\n- **중간** (검색+판단): "~괜찮아?", "~적절해?" → search + analysis\n- **복잡** (종합 해결): 구체적 상황 + "어떻게 해야 해?" → search + analysis\n\n### 3단계: 의존성 분석\n- 독립적 작업: 단일 팀으로 처리 가능\n- 순차적 의존: 이전 결과 필요 → 여러 팀 순서대로\n- 병렬 가능: 동시 조회 가능 → coordination: "parallel"\n\n### 4단계: 최종 검증\n- 선택한 팀들로 질문에 완전히 답변 가능한가?\n- 불필요한 팀이 포함되지 않았는가?\n- 순서가 논리적인가? (데이터 흐름 고려)\n\n### 중요 원칙:\n- **법률 키워드만으로 판단하지 말 것**: "법적으로 어떻게 해야 해?" = 법률 검색 + 분석 필요\n- **상황 설명 + 해결책 요청** = 반드시 analysis_team 포함\n- **구체적 수치 비교** (3억→10억 같은) = analysis_team 필요\n\n## 의도별 Agent 매핑 가이드 (기본 가이드 - CoT로 조정 가능)\n\n| 의도 (Intent) | 기본 조합 | 상황별 조정 |\n|--------------|-----------|-------------|\n| LEGAL_CONSULT | ["search_team"] | 해결책 요청시 → + analysis_team |\n| MARKET_INQUIRY | ["search_team"] | 비교/평가시 → + analysis_team |\n| LOAN_CONSULT | ["search_team", "analysis_team"] | 계산 필수 |\n| CONTRACT_CREATION | ["document_team"] | 검토 후 작성 → search + document |\n| CONTRACT_REVIEW | ["search_team", "analysis_team"] | 법률 검토 + 리스크 분석 |\n| COMPREHENSIVE | ["search_team", "analysis_team"] | **항상 분석 포함** |\n| RISK_ANALYSIS | ["analysis_team"] | 법률 근거 필요시 → search + analysis |\n| UNCLEAR | ["search_team", "analysis_team"] | 포괄적 대응 |\n\n**중요**: 위 매핑은 **기본 가이드**일 뿐입니다.\n실제 질문의 내용(CoT 분석 결과)에 따라 조정하세요!\n\n## 복합 질문 처리 예시 (CoT 적용)\n\n### 예시 1: 순차적 처리\n질문: "강남구 시세 확인하고 투자 가치 분석해줘"\n**CoT 분석**:\n1. 요구사항: 시세 조회 + 투자 가치 평가\n2. 복잡도: 중간 (검색 + 분석)\n3. 의존성: 시세 데이터 → 투자 분석 (순차)\n4. 검증: search만으로는 "투자 가치 평가" 불가능\n\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "1단계: 시세 조회+투자 평가 필요. 2단계: 중간 복잡도. 3단계: 순차 의존. 4단계: search로 시세 수집 후 analysis로 투자 가치 평가 필요",\n    "coordination": "sequential"\n}\n```\n\n### 예시 2: 단순 정보 조회\n질문: "전세금 인상률 한도가 얼마야?"\n**CoT 분석**:\n1. 요구사항: 단순 사실 확인\n2. 복잡도: 낮음 (정보 확인형)\n3. 의존성: 없음\n4. 검증: search_team만으로 충분\n\n```json\n{\n    "selected_agents": ["search_team"],\n    "reasoning": "1단계: 단순 정보 조회. 2단계: 저복잡도. 3단계: 독립적. 4단계: 법률 검색만으로 답변 가능",\n    "coordination": "single"\n}\n```\n\n### 예시 3: 해결책 요청 (핵심 예시!)\n질문: "집주인이 전세금 3억을 10억으로 올려달래. 법적으로 어떻게 해야 해?"\n의도: COMPREHENSIVE\n**CoT 분석**:\n1. 요구사항: 상황 설명 + 해결책 요청\n2. 복잡도: 높음 (구체적 상황 + 수치 비교)\n3. 의존성: 법률 확인 → 상황 분석 → 해결책 제시\n4. 검증: "법적으로"만 보고 search만 선택하면 불충분! 해결책 제시 필요\n\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "1단계: 법률 + 상황 분석 + 해결책 필요. 2단계: 고복잡도(3억→10억 비정상). 3단계: 순차(법률 확인 후 타당성 분석). 4단계: \'어떻게 해야\' = 단순 법률 조회 아님, 분석 필수",\n    "coordination": "sequential",\n    "confidence": 0.95\n}\n```\n\n## 응답 형식 (JSON)\n\n```json\n{\n    "selected_agents": ["선택된 agent/team 목록"],\n    "reasoning": "선택 이유를 구체적으로 설명. 각 Agent의 역할과 처리 순서 포함",\n    "coordination": "single/sequential/parallel/pipeline",\n    "dependencies": {"agent2": ["agent1"]},\n    "estimated_time": 30,\n    "confidence": 0.9\n}\n```\n\n## 선택 가이드라인\n\n1. **최소 Agent 원칙**: 가능한 적은 수의 Agent로 처리\n2. **전문성 우선**: 해당 작업에 가장 전문적인 Agent 선택\n3. **효율성 고려**: 병렬 처리 가능한 경우 명시\n4. **의존성 관리**: 데이터 흐름을 고려한 순서 지정\n5. **폴백 전략**: 불확실한 경우 ["search_team", "analysis_team"] 조합\n\n## 주의사항\n\n- selected_agents는 반드시 배열 형태\n- Agent 이름은 정확히: "search_team", "analysis_team", "document_team"\n- 최소 1개, 최대 3개 선택\n- 순서는 실행 우선순위 (앞에 있을수록 먼저 실행)\n- reasoning은 상세하고 논리적으로 작성\n- coordination 필드로 실행 방식 명시\n- 복합 질문의 경우 의존성 관계 명확히 표시'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 16:55:43,546 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 16:55:43,547 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 16:55:43,547 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 16:55:43,547 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 16:55:43,547 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 16:55:43,547 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 16:55:46,957 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 07:55:46 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'3210'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'3232'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9984'), (b'x-ratelimit-remaining-tokens', b'197889'), (b'x-ratelimit-reset-requests', b'2m17.529s'), (b'x-ratelimit-reset-tokens', b'633ms'), (b'x-request-id', b'req_5c4e5a8c1df146ae91154df9ead3d03c'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b5bbd2b2bea9b-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 16:55:46,957 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 16:55:46,957 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 16:55:46,963 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 16:55:46,963 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 16:55:46,963 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 16:55:46,964 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 07:55:46 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '3210', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '3232', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9984', 'x-ratelimit-remaining-tokens': '197889', 'x-ratelimit-reset-requests': '2m17.529s', 'x-ratelimit-reset-tokens': '633ms', 'x-request-id': 'req_5c4e5a8c1df146ae91154df9ead3d03c', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b5bbd2b2bea9b-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 16:55:46,964 - openai._base_client - DEBUG - request_id: req_5c4e5a8c1df146ae91154df9ead3d03c
2025-10-05 16:55:46,964 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: agent_selection | Model: gpt-4o-mini-2024-07-18 | Tokens: 2511 (prompt: 2363, completion: 148)
2025-10-05 16:55:46,964 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM agent selection reasoning: 1단계: 사용자는 마포구 오피스텔 전세 시세를 조회하고자 하므로, 단순한 시세 조회가 필요합니다. 2단계: 이 요청은 단순 정보 조회로 분류되며, 복잡도가 낮습니다. 3단계: 독립적인 작업으로, search_team만으로 충분히 처리 가능합니다. 4단계: search_team을 통해 마포구 오피스텔 전세 시세 정보를 정확히 제공할 수 있습니다.
2025-10-05 16:55:46,964 - app.service_agent.cognitive_agents.planning_agent - INFO - ✅ Primary LLM selected agents: ['search_team']
2025-10-05 16:55:46,964 - __main__ - INFO -   의도: 시세조회
2025-10-05 16:55:46,964 - __main__ - INFO -   신뢰도: 0.95
2025-10-05 16:55:46,964 - __main__ - INFO -   추천 Agent: ['search_team']
2025-10-05 16:55:46,964 - __main__ - INFO - 
[Step 2] Query Decomposition...
2025-10-05 16:55:46,964 - app.service_agent.cognitive_agents.query_decomposer - INFO - Decomposing query: 마포구 오피스텔 전세 시세는?...
2025-10-05 16:55:46,964 - app.service_agent.cognitive_agents.query_decomposer - INFO - Query is simple, no decomposition needed
2025-10-05 16:55:46,965 - __main__ - INFO -   복합 질문: False
2025-10-05 16:55:46,965 - __main__ - INFO -   작업 수: 1
2025-10-05 16:55:46,965 - __main__ - INFO -   실행 모드: sequential
2025-10-05 16:55:46,965 - __main__ - INFO - 
[Step 3] Execution Plan 생성...
2025-10-05 16:55:46,965 - app.service_agent.cognitive_agents.planning_agent - INFO - Creating execution plan for intent: 시세조회
2025-10-05 16:55:46,965 - app.service_agent.cognitive_agents.planning_agent - WARNING - AgentRegistry is empty, using default teams
2025-10-05 16:55:46,965 - app.service_agent.cognitive_agents.planning_agent - DEBUG - Suggested agents: ['search_team']
2025-10-05 16:55:46,965 - app.service_agent.cognitive_agents.planning_agent - DEBUG - Available agents: ['search_team', 'analysis_team', 'document_team']
2025-10-05 16:55:46,965 - app.service_agent.cognitive_agents.planning_agent - INFO - Selected agents/teams for execution: ['search_team']
2025-10-05 16:55:46,965 - __main__ - INFO -   전략: sequential
2025-10-05 16:55:46,965 - __main__ - INFO -   단계 수: 1
2025-10-05 16:55:46,965 - __main__ - INFO - 
✓ 테스트 성공 (소요시간: 5.97초)
2025-10-05 16:55:46,965 - __main__ - INFO - 
================================================================================
2025-10-05 16:55:46,965 - __main__ - INFO - [13] 단일 질문 테스트: S013
2025-10-05 16:55:46,965 - __main__ - INFO - 질문: DSR 규제가 뭔가요?
2025-10-05 16:55:46,965 - __main__ - INFO - ================================================================================
2025-10-05 16:55:46,965 - __main__ - INFO - 
[Step 1] Intent 분석...
2025-10-05 16:55:46,965 - app.service_agent.cognitive_agents.planning_agent - INFO - Analyzing intent for query: DSR 규제가 뭔가요?...
2025-10-05 16:55:46,965 - app.service_agent.llm_manager.prompt_manager - DEBUG - Using cached prompt: intent_analysis
2025-10-05 16:55:46,966 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-c7126cac-81ce-41e9-ade3-8c2827a04afd', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 의도 분석 전문가입니다.\n사용자의 질문을 정확히 이해하고, 어떤 종류의 도움이 필요한지 분류해야 합니다.\n\n## Chain-of-Thought 분석 프로세스\n\n질문을 분석할 때 다음 단계를 **순서대로** 따르세요:\n\n### 1단계: 질문 구조 파악\n- 단순 정보 요청인가? (예: "~이 뭐야?", "~알려줘")\n- 상황 설명이 포함되어 있는가? (배경, 현재 상태)\n- 구체적 수치나 데이터가 있는가? (금액, 비율, 기간 등)\n- 문제 해결을 요구하는가? (예: "어떻게 해야 해?", "방법 알려줘")\n\n### 2단계: 요청 유형 판단\n- **정보 확인형**: 사실, 개념, 규정 확인 → 검색만으로 충분\n- **평가/판단형**: "괜찮아?", "적절해?", "문제있어?" → 검색 + 분석 필요\n- **해결책 요청형**: "어떻게?", "방법?", "대처?" → 검색 + 분석 + 제안 필요\n- **비교/선택형**: "A vs B", "어느게 나아?" → 검색 + 분석(비교) 필요\n\n### 3단계: 복잡도 평가\n- **저**: 단일 개념/사실 확인 (예: "전세금 인상률 한도?")\n- **중**: 특정 상황 + 판단 (예: "3억을 5억으로 올려달래. 가능해?")\n- **고**: 복잡한 상황 + 여러 조건 + 해결책 (예: "10년 거주, 3억→10억 요구. 어떻게 해야 해?")\n\n### 4단계: 필요한 처리 결정\n- **검색만**: 정보 확인형 + 저복잡도\n- **검색+분석**: 평가/판단형 OR 중복잡도 OR 수치 비교 포함\n- **종합처리**: 해결책 요청형 OR 고복잡도 OR 여러 조건 동시 고려\n\n### 5단계: 최종 검증\n- 선택한 의도로 사용자 질문에 완전히 답변 가능한가?\n- 단순 정보 제공으로 끝나는가, 아니면 추가 분석/판단이 필요한가?\n- 상황 설명이 있으면서 "해결", "방법", "어떻게" 등이 있으면 → COMPREHENSIVE 고려\n\n## 중요: 복합 질문 처리\n복합적인 질문(여러 의도가 섞인 질문)의 경우, 가장 핵심적인 의도를 파악하되,\nsub_intents 필드에 부가적인 의도들도 함께 기록해주세요.\n\n**특히 주의**:\n- 법률 키워드가 있어도, "해결방법", "어떻게 해야" 같은 표현이 있으면 단순 LEGAL_CONSULT가 아닐 수 있음\n- 구체적 상황(금액, 기간 등) + 해결책 요구 = COMPREHENSIVE 또는 복합 의도로 분류\n\n## 분류 카테고리 설명:\n\n1. **LEGAL_CONSULT (법률상담)**\n   - 설명: 부동산 관련 법률, 권리, 의무에 대한 질문\n   - 예시:\n     * 단순: "전세금 5% 인상이 가능한가요?", "임대차계약 갱신 거부할 수 있나요?"\n     * 복합: "전세금 인상 가능한지 확인하고 법적 근거도 알려주세요"\n   - 키워드: 법, 전세, 임대, 보증금, 계약, 권리, 의무, 갱신, 임차인, 임대인, 법률, 규정, 조항\n   - 필요한 처리: 법률 데이터베이스 검색, 관련 법조항 찾기\n\n2. **MARKET_INQUIRY (시세조회)**\n   - 설명: 부동산 시장 가격, 시세, 거래 동향에 대한 질문\n   - 예시:\n     * 단순: "강남구 아파트 전세 시세 알려주세요", "서초동 매매가 얼마나 올랐나요?"\n     * 복합: "강남구 시세 확인하고 대출 가능 금액도 계산해줘"\n   - 키워드: 시세, 가격, 매매가, 전세가, 월세, 시장, 동향, 평균, 지역명, 상승률, 하락률\n   - 필요한 처리: 부동산 시세 데이터 조회, 지역별 가격 분석\n\n3. **LOAN_CONSULT (대출상담)**\n   - 설명: 주택담보대출, 전세자금대출 등 금융 관련 질문\n   - 예시:\n     * 단순: "전세자금대출 한도가 얼마인가요?", "LTV가 뭔가요?"\n     * 복합: "대출 한도 확인하고 금리 비교도 해주세요"\n   - 키워드: 대출, 금리, 한도, 조건, 상환, LTV, DTI, DSR, 담보, 금융, 은행\n   - 필요한 처리: 대출 상품 조회, 금리 정보 검색, 한도 계산\n\n4. **CONTRACT_CREATION (계약서작성)**\n   - 설명: 새로운 계약서나 문서를 작성해달라는 요청\n   - 예시:\n     * 단순: "임대차계약서 작성해주세요", "전세계약서 초안 만들어주세요"\n     * 복합: "계약서 작성하고 주의사항도 검토해주세요"\n   - 키워드: 작성, 만들, 생성, 초안, 계약서, 문서, 양식\n   - 필요한 처리: 문서 생성 에이전트 호출, 템플릿 기반 작성\n\n5. **CONTRACT_REVIEW (계약서검토)**\n   - 설명: 기존 계약서나 문서를 검토해달라는 요청\n   - 예시:\n     * 단순: "이 계약서 검토해주세요", "특약사항 문제없나요?"\n     * 복합: "계약서 검토하고 수정사항도 제안해주세요"\n   - 키워드: 검토, 확인, 점검, 리뷰, 분석해, 살펴봐, 체크\n   - 필요한 처리: 문서 분석, 위험 요소 식별, 개선사항 제안\n\n6. **COMPREHENSIVE (종합분석)**\n   - 설명: 여러 측면을 종합적으로 분석해달라는 요청, 또는 복잡한 상황에 대한 해결책 요청\n   - 예시:\n     * 단순: "이 물건 전체적으로 분석해주세요"\n     * 복합: "시세, 법률, 대출 모두 검토해서 종합 의견 주세요"\n     * 해결형: "10년 거주했는데 전세금 3억을 10억으로 올려달래. 어떻게 해야 해?"\n     * 상황+해결: "집주인이 계약 갱신 거부했어. 법적으로 어떻게 대응해야 할까?"\n   - 키워드: 종합, 전체, 모든, 전반적, 종합적, 평가, 분석, 어떻게, 방법, 해결, 대처\n   - 패턴: 구체적 상황 설명 + "어떻게/방법/해결" 요청\n   - 필요한 처리: 다중 데이터 소스 통합 분석, 상황 평가, 해결책 제시\n\n7. **RISK_ANALYSIS (리스크분석)**\n   - 설명: 위험 요소나 주의사항에 대한 질문\n   - 예시:\n     * 단순: "이 계약 위험한가요?", "주의할 점 알려주세요"\n     * 복합: "리스크 분석하고 대안도 제시해주세요"\n   - 키워드: 위험, 리스크, 주의, 문제점, 조심, 걱정, 우려\n   - 필요한 처리: 위험 요소 분석, 주의사항 추출\n\n8. **UNCLEAR (불분명)**\n   - 설명: 의도를 명확히 파악하기 어려운 질문\n   - 예시: "이거 좀 봐주세요", "어떻게 해야 할까요?", "도와주세요"\n   - 처리: 추가 질문으로 의도 명확화 필요\n\n9. **IRRELEVANT (무관)**\n   - 설명: 부동산과 전혀 관련 없는 질문\n   - 예시: "날씨 어때?", "저녁 뭐 먹지?", "주식 추천해줘"\n   - 처리: 부동산 관련 질문을 유도\n\n## 복합 질문 예시와 분석 (CoT 적용):\n\n### 예시 1: "강남구 아파트 시세 알려주고 전세자금대출 가능한지도 확인해줘"\n**CoT 분석**:\n1. 구조: 두 개의 요청 ("시세" + "대출")\n2. 유형: 정보 확인형 (둘 다)\n3. 복잡도: 중 (두 가지 독립적 조회)\n4. 필요 처리: 검색 + 계산/분석\n\n**결론**:\n- 주 의도: MARKET_INQUIRY (시세 조회가 먼저 필요)\n- 부가 의도: LOAN_CONSULT (대출 확인)\n- 분해: ["강남구 아파트 시세 조회", "전세자금대출 가능 여부 확인"]\n\n### 예시 2: "이 계약서 검토해서 위험한 부분 있는지 알려주고 수정 제안도 해줘"\n**CoT 분석**:\n1. 구조: 검토 + 위험 평가 + 수정안\n2. 유형: 평가/판단형 + 해결책 요청형\n3. 복잡도: 고 (3단계 처리)\n4. 필요 처리: 검토 + 분석 + 문서 생성\n\n**결론**:\n- 주 의도: CONTRACT_REVIEW (계약서 검토)\n- 부가 의도: RISK_ANALYSIS (위험 분석)\n- 분해: ["계약서 전체 검토", "위험 요소 식별", "수정사항 제안"]\n\n### 예시 3: "집주인이 짜증나, 10년 살았는데 전세금 3억을 10억으로 올려달래. 법적으로 해결방법 알려줘"\n**CoT 분석**:\n1. 구조: 상황 설명 (10년 거주, 3억→10억) + 해결책 요청\n2. 유형: 해결책 요청형 (단순 정보 X)\n3. 복잡도: 고 (구체적 상황 + 수치 비교 + 법률 + 대응방안)\n4. 필요 처리: 법률 검색 + 상황 분석 + 해결책 제시\n\n**결론**:\n- 주 의도: COMPREHENSIVE (복잡한 상황에 대한 종합 해결)\n- 부가 의도: LEGAL_CONSULT, RISK_ANALYSIS\n- 분해: ["전세금 인상 한도 법률 조회", "3억→10억 인상의 타당성 분석", "구체적 대응 방안 제시"]\n- **이유**: "법적으로"라는 키워드가 있지만, 단순 법률 확인이 아니라 구체적 상황에 대한 해결책을 요구하므로 COMPREHENSIVE\n\n### 예시 4: "전세금 인상률 상한이 얼마야?"\n**CoT 분석**:\n1. 구조: 단순 사실 확인\n2. 유형: 정보 확인형\n3. 복잡도: 저 (단일 개념)\n4. 필요 처리: 검색만\n\n**결론**:\n- 주 의도: LEGAL_CONSULT (법률 정보 조회)\n- 부가 의도: 없음\n- 분해: 필요 없음\n\n## 응답 형식 (JSON 형식으로 응답):\n\n```json\n{\n    "intent": "LEGAL_CONSULT",\n    "confidence": 0.9,\n    "keywords": ["전세금", "인상", "제한"],\n    "sub_intents": [],\n    "is_compound": false,\n    "decomposed_tasks": [],\n    "entities": {\n        "location": "강남구",\n        "price": "5억",\n        "contract_type": "전세",\n        "date": "2024년",\n        "area": "84㎡",\n        "action_verbs": ["확인", "검토"]\n    },\n    "reasoning": "전세금 인상에 대한 법률 질문이므로 LEGAL_CONSULT로 분류"\n}\n```\n\n응답 규칙:\n- intent: 위 9개 카테고리 중 하나 (대문자_언더스코어 형식)\n- confidence: 0.0~1.0 (0.8 이상이면 매우 확실, 0.5 미만이면 불확실)\n- keywords: 추출된 주요 키워드 목록\n- sub_intents: 복합 질문일 경우 부가적인 의도들\n- is_compound: 복합 질문 여부 (true/false)\n- decomposed_tasks: 복합 질문을 분해한 개별 작업들\n- entities: 추출된 엔티티 정보\n- reasoning: **반드시 CoT 5단계를 거쳐 분석한 과정을 포함** (구조 파악 → 유형 판단 → 복잡도 평가 → 필요 처리 → 최종 검증)\n\n## reasoning 작성 예시:\n"1단계(구조): 상황 설명(10년 거주, 3억→10억) + 해결책 요청 포함.\n2단계(유형): 해결책 요청형 - 단순 정보가 아닌 대응방안 필요.\n3단계(복잡도): 고 - 구체적 수치 비교와 복잡한 상황.\n4단계(처리): 법률 검색 + 상황 분석 + 해결책 제시 필요.\n5단계(검증): LEGAL_CONSULT만으로는 불충분, 종합적 분석 필요 → COMPREHENSIVE 선택"\n\n## 판단 가이드:\n- 여러 의도가 섞여있다면, 가장 주된 의도를 intent에, 나머지를 sub_intents에 기록\n- "그리고", "또한", "함께", "같이" 등의 연결어가 있으면 복합 질문일 가능성 높음\n- 법률 관련 키워드가 있으면 LEGAL_CONSULT 우선\n- 가격/시세 언급이 명확하면 MARKET_INQUIRY\n- 계약서라는 단어와 함께 "작성/만들기"가 있으면 CONTRACT_CREATION\n- 계약서라는 단어와 함께 "검토/확인"이 있으면 CONTRACT_REVIEW\n- 불확실하면 confidence를 낮게 설정하고 UNCLEAR 선택\n- 복합 질문은 is_compound를 true로 설정하고 개별 작업으로 분해\n\n분석할 질문: DSR 규제가 뭔가요?'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 16:55:46,966 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 16:55:46,967 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 16:55:46,967 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 16:55:46,967 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 16:55:46,967 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 16:55:46,967 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 16:55:50,668 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 07:55:50 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'3255'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'3521'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9983'), (b'x-ratelimit-remaining-tokens', b'197250'), (b'x-ratelimit-reset-requests', b'2m22.742s'), (b'x-ratelimit-reset-tokens', b'825ms'), (b'x-request-id', b'req_66f0bf8a95f74706aac3a76161474462'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b5bd28b3aea9b-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 16:55:50,668 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 16:55:50,668 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 16:55:50,681 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 16:55:50,681 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 16:55:50,681 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 16:55:50,681 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 07:55:50 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '3255', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '3521', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9983', 'x-ratelimit-remaining-tokens': '197250', 'x-ratelimit-reset-requests': '2m22.742s', 'x-ratelimit-reset-tokens': '825ms', 'x-request-id': 'req_66f0bf8a95f74706aac3a76161474462', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b5bd28b3aea9b-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 16:55:50,681 - openai._base_client - DEBUG - request_id: req_66f0bf8a95f74706aac3a76161474462
2025-10-05 16:55:50,682 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: intent_analysis | Model: gpt-4o-mini-2024-07-18 | Tokens: 3346 (prompt: 3178, completion: 168)
2025-10-05 16:55:50,682 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM Intent Analysis Result: {'intent': 'LOAN_CONSULT', 'confidence': 0.9, 'keywords': ['DSR', '규제'], 'sub_intents': [], 'is_compound': False, 'decomposed_tasks': [], 'entities': {}, 'reasoning': '1단계(구조): 단순 정보 요청으로 DSR 규제에 대한 설명을 요구. 2단계(유형): 정보 확인형 - DSR 규제에 대한 사실 확인. 3단계(복잡도): 저 - 단일 개념 확인. 4단계(처리): 검색만으로 충분. 5단계(검증): DSR 규제에 대한 정보 요청이므로 LOAN_CONSULT로 분류.'}
2025-10-05 16:55:50,682 - app.service_agent.llm_manager.prompt_manager - DEBUG - Using cached prompt: agent_selection
2025-10-05 16:55:50,682 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-bcb888cd-9c3f-42bb-bc11-cfb2bcce9a79', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 Agent 선택 전문가입니다.\n사용자의 요청에 가장 적합한 Agent/Team을 선택하는 것이 목표입니다.\n\n## 현재 상황\n\n**사용자 질문:** DSR 규제가 뭔가요?\n**분석된 의도:** 대출상담\n**추출된 키워드:** [\'DSR\', \'규제\']\n\n## 사용 가능한 Agent/Team 정보\n\n{\'search_team\': {\'name\': \'search_team\', \'capabilities\': \'법률 검색, 부동산 시세 조회, 대출 상품 검색\', \'tools\': [\'legal_search\', \'market_data\', \'loan_data\'], \'use_cases\': [\'법률 상담\', \'시세 조회\', \'대출 정보\']}, \'analysis_team\': {\'name\': \'analysis_team\', \'capabilities\': \'데이터 분석, 리스크 평가, 인사이트 생성, 추천\', \'tools\': [\'data_analyzer\', \'risk_evaluator\'], \'use_cases\': [\'시장 분석\', \'리스크 평가\', \'투자 분석\']}, \'document_team\': {\'name\': \'document_team\', \'capabilities\': \'계약서 작성, 문서 생성, 문서 검토\', \'tools\': [\'document_generator\', \'contract_reviewer\'], \'use_cases\': [\'계약서 작성\', \'문서 검토\']}}\n\n## Agent 역할 및 상세 가이드\n\n### 1. search_team (검색 팀)\n- **주요 기능**: 정보 검색 및 데이터 수집\n- **전문 분야**:\n  * 법률 정보 검색 (전세법, 임대차보호법, 부동산 관련 법규)\n  * 부동산 시세 조회 (매매가, 전세가, 월세, 실거래가)\n  * 대출 상품 정보 검색 (금리, 한도, 조건)\n  * 지역 정보 및 인프라 조회\n- **도구**: legal_search, market_data, loan_data\n- **적합한 작업**: 정보 조회, 데이터 수집, 법률 확인, 시세 파악\n- **예시**:\n  * "전세금 5% 인상 가능한가요?"\n  * "강남구 아파트 전세 시세"\n  * "전세자금대출 한도 얼마?"\n\n### 2. analysis_team (분석 팀)\n- **주요 기능**: 데이터 분석 및 평가\n- **전문 분야**:\n  * 시장 동향 분석 (상승률, 하락률, 추세)\n  * 리스크 평가 (계약, 투자 위험도)\n  * 투자 수익률 계산 (ROI, 월세 수익률)\n  * 대출 한도 및 조건 분석 (LTV, DTI, DSR)\n  * 비교 분석 (지역별, 상품별)\n- **도구**: data_analyzer, risk_evaluator, calculator\n- **적합한 작업**: 데이터 분석, 리스크 평가, 계산, 비교, 예측\n- **의존성**: 보통 search_team의 데이터가 필요\n- **예시**:\n  * "이 지역 투자 가치 분석해줘"\n  * "계약 리스크 평가해줘"\n  * "대출 가능 금액 계산해줘"\n\n### 3. document_team (문서 팀)\n- **주요 기능**: 문서 생성 및 관리\n- **전문 분야**:\n  * 계약서 작성 (임대차, 매매, 전세)\n  * 문서 템플릿 관리\n  * 특약사항 생성\n  * 계약서 수정안 작성\n  * 법률 문서 검토\n- **도구**: document_generator, contract_template, contract_reviewer\n- **적합한 작업**: 문서 작성, 계약서 생성, 문서 수정, 검토\n- **예시**:\n  * "임대차계약서 작성해줘"\n  * "특약사항 추가해줘"\n  * "계약서 수정안 만들어줘"\n\n## Chain-of-Thought Agent 선택 프로세스\n\n다음 단계를 **순서대로** 따라 최적의 Agent 조합을 선택하세요:\n\n### 1단계: 질문 요구사항 파악\n- 단순 정보 조회인가? → search_team만 필요\n- 판단/평가가 필요한가? → search + analysis 필요\n- 해결책 제시가 필요한가? → search + analysis 필요\n- 문서 생성이 필요한가? → document_team 추가\n\n### 2단계: 작업 복잡도 판단\n- **단순** (검색만): "~이 뭐야?", "~알려줘" → search_team\n- **중간** (검색+판단): "~괜찮아?", "~적절해?" → search + analysis\n- **복잡** (종합 해결): 구체적 상황 + "어떻게 해야 해?" → search + analysis\n\n### 3단계: 의존성 분석\n- 독립적 작업: 단일 팀으로 처리 가능\n- 순차적 의존: 이전 결과 필요 → 여러 팀 순서대로\n- 병렬 가능: 동시 조회 가능 → coordination: "parallel"\n\n### 4단계: 최종 검증\n- 선택한 팀들로 질문에 완전히 답변 가능한가?\n- 불필요한 팀이 포함되지 않았는가?\n- 순서가 논리적인가? (데이터 흐름 고려)\n\n### 중요 원칙:\n- **법률 키워드만으로 판단하지 말 것**: "법적으로 어떻게 해야 해?" = 법률 검색 + 분석 필요\n- **상황 설명 + 해결책 요청** = 반드시 analysis_team 포함\n- **구체적 수치 비교** (3억→10억 같은) = analysis_team 필요\n\n## 의도별 Agent 매핑 가이드 (기본 가이드 - CoT로 조정 가능)\n\n| 의도 (Intent) | 기본 조합 | 상황별 조정 |\n|--------------|-----------|-------------|\n| LEGAL_CONSULT | ["search_team"] | 해결책 요청시 → + analysis_team |\n| MARKET_INQUIRY | ["search_team"] | 비교/평가시 → + analysis_team |\n| LOAN_CONSULT | ["search_team", "analysis_team"] | 계산 필수 |\n| CONTRACT_CREATION | ["document_team"] | 검토 후 작성 → search + document |\n| CONTRACT_REVIEW | ["search_team", "analysis_team"] | 법률 검토 + 리스크 분석 |\n| COMPREHENSIVE | ["search_team", "analysis_team"] | **항상 분석 포함** |\n| RISK_ANALYSIS | ["analysis_team"] | 법률 근거 필요시 → search + analysis |\n| UNCLEAR | ["search_team", "analysis_team"] | 포괄적 대응 |\n\n**중요**: 위 매핑은 **기본 가이드**일 뿐입니다.\n실제 질문의 내용(CoT 분석 결과)에 따라 조정하세요!\n\n## 복합 질문 처리 예시 (CoT 적용)\n\n### 예시 1: 순차적 처리\n질문: "강남구 시세 확인하고 투자 가치 분석해줘"\n**CoT 분석**:\n1. 요구사항: 시세 조회 + 투자 가치 평가\n2. 복잡도: 중간 (검색 + 분석)\n3. 의존성: 시세 데이터 → 투자 분석 (순차)\n4. 검증: search만으로는 "투자 가치 평가" 불가능\n\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "1단계: 시세 조회+투자 평가 필요. 2단계: 중간 복잡도. 3단계: 순차 의존. 4단계: search로 시세 수집 후 analysis로 투자 가치 평가 필요",\n    "coordination": "sequential"\n}\n```\n\n### 예시 2: 단순 정보 조회\n질문: "전세금 인상률 한도가 얼마야?"\n**CoT 분석**:\n1. 요구사항: 단순 사실 확인\n2. 복잡도: 낮음 (정보 확인형)\n3. 의존성: 없음\n4. 검증: search_team만으로 충분\n\n```json\n{\n    "selected_agents": ["search_team"],\n    "reasoning": "1단계: 단순 정보 조회. 2단계: 저복잡도. 3단계: 독립적. 4단계: 법률 검색만으로 답변 가능",\n    "coordination": "single"\n}\n```\n\n### 예시 3: 해결책 요청 (핵심 예시!)\n질문: "집주인이 전세금 3억을 10억으로 올려달래. 법적으로 어떻게 해야 해?"\n의도: COMPREHENSIVE\n**CoT 분석**:\n1. 요구사항: 상황 설명 + 해결책 요청\n2. 복잡도: 높음 (구체적 상황 + 수치 비교)\n3. 의존성: 법률 확인 → 상황 분석 → 해결책 제시\n4. 검증: "법적으로"만 보고 search만 선택하면 불충분! 해결책 제시 필요\n\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "1단계: 법률 + 상황 분석 + 해결책 필요. 2단계: 고복잡도(3억→10억 비정상). 3단계: 순차(법률 확인 후 타당성 분석). 4단계: \'어떻게 해야\' = 단순 법률 조회 아님, 분석 필수",\n    "coordination": "sequential",\n    "confidence": 0.95\n}\n```\n\n## 응답 형식 (JSON)\n\n```json\n{\n    "selected_agents": ["선택된 agent/team 목록"],\n    "reasoning": "선택 이유를 구체적으로 설명. 각 Agent의 역할과 처리 순서 포함",\n    "coordination": "single/sequential/parallel/pipeline",\n    "dependencies": {"agent2": ["agent1"]},\n    "estimated_time": 30,\n    "confidence": 0.9\n}\n```\n\n## 선택 가이드라인\n\n1. **최소 Agent 원칙**: 가능한 적은 수의 Agent로 처리\n2. **전문성 우선**: 해당 작업에 가장 전문적인 Agent 선택\n3. **효율성 고려**: 병렬 처리 가능한 경우 명시\n4. **의존성 관리**: 데이터 흐름을 고려한 순서 지정\n5. **폴백 전략**: 불확실한 경우 ["search_team", "analysis_team"] 조합\n\n## 주의사항\n\n- selected_agents는 반드시 배열 형태\n- Agent 이름은 정확히: "search_team", "analysis_team", "document_team"\n- 최소 1개, 최대 3개 선택\n- 순서는 실행 우선순위 (앞에 있을수록 먼저 실행)\n- reasoning은 상세하고 논리적으로 작성\n- coordination 필드로 실행 방식 명시\n- 복합 질문의 경우 의존성 관계 명확히 표시'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 16:55:50,683 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 16:55:50,683 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 16:55:50,683 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 16:55:50,683 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 16:55:50,683 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 16:55:50,683 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 16:55:54,926 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 07:55:54 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'4039'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'4057'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9982'), (b'x-ratelimit-remaining-tokens', b'197901'), (b'x-ratelimit-reset-requests', b'2m27.66s'), (b'x-ratelimit-reset-tokens', b'629ms'), (b'x-request-id', b'req_2c0d378e4c404fd0a38868eeafef5461'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b5be9cf1aea9b-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 16:55:54,926 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 16:55:54,926 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 16:55:54,934 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 16:55:54,934 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 16:55:54,934 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 16:55:54,935 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 07:55:54 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '4039', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '4057', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9982', 'x-ratelimit-remaining-tokens': '197901', 'x-ratelimit-reset-requests': '2m27.66s', 'x-ratelimit-reset-tokens': '629ms', 'x-request-id': 'req_2c0d378e4c404fd0a38868eeafef5461', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b5be9cf1aea9b-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 16:55:54,935 - openai._base_client - DEBUG - request_id: req_2c0d378e4c404fd0a38868eeafef5461
2025-10-05 16:55:54,935 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: agent_selection | Model: gpt-4o-mini-2024-07-18 | Tokens: 2527 (prompt: 2349, completion: 178)
2025-10-05 16:55:54,935 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM agent selection reasoning: 1단계: DSR 규제에 대한 정보 조회와 그에 따른 대출 상담이 필요. 2단계: DSR 규제는 대출과 관련된 법률이므로 단순 정보 조회를 넘어 대출 조건 분석이 필요. 3단계: DSR 규제에 대한 법률 정보 검색 후, 대출 가능성 및 조건 분석이 필요하므로 순차적 의존성이 존재. 4단계: 단순 법률 조회로는 충분하지 않으며, 대출 상담을 위해 분석이 필수적.
2025-10-05 16:55:54,935 - app.service_agent.cognitive_agents.planning_agent - INFO - ✅ Primary LLM selected agents: ['search_team', 'analysis_team']
2025-10-05 16:55:54,935 - __main__ - INFO -   의도: 대출상담
2025-10-05 16:55:54,935 - __main__ - INFO -   신뢰도: 0.90
2025-10-05 16:55:54,935 - __main__ - INFO -   추천 Agent: ['search_team', 'analysis_team']
2025-10-05 16:55:54,935 - __main__ - INFO - 
[Step 2] Query Decomposition...
2025-10-05 16:55:54,935 - app.service_agent.cognitive_agents.query_decomposer - INFO - Decomposing query: DSR 규제가 뭔가요?...
2025-10-05 16:55:54,935 - app.service_agent.cognitive_agents.query_decomposer - INFO - Query is simple, no decomposition needed
2025-10-05 16:55:54,935 - __main__ - INFO -   복합 질문: False
2025-10-05 16:55:54,935 - __main__ - INFO -   작업 수: 1
2025-10-05 16:55:54,935 - __main__ - INFO -   실행 모드: sequential
2025-10-05 16:55:54,935 - __main__ - INFO - 
[Step 3] Execution Plan 생성...
2025-10-05 16:55:54,935 - app.service_agent.cognitive_agents.planning_agent - INFO - Creating execution plan for intent: 대출상담
2025-10-05 16:55:54,935 - app.service_agent.cognitive_agents.planning_agent - WARNING - AgentRegistry is empty, using default teams
2025-10-05 16:55:54,935 - app.service_agent.cognitive_agents.planning_agent - DEBUG - Suggested agents: ['search_team', 'analysis_team']
2025-10-05 16:55:54,935 - app.service_agent.cognitive_agents.planning_agent - DEBUG - Available agents: ['search_team', 'analysis_team', 'document_team']
2025-10-05 16:55:54,935 - app.service_agent.cognitive_agents.planning_agent - INFO - Selected agents/teams for execution: ['search_team', 'analysis_team']
2025-10-05 16:55:54,936 - __main__ - INFO -   전략: sequential
2025-10-05 16:55:54,936 - __main__ - INFO -   단계 수: 2
2025-10-05 16:55:54,936 - __main__ - INFO - 
✓ 테스트 성공 (소요시간: 7.97초)
2025-10-05 16:55:54,936 - __main__ - INFO - 
================================================================================
2025-10-05 16:55:54,936 - __main__ - INFO - [14] 단일 질문 테스트: S014
2025-10-05 16:55:54,936 - __main__ - INFO - 질문: 묵시적 갱신이 뭔가요?
2025-10-05 16:55:54,936 - __main__ - INFO - ================================================================================
2025-10-05 16:55:54,936 - __main__ - INFO - 
[Step 1] Intent 분석...
2025-10-05 16:55:54,936 - app.service_agent.cognitive_agents.planning_agent - INFO - Analyzing intent for query: 묵시적 갱신이 뭔가요?...
2025-10-05 16:55:54,936 - app.service_agent.llm_manager.prompt_manager - DEBUG - Using cached prompt: intent_analysis
2025-10-05 16:55:54,936 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-2201edfa-1492-4c36-a1a7-e42c864a364f', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 의도 분석 전문가입니다.\n사용자의 질문을 정확히 이해하고, 어떤 종류의 도움이 필요한지 분류해야 합니다.\n\n## Chain-of-Thought 분석 프로세스\n\n질문을 분석할 때 다음 단계를 **순서대로** 따르세요:\n\n### 1단계: 질문 구조 파악\n- 단순 정보 요청인가? (예: "~이 뭐야?", "~알려줘")\n- 상황 설명이 포함되어 있는가? (배경, 현재 상태)\n- 구체적 수치나 데이터가 있는가? (금액, 비율, 기간 등)\n- 문제 해결을 요구하는가? (예: "어떻게 해야 해?", "방법 알려줘")\n\n### 2단계: 요청 유형 판단\n- **정보 확인형**: 사실, 개념, 규정 확인 → 검색만으로 충분\n- **평가/판단형**: "괜찮아?", "적절해?", "문제있어?" → 검색 + 분석 필요\n- **해결책 요청형**: "어떻게?", "방법?", "대처?" → 검색 + 분석 + 제안 필요\n- **비교/선택형**: "A vs B", "어느게 나아?" → 검색 + 분석(비교) 필요\n\n### 3단계: 복잡도 평가\n- **저**: 단일 개념/사실 확인 (예: "전세금 인상률 한도?")\n- **중**: 특정 상황 + 판단 (예: "3억을 5억으로 올려달래. 가능해?")\n- **고**: 복잡한 상황 + 여러 조건 + 해결책 (예: "10년 거주, 3억→10억 요구. 어떻게 해야 해?")\n\n### 4단계: 필요한 처리 결정\n- **검색만**: 정보 확인형 + 저복잡도\n- **검색+분석**: 평가/판단형 OR 중복잡도 OR 수치 비교 포함\n- **종합처리**: 해결책 요청형 OR 고복잡도 OR 여러 조건 동시 고려\n\n### 5단계: 최종 검증\n- 선택한 의도로 사용자 질문에 완전히 답변 가능한가?\n- 단순 정보 제공으로 끝나는가, 아니면 추가 분석/판단이 필요한가?\n- 상황 설명이 있으면서 "해결", "방법", "어떻게" 등이 있으면 → COMPREHENSIVE 고려\n\n## 중요: 복합 질문 처리\n복합적인 질문(여러 의도가 섞인 질문)의 경우, 가장 핵심적인 의도를 파악하되,\nsub_intents 필드에 부가적인 의도들도 함께 기록해주세요.\n\n**특히 주의**:\n- 법률 키워드가 있어도, "해결방법", "어떻게 해야" 같은 표현이 있으면 단순 LEGAL_CONSULT가 아닐 수 있음\n- 구체적 상황(금액, 기간 등) + 해결책 요구 = COMPREHENSIVE 또는 복합 의도로 분류\n\n## 분류 카테고리 설명:\n\n1. **LEGAL_CONSULT (법률상담)**\n   - 설명: 부동산 관련 법률, 권리, 의무에 대한 질문\n   - 예시:\n     * 단순: "전세금 5% 인상이 가능한가요?", "임대차계약 갱신 거부할 수 있나요?"\n     * 복합: "전세금 인상 가능한지 확인하고 법적 근거도 알려주세요"\n   - 키워드: 법, 전세, 임대, 보증금, 계약, 권리, 의무, 갱신, 임차인, 임대인, 법률, 규정, 조항\n   - 필요한 처리: 법률 데이터베이스 검색, 관련 법조항 찾기\n\n2. **MARKET_INQUIRY (시세조회)**\n   - 설명: 부동산 시장 가격, 시세, 거래 동향에 대한 질문\n   - 예시:\n     * 단순: "강남구 아파트 전세 시세 알려주세요", "서초동 매매가 얼마나 올랐나요?"\n     * 복합: "강남구 시세 확인하고 대출 가능 금액도 계산해줘"\n   - 키워드: 시세, 가격, 매매가, 전세가, 월세, 시장, 동향, 평균, 지역명, 상승률, 하락률\n   - 필요한 처리: 부동산 시세 데이터 조회, 지역별 가격 분석\n\n3. **LOAN_CONSULT (대출상담)**\n   - 설명: 주택담보대출, 전세자금대출 등 금융 관련 질문\n   - 예시:\n     * 단순: "전세자금대출 한도가 얼마인가요?", "LTV가 뭔가요?"\n     * 복합: "대출 한도 확인하고 금리 비교도 해주세요"\n   - 키워드: 대출, 금리, 한도, 조건, 상환, LTV, DTI, DSR, 담보, 금융, 은행\n   - 필요한 처리: 대출 상품 조회, 금리 정보 검색, 한도 계산\n\n4. **CONTRACT_CREATION (계약서작성)**\n   - 설명: 새로운 계약서나 문서를 작성해달라는 요청\n   - 예시:\n     * 단순: "임대차계약서 작성해주세요", "전세계약서 초안 만들어주세요"\n     * 복합: "계약서 작성하고 주의사항도 검토해주세요"\n   - 키워드: 작성, 만들, 생성, 초안, 계약서, 문서, 양식\n   - 필요한 처리: 문서 생성 에이전트 호출, 템플릿 기반 작성\n\n5. **CONTRACT_REVIEW (계약서검토)**\n   - 설명: 기존 계약서나 문서를 검토해달라는 요청\n   - 예시:\n     * 단순: "이 계약서 검토해주세요", "특약사항 문제없나요?"\n     * 복합: "계약서 검토하고 수정사항도 제안해주세요"\n   - 키워드: 검토, 확인, 점검, 리뷰, 분석해, 살펴봐, 체크\n   - 필요한 처리: 문서 분석, 위험 요소 식별, 개선사항 제안\n\n6. **COMPREHENSIVE (종합분석)**\n   - 설명: 여러 측면을 종합적으로 분석해달라는 요청, 또는 복잡한 상황에 대한 해결책 요청\n   - 예시:\n     * 단순: "이 물건 전체적으로 분석해주세요"\n     * 복합: "시세, 법률, 대출 모두 검토해서 종합 의견 주세요"\n     * 해결형: "10년 거주했는데 전세금 3억을 10억으로 올려달래. 어떻게 해야 해?"\n     * 상황+해결: "집주인이 계약 갱신 거부했어. 법적으로 어떻게 대응해야 할까?"\n   - 키워드: 종합, 전체, 모든, 전반적, 종합적, 평가, 분석, 어떻게, 방법, 해결, 대처\n   - 패턴: 구체적 상황 설명 + "어떻게/방법/해결" 요청\n   - 필요한 처리: 다중 데이터 소스 통합 분석, 상황 평가, 해결책 제시\n\n7. **RISK_ANALYSIS (리스크분석)**\n   - 설명: 위험 요소나 주의사항에 대한 질문\n   - 예시:\n     * 단순: "이 계약 위험한가요?", "주의할 점 알려주세요"\n     * 복합: "리스크 분석하고 대안도 제시해주세요"\n   - 키워드: 위험, 리스크, 주의, 문제점, 조심, 걱정, 우려\n   - 필요한 처리: 위험 요소 분석, 주의사항 추출\n\n8. **UNCLEAR (불분명)**\n   - 설명: 의도를 명확히 파악하기 어려운 질문\n   - 예시: "이거 좀 봐주세요", "어떻게 해야 할까요?", "도와주세요"\n   - 처리: 추가 질문으로 의도 명확화 필요\n\n9. **IRRELEVANT (무관)**\n   - 설명: 부동산과 전혀 관련 없는 질문\n   - 예시: "날씨 어때?", "저녁 뭐 먹지?", "주식 추천해줘"\n   - 처리: 부동산 관련 질문을 유도\n\n## 복합 질문 예시와 분석 (CoT 적용):\n\n### 예시 1: "강남구 아파트 시세 알려주고 전세자금대출 가능한지도 확인해줘"\n**CoT 분석**:\n1. 구조: 두 개의 요청 ("시세" + "대출")\n2. 유형: 정보 확인형 (둘 다)\n3. 복잡도: 중 (두 가지 독립적 조회)\n4. 필요 처리: 검색 + 계산/분석\n\n**결론**:\n- 주 의도: MARKET_INQUIRY (시세 조회가 먼저 필요)\n- 부가 의도: LOAN_CONSULT (대출 확인)\n- 분해: ["강남구 아파트 시세 조회", "전세자금대출 가능 여부 확인"]\n\n### 예시 2: "이 계약서 검토해서 위험한 부분 있는지 알려주고 수정 제안도 해줘"\n**CoT 분석**:\n1. 구조: 검토 + 위험 평가 + 수정안\n2. 유형: 평가/판단형 + 해결책 요청형\n3. 복잡도: 고 (3단계 처리)\n4. 필요 처리: 검토 + 분석 + 문서 생성\n\n**결론**:\n- 주 의도: CONTRACT_REVIEW (계약서 검토)\n- 부가 의도: RISK_ANALYSIS (위험 분석)\n- 분해: ["계약서 전체 검토", "위험 요소 식별", "수정사항 제안"]\n\n### 예시 3: "집주인이 짜증나, 10년 살았는데 전세금 3억을 10억으로 올려달래. 법적으로 해결방법 알려줘"\n**CoT 분석**:\n1. 구조: 상황 설명 (10년 거주, 3억→10억) + 해결책 요청\n2. 유형: 해결책 요청형 (단순 정보 X)\n3. 복잡도: 고 (구체적 상황 + 수치 비교 + 법률 + 대응방안)\n4. 필요 처리: 법률 검색 + 상황 분석 + 해결책 제시\n\n**결론**:\n- 주 의도: COMPREHENSIVE (복잡한 상황에 대한 종합 해결)\n- 부가 의도: LEGAL_CONSULT, RISK_ANALYSIS\n- 분해: ["전세금 인상 한도 법률 조회", "3억→10억 인상의 타당성 분석", "구체적 대응 방안 제시"]\n- **이유**: "법적으로"라는 키워드가 있지만, 단순 법률 확인이 아니라 구체적 상황에 대한 해결책을 요구하므로 COMPREHENSIVE\n\n### 예시 4: "전세금 인상률 상한이 얼마야?"\n**CoT 분석**:\n1. 구조: 단순 사실 확인\n2. 유형: 정보 확인형\n3. 복잡도: 저 (단일 개념)\n4. 필요 처리: 검색만\n\n**결론**:\n- 주 의도: LEGAL_CONSULT (법률 정보 조회)\n- 부가 의도: 없음\n- 분해: 필요 없음\n\n## 응답 형식 (JSON 형식으로 응답):\n\n```json\n{\n    "intent": "LEGAL_CONSULT",\n    "confidence": 0.9,\n    "keywords": ["전세금", "인상", "제한"],\n    "sub_intents": [],\n    "is_compound": false,\n    "decomposed_tasks": [],\n    "entities": {\n        "location": "강남구",\n        "price": "5억",\n        "contract_type": "전세",\n        "date": "2024년",\n        "area": "84㎡",\n        "action_verbs": ["확인", "검토"]\n    },\n    "reasoning": "전세금 인상에 대한 법률 질문이므로 LEGAL_CONSULT로 분류"\n}\n```\n\n응답 규칙:\n- intent: 위 9개 카테고리 중 하나 (대문자_언더스코어 형식)\n- confidence: 0.0~1.0 (0.8 이상이면 매우 확실, 0.5 미만이면 불확실)\n- keywords: 추출된 주요 키워드 목록\n- sub_intents: 복합 질문일 경우 부가적인 의도들\n- is_compound: 복합 질문 여부 (true/false)\n- decomposed_tasks: 복합 질문을 분해한 개별 작업들\n- entities: 추출된 엔티티 정보\n- reasoning: **반드시 CoT 5단계를 거쳐 분석한 과정을 포함** (구조 파악 → 유형 판단 → 복잡도 평가 → 필요 처리 → 최종 검증)\n\n## reasoning 작성 예시:\n"1단계(구조): 상황 설명(10년 거주, 3억→10억) + 해결책 요청 포함.\n2단계(유형): 해결책 요청형 - 단순 정보가 아닌 대응방안 필요.\n3단계(복잡도): 고 - 구체적 수치 비교와 복잡한 상황.\n4단계(처리): 법률 검색 + 상황 분석 + 해결책 제시 필요.\n5단계(검증): LEGAL_CONSULT만으로는 불충분, 종합적 분석 필요 → COMPREHENSIVE 선택"\n\n## 판단 가이드:\n- 여러 의도가 섞여있다면, 가장 주된 의도를 intent에, 나머지를 sub_intents에 기록\n- "그리고", "또한", "함께", "같이" 등의 연결어가 있으면 복합 질문일 가능성 높음\n- 법률 관련 키워드가 있으면 LEGAL_CONSULT 우선\n- 가격/시세 언급이 명확하면 MARKET_INQUIRY\n- 계약서라는 단어와 함께 "작성/만들기"가 있으면 CONTRACT_CREATION\n- 계약서라는 단어와 함께 "검토/확인"이 있으면 CONTRACT_REVIEW\n- 불확실하면 confidence를 낮게 설정하고 UNCLEAR 선택\n- 복합 질문은 is_compound를 true로 설정하고 개별 작업으로 분해\n\n분석할 질문: 묵시적 갱신이 뭔가요?'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 16:55:54,937 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 16:55:54,937 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 16:55:54,937 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 16:55:54,937 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 16:55:54,937 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 16:55:54,937 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 16:55:57,287 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 07:55:57 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'2156'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'2174'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9982'), (b'x-ratelimit-remaining-tokens', b'197248'), (b'x-ratelimit-reset-requests', b'2m32.061s'), (b'x-ratelimit-reset-tokens', b'825ms'), (b'x-request-id', b'req_d8d71c15ff64452e8907261dd74687cb'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b5c045d7fea9b-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 16:55:57,287 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 16:55:57,288 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 16:55:57,290 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 16:55:57,290 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 16:55:57,290 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 16:55:57,290 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 07:55:57 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '2156', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '2174', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9982', 'x-ratelimit-remaining-tokens': '197248', 'x-ratelimit-reset-requests': '2m32.061s', 'x-ratelimit-reset-tokens': '825ms', 'x-request-id': 'req_d8d71c15ff64452e8907261dd74687cb', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b5c045d7fea9b-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 16:55:57,290 - openai._base_client - DEBUG - request_id: req_d8d71c15ff64452e8907261dd74687cb
2025-10-05 16:55:57,290 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: intent_analysis | Model: gpt-4o-mini-2024-07-18 | Tokens: 3362 (prompt: 3182, completion: 180)
2025-10-05 16:55:57,290 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM Intent Analysis Result: {'intent': 'LEGAL_CONSULT', 'confidence': 0.9, 'keywords': ['묵시적', '갱신', '임대차'], 'sub_intents': [], 'is_compound': False, 'decomposed_tasks': [], 'entities': {}, 'reasoning': '1단계(구조): 단순 정보 요청으로 묵시적 갱신의 정의를 묻고 있음. 2단계(유형): 정보 확인형 - 법률적 개념에 대한 설명 요청. 3단계(복잡도): 저 - 단일 개념 확인. 4단계(처리): 법률 관련 정보 검색만 필요. 5단계(검증): LEGAL_CONSULT로 분류하여 충분히 답변 가능.'}
2025-10-05 16:55:57,291 - app.service_agent.llm_manager.prompt_manager - DEBUG - Using cached prompt: agent_selection
2025-10-05 16:55:57,291 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-489feaaa-979a-4565-a271-72fad6304a9a', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 Agent 선택 전문가입니다.\n사용자의 요청에 가장 적합한 Agent/Team을 선택하는 것이 목표입니다.\n\n## 현재 상황\n\n**사용자 질문:** 묵시적 갱신이 뭔가요?\n**분석된 의도:** 법률상담\n**추출된 키워드:** [\'묵시적\', \'갱신\', \'임대차\']\n\n## 사용 가능한 Agent/Team 정보\n\n{\'search_team\': {\'name\': \'search_team\', \'capabilities\': \'법률 검색, 부동산 시세 조회, 대출 상품 검색\', \'tools\': [\'legal_search\', \'market_data\', \'loan_data\'], \'use_cases\': [\'법률 상담\', \'시세 조회\', \'대출 정보\']}, \'analysis_team\': {\'name\': \'analysis_team\', \'capabilities\': \'데이터 분석, 리스크 평가, 인사이트 생성, 추천\', \'tools\': [\'data_analyzer\', \'risk_evaluator\'], \'use_cases\': [\'시장 분석\', \'리스크 평가\', \'투자 분석\']}, \'document_team\': {\'name\': \'document_team\', \'capabilities\': \'계약서 작성, 문서 생성, 문서 검토\', \'tools\': [\'document_generator\', \'contract_reviewer\'], \'use_cases\': [\'계약서 작성\', \'문서 검토\']}}\n\n## Agent 역할 및 상세 가이드\n\n### 1. search_team (검색 팀)\n- **주요 기능**: 정보 검색 및 데이터 수집\n- **전문 분야**:\n  * 법률 정보 검색 (전세법, 임대차보호법, 부동산 관련 법규)\n  * 부동산 시세 조회 (매매가, 전세가, 월세, 실거래가)\n  * 대출 상품 정보 검색 (금리, 한도, 조건)\n  * 지역 정보 및 인프라 조회\n- **도구**: legal_search, market_data, loan_data\n- **적합한 작업**: 정보 조회, 데이터 수집, 법률 확인, 시세 파악\n- **예시**:\n  * "전세금 5% 인상 가능한가요?"\n  * "강남구 아파트 전세 시세"\n  * "전세자금대출 한도 얼마?"\n\n### 2. analysis_team (분석 팀)\n- **주요 기능**: 데이터 분석 및 평가\n- **전문 분야**:\n  * 시장 동향 분석 (상승률, 하락률, 추세)\n  * 리스크 평가 (계약, 투자 위험도)\n  * 투자 수익률 계산 (ROI, 월세 수익률)\n  * 대출 한도 및 조건 분석 (LTV, DTI, DSR)\n  * 비교 분석 (지역별, 상품별)\n- **도구**: data_analyzer, risk_evaluator, calculator\n- **적합한 작업**: 데이터 분석, 리스크 평가, 계산, 비교, 예측\n- **의존성**: 보통 search_team의 데이터가 필요\n- **예시**:\n  * "이 지역 투자 가치 분석해줘"\n  * "계약 리스크 평가해줘"\n  * "대출 가능 금액 계산해줘"\n\n### 3. document_team (문서 팀)\n- **주요 기능**: 문서 생성 및 관리\n- **전문 분야**:\n  * 계약서 작성 (임대차, 매매, 전세)\n  * 문서 템플릿 관리\n  * 특약사항 생성\n  * 계약서 수정안 작성\n  * 법률 문서 검토\n- **도구**: document_generator, contract_template, contract_reviewer\n- **적합한 작업**: 문서 작성, 계약서 생성, 문서 수정, 검토\n- **예시**:\n  * "임대차계약서 작성해줘"\n  * "특약사항 추가해줘"\n  * "계약서 수정안 만들어줘"\n\n## Chain-of-Thought Agent 선택 프로세스\n\n다음 단계를 **순서대로** 따라 최적의 Agent 조합을 선택하세요:\n\n### 1단계: 질문 요구사항 파악\n- 단순 정보 조회인가? → search_team만 필요\n- 판단/평가가 필요한가? → search + analysis 필요\n- 해결책 제시가 필요한가? → search + analysis 필요\n- 문서 생성이 필요한가? → document_team 추가\n\n### 2단계: 작업 복잡도 판단\n- **단순** (검색만): "~이 뭐야?", "~알려줘" → search_team\n- **중간** (검색+판단): "~괜찮아?", "~적절해?" → search + analysis\n- **복잡** (종합 해결): 구체적 상황 + "어떻게 해야 해?" → search + analysis\n\n### 3단계: 의존성 분석\n- 독립적 작업: 단일 팀으로 처리 가능\n- 순차적 의존: 이전 결과 필요 → 여러 팀 순서대로\n- 병렬 가능: 동시 조회 가능 → coordination: "parallel"\n\n### 4단계: 최종 검증\n- 선택한 팀들로 질문에 완전히 답변 가능한가?\n- 불필요한 팀이 포함되지 않았는가?\n- 순서가 논리적인가? (데이터 흐름 고려)\n\n### 중요 원칙:\n- **법률 키워드만으로 판단하지 말 것**: "법적으로 어떻게 해야 해?" = 법률 검색 + 분석 필요\n- **상황 설명 + 해결책 요청** = 반드시 analysis_team 포함\n- **구체적 수치 비교** (3억→10억 같은) = analysis_team 필요\n\n## 의도별 Agent 매핑 가이드 (기본 가이드 - CoT로 조정 가능)\n\n| 의도 (Intent) | 기본 조합 | 상황별 조정 |\n|--------------|-----------|-------------|\n| LEGAL_CONSULT | ["search_team"] | 해결책 요청시 → + analysis_team |\n| MARKET_INQUIRY | ["search_team"] | 비교/평가시 → + analysis_team |\n| LOAN_CONSULT | ["search_team", "analysis_team"] | 계산 필수 |\n| CONTRACT_CREATION | ["document_team"] | 검토 후 작성 → search + document |\n| CONTRACT_REVIEW | ["search_team", "analysis_team"] | 법률 검토 + 리스크 분석 |\n| COMPREHENSIVE | ["search_team", "analysis_team"] | **항상 분석 포함** |\n| RISK_ANALYSIS | ["analysis_team"] | 법률 근거 필요시 → search + analysis |\n| UNCLEAR | ["search_team", "analysis_team"] | 포괄적 대응 |\n\n**중요**: 위 매핑은 **기본 가이드**일 뿐입니다.\n실제 질문의 내용(CoT 분석 결과)에 따라 조정하세요!\n\n## 복합 질문 처리 예시 (CoT 적용)\n\n### 예시 1: 순차적 처리\n질문: "강남구 시세 확인하고 투자 가치 분석해줘"\n**CoT 분석**:\n1. 요구사항: 시세 조회 + 투자 가치 평가\n2. 복잡도: 중간 (검색 + 분석)\n3. 의존성: 시세 데이터 → 투자 분석 (순차)\n4. 검증: search만으로는 "투자 가치 평가" 불가능\n\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "1단계: 시세 조회+투자 평가 필요. 2단계: 중간 복잡도. 3단계: 순차 의존. 4단계: search로 시세 수집 후 analysis로 투자 가치 평가 필요",\n    "coordination": "sequential"\n}\n```\n\n### 예시 2: 단순 정보 조회\n질문: "전세금 인상률 한도가 얼마야?"\n**CoT 분석**:\n1. 요구사항: 단순 사실 확인\n2. 복잡도: 낮음 (정보 확인형)\n3. 의존성: 없음\n4. 검증: search_team만으로 충분\n\n```json\n{\n    "selected_agents": ["search_team"],\n    "reasoning": "1단계: 단순 정보 조회. 2단계: 저복잡도. 3단계: 독립적. 4단계: 법률 검색만으로 답변 가능",\n    "coordination": "single"\n}\n```\n\n### 예시 3: 해결책 요청 (핵심 예시!)\n질문: "집주인이 전세금 3억을 10억으로 올려달래. 법적으로 어떻게 해야 해?"\n의도: COMPREHENSIVE\n**CoT 분석**:\n1. 요구사항: 상황 설명 + 해결책 요청\n2. 복잡도: 높음 (구체적 상황 + 수치 비교)\n3. 의존성: 법률 확인 → 상황 분석 → 해결책 제시\n4. 검증: "법적으로"만 보고 search만 선택하면 불충분! 해결책 제시 필요\n\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "1단계: 법률 + 상황 분석 + 해결책 필요. 2단계: 고복잡도(3억→10억 비정상). 3단계: 순차(법률 확인 후 타당성 분석). 4단계: \'어떻게 해야\' = 단순 법률 조회 아님, 분석 필수",\n    "coordination": "sequential",\n    "confidence": 0.95\n}\n```\n\n## 응답 형식 (JSON)\n\n```json\n{\n    "selected_agents": ["선택된 agent/team 목록"],\n    "reasoning": "선택 이유를 구체적으로 설명. 각 Agent의 역할과 처리 순서 포함",\n    "coordination": "single/sequential/parallel/pipeline",\n    "dependencies": {"agent2": ["agent1"]},\n    "estimated_time": 30,\n    "confidence": 0.9\n}\n```\n\n## 선택 가이드라인\n\n1. **최소 Agent 원칙**: 가능한 적은 수의 Agent로 처리\n2. **전문성 우선**: 해당 작업에 가장 전문적인 Agent 선택\n3. **효율성 고려**: 병렬 처리 가능한 경우 명시\n4. **의존성 관리**: 데이터 흐름을 고려한 순서 지정\n5. **폴백 전략**: 불확실한 경우 ["search_team", "analysis_team"] 조합\n\n## 주의사항\n\n- selected_agents는 반드시 배열 형태\n- Agent 이름은 정확히: "search_team", "analysis_team", "document_team"\n- 최소 1개, 최대 3개 선택\n- 순서는 실행 우선순위 (앞에 있을수록 먼저 실행)\n- reasoning은 상세하고 논리적으로 작성\n- coordination 필드로 실행 방식 명시\n- 복합 질문의 경우 의존성 관계 명확히 표시'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 16:55:57,291 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 16:55:57,292 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 16:55:57,292 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 16:55:57,292 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 16:55:57,292 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 16:55:57,292 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 16:56:00,784 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 07:56:00 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'3284'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'3316'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9981'), (b'x-ratelimit-remaining-tokens', b'197894'), (b'x-ratelimit-reset-requests', b'2m38.345s'), (b'x-ratelimit-reset-tokens', b'631ms'), (b'x-request-id', b'req_04280144c45241959d0a02a7093f17d1'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b5c131b35ea9b-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 16:56:00,784 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 16:56:00,785 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 16:56:00,790 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 16:56:00,790 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 16:56:00,790 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 16:56:00,790 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 07:56:00 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '3284', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '3316', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9981', 'x-ratelimit-remaining-tokens': '197894', 'x-ratelimit-reset-requests': '2m38.345s', 'x-ratelimit-reset-tokens': '631ms', 'x-request-id': 'req_04280144c45241959d0a02a7093f17d1', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b5c131b35ea9b-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 16:56:00,790 - openai._base_client - DEBUG - request_id: req_04280144c45241959d0a02a7093f17d1
2025-10-05 16:56:00,791 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: agent_selection | Model: gpt-4o-mini-2024-07-18 | Tokens: 2521 (prompt: 2361, completion: 160)
2025-10-05 16:56:00,791 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM agent selection reasoning: 1단계: 묵시적 갱신에 대한 법률적 설명과 그에 따른 상황 분석이 필요합니다. 2단계: 법률 상담이므로 중간 복잡도로 판단됩니다. 3단계: 법률 정보 검색 후, 그에 대한 분석이 필요하므로 순차적 의존성이 있습니다. 4단계: 단순 법률 조회만으로는 충분하지 않으며, 상황에 대한 분석이 필수적입니다.
2025-10-05 16:56:00,791 - app.service_agent.cognitive_agents.planning_agent - INFO - ✅ Primary LLM selected agents: ['search_team', 'analysis_team']
2025-10-05 16:56:00,791 - __main__ - INFO -   의도: 법률상담
2025-10-05 16:56:00,791 - __main__ - INFO -   신뢰도: 0.90
2025-10-05 16:56:00,791 - __main__ - INFO -   추천 Agent: ['search_team', 'analysis_team']
2025-10-05 16:56:00,791 - __main__ - INFO - 
[Step 2] Query Decomposition...
2025-10-05 16:56:00,791 - app.service_agent.cognitive_agents.query_decomposer - INFO - Decomposing query: 묵시적 갱신이 뭔가요?...
2025-10-05 16:56:00,791 - app.service_agent.cognitive_agents.query_decomposer - INFO - Query is simple, no decomposition needed
2025-10-05 16:56:00,791 - __main__ - INFO -   복합 질문: False
2025-10-05 16:56:00,791 - __main__ - INFO -   작업 수: 1
2025-10-05 16:56:00,791 - __main__ - INFO -   실행 모드: sequential
2025-10-05 16:56:00,791 - __main__ - INFO - 
[Step 3] Execution Plan 생성...
2025-10-05 16:56:00,791 - app.service_agent.cognitive_agents.planning_agent - INFO - Creating execution plan for intent: 법률상담
2025-10-05 16:56:00,791 - app.service_agent.cognitive_agents.planning_agent - WARNING - AgentRegistry is empty, using default teams
2025-10-05 16:56:00,791 - app.service_agent.cognitive_agents.planning_agent - DEBUG - Suggested agents: ['search_team', 'analysis_team']
2025-10-05 16:56:00,791 - app.service_agent.cognitive_agents.planning_agent - DEBUG - Available agents: ['search_team', 'analysis_team', 'document_team']
2025-10-05 16:56:00,791 - app.service_agent.cognitive_agents.planning_agent - INFO - Selected agents/teams for execution: ['search_team', 'analysis_team']
2025-10-05 16:56:00,791 - __main__ - INFO -   전략: sequential
2025-10-05 16:56:00,791 - __main__ - INFO -   단계 수: 2
2025-10-05 16:56:00,791 - __main__ - INFO - 
✓ 테스트 성공 (소요시간: 5.86초)
2025-10-05 16:56:00,791 - __main__ - INFO - 
================================================================================
2025-10-05 16:56:00,791 - __main__ - INFO - [15] 단일 질문 테스트: S015
2025-10-05 16:56:00,791 - __main__ - INFO - 질문: 용산구 아파트 실거래가 조회
2025-10-05 16:56:00,791 - __main__ - INFO - ================================================================================
2025-10-05 16:56:00,791 - __main__ - INFO - 
[Step 1] Intent 분석...
2025-10-05 16:56:00,791 - app.service_agent.cognitive_agents.planning_agent - INFO - Analyzing intent for query: 용산구 아파트 실거래가 조회...
2025-10-05 16:56:00,791 - app.service_agent.llm_manager.prompt_manager - DEBUG - Using cached prompt: intent_analysis
2025-10-05 16:56:00,792 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-7fb12211-6a50-4f33-acbd-dc2092e1ea5e', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 의도 분석 전문가입니다.\n사용자의 질문을 정확히 이해하고, 어떤 종류의 도움이 필요한지 분류해야 합니다.\n\n## Chain-of-Thought 분석 프로세스\n\n질문을 분석할 때 다음 단계를 **순서대로** 따르세요:\n\n### 1단계: 질문 구조 파악\n- 단순 정보 요청인가? (예: "~이 뭐야?", "~알려줘")\n- 상황 설명이 포함되어 있는가? (배경, 현재 상태)\n- 구체적 수치나 데이터가 있는가? (금액, 비율, 기간 등)\n- 문제 해결을 요구하는가? (예: "어떻게 해야 해?", "방법 알려줘")\n\n### 2단계: 요청 유형 판단\n- **정보 확인형**: 사실, 개념, 규정 확인 → 검색만으로 충분\n- **평가/판단형**: "괜찮아?", "적절해?", "문제있어?" → 검색 + 분석 필요\n- **해결책 요청형**: "어떻게?", "방법?", "대처?" → 검색 + 분석 + 제안 필요\n- **비교/선택형**: "A vs B", "어느게 나아?" → 검색 + 분석(비교) 필요\n\n### 3단계: 복잡도 평가\n- **저**: 단일 개념/사실 확인 (예: "전세금 인상률 한도?")\n- **중**: 특정 상황 + 판단 (예: "3억을 5억으로 올려달래. 가능해?")\n- **고**: 복잡한 상황 + 여러 조건 + 해결책 (예: "10년 거주, 3억→10억 요구. 어떻게 해야 해?")\n\n### 4단계: 필요한 처리 결정\n- **검색만**: 정보 확인형 + 저복잡도\n- **검색+분석**: 평가/판단형 OR 중복잡도 OR 수치 비교 포함\n- **종합처리**: 해결책 요청형 OR 고복잡도 OR 여러 조건 동시 고려\n\n### 5단계: 최종 검증\n- 선택한 의도로 사용자 질문에 완전히 답변 가능한가?\n- 단순 정보 제공으로 끝나는가, 아니면 추가 분석/판단이 필요한가?\n- 상황 설명이 있으면서 "해결", "방법", "어떻게" 등이 있으면 → COMPREHENSIVE 고려\n\n## 중요: 복합 질문 처리\n복합적인 질문(여러 의도가 섞인 질문)의 경우, 가장 핵심적인 의도를 파악하되,\nsub_intents 필드에 부가적인 의도들도 함께 기록해주세요.\n\n**특히 주의**:\n- 법률 키워드가 있어도, "해결방법", "어떻게 해야" 같은 표현이 있으면 단순 LEGAL_CONSULT가 아닐 수 있음\n- 구체적 상황(금액, 기간 등) + 해결책 요구 = COMPREHENSIVE 또는 복합 의도로 분류\n\n## 분류 카테고리 설명:\n\n1. **LEGAL_CONSULT (법률상담)**\n   - 설명: 부동산 관련 법률, 권리, 의무에 대한 질문\n   - 예시:\n     * 단순: "전세금 5% 인상이 가능한가요?", "임대차계약 갱신 거부할 수 있나요?"\n     * 복합: "전세금 인상 가능한지 확인하고 법적 근거도 알려주세요"\n   - 키워드: 법, 전세, 임대, 보증금, 계약, 권리, 의무, 갱신, 임차인, 임대인, 법률, 규정, 조항\n   - 필요한 처리: 법률 데이터베이스 검색, 관련 법조항 찾기\n\n2. **MARKET_INQUIRY (시세조회)**\n   - 설명: 부동산 시장 가격, 시세, 거래 동향에 대한 질문\n   - 예시:\n     * 단순: "강남구 아파트 전세 시세 알려주세요", "서초동 매매가 얼마나 올랐나요?"\n     * 복합: "강남구 시세 확인하고 대출 가능 금액도 계산해줘"\n   - 키워드: 시세, 가격, 매매가, 전세가, 월세, 시장, 동향, 평균, 지역명, 상승률, 하락률\n   - 필요한 처리: 부동산 시세 데이터 조회, 지역별 가격 분석\n\n3. **LOAN_CONSULT (대출상담)**\n   - 설명: 주택담보대출, 전세자금대출 등 금융 관련 질문\n   - 예시:\n     * 단순: "전세자금대출 한도가 얼마인가요?", "LTV가 뭔가요?"\n     * 복합: "대출 한도 확인하고 금리 비교도 해주세요"\n   - 키워드: 대출, 금리, 한도, 조건, 상환, LTV, DTI, DSR, 담보, 금융, 은행\n   - 필요한 처리: 대출 상품 조회, 금리 정보 검색, 한도 계산\n\n4. **CONTRACT_CREATION (계약서작성)**\n   - 설명: 새로운 계약서나 문서를 작성해달라는 요청\n   - 예시:\n     * 단순: "임대차계약서 작성해주세요", "전세계약서 초안 만들어주세요"\n     * 복합: "계약서 작성하고 주의사항도 검토해주세요"\n   - 키워드: 작성, 만들, 생성, 초안, 계약서, 문서, 양식\n   - 필요한 처리: 문서 생성 에이전트 호출, 템플릿 기반 작성\n\n5. **CONTRACT_REVIEW (계약서검토)**\n   - 설명: 기존 계약서나 문서를 검토해달라는 요청\n   - 예시:\n     * 단순: "이 계약서 검토해주세요", "특약사항 문제없나요?"\n     * 복합: "계약서 검토하고 수정사항도 제안해주세요"\n   - 키워드: 검토, 확인, 점검, 리뷰, 분석해, 살펴봐, 체크\n   - 필요한 처리: 문서 분석, 위험 요소 식별, 개선사항 제안\n\n6. **COMPREHENSIVE (종합분석)**\n   - 설명: 여러 측면을 종합적으로 분석해달라는 요청, 또는 복잡한 상황에 대한 해결책 요청\n   - 예시:\n     * 단순: "이 물건 전체적으로 분석해주세요"\n     * 복합: "시세, 법률, 대출 모두 검토해서 종합 의견 주세요"\n     * 해결형: "10년 거주했는데 전세금 3억을 10억으로 올려달래. 어떻게 해야 해?"\n     * 상황+해결: "집주인이 계약 갱신 거부했어. 법적으로 어떻게 대응해야 할까?"\n   - 키워드: 종합, 전체, 모든, 전반적, 종합적, 평가, 분석, 어떻게, 방법, 해결, 대처\n   - 패턴: 구체적 상황 설명 + "어떻게/방법/해결" 요청\n   - 필요한 처리: 다중 데이터 소스 통합 분석, 상황 평가, 해결책 제시\n\n7. **RISK_ANALYSIS (리스크분석)**\n   - 설명: 위험 요소나 주의사항에 대한 질문\n   - 예시:\n     * 단순: "이 계약 위험한가요?", "주의할 점 알려주세요"\n     * 복합: "리스크 분석하고 대안도 제시해주세요"\n   - 키워드: 위험, 리스크, 주의, 문제점, 조심, 걱정, 우려\n   - 필요한 처리: 위험 요소 분석, 주의사항 추출\n\n8. **UNCLEAR (불분명)**\n   - 설명: 의도를 명확히 파악하기 어려운 질문\n   - 예시: "이거 좀 봐주세요", "어떻게 해야 할까요?", "도와주세요"\n   - 처리: 추가 질문으로 의도 명확화 필요\n\n9. **IRRELEVANT (무관)**\n   - 설명: 부동산과 전혀 관련 없는 질문\n   - 예시: "날씨 어때?", "저녁 뭐 먹지?", "주식 추천해줘"\n   - 처리: 부동산 관련 질문을 유도\n\n## 복합 질문 예시와 분석 (CoT 적용):\n\n### 예시 1: "강남구 아파트 시세 알려주고 전세자금대출 가능한지도 확인해줘"\n**CoT 분석**:\n1. 구조: 두 개의 요청 ("시세" + "대출")\n2. 유형: 정보 확인형 (둘 다)\n3. 복잡도: 중 (두 가지 독립적 조회)\n4. 필요 처리: 검색 + 계산/분석\n\n**결론**:\n- 주 의도: MARKET_INQUIRY (시세 조회가 먼저 필요)\n- 부가 의도: LOAN_CONSULT (대출 확인)\n- 분해: ["강남구 아파트 시세 조회", "전세자금대출 가능 여부 확인"]\n\n### 예시 2: "이 계약서 검토해서 위험한 부분 있는지 알려주고 수정 제안도 해줘"\n**CoT 분석**:\n1. 구조: 검토 + 위험 평가 + 수정안\n2. 유형: 평가/판단형 + 해결책 요청형\n3. 복잡도: 고 (3단계 처리)\n4. 필요 처리: 검토 + 분석 + 문서 생성\n\n**결론**:\n- 주 의도: CONTRACT_REVIEW (계약서 검토)\n- 부가 의도: RISK_ANALYSIS (위험 분석)\n- 분해: ["계약서 전체 검토", "위험 요소 식별", "수정사항 제안"]\n\n### 예시 3: "집주인이 짜증나, 10년 살았는데 전세금 3억을 10억으로 올려달래. 법적으로 해결방법 알려줘"\n**CoT 분석**:\n1. 구조: 상황 설명 (10년 거주, 3억→10억) + 해결책 요청\n2. 유형: 해결책 요청형 (단순 정보 X)\n3. 복잡도: 고 (구체적 상황 + 수치 비교 + 법률 + 대응방안)\n4. 필요 처리: 법률 검색 + 상황 분석 + 해결책 제시\n\n**결론**:\n- 주 의도: COMPREHENSIVE (복잡한 상황에 대한 종합 해결)\n- 부가 의도: LEGAL_CONSULT, RISK_ANALYSIS\n- 분해: ["전세금 인상 한도 법률 조회", "3억→10억 인상의 타당성 분석", "구체적 대응 방안 제시"]\n- **이유**: "법적으로"라는 키워드가 있지만, 단순 법률 확인이 아니라 구체적 상황에 대한 해결책을 요구하므로 COMPREHENSIVE\n\n### 예시 4: "전세금 인상률 상한이 얼마야?"\n**CoT 분석**:\n1. 구조: 단순 사실 확인\n2. 유형: 정보 확인형\n3. 복잡도: 저 (단일 개념)\n4. 필요 처리: 검색만\n\n**결론**:\n- 주 의도: LEGAL_CONSULT (법률 정보 조회)\n- 부가 의도: 없음\n- 분해: 필요 없음\n\n## 응답 형식 (JSON 형식으로 응답):\n\n```json\n{\n    "intent": "LEGAL_CONSULT",\n    "confidence": 0.9,\n    "keywords": ["전세금", "인상", "제한"],\n    "sub_intents": [],\n    "is_compound": false,\n    "decomposed_tasks": [],\n    "entities": {\n        "location": "강남구",\n        "price": "5억",\n        "contract_type": "전세",\n        "date": "2024년",\n        "area": "84㎡",\n        "action_verbs": ["확인", "검토"]\n    },\n    "reasoning": "전세금 인상에 대한 법률 질문이므로 LEGAL_CONSULT로 분류"\n}\n```\n\n응답 규칙:\n- intent: 위 9개 카테고리 중 하나 (대문자_언더스코어 형식)\n- confidence: 0.0~1.0 (0.8 이상이면 매우 확실, 0.5 미만이면 불확실)\n- keywords: 추출된 주요 키워드 목록\n- sub_intents: 복합 질문일 경우 부가적인 의도들\n- is_compound: 복합 질문 여부 (true/false)\n- decomposed_tasks: 복합 질문을 분해한 개별 작업들\n- entities: 추출된 엔티티 정보\n- reasoning: **반드시 CoT 5단계를 거쳐 분석한 과정을 포함** (구조 파악 → 유형 판단 → 복잡도 평가 → 필요 처리 → 최종 검증)\n\n## reasoning 작성 예시:\n"1단계(구조): 상황 설명(10년 거주, 3억→10억) + 해결책 요청 포함.\n2단계(유형): 해결책 요청형 - 단순 정보가 아닌 대응방안 필요.\n3단계(복잡도): 고 - 구체적 수치 비교와 복잡한 상황.\n4단계(처리): 법률 검색 + 상황 분석 + 해결책 제시 필요.\n5단계(검증): LEGAL_CONSULT만으로는 불충분, 종합적 분석 필요 → COMPREHENSIVE 선택"\n\n## 판단 가이드:\n- 여러 의도가 섞여있다면, 가장 주된 의도를 intent에, 나머지를 sub_intents에 기록\n- "그리고", "또한", "함께", "같이" 등의 연결어가 있으면 복합 질문일 가능성 높음\n- 법률 관련 키워드가 있으면 LEGAL_CONSULT 우선\n- 가격/시세 언급이 명확하면 MARKET_INQUIRY\n- 계약서라는 단어와 함께 "작성/만들기"가 있으면 CONTRACT_CREATION\n- 계약서라는 단어와 함께 "검토/확인"이 있으면 CONTRACT_REVIEW\n- 불확실하면 confidence를 낮게 설정하고 UNCLEAR 선택\n- 복합 질문은 is_compound를 true로 설정하고 개별 작업으로 분해\n\n분석할 질문: 용산구 아파트 실거래가 조회'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 16:56:00,792 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 16:56:00,792 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 16:56:00,793 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 16:56:00,793 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 16:56:00,793 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 16:56:00,793 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 16:56:03,668 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 07:56:03 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'2672'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'2698'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9981'), (b'x-ratelimit-remaining-tokens', b'197246'), (b'x-ratelimit-reset-requests', b'2m43.48s'), (b'x-ratelimit-reset-tokens', b'826ms'), (b'x-request-id', b'req_d03fc4be8ff49403955266befea8f81e'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b5c28fb29ea9b-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 16:56:03,668 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 16:56:03,668 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 16:56:03,680 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 16:56:03,680 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 16:56:03,680 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 16:56:03,680 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 07:56:03 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '2672', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '2698', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9981', 'x-ratelimit-remaining-tokens': '197246', 'x-ratelimit-reset-requests': '2m43.48s', 'x-ratelimit-reset-tokens': '826ms', 'x-request-id': 'req_d03fc4be8ff49403955266befea8f81e', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b5c28fb29ea9b-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 16:56:03,680 - openai._base_client - DEBUG - request_id: req_d03fc4be8ff49403955266befea8f81e
2025-10-05 16:56:03,680 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: intent_analysis | Model: gpt-4o-mini-2024-07-18 | Tokens: 3381 (prompt: 3179, completion: 202)
2025-10-05 16:56:03,680 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM Intent Analysis Result: {'intent': 'MARKET_INQUIRY', 'confidence': 0.95, 'keywords': ['용산구', '아파트', '실거래가', '조회'], 'sub_intents': [], 'is_compound': False, 'decomposed_tasks': [], 'entities': {'location': '용산구', 'property_type': '아파트', 'action_verbs': ['조회']}, 'reasoning': "1단계(구조): 단순 정보 요청으로 '실거래가 조회' 포함. 2단계(유형): 정보 확인형 - 실거래가에 대한 사실 확인. 3단계(복잡도): 저 - 단일 개념 확인. 4단계(처리): 검색만 필요. 5단계(검증): 단순 정보 제공으로 충분하므로 MARKET_INQUIRY로 분류."}
2025-10-05 16:56:03,680 - app.service_agent.llm_manager.prompt_manager - DEBUG - Using cached prompt: agent_selection
2025-10-05 16:56:03,681 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-5e54b52b-6118-47d7-aa7e-e7a55359220f', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 Agent 선택 전문가입니다.\n사용자의 요청에 가장 적합한 Agent/Team을 선택하는 것이 목표입니다.\n\n## 현재 상황\n\n**사용자 질문:** 용산구 아파트 실거래가 조회\n**분석된 의도:** 시세조회\n**추출된 키워드:** [\'용산구\', \'아파트\', \'실거래가\', \'조회\']\n\n## 사용 가능한 Agent/Team 정보\n\n{\'search_team\': {\'name\': \'search_team\', \'capabilities\': \'법률 검색, 부동산 시세 조회, 대출 상품 검색\', \'tools\': [\'legal_search\', \'market_data\', \'loan_data\'], \'use_cases\': [\'법률 상담\', \'시세 조회\', \'대출 정보\']}, \'analysis_team\': {\'name\': \'analysis_team\', \'capabilities\': \'데이터 분석, 리스크 평가, 인사이트 생성, 추천\', \'tools\': [\'data_analyzer\', \'risk_evaluator\'], \'use_cases\': [\'시장 분석\', \'리스크 평가\', \'투자 분석\']}, \'document_team\': {\'name\': \'document_team\', \'capabilities\': \'계약서 작성, 문서 생성, 문서 검토\', \'tools\': [\'document_generator\', \'contract_reviewer\'], \'use_cases\': [\'계약서 작성\', \'문서 검토\']}}\n\n## Agent 역할 및 상세 가이드\n\n### 1. search_team (검색 팀)\n- **주요 기능**: 정보 검색 및 데이터 수집\n- **전문 분야**:\n  * 법률 정보 검색 (전세법, 임대차보호법, 부동산 관련 법규)\n  * 부동산 시세 조회 (매매가, 전세가, 월세, 실거래가)\n  * 대출 상품 정보 검색 (금리, 한도, 조건)\n  * 지역 정보 및 인프라 조회\n- **도구**: legal_search, market_data, loan_data\n- **적합한 작업**: 정보 조회, 데이터 수집, 법률 확인, 시세 파악\n- **예시**:\n  * "전세금 5% 인상 가능한가요?"\n  * "강남구 아파트 전세 시세"\n  * "전세자금대출 한도 얼마?"\n\n### 2. analysis_team (분석 팀)\n- **주요 기능**: 데이터 분석 및 평가\n- **전문 분야**:\n  * 시장 동향 분석 (상승률, 하락률, 추세)\n  * 리스크 평가 (계약, 투자 위험도)\n  * 투자 수익률 계산 (ROI, 월세 수익률)\n  * 대출 한도 및 조건 분석 (LTV, DTI, DSR)\n  * 비교 분석 (지역별, 상품별)\n- **도구**: data_analyzer, risk_evaluator, calculator\n- **적합한 작업**: 데이터 분석, 리스크 평가, 계산, 비교, 예측\n- **의존성**: 보통 search_team의 데이터가 필요\n- **예시**:\n  * "이 지역 투자 가치 분석해줘"\n  * "계약 리스크 평가해줘"\n  * "대출 가능 금액 계산해줘"\n\n### 3. document_team (문서 팀)\n- **주요 기능**: 문서 생성 및 관리\n- **전문 분야**:\n  * 계약서 작성 (임대차, 매매, 전세)\n  * 문서 템플릿 관리\n  * 특약사항 생성\n  * 계약서 수정안 작성\n  * 법률 문서 검토\n- **도구**: document_generator, contract_template, contract_reviewer\n- **적합한 작업**: 문서 작성, 계약서 생성, 문서 수정, 검토\n- **예시**:\n  * "임대차계약서 작성해줘"\n  * "특약사항 추가해줘"\n  * "계약서 수정안 만들어줘"\n\n## Chain-of-Thought Agent 선택 프로세스\n\n다음 단계를 **순서대로** 따라 최적의 Agent 조합을 선택하세요:\n\n### 1단계: 질문 요구사항 파악\n- 단순 정보 조회인가? → search_team만 필요\n- 판단/평가가 필요한가? → search + analysis 필요\n- 해결책 제시가 필요한가? → search + analysis 필요\n- 문서 생성이 필요한가? → document_team 추가\n\n### 2단계: 작업 복잡도 판단\n- **단순** (검색만): "~이 뭐야?", "~알려줘" → search_team\n- **중간** (검색+판단): "~괜찮아?", "~적절해?" → search + analysis\n- **복잡** (종합 해결): 구체적 상황 + "어떻게 해야 해?" → search + analysis\n\n### 3단계: 의존성 분석\n- 독립적 작업: 단일 팀으로 처리 가능\n- 순차적 의존: 이전 결과 필요 → 여러 팀 순서대로\n- 병렬 가능: 동시 조회 가능 → coordination: "parallel"\n\n### 4단계: 최종 검증\n- 선택한 팀들로 질문에 완전히 답변 가능한가?\n- 불필요한 팀이 포함되지 않았는가?\n- 순서가 논리적인가? (데이터 흐름 고려)\n\n### 중요 원칙:\n- **법률 키워드만으로 판단하지 말 것**: "법적으로 어떻게 해야 해?" = 법률 검색 + 분석 필요\n- **상황 설명 + 해결책 요청** = 반드시 analysis_team 포함\n- **구체적 수치 비교** (3억→10억 같은) = analysis_team 필요\n\n## 의도별 Agent 매핑 가이드 (기본 가이드 - CoT로 조정 가능)\n\n| 의도 (Intent) | 기본 조합 | 상황별 조정 |\n|--------------|-----------|-------------|\n| LEGAL_CONSULT | ["search_team"] | 해결책 요청시 → + analysis_team |\n| MARKET_INQUIRY | ["search_team"] | 비교/평가시 → + analysis_team |\n| LOAN_CONSULT | ["search_team", "analysis_team"] | 계산 필수 |\n| CONTRACT_CREATION | ["document_team"] | 검토 후 작성 → search + document |\n| CONTRACT_REVIEW | ["search_team", "analysis_team"] | 법률 검토 + 리스크 분석 |\n| COMPREHENSIVE | ["search_team", "analysis_team"] | **항상 분석 포함** |\n| RISK_ANALYSIS | ["analysis_team"] | 법률 근거 필요시 → search + analysis |\n| UNCLEAR | ["search_team", "analysis_team"] | 포괄적 대응 |\n\n**중요**: 위 매핑은 **기본 가이드**일 뿐입니다.\n실제 질문의 내용(CoT 분석 결과)에 따라 조정하세요!\n\n## 복합 질문 처리 예시 (CoT 적용)\n\n### 예시 1: 순차적 처리\n질문: "강남구 시세 확인하고 투자 가치 분석해줘"\n**CoT 분석**:\n1. 요구사항: 시세 조회 + 투자 가치 평가\n2. 복잡도: 중간 (검색 + 분석)\n3. 의존성: 시세 데이터 → 투자 분석 (순차)\n4. 검증: search만으로는 "투자 가치 평가" 불가능\n\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "1단계: 시세 조회+투자 평가 필요. 2단계: 중간 복잡도. 3단계: 순차 의존. 4단계: search로 시세 수집 후 analysis로 투자 가치 평가 필요",\n    "coordination": "sequential"\n}\n```\n\n### 예시 2: 단순 정보 조회\n질문: "전세금 인상률 한도가 얼마야?"\n**CoT 분석**:\n1. 요구사항: 단순 사실 확인\n2. 복잡도: 낮음 (정보 확인형)\n3. 의존성: 없음\n4. 검증: search_team만으로 충분\n\n```json\n{\n    "selected_agents": ["search_team"],\n    "reasoning": "1단계: 단순 정보 조회. 2단계: 저복잡도. 3단계: 독립적. 4단계: 법률 검색만으로 답변 가능",\n    "coordination": "single"\n}\n```\n\n### 예시 3: 해결책 요청 (핵심 예시!)\n질문: "집주인이 전세금 3억을 10억으로 올려달래. 법적으로 어떻게 해야 해?"\n의도: COMPREHENSIVE\n**CoT 분석**:\n1. 요구사항: 상황 설명 + 해결책 요청\n2. 복잡도: 높음 (구체적 상황 + 수치 비교)\n3. 의존성: 법률 확인 → 상황 분석 → 해결책 제시\n4. 검증: "법적으로"만 보고 search만 선택하면 불충분! 해결책 제시 필요\n\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "1단계: 법률 + 상황 분석 + 해결책 필요. 2단계: 고복잡도(3억→10억 비정상). 3단계: 순차(법률 확인 후 타당성 분석). 4단계: \'어떻게 해야\' = 단순 법률 조회 아님, 분석 필수",\n    "coordination": "sequential",\n    "confidence": 0.95\n}\n```\n\n## 응답 형식 (JSON)\n\n```json\n{\n    "selected_agents": ["선택된 agent/team 목록"],\n    "reasoning": "선택 이유를 구체적으로 설명. 각 Agent의 역할과 처리 순서 포함",\n    "coordination": "single/sequential/parallel/pipeline",\n    "dependencies": {"agent2": ["agent1"]},\n    "estimated_time": 30,\n    "confidence": 0.9\n}\n```\n\n## 선택 가이드라인\n\n1. **최소 Agent 원칙**: 가능한 적은 수의 Agent로 처리\n2. **전문성 우선**: 해당 작업에 가장 전문적인 Agent 선택\n3. **효율성 고려**: 병렬 처리 가능한 경우 명시\n4. **의존성 관리**: 데이터 흐름을 고려한 순서 지정\n5. **폴백 전략**: 불확실한 경우 ["search_team", "analysis_team"] 조합\n\n## 주의사항\n\n- selected_agents는 반드시 배열 형태\n- Agent 이름은 정확히: "search_team", "analysis_team", "document_team"\n- 최소 1개, 최대 3개 선택\n- 순서는 실행 우선순위 (앞에 있을수록 먼저 실행)\n- reasoning은 상세하고 논리적으로 작성\n- coordination 필드로 실행 방식 명시\n- 복합 질문의 경우 의존성 관계 명확히 표시'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 16:56:03,681 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 16:56:03,681 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 16:56:03,682 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 16:56:03,682 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 16:56:03,682 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 16:56:03,682 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 16:56:07,236 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 07:56:07 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'3348'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'3371'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9980'), (b'x-ratelimit-remaining-tokens', b'197888'), (b'x-ratelimit-reset-requests', b'2m49.231s'), (b'x-ratelimit-reset-tokens', b'633ms'), (b'x-request-id', b'req_5d78f76d4e844352bdad0310beabc113'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b5c3b0993ea9b-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 16:56:07,236 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 16:56:07,236 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 16:56:07,243 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 16:56:07,243 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 16:56:07,243 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 16:56:07,243 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 07:56:07 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '3348', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '3371', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9980', 'x-ratelimit-remaining-tokens': '197888', 'x-ratelimit-reset-requests': '2m49.231s', 'x-ratelimit-reset-tokens': '633ms', 'x-request-id': 'req_5d78f76d4e844352bdad0310beabc113', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b5c3b0993ea9b-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 16:56:07,243 - openai._base_client - DEBUG - request_id: req_5d78f76d4e844352bdad0310beabc113
2025-10-05 16:56:07,244 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: agent_selection | Model: gpt-4o-mini-2024-07-18 | Tokens: 2511 (prompt: 2360, completion: 151)
2025-10-05 16:56:07,244 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM agent selection reasoning: 1단계: 사용자는 용산구 아파트의 실거래가를 조회하고자 하므로, 단순한 시세 조회가 필요합니다. 2단계: 이는 단순 정보 조회로 분류되며, 복잡도가 낮습니다. 3단계: 독립적인 작업으로, search_team만으로 충분히 처리 가능합니다. 4단계: search_team이 아파트 실거래가 정보를 제공할 수 있으므로, 이 팀만으로도 질문에 대한 답변이 가능합니다.
2025-10-05 16:56:07,244 - app.service_agent.cognitive_agents.planning_agent - INFO - ✅ Primary LLM selected agents: ['search_team']
2025-10-05 16:56:07,244 - __main__ - INFO -   의도: 시세조회
2025-10-05 16:56:07,244 - __main__ - INFO -   신뢰도: 0.95
2025-10-05 16:56:07,244 - __main__ - INFO -   추천 Agent: ['search_team']
2025-10-05 16:56:07,244 - __main__ - INFO - 
[Step 2] Query Decomposition...
2025-10-05 16:56:07,244 - app.service_agent.cognitive_agents.query_decomposer - INFO - Decomposing query: 용산구 아파트 실거래가 조회...
2025-10-05 16:56:07,244 - app.service_agent.cognitive_agents.query_decomposer - INFO - Query is simple, no decomposition needed
2025-10-05 16:56:07,244 - __main__ - INFO -   복합 질문: False
2025-10-05 16:56:07,244 - __main__ - INFO -   작업 수: 1
2025-10-05 16:56:07,244 - __main__ - INFO -   실행 모드: sequential
2025-10-05 16:56:07,244 - __main__ - INFO - 
[Step 3] Execution Plan 생성...
2025-10-05 16:56:07,244 - app.service_agent.cognitive_agents.planning_agent - INFO - Creating execution plan for intent: 시세조회
2025-10-05 16:56:07,244 - app.service_agent.cognitive_agents.planning_agent - WARNING - AgentRegistry is empty, using default teams
2025-10-05 16:56:07,244 - app.service_agent.cognitive_agents.planning_agent - DEBUG - Suggested agents: ['search_team']
2025-10-05 16:56:07,244 - app.service_agent.cognitive_agents.planning_agent - DEBUG - Available agents: ['search_team', 'analysis_team', 'document_team']
2025-10-05 16:56:07,244 - app.service_agent.cognitive_agents.planning_agent - INFO - Selected agents/teams for execution: ['search_team']
2025-10-05 16:56:07,244 - __main__ - INFO -   전략: sequential
2025-10-05 16:56:07,244 - __main__ - INFO -   단계 수: 1
2025-10-05 16:56:07,244 - __main__ - INFO - 
✓ 테스트 성공 (소요시간: 6.45초)
2025-10-05 16:56:07,246 - __main__ - INFO - 
결과 저장: C:\kdy\Projects\holmesnyangz\beta_v001\backend\app\service_agent\reports\phase1_test_results.json
2025-10-05 16:56:07,246 - __main__ - INFO - 
================================================================================
2025-10-05 16:56:07,246 - __main__ - INFO - [16] 단일 질문 테스트: S016
2025-10-05 16:56:07,247 - __main__ - INFO - 질문: 신혼부부 특례 대출 조건은?
2025-10-05 16:56:07,247 - __main__ - INFO - ================================================================================
2025-10-05 16:56:07,247 - __main__ - INFO - 
[Step 1] Intent 분석...
2025-10-05 16:56:07,247 - app.service_agent.cognitive_agents.planning_agent - INFO - Analyzing intent for query: 신혼부부 특례 대출 조건은?...
2025-10-05 16:56:07,247 - app.service_agent.llm_manager.prompt_manager - DEBUG - Using cached prompt: intent_analysis
2025-10-05 16:56:07,247 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-45fec5f8-71c6-458c-a6f5-ef5225392334', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 의도 분석 전문가입니다.\n사용자의 질문을 정확히 이해하고, 어떤 종류의 도움이 필요한지 분류해야 합니다.\n\n## Chain-of-Thought 분석 프로세스\n\n질문을 분석할 때 다음 단계를 **순서대로** 따르세요:\n\n### 1단계: 질문 구조 파악\n- 단순 정보 요청인가? (예: "~이 뭐야?", "~알려줘")\n- 상황 설명이 포함되어 있는가? (배경, 현재 상태)\n- 구체적 수치나 데이터가 있는가? (금액, 비율, 기간 등)\n- 문제 해결을 요구하는가? (예: "어떻게 해야 해?", "방법 알려줘")\n\n### 2단계: 요청 유형 판단\n- **정보 확인형**: 사실, 개념, 규정 확인 → 검색만으로 충분\n- **평가/판단형**: "괜찮아?", "적절해?", "문제있어?" → 검색 + 분석 필요\n- **해결책 요청형**: "어떻게?", "방법?", "대처?" → 검색 + 분석 + 제안 필요\n- **비교/선택형**: "A vs B", "어느게 나아?" → 검색 + 분석(비교) 필요\n\n### 3단계: 복잡도 평가\n- **저**: 단일 개념/사실 확인 (예: "전세금 인상률 한도?")\n- **중**: 특정 상황 + 판단 (예: "3억을 5억으로 올려달래. 가능해?")\n- **고**: 복잡한 상황 + 여러 조건 + 해결책 (예: "10년 거주, 3억→10억 요구. 어떻게 해야 해?")\n\n### 4단계: 필요한 처리 결정\n- **검색만**: 정보 확인형 + 저복잡도\n- **검색+분석**: 평가/판단형 OR 중복잡도 OR 수치 비교 포함\n- **종합처리**: 해결책 요청형 OR 고복잡도 OR 여러 조건 동시 고려\n\n### 5단계: 최종 검증\n- 선택한 의도로 사용자 질문에 완전히 답변 가능한가?\n- 단순 정보 제공으로 끝나는가, 아니면 추가 분석/판단이 필요한가?\n- 상황 설명이 있으면서 "해결", "방법", "어떻게" 등이 있으면 → COMPREHENSIVE 고려\n\n## 중요: 복합 질문 처리\n복합적인 질문(여러 의도가 섞인 질문)의 경우, 가장 핵심적인 의도를 파악하되,\nsub_intents 필드에 부가적인 의도들도 함께 기록해주세요.\n\n**특히 주의**:\n- 법률 키워드가 있어도, "해결방법", "어떻게 해야" 같은 표현이 있으면 단순 LEGAL_CONSULT가 아닐 수 있음\n- 구체적 상황(금액, 기간 등) + 해결책 요구 = COMPREHENSIVE 또는 복합 의도로 분류\n\n## 분류 카테고리 설명:\n\n1. **LEGAL_CONSULT (법률상담)**\n   - 설명: 부동산 관련 법률, 권리, 의무에 대한 질문\n   - 예시:\n     * 단순: "전세금 5% 인상이 가능한가요?", "임대차계약 갱신 거부할 수 있나요?"\n     * 복합: "전세금 인상 가능한지 확인하고 법적 근거도 알려주세요"\n   - 키워드: 법, 전세, 임대, 보증금, 계약, 권리, 의무, 갱신, 임차인, 임대인, 법률, 규정, 조항\n   - 필요한 처리: 법률 데이터베이스 검색, 관련 법조항 찾기\n\n2. **MARKET_INQUIRY (시세조회)**\n   - 설명: 부동산 시장 가격, 시세, 거래 동향에 대한 질문\n   - 예시:\n     * 단순: "강남구 아파트 전세 시세 알려주세요", "서초동 매매가 얼마나 올랐나요?"\n     * 복합: "강남구 시세 확인하고 대출 가능 금액도 계산해줘"\n   - 키워드: 시세, 가격, 매매가, 전세가, 월세, 시장, 동향, 평균, 지역명, 상승률, 하락률\n   - 필요한 처리: 부동산 시세 데이터 조회, 지역별 가격 분석\n\n3. **LOAN_CONSULT (대출상담)**\n   - 설명: 주택담보대출, 전세자금대출 등 금융 관련 질문\n   - 예시:\n     * 단순: "전세자금대출 한도가 얼마인가요?", "LTV가 뭔가요?"\n     * 복합: "대출 한도 확인하고 금리 비교도 해주세요"\n   - 키워드: 대출, 금리, 한도, 조건, 상환, LTV, DTI, DSR, 담보, 금융, 은행\n   - 필요한 처리: 대출 상품 조회, 금리 정보 검색, 한도 계산\n\n4. **CONTRACT_CREATION (계약서작성)**\n   - 설명: 새로운 계약서나 문서를 작성해달라는 요청\n   - 예시:\n     * 단순: "임대차계약서 작성해주세요", "전세계약서 초안 만들어주세요"\n     * 복합: "계약서 작성하고 주의사항도 검토해주세요"\n   - 키워드: 작성, 만들, 생성, 초안, 계약서, 문서, 양식\n   - 필요한 처리: 문서 생성 에이전트 호출, 템플릿 기반 작성\n\n5. **CONTRACT_REVIEW (계약서검토)**\n   - 설명: 기존 계약서나 문서를 검토해달라는 요청\n   - 예시:\n     * 단순: "이 계약서 검토해주세요", "특약사항 문제없나요?"\n     * 복합: "계약서 검토하고 수정사항도 제안해주세요"\n   - 키워드: 검토, 확인, 점검, 리뷰, 분석해, 살펴봐, 체크\n   - 필요한 처리: 문서 분석, 위험 요소 식별, 개선사항 제안\n\n6. **COMPREHENSIVE (종합분석)**\n   - 설명: 여러 측면을 종합적으로 분석해달라는 요청, 또는 복잡한 상황에 대한 해결책 요청\n   - 예시:\n     * 단순: "이 물건 전체적으로 분석해주세요"\n     * 복합: "시세, 법률, 대출 모두 검토해서 종합 의견 주세요"\n     * 해결형: "10년 거주했는데 전세금 3억을 10억으로 올려달래. 어떻게 해야 해?"\n     * 상황+해결: "집주인이 계약 갱신 거부했어. 법적으로 어떻게 대응해야 할까?"\n   - 키워드: 종합, 전체, 모든, 전반적, 종합적, 평가, 분석, 어떻게, 방법, 해결, 대처\n   - 패턴: 구체적 상황 설명 + "어떻게/방법/해결" 요청\n   - 필요한 처리: 다중 데이터 소스 통합 분석, 상황 평가, 해결책 제시\n\n7. **RISK_ANALYSIS (리스크분석)**\n   - 설명: 위험 요소나 주의사항에 대한 질문\n   - 예시:\n     * 단순: "이 계약 위험한가요?", "주의할 점 알려주세요"\n     * 복합: "리스크 분석하고 대안도 제시해주세요"\n   - 키워드: 위험, 리스크, 주의, 문제점, 조심, 걱정, 우려\n   - 필요한 처리: 위험 요소 분석, 주의사항 추출\n\n8. **UNCLEAR (불분명)**\n   - 설명: 의도를 명확히 파악하기 어려운 질문\n   - 예시: "이거 좀 봐주세요", "어떻게 해야 할까요?", "도와주세요"\n   - 처리: 추가 질문으로 의도 명확화 필요\n\n9. **IRRELEVANT (무관)**\n   - 설명: 부동산과 전혀 관련 없는 질문\n   - 예시: "날씨 어때?", "저녁 뭐 먹지?", "주식 추천해줘"\n   - 처리: 부동산 관련 질문을 유도\n\n## 복합 질문 예시와 분석 (CoT 적용):\n\n### 예시 1: "강남구 아파트 시세 알려주고 전세자금대출 가능한지도 확인해줘"\n**CoT 분석**:\n1. 구조: 두 개의 요청 ("시세" + "대출")\n2. 유형: 정보 확인형 (둘 다)\n3. 복잡도: 중 (두 가지 독립적 조회)\n4. 필요 처리: 검색 + 계산/분석\n\n**결론**:\n- 주 의도: MARKET_INQUIRY (시세 조회가 먼저 필요)\n- 부가 의도: LOAN_CONSULT (대출 확인)\n- 분해: ["강남구 아파트 시세 조회", "전세자금대출 가능 여부 확인"]\n\n### 예시 2: "이 계약서 검토해서 위험한 부분 있는지 알려주고 수정 제안도 해줘"\n**CoT 분석**:\n1. 구조: 검토 + 위험 평가 + 수정안\n2. 유형: 평가/판단형 + 해결책 요청형\n3. 복잡도: 고 (3단계 처리)\n4. 필요 처리: 검토 + 분석 + 문서 생성\n\n**결론**:\n- 주 의도: CONTRACT_REVIEW (계약서 검토)\n- 부가 의도: RISK_ANALYSIS (위험 분석)\n- 분해: ["계약서 전체 검토", "위험 요소 식별", "수정사항 제안"]\n\n### 예시 3: "집주인이 짜증나, 10년 살았는데 전세금 3억을 10억으로 올려달래. 법적으로 해결방법 알려줘"\n**CoT 분석**:\n1. 구조: 상황 설명 (10년 거주, 3억→10억) + 해결책 요청\n2. 유형: 해결책 요청형 (단순 정보 X)\n3. 복잡도: 고 (구체적 상황 + 수치 비교 + 법률 + 대응방안)\n4. 필요 처리: 법률 검색 + 상황 분석 + 해결책 제시\n\n**결론**:\n- 주 의도: COMPREHENSIVE (복잡한 상황에 대한 종합 해결)\n- 부가 의도: LEGAL_CONSULT, RISK_ANALYSIS\n- 분해: ["전세금 인상 한도 법률 조회", "3억→10억 인상의 타당성 분석", "구체적 대응 방안 제시"]\n- **이유**: "법적으로"라는 키워드가 있지만, 단순 법률 확인이 아니라 구체적 상황에 대한 해결책을 요구하므로 COMPREHENSIVE\n\n### 예시 4: "전세금 인상률 상한이 얼마야?"\n**CoT 분석**:\n1. 구조: 단순 사실 확인\n2. 유형: 정보 확인형\n3. 복잡도: 저 (단일 개념)\n4. 필요 처리: 검색만\n\n**결론**:\n- 주 의도: LEGAL_CONSULT (법률 정보 조회)\n- 부가 의도: 없음\n- 분해: 필요 없음\n\n## 응답 형식 (JSON 형식으로 응답):\n\n```json\n{\n    "intent": "LEGAL_CONSULT",\n    "confidence": 0.9,\n    "keywords": ["전세금", "인상", "제한"],\n    "sub_intents": [],\n    "is_compound": false,\n    "decomposed_tasks": [],\n    "entities": {\n        "location": "강남구",\n        "price": "5억",\n        "contract_type": "전세",\n        "date": "2024년",\n        "area": "84㎡",\n        "action_verbs": ["확인", "검토"]\n    },\n    "reasoning": "전세금 인상에 대한 법률 질문이므로 LEGAL_CONSULT로 분류"\n}\n```\n\n응답 규칙:\n- intent: 위 9개 카테고리 중 하나 (대문자_언더스코어 형식)\n- confidence: 0.0~1.0 (0.8 이상이면 매우 확실, 0.5 미만이면 불확실)\n- keywords: 추출된 주요 키워드 목록\n- sub_intents: 복합 질문일 경우 부가적인 의도들\n- is_compound: 복합 질문 여부 (true/false)\n- decomposed_tasks: 복합 질문을 분해한 개별 작업들\n- entities: 추출된 엔티티 정보\n- reasoning: **반드시 CoT 5단계를 거쳐 분석한 과정을 포함** (구조 파악 → 유형 판단 → 복잡도 평가 → 필요 처리 → 최종 검증)\n\n## reasoning 작성 예시:\n"1단계(구조): 상황 설명(10년 거주, 3억→10억) + 해결책 요청 포함.\n2단계(유형): 해결책 요청형 - 단순 정보가 아닌 대응방안 필요.\n3단계(복잡도): 고 - 구체적 수치 비교와 복잡한 상황.\n4단계(처리): 법률 검색 + 상황 분석 + 해결책 제시 필요.\n5단계(검증): LEGAL_CONSULT만으로는 불충분, 종합적 분석 필요 → COMPREHENSIVE 선택"\n\n## 판단 가이드:\n- 여러 의도가 섞여있다면, 가장 주된 의도를 intent에, 나머지를 sub_intents에 기록\n- "그리고", "또한", "함께", "같이" 등의 연결어가 있으면 복합 질문일 가능성 높음\n- 법률 관련 키워드가 있으면 LEGAL_CONSULT 우선\n- 가격/시세 언급이 명확하면 MARKET_INQUIRY\n- 계약서라는 단어와 함께 "작성/만들기"가 있으면 CONTRACT_CREATION\n- 계약서라는 단어와 함께 "검토/확인"이 있으면 CONTRACT_REVIEW\n- 불확실하면 confidence를 낮게 설정하고 UNCLEAR 선택\n- 복합 질문은 is_compound를 true로 설정하고 개별 작업으로 분해\n\n분석할 질문: 신혼부부 특례 대출 조건은?'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 16:56:07,248 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 16:56:07,248 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 16:56:07,248 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 16:56:07,248 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 16:56:07,248 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 16:56:07,248 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 16:56:10,446 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 07:56:10 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'2985'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'3010'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9979'), (b'x-ratelimit-remaining-tokens', b'197246'), (b'x-ratelimit-reset-requests', b'2m54.297s'), (b'x-ratelimit-reset-tokens', b'826ms'), (b'x-request-id', b'req_dcc2eea439b547af8a1d0828a713cb23'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b5c5148a9ea9b-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 16:56:10,447 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 16:56:10,447 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 16:56:10,450 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 16:56:10,450 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 16:56:10,450 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 16:56:10,450 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 07:56:10 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '2985', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '3010', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9979', 'x-ratelimit-remaining-tokens': '197246', 'x-ratelimit-reset-requests': '2m54.297s', 'x-ratelimit-reset-tokens': '826ms', 'x-request-id': 'req_dcc2eea439b547af8a1d0828a713cb23', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b5c5148a9ea9b-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 16:56:10,450 - openai._base_client - DEBUG - request_id: req_dcc2eea439b547af8a1d0828a713cb23
2025-10-05 16:56:10,450 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: intent_analysis | Model: gpt-4o-mini-2024-07-18 | Tokens: 3396 (prompt: 3180, completion: 216)
2025-10-05 16:56:10,450 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM Intent Analysis Result: {'intent': 'LOAN_CONSULT', 'confidence': 0.85, 'keywords': ['신혼부부', '특례', '대출', '조건'], 'sub_intents': [], 'is_compound': False, 'decomposed_tasks': [], 'entities': {'loan_type': '신혼부부 특례 대출', 'action_verbs': ['알려줘', '확인']}, 'reasoning': '1단계(구조): 단순 정보 요청으로 대출 조건에 대한 질문. 2단계(유형): 정보 확인형 - 대출 조건에 대한 사실 확인 필요. 3단계(복잡도): 저 - 단일 개념 확인. 4단계(처리): 대출 조건에 대한 정보 검색만 필요. 5단계(검증): 신혼부부 특례 대출 조건에 대한 정보 요청이므로 LOAN_CONSULT로 분류.'}
2025-10-05 16:56:10,450 - app.service_agent.llm_manager.prompt_manager - DEBUG - Using cached prompt: agent_selection
2025-10-05 16:56:10,451 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-9397af22-ee0b-4b59-b44f-eb0d50490657', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 Agent 선택 전문가입니다.\n사용자의 요청에 가장 적합한 Agent/Team을 선택하는 것이 목표입니다.\n\n## 현재 상황\n\n**사용자 질문:** 신혼부부 특례 대출 조건은?\n**분석된 의도:** 대출상담\n**추출된 키워드:** [\'신혼부부\', \'특례\', \'대출\', \'조건\']\n\n## 사용 가능한 Agent/Team 정보\n\n{\'search_team\': {\'name\': \'search_team\', \'capabilities\': \'법률 검색, 부동산 시세 조회, 대출 상품 검색\', \'tools\': [\'legal_search\', \'market_data\', \'loan_data\'], \'use_cases\': [\'법률 상담\', \'시세 조회\', \'대출 정보\']}, \'analysis_team\': {\'name\': \'analysis_team\', \'capabilities\': \'데이터 분석, 리스크 평가, 인사이트 생성, 추천\', \'tools\': [\'data_analyzer\', \'risk_evaluator\'], \'use_cases\': [\'시장 분석\', \'리스크 평가\', \'투자 분석\']}, \'document_team\': {\'name\': \'document_team\', \'capabilities\': \'계약서 작성, 문서 생성, 문서 검토\', \'tools\': [\'document_generator\', \'contract_reviewer\'], \'use_cases\': [\'계약서 작성\', \'문서 검토\']}}\n\n## Agent 역할 및 상세 가이드\n\n### 1. search_team (검색 팀)\n- **주요 기능**: 정보 검색 및 데이터 수집\n- **전문 분야**:\n  * 법률 정보 검색 (전세법, 임대차보호법, 부동산 관련 법규)\n  * 부동산 시세 조회 (매매가, 전세가, 월세, 실거래가)\n  * 대출 상품 정보 검색 (금리, 한도, 조건)\n  * 지역 정보 및 인프라 조회\n- **도구**: legal_search, market_data, loan_data\n- **적합한 작업**: 정보 조회, 데이터 수집, 법률 확인, 시세 파악\n- **예시**:\n  * "전세금 5% 인상 가능한가요?"\n  * "강남구 아파트 전세 시세"\n  * "전세자금대출 한도 얼마?"\n\n### 2. analysis_team (분석 팀)\n- **주요 기능**: 데이터 분석 및 평가\n- **전문 분야**:\n  * 시장 동향 분석 (상승률, 하락률, 추세)\n  * 리스크 평가 (계약, 투자 위험도)\n  * 투자 수익률 계산 (ROI, 월세 수익률)\n  * 대출 한도 및 조건 분석 (LTV, DTI, DSR)\n  * 비교 분석 (지역별, 상품별)\n- **도구**: data_analyzer, risk_evaluator, calculator\n- **적합한 작업**: 데이터 분석, 리스크 평가, 계산, 비교, 예측\n- **의존성**: 보통 search_team의 데이터가 필요\n- **예시**:\n  * "이 지역 투자 가치 분석해줘"\n  * "계약 리스크 평가해줘"\n  * "대출 가능 금액 계산해줘"\n\n### 3. document_team (문서 팀)\n- **주요 기능**: 문서 생성 및 관리\n- **전문 분야**:\n  * 계약서 작성 (임대차, 매매, 전세)\n  * 문서 템플릿 관리\n  * 특약사항 생성\n  * 계약서 수정안 작성\n  * 법률 문서 검토\n- **도구**: document_generator, contract_template, contract_reviewer\n- **적합한 작업**: 문서 작성, 계약서 생성, 문서 수정, 검토\n- **예시**:\n  * "임대차계약서 작성해줘"\n  * "특약사항 추가해줘"\n  * "계약서 수정안 만들어줘"\n\n## Chain-of-Thought Agent 선택 프로세스\n\n다음 단계를 **순서대로** 따라 최적의 Agent 조합을 선택하세요:\n\n### 1단계: 질문 요구사항 파악\n- 단순 정보 조회인가? → search_team만 필요\n- 판단/평가가 필요한가? → search + analysis 필요\n- 해결책 제시가 필요한가? → search + analysis 필요\n- 문서 생성이 필요한가? → document_team 추가\n\n### 2단계: 작업 복잡도 판단\n- **단순** (검색만): "~이 뭐야?", "~알려줘" → search_team\n- **중간** (검색+판단): "~괜찮아?", "~적절해?" → search + analysis\n- **복잡** (종합 해결): 구체적 상황 + "어떻게 해야 해?" → search + analysis\n\n### 3단계: 의존성 분석\n- 독립적 작업: 단일 팀으로 처리 가능\n- 순차적 의존: 이전 결과 필요 → 여러 팀 순서대로\n- 병렬 가능: 동시 조회 가능 → coordination: "parallel"\n\n### 4단계: 최종 검증\n- 선택한 팀들로 질문에 완전히 답변 가능한가?\n- 불필요한 팀이 포함되지 않았는가?\n- 순서가 논리적인가? (데이터 흐름 고려)\n\n### 중요 원칙:\n- **법률 키워드만으로 판단하지 말 것**: "법적으로 어떻게 해야 해?" = 법률 검색 + 분석 필요\n- **상황 설명 + 해결책 요청** = 반드시 analysis_team 포함\n- **구체적 수치 비교** (3억→10억 같은) = analysis_team 필요\n\n## 의도별 Agent 매핑 가이드 (기본 가이드 - CoT로 조정 가능)\n\n| 의도 (Intent) | 기본 조합 | 상황별 조정 |\n|--------------|-----------|-------------|\n| LEGAL_CONSULT | ["search_team"] | 해결책 요청시 → + analysis_team |\n| MARKET_INQUIRY | ["search_team"] | 비교/평가시 → + analysis_team |\n| LOAN_CONSULT | ["search_team", "analysis_team"] | 계산 필수 |\n| CONTRACT_CREATION | ["document_team"] | 검토 후 작성 → search + document |\n| CONTRACT_REVIEW | ["search_team", "analysis_team"] | 법률 검토 + 리스크 분석 |\n| COMPREHENSIVE | ["search_team", "analysis_team"] | **항상 분석 포함** |\n| RISK_ANALYSIS | ["analysis_team"] | 법률 근거 필요시 → search + analysis |\n| UNCLEAR | ["search_team", "analysis_team"] | 포괄적 대응 |\n\n**중요**: 위 매핑은 **기본 가이드**일 뿐입니다.\n실제 질문의 내용(CoT 분석 결과)에 따라 조정하세요!\n\n## 복합 질문 처리 예시 (CoT 적용)\n\n### 예시 1: 순차적 처리\n질문: "강남구 시세 확인하고 투자 가치 분석해줘"\n**CoT 분석**:\n1. 요구사항: 시세 조회 + 투자 가치 평가\n2. 복잡도: 중간 (검색 + 분석)\n3. 의존성: 시세 데이터 → 투자 분석 (순차)\n4. 검증: search만으로는 "투자 가치 평가" 불가능\n\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "1단계: 시세 조회+투자 평가 필요. 2단계: 중간 복잡도. 3단계: 순차 의존. 4단계: search로 시세 수집 후 analysis로 투자 가치 평가 필요",\n    "coordination": "sequential"\n}\n```\n\n### 예시 2: 단순 정보 조회\n질문: "전세금 인상률 한도가 얼마야?"\n**CoT 분석**:\n1. 요구사항: 단순 사실 확인\n2. 복잡도: 낮음 (정보 확인형)\n3. 의존성: 없음\n4. 검증: search_team만으로 충분\n\n```json\n{\n    "selected_agents": ["search_team"],\n    "reasoning": "1단계: 단순 정보 조회. 2단계: 저복잡도. 3단계: 독립적. 4단계: 법률 검색만으로 답변 가능",\n    "coordination": "single"\n}\n```\n\n### 예시 3: 해결책 요청 (핵심 예시!)\n질문: "집주인이 전세금 3억을 10억으로 올려달래. 법적으로 어떻게 해야 해?"\n의도: COMPREHENSIVE\n**CoT 분석**:\n1. 요구사항: 상황 설명 + 해결책 요청\n2. 복잡도: 높음 (구체적 상황 + 수치 비교)\n3. 의존성: 법률 확인 → 상황 분석 → 해결책 제시\n4. 검증: "법적으로"만 보고 search만 선택하면 불충분! 해결책 제시 필요\n\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "1단계: 법률 + 상황 분석 + 해결책 필요. 2단계: 고복잡도(3억→10억 비정상). 3단계: 순차(법률 확인 후 타당성 분석). 4단계: \'어떻게 해야\' = 단순 법률 조회 아님, 분석 필수",\n    "coordination": "sequential",\n    "confidence": 0.95\n}\n```\n\n## 응답 형식 (JSON)\n\n```json\n{\n    "selected_agents": ["선택된 agent/team 목록"],\n    "reasoning": "선택 이유를 구체적으로 설명. 각 Agent의 역할과 처리 순서 포함",\n    "coordination": "single/sequential/parallel/pipeline",\n    "dependencies": {"agent2": ["agent1"]},\n    "estimated_time": 30,\n    "confidence": 0.9\n}\n```\n\n## 선택 가이드라인\n\n1. **최소 Agent 원칙**: 가능한 적은 수의 Agent로 처리\n2. **전문성 우선**: 해당 작업에 가장 전문적인 Agent 선택\n3. **효율성 고려**: 병렬 처리 가능한 경우 명시\n4. **의존성 관리**: 데이터 흐름을 고려한 순서 지정\n5. **폴백 전략**: 불확실한 경우 ["search_team", "analysis_team"] 조합\n\n## 주의사항\n\n- selected_agents는 반드시 배열 형태\n- Agent 이름은 정확히: "search_team", "analysis_team", "document_team"\n- 최소 1개, 최대 3개 선택\n- 순서는 실행 우선순위 (앞에 있을수록 먼저 실행)\n- reasoning은 상세하고 논리적으로 작성\n- coordination 필드로 실행 방식 명시\n- 복합 질문의 경우 의존성 관계 명확히 표시'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 16:56:10,451 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 16:56:10,451 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 16:56:10,452 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 16:56:10,452 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 16:56:10,452 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 16:56:10,452 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 16:56:16,229 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 07:56:16 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'5579'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'5597'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9979'), (b'x-ratelimit-remaining-tokens', b'197890'), (b'x-ratelimit-reset-requests', b'2m59.743s'), (b'x-ratelimit-reset-tokens', b'633ms'), (b'x-request-id', b'req_837922690e8a4df89c5fbab33aba78b1'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b5c655bfcea9b-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 16:56:16,230 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 16:56:16,230 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 16:56:16,231 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 16:56:16,231 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 16:56:16,231 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 16:56:16,232 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 07:56:16 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '5579', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '5597', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9979', 'x-ratelimit-remaining-tokens': '197890', 'x-ratelimit-reset-requests': '2m59.743s', 'x-ratelimit-reset-tokens': '633ms', 'x-request-id': 'req_837922690e8a4df89c5fbab33aba78b1', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b5c655bfcea9b-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 16:56:16,232 - openai._base_client - DEBUG - request_id: req_837922690e8a4df89c5fbab33aba78b1
2025-10-05 16:56:16,232 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: agent_selection | Model: gpt-4o-mini-2024-07-18 | Tokens: 2559 (prompt: 2360, completion: 199)
2025-10-05 16:56:16,232 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM agent selection reasoning: 1단계: 신혼부부 특례 대출 조건에 대한 정보 조회와 함께 대출 조건의 적절성을 평가해야 하므로 search_team과 analysis_team이 필요합니다. 2단계: 대출 조건에 대한 정보 조회와 분석이 필요하므로 중간 복잡도로 판단됩니다. 3단계: 대출 조건을 확인한 후, 그 조건이 신혼부부에게 적합한지 분석해야 하므로 순차적 의존성이 있습니다. 4단계: 단순히 대출 조건을 조회하는 것만으로는 충분하지 않으며, 조건의 적절성을 평가하기 위해 analysis_team이 필요합니다.
2025-10-05 16:56:16,232 - app.service_agent.cognitive_agents.planning_agent - INFO - ✅ Primary LLM selected agents: ['search_team', 'analysis_team']
2025-10-05 16:56:16,232 - __main__ - INFO -   의도: 대출상담
2025-10-05 16:56:16,232 - __main__ - INFO -   신뢰도: 0.85
2025-10-05 16:56:16,232 - __main__ - INFO -   추천 Agent: ['search_team', 'analysis_team']
2025-10-05 16:56:16,232 - __main__ - INFO - 
[Step 2] Query Decomposition...
2025-10-05 16:56:16,232 - app.service_agent.cognitive_agents.query_decomposer - INFO - Decomposing query: 신혼부부 특례 대출 조건은?...
2025-10-05 16:56:16,232 - app.service_agent.cognitive_agents.query_decomposer - INFO - Query is simple, no decomposition needed
2025-10-05 16:56:16,232 - __main__ - INFO -   복합 질문: False
2025-10-05 16:56:16,232 - __main__ - INFO -   작업 수: 1
2025-10-05 16:56:16,232 - __main__ - INFO -   실행 모드: sequential
2025-10-05 16:56:16,232 - __main__ - INFO - 
[Step 3] Execution Plan 생성...
2025-10-05 16:56:16,232 - app.service_agent.cognitive_agents.planning_agent - INFO - Creating execution plan for intent: 대출상담
2025-10-05 16:56:16,232 - app.service_agent.cognitive_agents.planning_agent - WARNING - AgentRegistry is empty, using default teams
2025-10-05 16:56:16,232 - app.service_agent.cognitive_agents.planning_agent - DEBUG - Suggested agents: ['search_team', 'analysis_team']
2025-10-05 16:56:16,232 - app.service_agent.cognitive_agents.planning_agent - DEBUG - Available agents: ['search_team', 'analysis_team', 'document_team']
2025-10-05 16:56:16,232 - app.service_agent.cognitive_agents.planning_agent - INFO - Selected agents/teams for execution: ['search_team', 'analysis_team']
2025-10-05 16:56:16,232 - __main__ - INFO -   전략: sequential
2025-10-05 16:56:16,233 - __main__ - INFO -   단계 수: 2
2025-10-05 16:56:16,233 - __main__ - INFO - 
✓ 테스트 성공 (소요시간: 8.99초)
2025-10-05 16:56:16,233 - __main__ - INFO - 
================================================================================
2025-10-05 16:56:16,233 - __main__ - INFO - [17] 단일 질문 테스트: S017
2025-10-05 16:56:16,233 - __main__ - INFO - 질문: 계약금 환불 가능한가요?
2025-10-05 16:56:16,233 - __main__ - INFO - ================================================================================
2025-10-05 16:56:16,233 - __main__ - INFO - 
[Step 1] Intent 분석...
2025-10-05 16:56:16,233 - app.service_agent.cognitive_agents.planning_agent - INFO - Analyzing intent for query: 계약금 환불 가능한가요?...
2025-10-05 16:56:16,233 - app.service_agent.llm_manager.prompt_manager - DEBUG - Using cached prompt: intent_analysis
2025-10-05 16:56:16,233 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-5ef5d9b7-f3ef-463e-92f8-f19d6e60bfdc', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 의도 분석 전문가입니다.\n사용자의 질문을 정확히 이해하고, 어떤 종류의 도움이 필요한지 분류해야 합니다.\n\n## Chain-of-Thought 분석 프로세스\n\n질문을 분석할 때 다음 단계를 **순서대로** 따르세요:\n\n### 1단계: 질문 구조 파악\n- 단순 정보 요청인가? (예: "~이 뭐야?", "~알려줘")\n- 상황 설명이 포함되어 있는가? (배경, 현재 상태)\n- 구체적 수치나 데이터가 있는가? (금액, 비율, 기간 등)\n- 문제 해결을 요구하는가? (예: "어떻게 해야 해?", "방법 알려줘")\n\n### 2단계: 요청 유형 판단\n- **정보 확인형**: 사실, 개념, 규정 확인 → 검색만으로 충분\n- **평가/판단형**: "괜찮아?", "적절해?", "문제있어?" → 검색 + 분석 필요\n- **해결책 요청형**: "어떻게?", "방법?", "대처?" → 검색 + 분석 + 제안 필요\n- **비교/선택형**: "A vs B", "어느게 나아?" → 검색 + 분석(비교) 필요\n\n### 3단계: 복잡도 평가\n- **저**: 단일 개념/사실 확인 (예: "전세금 인상률 한도?")\n- **중**: 특정 상황 + 판단 (예: "3억을 5억으로 올려달래. 가능해?")\n- **고**: 복잡한 상황 + 여러 조건 + 해결책 (예: "10년 거주, 3억→10억 요구. 어떻게 해야 해?")\n\n### 4단계: 필요한 처리 결정\n- **검색만**: 정보 확인형 + 저복잡도\n- **검색+분석**: 평가/판단형 OR 중복잡도 OR 수치 비교 포함\n- **종합처리**: 해결책 요청형 OR 고복잡도 OR 여러 조건 동시 고려\n\n### 5단계: 최종 검증\n- 선택한 의도로 사용자 질문에 완전히 답변 가능한가?\n- 단순 정보 제공으로 끝나는가, 아니면 추가 분석/판단이 필요한가?\n- 상황 설명이 있으면서 "해결", "방법", "어떻게" 등이 있으면 → COMPREHENSIVE 고려\n\n## 중요: 복합 질문 처리\n복합적인 질문(여러 의도가 섞인 질문)의 경우, 가장 핵심적인 의도를 파악하되,\nsub_intents 필드에 부가적인 의도들도 함께 기록해주세요.\n\n**특히 주의**:\n- 법률 키워드가 있어도, "해결방법", "어떻게 해야" 같은 표현이 있으면 단순 LEGAL_CONSULT가 아닐 수 있음\n- 구체적 상황(금액, 기간 등) + 해결책 요구 = COMPREHENSIVE 또는 복합 의도로 분류\n\n## 분류 카테고리 설명:\n\n1. **LEGAL_CONSULT (법률상담)**\n   - 설명: 부동산 관련 법률, 권리, 의무에 대한 질문\n   - 예시:\n     * 단순: "전세금 5% 인상이 가능한가요?", "임대차계약 갱신 거부할 수 있나요?"\n     * 복합: "전세금 인상 가능한지 확인하고 법적 근거도 알려주세요"\n   - 키워드: 법, 전세, 임대, 보증금, 계약, 권리, 의무, 갱신, 임차인, 임대인, 법률, 규정, 조항\n   - 필요한 처리: 법률 데이터베이스 검색, 관련 법조항 찾기\n\n2. **MARKET_INQUIRY (시세조회)**\n   - 설명: 부동산 시장 가격, 시세, 거래 동향에 대한 질문\n   - 예시:\n     * 단순: "강남구 아파트 전세 시세 알려주세요", "서초동 매매가 얼마나 올랐나요?"\n     * 복합: "강남구 시세 확인하고 대출 가능 금액도 계산해줘"\n   - 키워드: 시세, 가격, 매매가, 전세가, 월세, 시장, 동향, 평균, 지역명, 상승률, 하락률\n   - 필요한 처리: 부동산 시세 데이터 조회, 지역별 가격 분석\n\n3. **LOAN_CONSULT (대출상담)**\n   - 설명: 주택담보대출, 전세자금대출 등 금융 관련 질문\n   - 예시:\n     * 단순: "전세자금대출 한도가 얼마인가요?", "LTV가 뭔가요?"\n     * 복합: "대출 한도 확인하고 금리 비교도 해주세요"\n   - 키워드: 대출, 금리, 한도, 조건, 상환, LTV, DTI, DSR, 담보, 금융, 은행\n   - 필요한 처리: 대출 상품 조회, 금리 정보 검색, 한도 계산\n\n4. **CONTRACT_CREATION (계약서작성)**\n   - 설명: 새로운 계약서나 문서를 작성해달라는 요청\n   - 예시:\n     * 단순: "임대차계약서 작성해주세요", "전세계약서 초안 만들어주세요"\n     * 복합: "계약서 작성하고 주의사항도 검토해주세요"\n   - 키워드: 작성, 만들, 생성, 초안, 계약서, 문서, 양식\n   - 필요한 처리: 문서 생성 에이전트 호출, 템플릿 기반 작성\n\n5. **CONTRACT_REVIEW (계약서검토)**\n   - 설명: 기존 계약서나 문서를 검토해달라는 요청\n   - 예시:\n     * 단순: "이 계약서 검토해주세요", "특약사항 문제없나요?"\n     * 복합: "계약서 검토하고 수정사항도 제안해주세요"\n   - 키워드: 검토, 확인, 점검, 리뷰, 분석해, 살펴봐, 체크\n   - 필요한 처리: 문서 분석, 위험 요소 식별, 개선사항 제안\n\n6. **COMPREHENSIVE (종합분석)**\n   - 설명: 여러 측면을 종합적으로 분석해달라는 요청, 또는 복잡한 상황에 대한 해결책 요청\n   - 예시:\n     * 단순: "이 물건 전체적으로 분석해주세요"\n     * 복합: "시세, 법률, 대출 모두 검토해서 종합 의견 주세요"\n     * 해결형: "10년 거주했는데 전세금 3억을 10억으로 올려달래. 어떻게 해야 해?"\n     * 상황+해결: "집주인이 계약 갱신 거부했어. 법적으로 어떻게 대응해야 할까?"\n   - 키워드: 종합, 전체, 모든, 전반적, 종합적, 평가, 분석, 어떻게, 방법, 해결, 대처\n   - 패턴: 구체적 상황 설명 + "어떻게/방법/해결" 요청\n   - 필요한 처리: 다중 데이터 소스 통합 분석, 상황 평가, 해결책 제시\n\n7. **RISK_ANALYSIS (리스크분석)**\n   - 설명: 위험 요소나 주의사항에 대한 질문\n   - 예시:\n     * 단순: "이 계약 위험한가요?", "주의할 점 알려주세요"\n     * 복합: "리스크 분석하고 대안도 제시해주세요"\n   - 키워드: 위험, 리스크, 주의, 문제점, 조심, 걱정, 우려\n   - 필요한 처리: 위험 요소 분석, 주의사항 추출\n\n8. **UNCLEAR (불분명)**\n   - 설명: 의도를 명확히 파악하기 어려운 질문\n   - 예시: "이거 좀 봐주세요", "어떻게 해야 할까요?", "도와주세요"\n   - 처리: 추가 질문으로 의도 명확화 필요\n\n9. **IRRELEVANT (무관)**\n   - 설명: 부동산과 전혀 관련 없는 질문\n   - 예시: "날씨 어때?", "저녁 뭐 먹지?", "주식 추천해줘"\n   - 처리: 부동산 관련 질문을 유도\n\n## 복합 질문 예시와 분석 (CoT 적용):\n\n### 예시 1: "강남구 아파트 시세 알려주고 전세자금대출 가능한지도 확인해줘"\n**CoT 분석**:\n1. 구조: 두 개의 요청 ("시세" + "대출")\n2. 유형: 정보 확인형 (둘 다)\n3. 복잡도: 중 (두 가지 독립적 조회)\n4. 필요 처리: 검색 + 계산/분석\n\n**결론**:\n- 주 의도: MARKET_INQUIRY (시세 조회가 먼저 필요)\n- 부가 의도: LOAN_CONSULT (대출 확인)\n- 분해: ["강남구 아파트 시세 조회", "전세자금대출 가능 여부 확인"]\n\n### 예시 2: "이 계약서 검토해서 위험한 부분 있는지 알려주고 수정 제안도 해줘"\n**CoT 분석**:\n1. 구조: 검토 + 위험 평가 + 수정안\n2. 유형: 평가/판단형 + 해결책 요청형\n3. 복잡도: 고 (3단계 처리)\n4. 필요 처리: 검토 + 분석 + 문서 생성\n\n**결론**:\n- 주 의도: CONTRACT_REVIEW (계약서 검토)\n- 부가 의도: RISK_ANALYSIS (위험 분석)\n- 분해: ["계약서 전체 검토", "위험 요소 식별", "수정사항 제안"]\n\n### 예시 3: "집주인이 짜증나, 10년 살았는데 전세금 3억을 10억으로 올려달래. 법적으로 해결방법 알려줘"\n**CoT 분석**:\n1. 구조: 상황 설명 (10년 거주, 3억→10억) + 해결책 요청\n2. 유형: 해결책 요청형 (단순 정보 X)\n3. 복잡도: 고 (구체적 상황 + 수치 비교 + 법률 + 대응방안)\n4. 필요 처리: 법률 검색 + 상황 분석 + 해결책 제시\n\n**결론**:\n- 주 의도: COMPREHENSIVE (복잡한 상황에 대한 종합 해결)\n- 부가 의도: LEGAL_CONSULT, RISK_ANALYSIS\n- 분해: ["전세금 인상 한도 법률 조회", "3억→10억 인상의 타당성 분석", "구체적 대응 방안 제시"]\n- **이유**: "법적으로"라는 키워드가 있지만, 단순 법률 확인이 아니라 구체적 상황에 대한 해결책을 요구하므로 COMPREHENSIVE\n\n### 예시 4: "전세금 인상률 상한이 얼마야?"\n**CoT 분석**:\n1. 구조: 단순 사실 확인\n2. 유형: 정보 확인형\n3. 복잡도: 저 (단일 개념)\n4. 필요 처리: 검색만\n\n**결론**:\n- 주 의도: LEGAL_CONSULT (법률 정보 조회)\n- 부가 의도: 없음\n- 분해: 필요 없음\n\n## 응답 형식 (JSON 형식으로 응답):\n\n```json\n{\n    "intent": "LEGAL_CONSULT",\n    "confidence": 0.9,\n    "keywords": ["전세금", "인상", "제한"],\n    "sub_intents": [],\n    "is_compound": false,\n    "decomposed_tasks": [],\n    "entities": {\n        "location": "강남구",\n        "price": "5억",\n        "contract_type": "전세",\n        "date": "2024년",\n        "area": "84㎡",\n        "action_verbs": ["확인", "검토"]\n    },\n    "reasoning": "전세금 인상에 대한 법률 질문이므로 LEGAL_CONSULT로 분류"\n}\n```\n\n응답 규칙:\n- intent: 위 9개 카테고리 중 하나 (대문자_언더스코어 형식)\n- confidence: 0.0~1.0 (0.8 이상이면 매우 확실, 0.5 미만이면 불확실)\n- keywords: 추출된 주요 키워드 목록\n- sub_intents: 복합 질문일 경우 부가적인 의도들\n- is_compound: 복합 질문 여부 (true/false)\n- decomposed_tasks: 복합 질문을 분해한 개별 작업들\n- entities: 추출된 엔티티 정보\n- reasoning: **반드시 CoT 5단계를 거쳐 분석한 과정을 포함** (구조 파악 → 유형 판단 → 복잡도 평가 → 필요 처리 → 최종 검증)\n\n## reasoning 작성 예시:\n"1단계(구조): 상황 설명(10년 거주, 3억→10억) + 해결책 요청 포함.\n2단계(유형): 해결책 요청형 - 단순 정보가 아닌 대응방안 필요.\n3단계(복잡도): 고 - 구체적 수치 비교와 복잡한 상황.\n4단계(처리): 법률 검색 + 상황 분석 + 해결책 제시 필요.\n5단계(검증): LEGAL_CONSULT만으로는 불충분, 종합적 분석 필요 → COMPREHENSIVE 선택"\n\n## 판단 가이드:\n- 여러 의도가 섞여있다면, 가장 주된 의도를 intent에, 나머지를 sub_intents에 기록\n- "그리고", "또한", "함께", "같이" 등의 연결어가 있으면 복합 질문일 가능성 높음\n- 법률 관련 키워드가 있으면 LEGAL_CONSULT 우선\n- 가격/시세 언급이 명확하면 MARKET_INQUIRY\n- 계약서라는 단어와 함께 "작성/만들기"가 있으면 CONTRACT_CREATION\n- 계약서라는 단어와 함께 "검토/확인"이 있으면 CONTRACT_REVIEW\n- 불확실하면 confidence를 낮게 설정하고 UNCLEAR 선택\n- 복합 질문은 is_compound를 true로 설정하고 개별 작업으로 분해\n\n분석할 질문: 계약금 환불 가능한가요?'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 16:56:16,234 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 16:56:16,234 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 16:56:16,234 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 16:56:16,234 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 16:56:16,234 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 16:56:16,234 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 16:56:21,126 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 07:56:21 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'3937'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'4699'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9978'), (b'x-ratelimit-remaining-tokens', b'197247'), (b'x-ratelimit-reset-requests', b'3m2.444s'), (b'x-ratelimit-reset-tokens', b'825ms'), (b'x-request-id', b'req_d2373983932b4058ac21d6ec320d975a'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b5c8978b6ea9b-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 16:56:21,127 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 16:56:21,127 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 16:56:21,138 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 16:56:21,138 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 16:56:21,138 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 16:56:21,139 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 07:56:21 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '3937', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '4699', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9978', 'x-ratelimit-remaining-tokens': '197247', 'x-ratelimit-reset-requests': '3m2.444s', 'x-ratelimit-reset-tokens': '825ms', 'x-request-id': 'req_d2373983932b4058ac21d6ec320d975a', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b5c8978b6ea9b-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 16:56:21,139 - openai._base_client - DEBUG - request_id: req_d2373983932b4058ac21d6ec320d975a
2025-10-05 16:56:21,139 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: intent_analysis | Model: gpt-4o-mini-2024-07-18 | Tokens: 3370 (prompt: 3177, completion: 193)
2025-10-05 16:56:21,139 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM Intent Analysis Result: {'intent': 'LEGAL_CONSULT', 'confidence': 0.85, 'keywords': ['계약금', '환불', '가능'], 'sub_intents': [], 'is_compound': False, 'decomposed_tasks': [], 'entities': {'action_verbs': ['확인', '환불']}, 'reasoning': '1단계(구조): 단순 정보 요청으로 계약금 환불 가능성에 대한 질문. 2단계(유형): 정보 확인형 - 계약금 환불 가능 여부를 확인하는 질문. 3단계(복잡도): 저 - 단일 개념 확인. 4단계(처리): 법률 데이터베이스 검색 필요. 5단계(검증): 계약금 환불에 대한 법률 질문이므로 LEGAL_CONSULT로 분류.'}
2025-10-05 16:56:21,139 - app.service_agent.llm_manager.prompt_manager - DEBUG - Using cached prompt: agent_selection
2025-10-05 16:56:21,140 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-be276304-7803-4b2f-a84c-e43424077549', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 Agent 선택 전문가입니다.\n사용자의 요청에 가장 적합한 Agent/Team을 선택하는 것이 목표입니다.\n\n## 현재 상황\n\n**사용자 질문:** 계약금 환불 가능한가요?\n**분석된 의도:** 법률상담\n**추출된 키워드:** [\'계약금\', \'환불\', \'가능\']\n\n## 사용 가능한 Agent/Team 정보\n\n{\'search_team\': {\'name\': \'search_team\', \'capabilities\': \'법률 검색, 부동산 시세 조회, 대출 상품 검색\', \'tools\': [\'legal_search\', \'market_data\', \'loan_data\'], \'use_cases\': [\'법률 상담\', \'시세 조회\', \'대출 정보\']}, \'analysis_team\': {\'name\': \'analysis_team\', \'capabilities\': \'데이터 분석, 리스크 평가, 인사이트 생성, 추천\', \'tools\': [\'data_analyzer\', \'risk_evaluator\'], \'use_cases\': [\'시장 분석\', \'리스크 평가\', \'투자 분석\']}, \'document_team\': {\'name\': \'document_team\', \'capabilities\': \'계약서 작성, 문서 생성, 문서 검토\', \'tools\': [\'document_generator\', \'contract_reviewer\'], \'use_cases\': [\'계약서 작성\', \'문서 검토\']}}\n\n## Agent 역할 및 상세 가이드\n\n### 1. search_team (검색 팀)\n- **주요 기능**: 정보 검색 및 데이터 수집\n- **전문 분야**:\n  * 법률 정보 검색 (전세법, 임대차보호법, 부동산 관련 법규)\n  * 부동산 시세 조회 (매매가, 전세가, 월세, 실거래가)\n  * 대출 상품 정보 검색 (금리, 한도, 조건)\n  * 지역 정보 및 인프라 조회\n- **도구**: legal_search, market_data, loan_data\n- **적합한 작업**: 정보 조회, 데이터 수집, 법률 확인, 시세 파악\n- **예시**:\n  * "전세금 5% 인상 가능한가요?"\n  * "강남구 아파트 전세 시세"\n  * "전세자금대출 한도 얼마?"\n\n### 2. analysis_team (분석 팀)\n- **주요 기능**: 데이터 분석 및 평가\n- **전문 분야**:\n  * 시장 동향 분석 (상승률, 하락률, 추세)\n  * 리스크 평가 (계약, 투자 위험도)\n  * 투자 수익률 계산 (ROI, 월세 수익률)\n  * 대출 한도 및 조건 분석 (LTV, DTI, DSR)\n  * 비교 분석 (지역별, 상품별)\n- **도구**: data_analyzer, risk_evaluator, calculator\n- **적합한 작업**: 데이터 분석, 리스크 평가, 계산, 비교, 예측\n- **의존성**: 보통 search_team의 데이터가 필요\n- **예시**:\n  * "이 지역 투자 가치 분석해줘"\n  * "계약 리스크 평가해줘"\n  * "대출 가능 금액 계산해줘"\n\n### 3. document_team (문서 팀)\n- **주요 기능**: 문서 생성 및 관리\n- **전문 분야**:\n  * 계약서 작성 (임대차, 매매, 전세)\n  * 문서 템플릿 관리\n  * 특약사항 생성\n  * 계약서 수정안 작성\n  * 법률 문서 검토\n- **도구**: document_generator, contract_template, contract_reviewer\n- **적합한 작업**: 문서 작성, 계약서 생성, 문서 수정, 검토\n- **예시**:\n  * "임대차계약서 작성해줘"\n  * "특약사항 추가해줘"\n  * "계약서 수정안 만들어줘"\n\n## Chain-of-Thought Agent 선택 프로세스\n\n다음 단계를 **순서대로** 따라 최적의 Agent 조합을 선택하세요:\n\n### 1단계: 질문 요구사항 파악\n- 단순 정보 조회인가? → search_team만 필요\n- 판단/평가가 필요한가? → search + analysis 필요\n- 해결책 제시가 필요한가? → search + analysis 필요\n- 문서 생성이 필요한가? → document_team 추가\n\n### 2단계: 작업 복잡도 판단\n- **단순** (검색만): "~이 뭐야?", "~알려줘" → search_team\n- **중간** (검색+판단): "~괜찮아?", "~적절해?" → search + analysis\n- **복잡** (종합 해결): 구체적 상황 + "어떻게 해야 해?" → search + analysis\n\n### 3단계: 의존성 분석\n- 독립적 작업: 단일 팀으로 처리 가능\n- 순차적 의존: 이전 결과 필요 → 여러 팀 순서대로\n- 병렬 가능: 동시 조회 가능 → coordination: "parallel"\n\n### 4단계: 최종 검증\n- 선택한 팀들로 질문에 완전히 답변 가능한가?\n- 불필요한 팀이 포함되지 않았는가?\n- 순서가 논리적인가? (데이터 흐름 고려)\n\n### 중요 원칙:\n- **법률 키워드만으로 판단하지 말 것**: "법적으로 어떻게 해야 해?" = 법률 검색 + 분석 필요\n- **상황 설명 + 해결책 요청** = 반드시 analysis_team 포함\n- **구체적 수치 비교** (3억→10억 같은) = analysis_team 필요\n\n## 의도별 Agent 매핑 가이드 (기본 가이드 - CoT로 조정 가능)\n\n| 의도 (Intent) | 기본 조합 | 상황별 조정 |\n|--------------|-----------|-------------|\n| LEGAL_CONSULT | ["search_team"] | 해결책 요청시 → + analysis_team |\n| MARKET_INQUIRY | ["search_team"] | 비교/평가시 → + analysis_team |\n| LOAN_CONSULT | ["search_team", "analysis_team"] | 계산 필수 |\n| CONTRACT_CREATION | ["document_team"] | 검토 후 작성 → search + document |\n| CONTRACT_REVIEW | ["search_team", "analysis_team"] | 법률 검토 + 리스크 분석 |\n| COMPREHENSIVE | ["search_team", "analysis_team"] | **항상 분석 포함** |\n| RISK_ANALYSIS | ["analysis_team"] | 법률 근거 필요시 → search + analysis |\n| UNCLEAR | ["search_team", "analysis_team"] | 포괄적 대응 |\n\n**중요**: 위 매핑은 **기본 가이드**일 뿐입니다.\n실제 질문의 내용(CoT 분석 결과)에 따라 조정하세요!\n\n## 복합 질문 처리 예시 (CoT 적용)\n\n### 예시 1: 순차적 처리\n질문: "강남구 시세 확인하고 투자 가치 분석해줘"\n**CoT 분석**:\n1. 요구사항: 시세 조회 + 투자 가치 평가\n2. 복잡도: 중간 (검색 + 분석)\n3. 의존성: 시세 데이터 → 투자 분석 (순차)\n4. 검증: search만으로는 "투자 가치 평가" 불가능\n\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "1단계: 시세 조회+투자 평가 필요. 2단계: 중간 복잡도. 3단계: 순차 의존. 4단계: search로 시세 수집 후 analysis로 투자 가치 평가 필요",\n    "coordination": "sequential"\n}\n```\n\n### 예시 2: 단순 정보 조회\n질문: "전세금 인상률 한도가 얼마야?"\n**CoT 분석**:\n1. 요구사항: 단순 사실 확인\n2. 복잡도: 낮음 (정보 확인형)\n3. 의존성: 없음\n4. 검증: search_team만으로 충분\n\n```json\n{\n    "selected_agents": ["search_team"],\n    "reasoning": "1단계: 단순 정보 조회. 2단계: 저복잡도. 3단계: 독립적. 4단계: 법률 검색만으로 답변 가능",\n    "coordination": "single"\n}\n```\n\n### 예시 3: 해결책 요청 (핵심 예시!)\n질문: "집주인이 전세금 3억을 10억으로 올려달래. 법적으로 어떻게 해야 해?"\n의도: COMPREHENSIVE\n**CoT 분석**:\n1. 요구사항: 상황 설명 + 해결책 요청\n2. 복잡도: 높음 (구체적 상황 + 수치 비교)\n3. 의존성: 법률 확인 → 상황 분석 → 해결책 제시\n4. 검증: "법적으로"만 보고 search만 선택하면 불충분! 해결책 제시 필요\n\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "1단계: 법률 + 상황 분석 + 해결책 필요. 2단계: 고복잡도(3억→10억 비정상). 3단계: 순차(법률 확인 후 타당성 분석). 4단계: \'어떻게 해야\' = 단순 법률 조회 아님, 분석 필수",\n    "coordination": "sequential",\n    "confidence": 0.95\n}\n```\n\n## 응답 형식 (JSON)\n\n```json\n{\n    "selected_agents": ["선택된 agent/team 목록"],\n    "reasoning": "선택 이유를 구체적으로 설명. 각 Agent의 역할과 처리 순서 포함",\n    "coordination": "single/sequential/parallel/pipeline",\n    "dependencies": {"agent2": ["agent1"]},\n    "estimated_time": 30,\n    "confidence": 0.9\n}\n```\n\n## 선택 가이드라인\n\n1. **최소 Agent 원칙**: 가능한 적은 수의 Agent로 처리\n2. **전문성 우선**: 해당 작업에 가장 전문적인 Agent 선택\n3. **효율성 고려**: 병렬 처리 가능한 경우 명시\n4. **의존성 관리**: 데이터 흐름을 고려한 순서 지정\n5. **폴백 전략**: 불확실한 경우 ["search_team", "analysis_team"] 조합\n\n## 주의사항\n\n- selected_agents는 반드시 배열 형태\n- Agent 이름은 정확히: "search_team", "analysis_team", "document_team"\n- 최소 1개, 최대 3개 선택\n- 순서는 실행 우선순위 (앞에 있을수록 먼저 실행)\n- reasoning은 상세하고 논리적으로 작성\n- coordination 필드로 실행 방식 명시\n- 복합 질문의 경우 의존성 관계 명확히 표시'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 16:56:21,140 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 16:56:21,140 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 16:56:21,140 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 16:56:21,140 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 16:56:21,140 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 16:56:21,141 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
