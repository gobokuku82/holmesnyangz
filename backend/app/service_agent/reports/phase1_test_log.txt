2025-10-05 15:54:40,522 - __main__ - INFO - ================================================================================
2025-10-05 15:54:40,522 - __main__ - INFO - Phase 1 Test Runner 초기화 중...
2025-10-05 15:54:40,522 - __main__ - INFO - ================================================================================
2025-10-05 15:54:40,522 - __main__ - INFO - ✓ LLM Context 초기화 완료
2025-10-05 15:54:40,522 - app.service_agent.llm_manager.prompt_manager - DEBUG - PromptManager initialized with directory: C:\kdy\Projects\holmesnyangz\beta_v001\backend\app\service_agent\llm_manager\prompts
2025-10-05 15:54:40,523 - httpx - DEBUG - load_ssl_context verify=True cert=None trust_env=True http2=False
2025-10-05 15:54:40,524 - httpx - DEBUG - load_verify_locations cafile='C:\\kdy\\Projects\\holmesnyangz\\beta_v001\\venv\\Lib\\site-packages\\certifi\\cacert.pem'
2025-10-05 15:54:40,736 - app.service_agent.llm_manager.llm_service - DEBUG - Created new sync OpenAI client
2025-10-05 15:54:40,737 - httpx - DEBUG - load_ssl_context verify=True cert=None trust_env=True http2=False
2025-10-05 15:54:40,737 - httpx - DEBUG - load_verify_locations cafile='C:\\kdy\\Projects\\holmesnyangz\\beta_v001\\venv\\Lib\\site-packages\\certifi\\cacert.pem'
2025-10-05 15:54:40,962 - app.service_agent.llm_manager.llm_service - DEBUG - Created new async OpenAI client
2025-10-05 15:54:40,962 - __main__ - INFO - ✓ Planning Agent 초기화 완료
2025-10-05 15:54:40,963 - app.service_agent.llm_manager.prompt_manager - DEBUG - PromptManager initialized with directory: C:\kdy\Projects\holmesnyangz\beta_v001\backend\app\service_agent\llm_manager\prompts
2025-10-05 15:54:40,963 - __main__ - INFO - ✓ Query Decomposer 초기화 완료
2025-10-05 15:54:40,963 - __main__ - INFO - 시스템 초기화 완료

2025-10-05 15:54:40,963 - __main__ - INFO - 

================================================================================
2025-10-05 15:54:40,963 - __main__ - INFO - Phase 1 테스트 시작
2025-10-05 15:54:40,963 - __main__ - INFO - ================================================================================

2025-10-05 15:54:40,963 - __main__ - INFO - 테스트 데이터 로드: C:\kdy\Projects\holmesnyangz\beta_v001\backend\app\service_agent\reports\tests\test_queries_phase1.json
2025-10-05 15:54:40,963 - __main__ - INFO - 총 40개 질문 로드 완료

2025-10-05 15:54:40,963 - __main__ - INFO - 
================================================================================
2025-10-05 15:54:40,963 - __main__ - INFO - PART 1: 단일 질문 테스트 (20개)
2025-10-05 15:54:40,963 - __main__ - INFO - ================================================================================
2025-10-05 15:54:40,963 - __main__ - INFO - 
================================================================================
2025-10-05 15:54:40,963 - __main__ - INFO - [1] 단일 질문 테스트: S001
2025-10-05 15:54:40,963 - __main__ - INFO - 질문: 전세금 5% 인상 제한이 언제까지인가요?
2025-10-05 15:54:40,963 - __main__ - INFO - ================================================================================
2025-10-05 15:54:40,963 - __main__ - INFO - 
[Step 1] Intent 분석...
2025-10-05 15:54:40,963 - app.service_agent.cognitive_agents.planning_agent - INFO - Analyzing intent for query: 전세금 5% 인상 제한이 언제까지인가요?...
2025-10-05 15:54:40,964 - app.service_agent.llm_manager.prompt_manager - DEBUG - Loaded prompt template: intent_analysis from C:\kdy\Projects\holmesnyangz\beta_v001\backend\app\service_agent\llm_manager\prompts\cognitive\intent_analysis.txt
2025-10-05 15:54:41,255 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-d078a56b-574f-41f2-9ab9-5b0282e7ad5b', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 의도 분석 전문가입니다.\n사용자의 질문을 정확히 이해하고, 어떤 종류의 도움이 필요한지 분류해야 합니다.\n\n## Chain-of-Thought 분석 프로세스\n\n질문을 분석할 때 다음 단계를 **순서대로** 따르세요:\n\n### 1단계: 질문 구조 파악\n- 단순 정보 요청인가? (예: "~이 뭐야?", "~알려줘")\n- 상황 설명이 포함되어 있는가? (배경, 현재 상태)\n- 구체적 수치나 데이터가 있는가? (금액, 비율, 기간 등)\n- 문제 해결을 요구하는가? (예: "어떻게 해야 해?", "방법 알려줘")\n\n### 2단계: 요청 유형 판단\n- **정보 확인형**: 사실, 개념, 규정 확인 → 검색만으로 충분\n- **평가/판단형**: "괜찮아?", "적절해?", "문제있어?" → 검색 + 분석 필요\n- **해결책 요청형**: "어떻게?", "방법?", "대처?" → 검색 + 분석 + 제안 필요\n- **비교/선택형**: "A vs B", "어느게 나아?" → 검색 + 분석(비교) 필요\n\n### 3단계: 복잡도 평가\n- **저**: 단일 개념/사실 확인 (예: "전세금 인상률 한도?")\n- **중**: 특정 상황 + 판단 (예: "3억을 5억으로 올려달래. 가능해?")\n- **고**: 복잡한 상황 + 여러 조건 + 해결책 (예: "10년 거주, 3억→10억 요구. 어떻게 해야 해?")\n\n### 4단계: 필요한 처리 결정\n- **검색만**: 정보 확인형 + 저복잡도\n- **검색+분석**: 평가/판단형 OR 중복잡도 OR 수치 비교 포함\n- **종합처리**: 해결책 요청형 OR 고복잡도 OR 여러 조건 동시 고려\n\n### 5단계: 최종 검증\n- 선택한 의도로 사용자 질문에 완전히 답변 가능한가?\n- 단순 정보 제공으로 끝나는가, 아니면 추가 분석/판단이 필요한가?\n- 상황 설명이 있으면서 "해결", "방법", "어떻게" 등이 있으면 → COMPREHENSIVE 고려\n\n## 중요: 복합 질문 처리\n복합적인 질문(여러 의도가 섞인 질문)의 경우, 가장 핵심적인 의도를 파악하되,\nsub_intents 필드에 부가적인 의도들도 함께 기록해주세요.\n\n**특히 주의**:\n- 법률 키워드가 있어도, "해결방법", "어떻게 해야" 같은 표현이 있으면 단순 LEGAL_CONSULT가 아닐 수 있음\n- 구체적 상황(금액, 기간 등) + 해결책 요구 = COMPREHENSIVE 또는 복합 의도로 분류\n\n## 분류 카테고리 설명:\n\n1. **LEGAL_CONSULT (법률상담)**\n   - 설명: 부동산 관련 법률, 권리, 의무에 대한 질문\n   - 예시:\n     * 단순: "전세금 5% 인상이 가능한가요?", "임대차계약 갱신 거부할 수 있나요?"\n     * 복합: "전세금 인상 가능한지 확인하고 법적 근거도 알려주세요"\n   - 키워드: 법, 전세, 임대, 보증금, 계약, 권리, 의무, 갱신, 임차인, 임대인, 법률, 규정, 조항\n   - 필요한 처리: 법률 데이터베이스 검색, 관련 법조항 찾기\n\n2. **MARKET_INQUIRY (시세조회)**\n   - 설명: 부동산 시장 가격, 시세, 거래 동향에 대한 질문\n   - 예시:\n     * 단순: "강남구 아파트 전세 시세 알려주세요", "서초동 매매가 얼마나 올랐나요?"\n     * 복합: "강남구 시세 확인하고 대출 가능 금액도 계산해줘"\n   - 키워드: 시세, 가격, 매매가, 전세가, 월세, 시장, 동향, 평균, 지역명, 상승률, 하락률\n   - 필요한 처리: 부동산 시세 데이터 조회, 지역별 가격 분석\n\n3. **LOAN_CONSULT (대출상담)**\n   - 설명: 주택담보대출, 전세자금대출 등 금융 관련 질문\n   - 예시:\n     * 단순: "전세자금대출 한도가 얼마인가요?", "LTV가 뭔가요?"\n     * 복합: "대출 한도 확인하고 금리 비교도 해주세요"\n   - 키워드: 대출, 금리, 한도, 조건, 상환, LTV, DTI, DSR, 담보, 금융, 은행\n   - 필요한 처리: 대출 상품 조회, 금리 정보 검색, 한도 계산\n\n4. **CONTRACT_CREATION (계약서작성)**\n   - 설명: 새로운 계약서나 문서를 작성해달라는 요청\n   - 예시:\n     * 단순: "임대차계약서 작성해주세요", "전세계약서 초안 만들어주세요"\n     * 복합: "계약서 작성하고 주의사항도 검토해주세요"\n   - 키워드: 작성, 만들, 생성, 초안, 계약서, 문서, 양식\n   - 필요한 처리: 문서 생성 에이전트 호출, 템플릿 기반 작성\n\n5. **CONTRACT_REVIEW (계약서검토)**\n   - 설명: 기존 계약서나 문서를 검토해달라는 요청\n   - 예시:\n     * 단순: "이 계약서 검토해주세요", "특약사항 문제없나요?"\n     * 복합: "계약서 검토하고 수정사항도 제안해주세요"\n   - 키워드: 검토, 확인, 점검, 리뷰, 분석해, 살펴봐, 체크\n   - 필요한 처리: 문서 분석, 위험 요소 식별, 개선사항 제안\n\n6. **COMPREHENSIVE (종합분석)**\n   - 설명: 여러 측면을 종합적으로 분석해달라는 요청, 또는 복잡한 상황에 대한 해결책 요청\n   - 예시:\n     * 단순: "이 물건 전체적으로 분석해주세요"\n     * 복합: "시세, 법률, 대출 모두 검토해서 종합 의견 주세요"\n     * 해결형: "10년 거주했는데 전세금 3억을 10억으로 올려달래. 어떻게 해야 해?"\n     * 상황+해결: "집주인이 계약 갱신 거부했어. 법적으로 어떻게 대응해야 할까?"\n   - 키워드: 종합, 전체, 모든, 전반적, 종합적, 평가, 분석, 어떻게, 방법, 해결, 대처\n   - 패턴: 구체적 상황 설명 + "어떻게/방법/해결" 요청\n   - 필요한 처리: 다중 데이터 소스 통합 분석, 상황 평가, 해결책 제시\n\n7. **RISK_ANALYSIS (리스크분석)**\n   - 설명: 위험 요소나 주의사항에 대한 질문\n   - 예시:\n     * 단순: "이 계약 위험한가요?", "주의할 점 알려주세요"\n     * 복합: "리스크 분석하고 대안도 제시해주세요"\n   - 키워드: 위험, 리스크, 주의, 문제점, 조심, 걱정, 우려\n   - 필요한 처리: 위험 요소 분석, 주의사항 추출\n\n8. **UNCLEAR (불분명)**\n   - 설명: 의도를 명확히 파악하기 어려운 질문\n   - 예시: "이거 좀 봐주세요", "어떻게 해야 할까요?", "도와주세요"\n   - 처리: 추가 질문으로 의도 명확화 필요\n\n9. **IRRELEVANT (무관)**\n   - 설명: 부동산과 전혀 관련 없는 질문\n   - 예시: "날씨 어때?", "저녁 뭐 먹지?", "주식 추천해줘"\n   - 처리: 부동산 관련 질문을 유도\n\n## 복합 질문 예시와 분석 (CoT 적용):\n\n### 예시 1: "강남구 아파트 시세 알려주고 전세자금대출 가능한지도 확인해줘"\n**CoT 분석**:\n1. 구조: 두 개의 요청 ("시세" + "대출")\n2. 유형: 정보 확인형 (둘 다)\n3. 복잡도: 중 (두 가지 독립적 조회)\n4. 필요 처리: 검색 + 계산/분석\n\n**결론**:\n- 주 의도: MARKET_INQUIRY (시세 조회가 먼저 필요)\n- 부가 의도: LOAN_CONSULT (대출 확인)\n- 분해: ["강남구 아파트 시세 조회", "전세자금대출 가능 여부 확인"]\n\n### 예시 2: "이 계약서 검토해서 위험한 부분 있는지 알려주고 수정 제안도 해줘"\n**CoT 분석**:\n1. 구조: 검토 + 위험 평가 + 수정안\n2. 유형: 평가/판단형 + 해결책 요청형\n3. 복잡도: 고 (3단계 처리)\n4. 필요 처리: 검토 + 분석 + 문서 생성\n\n**결론**:\n- 주 의도: CONTRACT_REVIEW (계약서 검토)\n- 부가 의도: RISK_ANALYSIS (위험 분석)\n- 분해: ["계약서 전체 검토", "위험 요소 식별", "수정사항 제안"]\n\n### 예시 3: "집주인이 짜증나, 10년 살았는데 전세금 3억을 10억으로 올려달래. 법적으로 해결방법 알려줘"\n**CoT 분석**:\n1. 구조: 상황 설명 (10년 거주, 3억→10억) + 해결책 요청\n2. 유형: 해결책 요청형 (단순 정보 X)\n3. 복잡도: 고 (구체적 상황 + 수치 비교 + 법률 + 대응방안)\n4. 필요 처리: 법률 검색 + 상황 분석 + 해결책 제시\n\n**결론**:\n- 주 의도: COMPREHENSIVE (복잡한 상황에 대한 종합 해결)\n- 부가 의도: LEGAL_CONSULT, RISK_ANALYSIS\n- 분해: ["전세금 인상 한도 법률 조회", "3억→10억 인상의 타당성 분석", "구체적 대응 방안 제시"]\n- **이유**: "법적으로"라는 키워드가 있지만, 단순 법률 확인이 아니라 구체적 상황에 대한 해결책을 요구하므로 COMPREHENSIVE\n\n### 예시 4: "전세금 인상률 상한이 얼마야?"\n**CoT 분석**:\n1. 구조: 단순 사실 확인\n2. 유형: 정보 확인형\n3. 복잡도: 저 (단일 개념)\n4. 필요 처리: 검색만\n\n**결론**:\n- 주 의도: LEGAL_CONSULT (법률 정보 조회)\n- 부가 의도: 없음\n- 분해: 필요 없음\n\n## 응답 형식 (JSON 형식으로 응답):\n\n```json\n{\n    "intent": "LEGAL_CONSULT",\n    "confidence": 0.9,\n    "keywords": ["전세금", "인상", "제한"],\n    "sub_intents": [],\n    "is_compound": false,\n    "decomposed_tasks": [],\n    "entities": {\n        "location": "강남구",\n        "price": "5억",\n        "contract_type": "전세",\n        "date": "2024년",\n        "area": "84㎡",\n        "action_verbs": ["확인", "검토"]\n    },\n    "reasoning": "전세금 인상에 대한 법률 질문이므로 LEGAL_CONSULT로 분류"\n}\n```\n\n응답 규칙:\n- intent: 위 9개 카테고리 중 하나 (대문자_언더스코어 형식)\n- confidence: 0.0~1.0 (0.8 이상이면 매우 확실, 0.5 미만이면 불확실)\n- keywords: 추출된 주요 키워드 목록\n- sub_intents: 복합 질문일 경우 부가적인 의도들\n- is_compound: 복합 질문 여부 (true/false)\n- decomposed_tasks: 복합 질문을 분해한 개별 작업들\n- entities: 추출된 엔티티 정보\n- reasoning: **반드시 CoT 5단계를 거쳐 분석한 과정을 포함** (구조 파악 → 유형 판단 → 복잡도 평가 → 필요 처리 → 최종 검증)\n\n## reasoning 작성 예시:\n"1단계(구조): 상황 설명(10년 거주, 3억→10억) + 해결책 요청 포함.\n2단계(유형): 해결책 요청형 - 단순 정보가 아닌 대응방안 필요.\n3단계(복잡도): 고 - 구체적 수치 비교와 복잡한 상황.\n4단계(처리): 법률 검색 + 상황 분석 + 해결책 제시 필요.\n5단계(검증): LEGAL_CONSULT만으로는 불충분, 종합적 분석 필요 → COMPREHENSIVE 선택"\n\n## 판단 가이드:\n- 여러 의도가 섞여있다면, 가장 주된 의도를 intent에, 나머지를 sub_intents에 기록\n- "그리고", "또한", "함께", "같이" 등의 연결어가 있으면 복합 질문일 가능성 높음\n- 법률 관련 키워드가 있으면 LEGAL_CONSULT 우선\n- 가격/시세 언급이 명확하면 MARKET_INQUIRY\n- 계약서라는 단어와 함께 "작성/만들기"가 있으면 CONTRACT_CREATION\n- 계약서라는 단어와 함께 "검토/확인"이 있으면 CONTRACT_REVIEW\n- 불확실하면 confidence를 낮게 설정하고 UNCLEAR 선택\n- 복합 질문은 is_compound를 true로 설정하고 개별 작업으로 분해\n\n분석할 질문: 전세금 5% 인상 제한이 언제까지인가요?'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 15:54:41,257 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 15:54:41,260 - httpcore.connection - DEBUG - connect_tcp.started host='api.openai.com' port=443 local_address=None timeout=5.0 socket_options=None
2025-10-05 15:54:41,272 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x000001BB23031790>
2025-10-05 15:54:41,272 - httpcore.connection - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x000001BB22BB2650> server_hostname='api.openai.com' timeout=5.0
2025-10-05 15:54:41,285 - httpcore.connection - DEBUG - start_tls.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x000001BB23030D70>
2025-10-05 15:54:41,285 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 15:54:41,286 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 15:54:41,286 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 15:54:41,286 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 15:54:41,286 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 15:54:46,041 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 06:54:45 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'4447'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'4464'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9999'), (b'x-ratelimit-remaining-tokens', b'197243'), (b'x-ratelimit-reset-requests', b'8.64s'), (b'x-ratelimit-reset-tokens', b'827ms'), (b'x-request-id', b'req_76f12fa004bf478d89491fcff90bd5e0'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Set-Cookie', b'__cf_bm=eoUzR6yz1XxDP2xEPmVk1z9spNi8pw0P7BpkbbD8Ock-1759647285-1.0.1.1-ioZi4dcQZZPO7CeV8O8rNdvMs3lTGrGQyArW10u3XVHI48eP7i9MfE7UYRiQ7vBxzfVqfoPpfPKQ_hgRHuIuwImgcB_SxnylxPzdWKcBa1A; path=/; expires=Sun, 05-Oct-25 07:24:45 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Set-Cookie', b'_cfuvid=beo1FrU.zq3QbSRg9kqmRuvsbDHYOX6.DNh_NoerROM-1759647285914-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b0253edcf3091-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 15:54:46,042 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 15:54:46,042 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 15:54:46,043 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 15:54:46,043 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 15:54:46,043 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 15:54:46,043 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers([('date', 'Sun, 05 Oct 2025 06:54:45 GMT'), ('content-type', 'application/json'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('access-control-expose-headers', 'X-Request-ID'), ('openai-organization', 'playdata-7nkoem'), ('openai-processing-ms', '4447'), ('openai-project', 'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), ('openai-version', '2020-10-01'), ('x-envoy-upstream-service-time', '4464'), ('x-ratelimit-limit-requests', '10000'), ('x-ratelimit-limit-tokens', '200000'), ('x-ratelimit-remaining-requests', '9999'), ('x-ratelimit-remaining-tokens', '197243'), ('x-ratelimit-reset-requests', '8.64s'), ('x-ratelimit-reset-tokens', '827ms'), ('x-request-id', 'req_76f12fa004bf478d89491fcff90bd5e0'), ('x-openai-proxy-wasm', 'v0.1'), ('cf-cache-status', 'DYNAMIC'), ('set-cookie', '__cf_bm=eoUzR6yz1XxDP2xEPmVk1z9spNi8pw0P7BpkbbD8Ock-1759647285-1.0.1.1-ioZi4dcQZZPO7CeV8O8rNdvMs3lTGrGQyArW10u3XVHI48eP7i9MfE7UYRiQ7vBxzfVqfoPpfPKQ_hgRHuIuwImgcB_SxnylxPzdWKcBa1A; path=/; expires=Sun, 05-Oct-25 07:24:45 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('strict-transport-security', 'max-age=31536000; includeSubDomains; preload'), ('x-content-type-options', 'nosniff'), ('set-cookie', '_cfuvid=beo1FrU.zq3QbSRg9kqmRuvsbDHYOX6.DNh_NoerROM-1759647285914-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('server', 'cloudflare'), ('cf-ray', '989b0253edcf3091-ICN'), ('content-encoding', 'gzip'), ('alt-svc', 'h3=":443"; ma=86400')])
2025-10-05 15:54:46,043 - openai._base_client - DEBUG - request_id: req_76f12fa004bf478d89491fcff90bd5e0
2025-10-05 15:54:46,052 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: intent_analysis | Model: gpt-4o-mini-2024-07-18 | Tokens: 3383 (prompt: 3184, completion: 199)
2025-10-05 15:54:46,052 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM Intent Analysis Result: {'intent': 'LEGAL_CONSULT', 'confidence': 0.9, 'keywords': ['전세금', '인상', '제한', '법률'], 'sub_intents': [], 'is_compound': False, 'decomposed_tasks': [], 'entities': {'price': '5%', 'action_verbs': ['확인']}, 'reasoning': '1단계(구조): 단순 정보 요청으로 전세금 인상 제한에 대한 질문. 2단계(유형): 정보 확인형 - 법률적 사실 확인 필요. 3단계(복잡도): 저 - 단일 개념 확인. 4단계(처리): 법률 데이터베이스 검색 필요. 5단계(검증): 전세금 인상 제한에 대한 법률 질문이므로 LEGAL_CONSULT로 분류.'}
2025-10-05 15:54:46,052 - app.service_agent.llm_manager.prompt_manager - DEBUG - Loaded prompt template: agent_selection from C:\kdy\Projects\holmesnyangz\beta_v001\backend\app\service_agent\llm_manager\prompts\cognitive\agent_selection.txt
2025-10-05 15:54:46,053 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-29cb9afb-e575-4fb5-8988-1fc6ca25b606', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 Agent 선택 전문가입니다.\n사용자의 요청에 가장 적합한 Agent/Team을 선택하는 것이 목표입니다.\n\n## 현재 상황\n\n**사용자 질문:** 전세금 5% 인상 제한이 언제까지인가요?\n**분석된 의도:** 법률상담\n**추출된 키워드:** [\'전세금\', \'인상\', \'제한\', \'법률\']\n\n## 사용 가능한 Agent/Team 정보\n\n{\'search_team\': {\'name\': \'search_team\', \'capabilities\': \'법률 검색, 부동산 시세 조회, 대출 상품 검색\', \'tools\': [\'legal_search\', \'market_data\', \'loan_data\'], \'use_cases\': [\'법률 상담\', \'시세 조회\', \'대출 정보\']}, \'analysis_team\': {\'name\': \'analysis_team\', \'capabilities\': \'데이터 분석, 리스크 평가, 인사이트 생성, 추천\', \'tools\': [\'data_analyzer\', \'risk_evaluator\'], \'use_cases\': [\'시장 분석\', \'리스크 평가\', \'투자 분석\']}, \'document_team\': {\'name\': \'document_team\', \'capabilities\': \'계약서 작성, 문서 생성, 문서 검토\', \'tools\': [\'document_generator\', \'contract_reviewer\'], \'use_cases\': [\'계약서 작성\', \'문서 검토\']}}\n\n## Agent 역할 및 상세 가이드\n\n### 1. search_team (검색 팀)\n- **주요 기능**: 정보 검색 및 데이터 수집\n- **전문 분야**:\n  * 법률 정보 검색 (전세법, 임대차보호법, 부동산 관련 법규)\n  * 부동산 시세 조회 (매매가, 전세가, 월세, 실거래가)\n  * 대출 상품 정보 검색 (금리, 한도, 조건)\n  * 지역 정보 및 인프라 조회\n- **도구**: legal_search, market_data, loan_data\n- **적합한 작업**: 정보 조회, 데이터 수집, 법률 확인, 시세 파악\n- **예시**:\n  * "전세금 5% 인상 가능한가요?"\n  * "강남구 아파트 전세 시세"\n  * "전세자금대출 한도 얼마?"\n\n### 2. analysis_team (분석 팀)\n- **주요 기능**: 데이터 분석 및 평가\n- **전문 분야**:\n  * 시장 동향 분석 (상승률, 하락률, 추세)\n  * 리스크 평가 (계약, 투자 위험도)\n  * 투자 수익률 계산 (ROI, 월세 수익률)\n  * 대출 한도 및 조건 분석 (LTV, DTI, DSR)\n  * 비교 분석 (지역별, 상품별)\n- **도구**: data_analyzer, risk_evaluator, calculator\n- **적합한 작업**: 데이터 분석, 리스크 평가, 계산, 비교, 예측\n- **의존성**: 보통 search_team의 데이터가 필요\n- **예시**:\n  * "이 지역 투자 가치 분석해줘"\n  * "계약 리스크 평가해줘"\n  * "대출 가능 금액 계산해줘"\n\n### 3. document_team (문서 팀)\n- **주요 기능**: 문서 생성 및 관리\n- **전문 분야**:\n  * 계약서 작성 (임대차, 매매, 전세)\n  * 문서 템플릿 관리\n  * 특약사항 생성\n  * 계약서 수정안 작성\n  * 법률 문서 검토\n- **도구**: document_generator, contract_template, contract_reviewer\n- **적합한 작업**: 문서 작성, 계약서 생성, 문서 수정, 검토\n- **예시**:\n  * "임대차계약서 작성해줘"\n  * "특약사항 추가해줘"\n  * "계약서 수정안 만들어줘"\n\n## Chain-of-Thought Agent 선택 프로세스\n\n다음 단계를 **순서대로** 따라 최적의 Agent 조합을 선택하세요:\n\n### 1단계: 질문 요구사항 파악\n- 단순 정보 조회인가? → search_team만 필요\n- 판단/평가가 필요한가? → search + analysis 필요\n- 해결책 제시가 필요한가? → search + analysis 필요\n- 문서 생성이 필요한가? → document_team 추가\n\n### 2단계: 작업 복잡도 판단\n- **단순** (검색만): "~이 뭐야?", "~알려줘" → search_team\n- **중간** (검색+판단): "~괜찮아?", "~적절해?" → search + analysis\n- **복잡** (종합 해결): 구체적 상황 + "어떻게 해야 해?" → search + analysis\n\n### 3단계: 의존성 분석\n- 독립적 작업: 단일 팀으로 처리 가능\n- 순차적 의존: 이전 결과 필요 → 여러 팀 순서대로\n- 병렬 가능: 동시 조회 가능 → coordination: "parallel"\n\n### 4단계: 최종 검증\n- 선택한 팀들로 질문에 완전히 답변 가능한가?\n- 불필요한 팀이 포함되지 않았는가?\n- 순서가 논리적인가? (데이터 흐름 고려)\n\n### 중요 원칙:\n- **법률 키워드만으로 판단하지 말 것**: "법적으로 어떻게 해야 해?" = 법률 검색 + 분석 필요\n- **상황 설명 + 해결책 요청** = 반드시 analysis_team 포함\n- **구체적 수치 비교** (3억→10억 같은) = analysis_team 필요\n\n## 의도별 Agent 매핑 가이드 (기본 가이드 - CoT로 조정 가능)\n\n| 의도 (Intent) | 기본 조합 | 상황별 조정 |\n|--------------|-----------|-------------|\n| LEGAL_CONSULT | ["search_team"] | 해결책 요청시 → + analysis_team |\n| MARKET_INQUIRY | ["search_team"] | 비교/평가시 → + analysis_team |\n| LOAN_CONSULT | ["search_team", "analysis_team"] | 계산 필수 |\n| CONTRACT_CREATION | ["document_team"] | 검토 후 작성 → search + document |\n| CONTRACT_REVIEW | ["search_team", "analysis_team"] | 법률 검토 + 리스크 분석 |\n| COMPREHENSIVE | ["search_team", "analysis_team"] | **항상 분석 포함** |\n| RISK_ANALYSIS | ["analysis_team"] | 법률 근거 필요시 → search + analysis |\n| UNCLEAR | ["search_team", "analysis_team"] | 포괄적 대응 |\n\n**중요**: 위 매핑은 **기본 가이드**일 뿐입니다.\n실제 질문의 내용(CoT 분석 결과)에 따라 조정하세요!\n\n## 복합 질문 처리 예시 (CoT 적용)\n\n### 예시 1: 순차적 처리\n질문: "강남구 시세 확인하고 투자 가치 분석해줘"\n**CoT 분석**:\n1. 요구사항: 시세 조회 + 투자 가치 평가\n2. 복잡도: 중간 (검색 + 분석)\n3. 의존성: 시세 데이터 → 투자 분석 (순차)\n4. 검증: search만으로는 "투자 가치 평가" 불가능\n\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "1단계: 시세 조회+투자 평가 필요. 2단계: 중간 복잡도. 3단계: 순차 의존. 4단계: search로 시세 수집 후 analysis로 투자 가치 평가 필요",\n    "coordination": "sequential"\n}\n```\n\n### 예시 2: 단순 정보 조회\n질문: "전세금 인상률 한도가 얼마야?"\n**CoT 분석**:\n1. 요구사항: 단순 사실 확인\n2. 복잡도: 낮음 (정보 확인형)\n3. 의존성: 없음\n4. 검증: search_team만으로 충분\n\n```json\n{\n    "selected_agents": ["search_team"],\n    "reasoning": "1단계: 단순 정보 조회. 2단계: 저복잡도. 3단계: 독립적. 4단계: 법률 검색만으로 답변 가능",\n    "coordination": "single"\n}\n```\n\n### 예시 3: 해결책 요청 (핵심 예시!)\n질문: "집주인이 전세금 3억을 10억으로 올려달래. 법적으로 어떻게 해야 해?"\n의도: COMPREHENSIVE\n**CoT 분석**:\n1. 요구사항: 상황 설명 + 해결책 요청\n2. 복잡도: 높음 (구체적 상황 + 수치 비교)\n3. 의존성: 법률 확인 → 상황 분석 → 해결책 제시\n4. 검증: "법적으로"만 보고 search만 선택하면 불충분! 해결책 제시 필요\n\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "1단계: 법률 + 상황 분석 + 해결책 필요. 2단계: 고복잡도(3억→10억 비정상). 3단계: 순차(법률 확인 후 타당성 분석). 4단계: \'어떻게 해야\' = 단순 법률 조회 아님, 분석 필수",\n    "coordination": "sequential",\n    "confidence": 0.95\n}\n```\n\n## 응답 형식 (JSON)\n\n```json\n{\n    "selected_agents": ["선택된 agent/team 목록"],\n    "reasoning": "선택 이유를 구체적으로 설명. 각 Agent의 역할과 처리 순서 포함",\n    "coordination": "single/sequential/parallel/pipeline",\n    "dependencies": {"agent2": ["agent1"]},\n    "estimated_time": 30,\n    "confidence": 0.9\n}\n```\n\n## 선택 가이드라인\n\n1. **최소 Agent 원칙**: 가능한 적은 수의 Agent로 처리\n2. **전문성 우선**: 해당 작업에 가장 전문적인 Agent 선택\n3. **효율성 고려**: 병렬 처리 가능한 경우 명시\n4. **의존성 관리**: 데이터 흐름을 고려한 순서 지정\n5. **폴백 전략**: 불확실한 경우 ["search_team", "analysis_team"] 조합\n\n## 주의사항\n\n- selected_agents는 반드시 배열 형태\n- Agent 이름은 정확히: "search_team", "analysis_team", "document_team"\n- 최소 1개, 최대 3개 선택\n- 순서는 실행 우선순위 (앞에 있을수록 먼저 실행)\n- reasoning은 상세하고 논리적으로 작성\n- coordination 필드로 실행 방식 명시\n- 복합 질문의 경우 의존성 관계 명확히 표시'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 15:54:46,053 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 15:54:46,053 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 15:54:46,054 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 15:54:46,054 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 15:54:46,054 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 15:54:46,054 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 15:54:50,032 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 06:54:49 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'3714'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'3738'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9998'), (b'x-ratelimit-remaining-tokens', b'197887'), (b'x-ratelimit-reset-requests', b'12.507s'), (b'x-ratelimit-reset-tokens', b'633ms'), (b'x-request-id', b'req_673aab0bbaf3460cae0f13fe66911ac2'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b0271bc593091-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 15:54:50,032 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 15:54:50,033 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 15:54:50,033 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 15:54:50,033 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 15:54:50,033 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 15:54:50,033 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 06:54:49 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '3714', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '3738', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9998', 'x-ratelimit-remaining-tokens': '197887', 'x-ratelimit-reset-requests': '12.507s', 'x-ratelimit-reset-tokens': '633ms', 'x-request-id': 'req_673aab0bbaf3460cae0f13fe66911ac2', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b0271bc593091-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 15:54:50,033 - openai._base_client - DEBUG - request_id: req_673aab0bbaf3460cae0f13fe66911ac2
2025-10-05 15:54:50,034 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: agent_selection | Model: gpt-4o-mini-2024-07-18 | Tokens: 2471 (prompt: 2364, completion: 107)
2025-10-05 15:54:50,034 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM agent selection reasoning: 1단계: 전세금 인상 제한에 대한 법률 정보 조회 필요. 2단계: 단순 정보 확인으로 저복잡도. 3단계: 독립적 작업으로 search_team만으로 충분. 4단계: 법률 검색만으로 질문에 답변 가능.
2025-10-05 15:54:50,034 - app.service_agent.cognitive_agents.planning_agent - INFO - ✅ Primary LLM selected agents: ['search_team']
2025-10-05 15:54:50,034 - __main__ - INFO -   의도: 법률상담
2025-10-05 15:54:50,034 - __main__ - INFO -   신뢰도: 0.90
2025-10-05 15:54:50,034 - __main__ - INFO -   추천 Agent: ['search_team']
2025-10-05 15:54:50,034 - __main__ - INFO - 
[Step 2] Query Decomposition...
2025-10-05 15:54:50,034 - app.service_agent.cognitive_agents.query_decomposer - INFO - Decomposing query: 전세금 5% 인상 제한이 언제까지인가요?...
2025-10-05 15:54:50,034 - app.service_agent.cognitive_agents.query_decomposer - INFO - Query is simple, no decomposition needed
2025-10-05 15:54:50,034 - __main__ - INFO -   복합 질문: False
2025-10-05 15:54:50,034 - __main__ - INFO -   작업 수: 1
2025-10-05 15:54:50,034 - __main__ - INFO -   실행 모드: sequential
2025-10-05 15:54:50,034 - __main__ - INFO - 
[Step 3] Execution Plan 생성...
2025-10-05 15:54:50,034 - app.service_agent.cognitive_agents.planning_agent - INFO - Creating execution plan for intent: 법률상담
2025-10-05 15:54:50,034 - app.service_agent.cognitive_agents.planning_agent - WARNING - AgentRegistry is empty, using default teams
2025-10-05 15:54:50,034 - app.service_agent.cognitive_agents.planning_agent - DEBUG - Suggested agents: ['search_team']
2025-10-05 15:54:50,034 - app.service_agent.cognitive_agents.planning_agent - DEBUG - Available agents: ['search_team', 'analysis_team', 'document_team']
2025-10-05 15:54:50,034 - app.service_agent.cognitive_agents.planning_agent - INFO - Selected agents/teams for execution: ['search_team']
2025-10-05 15:54:50,034 - __main__ - INFO -   전략: sequential
2025-10-05 15:54:50,034 - __main__ - INFO -   단계 수: 1
2025-10-05 15:54:50,034 - __main__ - INFO - 
✓ 테스트 성공 (소요시간: 9.07초)
2025-10-05 15:54:50,034 - __main__ - INFO - 
================================================================================
2025-10-05 15:54:50,034 - __main__ - INFO - [2] 단일 질문 테스트: S002
2025-10-05 15:54:50,034 - __main__ - INFO - 질문: 강남구 아파트 전세 시세 알려주세요
2025-10-05 15:54:50,034 - __main__ - INFO - ================================================================================
2025-10-05 15:54:50,034 - __main__ - INFO - 
[Step 1] Intent 분석...
2025-10-05 15:54:50,034 - app.service_agent.cognitive_agents.planning_agent - INFO - Analyzing intent for query: 강남구 아파트 전세 시세 알려주세요...
2025-10-05 15:54:50,035 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-9bcfa281-001b-4387-940d-3dcbd7277f0e', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 의도 분석 전문가입니다.\n사용자의 질문을 정확히 이해하고, 어떤 종류의 도움이 필요한지 분류해야 합니다.\n\n## Chain-of-Thought 분석 프로세스\n\n질문을 분석할 때 다음 단계를 **순서대로** 따르세요:\n\n### 1단계: 질문 구조 파악\n- 단순 정보 요청인가? (예: "~이 뭐야?", "~알려줘")\n- 상황 설명이 포함되어 있는가? (배경, 현재 상태)\n- 구체적 수치나 데이터가 있는가? (금액, 비율, 기간 등)\n- 문제 해결을 요구하는가? (예: "어떻게 해야 해?", "방법 알려줘")\n\n### 2단계: 요청 유형 판단\n- **정보 확인형**: 사실, 개념, 규정 확인 → 검색만으로 충분\n- **평가/판단형**: "괜찮아?", "적절해?", "문제있어?" → 검색 + 분석 필요\n- **해결책 요청형**: "어떻게?", "방법?", "대처?" → 검색 + 분석 + 제안 필요\n- **비교/선택형**: "A vs B", "어느게 나아?" → 검색 + 분석(비교) 필요\n\n### 3단계: 복잡도 평가\n- **저**: 단일 개념/사실 확인 (예: "전세금 인상률 한도?")\n- **중**: 특정 상황 + 판단 (예: "3억을 5억으로 올려달래. 가능해?")\n- **고**: 복잡한 상황 + 여러 조건 + 해결책 (예: "10년 거주, 3억→10억 요구. 어떻게 해야 해?")\n\n### 4단계: 필요한 처리 결정\n- **검색만**: 정보 확인형 + 저복잡도\n- **검색+분석**: 평가/판단형 OR 중복잡도 OR 수치 비교 포함\n- **종합처리**: 해결책 요청형 OR 고복잡도 OR 여러 조건 동시 고려\n\n### 5단계: 최종 검증\n- 선택한 의도로 사용자 질문에 완전히 답변 가능한가?\n- 단순 정보 제공으로 끝나는가, 아니면 추가 분석/판단이 필요한가?\n- 상황 설명이 있으면서 "해결", "방법", "어떻게" 등이 있으면 → COMPREHENSIVE 고려\n\n## 중요: 복합 질문 처리\n복합적인 질문(여러 의도가 섞인 질문)의 경우, 가장 핵심적인 의도를 파악하되,\nsub_intents 필드에 부가적인 의도들도 함께 기록해주세요.\n\n**특히 주의**:\n- 법률 키워드가 있어도, "해결방법", "어떻게 해야" 같은 표현이 있으면 단순 LEGAL_CONSULT가 아닐 수 있음\n- 구체적 상황(금액, 기간 등) + 해결책 요구 = COMPREHENSIVE 또는 복합 의도로 분류\n\n## 분류 카테고리 설명:\n\n1. **LEGAL_CONSULT (법률상담)**\n   - 설명: 부동산 관련 법률, 권리, 의무에 대한 질문\n   - 예시:\n     * 단순: "전세금 5% 인상이 가능한가요?", "임대차계약 갱신 거부할 수 있나요?"\n     * 복합: "전세금 인상 가능한지 확인하고 법적 근거도 알려주세요"\n   - 키워드: 법, 전세, 임대, 보증금, 계약, 권리, 의무, 갱신, 임차인, 임대인, 법률, 규정, 조항\n   - 필요한 처리: 법률 데이터베이스 검색, 관련 법조항 찾기\n\n2. **MARKET_INQUIRY (시세조회)**\n   - 설명: 부동산 시장 가격, 시세, 거래 동향에 대한 질문\n   - 예시:\n     * 단순: "강남구 아파트 전세 시세 알려주세요", "서초동 매매가 얼마나 올랐나요?"\n     * 복합: "강남구 시세 확인하고 대출 가능 금액도 계산해줘"\n   - 키워드: 시세, 가격, 매매가, 전세가, 월세, 시장, 동향, 평균, 지역명, 상승률, 하락률\n   - 필요한 처리: 부동산 시세 데이터 조회, 지역별 가격 분석\n\n3. **LOAN_CONSULT (대출상담)**\n   - 설명: 주택담보대출, 전세자금대출 등 금융 관련 질문\n   - 예시:\n     * 단순: "전세자금대출 한도가 얼마인가요?", "LTV가 뭔가요?"\n     * 복합: "대출 한도 확인하고 금리 비교도 해주세요"\n   - 키워드: 대출, 금리, 한도, 조건, 상환, LTV, DTI, DSR, 담보, 금융, 은행\n   - 필요한 처리: 대출 상품 조회, 금리 정보 검색, 한도 계산\n\n4. **CONTRACT_CREATION (계약서작성)**\n   - 설명: 새로운 계약서나 문서를 작성해달라는 요청\n   - 예시:\n     * 단순: "임대차계약서 작성해주세요", "전세계약서 초안 만들어주세요"\n     * 복합: "계약서 작성하고 주의사항도 검토해주세요"\n   - 키워드: 작성, 만들, 생성, 초안, 계약서, 문서, 양식\n   - 필요한 처리: 문서 생성 에이전트 호출, 템플릿 기반 작성\n\n5. **CONTRACT_REVIEW (계약서검토)**\n   - 설명: 기존 계약서나 문서를 검토해달라는 요청\n   - 예시:\n     * 단순: "이 계약서 검토해주세요", "특약사항 문제없나요?"\n     * 복합: "계약서 검토하고 수정사항도 제안해주세요"\n   - 키워드: 검토, 확인, 점검, 리뷰, 분석해, 살펴봐, 체크\n   - 필요한 처리: 문서 분석, 위험 요소 식별, 개선사항 제안\n\n6. **COMPREHENSIVE (종합분석)**\n   - 설명: 여러 측면을 종합적으로 분석해달라는 요청, 또는 복잡한 상황에 대한 해결책 요청\n   - 예시:\n     * 단순: "이 물건 전체적으로 분석해주세요"\n     * 복합: "시세, 법률, 대출 모두 검토해서 종합 의견 주세요"\n     * 해결형: "10년 거주했는데 전세금 3억을 10억으로 올려달래. 어떻게 해야 해?"\n     * 상황+해결: "집주인이 계약 갱신 거부했어. 법적으로 어떻게 대응해야 할까?"\n   - 키워드: 종합, 전체, 모든, 전반적, 종합적, 평가, 분석, 어떻게, 방법, 해결, 대처\n   - 패턴: 구체적 상황 설명 + "어떻게/방법/해결" 요청\n   - 필요한 처리: 다중 데이터 소스 통합 분석, 상황 평가, 해결책 제시\n\n7. **RISK_ANALYSIS (리스크분석)**\n   - 설명: 위험 요소나 주의사항에 대한 질문\n   - 예시:\n     * 단순: "이 계약 위험한가요?", "주의할 점 알려주세요"\n     * 복합: "리스크 분석하고 대안도 제시해주세요"\n   - 키워드: 위험, 리스크, 주의, 문제점, 조심, 걱정, 우려\n   - 필요한 처리: 위험 요소 분석, 주의사항 추출\n\n8. **UNCLEAR (불분명)**\n   - 설명: 의도를 명확히 파악하기 어려운 질문\n   - 예시: "이거 좀 봐주세요", "어떻게 해야 할까요?", "도와주세요"\n   - 처리: 추가 질문으로 의도 명확화 필요\n\n9. **IRRELEVANT (무관)**\n   - 설명: 부동산과 전혀 관련 없는 질문\n   - 예시: "날씨 어때?", "저녁 뭐 먹지?", "주식 추천해줘"\n   - 처리: 부동산 관련 질문을 유도\n\n## 복합 질문 예시와 분석 (CoT 적용):\n\n### 예시 1: "강남구 아파트 시세 알려주고 전세자금대출 가능한지도 확인해줘"\n**CoT 분석**:\n1. 구조: 두 개의 요청 ("시세" + "대출")\n2. 유형: 정보 확인형 (둘 다)\n3. 복잡도: 중 (두 가지 독립적 조회)\n4. 필요 처리: 검색 + 계산/분석\n\n**결론**:\n- 주 의도: MARKET_INQUIRY (시세 조회가 먼저 필요)\n- 부가 의도: LOAN_CONSULT (대출 확인)\n- 분해: ["강남구 아파트 시세 조회", "전세자금대출 가능 여부 확인"]\n\n### 예시 2: "이 계약서 검토해서 위험한 부분 있는지 알려주고 수정 제안도 해줘"\n**CoT 분석**:\n1. 구조: 검토 + 위험 평가 + 수정안\n2. 유형: 평가/판단형 + 해결책 요청형\n3. 복잡도: 고 (3단계 처리)\n4. 필요 처리: 검토 + 분석 + 문서 생성\n\n**결론**:\n- 주 의도: CONTRACT_REVIEW (계약서 검토)\n- 부가 의도: RISK_ANALYSIS (위험 분석)\n- 분해: ["계약서 전체 검토", "위험 요소 식별", "수정사항 제안"]\n\n### 예시 3: "집주인이 짜증나, 10년 살았는데 전세금 3억을 10억으로 올려달래. 법적으로 해결방법 알려줘"\n**CoT 분석**:\n1. 구조: 상황 설명 (10년 거주, 3억→10억) + 해결책 요청\n2. 유형: 해결책 요청형 (단순 정보 X)\n3. 복잡도: 고 (구체적 상황 + 수치 비교 + 법률 + 대응방안)\n4. 필요 처리: 법률 검색 + 상황 분석 + 해결책 제시\n\n**결론**:\n- 주 의도: COMPREHENSIVE (복잡한 상황에 대한 종합 해결)\n- 부가 의도: LEGAL_CONSULT, RISK_ANALYSIS\n- 분해: ["전세금 인상 한도 법률 조회", "3억→10억 인상의 타당성 분석", "구체적 대응 방안 제시"]\n- **이유**: "법적으로"라는 키워드가 있지만, 단순 법률 확인이 아니라 구체적 상황에 대한 해결책을 요구하므로 COMPREHENSIVE\n\n### 예시 4: "전세금 인상률 상한이 얼마야?"\n**CoT 분석**:\n1. 구조: 단순 사실 확인\n2. 유형: 정보 확인형\n3. 복잡도: 저 (단일 개념)\n4. 필요 처리: 검색만\n\n**결론**:\n- 주 의도: LEGAL_CONSULT (법률 정보 조회)\n- 부가 의도: 없음\n- 분해: 필요 없음\n\n## 응답 형식 (JSON 형식으로 응답):\n\n```json\n{\n    "intent": "LEGAL_CONSULT",\n    "confidence": 0.9,\n    "keywords": ["전세금", "인상", "제한"],\n    "sub_intents": [],\n    "is_compound": false,\n    "decomposed_tasks": [],\n    "entities": {\n        "location": "강남구",\n        "price": "5억",\n        "contract_type": "전세",\n        "date": "2024년",\n        "area": "84㎡",\n        "action_verbs": ["확인", "검토"]\n    },\n    "reasoning": "전세금 인상에 대한 법률 질문이므로 LEGAL_CONSULT로 분류"\n}\n```\n\n응답 규칙:\n- intent: 위 9개 카테고리 중 하나 (대문자_언더스코어 형식)\n- confidence: 0.0~1.0 (0.8 이상이면 매우 확실, 0.5 미만이면 불확실)\n- keywords: 추출된 주요 키워드 목록\n- sub_intents: 복합 질문일 경우 부가적인 의도들\n- is_compound: 복합 질문 여부 (true/false)\n- decomposed_tasks: 복합 질문을 분해한 개별 작업들\n- entities: 추출된 엔티티 정보\n- reasoning: **반드시 CoT 5단계를 거쳐 분석한 과정을 포함** (구조 파악 → 유형 판단 → 복잡도 평가 → 필요 처리 → 최종 검증)\n\n## reasoning 작성 예시:\n"1단계(구조): 상황 설명(10년 거주, 3억→10억) + 해결책 요청 포함.\n2단계(유형): 해결책 요청형 - 단순 정보가 아닌 대응방안 필요.\n3단계(복잡도): 고 - 구체적 수치 비교와 복잡한 상황.\n4단계(처리): 법률 검색 + 상황 분석 + 해결책 제시 필요.\n5단계(검증): LEGAL_CONSULT만으로는 불충분, 종합적 분석 필요 → COMPREHENSIVE 선택"\n\n## 판단 가이드:\n- 여러 의도가 섞여있다면, 가장 주된 의도를 intent에, 나머지를 sub_intents에 기록\n- "그리고", "또한", "함께", "같이" 등의 연결어가 있으면 복합 질문일 가능성 높음\n- 법률 관련 키워드가 있으면 LEGAL_CONSULT 우선\n- 가격/시세 언급이 명확하면 MARKET_INQUIRY\n- 계약서라는 단어와 함께 "작성/만들기"가 있으면 CONTRACT_CREATION\n- 계약서라는 단어와 함께 "검토/확인"이 있으면 CONTRACT_REVIEW\n- 불확실하면 confidence를 낮게 설정하고 UNCLEAR 선택\n- 복합 질문은 is_compound를 true로 설정하고 개별 작업으로 분해\n\n분석할 질문: 강남구 아파트 전세 시세 알려주세요'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 15:54:50,035 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 15:54:50,035 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 15:54:50,036 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 15:54:50,036 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 15:54:50,036 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 15:54:50,036 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 15:54:56,465 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 06:54:56 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'6004'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'6233'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9998'), (b'x-ratelimit-remaining-tokens', b'197243'), (b'x-ratelimit-reset-requests', b'16.966s'), (b'x-ratelimit-reset-tokens', b'827ms'), (b'x-request-id', b'req_2def6c8d90a146129b8d621d321a0c9e'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b028a9c933091-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 15:54:56,466 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 15:54:56,466 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 15:54:56,475 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 15:54:56,475 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 15:54:56,475 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 15:54:56,475 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 06:54:56 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '6004', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '6233', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9998', 'x-ratelimit-remaining-tokens': '197243', 'x-ratelimit-reset-requests': '16.966s', 'x-ratelimit-reset-tokens': '827ms', 'x-request-id': 'req_2def6c8d90a146129b8d621d321a0c9e', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b028a9c933091-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 15:54:56,475 - openai._base_client - DEBUG - request_id: req_2def6c8d90a146129b8d621d321a0c9e
2025-10-05 15:54:56,476 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: intent_analysis | Model: gpt-4o-mini-2024-07-18 | Tokens: 3379 (prompt: 3180, completion: 199)
2025-10-05 15:54:56,476 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM Intent Analysis Result: {'intent': 'MARKET_INQUIRY', 'confidence': 0.95, 'keywords': ['강남구', '아파트', '전세', '시세'], 'sub_intents': [], 'is_compound': False, 'decomposed_tasks': [], 'entities': {'location': '강남구', 'contract_type': '전세'}, 'reasoning': "1단계(구조): 단순 정보 요청으로 '강남구 아파트 전세 시세'에 대한 질문. 2단계(유형): 정보 확인형 - 시세에 대한 사실 확인. 3단계(복잡도): 저 - 단일 개념 확인. 4단계(처리): 시세 데이터 조회만 필요. 5단계(검증): 단순 정보 제공으로 충분하므로 MARKET_INQUIRY로 분류."}
2025-10-05 15:54:56,477 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-53a9408b-7f66-4bb7-a923-43ca0060d565', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 Agent 선택 전문가입니다.\n사용자의 요청에 가장 적합한 Agent/Team을 선택하는 것이 목표입니다.\n\n## 현재 상황\n\n**사용자 질문:** 강남구 아파트 전세 시세 알려주세요\n**분석된 의도:** 시세조회\n**추출된 키워드:** [\'강남구\', \'아파트\', \'전세\', \'시세\']\n\n## 사용 가능한 Agent/Team 정보\n\n{\'search_team\': {\'name\': \'search_team\', \'capabilities\': \'법률 검색, 부동산 시세 조회, 대출 상품 검색\', \'tools\': [\'legal_search\', \'market_data\', \'loan_data\'], \'use_cases\': [\'법률 상담\', \'시세 조회\', \'대출 정보\']}, \'analysis_team\': {\'name\': \'analysis_team\', \'capabilities\': \'데이터 분석, 리스크 평가, 인사이트 생성, 추천\', \'tools\': [\'data_analyzer\', \'risk_evaluator\'], \'use_cases\': [\'시장 분석\', \'리스크 평가\', \'투자 분석\']}, \'document_team\': {\'name\': \'document_team\', \'capabilities\': \'계약서 작성, 문서 생성, 문서 검토\', \'tools\': [\'document_generator\', \'contract_reviewer\'], \'use_cases\': [\'계약서 작성\', \'문서 검토\']}}\n\n## Agent 역할 및 상세 가이드\n\n### 1. search_team (검색 팀)\n- **주요 기능**: 정보 검색 및 데이터 수집\n- **전문 분야**:\n  * 법률 정보 검색 (전세법, 임대차보호법, 부동산 관련 법규)\n  * 부동산 시세 조회 (매매가, 전세가, 월세, 실거래가)\n  * 대출 상품 정보 검색 (금리, 한도, 조건)\n  * 지역 정보 및 인프라 조회\n- **도구**: legal_search, market_data, loan_data\n- **적합한 작업**: 정보 조회, 데이터 수집, 법률 확인, 시세 파악\n- **예시**:\n  * "전세금 5% 인상 가능한가요?"\n  * "강남구 아파트 전세 시세"\n  * "전세자금대출 한도 얼마?"\n\n### 2. analysis_team (분석 팀)\n- **주요 기능**: 데이터 분석 및 평가\n- **전문 분야**:\n  * 시장 동향 분석 (상승률, 하락률, 추세)\n  * 리스크 평가 (계약, 투자 위험도)\n  * 투자 수익률 계산 (ROI, 월세 수익률)\n  * 대출 한도 및 조건 분석 (LTV, DTI, DSR)\n  * 비교 분석 (지역별, 상품별)\n- **도구**: data_analyzer, risk_evaluator, calculator\n- **적합한 작업**: 데이터 분석, 리스크 평가, 계산, 비교, 예측\n- **의존성**: 보통 search_team의 데이터가 필요\n- **예시**:\n  * "이 지역 투자 가치 분석해줘"\n  * "계약 리스크 평가해줘"\n  * "대출 가능 금액 계산해줘"\n\n### 3. document_team (문서 팀)\n- **주요 기능**: 문서 생성 및 관리\n- **전문 분야**:\n  * 계약서 작성 (임대차, 매매, 전세)\n  * 문서 템플릿 관리\n  * 특약사항 생성\n  * 계약서 수정안 작성\n  * 법률 문서 검토\n- **도구**: document_generator, contract_template, contract_reviewer\n- **적합한 작업**: 문서 작성, 계약서 생성, 문서 수정, 검토\n- **예시**:\n  * "임대차계약서 작성해줘"\n  * "특약사항 추가해줘"\n  * "계약서 수정안 만들어줘"\n\n## Chain-of-Thought Agent 선택 프로세스\n\n다음 단계를 **순서대로** 따라 최적의 Agent 조합을 선택하세요:\n\n### 1단계: 질문 요구사항 파악\n- 단순 정보 조회인가? → search_team만 필요\n- 판단/평가가 필요한가? → search + analysis 필요\n- 해결책 제시가 필요한가? → search + analysis 필요\n- 문서 생성이 필요한가? → document_team 추가\n\n### 2단계: 작업 복잡도 판단\n- **단순** (검색만): "~이 뭐야?", "~알려줘" → search_team\n- **중간** (검색+판단): "~괜찮아?", "~적절해?" → search + analysis\n- **복잡** (종합 해결): 구체적 상황 + "어떻게 해야 해?" → search + analysis\n\n### 3단계: 의존성 분석\n- 독립적 작업: 단일 팀으로 처리 가능\n- 순차적 의존: 이전 결과 필요 → 여러 팀 순서대로\n- 병렬 가능: 동시 조회 가능 → coordination: "parallel"\n\n### 4단계: 최종 검증\n- 선택한 팀들로 질문에 완전히 답변 가능한가?\n- 불필요한 팀이 포함되지 않았는가?\n- 순서가 논리적인가? (데이터 흐름 고려)\n\n### 중요 원칙:\n- **법률 키워드만으로 판단하지 말 것**: "법적으로 어떻게 해야 해?" = 법률 검색 + 분석 필요\n- **상황 설명 + 해결책 요청** = 반드시 analysis_team 포함\n- **구체적 수치 비교** (3억→10억 같은) = analysis_team 필요\n\n## 의도별 Agent 매핑 가이드 (기본 가이드 - CoT로 조정 가능)\n\n| 의도 (Intent) | 기본 조합 | 상황별 조정 |\n|--------------|-----------|-------------|\n| LEGAL_CONSULT | ["search_team"] | 해결책 요청시 → + analysis_team |\n| MARKET_INQUIRY | ["search_team"] | 비교/평가시 → + analysis_team |\n| LOAN_CONSULT | ["search_team", "analysis_team"] | 계산 필수 |\n| CONTRACT_CREATION | ["document_team"] | 검토 후 작성 → search + document |\n| CONTRACT_REVIEW | ["search_team", "analysis_team"] | 법률 검토 + 리스크 분석 |\n| COMPREHENSIVE | ["search_team", "analysis_team"] | **항상 분석 포함** |\n| RISK_ANALYSIS | ["analysis_team"] | 법률 근거 필요시 → search + analysis |\n| UNCLEAR | ["search_team", "analysis_team"] | 포괄적 대응 |\n\n**중요**: 위 매핑은 **기본 가이드**일 뿐입니다.\n실제 질문의 내용(CoT 분석 결과)에 따라 조정하세요!\n\n## 복합 질문 처리 예시 (CoT 적용)\n\n### 예시 1: 순차적 처리\n질문: "강남구 시세 확인하고 투자 가치 분석해줘"\n**CoT 분석**:\n1. 요구사항: 시세 조회 + 투자 가치 평가\n2. 복잡도: 중간 (검색 + 분석)\n3. 의존성: 시세 데이터 → 투자 분석 (순차)\n4. 검증: search만으로는 "투자 가치 평가" 불가능\n\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "1단계: 시세 조회+투자 평가 필요. 2단계: 중간 복잡도. 3단계: 순차 의존. 4단계: search로 시세 수집 후 analysis로 투자 가치 평가 필요",\n    "coordination": "sequential"\n}\n```\n\n### 예시 2: 단순 정보 조회\n질문: "전세금 인상률 한도가 얼마야?"\n**CoT 분석**:\n1. 요구사항: 단순 사실 확인\n2. 복잡도: 낮음 (정보 확인형)\n3. 의존성: 없음\n4. 검증: search_team만으로 충분\n\n```json\n{\n    "selected_agents": ["search_team"],\n    "reasoning": "1단계: 단순 정보 조회. 2단계: 저복잡도. 3단계: 독립적. 4단계: 법률 검색만으로 답변 가능",\n    "coordination": "single"\n}\n```\n\n### 예시 3: 해결책 요청 (핵심 예시!)\n질문: "집주인이 전세금 3억을 10억으로 올려달래. 법적으로 어떻게 해야 해?"\n의도: COMPREHENSIVE\n**CoT 분석**:\n1. 요구사항: 상황 설명 + 해결책 요청\n2. 복잡도: 높음 (구체적 상황 + 수치 비교)\n3. 의존성: 법률 확인 → 상황 분석 → 해결책 제시\n4. 검증: "법적으로"만 보고 search만 선택하면 불충분! 해결책 제시 필요\n\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "1단계: 법률 + 상황 분석 + 해결책 필요. 2단계: 고복잡도(3억→10억 비정상). 3단계: 순차(법률 확인 후 타당성 분석). 4단계: \'어떻게 해야\' = 단순 법률 조회 아님, 분석 필수",\n    "coordination": "sequential",\n    "confidence": 0.95\n}\n```\n\n## 응답 형식 (JSON)\n\n```json\n{\n    "selected_agents": ["선택된 agent/team 목록"],\n    "reasoning": "선택 이유를 구체적으로 설명. 각 Agent의 역할과 처리 순서 포함",\n    "coordination": "single/sequential/parallel/pipeline",\n    "dependencies": {"agent2": ["agent1"]},\n    "estimated_time": 30,\n    "confidence": 0.9\n}\n```\n\n## 선택 가이드라인\n\n1. **최소 Agent 원칙**: 가능한 적은 수의 Agent로 처리\n2. **전문성 우선**: 해당 작업에 가장 전문적인 Agent 선택\n3. **효율성 고려**: 병렬 처리 가능한 경우 명시\n4. **의존성 관리**: 데이터 흐름을 고려한 순서 지정\n5. **폴백 전략**: 불확실한 경우 ["search_team", "analysis_team"] 조합\n\n## 주의사항\n\n- selected_agents는 반드시 배열 형태\n- Agent 이름은 정확히: "search_team", "analysis_team", "document_team"\n- 최소 1개, 최대 3개 선택\n- 순서는 실행 우선순위 (앞에 있을수록 먼저 실행)\n- reasoning은 상세하고 논리적으로 작성\n- coordination 필드로 실행 방식 명시\n- 복합 질문의 경우 의존성 관계 명확히 표시'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 15:54:56,477 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 15:54:56,477 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 15:54:56,478 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 15:54:56,478 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 15:54:56,478 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 15:54:56,478 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 15:54:59,708 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 06:54:59 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'3022'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'3044'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9997'), (b'x-ratelimit-remaining-tokens', b'197887'), (b'x-ratelimit-reset-requests', b'19.37s'), (b'x-ratelimit-reset-tokens', b'633ms'), (b'x-request-id', b'req_f30e79c28e3846a587a70b39ddbb7795'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b02b2de123091-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 15:54:59,709 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 15:54:59,709 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 15:54:59,721 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 15:54:59,721 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 15:54:59,722 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 15:54:59,722 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 06:54:59 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '3022', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '3044', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9997', 'x-ratelimit-remaining-tokens': '197887', 'x-ratelimit-reset-requests': '19.37s', 'x-ratelimit-reset-tokens': '633ms', 'x-request-id': 'req_f30e79c28e3846a587a70b39ddbb7795', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b02b2de123091-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 15:54:59,722 - openai._base_client - DEBUG - request_id: req_f30e79c28e3846a587a70b39ddbb7795
2025-10-05 15:54:59,722 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: agent_selection | Model: gpt-4o-mini-2024-07-18 | Tokens: 2483 (prompt: 2360, completion: 123)
2025-10-05 15:54:59,722 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM agent selection reasoning: 1단계: 사용자는 강남구 아파트 전세 시세를 단순히 조회하고자 함. 2단계: 이는 단순 정보 조회로 저복잡도에 해당. 3단계: 독립적인 작업으로 search_team만으로 충분히 처리 가능. 4단계: search_team이 부동산 시세 조회 전문이므로 적합.
2025-10-05 15:54:59,722 - app.service_agent.cognitive_agents.planning_agent - INFO - ✅ Primary LLM selected agents: ['search_team']
2025-10-05 15:54:59,722 - __main__ - INFO -   의도: 시세조회
2025-10-05 15:54:59,722 - __main__ - INFO -   신뢰도: 0.95
2025-10-05 15:54:59,722 - __main__ - INFO -   추천 Agent: ['search_team']
2025-10-05 15:54:59,722 - __main__ - INFO - 
[Step 2] Query Decomposition...
2025-10-05 15:54:59,722 - app.service_agent.cognitive_agents.query_decomposer - INFO - Decomposing query: 강남구 아파트 전세 시세 알려주세요...
2025-10-05 15:54:59,722 - app.service_agent.cognitive_agents.query_decomposer - INFO - Query is simple, no decomposition needed
2025-10-05 15:54:59,722 - __main__ - INFO -   복합 질문: False
2025-10-05 15:54:59,722 - __main__ - INFO -   작업 수: 1
2025-10-05 15:54:59,722 - __main__ - INFO -   실행 모드: sequential
2025-10-05 15:54:59,722 - __main__ - INFO - 
[Step 3] Execution Plan 생성...
2025-10-05 15:54:59,722 - app.service_agent.cognitive_agents.planning_agent - INFO - Creating execution plan for intent: 시세조회
2025-10-05 15:54:59,722 - app.service_agent.cognitive_agents.planning_agent - WARNING - AgentRegistry is empty, using default teams
2025-10-05 15:54:59,722 - app.service_agent.cognitive_agents.planning_agent - DEBUG - Suggested agents: ['search_team']
2025-10-05 15:54:59,722 - app.service_agent.cognitive_agents.planning_agent - DEBUG - Available agents: ['search_team', 'analysis_team', 'document_team']
2025-10-05 15:54:59,722 - app.service_agent.cognitive_agents.planning_agent - INFO - Selected agents/teams for execution: ['search_team']
2025-10-05 15:54:59,722 - __main__ - INFO -   전략: sequential
2025-10-05 15:54:59,722 - __main__ - INFO -   단계 수: 1
2025-10-05 15:54:59,722 - __main__ - INFO - 
✓ 테스트 성공 (소요시간: 9.69초)
2025-10-05 15:54:59,722 - __main__ - INFO - 
================================================================================
2025-10-05 15:54:59,723 - __main__ - INFO - [3] 단일 질문 테스트: S003
2025-10-05 15:54:59,723 - __main__ - INFO - 질문: 전세자금대출 한도가 얼마나 되나요?
2025-10-05 15:54:59,723 - __main__ - INFO - ================================================================================
2025-10-05 15:54:59,723 - __main__ - INFO - 
[Step 1] Intent 분석...
2025-10-05 15:54:59,723 - app.service_agent.cognitive_agents.planning_agent - INFO - Analyzing intent for query: 전세자금대출 한도가 얼마나 되나요?...
2025-10-05 15:54:59,723 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-75dfb14c-0ecd-42b4-b610-d654d0bdbf73', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 의도 분석 전문가입니다.\n사용자의 질문을 정확히 이해하고, 어떤 종류의 도움이 필요한지 분류해야 합니다.\n\n## Chain-of-Thought 분석 프로세스\n\n질문을 분석할 때 다음 단계를 **순서대로** 따르세요:\n\n### 1단계: 질문 구조 파악\n- 단순 정보 요청인가? (예: "~이 뭐야?", "~알려줘")\n- 상황 설명이 포함되어 있는가? (배경, 현재 상태)\n- 구체적 수치나 데이터가 있는가? (금액, 비율, 기간 등)\n- 문제 해결을 요구하는가? (예: "어떻게 해야 해?", "방법 알려줘")\n\n### 2단계: 요청 유형 판단\n- **정보 확인형**: 사실, 개념, 규정 확인 → 검색만으로 충분\n- **평가/판단형**: "괜찮아?", "적절해?", "문제있어?" → 검색 + 분석 필요\n- **해결책 요청형**: "어떻게?", "방법?", "대처?" → 검색 + 분석 + 제안 필요\n- **비교/선택형**: "A vs B", "어느게 나아?" → 검색 + 분석(비교) 필요\n\n### 3단계: 복잡도 평가\n- **저**: 단일 개념/사실 확인 (예: "전세금 인상률 한도?")\n- **중**: 특정 상황 + 판단 (예: "3억을 5억으로 올려달래. 가능해?")\n- **고**: 복잡한 상황 + 여러 조건 + 해결책 (예: "10년 거주, 3억→10억 요구. 어떻게 해야 해?")\n\n### 4단계: 필요한 처리 결정\n- **검색만**: 정보 확인형 + 저복잡도\n- **검색+분석**: 평가/판단형 OR 중복잡도 OR 수치 비교 포함\n- **종합처리**: 해결책 요청형 OR 고복잡도 OR 여러 조건 동시 고려\n\n### 5단계: 최종 검증\n- 선택한 의도로 사용자 질문에 완전히 답변 가능한가?\n- 단순 정보 제공으로 끝나는가, 아니면 추가 분석/판단이 필요한가?\n- 상황 설명이 있으면서 "해결", "방법", "어떻게" 등이 있으면 → COMPREHENSIVE 고려\n\n## 중요: 복합 질문 처리\n복합적인 질문(여러 의도가 섞인 질문)의 경우, 가장 핵심적인 의도를 파악하되,\nsub_intents 필드에 부가적인 의도들도 함께 기록해주세요.\n\n**특히 주의**:\n- 법률 키워드가 있어도, "해결방법", "어떻게 해야" 같은 표현이 있으면 단순 LEGAL_CONSULT가 아닐 수 있음\n- 구체적 상황(금액, 기간 등) + 해결책 요구 = COMPREHENSIVE 또는 복합 의도로 분류\n\n## 분류 카테고리 설명:\n\n1. **LEGAL_CONSULT (법률상담)**\n   - 설명: 부동산 관련 법률, 권리, 의무에 대한 질문\n   - 예시:\n     * 단순: "전세금 5% 인상이 가능한가요?", "임대차계약 갱신 거부할 수 있나요?"\n     * 복합: "전세금 인상 가능한지 확인하고 법적 근거도 알려주세요"\n   - 키워드: 법, 전세, 임대, 보증금, 계약, 권리, 의무, 갱신, 임차인, 임대인, 법률, 규정, 조항\n   - 필요한 처리: 법률 데이터베이스 검색, 관련 법조항 찾기\n\n2. **MARKET_INQUIRY (시세조회)**\n   - 설명: 부동산 시장 가격, 시세, 거래 동향에 대한 질문\n   - 예시:\n     * 단순: "강남구 아파트 전세 시세 알려주세요", "서초동 매매가 얼마나 올랐나요?"\n     * 복합: "강남구 시세 확인하고 대출 가능 금액도 계산해줘"\n   - 키워드: 시세, 가격, 매매가, 전세가, 월세, 시장, 동향, 평균, 지역명, 상승률, 하락률\n   - 필요한 처리: 부동산 시세 데이터 조회, 지역별 가격 분석\n\n3. **LOAN_CONSULT (대출상담)**\n   - 설명: 주택담보대출, 전세자금대출 등 금융 관련 질문\n   - 예시:\n     * 단순: "전세자금대출 한도가 얼마인가요?", "LTV가 뭔가요?"\n     * 복합: "대출 한도 확인하고 금리 비교도 해주세요"\n   - 키워드: 대출, 금리, 한도, 조건, 상환, LTV, DTI, DSR, 담보, 금융, 은행\n   - 필요한 처리: 대출 상품 조회, 금리 정보 검색, 한도 계산\n\n4. **CONTRACT_CREATION (계약서작성)**\n   - 설명: 새로운 계약서나 문서를 작성해달라는 요청\n   - 예시:\n     * 단순: "임대차계약서 작성해주세요", "전세계약서 초안 만들어주세요"\n     * 복합: "계약서 작성하고 주의사항도 검토해주세요"\n   - 키워드: 작성, 만들, 생성, 초안, 계약서, 문서, 양식\n   - 필요한 처리: 문서 생성 에이전트 호출, 템플릿 기반 작성\n\n5. **CONTRACT_REVIEW (계약서검토)**\n   - 설명: 기존 계약서나 문서를 검토해달라는 요청\n   - 예시:\n     * 단순: "이 계약서 검토해주세요", "특약사항 문제없나요?"\n     * 복합: "계약서 검토하고 수정사항도 제안해주세요"\n   - 키워드: 검토, 확인, 점검, 리뷰, 분석해, 살펴봐, 체크\n   - 필요한 처리: 문서 분석, 위험 요소 식별, 개선사항 제안\n\n6. **COMPREHENSIVE (종합분석)**\n   - 설명: 여러 측면을 종합적으로 분석해달라는 요청, 또는 복잡한 상황에 대한 해결책 요청\n   - 예시:\n     * 단순: "이 물건 전체적으로 분석해주세요"\n     * 복합: "시세, 법률, 대출 모두 검토해서 종합 의견 주세요"\n     * 해결형: "10년 거주했는데 전세금 3억을 10억으로 올려달래. 어떻게 해야 해?"\n     * 상황+해결: "집주인이 계약 갱신 거부했어. 법적으로 어떻게 대응해야 할까?"\n   - 키워드: 종합, 전체, 모든, 전반적, 종합적, 평가, 분석, 어떻게, 방법, 해결, 대처\n   - 패턴: 구체적 상황 설명 + "어떻게/방법/해결" 요청\n   - 필요한 처리: 다중 데이터 소스 통합 분석, 상황 평가, 해결책 제시\n\n7. **RISK_ANALYSIS (리스크분석)**\n   - 설명: 위험 요소나 주의사항에 대한 질문\n   - 예시:\n     * 단순: "이 계약 위험한가요?", "주의할 점 알려주세요"\n     * 복합: "리스크 분석하고 대안도 제시해주세요"\n   - 키워드: 위험, 리스크, 주의, 문제점, 조심, 걱정, 우려\n   - 필요한 처리: 위험 요소 분석, 주의사항 추출\n\n8. **UNCLEAR (불분명)**\n   - 설명: 의도를 명확히 파악하기 어려운 질문\n   - 예시: "이거 좀 봐주세요", "어떻게 해야 할까요?", "도와주세요"\n   - 처리: 추가 질문으로 의도 명확화 필요\n\n9. **IRRELEVANT (무관)**\n   - 설명: 부동산과 전혀 관련 없는 질문\n   - 예시: "날씨 어때?", "저녁 뭐 먹지?", "주식 추천해줘"\n   - 처리: 부동산 관련 질문을 유도\n\n## 복합 질문 예시와 분석 (CoT 적용):\n\n### 예시 1: "강남구 아파트 시세 알려주고 전세자금대출 가능한지도 확인해줘"\n**CoT 분석**:\n1. 구조: 두 개의 요청 ("시세" + "대출")\n2. 유형: 정보 확인형 (둘 다)\n3. 복잡도: 중 (두 가지 독립적 조회)\n4. 필요 처리: 검색 + 계산/분석\n\n**결론**:\n- 주 의도: MARKET_INQUIRY (시세 조회가 먼저 필요)\n- 부가 의도: LOAN_CONSULT (대출 확인)\n- 분해: ["강남구 아파트 시세 조회", "전세자금대출 가능 여부 확인"]\n\n### 예시 2: "이 계약서 검토해서 위험한 부분 있는지 알려주고 수정 제안도 해줘"\n**CoT 분석**:\n1. 구조: 검토 + 위험 평가 + 수정안\n2. 유형: 평가/판단형 + 해결책 요청형\n3. 복잡도: 고 (3단계 처리)\n4. 필요 처리: 검토 + 분석 + 문서 생성\n\n**결론**:\n- 주 의도: CONTRACT_REVIEW (계약서 검토)\n- 부가 의도: RISK_ANALYSIS (위험 분석)\n- 분해: ["계약서 전체 검토", "위험 요소 식별", "수정사항 제안"]\n\n### 예시 3: "집주인이 짜증나, 10년 살았는데 전세금 3억을 10억으로 올려달래. 법적으로 해결방법 알려줘"\n**CoT 분석**:\n1. 구조: 상황 설명 (10년 거주, 3억→10억) + 해결책 요청\n2. 유형: 해결책 요청형 (단순 정보 X)\n3. 복잡도: 고 (구체적 상황 + 수치 비교 + 법률 + 대응방안)\n4. 필요 처리: 법률 검색 + 상황 분석 + 해결책 제시\n\n**결론**:\n- 주 의도: COMPREHENSIVE (복잡한 상황에 대한 종합 해결)\n- 부가 의도: LEGAL_CONSULT, RISK_ANALYSIS\n- 분해: ["전세금 인상 한도 법률 조회", "3억→10억 인상의 타당성 분석", "구체적 대응 방안 제시"]\n- **이유**: "법적으로"라는 키워드가 있지만, 단순 법률 확인이 아니라 구체적 상황에 대한 해결책을 요구하므로 COMPREHENSIVE\n\n### 예시 4: "전세금 인상률 상한이 얼마야?"\n**CoT 분석**:\n1. 구조: 단순 사실 확인\n2. 유형: 정보 확인형\n3. 복잡도: 저 (단일 개념)\n4. 필요 처리: 검색만\n\n**결론**:\n- 주 의도: LEGAL_CONSULT (법률 정보 조회)\n- 부가 의도: 없음\n- 분해: 필요 없음\n\n## 응답 형식 (JSON 형식으로 응답):\n\n```json\n{\n    "intent": "LEGAL_CONSULT",\n    "confidence": 0.9,\n    "keywords": ["전세금", "인상", "제한"],\n    "sub_intents": [],\n    "is_compound": false,\n    "decomposed_tasks": [],\n    "entities": {\n        "location": "강남구",\n        "price": "5억",\n        "contract_type": "전세",\n        "date": "2024년",\n        "area": "84㎡",\n        "action_verbs": ["확인", "검토"]\n    },\n    "reasoning": "전세금 인상에 대한 법률 질문이므로 LEGAL_CONSULT로 분류"\n}\n```\n\n응답 규칙:\n- intent: 위 9개 카테고리 중 하나 (대문자_언더스코어 형식)\n- confidence: 0.0~1.0 (0.8 이상이면 매우 확실, 0.5 미만이면 불확실)\n- keywords: 추출된 주요 키워드 목록\n- sub_intents: 복합 질문일 경우 부가적인 의도들\n- is_compound: 복합 질문 여부 (true/false)\n- decomposed_tasks: 복합 질문을 분해한 개별 작업들\n- entities: 추출된 엔티티 정보\n- reasoning: **반드시 CoT 5단계를 거쳐 분석한 과정을 포함** (구조 파악 → 유형 판단 → 복잡도 평가 → 필요 처리 → 최종 검증)\n\n## reasoning 작성 예시:\n"1단계(구조): 상황 설명(10년 거주, 3억→10억) + 해결책 요청 포함.\n2단계(유형): 해결책 요청형 - 단순 정보가 아닌 대응방안 필요.\n3단계(복잡도): 고 - 구체적 수치 비교와 복잡한 상황.\n4단계(처리): 법률 검색 + 상황 분석 + 해결책 제시 필요.\n5단계(검증): LEGAL_CONSULT만으로는 불충분, 종합적 분석 필요 → COMPREHENSIVE 선택"\n\n## 판단 가이드:\n- 여러 의도가 섞여있다면, 가장 주된 의도를 intent에, 나머지를 sub_intents에 기록\n- "그리고", "또한", "함께", "같이" 등의 연결어가 있으면 복합 질문일 가능성 높음\n- 법률 관련 키워드가 있으면 LEGAL_CONSULT 우선\n- 가격/시세 언급이 명확하면 MARKET_INQUIRY\n- 계약서라는 단어와 함께 "작성/만들기"가 있으면 CONTRACT_CREATION\n- 계약서라는 단어와 함께 "검토/확인"이 있으면 CONTRACT_REVIEW\n- 불확실하면 confidence를 낮게 설정하고 UNCLEAR 선택\n- 복합 질문은 is_compound를 true로 설정하고 개별 작업으로 분해\n\n분석할 질문: 전세자금대출 한도가 얼마나 되나요?'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 15:54:59,724 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 15:54:59,724 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 15:54:59,724 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 15:54:59,724 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 15:54:59,725 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 15:54:59,725 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 15:55:03,994 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 06:55:03 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'3921'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'4084'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9997'), (b'x-ratelimit-remaining-tokens', b'197243'), (b'x-ratelimit-reset-requests', b'24.635s'), (b'x-ratelimit-reset-tokens', b'827ms'), (b'x-request-id', b'req_6e204d91595b47f189444bb11f78692c'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b02c72a1d3091-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 15:55:03,994 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 15:55:03,994 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 15:55:04,000 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 15:55:04,000 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 15:55:04,000 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 15:55:04,000 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 06:55:03 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '3921', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '4084', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9997', 'x-ratelimit-remaining-tokens': '197243', 'x-ratelimit-reset-requests': '24.635s', 'x-ratelimit-reset-tokens': '827ms', 'x-request-id': 'req_6e204d91595b47f189444bb11f78692c', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b02c72a1d3091-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 15:55:04,000 - openai._base_client - DEBUG - request_id: req_6e204d91595b47f189444bb11f78692c
2025-10-05 15:55:04,001 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: intent_analysis | Model: gpt-4o-mini-2024-07-18 | Tokens: 3378 (prompt: 3181, completion: 197)
2025-10-05 15:55:04,001 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM Intent Analysis Result: {'intent': 'LOAN_CONSULT', 'confidence': 0.9, 'keywords': ['전세자금대출', '한도'], 'sub_intents': [], 'is_compound': False, 'decomposed_tasks': [], 'entities': {'loan_type': '전세자금대출', 'action_verbs': ['확인']}, 'reasoning': '1단계(구조): 단순 정보 요청으로 전세자금대출 한도에 대한 질문. 2단계(유형): 정보 확인형 - 대출 한도에 대한 사실 확인. 3단계(복잡도): 저 - 단일 개념 확인. 4단계(처리): 검색만으로 충분. 5단계(검증): 단순 정보 제공으로 끝나므로 LOAN_CONSULT로 분류.'}
2025-10-05 15:55:04,001 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-906fd5e7-220d-4107-8e12-66767910bd69', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 Agent 선택 전문가입니다.\n사용자의 요청에 가장 적합한 Agent/Team을 선택하는 것이 목표입니다.\n\n## 현재 상황\n\n**사용자 질문:** 전세자금대출 한도가 얼마나 되나요?\n**분석된 의도:** 대출상담\n**추출된 키워드:** [\'전세자금대출\', \'한도\']\n\n## 사용 가능한 Agent/Team 정보\n\n{\'search_team\': {\'name\': \'search_team\', \'capabilities\': \'법률 검색, 부동산 시세 조회, 대출 상품 검색\', \'tools\': [\'legal_search\', \'market_data\', \'loan_data\'], \'use_cases\': [\'법률 상담\', \'시세 조회\', \'대출 정보\']}, \'analysis_team\': {\'name\': \'analysis_team\', \'capabilities\': \'데이터 분석, 리스크 평가, 인사이트 생성, 추천\', \'tools\': [\'data_analyzer\', \'risk_evaluator\'], \'use_cases\': [\'시장 분석\', \'리스크 평가\', \'투자 분석\']}, \'document_team\': {\'name\': \'document_team\', \'capabilities\': \'계약서 작성, 문서 생성, 문서 검토\', \'tools\': [\'document_generator\', \'contract_reviewer\'], \'use_cases\': [\'계약서 작성\', \'문서 검토\']}}\n\n## Agent 역할 및 상세 가이드\n\n### 1. search_team (검색 팀)\n- **주요 기능**: 정보 검색 및 데이터 수집\n- **전문 분야**:\n  * 법률 정보 검색 (전세법, 임대차보호법, 부동산 관련 법규)\n  * 부동산 시세 조회 (매매가, 전세가, 월세, 실거래가)\n  * 대출 상품 정보 검색 (금리, 한도, 조건)\n  * 지역 정보 및 인프라 조회\n- **도구**: legal_search, market_data, loan_data\n- **적합한 작업**: 정보 조회, 데이터 수집, 법률 확인, 시세 파악\n- **예시**:\n  * "전세금 5% 인상 가능한가요?"\n  * "강남구 아파트 전세 시세"\n  * "전세자금대출 한도 얼마?"\n\n### 2. analysis_team (분석 팀)\n- **주요 기능**: 데이터 분석 및 평가\n- **전문 분야**:\n  * 시장 동향 분석 (상승률, 하락률, 추세)\n  * 리스크 평가 (계약, 투자 위험도)\n  * 투자 수익률 계산 (ROI, 월세 수익률)\n  * 대출 한도 및 조건 분석 (LTV, DTI, DSR)\n  * 비교 분석 (지역별, 상품별)\n- **도구**: data_analyzer, risk_evaluator, calculator\n- **적합한 작업**: 데이터 분석, 리스크 평가, 계산, 비교, 예측\n- **의존성**: 보통 search_team의 데이터가 필요\n- **예시**:\n  * "이 지역 투자 가치 분석해줘"\n  * "계약 리스크 평가해줘"\n  * "대출 가능 금액 계산해줘"\n\n### 3. document_team (문서 팀)\n- **주요 기능**: 문서 생성 및 관리\n- **전문 분야**:\n  * 계약서 작성 (임대차, 매매, 전세)\n  * 문서 템플릿 관리\n  * 특약사항 생성\n  * 계약서 수정안 작성\n  * 법률 문서 검토\n- **도구**: document_generator, contract_template, contract_reviewer\n- **적합한 작업**: 문서 작성, 계약서 생성, 문서 수정, 검토\n- **예시**:\n  * "임대차계약서 작성해줘"\n  * "특약사항 추가해줘"\n  * "계약서 수정안 만들어줘"\n\n## Chain-of-Thought Agent 선택 프로세스\n\n다음 단계를 **순서대로** 따라 최적의 Agent 조합을 선택하세요:\n\n### 1단계: 질문 요구사항 파악\n- 단순 정보 조회인가? → search_team만 필요\n- 판단/평가가 필요한가? → search + analysis 필요\n- 해결책 제시가 필요한가? → search + analysis 필요\n- 문서 생성이 필요한가? → document_team 추가\n\n### 2단계: 작업 복잡도 판단\n- **단순** (검색만): "~이 뭐야?", "~알려줘" → search_team\n- **중간** (검색+판단): "~괜찮아?", "~적절해?" → search + analysis\n- **복잡** (종합 해결): 구체적 상황 + "어떻게 해야 해?" → search + analysis\n\n### 3단계: 의존성 분석\n- 독립적 작업: 단일 팀으로 처리 가능\n- 순차적 의존: 이전 결과 필요 → 여러 팀 순서대로\n- 병렬 가능: 동시 조회 가능 → coordination: "parallel"\n\n### 4단계: 최종 검증\n- 선택한 팀들로 질문에 완전히 답변 가능한가?\n- 불필요한 팀이 포함되지 않았는가?\n- 순서가 논리적인가? (데이터 흐름 고려)\n\n### 중요 원칙:\n- **법률 키워드만으로 판단하지 말 것**: "법적으로 어떻게 해야 해?" = 법률 검색 + 분석 필요\n- **상황 설명 + 해결책 요청** = 반드시 analysis_team 포함\n- **구체적 수치 비교** (3억→10억 같은) = analysis_team 필요\n\n## 의도별 Agent 매핑 가이드 (기본 가이드 - CoT로 조정 가능)\n\n| 의도 (Intent) | 기본 조합 | 상황별 조정 |\n|--------------|-----------|-------------|\n| LEGAL_CONSULT | ["search_team"] | 해결책 요청시 → + analysis_team |\n| MARKET_INQUIRY | ["search_team"] | 비교/평가시 → + analysis_team |\n| LOAN_CONSULT | ["search_team", "analysis_team"] | 계산 필수 |\n| CONTRACT_CREATION | ["document_team"] | 검토 후 작성 → search + document |\n| CONTRACT_REVIEW | ["search_team", "analysis_team"] | 법률 검토 + 리스크 분석 |\n| COMPREHENSIVE | ["search_team", "analysis_team"] | **항상 분석 포함** |\n| RISK_ANALYSIS | ["analysis_team"] | 법률 근거 필요시 → search + analysis |\n| UNCLEAR | ["search_team", "analysis_team"] | 포괄적 대응 |\n\n**중요**: 위 매핑은 **기본 가이드**일 뿐입니다.\n실제 질문의 내용(CoT 분석 결과)에 따라 조정하세요!\n\n## 복합 질문 처리 예시 (CoT 적용)\n\n### 예시 1: 순차적 처리\n질문: "강남구 시세 확인하고 투자 가치 분석해줘"\n**CoT 분석**:\n1. 요구사항: 시세 조회 + 투자 가치 평가\n2. 복잡도: 중간 (검색 + 분석)\n3. 의존성: 시세 데이터 → 투자 분석 (순차)\n4. 검증: search만으로는 "투자 가치 평가" 불가능\n\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "1단계: 시세 조회+투자 평가 필요. 2단계: 중간 복잡도. 3단계: 순차 의존. 4단계: search로 시세 수집 후 analysis로 투자 가치 평가 필요",\n    "coordination": "sequential"\n}\n```\n\n### 예시 2: 단순 정보 조회\n질문: "전세금 인상률 한도가 얼마야?"\n**CoT 분석**:\n1. 요구사항: 단순 사실 확인\n2. 복잡도: 낮음 (정보 확인형)\n3. 의존성: 없음\n4. 검증: search_team만으로 충분\n\n```json\n{\n    "selected_agents": ["search_team"],\n    "reasoning": "1단계: 단순 정보 조회. 2단계: 저복잡도. 3단계: 독립적. 4단계: 법률 검색만으로 답변 가능",\n    "coordination": "single"\n}\n```\n\n### 예시 3: 해결책 요청 (핵심 예시!)\n질문: "집주인이 전세금 3억을 10억으로 올려달래. 법적으로 어떻게 해야 해?"\n의도: COMPREHENSIVE\n**CoT 분석**:\n1. 요구사항: 상황 설명 + 해결책 요청\n2. 복잡도: 높음 (구체적 상황 + 수치 비교)\n3. 의존성: 법률 확인 → 상황 분석 → 해결책 제시\n4. 검증: "법적으로"만 보고 search만 선택하면 불충분! 해결책 제시 필요\n\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "1단계: 법률 + 상황 분석 + 해결책 필요. 2단계: 고복잡도(3억→10억 비정상). 3단계: 순차(법률 확인 후 타당성 분석). 4단계: \'어떻게 해야\' = 단순 법률 조회 아님, 분석 필수",\n    "coordination": "sequential",\n    "confidence": 0.95\n}\n```\n\n## 응답 형식 (JSON)\n\n```json\n{\n    "selected_agents": ["선택된 agent/team 목록"],\n    "reasoning": "선택 이유를 구체적으로 설명. 각 Agent의 역할과 처리 순서 포함",\n    "coordination": "single/sequential/parallel/pipeline",\n    "dependencies": {"agent2": ["agent1"]},\n    "estimated_time": 30,\n    "confidence": 0.9\n}\n```\n\n## 선택 가이드라인\n\n1. **최소 Agent 원칙**: 가능한 적은 수의 Agent로 처리\n2. **전문성 우선**: 해당 작업에 가장 전문적인 Agent 선택\n3. **효율성 고려**: 병렬 처리 가능한 경우 명시\n4. **의존성 관리**: 데이터 흐름을 고려한 순서 지정\n5. **폴백 전략**: 불확실한 경우 ["search_team", "analysis_team"] 조합\n\n## 주의사항\n\n- selected_agents는 반드시 배열 형태\n- Agent 이름은 정확히: "search_team", "analysis_team", "document_team"\n- 최소 1개, 최대 3개 선택\n- 순서는 실행 우선순위 (앞에 있을수록 먼저 실행)\n- reasoning은 상세하고 논리적으로 작성\n- coordination 필드로 실행 방식 명시\n- 복합 질문의 경우 의존성 관계 명확히 표시'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 15:55:04,001 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 15:55:04,002 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 15:55:04,002 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 15:55:04,002 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 15:55:04,002 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 15:55:04,002 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 15:55:08,418 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 06:55:08 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'4194'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'4214'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9996'), (b'x-ratelimit-remaining-tokens', b'197891'), (b'x-ratelimit-reset-requests', b'29.121s'), (b'x-ratelimit-reset-tokens', b'632ms'), (b'x-request-id', b'req_bb02f24084344ddcb0056c581d91b3da'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b02e1ed373091-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 15:55:08,418 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 15:55:08,418 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 15:55:08,419 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 15:55:08,419 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 15:55:08,419 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 15:55:08,419 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 06:55:08 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '4194', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '4214', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9996', 'x-ratelimit-remaining-tokens': '197891', 'x-ratelimit-reset-requests': '29.121s', 'x-ratelimit-reset-tokens': '632ms', 'x-request-id': 'req_bb02f24084344ddcb0056c581d91b3da', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b02e1ed373091-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 15:55:08,419 - openai._base_client - DEBUG - request_id: req_bb02f24084344ddcb0056c581d91b3da
2025-10-05 15:55:08,419 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: agent_selection | Model: gpt-4o-mini-2024-07-18 | Tokens: 2546 (prompt: 2356, completion: 190)
2025-10-05 15:55:08,419 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM agent selection reasoning: 1단계: 전세자금대출 한도에 대한 정보 조회와 함께 대출 조건 분석이 필요합니다. 2단계: 대출 한도에 대한 단순 정보 조회가 아닌, 대출 조건과 관련된 분석이 필요하므로 중간 복잡도로 판단했습니다. 3단계: 대출 한도 정보를 검색한 후, 그에 대한 분석이 필요하므로 순차적 의존성이 있습니다. 4단계: search_team을 통해 대출 한도를 확인한 후, analysis_team을 통해 그 한도에 대한 적절성 및 조건을 분석할 수 있습니다.
2025-10-05 15:55:08,419 - app.service_agent.cognitive_agents.planning_agent - INFO - ✅ Primary LLM selected agents: ['search_team', 'analysis_team']
2025-10-05 15:55:08,419 - __main__ - INFO -   의도: 대출상담
2025-10-05 15:55:08,419 - __main__ - INFO -   신뢰도: 0.90
2025-10-05 15:55:08,419 - __main__ - INFO -   추천 Agent: ['search_team', 'analysis_team']
2025-10-05 15:55:08,419 - __main__ - INFO - 
[Step 2] Query Decomposition...
2025-10-05 15:55:08,419 - app.service_agent.cognitive_agents.query_decomposer - INFO - Decomposing query: 전세자금대출 한도가 얼마나 되나요?...
2025-10-05 15:55:08,419 - app.service_agent.cognitive_agents.query_decomposer - INFO - Query is simple, no decomposition needed
2025-10-05 15:55:08,419 - __main__ - INFO -   복합 질문: False
2025-10-05 15:55:08,419 - __main__ - INFO -   작업 수: 1
2025-10-05 15:55:08,419 - __main__ - INFO -   실행 모드: sequential
2025-10-05 15:55:08,419 - __main__ - INFO - 
[Step 3] Execution Plan 생성...
2025-10-05 15:55:08,420 - app.service_agent.cognitive_agents.planning_agent - INFO - Creating execution plan for intent: 대출상담
2025-10-05 15:55:08,420 - app.service_agent.cognitive_agents.planning_agent - WARNING - AgentRegistry is empty, using default teams
2025-10-05 15:55:08,420 - app.service_agent.cognitive_agents.planning_agent - DEBUG - Suggested agents: ['search_team', 'analysis_team']
2025-10-05 15:55:08,420 - app.service_agent.cognitive_agents.planning_agent - DEBUG - Available agents: ['search_team', 'analysis_team', 'document_team']
2025-10-05 15:55:08,420 - app.service_agent.cognitive_agents.planning_agent - INFO - Selected agents/teams for execution: ['search_team', 'analysis_team']
2025-10-05 15:55:08,420 - __main__ - INFO -   전략: sequential
2025-10-05 15:55:08,420 - __main__ - INFO -   단계 수: 2
2025-10-05 15:55:08,420 - __main__ - INFO - 
✓ 테스트 성공 (소요시간: 8.70초)
2025-10-05 15:55:08,420 - __main__ - INFO - 
================================================================================
2025-10-05 15:55:08,420 - __main__ - INFO - [4] 단일 질문 테스트: S004
2025-10-05 15:55:08,420 - __main__ - INFO - 질문: 임대차계약서 작성해주세요
2025-10-05 15:55:08,420 - __main__ - INFO - ================================================================================
2025-10-05 15:55:08,420 - __main__ - INFO - 
[Step 1] Intent 분석...
2025-10-05 15:55:08,420 - app.service_agent.cognitive_agents.planning_agent - INFO - Analyzing intent for query: 임대차계약서 작성해주세요...
2025-10-05 15:55:08,420 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-7cd89254-7056-4f4b-9dd3-bda614b58cb4', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 의도 분석 전문가입니다.\n사용자의 질문을 정확히 이해하고, 어떤 종류의 도움이 필요한지 분류해야 합니다.\n\n## Chain-of-Thought 분석 프로세스\n\n질문을 분석할 때 다음 단계를 **순서대로** 따르세요:\n\n### 1단계: 질문 구조 파악\n- 단순 정보 요청인가? (예: "~이 뭐야?", "~알려줘")\n- 상황 설명이 포함되어 있는가? (배경, 현재 상태)\n- 구체적 수치나 데이터가 있는가? (금액, 비율, 기간 등)\n- 문제 해결을 요구하는가? (예: "어떻게 해야 해?", "방법 알려줘")\n\n### 2단계: 요청 유형 판단\n- **정보 확인형**: 사실, 개념, 규정 확인 → 검색만으로 충분\n- **평가/판단형**: "괜찮아?", "적절해?", "문제있어?" → 검색 + 분석 필요\n- **해결책 요청형**: "어떻게?", "방법?", "대처?" → 검색 + 분석 + 제안 필요\n- **비교/선택형**: "A vs B", "어느게 나아?" → 검색 + 분석(비교) 필요\n\n### 3단계: 복잡도 평가\n- **저**: 단일 개념/사실 확인 (예: "전세금 인상률 한도?")\n- **중**: 특정 상황 + 판단 (예: "3억을 5억으로 올려달래. 가능해?")\n- **고**: 복잡한 상황 + 여러 조건 + 해결책 (예: "10년 거주, 3억→10억 요구. 어떻게 해야 해?")\n\n### 4단계: 필요한 처리 결정\n- **검색만**: 정보 확인형 + 저복잡도\n- **검색+분석**: 평가/판단형 OR 중복잡도 OR 수치 비교 포함\n- **종합처리**: 해결책 요청형 OR 고복잡도 OR 여러 조건 동시 고려\n\n### 5단계: 최종 검증\n- 선택한 의도로 사용자 질문에 완전히 답변 가능한가?\n- 단순 정보 제공으로 끝나는가, 아니면 추가 분석/판단이 필요한가?\n- 상황 설명이 있으면서 "해결", "방법", "어떻게" 등이 있으면 → COMPREHENSIVE 고려\n\n## 중요: 복합 질문 처리\n복합적인 질문(여러 의도가 섞인 질문)의 경우, 가장 핵심적인 의도를 파악하되,\nsub_intents 필드에 부가적인 의도들도 함께 기록해주세요.\n\n**특히 주의**:\n- 법률 키워드가 있어도, "해결방법", "어떻게 해야" 같은 표현이 있으면 단순 LEGAL_CONSULT가 아닐 수 있음\n- 구체적 상황(금액, 기간 등) + 해결책 요구 = COMPREHENSIVE 또는 복합 의도로 분류\n\n## 분류 카테고리 설명:\n\n1. **LEGAL_CONSULT (법률상담)**\n   - 설명: 부동산 관련 법률, 권리, 의무에 대한 질문\n   - 예시:\n     * 단순: "전세금 5% 인상이 가능한가요?", "임대차계약 갱신 거부할 수 있나요?"\n     * 복합: "전세금 인상 가능한지 확인하고 법적 근거도 알려주세요"\n   - 키워드: 법, 전세, 임대, 보증금, 계약, 권리, 의무, 갱신, 임차인, 임대인, 법률, 규정, 조항\n   - 필요한 처리: 법률 데이터베이스 검색, 관련 법조항 찾기\n\n2. **MARKET_INQUIRY (시세조회)**\n   - 설명: 부동산 시장 가격, 시세, 거래 동향에 대한 질문\n   - 예시:\n     * 단순: "강남구 아파트 전세 시세 알려주세요", "서초동 매매가 얼마나 올랐나요?"\n     * 복합: "강남구 시세 확인하고 대출 가능 금액도 계산해줘"\n   - 키워드: 시세, 가격, 매매가, 전세가, 월세, 시장, 동향, 평균, 지역명, 상승률, 하락률\n   - 필요한 처리: 부동산 시세 데이터 조회, 지역별 가격 분석\n\n3. **LOAN_CONSULT (대출상담)**\n   - 설명: 주택담보대출, 전세자금대출 등 금융 관련 질문\n   - 예시:\n     * 단순: "전세자금대출 한도가 얼마인가요?", "LTV가 뭔가요?"\n     * 복합: "대출 한도 확인하고 금리 비교도 해주세요"\n   - 키워드: 대출, 금리, 한도, 조건, 상환, LTV, DTI, DSR, 담보, 금융, 은행\n   - 필요한 처리: 대출 상품 조회, 금리 정보 검색, 한도 계산\n\n4. **CONTRACT_CREATION (계약서작성)**\n   - 설명: 새로운 계약서나 문서를 작성해달라는 요청\n   - 예시:\n     * 단순: "임대차계약서 작성해주세요", "전세계약서 초안 만들어주세요"\n     * 복합: "계약서 작성하고 주의사항도 검토해주세요"\n   - 키워드: 작성, 만들, 생성, 초안, 계약서, 문서, 양식\n   - 필요한 처리: 문서 생성 에이전트 호출, 템플릿 기반 작성\n\n5. **CONTRACT_REVIEW (계약서검토)**\n   - 설명: 기존 계약서나 문서를 검토해달라는 요청\n   - 예시:\n     * 단순: "이 계약서 검토해주세요", "특약사항 문제없나요?"\n     * 복합: "계약서 검토하고 수정사항도 제안해주세요"\n   - 키워드: 검토, 확인, 점검, 리뷰, 분석해, 살펴봐, 체크\n   - 필요한 처리: 문서 분석, 위험 요소 식별, 개선사항 제안\n\n6. **COMPREHENSIVE (종합분석)**\n   - 설명: 여러 측면을 종합적으로 분석해달라는 요청, 또는 복잡한 상황에 대한 해결책 요청\n   - 예시:\n     * 단순: "이 물건 전체적으로 분석해주세요"\n     * 복합: "시세, 법률, 대출 모두 검토해서 종합 의견 주세요"\n     * 해결형: "10년 거주했는데 전세금 3억을 10억으로 올려달래. 어떻게 해야 해?"\n     * 상황+해결: "집주인이 계약 갱신 거부했어. 법적으로 어떻게 대응해야 할까?"\n   - 키워드: 종합, 전체, 모든, 전반적, 종합적, 평가, 분석, 어떻게, 방법, 해결, 대처\n   - 패턴: 구체적 상황 설명 + "어떻게/방법/해결" 요청\n   - 필요한 처리: 다중 데이터 소스 통합 분석, 상황 평가, 해결책 제시\n\n7. **RISK_ANALYSIS (리스크분석)**\n   - 설명: 위험 요소나 주의사항에 대한 질문\n   - 예시:\n     * 단순: "이 계약 위험한가요?", "주의할 점 알려주세요"\n     * 복합: "리스크 분석하고 대안도 제시해주세요"\n   - 키워드: 위험, 리스크, 주의, 문제점, 조심, 걱정, 우려\n   - 필요한 처리: 위험 요소 분석, 주의사항 추출\n\n8. **UNCLEAR (불분명)**\n   - 설명: 의도를 명확히 파악하기 어려운 질문\n   - 예시: "이거 좀 봐주세요", "어떻게 해야 할까요?", "도와주세요"\n   - 처리: 추가 질문으로 의도 명확화 필요\n\n9. **IRRELEVANT (무관)**\n   - 설명: 부동산과 전혀 관련 없는 질문\n   - 예시: "날씨 어때?", "저녁 뭐 먹지?", "주식 추천해줘"\n   - 처리: 부동산 관련 질문을 유도\n\n## 복합 질문 예시와 분석 (CoT 적용):\n\n### 예시 1: "강남구 아파트 시세 알려주고 전세자금대출 가능한지도 확인해줘"\n**CoT 분석**:\n1. 구조: 두 개의 요청 ("시세" + "대출")\n2. 유형: 정보 확인형 (둘 다)\n3. 복잡도: 중 (두 가지 독립적 조회)\n4. 필요 처리: 검색 + 계산/분석\n\n**결론**:\n- 주 의도: MARKET_INQUIRY (시세 조회가 먼저 필요)\n- 부가 의도: LOAN_CONSULT (대출 확인)\n- 분해: ["강남구 아파트 시세 조회", "전세자금대출 가능 여부 확인"]\n\n### 예시 2: "이 계약서 검토해서 위험한 부분 있는지 알려주고 수정 제안도 해줘"\n**CoT 분석**:\n1. 구조: 검토 + 위험 평가 + 수정안\n2. 유형: 평가/판단형 + 해결책 요청형\n3. 복잡도: 고 (3단계 처리)\n4. 필요 처리: 검토 + 분석 + 문서 생성\n\n**결론**:\n- 주 의도: CONTRACT_REVIEW (계약서 검토)\n- 부가 의도: RISK_ANALYSIS (위험 분석)\n- 분해: ["계약서 전체 검토", "위험 요소 식별", "수정사항 제안"]\n\n### 예시 3: "집주인이 짜증나, 10년 살았는데 전세금 3억을 10억으로 올려달래. 법적으로 해결방법 알려줘"\n**CoT 분석**:\n1. 구조: 상황 설명 (10년 거주, 3억→10억) + 해결책 요청\n2. 유형: 해결책 요청형 (단순 정보 X)\n3. 복잡도: 고 (구체적 상황 + 수치 비교 + 법률 + 대응방안)\n4. 필요 처리: 법률 검색 + 상황 분석 + 해결책 제시\n\n**결론**:\n- 주 의도: COMPREHENSIVE (복잡한 상황에 대한 종합 해결)\n- 부가 의도: LEGAL_CONSULT, RISK_ANALYSIS\n- 분해: ["전세금 인상 한도 법률 조회", "3억→10억 인상의 타당성 분석", "구체적 대응 방안 제시"]\n- **이유**: "법적으로"라는 키워드가 있지만, 단순 법률 확인이 아니라 구체적 상황에 대한 해결책을 요구하므로 COMPREHENSIVE\n\n### 예시 4: "전세금 인상률 상한이 얼마야?"\n**CoT 분석**:\n1. 구조: 단순 사실 확인\n2. 유형: 정보 확인형\n3. 복잡도: 저 (단일 개념)\n4. 필요 처리: 검색만\n\n**결론**:\n- 주 의도: LEGAL_CONSULT (법률 정보 조회)\n- 부가 의도: 없음\n- 분해: 필요 없음\n\n## 응답 형식 (JSON 형식으로 응답):\n\n```json\n{\n    "intent": "LEGAL_CONSULT",\n    "confidence": 0.9,\n    "keywords": ["전세금", "인상", "제한"],\n    "sub_intents": [],\n    "is_compound": false,\n    "decomposed_tasks": [],\n    "entities": {\n        "location": "강남구",\n        "price": "5억",\n        "contract_type": "전세",\n        "date": "2024년",\n        "area": "84㎡",\n        "action_verbs": ["확인", "검토"]\n    },\n    "reasoning": "전세금 인상에 대한 법률 질문이므로 LEGAL_CONSULT로 분류"\n}\n```\n\n응답 규칙:\n- intent: 위 9개 카테고리 중 하나 (대문자_언더스코어 형식)\n- confidence: 0.0~1.0 (0.8 이상이면 매우 확실, 0.5 미만이면 불확실)\n- keywords: 추출된 주요 키워드 목록\n- sub_intents: 복합 질문일 경우 부가적인 의도들\n- is_compound: 복합 질문 여부 (true/false)\n- decomposed_tasks: 복합 질문을 분해한 개별 작업들\n- entities: 추출된 엔티티 정보\n- reasoning: **반드시 CoT 5단계를 거쳐 분석한 과정을 포함** (구조 파악 → 유형 판단 → 복잡도 평가 → 필요 처리 → 최종 검증)\n\n## reasoning 작성 예시:\n"1단계(구조): 상황 설명(10년 거주, 3억→10억) + 해결책 요청 포함.\n2단계(유형): 해결책 요청형 - 단순 정보가 아닌 대응방안 필요.\n3단계(복잡도): 고 - 구체적 수치 비교와 복잡한 상황.\n4단계(처리): 법률 검색 + 상황 분석 + 해결책 제시 필요.\n5단계(검증): LEGAL_CONSULT만으로는 불충분, 종합적 분석 필요 → COMPREHENSIVE 선택"\n\n## 판단 가이드:\n- 여러 의도가 섞여있다면, 가장 주된 의도를 intent에, 나머지를 sub_intents에 기록\n- "그리고", "또한", "함께", "같이" 등의 연결어가 있으면 복합 질문일 가능성 높음\n- 법률 관련 키워드가 있으면 LEGAL_CONSULT 우선\n- 가격/시세 언급이 명확하면 MARKET_INQUIRY\n- 계약서라는 단어와 함께 "작성/만들기"가 있으면 CONTRACT_CREATION\n- 계약서라는 단어와 함께 "검토/확인"이 있으면 CONTRACT_REVIEW\n- 불확실하면 confidence를 낮게 설정하고 UNCLEAR 선택\n- 복합 질문은 is_compound를 true로 설정하고 개별 작업으로 분해\n\n분석할 질문: 임대차계약서 작성해주세요'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 15:55:08,421 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 15:55:08,421 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 15:55:08,421 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 15:55:08,421 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 15:55:08,421 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 15:55:08,421 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 15:55:15,941 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 06:55:15 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'7196'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'7221'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9996'), (b'x-ratelimit-remaining-tokens', b'197246'), (b'x-ratelimit-reset-requests', b'33.341s'), (b'x-ratelimit-reset-tokens', b'826ms'), (b'x-request-id', b'req_529eba13af6641ea88d3aa1f1df387de'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b02fd89403091-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 15:55:15,941 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 15:55:15,942 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 15:55:15,942 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 15:55:15,942 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 15:55:15,942 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 15:55:15,942 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 06:55:15 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '7196', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '7221', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9996', 'x-ratelimit-remaining-tokens': '197246', 'x-ratelimit-reset-requests': '33.341s', 'x-ratelimit-reset-tokens': '826ms', 'x-request-id': 'req_529eba13af6641ea88d3aa1f1df387de', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b02fd89403091-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 15:55:15,942 - openai._base_client - DEBUG - request_id: req_529eba13af6641ea88d3aa1f1df387de
2025-10-05 15:55:15,943 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: intent_analysis | Model: gpt-4o-mini-2024-07-18 | Tokens: 3377 (prompt: 3177, completion: 200)
2025-10-05 15:55:15,943 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM Intent Analysis Result: {'intent': 'CONTRACT_CREATION', 'confidence': 0.95, 'keywords': ['임대차계약서', '작성'], 'sub_intents': [], 'is_compound': False, 'decomposed_tasks': [], 'entities': {'contract_type': '임대차계약서', 'action_verbs': ['작성', '만들기']}, 'reasoning': '1단계(구조): 단순 요청으로 임대차계약서 작성 요청 포함. 2단계(유형): 계약서 작성 요청형 - 단순 정보가 아닌 문서 생성 필요. 3단계(복잡도): 저 - 단일 개념 확인. 4단계(처리): 문서 생성 에이전트 호출 필요. 5단계(검증): 요청이 명확하므로 CONTRACT_CREATION으로 분류.'}
2025-10-05 15:55:15,943 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-4f8f8759-9c60-4f4a-8082-52da24407be1', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 Agent 선택 전문가입니다.\n사용자의 요청에 가장 적합한 Agent/Team을 선택하는 것이 목표입니다.\n\n## 현재 상황\n\n**사용자 질문:** 임대차계약서 작성해주세요\n**분석된 의도:** 계약서작성\n**추출된 키워드:** [\'임대차계약서\', \'작성\']\n\n## 사용 가능한 Agent/Team 정보\n\n{\'search_team\': {\'name\': \'search_team\', \'capabilities\': \'법률 검색, 부동산 시세 조회, 대출 상품 검색\', \'tools\': [\'legal_search\', \'market_data\', \'loan_data\'], \'use_cases\': [\'법률 상담\', \'시세 조회\', \'대출 정보\']}, \'analysis_team\': {\'name\': \'analysis_team\', \'capabilities\': \'데이터 분석, 리스크 평가, 인사이트 생성, 추천\', \'tools\': [\'data_analyzer\', \'risk_evaluator\'], \'use_cases\': [\'시장 분석\', \'리스크 평가\', \'투자 분석\']}, \'document_team\': {\'name\': \'document_team\', \'capabilities\': \'계약서 작성, 문서 생성, 문서 검토\', \'tools\': [\'document_generator\', \'contract_reviewer\'], \'use_cases\': [\'계약서 작성\', \'문서 검토\']}}\n\n## Agent 역할 및 상세 가이드\n\n### 1. search_team (검색 팀)\n- **주요 기능**: 정보 검색 및 데이터 수집\n- **전문 분야**:\n  * 법률 정보 검색 (전세법, 임대차보호법, 부동산 관련 법규)\n  * 부동산 시세 조회 (매매가, 전세가, 월세, 실거래가)\n  * 대출 상품 정보 검색 (금리, 한도, 조건)\n  * 지역 정보 및 인프라 조회\n- **도구**: legal_search, market_data, loan_data\n- **적합한 작업**: 정보 조회, 데이터 수집, 법률 확인, 시세 파악\n- **예시**:\n  * "전세금 5% 인상 가능한가요?"\n  * "강남구 아파트 전세 시세"\n  * "전세자금대출 한도 얼마?"\n\n### 2. analysis_team (분석 팀)\n- **주요 기능**: 데이터 분석 및 평가\n- **전문 분야**:\n  * 시장 동향 분석 (상승률, 하락률, 추세)\n  * 리스크 평가 (계약, 투자 위험도)\n  * 투자 수익률 계산 (ROI, 월세 수익률)\n  * 대출 한도 및 조건 분석 (LTV, DTI, DSR)\n  * 비교 분석 (지역별, 상품별)\n- **도구**: data_analyzer, risk_evaluator, calculator\n- **적합한 작업**: 데이터 분석, 리스크 평가, 계산, 비교, 예측\n- **의존성**: 보통 search_team의 데이터가 필요\n- **예시**:\n  * "이 지역 투자 가치 분석해줘"\n  * "계약 리스크 평가해줘"\n  * "대출 가능 금액 계산해줘"\n\n### 3. document_team (문서 팀)\n- **주요 기능**: 문서 생성 및 관리\n- **전문 분야**:\n  * 계약서 작성 (임대차, 매매, 전세)\n  * 문서 템플릿 관리\n  * 특약사항 생성\n  * 계약서 수정안 작성\n  * 법률 문서 검토\n- **도구**: document_generator, contract_template, contract_reviewer\n- **적합한 작업**: 문서 작성, 계약서 생성, 문서 수정, 검토\n- **예시**:\n  * "임대차계약서 작성해줘"\n  * "특약사항 추가해줘"\n  * "계약서 수정안 만들어줘"\n\n## Chain-of-Thought Agent 선택 프로세스\n\n다음 단계를 **순서대로** 따라 최적의 Agent 조합을 선택하세요:\n\n### 1단계: 질문 요구사항 파악\n- 단순 정보 조회인가? → search_team만 필요\n- 판단/평가가 필요한가? → search + analysis 필요\n- 해결책 제시가 필요한가? → search + analysis 필요\n- 문서 생성이 필요한가? → document_team 추가\n\n### 2단계: 작업 복잡도 판단\n- **단순** (검색만): "~이 뭐야?", "~알려줘" → search_team\n- **중간** (검색+판단): "~괜찮아?", "~적절해?" → search + analysis\n- **복잡** (종합 해결): 구체적 상황 + "어떻게 해야 해?" → search + analysis\n\n### 3단계: 의존성 분석\n- 독립적 작업: 단일 팀으로 처리 가능\n- 순차적 의존: 이전 결과 필요 → 여러 팀 순서대로\n- 병렬 가능: 동시 조회 가능 → coordination: "parallel"\n\n### 4단계: 최종 검증\n- 선택한 팀들로 질문에 완전히 답변 가능한가?\n- 불필요한 팀이 포함되지 않았는가?\n- 순서가 논리적인가? (데이터 흐름 고려)\n\n### 중요 원칙:\n- **법률 키워드만으로 판단하지 말 것**: "법적으로 어떻게 해야 해?" = 법률 검색 + 분석 필요\n- **상황 설명 + 해결책 요청** = 반드시 analysis_team 포함\n- **구체적 수치 비교** (3억→10억 같은) = analysis_team 필요\n\n## 의도별 Agent 매핑 가이드 (기본 가이드 - CoT로 조정 가능)\n\n| 의도 (Intent) | 기본 조합 | 상황별 조정 |\n|--------------|-----------|-------------|\n| LEGAL_CONSULT | ["search_team"] | 해결책 요청시 → + analysis_team |\n| MARKET_INQUIRY | ["search_team"] | 비교/평가시 → + analysis_team |\n| LOAN_CONSULT | ["search_team", "analysis_team"] | 계산 필수 |\n| CONTRACT_CREATION | ["document_team"] | 검토 후 작성 → search + document |\n| CONTRACT_REVIEW | ["search_team", "analysis_team"] | 법률 검토 + 리스크 분석 |\n| COMPREHENSIVE | ["search_team", "analysis_team"] | **항상 분석 포함** |\n| RISK_ANALYSIS | ["analysis_team"] | 법률 근거 필요시 → search + analysis |\n| UNCLEAR | ["search_team", "analysis_team"] | 포괄적 대응 |\n\n**중요**: 위 매핑은 **기본 가이드**일 뿐입니다.\n실제 질문의 내용(CoT 분석 결과)에 따라 조정하세요!\n\n## 복합 질문 처리 예시 (CoT 적용)\n\n### 예시 1: 순차적 처리\n질문: "강남구 시세 확인하고 투자 가치 분석해줘"\n**CoT 분석**:\n1. 요구사항: 시세 조회 + 투자 가치 평가\n2. 복잡도: 중간 (검색 + 분석)\n3. 의존성: 시세 데이터 → 투자 분석 (순차)\n4. 검증: search만으로는 "투자 가치 평가" 불가능\n\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "1단계: 시세 조회+투자 평가 필요. 2단계: 중간 복잡도. 3단계: 순차 의존. 4단계: search로 시세 수집 후 analysis로 투자 가치 평가 필요",\n    "coordination": "sequential"\n}\n```\n\n### 예시 2: 단순 정보 조회\n질문: "전세금 인상률 한도가 얼마야?"\n**CoT 분석**:\n1. 요구사항: 단순 사실 확인\n2. 복잡도: 낮음 (정보 확인형)\n3. 의존성: 없음\n4. 검증: search_team만으로 충분\n\n```json\n{\n    "selected_agents": ["search_team"],\n    "reasoning": "1단계: 단순 정보 조회. 2단계: 저복잡도. 3단계: 독립적. 4단계: 법률 검색만으로 답변 가능",\n    "coordination": "single"\n}\n```\n\n### 예시 3: 해결책 요청 (핵심 예시!)\n질문: "집주인이 전세금 3억을 10억으로 올려달래. 법적으로 어떻게 해야 해?"\n의도: COMPREHENSIVE\n**CoT 분석**:\n1. 요구사항: 상황 설명 + 해결책 요청\n2. 복잡도: 높음 (구체적 상황 + 수치 비교)\n3. 의존성: 법률 확인 → 상황 분석 → 해결책 제시\n4. 검증: "법적으로"만 보고 search만 선택하면 불충분! 해결책 제시 필요\n\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "1단계: 법률 + 상황 분석 + 해결책 필요. 2단계: 고복잡도(3억→10억 비정상). 3단계: 순차(법률 확인 후 타당성 분석). 4단계: \'어떻게 해야\' = 단순 법률 조회 아님, 분석 필수",\n    "coordination": "sequential",\n    "confidence": 0.95\n}\n```\n\n## 응답 형식 (JSON)\n\n```json\n{\n    "selected_agents": ["선택된 agent/team 목록"],\n    "reasoning": "선택 이유를 구체적으로 설명. 각 Agent의 역할과 처리 순서 포함",\n    "coordination": "single/sequential/parallel/pipeline",\n    "dependencies": {"agent2": ["agent1"]},\n    "estimated_time": 30,\n    "confidence": 0.9\n}\n```\n\n## 선택 가이드라인\n\n1. **최소 Agent 원칙**: 가능한 적은 수의 Agent로 처리\n2. **전문성 우선**: 해당 작업에 가장 전문적인 Agent 선택\n3. **효율성 고려**: 병렬 처리 가능한 경우 명시\n4. **의존성 관리**: 데이터 흐름을 고려한 순서 지정\n5. **폴백 전략**: 불확실한 경우 ["search_team", "analysis_team"] 조합\n\n## 주의사항\n\n- selected_agents는 반드시 배열 형태\n- Agent 이름은 정확히: "search_team", "analysis_team", "document_team"\n- 최소 1개, 최대 3개 선택\n- 순서는 실행 우선순위 (앞에 있을수록 먼저 실행)\n- reasoning은 상세하고 논리적으로 작성\n- coordination 필드로 실행 방식 명시\n- 복합 질문의 경우 의존성 관계 명확히 표시'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 15:55:15,943 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 15:55:15,944 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 15:55:15,944 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 15:55:15,944 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 15:55:15,944 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 15:55:15,944 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 15:55:23,826 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 06:55:23 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'7623'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'7645'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9996'), (b'x-ratelimit-remaining-tokens', b'197893'), (b'x-ratelimit-reset-requests', b'34.46s'), (b'x-ratelimit-reset-tokens', b'632ms'), (b'x-request-id', b'req_c71558ea6c4e473191a34010aa5af7db'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b032c8ed33091-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 15:55:23,826 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 15:55:23,826 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 15:55:23,826 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 15:55:23,826 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 15:55:23,826 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 15:55:23,826 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 06:55:23 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '7623', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '7645', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9996', 'x-ratelimit-remaining-tokens': '197893', 'x-ratelimit-reset-requests': '34.46s', 'x-ratelimit-reset-tokens': '632ms', 'x-request-id': 'req_c71558ea6c4e473191a34010aa5af7db', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b032c8ed33091-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 15:55:23,826 - openai._base_client - DEBUG - request_id: req_c71558ea6c4e473191a34010aa5af7db
2025-10-05 15:55:23,827 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: agent_selection | Model: gpt-4o-mini-2024-07-18 | Tokens: 2447 (prompt: 2351, completion: 96)
2025-10-05 15:55:23,827 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM agent selection reasoning: 사용자가 요청한 '임대차계약서 작성'은 문서 생성 작업으로, document_team이 전문성을 가지고 있습니다. 이 팀은 계약서 작성 및 문서 생성에 특화되어 있으며, 사용자의 요청에 직접적으로 부합합니다.
2025-10-05 15:55:23,827 - app.service_agent.cognitive_agents.planning_agent - INFO - ✅ Primary LLM selected agents: ['document_team']
2025-10-05 15:55:23,827 - __main__ - INFO -   의도: 계약서작성
2025-10-05 15:55:23,827 - __main__ - INFO -   신뢰도: 0.95
2025-10-05 15:55:23,827 - __main__ - INFO -   추천 Agent: ['document_team']
2025-10-05 15:55:23,827 - __main__ - INFO - 
[Step 2] Query Decomposition...
2025-10-05 15:55:23,827 - app.service_agent.cognitive_agents.query_decomposer - INFO - Decomposing query: 임대차계약서 작성해주세요...
2025-10-05 15:55:23,827 - app.service_agent.cognitive_agents.query_decomposer - INFO - Query is simple, no decomposition needed
2025-10-05 15:55:23,827 - __main__ - INFO -   복합 질문: False
2025-10-05 15:55:23,827 - __main__ - INFO -   작업 수: 1
2025-10-05 15:55:23,827 - __main__ - INFO -   실행 모드: sequential
2025-10-05 15:55:23,827 - __main__ - INFO - 
[Step 3] Execution Plan 생성...
2025-10-05 15:55:23,827 - app.service_agent.cognitive_agents.planning_agent - INFO - Creating execution plan for intent: 계약서작성
2025-10-05 15:55:23,827 - app.service_agent.cognitive_agents.planning_agent - WARNING - AgentRegistry is empty, using default teams
2025-10-05 15:55:23,827 - app.service_agent.cognitive_agents.planning_agent - DEBUG - Suggested agents: ['document_team']
2025-10-05 15:55:23,827 - app.service_agent.cognitive_agents.planning_agent - DEBUG - Available agents: ['search_team', 'analysis_team', 'document_team']
2025-10-05 15:55:23,827 - app.service_agent.cognitive_agents.planning_agent - INFO - Selected agents/teams for execution: ['document_team']
2025-10-05 15:55:23,827 - __main__ - INFO -   전략: sequential
2025-10-05 15:55:23,827 - __main__ - INFO -   단계 수: 1
2025-10-05 15:55:23,827 - __main__ - INFO - 
✓ 테스트 성공 (소요시간: 15.41초)
2025-10-05 15:55:23,827 - __main__ - INFO - 
================================================================================
2025-10-05 15:55:23,827 - __main__ - INFO - [5] 단일 질문 테스트: S005
2025-10-05 15:55:23,827 - __main__ - INFO - 질문: 계약 갱신 거부 가능한가요?
2025-10-05 15:55:23,827 - __main__ - INFO - ================================================================================
2025-10-05 15:55:23,827 - __main__ - INFO - 
[Step 1] Intent 분석...
2025-10-05 15:55:23,827 - app.service_agent.cognitive_agents.planning_agent - INFO - Analyzing intent for query: 계약 갱신 거부 가능한가요?...
2025-10-05 15:55:23,828 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-4977ea11-72b7-4cf7-b0de-1042e1fa2dca', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 의도 분석 전문가입니다.\n사용자의 질문을 정확히 이해하고, 어떤 종류의 도움이 필요한지 분류해야 합니다.\n\n## Chain-of-Thought 분석 프로세스\n\n질문을 분석할 때 다음 단계를 **순서대로** 따르세요:\n\n### 1단계: 질문 구조 파악\n- 단순 정보 요청인가? (예: "~이 뭐야?", "~알려줘")\n- 상황 설명이 포함되어 있는가? (배경, 현재 상태)\n- 구체적 수치나 데이터가 있는가? (금액, 비율, 기간 등)\n- 문제 해결을 요구하는가? (예: "어떻게 해야 해?", "방법 알려줘")\n\n### 2단계: 요청 유형 판단\n- **정보 확인형**: 사실, 개념, 규정 확인 → 검색만으로 충분\n- **평가/판단형**: "괜찮아?", "적절해?", "문제있어?" → 검색 + 분석 필요\n- **해결책 요청형**: "어떻게?", "방법?", "대처?" → 검색 + 분석 + 제안 필요\n- **비교/선택형**: "A vs B", "어느게 나아?" → 검색 + 분석(비교) 필요\n\n### 3단계: 복잡도 평가\n- **저**: 단일 개념/사실 확인 (예: "전세금 인상률 한도?")\n- **중**: 특정 상황 + 판단 (예: "3억을 5억으로 올려달래. 가능해?")\n- **고**: 복잡한 상황 + 여러 조건 + 해결책 (예: "10년 거주, 3억→10억 요구. 어떻게 해야 해?")\n\n### 4단계: 필요한 처리 결정\n- **검색만**: 정보 확인형 + 저복잡도\n- **검색+분석**: 평가/판단형 OR 중복잡도 OR 수치 비교 포함\n- **종합처리**: 해결책 요청형 OR 고복잡도 OR 여러 조건 동시 고려\n\n### 5단계: 최종 검증\n- 선택한 의도로 사용자 질문에 완전히 답변 가능한가?\n- 단순 정보 제공으로 끝나는가, 아니면 추가 분석/판단이 필요한가?\n- 상황 설명이 있으면서 "해결", "방법", "어떻게" 등이 있으면 → COMPREHENSIVE 고려\n\n## 중요: 복합 질문 처리\n복합적인 질문(여러 의도가 섞인 질문)의 경우, 가장 핵심적인 의도를 파악하되,\nsub_intents 필드에 부가적인 의도들도 함께 기록해주세요.\n\n**특히 주의**:\n- 법률 키워드가 있어도, "해결방법", "어떻게 해야" 같은 표현이 있으면 단순 LEGAL_CONSULT가 아닐 수 있음\n- 구체적 상황(금액, 기간 등) + 해결책 요구 = COMPREHENSIVE 또는 복합 의도로 분류\n\n## 분류 카테고리 설명:\n\n1. **LEGAL_CONSULT (법률상담)**\n   - 설명: 부동산 관련 법률, 권리, 의무에 대한 질문\n   - 예시:\n     * 단순: "전세금 5% 인상이 가능한가요?", "임대차계약 갱신 거부할 수 있나요?"\n     * 복합: "전세금 인상 가능한지 확인하고 법적 근거도 알려주세요"\n   - 키워드: 법, 전세, 임대, 보증금, 계약, 권리, 의무, 갱신, 임차인, 임대인, 법률, 규정, 조항\n   - 필요한 처리: 법률 데이터베이스 검색, 관련 법조항 찾기\n\n2. **MARKET_INQUIRY (시세조회)**\n   - 설명: 부동산 시장 가격, 시세, 거래 동향에 대한 질문\n   - 예시:\n     * 단순: "강남구 아파트 전세 시세 알려주세요", "서초동 매매가 얼마나 올랐나요?"\n     * 복합: "강남구 시세 확인하고 대출 가능 금액도 계산해줘"\n   - 키워드: 시세, 가격, 매매가, 전세가, 월세, 시장, 동향, 평균, 지역명, 상승률, 하락률\n   - 필요한 처리: 부동산 시세 데이터 조회, 지역별 가격 분석\n\n3. **LOAN_CONSULT (대출상담)**\n   - 설명: 주택담보대출, 전세자금대출 등 금융 관련 질문\n   - 예시:\n     * 단순: "전세자금대출 한도가 얼마인가요?", "LTV가 뭔가요?"\n     * 복합: "대출 한도 확인하고 금리 비교도 해주세요"\n   - 키워드: 대출, 금리, 한도, 조건, 상환, LTV, DTI, DSR, 담보, 금융, 은행\n   - 필요한 처리: 대출 상품 조회, 금리 정보 검색, 한도 계산\n\n4. **CONTRACT_CREATION (계약서작성)**\n   - 설명: 새로운 계약서나 문서를 작성해달라는 요청\n   - 예시:\n     * 단순: "임대차계약서 작성해주세요", "전세계약서 초안 만들어주세요"\n     * 복합: "계약서 작성하고 주의사항도 검토해주세요"\n   - 키워드: 작성, 만들, 생성, 초안, 계약서, 문서, 양식\n   - 필요한 처리: 문서 생성 에이전트 호출, 템플릿 기반 작성\n\n5. **CONTRACT_REVIEW (계약서검토)**\n   - 설명: 기존 계약서나 문서를 검토해달라는 요청\n   - 예시:\n     * 단순: "이 계약서 검토해주세요", "특약사항 문제없나요?"\n     * 복합: "계약서 검토하고 수정사항도 제안해주세요"\n   - 키워드: 검토, 확인, 점검, 리뷰, 분석해, 살펴봐, 체크\n   - 필요한 처리: 문서 분석, 위험 요소 식별, 개선사항 제안\n\n6. **COMPREHENSIVE (종합분석)**\n   - 설명: 여러 측면을 종합적으로 분석해달라는 요청, 또는 복잡한 상황에 대한 해결책 요청\n   - 예시:\n     * 단순: "이 물건 전체적으로 분석해주세요"\n     * 복합: "시세, 법률, 대출 모두 검토해서 종합 의견 주세요"\n     * 해결형: "10년 거주했는데 전세금 3억을 10억으로 올려달래. 어떻게 해야 해?"\n     * 상황+해결: "집주인이 계약 갱신 거부했어. 법적으로 어떻게 대응해야 할까?"\n   - 키워드: 종합, 전체, 모든, 전반적, 종합적, 평가, 분석, 어떻게, 방법, 해결, 대처\n   - 패턴: 구체적 상황 설명 + "어떻게/방법/해결" 요청\n   - 필요한 처리: 다중 데이터 소스 통합 분석, 상황 평가, 해결책 제시\n\n7. **RISK_ANALYSIS (리스크분석)**\n   - 설명: 위험 요소나 주의사항에 대한 질문\n   - 예시:\n     * 단순: "이 계약 위험한가요?", "주의할 점 알려주세요"\n     * 복합: "리스크 분석하고 대안도 제시해주세요"\n   - 키워드: 위험, 리스크, 주의, 문제점, 조심, 걱정, 우려\n   - 필요한 처리: 위험 요소 분석, 주의사항 추출\n\n8. **UNCLEAR (불분명)**\n   - 설명: 의도를 명확히 파악하기 어려운 질문\n   - 예시: "이거 좀 봐주세요", "어떻게 해야 할까요?", "도와주세요"\n   - 처리: 추가 질문으로 의도 명확화 필요\n\n9. **IRRELEVANT (무관)**\n   - 설명: 부동산과 전혀 관련 없는 질문\n   - 예시: "날씨 어때?", "저녁 뭐 먹지?", "주식 추천해줘"\n   - 처리: 부동산 관련 질문을 유도\n\n## 복합 질문 예시와 분석 (CoT 적용):\n\n### 예시 1: "강남구 아파트 시세 알려주고 전세자금대출 가능한지도 확인해줘"\n**CoT 분석**:\n1. 구조: 두 개의 요청 ("시세" + "대출")\n2. 유형: 정보 확인형 (둘 다)\n3. 복잡도: 중 (두 가지 독립적 조회)\n4. 필요 처리: 검색 + 계산/분석\n\n**결론**:\n- 주 의도: MARKET_INQUIRY (시세 조회가 먼저 필요)\n- 부가 의도: LOAN_CONSULT (대출 확인)\n- 분해: ["강남구 아파트 시세 조회", "전세자금대출 가능 여부 확인"]\n\n### 예시 2: "이 계약서 검토해서 위험한 부분 있는지 알려주고 수정 제안도 해줘"\n**CoT 분석**:\n1. 구조: 검토 + 위험 평가 + 수정안\n2. 유형: 평가/판단형 + 해결책 요청형\n3. 복잡도: 고 (3단계 처리)\n4. 필요 처리: 검토 + 분석 + 문서 생성\n\n**결론**:\n- 주 의도: CONTRACT_REVIEW (계약서 검토)\n- 부가 의도: RISK_ANALYSIS (위험 분석)\n- 분해: ["계약서 전체 검토", "위험 요소 식별", "수정사항 제안"]\n\n### 예시 3: "집주인이 짜증나, 10년 살았는데 전세금 3억을 10억으로 올려달래. 법적으로 해결방법 알려줘"\n**CoT 분석**:\n1. 구조: 상황 설명 (10년 거주, 3억→10억) + 해결책 요청\n2. 유형: 해결책 요청형 (단순 정보 X)\n3. 복잡도: 고 (구체적 상황 + 수치 비교 + 법률 + 대응방안)\n4. 필요 처리: 법률 검색 + 상황 분석 + 해결책 제시\n\n**결론**:\n- 주 의도: COMPREHENSIVE (복잡한 상황에 대한 종합 해결)\n- 부가 의도: LEGAL_CONSULT, RISK_ANALYSIS\n- 분해: ["전세금 인상 한도 법률 조회", "3억→10억 인상의 타당성 분석", "구체적 대응 방안 제시"]\n- **이유**: "법적으로"라는 키워드가 있지만, 단순 법률 확인이 아니라 구체적 상황에 대한 해결책을 요구하므로 COMPREHENSIVE\n\n### 예시 4: "전세금 인상률 상한이 얼마야?"\n**CoT 분석**:\n1. 구조: 단순 사실 확인\n2. 유형: 정보 확인형\n3. 복잡도: 저 (단일 개념)\n4. 필요 처리: 검색만\n\n**결론**:\n- 주 의도: LEGAL_CONSULT (법률 정보 조회)\n- 부가 의도: 없음\n- 분해: 필요 없음\n\n## 응답 형식 (JSON 형식으로 응답):\n\n```json\n{\n    "intent": "LEGAL_CONSULT",\n    "confidence": 0.9,\n    "keywords": ["전세금", "인상", "제한"],\n    "sub_intents": [],\n    "is_compound": false,\n    "decomposed_tasks": [],\n    "entities": {\n        "location": "강남구",\n        "price": "5억",\n        "contract_type": "전세",\n        "date": "2024년",\n        "area": "84㎡",\n        "action_verbs": ["확인", "검토"]\n    },\n    "reasoning": "전세금 인상에 대한 법률 질문이므로 LEGAL_CONSULT로 분류"\n}\n```\n\n응답 규칙:\n- intent: 위 9개 카테고리 중 하나 (대문자_언더스코어 형식)\n- confidence: 0.0~1.0 (0.8 이상이면 매우 확실, 0.5 미만이면 불확실)\n- keywords: 추출된 주요 키워드 목록\n- sub_intents: 복합 질문일 경우 부가적인 의도들\n- is_compound: 복합 질문 여부 (true/false)\n- decomposed_tasks: 복합 질문을 분해한 개별 작업들\n- entities: 추출된 엔티티 정보\n- reasoning: **반드시 CoT 5단계를 거쳐 분석한 과정을 포함** (구조 파악 → 유형 판단 → 복잡도 평가 → 필요 처리 → 최종 검증)\n\n## reasoning 작성 예시:\n"1단계(구조): 상황 설명(10년 거주, 3억→10억) + 해결책 요청 포함.\n2단계(유형): 해결책 요청형 - 단순 정보가 아닌 대응방안 필요.\n3단계(복잡도): 고 - 구체적 수치 비교와 복잡한 상황.\n4단계(처리): 법률 검색 + 상황 분석 + 해결책 제시 필요.\n5단계(검증): LEGAL_CONSULT만으로는 불충분, 종합적 분석 필요 → COMPREHENSIVE 선택"\n\n## 판단 가이드:\n- 여러 의도가 섞여있다면, 가장 주된 의도를 intent에, 나머지를 sub_intents에 기록\n- "그리고", "또한", "함께", "같이" 등의 연결어가 있으면 복합 질문일 가능성 높음\n- 법률 관련 키워드가 있으면 LEGAL_CONSULT 우선\n- 가격/시세 언급이 명확하면 MARKET_INQUIRY\n- 계약서라는 단어와 함께 "작성/만들기"가 있으면 CONTRACT_CREATION\n- 계약서라는 단어와 함께 "검토/확인"이 있으면 CONTRACT_REVIEW\n- 불확실하면 confidence를 낮게 설정하고 UNCLEAR 선택\n- 복합 질문은 is_compound를 true로 설정하고 개별 작업으로 분해\n\n분석할 질문: 계약 갱신 거부 가능한가요?'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 15:55:23,828 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 15:55:23,828 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 15:55:23,828 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 15:55:23,829 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 15:55:23,829 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 15:55:23,829 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 15:55:29,559 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 06:55:29 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'5493'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'5532'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9996'), (b'x-ratelimit-remaining-tokens', b'197246'), (b'x-ratelimit-reset-requests', b'26.567s'), (b'x-ratelimit-reset-tokens', b'826ms'), (b'x-request-id', b'req_05c253a3ede44a3996f0dd5ae8502d27'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b035dc87e3091-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 15:55:29,559 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 15:55:29,559 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 15:55:29,567 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 15:55:29,567 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 15:55:29,567 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 15:55:29,567 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 06:55:29 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '5493', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '5532', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9996', 'x-ratelimit-remaining-tokens': '197246', 'x-ratelimit-reset-requests': '26.567s', 'x-ratelimit-reset-tokens': '826ms', 'x-request-id': 'req_05c253a3ede44a3996f0dd5ae8502d27', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b035dc87e3091-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 15:55:29,567 - openai._base_client - DEBUG - request_id: req_05c253a3ede44a3996f0dd5ae8502d27
2025-10-05 15:55:29,567 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: intent_analysis | Model: gpt-4o-mini-2024-07-18 | Tokens: 3384 (prompt: 3179, completion: 205)
2025-10-05 15:55:29,567 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM Intent Analysis Result: {'intent': 'LEGAL_CONSULT', 'confidence': 0.9, 'keywords': ['계약', '갱신', '거부'], 'sub_intents': [], 'is_compound': False, 'decomposed_tasks': [], 'entities': {'contract_type': '임대차계약', 'action_verbs': ['확인']}, 'reasoning': '1단계(구조): 단순 정보 요청으로 계약 갱신 거부 가능성에 대한 질문. 2단계(유형): 정보 확인형 - 법률적 규정 확인 필요. 3단계(복잡도): 저 - 단일 개념 확인. 4단계(처리): 법률 데이터베이스 검색 필요. 5단계(검증): 계약 갱신 거부 가능성에 대한 법률 질문이므로 LEGAL_CONSULT로 분류.'}
2025-10-05 15:55:29,568 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-2980d6e0-9b7a-4748-ab4d-deb8e2ef2d26', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 Agent 선택 전문가입니다.\n사용자의 요청에 가장 적합한 Agent/Team을 선택하는 것이 목표입니다.\n\n## 현재 상황\n\n**사용자 질문:** 계약 갱신 거부 가능한가요?\n**분석된 의도:** 법률상담\n**추출된 키워드:** [\'계약\', \'갱신\', \'거부\']\n\n## 사용 가능한 Agent/Team 정보\n\n{\'search_team\': {\'name\': \'search_team\', \'capabilities\': \'법률 검색, 부동산 시세 조회, 대출 상품 검색\', \'tools\': [\'legal_search\', \'market_data\', \'loan_data\'], \'use_cases\': [\'법률 상담\', \'시세 조회\', \'대출 정보\']}, \'analysis_team\': {\'name\': \'analysis_team\', \'capabilities\': \'데이터 분석, 리스크 평가, 인사이트 생성, 추천\', \'tools\': [\'data_analyzer\', \'risk_evaluator\'], \'use_cases\': [\'시장 분석\', \'리스크 평가\', \'투자 분석\']}, \'document_team\': {\'name\': \'document_team\', \'capabilities\': \'계약서 작성, 문서 생성, 문서 검토\', \'tools\': [\'document_generator\', \'contract_reviewer\'], \'use_cases\': [\'계약서 작성\', \'문서 검토\']}}\n\n## Agent 역할 및 상세 가이드\n\n### 1. search_team (검색 팀)\n- **주요 기능**: 정보 검색 및 데이터 수집\n- **전문 분야**:\n  * 법률 정보 검색 (전세법, 임대차보호법, 부동산 관련 법규)\n  * 부동산 시세 조회 (매매가, 전세가, 월세, 실거래가)\n  * 대출 상품 정보 검색 (금리, 한도, 조건)\n  * 지역 정보 및 인프라 조회\n- **도구**: legal_search, market_data, loan_data\n- **적합한 작업**: 정보 조회, 데이터 수집, 법률 확인, 시세 파악\n- **예시**:\n  * "전세금 5% 인상 가능한가요?"\n  * "강남구 아파트 전세 시세"\n  * "전세자금대출 한도 얼마?"\n\n### 2. analysis_team (분석 팀)\n- **주요 기능**: 데이터 분석 및 평가\n- **전문 분야**:\n  * 시장 동향 분석 (상승률, 하락률, 추세)\n  * 리스크 평가 (계약, 투자 위험도)\n  * 투자 수익률 계산 (ROI, 월세 수익률)\n  * 대출 한도 및 조건 분석 (LTV, DTI, DSR)\n  * 비교 분석 (지역별, 상품별)\n- **도구**: data_analyzer, risk_evaluator, calculator\n- **적합한 작업**: 데이터 분석, 리스크 평가, 계산, 비교, 예측\n- **의존성**: 보통 search_team의 데이터가 필요\n- **예시**:\n  * "이 지역 투자 가치 분석해줘"\n  * "계약 리스크 평가해줘"\n  * "대출 가능 금액 계산해줘"\n\n### 3. document_team (문서 팀)\n- **주요 기능**: 문서 생성 및 관리\n- **전문 분야**:\n  * 계약서 작성 (임대차, 매매, 전세)\n  * 문서 템플릿 관리\n  * 특약사항 생성\n  * 계약서 수정안 작성\n  * 법률 문서 검토\n- **도구**: document_generator, contract_template, contract_reviewer\n- **적합한 작업**: 문서 작성, 계약서 생성, 문서 수정, 검토\n- **예시**:\n  * "임대차계약서 작성해줘"\n  * "특약사항 추가해줘"\n  * "계약서 수정안 만들어줘"\n\n## Chain-of-Thought Agent 선택 프로세스\n\n다음 단계를 **순서대로** 따라 최적의 Agent 조합을 선택하세요:\n\n### 1단계: 질문 요구사항 파악\n- 단순 정보 조회인가? → search_team만 필요\n- 판단/평가가 필요한가? → search + analysis 필요\n- 해결책 제시가 필요한가? → search + analysis 필요\n- 문서 생성이 필요한가? → document_team 추가\n\n### 2단계: 작업 복잡도 판단\n- **단순** (검색만): "~이 뭐야?", "~알려줘" → search_team\n- **중간** (검색+판단): "~괜찮아?", "~적절해?" → search + analysis\n- **복잡** (종합 해결): 구체적 상황 + "어떻게 해야 해?" → search + analysis\n\n### 3단계: 의존성 분석\n- 독립적 작업: 단일 팀으로 처리 가능\n- 순차적 의존: 이전 결과 필요 → 여러 팀 순서대로\n- 병렬 가능: 동시 조회 가능 → coordination: "parallel"\n\n### 4단계: 최종 검증\n- 선택한 팀들로 질문에 완전히 답변 가능한가?\n- 불필요한 팀이 포함되지 않았는가?\n- 순서가 논리적인가? (데이터 흐름 고려)\n\n### 중요 원칙:\n- **법률 키워드만으로 판단하지 말 것**: "법적으로 어떻게 해야 해?" = 법률 검색 + 분석 필요\n- **상황 설명 + 해결책 요청** = 반드시 analysis_team 포함\n- **구체적 수치 비교** (3억→10억 같은) = analysis_team 필요\n\n## 의도별 Agent 매핑 가이드 (기본 가이드 - CoT로 조정 가능)\n\n| 의도 (Intent) | 기본 조합 | 상황별 조정 |\n|--------------|-----------|-------------|\n| LEGAL_CONSULT | ["search_team"] | 해결책 요청시 → + analysis_team |\n| MARKET_INQUIRY | ["search_team"] | 비교/평가시 → + analysis_team |\n| LOAN_CONSULT | ["search_team", "analysis_team"] | 계산 필수 |\n| CONTRACT_CREATION | ["document_team"] | 검토 후 작성 → search + document |\n| CONTRACT_REVIEW | ["search_team", "analysis_team"] | 법률 검토 + 리스크 분석 |\n| COMPREHENSIVE | ["search_team", "analysis_team"] | **항상 분석 포함** |\n| RISK_ANALYSIS | ["analysis_team"] | 법률 근거 필요시 → search + analysis |\n| UNCLEAR | ["search_team", "analysis_team"] | 포괄적 대응 |\n\n**중요**: 위 매핑은 **기본 가이드**일 뿐입니다.\n실제 질문의 내용(CoT 분석 결과)에 따라 조정하세요!\n\n## 복합 질문 처리 예시 (CoT 적용)\n\n### 예시 1: 순차적 처리\n질문: "강남구 시세 확인하고 투자 가치 분석해줘"\n**CoT 분석**:\n1. 요구사항: 시세 조회 + 투자 가치 평가\n2. 복잡도: 중간 (검색 + 분석)\n3. 의존성: 시세 데이터 → 투자 분석 (순차)\n4. 검증: search만으로는 "투자 가치 평가" 불가능\n\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "1단계: 시세 조회+투자 평가 필요. 2단계: 중간 복잡도. 3단계: 순차 의존. 4단계: search로 시세 수집 후 analysis로 투자 가치 평가 필요",\n    "coordination": "sequential"\n}\n```\n\n### 예시 2: 단순 정보 조회\n질문: "전세금 인상률 한도가 얼마야?"\n**CoT 분석**:\n1. 요구사항: 단순 사실 확인\n2. 복잡도: 낮음 (정보 확인형)\n3. 의존성: 없음\n4. 검증: search_team만으로 충분\n\n```json\n{\n    "selected_agents": ["search_team"],\n    "reasoning": "1단계: 단순 정보 조회. 2단계: 저복잡도. 3단계: 독립적. 4단계: 법률 검색만으로 답변 가능",\n    "coordination": "single"\n}\n```\n\n### 예시 3: 해결책 요청 (핵심 예시!)\n질문: "집주인이 전세금 3억을 10억으로 올려달래. 법적으로 어떻게 해야 해?"\n의도: COMPREHENSIVE\n**CoT 분석**:\n1. 요구사항: 상황 설명 + 해결책 요청\n2. 복잡도: 높음 (구체적 상황 + 수치 비교)\n3. 의존성: 법률 확인 → 상황 분석 → 해결책 제시\n4. 검증: "법적으로"만 보고 search만 선택하면 불충분! 해결책 제시 필요\n\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "1단계: 법률 + 상황 분석 + 해결책 필요. 2단계: 고복잡도(3억→10억 비정상). 3단계: 순차(법률 확인 후 타당성 분석). 4단계: \'어떻게 해야\' = 단순 법률 조회 아님, 분석 필수",\n    "coordination": "sequential",\n    "confidence": 0.95\n}\n```\n\n## 응답 형식 (JSON)\n\n```json\n{\n    "selected_agents": ["선택된 agent/team 목록"],\n    "reasoning": "선택 이유를 구체적으로 설명. 각 Agent의 역할과 처리 순서 포함",\n    "coordination": "single/sequential/parallel/pipeline",\n    "dependencies": {"agent2": ["agent1"]},\n    "estimated_time": 30,\n    "confidence": 0.9\n}\n```\n\n## 선택 가이드라인\n\n1. **최소 Agent 원칙**: 가능한 적은 수의 Agent로 처리\n2. **전문성 우선**: 해당 작업에 가장 전문적인 Agent 선택\n3. **효율성 고려**: 병렬 처리 가능한 경우 명시\n4. **의존성 관리**: 데이터 흐름을 고려한 순서 지정\n5. **폴백 전략**: 불확실한 경우 ["search_team", "analysis_team"] 조합\n\n## 주의사항\n\n- selected_agents는 반드시 배열 형태\n- Agent 이름은 정확히: "search_team", "analysis_team", "document_team"\n- 최소 1개, 최대 3개 선택\n- 순서는 실행 우선순위 (앞에 있을수록 먼저 실행)\n- reasoning은 상세하고 논리적으로 작성\n- coordination 필드로 실행 방식 명시\n- 복합 질문의 경우 의존성 관계 명확히 표시'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 15:55:29,568 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 15:55:29,568 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 15:55:29,569 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 15:55:29,569 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 15:55:29,569 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 15:55:29,569 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 15:55:33,283 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 06:55:33 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'3502'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'3514'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9995'), (b'x-ratelimit-remaining-tokens', b'197894'), (b'x-ratelimit-reset-requests', b'38.112s'), (b'x-ratelimit-reset-tokens', b'631ms'), (b'x-request-id', b'req_2c14ead24ab04c2a84fd4cb6e857a415'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b0381ad213091-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 15:55:33,284 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 15:55:33,284 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 15:55:33,284 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 15:55:33,284 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 15:55:33,284 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 15:55:33,286 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 06:55:33 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '3502', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '3514', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9995', 'x-ratelimit-remaining-tokens': '197894', 'x-ratelimit-reset-requests': '38.112s', 'x-ratelimit-reset-tokens': '631ms', 'x-request-id': 'req_2c14ead24ab04c2a84fd4cb6e857a415', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b0381ad213091-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 15:55:33,286 - openai._base_client - DEBUG - request_id: req_2c14ead24ab04c2a84fd4cb6e857a415
2025-10-05 15:55:33,286 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: agent_selection | Model: gpt-4o-mini-2024-07-18 | Tokens: 2545 (prompt: 2355, completion: 190)
2025-10-05 15:55:33,286 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM agent selection reasoning: 1단계: 계약 갱신 거부 가능성에 대한 법률 상담이 필요하므로 법률 정보 검색이 필요하다. 2단계: 사용자가 '거부'라는 특정 상황을 언급했으므로, 법률적 판단과 함께 그에 따른 리스크 평가가 필요하다. 3단계: 법률 정보를 검색한 후, 그 정보를 바탕으로 계약 갱신 거부의 타당성을 분석해야 하므로 순차적 의존성이 있다. 4단계: 단순 법률 검색만으로는 충분하지 않으며, 분석이 필수적이다.
2025-10-05 15:55:33,286 - app.service_agent.cognitive_agents.planning_agent - INFO - ✅ Primary LLM selected agents: ['search_team', 'analysis_team']
2025-10-05 15:55:33,286 - __main__ - INFO -   의도: 법률상담
2025-10-05 15:55:33,286 - __main__ - INFO -   신뢰도: 0.90
2025-10-05 15:55:33,286 - __main__ - INFO -   추천 Agent: ['search_team', 'analysis_team']
2025-10-05 15:55:33,286 - __main__ - INFO - 
[Step 2] Query Decomposition...
2025-10-05 15:55:33,286 - app.service_agent.cognitive_agents.query_decomposer - INFO - Decomposing query: 계약 갱신 거부 가능한가요?...
2025-10-05 15:55:33,286 - app.service_agent.cognitive_agents.query_decomposer - INFO - Query is simple, no decomposition needed
2025-10-05 15:55:33,286 - __main__ - INFO -   복합 질문: False
2025-10-05 15:55:33,286 - __main__ - INFO -   작업 수: 1
2025-10-05 15:55:33,286 - __main__ - INFO -   실행 모드: sequential
2025-10-05 15:55:33,286 - __main__ - INFO - 
[Step 3] Execution Plan 생성...
2025-10-05 15:55:33,286 - app.service_agent.cognitive_agents.planning_agent - INFO - Creating execution plan for intent: 법률상담
2025-10-05 15:55:33,286 - app.service_agent.cognitive_agents.planning_agent - WARNING - AgentRegistry is empty, using default teams
2025-10-05 15:55:33,286 - app.service_agent.cognitive_agents.planning_agent - DEBUG - Suggested agents: ['search_team', 'analysis_team']
2025-10-05 15:55:33,286 - app.service_agent.cognitive_agents.planning_agent - DEBUG - Available agents: ['search_team', 'analysis_team', 'document_team']
2025-10-05 15:55:33,286 - app.service_agent.cognitive_agents.planning_agent - INFO - Selected agents/teams for execution: ['search_team', 'analysis_team']
2025-10-05 15:55:33,286 - __main__ - INFO -   전략: sequential
2025-10-05 15:55:33,287 - __main__ - INFO -   단계 수: 2
2025-10-05 15:55:33,287 - __main__ - INFO - 
✓ 테스트 성공 (소요시간: 9.46초)
2025-10-05 15:55:33,287 - __main__ - INFO - 
결과 저장: C:\kdy\Projects\holmesnyangz\beta_v001\backend\app\service_agent\reports\phase1_test_results.json
2025-10-05 15:55:33,288 - __main__ - INFO - 
================================================================================
2025-10-05 15:55:33,288 - __main__ - INFO - [6] 단일 질문 테스트: S006
2025-10-05 15:55:33,288 - __main__ - INFO - 질문: 서초구 아파트 매매 시세는?
2025-10-05 15:55:33,288 - __main__ - INFO - ================================================================================
2025-10-05 15:55:33,288 - __main__ - INFO - 
[Step 1] Intent 분석...
2025-10-05 15:55:33,288 - app.service_agent.cognitive_agents.planning_agent - INFO - Analyzing intent for query: 서초구 아파트 매매 시세는?...
2025-10-05 15:55:33,288 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-5a10a846-d45a-4a4a-9ba1-1dd7dfbe9d55', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 의도 분석 전문가입니다.\n사용자의 질문을 정확히 이해하고, 어떤 종류의 도움이 필요한지 분류해야 합니다.\n\n## Chain-of-Thought 분석 프로세스\n\n질문을 분석할 때 다음 단계를 **순서대로** 따르세요:\n\n### 1단계: 질문 구조 파악\n- 단순 정보 요청인가? (예: "~이 뭐야?", "~알려줘")\n- 상황 설명이 포함되어 있는가? (배경, 현재 상태)\n- 구체적 수치나 데이터가 있는가? (금액, 비율, 기간 등)\n- 문제 해결을 요구하는가? (예: "어떻게 해야 해?", "방법 알려줘")\n\n### 2단계: 요청 유형 판단\n- **정보 확인형**: 사실, 개념, 규정 확인 → 검색만으로 충분\n- **평가/판단형**: "괜찮아?", "적절해?", "문제있어?" → 검색 + 분석 필요\n- **해결책 요청형**: "어떻게?", "방법?", "대처?" → 검색 + 분석 + 제안 필요\n- **비교/선택형**: "A vs B", "어느게 나아?" → 검색 + 분석(비교) 필요\n\n### 3단계: 복잡도 평가\n- **저**: 단일 개념/사실 확인 (예: "전세금 인상률 한도?")\n- **중**: 특정 상황 + 판단 (예: "3억을 5억으로 올려달래. 가능해?")\n- **고**: 복잡한 상황 + 여러 조건 + 해결책 (예: "10년 거주, 3억→10억 요구. 어떻게 해야 해?")\n\n### 4단계: 필요한 처리 결정\n- **검색만**: 정보 확인형 + 저복잡도\n- **검색+분석**: 평가/판단형 OR 중복잡도 OR 수치 비교 포함\n- **종합처리**: 해결책 요청형 OR 고복잡도 OR 여러 조건 동시 고려\n\n### 5단계: 최종 검증\n- 선택한 의도로 사용자 질문에 완전히 답변 가능한가?\n- 단순 정보 제공으로 끝나는가, 아니면 추가 분석/판단이 필요한가?\n- 상황 설명이 있으면서 "해결", "방법", "어떻게" 등이 있으면 → COMPREHENSIVE 고려\n\n## 중요: 복합 질문 처리\n복합적인 질문(여러 의도가 섞인 질문)의 경우, 가장 핵심적인 의도를 파악하되,\nsub_intents 필드에 부가적인 의도들도 함께 기록해주세요.\n\n**특히 주의**:\n- 법률 키워드가 있어도, "해결방법", "어떻게 해야" 같은 표현이 있으면 단순 LEGAL_CONSULT가 아닐 수 있음\n- 구체적 상황(금액, 기간 등) + 해결책 요구 = COMPREHENSIVE 또는 복합 의도로 분류\n\n## 분류 카테고리 설명:\n\n1. **LEGAL_CONSULT (법률상담)**\n   - 설명: 부동산 관련 법률, 권리, 의무에 대한 질문\n   - 예시:\n     * 단순: "전세금 5% 인상이 가능한가요?", "임대차계약 갱신 거부할 수 있나요?"\n     * 복합: "전세금 인상 가능한지 확인하고 법적 근거도 알려주세요"\n   - 키워드: 법, 전세, 임대, 보증금, 계약, 권리, 의무, 갱신, 임차인, 임대인, 법률, 규정, 조항\n   - 필요한 처리: 법률 데이터베이스 검색, 관련 법조항 찾기\n\n2. **MARKET_INQUIRY (시세조회)**\n   - 설명: 부동산 시장 가격, 시세, 거래 동향에 대한 질문\n   - 예시:\n     * 단순: "강남구 아파트 전세 시세 알려주세요", "서초동 매매가 얼마나 올랐나요?"\n     * 복합: "강남구 시세 확인하고 대출 가능 금액도 계산해줘"\n   - 키워드: 시세, 가격, 매매가, 전세가, 월세, 시장, 동향, 평균, 지역명, 상승률, 하락률\n   - 필요한 처리: 부동산 시세 데이터 조회, 지역별 가격 분석\n\n3. **LOAN_CONSULT (대출상담)**\n   - 설명: 주택담보대출, 전세자금대출 등 금융 관련 질문\n   - 예시:\n     * 단순: "전세자금대출 한도가 얼마인가요?", "LTV가 뭔가요?"\n     * 복합: "대출 한도 확인하고 금리 비교도 해주세요"\n   - 키워드: 대출, 금리, 한도, 조건, 상환, LTV, DTI, DSR, 담보, 금융, 은행\n   - 필요한 처리: 대출 상품 조회, 금리 정보 검색, 한도 계산\n\n4. **CONTRACT_CREATION (계약서작성)**\n   - 설명: 새로운 계약서나 문서를 작성해달라는 요청\n   - 예시:\n     * 단순: "임대차계약서 작성해주세요", "전세계약서 초안 만들어주세요"\n     * 복합: "계약서 작성하고 주의사항도 검토해주세요"\n   - 키워드: 작성, 만들, 생성, 초안, 계약서, 문서, 양식\n   - 필요한 처리: 문서 생성 에이전트 호출, 템플릿 기반 작성\n\n5. **CONTRACT_REVIEW (계약서검토)**\n   - 설명: 기존 계약서나 문서를 검토해달라는 요청\n   - 예시:\n     * 단순: "이 계약서 검토해주세요", "특약사항 문제없나요?"\n     * 복합: "계약서 검토하고 수정사항도 제안해주세요"\n   - 키워드: 검토, 확인, 점검, 리뷰, 분석해, 살펴봐, 체크\n   - 필요한 처리: 문서 분석, 위험 요소 식별, 개선사항 제안\n\n6. **COMPREHENSIVE (종합분석)**\n   - 설명: 여러 측면을 종합적으로 분석해달라는 요청, 또는 복잡한 상황에 대한 해결책 요청\n   - 예시:\n     * 단순: "이 물건 전체적으로 분석해주세요"\n     * 복합: "시세, 법률, 대출 모두 검토해서 종합 의견 주세요"\n     * 해결형: "10년 거주했는데 전세금 3억을 10억으로 올려달래. 어떻게 해야 해?"\n     * 상황+해결: "집주인이 계약 갱신 거부했어. 법적으로 어떻게 대응해야 할까?"\n   - 키워드: 종합, 전체, 모든, 전반적, 종합적, 평가, 분석, 어떻게, 방법, 해결, 대처\n   - 패턴: 구체적 상황 설명 + "어떻게/방법/해결" 요청\n   - 필요한 처리: 다중 데이터 소스 통합 분석, 상황 평가, 해결책 제시\n\n7. **RISK_ANALYSIS (리스크분석)**\n   - 설명: 위험 요소나 주의사항에 대한 질문\n   - 예시:\n     * 단순: "이 계약 위험한가요?", "주의할 점 알려주세요"\n     * 복합: "리스크 분석하고 대안도 제시해주세요"\n   - 키워드: 위험, 리스크, 주의, 문제점, 조심, 걱정, 우려\n   - 필요한 처리: 위험 요소 분석, 주의사항 추출\n\n8. **UNCLEAR (불분명)**\n   - 설명: 의도를 명확히 파악하기 어려운 질문\n   - 예시: "이거 좀 봐주세요", "어떻게 해야 할까요?", "도와주세요"\n   - 처리: 추가 질문으로 의도 명확화 필요\n\n9. **IRRELEVANT (무관)**\n   - 설명: 부동산과 전혀 관련 없는 질문\n   - 예시: "날씨 어때?", "저녁 뭐 먹지?", "주식 추천해줘"\n   - 처리: 부동산 관련 질문을 유도\n\n## 복합 질문 예시와 분석 (CoT 적용):\n\n### 예시 1: "강남구 아파트 시세 알려주고 전세자금대출 가능한지도 확인해줘"\n**CoT 분석**:\n1. 구조: 두 개의 요청 ("시세" + "대출")\n2. 유형: 정보 확인형 (둘 다)\n3. 복잡도: 중 (두 가지 독립적 조회)\n4. 필요 처리: 검색 + 계산/분석\n\n**결론**:\n- 주 의도: MARKET_INQUIRY (시세 조회가 먼저 필요)\n- 부가 의도: LOAN_CONSULT (대출 확인)\n- 분해: ["강남구 아파트 시세 조회", "전세자금대출 가능 여부 확인"]\n\n### 예시 2: "이 계약서 검토해서 위험한 부분 있는지 알려주고 수정 제안도 해줘"\n**CoT 분석**:\n1. 구조: 검토 + 위험 평가 + 수정안\n2. 유형: 평가/판단형 + 해결책 요청형\n3. 복잡도: 고 (3단계 처리)\n4. 필요 처리: 검토 + 분석 + 문서 생성\n\n**결론**:\n- 주 의도: CONTRACT_REVIEW (계약서 검토)\n- 부가 의도: RISK_ANALYSIS (위험 분석)\n- 분해: ["계약서 전체 검토", "위험 요소 식별", "수정사항 제안"]\n\n### 예시 3: "집주인이 짜증나, 10년 살았는데 전세금 3억을 10억으로 올려달래. 법적으로 해결방법 알려줘"\n**CoT 분석**:\n1. 구조: 상황 설명 (10년 거주, 3억→10억) + 해결책 요청\n2. 유형: 해결책 요청형 (단순 정보 X)\n3. 복잡도: 고 (구체적 상황 + 수치 비교 + 법률 + 대응방안)\n4. 필요 처리: 법률 검색 + 상황 분석 + 해결책 제시\n\n**결론**:\n- 주 의도: COMPREHENSIVE (복잡한 상황에 대한 종합 해결)\n- 부가 의도: LEGAL_CONSULT, RISK_ANALYSIS\n- 분해: ["전세금 인상 한도 법률 조회", "3억→10억 인상의 타당성 분석", "구체적 대응 방안 제시"]\n- **이유**: "법적으로"라는 키워드가 있지만, 단순 법률 확인이 아니라 구체적 상황에 대한 해결책을 요구하므로 COMPREHENSIVE\n\n### 예시 4: "전세금 인상률 상한이 얼마야?"\n**CoT 분석**:\n1. 구조: 단순 사실 확인\n2. 유형: 정보 확인형\n3. 복잡도: 저 (단일 개념)\n4. 필요 처리: 검색만\n\n**결론**:\n- 주 의도: LEGAL_CONSULT (법률 정보 조회)\n- 부가 의도: 없음\n- 분해: 필요 없음\n\n## 응답 형식 (JSON 형식으로 응답):\n\n```json\n{\n    "intent": "LEGAL_CONSULT",\n    "confidence": 0.9,\n    "keywords": ["전세금", "인상", "제한"],\n    "sub_intents": [],\n    "is_compound": false,\n    "decomposed_tasks": [],\n    "entities": {\n        "location": "강남구",\n        "price": "5억",\n        "contract_type": "전세",\n        "date": "2024년",\n        "area": "84㎡",\n        "action_verbs": ["확인", "검토"]\n    },\n    "reasoning": "전세금 인상에 대한 법률 질문이므로 LEGAL_CONSULT로 분류"\n}\n```\n\n응답 규칙:\n- intent: 위 9개 카테고리 중 하나 (대문자_언더스코어 형식)\n- confidence: 0.0~1.0 (0.8 이상이면 매우 확실, 0.5 미만이면 불확실)\n- keywords: 추출된 주요 키워드 목록\n- sub_intents: 복합 질문일 경우 부가적인 의도들\n- is_compound: 복합 질문 여부 (true/false)\n- decomposed_tasks: 복합 질문을 분해한 개별 작업들\n- entities: 추출된 엔티티 정보\n- reasoning: **반드시 CoT 5단계를 거쳐 분석한 과정을 포함** (구조 파악 → 유형 판단 → 복잡도 평가 → 필요 처리 → 최종 검증)\n\n## reasoning 작성 예시:\n"1단계(구조): 상황 설명(10년 거주, 3억→10억) + 해결책 요청 포함.\n2단계(유형): 해결책 요청형 - 단순 정보가 아닌 대응방안 필요.\n3단계(복잡도): 고 - 구체적 수치 비교와 복잡한 상황.\n4단계(처리): 법률 검색 + 상황 분석 + 해결책 제시 필요.\n5단계(검증): LEGAL_CONSULT만으로는 불충분, 종합적 분석 필요 → COMPREHENSIVE 선택"\n\n## 판단 가이드:\n- 여러 의도가 섞여있다면, 가장 주된 의도를 intent에, 나머지를 sub_intents에 기록\n- "그리고", "또한", "함께", "같이" 등의 연결어가 있으면 복합 질문일 가능성 높음\n- 법률 관련 키워드가 있으면 LEGAL_CONSULT 우선\n- 가격/시세 언급이 명확하면 MARKET_INQUIRY\n- 계약서라는 단어와 함께 "작성/만들기"가 있으면 CONTRACT_CREATION\n- 계약서라는 단어와 함께 "검토/확인"이 있으면 CONTRACT_REVIEW\n- 불확실하면 confidence를 낮게 설정하고 UNCLEAR 선택\n- 복합 질문은 is_compound를 true로 설정하고 개별 작업으로 분해\n\n분석할 질문: 서초구 아파트 매매 시세는?'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 15:55:33,288 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 15:55:33,289 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 15:55:33,289 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 15:55:33,289 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 15:55:33,289 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 15:55:33,289 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 15:55:38,220 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 06:55:38 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'4676'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'4720'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9995'), (b'x-ratelimit-remaining-tokens', b'197246'), (b'x-ratelimit-reset-requests', b'43.012s'), (b'x-ratelimit-reset-tokens', b'826ms'), (b'x-request-id', b'req_4f4550b5bf2440e2a8c31ec9fc30c645'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b0398ecf73091-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 15:55:38,221 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 15:55:38,221 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 15:55:38,236 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 15:55:38,236 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 15:55:38,236 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 15:55:38,236 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 06:55:38 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '4676', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '4720', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9995', 'x-ratelimit-remaining-tokens': '197246', 'x-ratelimit-reset-requests': '43.012s', 'x-ratelimit-reset-tokens': '826ms', 'x-request-id': 'req_4f4550b5bf2440e2a8c31ec9fc30c645', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b0398ecf73091-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 15:55:38,237 - openai._base_client - DEBUG - request_id: req_4f4550b5bf2440e2a8c31ec9fc30c645
2025-10-05 15:55:38,237 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: intent_analysis | Model: gpt-4o-mini-2024-07-18 | Tokens: 3387 (prompt: 3180, completion: 207)
2025-10-05 15:55:38,237 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM Intent Analysis Result: {'intent': 'MARKET_INQUIRY', 'confidence': 0.95, 'keywords': ['서초구', '아파트', '매매', '시세'], 'sub_intents': [], 'is_compound': False, 'decomposed_tasks': [], 'entities': {'location': '서초구', 'property_type': '아파트', 'action_verbs': ['조회', '확인']}, 'reasoning': '1단계(구조): 단순 정보 요청으로, 서초구 아파트 매매 시세에 대한 질문. 2단계(유형): 정보 확인형 - 시세에 대한 사실 확인. 3단계(복잡도): 저 - 단일 개념 확인. 4단계(처리): 검색만 필요. 5단계(검증): 단순 시세 조회이므로 MARKET_INQUIRY로 분류.'}
2025-10-05 15:55:38,238 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-f0507f22-ad72-4d7b-811f-7681c26ac722', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 Agent 선택 전문가입니다.\n사용자의 요청에 가장 적합한 Agent/Team을 선택하는 것이 목표입니다.\n\n## 현재 상황\n\n**사용자 질문:** 서초구 아파트 매매 시세는?\n**분석된 의도:** 시세조회\n**추출된 키워드:** [\'서초구\', \'아파트\', \'매매\', \'시세\']\n\n## 사용 가능한 Agent/Team 정보\n\n{\'search_team\': {\'name\': \'search_team\', \'capabilities\': \'법률 검색, 부동산 시세 조회, 대출 상품 검색\', \'tools\': [\'legal_search\', \'market_data\', \'loan_data\'], \'use_cases\': [\'법률 상담\', \'시세 조회\', \'대출 정보\']}, \'analysis_team\': {\'name\': \'analysis_team\', \'capabilities\': \'데이터 분석, 리스크 평가, 인사이트 생성, 추천\', \'tools\': [\'data_analyzer\', \'risk_evaluator\'], \'use_cases\': [\'시장 분석\', \'리스크 평가\', \'투자 분석\']}, \'document_team\': {\'name\': \'document_team\', \'capabilities\': \'계약서 작성, 문서 생성, 문서 검토\', \'tools\': [\'document_generator\', \'contract_reviewer\'], \'use_cases\': [\'계약서 작성\', \'문서 검토\']}}\n\n## Agent 역할 및 상세 가이드\n\n### 1. search_team (검색 팀)\n- **주요 기능**: 정보 검색 및 데이터 수집\n- **전문 분야**:\n  * 법률 정보 검색 (전세법, 임대차보호법, 부동산 관련 법규)\n  * 부동산 시세 조회 (매매가, 전세가, 월세, 실거래가)\n  * 대출 상품 정보 검색 (금리, 한도, 조건)\n  * 지역 정보 및 인프라 조회\n- **도구**: legal_search, market_data, loan_data\n- **적합한 작업**: 정보 조회, 데이터 수집, 법률 확인, 시세 파악\n- **예시**:\n  * "전세금 5% 인상 가능한가요?"\n  * "강남구 아파트 전세 시세"\n  * "전세자금대출 한도 얼마?"\n\n### 2. analysis_team (분석 팀)\n- **주요 기능**: 데이터 분석 및 평가\n- **전문 분야**:\n  * 시장 동향 분석 (상승률, 하락률, 추세)\n  * 리스크 평가 (계약, 투자 위험도)\n  * 투자 수익률 계산 (ROI, 월세 수익률)\n  * 대출 한도 및 조건 분석 (LTV, DTI, DSR)\n  * 비교 분석 (지역별, 상품별)\n- **도구**: data_analyzer, risk_evaluator, calculator\n- **적합한 작업**: 데이터 분석, 리스크 평가, 계산, 비교, 예측\n- **의존성**: 보통 search_team의 데이터가 필요\n- **예시**:\n  * "이 지역 투자 가치 분석해줘"\n  * "계약 리스크 평가해줘"\n  * "대출 가능 금액 계산해줘"\n\n### 3. document_team (문서 팀)\n- **주요 기능**: 문서 생성 및 관리\n- **전문 분야**:\n  * 계약서 작성 (임대차, 매매, 전세)\n  * 문서 템플릿 관리\n  * 특약사항 생성\n  * 계약서 수정안 작성\n  * 법률 문서 검토\n- **도구**: document_generator, contract_template, contract_reviewer\n- **적합한 작업**: 문서 작성, 계약서 생성, 문서 수정, 검토\n- **예시**:\n  * "임대차계약서 작성해줘"\n  * "특약사항 추가해줘"\n  * "계약서 수정안 만들어줘"\n\n## Chain-of-Thought Agent 선택 프로세스\n\n다음 단계를 **순서대로** 따라 최적의 Agent 조합을 선택하세요:\n\n### 1단계: 질문 요구사항 파악\n- 단순 정보 조회인가? → search_team만 필요\n- 판단/평가가 필요한가? → search + analysis 필요\n- 해결책 제시가 필요한가? → search + analysis 필요\n- 문서 생성이 필요한가? → document_team 추가\n\n### 2단계: 작업 복잡도 판단\n- **단순** (검색만): "~이 뭐야?", "~알려줘" → search_team\n- **중간** (검색+판단): "~괜찮아?", "~적절해?" → search + analysis\n- **복잡** (종합 해결): 구체적 상황 + "어떻게 해야 해?" → search + analysis\n\n### 3단계: 의존성 분석\n- 독립적 작업: 단일 팀으로 처리 가능\n- 순차적 의존: 이전 결과 필요 → 여러 팀 순서대로\n- 병렬 가능: 동시 조회 가능 → coordination: "parallel"\n\n### 4단계: 최종 검증\n- 선택한 팀들로 질문에 완전히 답변 가능한가?\n- 불필요한 팀이 포함되지 않았는가?\n- 순서가 논리적인가? (데이터 흐름 고려)\n\n### 중요 원칙:\n- **법률 키워드만으로 판단하지 말 것**: "법적으로 어떻게 해야 해?" = 법률 검색 + 분석 필요\n- **상황 설명 + 해결책 요청** = 반드시 analysis_team 포함\n- **구체적 수치 비교** (3억→10억 같은) = analysis_team 필요\n\n## 의도별 Agent 매핑 가이드 (기본 가이드 - CoT로 조정 가능)\n\n| 의도 (Intent) | 기본 조합 | 상황별 조정 |\n|--------------|-----------|-------------|\n| LEGAL_CONSULT | ["search_team"] | 해결책 요청시 → + analysis_team |\n| MARKET_INQUIRY | ["search_team"] | 비교/평가시 → + analysis_team |\n| LOAN_CONSULT | ["search_team", "analysis_team"] | 계산 필수 |\n| CONTRACT_CREATION | ["document_team"] | 검토 후 작성 → search + document |\n| CONTRACT_REVIEW | ["search_team", "analysis_team"] | 법률 검토 + 리스크 분석 |\n| COMPREHENSIVE | ["search_team", "analysis_team"] | **항상 분석 포함** |\n| RISK_ANALYSIS | ["analysis_team"] | 법률 근거 필요시 → search + analysis |\n| UNCLEAR | ["search_team", "analysis_team"] | 포괄적 대응 |\n\n**중요**: 위 매핑은 **기본 가이드**일 뿐입니다.\n실제 질문의 내용(CoT 분석 결과)에 따라 조정하세요!\n\n## 복합 질문 처리 예시 (CoT 적용)\n\n### 예시 1: 순차적 처리\n질문: "강남구 시세 확인하고 투자 가치 분석해줘"\n**CoT 분석**:\n1. 요구사항: 시세 조회 + 투자 가치 평가\n2. 복잡도: 중간 (검색 + 분석)\n3. 의존성: 시세 데이터 → 투자 분석 (순차)\n4. 검증: search만으로는 "투자 가치 평가" 불가능\n\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "1단계: 시세 조회+투자 평가 필요. 2단계: 중간 복잡도. 3단계: 순차 의존. 4단계: search로 시세 수집 후 analysis로 투자 가치 평가 필요",\n    "coordination": "sequential"\n}\n```\n\n### 예시 2: 단순 정보 조회\n질문: "전세금 인상률 한도가 얼마야?"\n**CoT 분석**:\n1. 요구사항: 단순 사실 확인\n2. 복잡도: 낮음 (정보 확인형)\n3. 의존성: 없음\n4. 검증: search_team만으로 충분\n\n```json\n{\n    "selected_agents": ["search_team"],\n    "reasoning": "1단계: 단순 정보 조회. 2단계: 저복잡도. 3단계: 독립적. 4단계: 법률 검색만으로 답변 가능",\n    "coordination": "single"\n}\n```\n\n### 예시 3: 해결책 요청 (핵심 예시!)\n질문: "집주인이 전세금 3억을 10억으로 올려달래. 법적으로 어떻게 해야 해?"\n의도: COMPREHENSIVE\n**CoT 분석**:\n1. 요구사항: 상황 설명 + 해결책 요청\n2. 복잡도: 높음 (구체적 상황 + 수치 비교)\n3. 의존성: 법률 확인 → 상황 분석 → 해결책 제시\n4. 검증: "법적으로"만 보고 search만 선택하면 불충분! 해결책 제시 필요\n\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "1단계: 법률 + 상황 분석 + 해결책 필요. 2단계: 고복잡도(3억→10억 비정상). 3단계: 순차(법률 확인 후 타당성 분석). 4단계: \'어떻게 해야\' = 단순 법률 조회 아님, 분석 필수",\n    "coordination": "sequential",\n    "confidence": 0.95\n}\n```\n\n## 응답 형식 (JSON)\n\n```json\n{\n    "selected_agents": ["선택된 agent/team 목록"],\n    "reasoning": "선택 이유를 구체적으로 설명. 각 Agent의 역할과 처리 순서 포함",\n    "coordination": "single/sequential/parallel/pipeline",\n    "dependencies": {"agent2": ["agent1"]},\n    "estimated_time": 30,\n    "confidence": 0.9\n}\n```\n\n## 선택 가이드라인\n\n1. **최소 Agent 원칙**: 가능한 적은 수의 Agent로 처리\n2. **전문성 우선**: 해당 작업에 가장 전문적인 Agent 선택\n3. **효율성 고려**: 병렬 처리 가능한 경우 명시\n4. **의존성 관리**: 데이터 흐름을 고려한 순서 지정\n5. **폴백 전략**: 불확실한 경우 ["search_team", "analysis_team"] 조합\n\n## 주의사항\n\n- selected_agents는 반드시 배열 형태\n- Agent 이름은 정확히: "search_team", "analysis_team", "document_team"\n- 최소 1개, 최대 3개 선택\n- 순서는 실행 우선순위 (앞에 있을수록 먼저 실행)\n- reasoning은 상세하고 논리적으로 작성\n- coordination 필드로 실행 방식 명시\n- 복합 질문의 경우 의존성 관계 명확히 표시'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 15:55:38,238 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 15:55:38,238 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 15:55:38,239 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 15:55:38,239 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 15:55:38,239 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 15:55:38,239 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 15:55:41,233 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 06:55:41 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'2680'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'2743'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9994'), (b'x-ratelimit-remaining-tokens', b'197890'), (b'x-ratelimit-reset-requests', b'46.726s'), (b'x-ratelimit-reset-tokens', b'633ms'), (b'x-request-id', b'req_00559d51357f4430a0a139ddb7a5b6a0'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b03b7ddc13091-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 15:55:41,233 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 15:55:41,234 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 15:55:41,234 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 15:55:41,234 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 15:55:41,234 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 15:55:41,234 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 06:55:41 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '2680', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '2743', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9994', 'x-ratelimit-remaining-tokens': '197890', 'x-ratelimit-reset-requests': '46.726s', 'x-ratelimit-reset-tokens': '633ms', 'x-request-id': 'req_00559d51357f4430a0a139ddb7a5b6a0', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b03b7ddc13091-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 15:55:41,234 - openai._base_client - DEBUG - request_id: req_00559d51357f4430a0a139ddb7a5b6a0
2025-10-05 15:55:41,234 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: agent_selection | Model: gpt-4o-mini-2024-07-18 | Tokens: 2442 (prompt: 2359, completion: 83)
2025-10-05 15:55:41,234 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM agent selection reasoning: 사용자의 질문은 서초구 아파트 매매 시세에 대한 단순 정보 조회입니다. 따라서 search_team만으로 충분히 시세 정보를 제공할 수 있습니다.
2025-10-05 15:55:41,234 - app.service_agent.cognitive_agents.planning_agent - INFO - ✅ Primary LLM selected agents: ['search_team']
2025-10-05 15:55:41,234 - __main__ - INFO -   의도: 시세조회
2025-10-05 15:55:41,234 - __main__ - INFO -   신뢰도: 0.95
2025-10-05 15:55:41,234 - __main__ - INFO -   추천 Agent: ['search_team']
2025-10-05 15:55:41,234 - __main__ - INFO - 
[Step 2] Query Decomposition...
2025-10-05 15:55:41,234 - app.service_agent.cognitive_agents.query_decomposer - INFO - Decomposing query: 서초구 아파트 매매 시세는?...
2025-10-05 15:55:41,235 - app.service_agent.cognitive_agents.query_decomposer - INFO - Query is simple, no decomposition needed
2025-10-05 15:55:41,235 - __main__ - INFO -   복합 질문: False
2025-10-05 15:55:41,235 - __main__ - INFO -   작업 수: 1
2025-10-05 15:55:41,235 - __main__ - INFO -   실행 모드: sequential
2025-10-05 15:55:41,235 - __main__ - INFO - 
[Step 3] Execution Plan 생성...
2025-10-05 15:55:41,235 - app.service_agent.cognitive_agents.planning_agent - INFO - Creating execution plan for intent: 시세조회
2025-10-05 15:55:41,235 - app.service_agent.cognitive_agents.planning_agent - WARNING - AgentRegistry is empty, using default teams
2025-10-05 15:55:41,235 - app.service_agent.cognitive_agents.planning_agent - DEBUG - Suggested agents: ['search_team']
2025-10-05 15:55:41,235 - app.service_agent.cognitive_agents.planning_agent - DEBUG - Available agents: ['search_team', 'analysis_team', 'document_team']
2025-10-05 15:55:41,235 - app.service_agent.cognitive_agents.planning_agent - INFO - Selected agents/teams for execution: ['search_team']
2025-10-05 15:55:41,235 - __main__ - INFO -   전략: sequential
2025-10-05 15:55:41,235 - __main__ - INFO -   단계 수: 1
2025-10-05 15:55:41,235 - __main__ - INFO - 
✓ 테스트 성공 (소요시간: 7.95초)
2025-10-05 15:55:41,235 - __main__ - INFO - 
================================================================================
2025-10-05 15:55:41,235 - __main__ - INFO - [7] 단일 질문 테스트: S007
2025-10-05 15:55:41,235 - __main__ - INFO - 질문: LTV 비율이 뭔가요?
2025-10-05 15:55:41,235 - __main__ - INFO - ================================================================================
2025-10-05 15:55:41,235 - __main__ - INFO - 
[Step 1] Intent 분석...
2025-10-05 15:55:41,235 - app.service_agent.cognitive_agents.planning_agent - INFO - Analyzing intent for query: LTV 비율이 뭔가요?...
2025-10-05 15:55:41,235 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-cf701fdd-156f-4d71-ad63-4789d09d10e7', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 의도 분석 전문가입니다.\n사용자의 질문을 정확히 이해하고, 어떤 종류의 도움이 필요한지 분류해야 합니다.\n\n## Chain-of-Thought 분석 프로세스\n\n질문을 분석할 때 다음 단계를 **순서대로** 따르세요:\n\n### 1단계: 질문 구조 파악\n- 단순 정보 요청인가? (예: "~이 뭐야?", "~알려줘")\n- 상황 설명이 포함되어 있는가? (배경, 현재 상태)\n- 구체적 수치나 데이터가 있는가? (금액, 비율, 기간 등)\n- 문제 해결을 요구하는가? (예: "어떻게 해야 해?", "방법 알려줘")\n\n### 2단계: 요청 유형 판단\n- **정보 확인형**: 사실, 개념, 규정 확인 → 검색만으로 충분\n- **평가/판단형**: "괜찮아?", "적절해?", "문제있어?" → 검색 + 분석 필요\n- **해결책 요청형**: "어떻게?", "방법?", "대처?" → 검색 + 분석 + 제안 필요\n- **비교/선택형**: "A vs B", "어느게 나아?" → 검색 + 분석(비교) 필요\n\n### 3단계: 복잡도 평가\n- **저**: 단일 개념/사실 확인 (예: "전세금 인상률 한도?")\n- **중**: 특정 상황 + 판단 (예: "3억을 5억으로 올려달래. 가능해?")\n- **고**: 복잡한 상황 + 여러 조건 + 해결책 (예: "10년 거주, 3억→10억 요구. 어떻게 해야 해?")\n\n### 4단계: 필요한 처리 결정\n- **검색만**: 정보 확인형 + 저복잡도\n- **검색+분석**: 평가/판단형 OR 중복잡도 OR 수치 비교 포함\n- **종합처리**: 해결책 요청형 OR 고복잡도 OR 여러 조건 동시 고려\n\n### 5단계: 최종 검증\n- 선택한 의도로 사용자 질문에 완전히 답변 가능한가?\n- 단순 정보 제공으로 끝나는가, 아니면 추가 분석/판단이 필요한가?\n- 상황 설명이 있으면서 "해결", "방법", "어떻게" 등이 있으면 → COMPREHENSIVE 고려\n\n## 중요: 복합 질문 처리\n복합적인 질문(여러 의도가 섞인 질문)의 경우, 가장 핵심적인 의도를 파악하되,\nsub_intents 필드에 부가적인 의도들도 함께 기록해주세요.\n\n**특히 주의**:\n- 법률 키워드가 있어도, "해결방법", "어떻게 해야" 같은 표현이 있으면 단순 LEGAL_CONSULT가 아닐 수 있음\n- 구체적 상황(금액, 기간 등) + 해결책 요구 = COMPREHENSIVE 또는 복합 의도로 분류\n\n## 분류 카테고리 설명:\n\n1. **LEGAL_CONSULT (법률상담)**\n   - 설명: 부동산 관련 법률, 권리, 의무에 대한 질문\n   - 예시:\n     * 단순: "전세금 5% 인상이 가능한가요?", "임대차계약 갱신 거부할 수 있나요?"\n     * 복합: "전세금 인상 가능한지 확인하고 법적 근거도 알려주세요"\n   - 키워드: 법, 전세, 임대, 보증금, 계약, 권리, 의무, 갱신, 임차인, 임대인, 법률, 규정, 조항\n   - 필요한 처리: 법률 데이터베이스 검색, 관련 법조항 찾기\n\n2. **MARKET_INQUIRY (시세조회)**\n   - 설명: 부동산 시장 가격, 시세, 거래 동향에 대한 질문\n   - 예시:\n     * 단순: "강남구 아파트 전세 시세 알려주세요", "서초동 매매가 얼마나 올랐나요?"\n     * 복합: "강남구 시세 확인하고 대출 가능 금액도 계산해줘"\n   - 키워드: 시세, 가격, 매매가, 전세가, 월세, 시장, 동향, 평균, 지역명, 상승률, 하락률\n   - 필요한 처리: 부동산 시세 데이터 조회, 지역별 가격 분석\n\n3. **LOAN_CONSULT (대출상담)**\n   - 설명: 주택담보대출, 전세자금대출 등 금융 관련 질문\n   - 예시:\n     * 단순: "전세자금대출 한도가 얼마인가요?", "LTV가 뭔가요?"\n     * 복합: "대출 한도 확인하고 금리 비교도 해주세요"\n   - 키워드: 대출, 금리, 한도, 조건, 상환, LTV, DTI, DSR, 담보, 금융, 은행\n   - 필요한 처리: 대출 상품 조회, 금리 정보 검색, 한도 계산\n\n4. **CONTRACT_CREATION (계약서작성)**\n   - 설명: 새로운 계약서나 문서를 작성해달라는 요청\n   - 예시:\n     * 단순: "임대차계약서 작성해주세요", "전세계약서 초안 만들어주세요"\n     * 복합: "계약서 작성하고 주의사항도 검토해주세요"\n   - 키워드: 작성, 만들, 생성, 초안, 계약서, 문서, 양식\n   - 필요한 처리: 문서 생성 에이전트 호출, 템플릿 기반 작성\n\n5. **CONTRACT_REVIEW (계약서검토)**\n   - 설명: 기존 계약서나 문서를 검토해달라는 요청\n   - 예시:\n     * 단순: "이 계약서 검토해주세요", "특약사항 문제없나요?"\n     * 복합: "계약서 검토하고 수정사항도 제안해주세요"\n   - 키워드: 검토, 확인, 점검, 리뷰, 분석해, 살펴봐, 체크\n   - 필요한 처리: 문서 분석, 위험 요소 식별, 개선사항 제안\n\n6. **COMPREHENSIVE (종합분석)**\n   - 설명: 여러 측면을 종합적으로 분석해달라는 요청, 또는 복잡한 상황에 대한 해결책 요청\n   - 예시:\n     * 단순: "이 물건 전체적으로 분석해주세요"\n     * 복합: "시세, 법률, 대출 모두 검토해서 종합 의견 주세요"\n     * 해결형: "10년 거주했는데 전세금 3억을 10억으로 올려달래. 어떻게 해야 해?"\n     * 상황+해결: "집주인이 계약 갱신 거부했어. 법적으로 어떻게 대응해야 할까?"\n   - 키워드: 종합, 전체, 모든, 전반적, 종합적, 평가, 분석, 어떻게, 방법, 해결, 대처\n   - 패턴: 구체적 상황 설명 + "어떻게/방법/해결" 요청\n   - 필요한 처리: 다중 데이터 소스 통합 분석, 상황 평가, 해결책 제시\n\n7. **RISK_ANALYSIS (리스크분석)**\n   - 설명: 위험 요소나 주의사항에 대한 질문\n   - 예시:\n     * 단순: "이 계약 위험한가요?", "주의할 점 알려주세요"\n     * 복합: "리스크 분석하고 대안도 제시해주세요"\n   - 키워드: 위험, 리스크, 주의, 문제점, 조심, 걱정, 우려\n   - 필요한 처리: 위험 요소 분석, 주의사항 추출\n\n8. **UNCLEAR (불분명)**\n   - 설명: 의도를 명확히 파악하기 어려운 질문\n   - 예시: "이거 좀 봐주세요", "어떻게 해야 할까요?", "도와주세요"\n   - 처리: 추가 질문으로 의도 명확화 필요\n\n9. **IRRELEVANT (무관)**\n   - 설명: 부동산과 전혀 관련 없는 질문\n   - 예시: "날씨 어때?", "저녁 뭐 먹지?", "주식 추천해줘"\n   - 처리: 부동산 관련 질문을 유도\n\n## 복합 질문 예시와 분석 (CoT 적용):\n\n### 예시 1: "강남구 아파트 시세 알려주고 전세자금대출 가능한지도 확인해줘"\n**CoT 분석**:\n1. 구조: 두 개의 요청 ("시세" + "대출")\n2. 유형: 정보 확인형 (둘 다)\n3. 복잡도: 중 (두 가지 독립적 조회)\n4. 필요 처리: 검색 + 계산/분석\n\n**결론**:\n- 주 의도: MARKET_INQUIRY (시세 조회가 먼저 필요)\n- 부가 의도: LOAN_CONSULT (대출 확인)\n- 분해: ["강남구 아파트 시세 조회", "전세자금대출 가능 여부 확인"]\n\n### 예시 2: "이 계약서 검토해서 위험한 부분 있는지 알려주고 수정 제안도 해줘"\n**CoT 분석**:\n1. 구조: 검토 + 위험 평가 + 수정안\n2. 유형: 평가/판단형 + 해결책 요청형\n3. 복잡도: 고 (3단계 처리)\n4. 필요 처리: 검토 + 분석 + 문서 생성\n\n**결론**:\n- 주 의도: CONTRACT_REVIEW (계약서 검토)\n- 부가 의도: RISK_ANALYSIS (위험 분석)\n- 분해: ["계약서 전체 검토", "위험 요소 식별", "수정사항 제안"]\n\n### 예시 3: "집주인이 짜증나, 10년 살았는데 전세금 3억을 10억으로 올려달래. 법적으로 해결방법 알려줘"\n**CoT 분석**:\n1. 구조: 상황 설명 (10년 거주, 3억→10억) + 해결책 요청\n2. 유형: 해결책 요청형 (단순 정보 X)\n3. 복잡도: 고 (구체적 상황 + 수치 비교 + 법률 + 대응방안)\n4. 필요 처리: 법률 검색 + 상황 분석 + 해결책 제시\n\n**결론**:\n- 주 의도: COMPREHENSIVE (복잡한 상황에 대한 종합 해결)\n- 부가 의도: LEGAL_CONSULT, RISK_ANALYSIS\n- 분해: ["전세금 인상 한도 법률 조회", "3억→10억 인상의 타당성 분석", "구체적 대응 방안 제시"]\n- **이유**: "법적으로"라는 키워드가 있지만, 단순 법률 확인이 아니라 구체적 상황에 대한 해결책을 요구하므로 COMPREHENSIVE\n\n### 예시 4: "전세금 인상률 상한이 얼마야?"\n**CoT 분석**:\n1. 구조: 단순 사실 확인\n2. 유형: 정보 확인형\n3. 복잡도: 저 (단일 개념)\n4. 필요 처리: 검색만\n\n**결론**:\n- 주 의도: LEGAL_CONSULT (법률 정보 조회)\n- 부가 의도: 없음\n- 분해: 필요 없음\n\n## 응답 형식 (JSON 형식으로 응답):\n\n```json\n{\n    "intent": "LEGAL_CONSULT",\n    "confidence": 0.9,\n    "keywords": ["전세금", "인상", "제한"],\n    "sub_intents": [],\n    "is_compound": false,\n    "decomposed_tasks": [],\n    "entities": {\n        "location": "강남구",\n        "price": "5억",\n        "contract_type": "전세",\n        "date": "2024년",\n        "area": "84㎡",\n        "action_verbs": ["확인", "검토"]\n    },\n    "reasoning": "전세금 인상에 대한 법률 질문이므로 LEGAL_CONSULT로 분류"\n}\n```\n\n응답 규칙:\n- intent: 위 9개 카테고리 중 하나 (대문자_언더스코어 형식)\n- confidence: 0.0~1.0 (0.8 이상이면 매우 확실, 0.5 미만이면 불확실)\n- keywords: 추출된 주요 키워드 목록\n- sub_intents: 복합 질문일 경우 부가적인 의도들\n- is_compound: 복합 질문 여부 (true/false)\n- decomposed_tasks: 복합 질문을 분해한 개별 작업들\n- entities: 추출된 엔티티 정보\n- reasoning: **반드시 CoT 5단계를 거쳐 분석한 과정을 포함** (구조 파악 → 유형 판단 → 복잡도 평가 → 필요 처리 → 최종 검증)\n\n## reasoning 작성 예시:\n"1단계(구조): 상황 설명(10년 거주, 3억→10억) + 해결책 요청 포함.\n2단계(유형): 해결책 요청형 - 단순 정보가 아닌 대응방안 필요.\n3단계(복잡도): 고 - 구체적 수치 비교와 복잡한 상황.\n4단계(처리): 법률 검색 + 상황 분석 + 해결책 제시 필요.\n5단계(검증): LEGAL_CONSULT만으로는 불충분, 종합적 분석 필요 → COMPREHENSIVE 선택"\n\n## 판단 가이드:\n- 여러 의도가 섞여있다면, 가장 주된 의도를 intent에, 나머지를 sub_intents에 기록\n- "그리고", "또한", "함께", "같이" 등의 연결어가 있으면 복합 질문일 가능성 높음\n- 법률 관련 키워드가 있으면 LEGAL_CONSULT 우선\n- 가격/시세 언급이 명확하면 MARKET_INQUIRY\n- 계약서라는 단어와 함께 "작성/만들기"가 있으면 CONTRACT_CREATION\n- 계약서라는 단어와 함께 "검토/확인"이 있으면 CONTRACT_REVIEW\n- 불확실하면 confidence를 낮게 설정하고 UNCLEAR 선택\n- 복합 질문은 is_compound를 true로 설정하고 개별 작업으로 분해\n\n분석할 질문: LTV 비율이 뭔가요?'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 15:55:41,236 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 15:55:41,236 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 15:55:41,236 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 15:55:41,236 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 15:55:41,236 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 15:55:41,236 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 15:55:45,022 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 06:55:44 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'3582'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'3597'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9993'), (b'x-ratelimit-remaining-tokens', b'197250'), (b'x-ratelimit-reset-requests', b'52.375s'), (b'x-ratelimit-reset-tokens', b'825ms'), (b'x-request-id', b'req_ae861edfb54747809df80e571e036ee0'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b03ca989e3091-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 15:55:45,022 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 15:55:45,024 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 15:55:45,024 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 15:55:45,024 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 15:55:45,024 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 15:55:45,025 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 06:55:44 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '3582', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '3597', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9993', 'x-ratelimit-remaining-tokens': '197250', 'x-ratelimit-reset-requests': '52.375s', 'x-ratelimit-reset-tokens': '825ms', 'x-request-id': 'req_ae861edfb54747809df80e571e036ee0', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b03ca989e3091-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 15:55:45,025 - openai._base_client - DEBUG - request_id: req_ae861edfb54747809df80e571e036ee0
2025-10-05 15:55:45,025 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: intent_analysis | Model: gpt-4o-mini-2024-07-18 | Tokens: 3363 (prompt: 3179, completion: 184)
2025-10-05 15:55:45,025 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM Intent Analysis Result: {'intent': 'LOAN_CONSULT', 'confidence': 0.9, 'keywords': ['LTV', '비율'], 'sub_intents': [], 'is_compound': False, 'decomposed_tasks': [], 'entities': {'action_verbs': ['알려줘']}, 'reasoning': '1단계(구조): 단순 정보 요청으로 LTV 비율에 대한 정의를 묻고 있음. 2단계(유형): 정보 확인형 - LTV 비율에 대한 사실 확인이 필요. 3단계(복잡도): 저 - 단일 개념 확인. 4단계(처리): 검색만으로 충분. 5단계(검증): 단순 정보 제공으로 끝나므로 LOAN_CONSULT로 분류.'}
2025-10-05 15:55:45,026 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-5844f5e3-d96c-4b0e-a42a-d48fc60129e6', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 Agent 선택 전문가입니다.\n사용자의 요청에 가장 적합한 Agent/Team을 선택하는 것이 목표입니다.\n\n## 현재 상황\n\n**사용자 질문:** LTV 비율이 뭔가요?\n**분석된 의도:** 대출상담\n**추출된 키워드:** [\'LTV\', \'비율\']\n\n## 사용 가능한 Agent/Team 정보\n\n{\'search_team\': {\'name\': \'search_team\', \'capabilities\': \'법률 검색, 부동산 시세 조회, 대출 상품 검색\', \'tools\': [\'legal_search\', \'market_data\', \'loan_data\'], \'use_cases\': [\'법률 상담\', \'시세 조회\', \'대출 정보\']}, \'analysis_team\': {\'name\': \'analysis_team\', \'capabilities\': \'데이터 분석, 리스크 평가, 인사이트 생성, 추천\', \'tools\': [\'data_analyzer\', \'risk_evaluator\'], \'use_cases\': [\'시장 분석\', \'리스크 평가\', \'투자 분석\']}, \'document_team\': {\'name\': \'document_team\', \'capabilities\': \'계약서 작성, 문서 생성, 문서 검토\', \'tools\': [\'document_generator\', \'contract_reviewer\'], \'use_cases\': [\'계약서 작성\', \'문서 검토\']}}\n\n## Agent 역할 및 상세 가이드\n\n### 1. search_team (검색 팀)\n- **주요 기능**: 정보 검색 및 데이터 수집\n- **전문 분야**:\n  * 법률 정보 검색 (전세법, 임대차보호법, 부동산 관련 법규)\n  * 부동산 시세 조회 (매매가, 전세가, 월세, 실거래가)\n  * 대출 상품 정보 검색 (금리, 한도, 조건)\n  * 지역 정보 및 인프라 조회\n- **도구**: legal_search, market_data, loan_data\n- **적합한 작업**: 정보 조회, 데이터 수집, 법률 확인, 시세 파악\n- **예시**:\n  * "전세금 5% 인상 가능한가요?"\n  * "강남구 아파트 전세 시세"\n  * "전세자금대출 한도 얼마?"\n\n### 2. analysis_team (분석 팀)\n- **주요 기능**: 데이터 분석 및 평가\n- **전문 분야**:\n  * 시장 동향 분석 (상승률, 하락률, 추세)\n  * 리스크 평가 (계약, 투자 위험도)\n  * 투자 수익률 계산 (ROI, 월세 수익률)\n  * 대출 한도 및 조건 분석 (LTV, DTI, DSR)\n  * 비교 분석 (지역별, 상품별)\n- **도구**: data_analyzer, risk_evaluator, calculator\n- **적합한 작업**: 데이터 분석, 리스크 평가, 계산, 비교, 예측\n- **의존성**: 보통 search_team의 데이터가 필요\n- **예시**:\n  * "이 지역 투자 가치 분석해줘"\n  * "계약 리스크 평가해줘"\n  * "대출 가능 금액 계산해줘"\n\n### 3. document_team (문서 팀)\n- **주요 기능**: 문서 생성 및 관리\n- **전문 분야**:\n  * 계약서 작성 (임대차, 매매, 전세)\n  * 문서 템플릿 관리\n  * 특약사항 생성\n  * 계약서 수정안 작성\n  * 법률 문서 검토\n- **도구**: document_generator, contract_template, contract_reviewer\n- **적합한 작업**: 문서 작성, 계약서 생성, 문서 수정, 검토\n- **예시**:\n  * "임대차계약서 작성해줘"\n  * "특약사항 추가해줘"\n  * "계약서 수정안 만들어줘"\n\n## Chain-of-Thought Agent 선택 프로세스\n\n다음 단계를 **순서대로** 따라 최적의 Agent 조합을 선택하세요:\n\n### 1단계: 질문 요구사항 파악\n- 단순 정보 조회인가? → search_team만 필요\n- 판단/평가가 필요한가? → search + analysis 필요\n- 해결책 제시가 필요한가? → search + analysis 필요\n- 문서 생성이 필요한가? → document_team 추가\n\n### 2단계: 작업 복잡도 판단\n- **단순** (검색만): "~이 뭐야?", "~알려줘" → search_team\n- **중간** (검색+판단): "~괜찮아?", "~적절해?" → search + analysis\n- **복잡** (종합 해결): 구체적 상황 + "어떻게 해야 해?" → search + analysis\n\n### 3단계: 의존성 분석\n- 독립적 작업: 단일 팀으로 처리 가능\n- 순차적 의존: 이전 결과 필요 → 여러 팀 순서대로\n- 병렬 가능: 동시 조회 가능 → coordination: "parallel"\n\n### 4단계: 최종 검증\n- 선택한 팀들로 질문에 완전히 답변 가능한가?\n- 불필요한 팀이 포함되지 않았는가?\n- 순서가 논리적인가? (데이터 흐름 고려)\n\n### 중요 원칙:\n- **법률 키워드만으로 판단하지 말 것**: "법적으로 어떻게 해야 해?" = 법률 검색 + 분석 필요\n- **상황 설명 + 해결책 요청** = 반드시 analysis_team 포함\n- **구체적 수치 비교** (3억→10억 같은) = analysis_team 필요\n\n## 의도별 Agent 매핑 가이드 (기본 가이드 - CoT로 조정 가능)\n\n| 의도 (Intent) | 기본 조합 | 상황별 조정 |\n|--------------|-----------|-------------|\n| LEGAL_CONSULT | ["search_team"] | 해결책 요청시 → + analysis_team |\n| MARKET_INQUIRY | ["search_team"] | 비교/평가시 → + analysis_team |\n| LOAN_CONSULT | ["search_team", "analysis_team"] | 계산 필수 |\n| CONTRACT_CREATION | ["document_team"] | 검토 후 작성 → search + document |\n| CONTRACT_REVIEW | ["search_team", "analysis_team"] | 법률 검토 + 리스크 분석 |\n| COMPREHENSIVE | ["search_team", "analysis_team"] | **항상 분석 포함** |\n| RISK_ANALYSIS | ["analysis_team"] | 법률 근거 필요시 → search + analysis |\n| UNCLEAR | ["search_team", "analysis_team"] | 포괄적 대응 |\n\n**중요**: 위 매핑은 **기본 가이드**일 뿐입니다.\n실제 질문의 내용(CoT 분석 결과)에 따라 조정하세요!\n\n## 복합 질문 처리 예시 (CoT 적용)\n\n### 예시 1: 순차적 처리\n질문: "강남구 시세 확인하고 투자 가치 분석해줘"\n**CoT 분석**:\n1. 요구사항: 시세 조회 + 투자 가치 평가\n2. 복잡도: 중간 (검색 + 분석)\n3. 의존성: 시세 데이터 → 투자 분석 (순차)\n4. 검증: search만으로는 "투자 가치 평가" 불가능\n\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "1단계: 시세 조회+투자 평가 필요. 2단계: 중간 복잡도. 3단계: 순차 의존. 4단계: search로 시세 수집 후 analysis로 투자 가치 평가 필요",\n    "coordination": "sequential"\n}\n```\n\n### 예시 2: 단순 정보 조회\n질문: "전세금 인상률 한도가 얼마야?"\n**CoT 분석**:\n1. 요구사항: 단순 사실 확인\n2. 복잡도: 낮음 (정보 확인형)\n3. 의존성: 없음\n4. 검증: search_team만으로 충분\n\n```json\n{\n    "selected_agents": ["search_team"],\n    "reasoning": "1단계: 단순 정보 조회. 2단계: 저복잡도. 3단계: 독립적. 4단계: 법률 검색만으로 답변 가능",\n    "coordination": "single"\n}\n```\n\n### 예시 3: 해결책 요청 (핵심 예시!)\n질문: "집주인이 전세금 3억을 10억으로 올려달래. 법적으로 어떻게 해야 해?"\n의도: COMPREHENSIVE\n**CoT 분석**:\n1. 요구사항: 상황 설명 + 해결책 요청\n2. 복잡도: 높음 (구체적 상황 + 수치 비교)\n3. 의존성: 법률 확인 → 상황 분석 → 해결책 제시\n4. 검증: "법적으로"만 보고 search만 선택하면 불충분! 해결책 제시 필요\n\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "1단계: 법률 + 상황 분석 + 해결책 필요. 2단계: 고복잡도(3억→10억 비정상). 3단계: 순차(법률 확인 후 타당성 분석). 4단계: \'어떻게 해야\' = 단순 법률 조회 아님, 분석 필수",\n    "coordination": "sequential",\n    "confidence": 0.95\n}\n```\n\n## 응답 형식 (JSON)\n\n```json\n{\n    "selected_agents": ["선택된 agent/team 목록"],\n    "reasoning": "선택 이유를 구체적으로 설명. 각 Agent의 역할과 처리 순서 포함",\n    "coordination": "single/sequential/parallel/pipeline",\n    "dependencies": {"agent2": ["agent1"]},\n    "estimated_time": 30,\n    "confidence": 0.9\n}\n```\n\n## 선택 가이드라인\n\n1. **최소 Agent 원칙**: 가능한 적은 수의 Agent로 처리\n2. **전문성 우선**: 해당 작업에 가장 전문적인 Agent 선택\n3. **효율성 고려**: 병렬 처리 가능한 경우 명시\n4. **의존성 관리**: 데이터 흐름을 고려한 순서 지정\n5. **폴백 전략**: 불확실한 경우 ["search_team", "analysis_team"] 조합\n\n## 주의사항\n\n- selected_agents는 반드시 배열 형태\n- Agent 이름은 정확히: "search_team", "analysis_team", "document_team"\n- 최소 1개, 최대 3개 선택\n- 순서는 실행 우선순위 (앞에 있을수록 먼저 실행)\n- reasoning은 상세하고 논리적으로 작성\n- coordination 필드로 실행 방식 명시\n- 복합 질문의 경우 의존성 관계 명확히 표시'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 15:55:45,026 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 15:55:45,026 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 15:55:45,026 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 15:55:45,027 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 15:55:45,027 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 15:55:45,027 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 15:55:50,276 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 06:55:50 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'5033'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'5056'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9993'), (b'x-ratelimit-remaining-tokens', b'197901'), (b'x-ratelimit-reset-requests', b'57.216s'), (b'x-ratelimit-reset-tokens', b'629ms'), (b'x-request-id', b'req_50a3cc8bf83245fda872bffb9e01076a'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b03e24aa23091-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 15:55:50,276 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 15:55:50,276 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 15:55:50,282 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 15:55:50,282 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 15:55:50,282 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 15:55:50,282 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 06:55:50 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '5033', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '5056', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9993', 'x-ratelimit-remaining-tokens': '197901', 'x-ratelimit-reset-requests': '57.216s', 'x-ratelimit-reset-tokens': '629ms', 'x-request-id': 'req_50a3cc8bf83245fda872bffb9e01076a', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b03e24aa23091-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 15:55:50,282 - openai._base_client - DEBUG - request_id: req_50a3cc8bf83245fda872bffb9e01076a
2025-10-05 15:55:50,282 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: agent_selection | Model: gpt-4o-mini-2024-07-18 | Tokens: 2536 (prompt: 2350, completion: 186)
2025-10-05 15:55:50,282 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM agent selection reasoning: 1단계: LTV 비율에 대한 설명과 대출 상담이 필요. 2단계: LTV 비율은 대출과 관련된 정보이므로 중간 복잡도로 판단. 3단계: LTV 비율에 대한 정보 검색 후, 대출 조건 분석이 필요하므로 순차적 의존성 존재. 4단계: 단순 정보 조회로는 LTV 비율에 대한 충분한 답변이 불가능하므로, search_team으로 LTV 비율에 대한 정보를 수집하고, analysis_team으로 대출 조건을 분석해야 함.
2025-10-05 15:55:50,283 - app.service_agent.cognitive_agents.planning_agent - INFO - ✅ Primary LLM selected agents: ['search_team', 'analysis_team']
2025-10-05 15:55:50,283 - __main__ - INFO -   의도: 대출상담
2025-10-05 15:55:50,283 - __main__ - INFO -   신뢰도: 0.90
2025-10-05 15:55:50,283 - __main__ - INFO -   추천 Agent: ['search_team', 'analysis_team']
2025-10-05 15:55:50,283 - __main__ - INFO - 
[Step 2] Query Decomposition...
2025-10-05 15:55:50,283 - app.service_agent.cognitive_agents.query_decomposer - INFO - Decomposing query: LTV 비율이 뭔가요?...
2025-10-05 15:55:50,283 - app.service_agent.cognitive_agents.query_decomposer - INFO - Query is simple, no decomposition needed
2025-10-05 15:55:50,283 - __main__ - INFO -   복합 질문: False
2025-10-05 15:55:50,283 - __main__ - INFO -   작업 수: 1
2025-10-05 15:55:50,283 - __main__ - INFO -   실행 모드: sequential
2025-10-05 15:55:50,283 - __main__ - INFO - 
[Step 3] Execution Plan 생성...
2025-10-05 15:55:50,283 - app.service_agent.cognitive_agents.planning_agent - INFO - Creating execution plan for intent: 대출상담
2025-10-05 15:55:50,283 - app.service_agent.cognitive_agents.planning_agent - WARNING - AgentRegistry is empty, using default teams
2025-10-05 15:55:50,283 - app.service_agent.cognitive_agents.planning_agent - DEBUG - Suggested agents: ['search_team', 'analysis_team']
2025-10-05 15:55:50,283 - app.service_agent.cognitive_agents.planning_agent - DEBUG - Available agents: ['search_team', 'analysis_team', 'document_team']
2025-10-05 15:55:50,283 - app.service_agent.cognitive_agents.planning_agent - INFO - Selected agents/teams for execution: ['search_team', 'analysis_team']
2025-10-05 15:55:50,283 - __main__ - INFO -   전략: sequential
2025-10-05 15:55:50,283 - __main__ - INFO -   단계 수: 2
2025-10-05 15:55:50,283 - __main__ - INFO - 
✓ 테스트 성공 (소요시간: 9.05초)
2025-10-05 15:55:50,283 - __main__ - INFO - 
================================================================================
2025-10-05 15:55:50,283 - __main__ - INFO - [8] 단일 질문 테스트: S008
2025-10-05 15:55:50,283 - __main__ - INFO - 질문: 보증금 반환 보증 가입 방법은?
2025-10-05 15:55:50,283 - __main__ - INFO - ================================================================================
2025-10-05 15:55:50,283 - __main__ - INFO - 
[Step 1] Intent 분석...
2025-10-05 15:55:50,283 - app.service_agent.cognitive_agents.planning_agent - INFO - Analyzing intent for query: 보증금 반환 보증 가입 방법은?...
2025-10-05 15:55:50,283 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-0e0f154c-f57b-4d55-9e94-c030c5be20d1', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 의도 분석 전문가입니다.\n사용자의 질문을 정확히 이해하고, 어떤 종류의 도움이 필요한지 분류해야 합니다.\n\n## Chain-of-Thought 분석 프로세스\n\n질문을 분석할 때 다음 단계를 **순서대로** 따르세요:\n\n### 1단계: 질문 구조 파악\n- 단순 정보 요청인가? (예: "~이 뭐야?", "~알려줘")\n- 상황 설명이 포함되어 있는가? (배경, 현재 상태)\n- 구체적 수치나 데이터가 있는가? (금액, 비율, 기간 등)\n- 문제 해결을 요구하는가? (예: "어떻게 해야 해?", "방법 알려줘")\n\n### 2단계: 요청 유형 판단\n- **정보 확인형**: 사실, 개념, 규정 확인 → 검색만으로 충분\n- **평가/판단형**: "괜찮아?", "적절해?", "문제있어?" → 검색 + 분석 필요\n- **해결책 요청형**: "어떻게?", "방법?", "대처?" → 검색 + 분석 + 제안 필요\n- **비교/선택형**: "A vs B", "어느게 나아?" → 검색 + 분석(비교) 필요\n\n### 3단계: 복잡도 평가\n- **저**: 단일 개념/사실 확인 (예: "전세금 인상률 한도?")\n- **중**: 특정 상황 + 판단 (예: "3억을 5억으로 올려달래. 가능해?")\n- **고**: 복잡한 상황 + 여러 조건 + 해결책 (예: "10년 거주, 3억→10억 요구. 어떻게 해야 해?")\n\n### 4단계: 필요한 처리 결정\n- **검색만**: 정보 확인형 + 저복잡도\n- **검색+분석**: 평가/판단형 OR 중복잡도 OR 수치 비교 포함\n- **종합처리**: 해결책 요청형 OR 고복잡도 OR 여러 조건 동시 고려\n\n### 5단계: 최종 검증\n- 선택한 의도로 사용자 질문에 완전히 답변 가능한가?\n- 단순 정보 제공으로 끝나는가, 아니면 추가 분석/판단이 필요한가?\n- 상황 설명이 있으면서 "해결", "방법", "어떻게" 등이 있으면 → COMPREHENSIVE 고려\n\n## 중요: 복합 질문 처리\n복합적인 질문(여러 의도가 섞인 질문)의 경우, 가장 핵심적인 의도를 파악하되,\nsub_intents 필드에 부가적인 의도들도 함께 기록해주세요.\n\n**특히 주의**:\n- 법률 키워드가 있어도, "해결방법", "어떻게 해야" 같은 표현이 있으면 단순 LEGAL_CONSULT가 아닐 수 있음\n- 구체적 상황(금액, 기간 등) + 해결책 요구 = COMPREHENSIVE 또는 복합 의도로 분류\n\n## 분류 카테고리 설명:\n\n1. **LEGAL_CONSULT (법률상담)**\n   - 설명: 부동산 관련 법률, 권리, 의무에 대한 질문\n   - 예시:\n     * 단순: "전세금 5% 인상이 가능한가요?", "임대차계약 갱신 거부할 수 있나요?"\n     * 복합: "전세금 인상 가능한지 확인하고 법적 근거도 알려주세요"\n   - 키워드: 법, 전세, 임대, 보증금, 계약, 권리, 의무, 갱신, 임차인, 임대인, 법률, 규정, 조항\n   - 필요한 처리: 법률 데이터베이스 검색, 관련 법조항 찾기\n\n2. **MARKET_INQUIRY (시세조회)**\n   - 설명: 부동산 시장 가격, 시세, 거래 동향에 대한 질문\n   - 예시:\n     * 단순: "강남구 아파트 전세 시세 알려주세요", "서초동 매매가 얼마나 올랐나요?"\n     * 복합: "강남구 시세 확인하고 대출 가능 금액도 계산해줘"\n   - 키워드: 시세, 가격, 매매가, 전세가, 월세, 시장, 동향, 평균, 지역명, 상승률, 하락률\n   - 필요한 처리: 부동산 시세 데이터 조회, 지역별 가격 분석\n\n3. **LOAN_CONSULT (대출상담)**\n   - 설명: 주택담보대출, 전세자금대출 등 금융 관련 질문\n   - 예시:\n     * 단순: "전세자금대출 한도가 얼마인가요?", "LTV가 뭔가요?"\n     * 복합: "대출 한도 확인하고 금리 비교도 해주세요"\n   - 키워드: 대출, 금리, 한도, 조건, 상환, LTV, DTI, DSR, 담보, 금융, 은행\n   - 필요한 처리: 대출 상품 조회, 금리 정보 검색, 한도 계산\n\n4. **CONTRACT_CREATION (계약서작성)**\n   - 설명: 새로운 계약서나 문서를 작성해달라는 요청\n   - 예시:\n     * 단순: "임대차계약서 작성해주세요", "전세계약서 초안 만들어주세요"\n     * 복합: "계약서 작성하고 주의사항도 검토해주세요"\n   - 키워드: 작성, 만들, 생성, 초안, 계약서, 문서, 양식\n   - 필요한 처리: 문서 생성 에이전트 호출, 템플릿 기반 작성\n\n5. **CONTRACT_REVIEW (계약서검토)**\n   - 설명: 기존 계약서나 문서를 검토해달라는 요청\n   - 예시:\n     * 단순: "이 계약서 검토해주세요", "특약사항 문제없나요?"\n     * 복합: "계약서 검토하고 수정사항도 제안해주세요"\n   - 키워드: 검토, 확인, 점검, 리뷰, 분석해, 살펴봐, 체크\n   - 필요한 처리: 문서 분석, 위험 요소 식별, 개선사항 제안\n\n6. **COMPREHENSIVE (종합분석)**\n   - 설명: 여러 측면을 종합적으로 분석해달라는 요청, 또는 복잡한 상황에 대한 해결책 요청\n   - 예시:\n     * 단순: "이 물건 전체적으로 분석해주세요"\n     * 복합: "시세, 법률, 대출 모두 검토해서 종합 의견 주세요"\n     * 해결형: "10년 거주했는데 전세금 3억을 10억으로 올려달래. 어떻게 해야 해?"\n     * 상황+해결: "집주인이 계약 갱신 거부했어. 법적으로 어떻게 대응해야 할까?"\n   - 키워드: 종합, 전체, 모든, 전반적, 종합적, 평가, 분석, 어떻게, 방법, 해결, 대처\n   - 패턴: 구체적 상황 설명 + "어떻게/방법/해결" 요청\n   - 필요한 처리: 다중 데이터 소스 통합 분석, 상황 평가, 해결책 제시\n\n7. **RISK_ANALYSIS (리스크분석)**\n   - 설명: 위험 요소나 주의사항에 대한 질문\n   - 예시:\n     * 단순: "이 계약 위험한가요?", "주의할 점 알려주세요"\n     * 복합: "리스크 분석하고 대안도 제시해주세요"\n   - 키워드: 위험, 리스크, 주의, 문제점, 조심, 걱정, 우려\n   - 필요한 처리: 위험 요소 분석, 주의사항 추출\n\n8. **UNCLEAR (불분명)**\n   - 설명: 의도를 명확히 파악하기 어려운 질문\n   - 예시: "이거 좀 봐주세요", "어떻게 해야 할까요?", "도와주세요"\n   - 처리: 추가 질문으로 의도 명확화 필요\n\n9. **IRRELEVANT (무관)**\n   - 설명: 부동산과 전혀 관련 없는 질문\n   - 예시: "날씨 어때?", "저녁 뭐 먹지?", "주식 추천해줘"\n   - 처리: 부동산 관련 질문을 유도\n\n## 복합 질문 예시와 분석 (CoT 적용):\n\n### 예시 1: "강남구 아파트 시세 알려주고 전세자금대출 가능한지도 확인해줘"\n**CoT 분석**:\n1. 구조: 두 개의 요청 ("시세" + "대출")\n2. 유형: 정보 확인형 (둘 다)\n3. 복잡도: 중 (두 가지 독립적 조회)\n4. 필요 처리: 검색 + 계산/분석\n\n**결론**:\n- 주 의도: MARKET_INQUIRY (시세 조회가 먼저 필요)\n- 부가 의도: LOAN_CONSULT (대출 확인)\n- 분해: ["강남구 아파트 시세 조회", "전세자금대출 가능 여부 확인"]\n\n### 예시 2: "이 계약서 검토해서 위험한 부분 있는지 알려주고 수정 제안도 해줘"\n**CoT 분석**:\n1. 구조: 검토 + 위험 평가 + 수정안\n2. 유형: 평가/판단형 + 해결책 요청형\n3. 복잡도: 고 (3단계 처리)\n4. 필요 처리: 검토 + 분석 + 문서 생성\n\n**결론**:\n- 주 의도: CONTRACT_REVIEW (계약서 검토)\n- 부가 의도: RISK_ANALYSIS (위험 분석)\n- 분해: ["계약서 전체 검토", "위험 요소 식별", "수정사항 제안"]\n\n### 예시 3: "집주인이 짜증나, 10년 살았는데 전세금 3억을 10억으로 올려달래. 법적으로 해결방법 알려줘"\n**CoT 분석**:\n1. 구조: 상황 설명 (10년 거주, 3억→10억) + 해결책 요청\n2. 유형: 해결책 요청형 (단순 정보 X)\n3. 복잡도: 고 (구체적 상황 + 수치 비교 + 법률 + 대응방안)\n4. 필요 처리: 법률 검색 + 상황 분석 + 해결책 제시\n\n**결론**:\n- 주 의도: COMPREHENSIVE (복잡한 상황에 대한 종합 해결)\n- 부가 의도: LEGAL_CONSULT, RISK_ANALYSIS\n- 분해: ["전세금 인상 한도 법률 조회", "3억→10억 인상의 타당성 분석", "구체적 대응 방안 제시"]\n- **이유**: "법적으로"라는 키워드가 있지만, 단순 법률 확인이 아니라 구체적 상황에 대한 해결책을 요구하므로 COMPREHENSIVE\n\n### 예시 4: "전세금 인상률 상한이 얼마야?"\n**CoT 분석**:\n1. 구조: 단순 사실 확인\n2. 유형: 정보 확인형\n3. 복잡도: 저 (단일 개념)\n4. 필요 처리: 검색만\n\n**결론**:\n- 주 의도: LEGAL_CONSULT (법률 정보 조회)\n- 부가 의도: 없음\n- 분해: 필요 없음\n\n## 응답 형식 (JSON 형식으로 응답):\n\n```json\n{\n    "intent": "LEGAL_CONSULT",\n    "confidence": 0.9,\n    "keywords": ["전세금", "인상", "제한"],\n    "sub_intents": [],\n    "is_compound": false,\n    "decomposed_tasks": [],\n    "entities": {\n        "location": "강남구",\n        "price": "5억",\n        "contract_type": "전세",\n        "date": "2024년",\n        "area": "84㎡",\n        "action_verbs": ["확인", "검토"]\n    },\n    "reasoning": "전세금 인상에 대한 법률 질문이므로 LEGAL_CONSULT로 분류"\n}\n```\n\n응답 규칙:\n- intent: 위 9개 카테고리 중 하나 (대문자_언더스코어 형식)\n- confidence: 0.0~1.0 (0.8 이상이면 매우 확실, 0.5 미만이면 불확실)\n- keywords: 추출된 주요 키워드 목록\n- sub_intents: 복합 질문일 경우 부가적인 의도들\n- is_compound: 복합 질문 여부 (true/false)\n- decomposed_tasks: 복합 질문을 분해한 개별 작업들\n- entities: 추출된 엔티티 정보\n- reasoning: **반드시 CoT 5단계를 거쳐 분석한 과정을 포함** (구조 파악 → 유형 판단 → 복잡도 평가 → 필요 처리 → 최종 검증)\n\n## reasoning 작성 예시:\n"1단계(구조): 상황 설명(10년 거주, 3억→10억) + 해결책 요청 포함.\n2단계(유형): 해결책 요청형 - 단순 정보가 아닌 대응방안 필요.\n3단계(복잡도): 고 - 구체적 수치 비교와 복잡한 상황.\n4단계(처리): 법률 검색 + 상황 분석 + 해결책 제시 필요.\n5단계(검증): LEGAL_CONSULT만으로는 불충분, 종합적 분석 필요 → COMPREHENSIVE 선택"\n\n## 판단 가이드:\n- 여러 의도가 섞여있다면, 가장 주된 의도를 intent에, 나머지를 sub_intents에 기록\n- "그리고", "또한", "함께", "같이" 등의 연결어가 있으면 복합 질문일 가능성 높음\n- 법률 관련 키워드가 있으면 LEGAL_CONSULT 우선\n- 가격/시세 언급이 명확하면 MARKET_INQUIRY\n- 계약서라는 단어와 함께 "작성/만들기"가 있으면 CONTRACT_CREATION\n- 계약서라는 단어와 함께 "검토/확인"이 있으면 CONTRACT_REVIEW\n- 불확실하면 confidence를 낮게 설정하고 UNCLEAR 선택\n- 복합 질문은 is_compound를 true로 설정하고 개별 작업으로 분해\n\n분석할 질문: 보증금 반환 보증 가입 방법은?'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 15:55:50,284 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 15:55:50,284 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 15:55:50,284 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 15:55:50,284 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 15:55:50,284 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 15:55:50,284 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 15:55:54,954 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 06:55:54 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'4347'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'4379'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9992'), (b'x-ratelimit-remaining-tokens', b'197245'), (b'x-ratelimit-reset-requests', b'1m0.59s'), (b'x-ratelimit-reset-tokens', b'826ms'), (b'x-request-id', b'req_0f878eb3a2404ce3aa7cec3a8e314d9f'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b04032b8c3091-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 15:55:54,955 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 15:55:54,955 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 15:55:54,955 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 15:55:54,956 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 15:55:54,956 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 15:55:54,956 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 06:55:54 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '4347', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '4379', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9992', 'x-ratelimit-remaining-tokens': '197245', 'x-ratelimit-reset-requests': '1m0.59s', 'x-ratelimit-reset-tokens': '826ms', 'x-request-id': 'req_0f878eb3a2404ce3aa7cec3a8e314d9f', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b04032b8c3091-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 15:55:54,956 - openai._base_client - DEBUG - request_id: req_0f878eb3a2404ce3aa7cec3a8e314d9f
2025-10-05 15:55:54,957 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: intent_analysis | Model: gpt-4o-mini-2024-07-18 | Tokens: 3379 (prompt: 3179, completion: 200)
2025-10-05 15:55:54,957 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM Intent Analysis Result: {'intent': 'LEGAL_CONSULT', 'confidence': 0.85, 'keywords': ['보증금', '반환', '보증', '가입', '방법'], 'sub_intents': [], 'is_compound': False, 'decomposed_tasks': [], 'entities': {'action_verbs': ['가입', '방법']}, 'reasoning': '1단계(구조): 단순 정보 요청으로 보증금 반환 보증 가입 방법에 대한 질문. 2단계(유형): 정보 확인형 - 가입 방법에 대한 사실 확인 필요. 3단계(복잡도): 저 - 단일 개념 확인. 4단계(처리): 보증금 반환 보증 가입 방법에 대한 정보 검색 필요. 5단계(검증): 단순 정보 제공으로 충분하므로 LEGAL_CONSULT로 분류.'}
2025-10-05 15:55:54,957 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-0b191381-df6d-4beb-8e9b-efc0a660033c', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 Agent 선택 전문가입니다.\n사용자의 요청에 가장 적합한 Agent/Team을 선택하는 것이 목표입니다.\n\n## 현재 상황\n\n**사용자 질문:** 보증금 반환 보증 가입 방법은?\n**분석된 의도:** 법률상담\n**추출된 키워드:** [\'보증금\', \'반환\', \'보증\', \'가입\', \'방법\']\n\n## 사용 가능한 Agent/Team 정보\n\n{\'search_team\': {\'name\': \'search_team\', \'capabilities\': \'법률 검색, 부동산 시세 조회, 대출 상품 검색\', \'tools\': [\'legal_search\', \'market_data\', \'loan_data\'], \'use_cases\': [\'법률 상담\', \'시세 조회\', \'대출 정보\']}, \'analysis_team\': {\'name\': \'analysis_team\', \'capabilities\': \'데이터 분석, 리스크 평가, 인사이트 생성, 추천\', \'tools\': [\'data_analyzer\', \'risk_evaluator\'], \'use_cases\': [\'시장 분석\', \'리스크 평가\', \'투자 분석\']}, \'document_team\': {\'name\': \'document_team\', \'capabilities\': \'계약서 작성, 문서 생성, 문서 검토\', \'tools\': [\'document_generator\', \'contract_reviewer\'], \'use_cases\': [\'계약서 작성\', \'문서 검토\']}}\n\n## Agent 역할 및 상세 가이드\n\n### 1. search_team (검색 팀)\n- **주요 기능**: 정보 검색 및 데이터 수집\n- **전문 분야**:\n  * 법률 정보 검색 (전세법, 임대차보호법, 부동산 관련 법규)\n  * 부동산 시세 조회 (매매가, 전세가, 월세, 실거래가)\n  * 대출 상품 정보 검색 (금리, 한도, 조건)\n  * 지역 정보 및 인프라 조회\n- **도구**: legal_search, market_data, loan_data\n- **적합한 작업**: 정보 조회, 데이터 수집, 법률 확인, 시세 파악\n- **예시**:\n  * "전세금 5% 인상 가능한가요?"\n  * "강남구 아파트 전세 시세"\n  * "전세자금대출 한도 얼마?"\n\n### 2. analysis_team (분석 팀)\n- **주요 기능**: 데이터 분석 및 평가\n- **전문 분야**:\n  * 시장 동향 분석 (상승률, 하락률, 추세)\n  * 리스크 평가 (계약, 투자 위험도)\n  * 투자 수익률 계산 (ROI, 월세 수익률)\n  * 대출 한도 및 조건 분석 (LTV, DTI, DSR)\n  * 비교 분석 (지역별, 상품별)\n- **도구**: data_analyzer, risk_evaluator, calculator\n- **적합한 작업**: 데이터 분석, 리스크 평가, 계산, 비교, 예측\n- **의존성**: 보통 search_team의 데이터가 필요\n- **예시**:\n  * "이 지역 투자 가치 분석해줘"\n  * "계약 리스크 평가해줘"\n  * "대출 가능 금액 계산해줘"\n\n### 3. document_team (문서 팀)\n- **주요 기능**: 문서 생성 및 관리\n- **전문 분야**:\n  * 계약서 작성 (임대차, 매매, 전세)\n  * 문서 템플릿 관리\n  * 특약사항 생성\n  * 계약서 수정안 작성\n  * 법률 문서 검토\n- **도구**: document_generator, contract_template, contract_reviewer\n- **적합한 작업**: 문서 작성, 계약서 생성, 문서 수정, 검토\n- **예시**:\n  * "임대차계약서 작성해줘"\n  * "특약사항 추가해줘"\n  * "계약서 수정안 만들어줘"\n\n## Chain-of-Thought Agent 선택 프로세스\n\n다음 단계를 **순서대로** 따라 최적의 Agent 조합을 선택하세요:\n\n### 1단계: 질문 요구사항 파악\n- 단순 정보 조회인가? → search_team만 필요\n- 판단/평가가 필요한가? → search + analysis 필요\n- 해결책 제시가 필요한가? → search + analysis 필요\n- 문서 생성이 필요한가? → document_team 추가\n\n### 2단계: 작업 복잡도 판단\n- **단순** (검색만): "~이 뭐야?", "~알려줘" → search_team\n- **중간** (검색+판단): "~괜찮아?", "~적절해?" → search + analysis\n- **복잡** (종합 해결): 구체적 상황 + "어떻게 해야 해?" → search + analysis\n\n### 3단계: 의존성 분석\n- 독립적 작업: 단일 팀으로 처리 가능\n- 순차적 의존: 이전 결과 필요 → 여러 팀 순서대로\n- 병렬 가능: 동시 조회 가능 → coordination: "parallel"\n\n### 4단계: 최종 검증\n- 선택한 팀들로 질문에 완전히 답변 가능한가?\n- 불필요한 팀이 포함되지 않았는가?\n- 순서가 논리적인가? (데이터 흐름 고려)\n\n### 중요 원칙:\n- **법률 키워드만으로 판단하지 말 것**: "법적으로 어떻게 해야 해?" = 법률 검색 + 분석 필요\n- **상황 설명 + 해결책 요청** = 반드시 analysis_team 포함\n- **구체적 수치 비교** (3억→10억 같은) = analysis_team 필요\n\n## 의도별 Agent 매핑 가이드 (기본 가이드 - CoT로 조정 가능)\n\n| 의도 (Intent) | 기본 조합 | 상황별 조정 |\n|--------------|-----------|-------------|\n| LEGAL_CONSULT | ["search_team"] | 해결책 요청시 → + analysis_team |\n| MARKET_INQUIRY | ["search_team"] | 비교/평가시 → + analysis_team |\n| LOAN_CONSULT | ["search_team", "analysis_team"] | 계산 필수 |\n| CONTRACT_CREATION | ["document_team"] | 검토 후 작성 → search + document |\n| CONTRACT_REVIEW | ["search_team", "analysis_team"] | 법률 검토 + 리스크 분석 |\n| COMPREHENSIVE | ["search_team", "analysis_team"] | **항상 분석 포함** |\n| RISK_ANALYSIS | ["analysis_team"] | 법률 근거 필요시 → search + analysis |\n| UNCLEAR | ["search_team", "analysis_team"] | 포괄적 대응 |\n\n**중요**: 위 매핑은 **기본 가이드**일 뿐입니다.\n실제 질문의 내용(CoT 분석 결과)에 따라 조정하세요!\n\n## 복합 질문 처리 예시 (CoT 적용)\n\n### 예시 1: 순차적 처리\n질문: "강남구 시세 확인하고 투자 가치 분석해줘"\n**CoT 분석**:\n1. 요구사항: 시세 조회 + 투자 가치 평가\n2. 복잡도: 중간 (검색 + 분석)\n3. 의존성: 시세 데이터 → 투자 분석 (순차)\n4. 검증: search만으로는 "투자 가치 평가" 불가능\n\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "1단계: 시세 조회+투자 평가 필요. 2단계: 중간 복잡도. 3단계: 순차 의존. 4단계: search로 시세 수집 후 analysis로 투자 가치 평가 필요",\n    "coordination": "sequential"\n}\n```\n\n### 예시 2: 단순 정보 조회\n질문: "전세금 인상률 한도가 얼마야?"\n**CoT 분석**:\n1. 요구사항: 단순 사실 확인\n2. 복잡도: 낮음 (정보 확인형)\n3. 의존성: 없음\n4. 검증: search_team만으로 충분\n\n```json\n{\n    "selected_agents": ["search_team"],\n    "reasoning": "1단계: 단순 정보 조회. 2단계: 저복잡도. 3단계: 독립적. 4단계: 법률 검색만으로 답변 가능",\n    "coordination": "single"\n}\n```\n\n### 예시 3: 해결책 요청 (핵심 예시!)\n질문: "집주인이 전세금 3억을 10억으로 올려달래. 법적으로 어떻게 해야 해?"\n의도: COMPREHENSIVE\n**CoT 분석**:\n1. 요구사항: 상황 설명 + 해결책 요청\n2. 복잡도: 높음 (구체적 상황 + 수치 비교)\n3. 의존성: 법률 확인 → 상황 분석 → 해결책 제시\n4. 검증: "법적으로"만 보고 search만 선택하면 불충분! 해결책 제시 필요\n\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "1단계: 법률 + 상황 분석 + 해결책 필요. 2단계: 고복잡도(3억→10억 비정상). 3단계: 순차(법률 확인 후 타당성 분석). 4단계: \'어떻게 해야\' = 단순 법률 조회 아님, 분석 필수",\n    "coordination": "sequential",\n    "confidence": 0.95\n}\n```\n\n## 응답 형식 (JSON)\n\n```json\n{\n    "selected_agents": ["선택된 agent/team 목록"],\n    "reasoning": "선택 이유를 구체적으로 설명. 각 Agent의 역할과 처리 순서 포함",\n    "coordination": "single/sequential/parallel/pipeline",\n    "dependencies": {"agent2": ["agent1"]},\n    "estimated_time": 30,\n    "confidence": 0.9\n}\n```\n\n## 선택 가이드라인\n\n1. **최소 Agent 원칙**: 가능한 적은 수의 Agent로 처리\n2. **전문성 우선**: 해당 작업에 가장 전문적인 Agent 선택\n3. **효율성 고려**: 병렬 처리 가능한 경우 명시\n4. **의존성 관리**: 데이터 흐름을 고려한 순서 지정\n5. **폴백 전략**: 불확실한 경우 ["search_team", "analysis_team"] 조합\n\n## 주의사항\n\n- selected_agents는 반드시 배열 형태\n- Agent 이름은 정확히: "search_team", "analysis_team", "document_team"\n- 최소 1개, 최대 3개 선택\n- 순서는 실행 우선순위 (앞에 있을수록 먼저 실행)\n- reasoning은 상세하고 논리적으로 작성\n- coordination 필드로 실행 방식 명시\n- 복합 질문의 경우 의존성 관계 명확히 표시'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 15:55:54,958 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 15:55:54,958 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 15:55:54,958 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 15:55:54,958 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 15:55:54,958 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 15:55:54,958 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 15:56:00,115 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 06:56:00 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'4956'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'4969'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9992'), (b'x-ratelimit-remaining-tokens', b'197887'), (b'x-ratelimit-reset-requests', b'1m4.575s'), (b'x-ratelimit-reset-tokens', b'633ms'), (b'x-request-id', b'req_f65d18a7ab6049b88b7214326fcb98e4'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b042059b93091-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 15:56:00,115 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 15:56:00,115 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 15:56:00,116 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 15:56:00,116 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 15:56:00,116 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 15:56:00,116 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 06:56:00 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '4956', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '4969', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9992', 'x-ratelimit-remaining-tokens': '197887', 'x-ratelimit-reset-requests': '1m4.575s', 'x-ratelimit-reset-tokens': '633ms', 'x-request-id': 'req_f65d18a7ab6049b88b7214326fcb98e4', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b042059b93091-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 15:56:00,116 - openai._base_client - DEBUG - request_id: req_f65d18a7ab6049b88b7214326fcb98e4
2025-10-05 15:56:00,117 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: agent_selection | Model: gpt-4o-mini-2024-07-18 | Tokens: 2551 (prompt: 2361, completion: 190)
2025-10-05 15:56:00,117 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM agent selection reasoning: 1단계: 사용자는 보증금 반환 보증 가입 방법에 대한 법률 상담을 요청하고 있습니다. 이는 단순한 정보 조회가 아니라 법률적 상황에 대한 분석과 해결책 제시가 필요합니다. 2단계: 복잡도는 높습니다. 법률 정보 검색 후, 그에 대한 분석이 필요합니다. 3단계: 법률 정보를 검색한 후, 그 정보를 바탕으로 분석팀이 상황을 평가하고 해결책을 제시해야 합니다. 4단계: 단순 법률 조회로는 충분하지 않으며, 분석이 필수적입니다.
2025-10-05 15:56:00,117 - app.service_agent.cognitive_agents.planning_agent - INFO - ✅ Primary LLM selected agents: ['search_team', 'analysis_team']
2025-10-05 15:56:00,117 - __main__ - INFO -   의도: 법률상담
2025-10-05 15:56:00,117 - __main__ - INFO -   신뢰도: 0.85
2025-10-05 15:56:00,117 - __main__ - INFO -   추천 Agent: ['search_team', 'analysis_team']
2025-10-05 15:56:00,117 - __main__ - INFO - 
[Step 2] Query Decomposition...
2025-10-05 15:56:00,117 - app.service_agent.cognitive_agents.query_decomposer - INFO - Decomposing query: 보증금 반환 보증 가입 방법은?...
2025-10-05 15:56:00,117 - app.service_agent.cognitive_agents.query_decomposer - DEBUG - Found solution request indicator: 방법
2025-10-05 15:56:00,117 - app.service_agent.llm_manager.prompt_manager - DEBUG - Loaded prompt template: query_decomposition from C:\kdy\Projects\holmesnyangz\beta_v001\backend\app\service_agent\llm_manager\prompts\cognitive\query_decomposition.txt
2025-10-05 15:56:00,118 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-5dd0f256-accc-4a8c-b942-1bf4b8fa22fa', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 질문 분해 전문가입니다.\n복잡한 사용자 질문을 독립적으로 처리 가능한 작업 단위로 분해하는 것이 목표입니다.\n\n## Chain-of-Thought 분해 프로세스:\n\n### 1단계: 복합 질문 여부 판단\n- 단순 정보 조회만 필요한가? → is_compound: false\n- **다음 중 하나라도 해당하면 is_compound: true**:\n  * "그리고", "그 다음", "한 후" 같은 연결어로 여러 요청 연결\n  * 명시적으로 2개 이상의 작업 요청 (예: "시세 확인하고 대출 계산해줘")\n  * 상황 설명 + 해결책 요청 (예: "3억→10억 올려달래. 어떻게 해야 해?")\n  * 해결책을 위해 여러 단계 처리 필요 (검색 → 분석 → 제안)\n\n### 2단계: 필요 작업 식별\n- 정보 수집이 필요한가? → search 작업\n- 평가/판단이 필요한가? → analysis 작업\n- 문서 생성이 필요한가? → generation 작업\n- **해결책 요청**인가? → search + analysis (최소 2개)\n\n### 3단계: 작업 순서 결정\n- 독립적 작업: 병렬 가능\n- 이전 결과 필요: 순차 실행 (depends_on 설정)\n\n## 중요 원칙:\n1. 각 작업은 하나의 명확한 목표를 가져야 합니다\n2. 작업 간 의존성을 명확히 파악해야 합니다\n3. 병렬 처리 가능한 작업은 구분해야 합니다\n4. **주의**: "어떻게 해야", "방법 알려줘" 같은 해결책 요청은 복합 질문!\n\n## 작업 유형 (type):\n- search: 정보 검색 (법률, 시세, 대출 정보 등)\n- analysis: 데이터 분석 (리스크 평가, 시장 분석 등)\n- generation: 문서 생성 (계약서 작성 등)\n- review: 검토/평가 (계약서 검토, 조건 확인 등)\n- calculation: 계산/산출 (대출 한도, 세금 등)\n- comparison: 비교 분석 (여러 옵션 비교)\n\n## 담당 팀 (agent):\n- search_team: 법률, 시세, 대출 정보 검색\n- analysis_team: 데이터 분석, 리스크 평가, 계산\n- document_team: 문서 생성, 계약서 작성\n\n## 학습 예시:\n\n### 예시 1: 복합 질문 (순차적)\n질문: "강남구 아파트 시세 확인하고 대출 가능 금액 계산해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "강남구 아파트 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "대출 가능 금액 계산",\n            "type": "calculation",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "required_data": {"price": "task_0.result.price"},\n            "estimated_time": 15\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "시세 정보가 있어야 대출 금액 계산이 가능하므로 순차 실행"\n}\n```\n\n### 예시 2: 복합 질문 (병렬 가능)\n질문: "이 지역 전세 시세와 매매 시세 모두 알려주고 비교 분석해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "전세 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "매매 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "전세/매매 시세 비교 분석",\n            "type": "comparison",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0", "task_1"],\n            "required_data": {\n                "lease_price": "task_0.result",\n                "sale_price": "task_1.result"\n            },\n            "estimated_time": 25\n        }\n    ],\n    "execution_mode": "mixed",\n    "parallel_groups": [["task_0", "task_1"], ["task_2"]],\n    "reasoning": "시세 조회는 독립적이므로 병렬 처리, 비교는 두 결과 필요"\n}\n```\n\n### 예시 3: 복합 질문 (3단계 이상)\n질문: "이 계약서 검토해서 위험한 부분 찾고 수정안 만들어서 최종 계약서 작성해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "계약서 내용 전체 검토",\n            "type": "review",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 30\n        },\n        {\n            "description": "위험 요소 및 문제점 분석",\n            "type": "analysis",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "estimated_time": 25\n        },\n        {\n            "description": "수정안 제안 생성",\n            "type": "generation",\n            "agent": "document_team",\n            "priority": 3,\n            "depends_on": ["task_1"],\n            "estimated_time": 20\n        },\n        {\n            "description": "최종 계약서 작성",\n            "type": "generation",\n            "agent": "document_team",\n            "priority": 4,\n            "depends_on": ["task_2"],\n            "estimated_time": 30\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "각 단계가 이전 결과에 의존하므로 순차 실행 필요"\n}\n```\n\n### 예시 4: 단순 질문 (분해 불필요)\n질문: "전세금 인상률 상한이 얼마야?"\n분해:\n```json\n{\n    "is_compound": false,\n    "sub_tasks": [\n        {\n            "description": "전세금 인상률 상한 법률 정보 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 15\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "단일 정보 조회 요청으로 분해 불필요"\n}\n```\n\n### 예시 5: 조건부 실행\n질문: "이 물건 시세 확인하고 적정가면 대출 상담도 받고 싶어"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "물건 시세 조회 및 적정성 평가",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 25\n        },\n        {\n            "description": "대출 상담 정보 제공",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "optional": true,\n            "context": {"condition": "if_reasonable_price"},\n            "estimated_time": 20\n        }\n    ],\n    "execution_mode": "conditional",\n    "reasoning": "시세 확인 결과에 따라 대출 상담 진행 여부 결정"\n}\n```\n\n### 예시 6: 상황 설명 + 해결책 요청 (핵심 패턴!)\n질문: "집주인이 전세금 3억을 10억으로 올려달래. 법적으로 어떻게 해야 해?"\n**CoT 분석**:\n1. 질문 분석: 상황 설명 + 해결책 요청\n2. 연결어: 없지만, "어떻게 해야" = 해결책 요청\n3. 의존성: 법률 확인 → 상황 분석 → 대응 방안\n4. 복합 여부: **YES** (해결책을 위해 여러 단계 필요)\n\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "전세금 인상 한도 관련 법률 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "3억→10억 인상의 법적 타당성 및 적정성 분석",\n            "type": "analysis",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "required_data": {"legal_limit": "task_0.result", "current": 300000000, "requested": 1000000000},\n            "estimated_time": 25\n        },\n        {\n            "description": "구체적 대응 방안 및 해결책 제시",\n            "type": "analysis",\n            "agent": "analysis_team",\n            "priority": 3,\n            "depends_on": ["task_1"],\n            "estimated_time": 20\n        }\n    ],\n    "execution_mode": "sequential",\n    "confidence": 0.95,\n    "reasoning": "상황 설명+해결책 요청 패턴. \'어떻게 해야\'는 단순 정보 조회가 아닌 종합 해결책 필요. 법률 조회 → 상황 분석 → 해결책 제시 3단계 순차 처리"\n}\n```\n\n## Chain-of-Thought 프로세스:\n\n1. **질문 분석**: 어떤 정보나 작업을 요구하는가?\n2. **연결어 확인**: "그리고", "또한", "해서", "한 후" 등이 있는가?\n3. **의존성 파악**: 어떤 작업이 다른 작업의 결과를 필요로 하는가?\n4. **병렬성 판단**: 독립적으로 실행 가능한 작업이 있는가?\n5. **최적화**: 불필요한 분해는 없는가?\n\n## 응답 형식 (JSON):\n\n{\n    "is_compound": true/false,\n    "sub_tasks": [\n        {\n            "description": "작업 설명",\n            "type": "작업 유형",\n            "agent": "담당 팀",\n            "priority": 우선순위 (1이 가장 높음),\n            "depends_on": ["선행 작업 ID 리스트"],\n            "required_data": {"필요한 데이터 매핑"},\n            "estimated_time": 예상 소요 시간(초),\n            "optional": true/false,\n            "context": {"추가 컨텍스트"}\n        }\n    ],\n    "execution_mode": "sequential/parallel/mixed/conditional",\n    "parallel_groups": [["병렬 실행 가능한 작업 ID 그룹"]],\n    "confidence": 0.0-1.0,\n    "reasoning": "분해 결정의 이유와 근거"\n}\n\n## 분해 가이드라인:\n\n1. **분해가 필요한 경우**:\n   - 여러 종류의 정보를 요청하는 경우\n   - 순차적 처리가 필요한 경우 (A의 결과로 B 수행)\n   - 서로 다른 팀의 전문성이 필요한 경우\n\n2. **분해가 불필요한 경우**:\n   - 단일 정보 조회\n   - 단순한 질문-답변\n   - 하나의 팀에서 완전히 처리 가능한 경우\n\n3. **병렬 처리 기준**:\n   - 서로 독립적인 정보 조회\n   - 의존성이 없는 분석 작업\n   - 동시에 진행해도 충돌하지 않는 작업\n\n4. **우선순위 설정**:\n   - 의존성이 없는 작업: priority 1\n   - 1차 의존 작업: priority 2\n   - 2차 의존 작업: priority 3\n   - 이런 식으로 증가\n\n현재 의도: 법률상담\n추출된 엔티티: None\n\n분석할 질문: 보증금 반환 보증 가입 방법은?'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 15:56:00,118 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 15:56:00,118 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 15:56:00,118 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 15:56:00,118 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 15:56:00,119 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 15:56:00,119 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 15:56:02,289 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 06:56:02 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'1956'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'1981'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9992'), (b'x-ratelimit-remaining-tokens', b'197339'), (b'x-ratelimit-reset-requests', b'1m8.048s'), (b'x-ratelimit-reset-tokens', b'798ms'), (b'x-request-id', b'req_f60d1f34f13945809c7715a20fc46c70'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b044099693091-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 15:56:02,289 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 15:56:02,290 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 15:56:02,296 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 15:56:02,296 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 15:56:02,296 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 15:56:02,296 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 06:56:02 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '1956', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '1981', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9992', 'x-ratelimit-remaining-tokens': '197339', 'x-ratelimit-reset-requests': '1m8.048s', 'x-ratelimit-reset-tokens': '798ms', 'x-request-id': 'req_f60d1f34f13945809c7715a20fc46c70', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b044099693091-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 15:56:02,296 - openai._base_client - DEBUG - request_id: req_f60d1f34f13945809c7715a20fc46c70
2025-10-05 15:56:02,296 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: query_decomposition | Model: gpt-4o-mini-2024-07-18 | Tokens: 2792 (prompt: 2689, completion: 103)
2025-10-05 15:56:02,297 - app.service_agent.cognitive_agents.query_decomposer - INFO - Successfully decomposed into 1 tasks
2025-10-05 15:56:02,297 - __main__ - INFO -   복합 질문: True
2025-10-05 15:56:02,297 - __main__ - INFO -   작업 수: 1
2025-10-05 15:56:02,297 - __main__ - INFO -   실행 모드: parallel
2025-10-05 15:56:02,297 - __main__ - INFO - 
[Step 3] Execution Plan 생성...
2025-10-05 15:56:02,297 - app.service_agent.cognitive_agents.planning_agent - INFO - Creating execution plan for intent: 법률상담
2025-10-05 15:56:02,297 - app.service_agent.cognitive_agents.planning_agent - WARNING - AgentRegistry is empty, using default teams
2025-10-05 15:56:02,297 - app.service_agent.cognitive_agents.planning_agent - DEBUG - Suggested agents: ['search_team', 'analysis_team']
2025-10-05 15:56:02,297 - app.service_agent.cognitive_agents.planning_agent - DEBUG - Available agents: ['search_team', 'analysis_team', 'document_team']
2025-10-05 15:56:02,297 - app.service_agent.cognitive_agents.planning_agent - INFO - Selected agents/teams for execution: ['search_team', 'analysis_team']
2025-10-05 15:56:02,297 - __main__ - INFO -   전략: sequential
2025-10-05 15:56:02,297 - __main__ - INFO -   단계 수: 2
2025-10-05 15:56:02,297 - __main__ - INFO - 
✓ 테스트 성공 (소요시간: 12.01초)
2025-10-05 15:56:02,297 - __main__ - INFO - 
================================================================================
2025-10-05 15:56:02,297 - __main__ - INFO - [9] 단일 질문 테스트: S009
2025-10-05 15:56:02,297 - __main__ - INFO - 질문: 송파구 아파트 가격 동향 알려주세요
2025-10-05 15:56:02,297 - __main__ - INFO - ================================================================================
2025-10-05 15:56:02,297 - __main__ - INFO - 
[Step 1] Intent 분석...
2025-10-05 15:56:02,297 - app.service_agent.cognitive_agents.planning_agent - INFO - Analyzing intent for query: 송파구 아파트 가격 동향 알려주세요...
2025-10-05 15:56:02,298 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-6fb64abc-450f-4851-be54-7937b6b3c450', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 의도 분석 전문가입니다.\n사용자의 질문을 정확히 이해하고, 어떤 종류의 도움이 필요한지 분류해야 합니다.\n\n## Chain-of-Thought 분석 프로세스\n\n질문을 분석할 때 다음 단계를 **순서대로** 따르세요:\n\n### 1단계: 질문 구조 파악\n- 단순 정보 요청인가? (예: "~이 뭐야?", "~알려줘")\n- 상황 설명이 포함되어 있는가? (배경, 현재 상태)\n- 구체적 수치나 데이터가 있는가? (금액, 비율, 기간 등)\n- 문제 해결을 요구하는가? (예: "어떻게 해야 해?", "방법 알려줘")\n\n### 2단계: 요청 유형 판단\n- **정보 확인형**: 사실, 개념, 규정 확인 → 검색만으로 충분\n- **평가/판단형**: "괜찮아?", "적절해?", "문제있어?" → 검색 + 분석 필요\n- **해결책 요청형**: "어떻게?", "방법?", "대처?" → 검색 + 분석 + 제안 필요\n- **비교/선택형**: "A vs B", "어느게 나아?" → 검색 + 분석(비교) 필요\n\n### 3단계: 복잡도 평가\n- **저**: 단일 개념/사실 확인 (예: "전세금 인상률 한도?")\n- **중**: 특정 상황 + 판단 (예: "3억을 5억으로 올려달래. 가능해?")\n- **고**: 복잡한 상황 + 여러 조건 + 해결책 (예: "10년 거주, 3억→10억 요구. 어떻게 해야 해?")\n\n### 4단계: 필요한 처리 결정\n- **검색만**: 정보 확인형 + 저복잡도\n- **검색+분석**: 평가/판단형 OR 중복잡도 OR 수치 비교 포함\n- **종합처리**: 해결책 요청형 OR 고복잡도 OR 여러 조건 동시 고려\n\n### 5단계: 최종 검증\n- 선택한 의도로 사용자 질문에 완전히 답변 가능한가?\n- 단순 정보 제공으로 끝나는가, 아니면 추가 분석/판단이 필요한가?\n- 상황 설명이 있으면서 "해결", "방법", "어떻게" 등이 있으면 → COMPREHENSIVE 고려\n\n## 중요: 복합 질문 처리\n복합적인 질문(여러 의도가 섞인 질문)의 경우, 가장 핵심적인 의도를 파악하되,\nsub_intents 필드에 부가적인 의도들도 함께 기록해주세요.\n\n**특히 주의**:\n- 법률 키워드가 있어도, "해결방법", "어떻게 해야" 같은 표현이 있으면 단순 LEGAL_CONSULT가 아닐 수 있음\n- 구체적 상황(금액, 기간 등) + 해결책 요구 = COMPREHENSIVE 또는 복합 의도로 분류\n\n## 분류 카테고리 설명:\n\n1. **LEGAL_CONSULT (법률상담)**\n   - 설명: 부동산 관련 법률, 권리, 의무에 대한 질문\n   - 예시:\n     * 단순: "전세금 5% 인상이 가능한가요?", "임대차계약 갱신 거부할 수 있나요?"\n     * 복합: "전세금 인상 가능한지 확인하고 법적 근거도 알려주세요"\n   - 키워드: 법, 전세, 임대, 보증금, 계약, 권리, 의무, 갱신, 임차인, 임대인, 법률, 규정, 조항\n   - 필요한 처리: 법률 데이터베이스 검색, 관련 법조항 찾기\n\n2. **MARKET_INQUIRY (시세조회)**\n   - 설명: 부동산 시장 가격, 시세, 거래 동향에 대한 질문\n   - 예시:\n     * 단순: "강남구 아파트 전세 시세 알려주세요", "서초동 매매가 얼마나 올랐나요?"\n     * 복합: "강남구 시세 확인하고 대출 가능 금액도 계산해줘"\n   - 키워드: 시세, 가격, 매매가, 전세가, 월세, 시장, 동향, 평균, 지역명, 상승률, 하락률\n   - 필요한 처리: 부동산 시세 데이터 조회, 지역별 가격 분석\n\n3. **LOAN_CONSULT (대출상담)**\n   - 설명: 주택담보대출, 전세자금대출 등 금융 관련 질문\n   - 예시:\n     * 단순: "전세자금대출 한도가 얼마인가요?", "LTV가 뭔가요?"\n     * 복합: "대출 한도 확인하고 금리 비교도 해주세요"\n   - 키워드: 대출, 금리, 한도, 조건, 상환, LTV, DTI, DSR, 담보, 금융, 은행\n   - 필요한 처리: 대출 상품 조회, 금리 정보 검색, 한도 계산\n\n4. **CONTRACT_CREATION (계약서작성)**\n   - 설명: 새로운 계약서나 문서를 작성해달라는 요청\n   - 예시:\n     * 단순: "임대차계약서 작성해주세요", "전세계약서 초안 만들어주세요"\n     * 복합: "계약서 작성하고 주의사항도 검토해주세요"\n   - 키워드: 작성, 만들, 생성, 초안, 계약서, 문서, 양식\n   - 필요한 처리: 문서 생성 에이전트 호출, 템플릿 기반 작성\n\n5. **CONTRACT_REVIEW (계약서검토)**\n   - 설명: 기존 계약서나 문서를 검토해달라는 요청\n   - 예시:\n     * 단순: "이 계약서 검토해주세요", "특약사항 문제없나요?"\n     * 복합: "계약서 검토하고 수정사항도 제안해주세요"\n   - 키워드: 검토, 확인, 점검, 리뷰, 분석해, 살펴봐, 체크\n   - 필요한 처리: 문서 분석, 위험 요소 식별, 개선사항 제안\n\n6. **COMPREHENSIVE (종합분석)**\n   - 설명: 여러 측면을 종합적으로 분석해달라는 요청, 또는 복잡한 상황에 대한 해결책 요청\n   - 예시:\n     * 단순: "이 물건 전체적으로 분석해주세요"\n     * 복합: "시세, 법률, 대출 모두 검토해서 종합 의견 주세요"\n     * 해결형: "10년 거주했는데 전세금 3억을 10억으로 올려달래. 어떻게 해야 해?"\n     * 상황+해결: "집주인이 계약 갱신 거부했어. 법적으로 어떻게 대응해야 할까?"\n   - 키워드: 종합, 전체, 모든, 전반적, 종합적, 평가, 분석, 어떻게, 방법, 해결, 대처\n   - 패턴: 구체적 상황 설명 + "어떻게/방법/해결" 요청\n   - 필요한 처리: 다중 데이터 소스 통합 분석, 상황 평가, 해결책 제시\n\n7. **RISK_ANALYSIS (리스크분석)**\n   - 설명: 위험 요소나 주의사항에 대한 질문\n   - 예시:\n     * 단순: "이 계약 위험한가요?", "주의할 점 알려주세요"\n     * 복합: "리스크 분석하고 대안도 제시해주세요"\n   - 키워드: 위험, 리스크, 주의, 문제점, 조심, 걱정, 우려\n   - 필요한 처리: 위험 요소 분석, 주의사항 추출\n\n8. **UNCLEAR (불분명)**\n   - 설명: 의도를 명확히 파악하기 어려운 질문\n   - 예시: "이거 좀 봐주세요", "어떻게 해야 할까요?", "도와주세요"\n   - 처리: 추가 질문으로 의도 명확화 필요\n\n9. **IRRELEVANT (무관)**\n   - 설명: 부동산과 전혀 관련 없는 질문\n   - 예시: "날씨 어때?", "저녁 뭐 먹지?", "주식 추천해줘"\n   - 처리: 부동산 관련 질문을 유도\n\n## 복합 질문 예시와 분석 (CoT 적용):\n\n### 예시 1: "강남구 아파트 시세 알려주고 전세자금대출 가능한지도 확인해줘"\n**CoT 분석**:\n1. 구조: 두 개의 요청 ("시세" + "대출")\n2. 유형: 정보 확인형 (둘 다)\n3. 복잡도: 중 (두 가지 독립적 조회)\n4. 필요 처리: 검색 + 계산/분석\n\n**결론**:\n- 주 의도: MARKET_INQUIRY (시세 조회가 먼저 필요)\n- 부가 의도: LOAN_CONSULT (대출 확인)\n- 분해: ["강남구 아파트 시세 조회", "전세자금대출 가능 여부 확인"]\n\n### 예시 2: "이 계약서 검토해서 위험한 부분 있는지 알려주고 수정 제안도 해줘"\n**CoT 분석**:\n1. 구조: 검토 + 위험 평가 + 수정안\n2. 유형: 평가/판단형 + 해결책 요청형\n3. 복잡도: 고 (3단계 처리)\n4. 필요 처리: 검토 + 분석 + 문서 생성\n\n**결론**:\n- 주 의도: CONTRACT_REVIEW (계약서 검토)\n- 부가 의도: RISK_ANALYSIS (위험 분석)\n- 분해: ["계약서 전체 검토", "위험 요소 식별", "수정사항 제안"]\n\n### 예시 3: "집주인이 짜증나, 10년 살았는데 전세금 3억을 10억으로 올려달래. 법적으로 해결방법 알려줘"\n**CoT 분석**:\n1. 구조: 상황 설명 (10년 거주, 3억→10억) + 해결책 요청\n2. 유형: 해결책 요청형 (단순 정보 X)\n3. 복잡도: 고 (구체적 상황 + 수치 비교 + 법률 + 대응방안)\n4. 필요 처리: 법률 검색 + 상황 분석 + 해결책 제시\n\n**결론**:\n- 주 의도: COMPREHENSIVE (복잡한 상황에 대한 종합 해결)\n- 부가 의도: LEGAL_CONSULT, RISK_ANALYSIS\n- 분해: ["전세금 인상 한도 법률 조회", "3억→10억 인상의 타당성 분석", "구체적 대응 방안 제시"]\n- **이유**: "법적으로"라는 키워드가 있지만, 단순 법률 확인이 아니라 구체적 상황에 대한 해결책을 요구하므로 COMPREHENSIVE\n\n### 예시 4: "전세금 인상률 상한이 얼마야?"\n**CoT 분석**:\n1. 구조: 단순 사실 확인\n2. 유형: 정보 확인형\n3. 복잡도: 저 (단일 개념)\n4. 필요 처리: 검색만\n\n**결론**:\n- 주 의도: LEGAL_CONSULT (법률 정보 조회)\n- 부가 의도: 없음\n- 분해: 필요 없음\n\n## 응답 형식 (JSON 형식으로 응답):\n\n```json\n{\n    "intent": "LEGAL_CONSULT",\n    "confidence": 0.9,\n    "keywords": ["전세금", "인상", "제한"],\n    "sub_intents": [],\n    "is_compound": false,\n    "decomposed_tasks": [],\n    "entities": {\n        "location": "강남구",\n        "price": "5억",\n        "contract_type": "전세",\n        "date": "2024년",\n        "area": "84㎡",\n        "action_verbs": ["확인", "검토"]\n    },\n    "reasoning": "전세금 인상에 대한 법률 질문이므로 LEGAL_CONSULT로 분류"\n}\n```\n\n응답 규칙:\n- intent: 위 9개 카테고리 중 하나 (대문자_언더스코어 형식)\n- confidence: 0.0~1.0 (0.8 이상이면 매우 확실, 0.5 미만이면 불확실)\n- keywords: 추출된 주요 키워드 목록\n- sub_intents: 복합 질문일 경우 부가적인 의도들\n- is_compound: 복합 질문 여부 (true/false)\n- decomposed_tasks: 복합 질문을 분해한 개별 작업들\n- entities: 추출된 엔티티 정보\n- reasoning: **반드시 CoT 5단계를 거쳐 분석한 과정을 포함** (구조 파악 → 유형 판단 → 복잡도 평가 → 필요 처리 → 최종 검증)\n\n## reasoning 작성 예시:\n"1단계(구조): 상황 설명(10년 거주, 3억→10억) + 해결책 요청 포함.\n2단계(유형): 해결책 요청형 - 단순 정보가 아닌 대응방안 필요.\n3단계(복잡도): 고 - 구체적 수치 비교와 복잡한 상황.\n4단계(처리): 법률 검색 + 상황 분석 + 해결책 제시 필요.\n5단계(검증): LEGAL_CONSULT만으로는 불충분, 종합적 분석 필요 → COMPREHENSIVE 선택"\n\n## 판단 가이드:\n- 여러 의도가 섞여있다면, 가장 주된 의도를 intent에, 나머지를 sub_intents에 기록\n- "그리고", "또한", "함께", "같이" 등의 연결어가 있으면 복합 질문일 가능성 높음\n- 법률 관련 키워드가 있으면 LEGAL_CONSULT 우선\n- 가격/시세 언급이 명확하면 MARKET_INQUIRY\n- 계약서라는 단어와 함께 "작성/만들기"가 있으면 CONTRACT_CREATION\n- 계약서라는 단어와 함께 "검토/확인"이 있으면 CONTRACT_REVIEW\n- 불확실하면 confidence를 낮게 설정하고 UNCLEAR 선택\n- 복합 질문은 is_compound를 true로 설정하고 개별 작업으로 분해\n\n분석할 질문: 송파구 아파트 가격 동향 알려주세요'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 15:56:02,298 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 15:56:02,299 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 15:56:02,299 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 15:56:02,299 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 15:56:02,299 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 15:56:02,299 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 15:56:06,531 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 06:56:06 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'3855'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'4017'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9991'), (b'x-ratelimit-remaining-tokens', b'197243'), (b'x-ratelimit-reset-requests', b'1m14.339s'), (b'x-ratelimit-reset-tokens', b'827ms'), (b'x-request-id', b'req_20b74c1c80ee486582edae01f89d0d8e'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b044e3f4b3091-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 15:56:06,532 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 15:56:06,532 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 15:56:06,538 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 15:56:06,538 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 15:56:06,538 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 15:56:06,539 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 06:56:06 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '3855', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '4017', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9991', 'x-ratelimit-remaining-tokens': '197243', 'x-ratelimit-reset-requests': '1m14.339s', 'x-ratelimit-reset-tokens': '827ms', 'x-request-id': 'req_20b74c1c80ee486582edae01f89d0d8e', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b044e3f4b3091-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 15:56:06,539 - openai._base_client - DEBUG - request_id: req_20b74c1c80ee486582edae01f89d0d8e
2025-10-05 15:56:06,540 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: intent_analysis | Model: gpt-4o-mini-2024-07-18 | Tokens: 3379 (prompt: 3179, completion: 200)
2025-10-05 15:56:06,540 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM Intent Analysis Result: {'intent': 'MARKET_INQUIRY', 'confidence': 0.95, 'keywords': ['송파구', '아파트', '가격', '동향'], 'sub_intents': [], 'is_compound': False, 'decomposed_tasks': [], 'entities': {'location': '송파구', 'property_type': '아파트', 'action_verbs': ['알려줘']}, 'reasoning': '1단계(구조): 단순 정보 요청으로 가격 동향에 대한 질문. 2단계(유형): 정보 확인형 - 가격 동향에 대한 사실 확인. 3단계(복잡도): 저 - 단일 개념 확인. 4단계(처리): 검색만으로 충분. 5단계(검증): 단순 가격 동향 요청이므로 MARKET_INQUIRY로 분류.'}
2025-10-05 15:56:06,540 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-1dda2fdc-8262-4671-ab72-62e145925be3', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 Agent 선택 전문가입니다.\n사용자의 요청에 가장 적합한 Agent/Team을 선택하는 것이 목표입니다.\n\n## 현재 상황\n\n**사용자 질문:** 송파구 아파트 가격 동향 알려주세요\n**분석된 의도:** 시세조회\n**추출된 키워드:** [\'송파구\', \'아파트\', \'가격\', \'동향\']\n\n## 사용 가능한 Agent/Team 정보\n\n{\'search_team\': {\'name\': \'search_team\', \'capabilities\': \'법률 검색, 부동산 시세 조회, 대출 상품 검색\', \'tools\': [\'legal_search\', \'market_data\', \'loan_data\'], \'use_cases\': [\'법률 상담\', \'시세 조회\', \'대출 정보\']}, \'analysis_team\': {\'name\': \'analysis_team\', \'capabilities\': \'데이터 분석, 리스크 평가, 인사이트 생성, 추천\', \'tools\': [\'data_analyzer\', \'risk_evaluator\'], \'use_cases\': [\'시장 분석\', \'리스크 평가\', \'투자 분석\']}, \'document_team\': {\'name\': \'document_team\', \'capabilities\': \'계약서 작성, 문서 생성, 문서 검토\', \'tools\': [\'document_generator\', \'contract_reviewer\'], \'use_cases\': [\'계약서 작성\', \'문서 검토\']}}\n\n## Agent 역할 및 상세 가이드\n\n### 1. search_team (검색 팀)\n- **주요 기능**: 정보 검색 및 데이터 수집\n- **전문 분야**:\n  * 법률 정보 검색 (전세법, 임대차보호법, 부동산 관련 법규)\n  * 부동산 시세 조회 (매매가, 전세가, 월세, 실거래가)\n  * 대출 상품 정보 검색 (금리, 한도, 조건)\n  * 지역 정보 및 인프라 조회\n- **도구**: legal_search, market_data, loan_data\n- **적합한 작업**: 정보 조회, 데이터 수집, 법률 확인, 시세 파악\n- **예시**:\n  * "전세금 5% 인상 가능한가요?"\n  * "강남구 아파트 전세 시세"\n  * "전세자금대출 한도 얼마?"\n\n### 2. analysis_team (분석 팀)\n- **주요 기능**: 데이터 분석 및 평가\n- **전문 분야**:\n  * 시장 동향 분석 (상승률, 하락률, 추세)\n  * 리스크 평가 (계약, 투자 위험도)\n  * 투자 수익률 계산 (ROI, 월세 수익률)\n  * 대출 한도 및 조건 분석 (LTV, DTI, DSR)\n  * 비교 분석 (지역별, 상품별)\n- **도구**: data_analyzer, risk_evaluator, calculator\n- **적합한 작업**: 데이터 분석, 리스크 평가, 계산, 비교, 예측\n- **의존성**: 보통 search_team의 데이터가 필요\n- **예시**:\n  * "이 지역 투자 가치 분석해줘"\n  * "계약 리스크 평가해줘"\n  * "대출 가능 금액 계산해줘"\n\n### 3. document_team (문서 팀)\n- **주요 기능**: 문서 생성 및 관리\n- **전문 분야**:\n  * 계약서 작성 (임대차, 매매, 전세)\n  * 문서 템플릿 관리\n  * 특약사항 생성\n  * 계약서 수정안 작성\n  * 법률 문서 검토\n- **도구**: document_generator, contract_template, contract_reviewer\n- **적합한 작업**: 문서 작성, 계약서 생성, 문서 수정, 검토\n- **예시**:\n  * "임대차계약서 작성해줘"\n  * "특약사항 추가해줘"\n  * "계약서 수정안 만들어줘"\n\n## Chain-of-Thought Agent 선택 프로세스\n\n다음 단계를 **순서대로** 따라 최적의 Agent 조합을 선택하세요:\n\n### 1단계: 질문 요구사항 파악\n- 단순 정보 조회인가? → search_team만 필요\n- 판단/평가가 필요한가? → search + analysis 필요\n- 해결책 제시가 필요한가? → search + analysis 필요\n- 문서 생성이 필요한가? → document_team 추가\n\n### 2단계: 작업 복잡도 판단\n- **단순** (검색만): "~이 뭐야?", "~알려줘" → search_team\n- **중간** (검색+판단): "~괜찮아?", "~적절해?" → search + analysis\n- **복잡** (종합 해결): 구체적 상황 + "어떻게 해야 해?" → search + analysis\n\n### 3단계: 의존성 분석\n- 독립적 작업: 단일 팀으로 처리 가능\n- 순차적 의존: 이전 결과 필요 → 여러 팀 순서대로\n- 병렬 가능: 동시 조회 가능 → coordination: "parallel"\n\n### 4단계: 최종 검증\n- 선택한 팀들로 질문에 완전히 답변 가능한가?\n- 불필요한 팀이 포함되지 않았는가?\n- 순서가 논리적인가? (데이터 흐름 고려)\n\n### 중요 원칙:\n- **법률 키워드만으로 판단하지 말 것**: "법적으로 어떻게 해야 해?" = 법률 검색 + 분석 필요\n- **상황 설명 + 해결책 요청** = 반드시 analysis_team 포함\n- **구체적 수치 비교** (3억→10억 같은) = analysis_team 필요\n\n## 의도별 Agent 매핑 가이드 (기본 가이드 - CoT로 조정 가능)\n\n| 의도 (Intent) | 기본 조합 | 상황별 조정 |\n|--------------|-----------|-------------|\n| LEGAL_CONSULT | ["search_team"] | 해결책 요청시 → + analysis_team |\n| MARKET_INQUIRY | ["search_team"] | 비교/평가시 → + analysis_team |\n| LOAN_CONSULT | ["search_team", "analysis_team"] | 계산 필수 |\n| CONTRACT_CREATION | ["document_team"] | 검토 후 작성 → search + document |\n| CONTRACT_REVIEW | ["search_team", "analysis_team"] | 법률 검토 + 리스크 분석 |\n| COMPREHENSIVE | ["search_team", "analysis_team"] | **항상 분석 포함** |\n| RISK_ANALYSIS | ["analysis_team"] | 법률 근거 필요시 → search + analysis |\n| UNCLEAR | ["search_team", "analysis_team"] | 포괄적 대응 |\n\n**중요**: 위 매핑은 **기본 가이드**일 뿐입니다.\n실제 질문의 내용(CoT 분석 결과)에 따라 조정하세요!\n\n## 복합 질문 처리 예시 (CoT 적용)\n\n### 예시 1: 순차적 처리\n질문: "강남구 시세 확인하고 투자 가치 분석해줘"\n**CoT 분석**:\n1. 요구사항: 시세 조회 + 투자 가치 평가\n2. 복잡도: 중간 (검색 + 분석)\n3. 의존성: 시세 데이터 → 투자 분석 (순차)\n4. 검증: search만으로는 "투자 가치 평가" 불가능\n\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "1단계: 시세 조회+투자 평가 필요. 2단계: 중간 복잡도. 3단계: 순차 의존. 4단계: search로 시세 수집 후 analysis로 투자 가치 평가 필요",\n    "coordination": "sequential"\n}\n```\n\n### 예시 2: 단순 정보 조회\n질문: "전세금 인상률 한도가 얼마야?"\n**CoT 분석**:\n1. 요구사항: 단순 사실 확인\n2. 복잡도: 낮음 (정보 확인형)\n3. 의존성: 없음\n4. 검증: search_team만으로 충분\n\n```json\n{\n    "selected_agents": ["search_team"],\n    "reasoning": "1단계: 단순 정보 조회. 2단계: 저복잡도. 3단계: 독립적. 4단계: 법률 검색만으로 답변 가능",\n    "coordination": "single"\n}\n```\n\n### 예시 3: 해결책 요청 (핵심 예시!)\n질문: "집주인이 전세금 3억을 10억으로 올려달래. 법적으로 어떻게 해야 해?"\n의도: COMPREHENSIVE\n**CoT 분석**:\n1. 요구사항: 상황 설명 + 해결책 요청\n2. 복잡도: 높음 (구체적 상황 + 수치 비교)\n3. 의존성: 법률 확인 → 상황 분석 → 해결책 제시\n4. 검증: "법적으로"만 보고 search만 선택하면 불충분! 해결책 제시 필요\n\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "1단계: 법률 + 상황 분석 + 해결책 필요. 2단계: 고복잡도(3억→10억 비정상). 3단계: 순차(법률 확인 후 타당성 분석). 4단계: \'어떻게 해야\' = 단순 법률 조회 아님, 분석 필수",\n    "coordination": "sequential",\n    "confidence": 0.95\n}\n```\n\n## 응답 형식 (JSON)\n\n```json\n{\n    "selected_agents": ["선택된 agent/team 목록"],\n    "reasoning": "선택 이유를 구체적으로 설명. 각 Agent의 역할과 처리 순서 포함",\n    "coordination": "single/sequential/parallel/pipeline",\n    "dependencies": {"agent2": ["agent1"]},\n    "estimated_time": 30,\n    "confidence": 0.9\n}\n```\n\n## 선택 가이드라인\n\n1. **최소 Agent 원칙**: 가능한 적은 수의 Agent로 처리\n2. **전문성 우선**: 해당 작업에 가장 전문적인 Agent 선택\n3. **효율성 고려**: 병렬 처리 가능한 경우 명시\n4. **의존성 관리**: 데이터 흐름을 고려한 순서 지정\n5. **폴백 전략**: 불확실한 경우 ["search_team", "analysis_team"] 조합\n\n## 주의사항\n\n- selected_agents는 반드시 배열 형태\n- Agent 이름은 정확히: "search_team", "analysis_team", "document_team"\n- 최소 1개, 최대 3개 선택\n- 순서는 실행 우선순위 (앞에 있을수록 먼저 실행)\n- reasoning은 상세하고 논리적으로 작성\n- coordination 필드로 실행 방식 명시\n- 복합 질문의 경우 의존성 관계 명확히 표시'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 15:56:06,541 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 15:56:06,542 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 15:56:06,542 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 15:56:06,542 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 15:56:06,542 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 15:56:06,542 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 15:56:10,008 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 06:56:09 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'3155'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'3171'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9990'), (b'x-ratelimit-remaining-tokens', b'197887'), (b'x-ratelimit-reset-requests', b'1m18.897s'), (b'x-ratelimit-reset-tokens', b'633ms'), (b'x-request-id', b'req_f417b7abb4c845a596559b19507036d5'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b0468c8933091-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 15:56:10,009 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 15:56:10,009 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 15:56:10,009 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 15:56:10,009 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 15:56:10,009 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 15:56:10,009 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 06:56:09 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '3155', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '3171', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9990', 'x-ratelimit-remaining-tokens': '197887', 'x-ratelimit-reset-requests': '1m18.897s', 'x-ratelimit-reset-tokens': '633ms', 'x-request-id': 'req_f417b7abb4c845a596559b19507036d5', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b0468c8933091-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 15:56:10,009 - openai._base_client - DEBUG - request_id: req_f417b7abb4c845a596559b19507036d5
2025-10-05 15:56:10,010 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: agent_selection | Model: gpt-4o-mini-2024-07-18 | Tokens: 2471 (prompt: 2358, completion: 113)
2025-10-05 15:56:10,010 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM agent selection reasoning: 1단계: 송파구 아파트 가격 동향에 대한 시세 조회 필요. 2단계: 단순 정보 조회로 저복잡도. 3단계: 독립적 작업으로 search_team만으로 충분. 4단계: search_team이 송파구 아파트 시세 정보를 제공할 수 있음.
2025-10-05 15:56:10,010 - app.service_agent.cognitive_agents.planning_agent - INFO - ✅ Primary LLM selected agents: ['search_team']
2025-10-05 15:56:10,010 - __main__ - INFO -   의도: 시세조회
2025-10-05 15:56:10,010 - __main__ - INFO -   신뢰도: 0.95
2025-10-05 15:56:10,010 - __main__ - INFO -   추천 Agent: ['search_team']
2025-10-05 15:56:10,010 - __main__ - INFO - 
[Step 2] Query Decomposition...
2025-10-05 15:56:10,010 - app.service_agent.cognitive_agents.query_decomposer - INFO - Decomposing query: 송파구 아파트 가격 동향 알려주세요...
2025-10-05 15:56:10,010 - app.service_agent.cognitive_agents.query_decomposer - INFO - Query is simple, no decomposition needed
2025-10-05 15:56:10,010 - __main__ - INFO -   복합 질문: False
2025-10-05 15:56:10,010 - __main__ - INFO -   작업 수: 1
2025-10-05 15:56:10,010 - __main__ - INFO -   실행 모드: sequential
2025-10-05 15:56:10,010 - __main__ - INFO - 
[Step 3] Execution Plan 생성...
2025-10-05 15:56:10,010 - app.service_agent.cognitive_agents.planning_agent - INFO - Creating execution plan for intent: 시세조회
2025-10-05 15:56:10,010 - app.service_agent.cognitive_agents.planning_agent - WARNING - AgentRegistry is empty, using default teams
2025-10-05 15:56:10,010 - app.service_agent.cognitive_agents.planning_agent - DEBUG - Suggested agents: ['search_team']
2025-10-05 15:56:10,010 - app.service_agent.cognitive_agents.planning_agent - DEBUG - Available agents: ['search_team', 'analysis_team', 'document_team']
2025-10-05 15:56:10,010 - app.service_agent.cognitive_agents.planning_agent - INFO - Selected agents/teams for execution: ['search_team']
2025-10-05 15:56:10,010 - __main__ - INFO -   전략: sequential
2025-10-05 15:56:10,010 - __main__ - INFO -   단계 수: 1
2025-10-05 15:56:10,010 - __main__ - INFO - 
✓ 테스트 성공 (소요시간: 7.71초)
2025-10-05 15:56:10,010 - __main__ - INFO - 
================================================================================
2025-10-05 15:56:10,010 - __main__ - INFO - [10] 단일 질문 테스트: S010
2025-10-05 15:56:10,010 - __main__ - INFO - 질문: 주택담보대출 금리 비교해주세요
2025-10-05 15:56:10,010 - __main__ - INFO - ================================================================================
2025-10-05 15:56:10,010 - __main__ - INFO - 
[Step 1] Intent 분석...
2025-10-05 15:56:10,010 - app.service_agent.cognitive_agents.planning_agent - INFO - Analyzing intent for query: 주택담보대출 금리 비교해주세요...
2025-10-05 15:56:10,010 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-5b43751a-9803-4372-9d72-5bf1c36bbc18', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 의도 분석 전문가입니다.\n사용자의 질문을 정확히 이해하고, 어떤 종류의 도움이 필요한지 분류해야 합니다.\n\n## Chain-of-Thought 분석 프로세스\n\n질문을 분석할 때 다음 단계를 **순서대로** 따르세요:\n\n### 1단계: 질문 구조 파악\n- 단순 정보 요청인가? (예: "~이 뭐야?", "~알려줘")\n- 상황 설명이 포함되어 있는가? (배경, 현재 상태)\n- 구체적 수치나 데이터가 있는가? (금액, 비율, 기간 등)\n- 문제 해결을 요구하는가? (예: "어떻게 해야 해?", "방법 알려줘")\n\n### 2단계: 요청 유형 판단\n- **정보 확인형**: 사실, 개념, 규정 확인 → 검색만으로 충분\n- **평가/판단형**: "괜찮아?", "적절해?", "문제있어?" → 검색 + 분석 필요\n- **해결책 요청형**: "어떻게?", "방법?", "대처?" → 검색 + 분석 + 제안 필요\n- **비교/선택형**: "A vs B", "어느게 나아?" → 검색 + 분석(비교) 필요\n\n### 3단계: 복잡도 평가\n- **저**: 단일 개념/사실 확인 (예: "전세금 인상률 한도?")\n- **중**: 특정 상황 + 판단 (예: "3억을 5억으로 올려달래. 가능해?")\n- **고**: 복잡한 상황 + 여러 조건 + 해결책 (예: "10년 거주, 3억→10억 요구. 어떻게 해야 해?")\n\n### 4단계: 필요한 처리 결정\n- **검색만**: 정보 확인형 + 저복잡도\n- **검색+분석**: 평가/판단형 OR 중복잡도 OR 수치 비교 포함\n- **종합처리**: 해결책 요청형 OR 고복잡도 OR 여러 조건 동시 고려\n\n### 5단계: 최종 검증\n- 선택한 의도로 사용자 질문에 완전히 답변 가능한가?\n- 단순 정보 제공으로 끝나는가, 아니면 추가 분석/판단이 필요한가?\n- 상황 설명이 있으면서 "해결", "방법", "어떻게" 등이 있으면 → COMPREHENSIVE 고려\n\n## 중요: 복합 질문 처리\n복합적인 질문(여러 의도가 섞인 질문)의 경우, 가장 핵심적인 의도를 파악하되,\nsub_intents 필드에 부가적인 의도들도 함께 기록해주세요.\n\n**특히 주의**:\n- 법률 키워드가 있어도, "해결방법", "어떻게 해야" 같은 표현이 있으면 단순 LEGAL_CONSULT가 아닐 수 있음\n- 구체적 상황(금액, 기간 등) + 해결책 요구 = COMPREHENSIVE 또는 복합 의도로 분류\n\n## 분류 카테고리 설명:\n\n1. **LEGAL_CONSULT (법률상담)**\n   - 설명: 부동산 관련 법률, 권리, 의무에 대한 질문\n   - 예시:\n     * 단순: "전세금 5% 인상이 가능한가요?", "임대차계약 갱신 거부할 수 있나요?"\n     * 복합: "전세금 인상 가능한지 확인하고 법적 근거도 알려주세요"\n   - 키워드: 법, 전세, 임대, 보증금, 계약, 권리, 의무, 갱신, 임차인, 임대인, 법률, 규정, 조항\n   - 필요한 처리: 법률 데이터베이스 검색, 관련 법조항 찾기\n\n2. **MARKET_INQUIRY (시세조회)**\n   - 설명: 부동산 시장 가격, 시세, 거래 동향에 대한 질문\n   - 예시:\n     * 단순: "강남구 아파트 전세 시세 알려주세요", "서초동 매매가 얼마나 올랐나요?"\n     * 복합: "강남구 시세 확인하고 대출 가능 금액도 계산해줘"\n   - 키워드: 시세, 가격, 매매가, 전세가, 월세, 시장, 동향, 평균, 지역명, 상승률, 하락률\n   - 필요한 처리: 부동산 시세 데이터 조회, 지역별 가격 분석\n\n3. **LOAN_CONSULT (대출상담)**\n   - 설명: 주택담보대출, 전세자금대출 등 금융 관련 질문\n   - 예시:\n     * 단순: "전세자금대출 한도가 얼마인가요?", "LTV가 뭔가요?"\n     * 복합: "대출 한도 확인하고 금리 비교도 해주세요"\n   - 키워드: 대출, 금리, 한도, 조건, 상환, LTV, DTI, DSR, 담보, 금융, 은행\n   - 필요한 처리: 대출 상품 조회, 금리 정보 검색, 한도 계산\n\n4. **CONTRACT_CREATION (계약서작성)**\n   - 설명: 새로운 계약서나 문서를 작성해달라는 요청\n   - 예시:\n     * 단순: "임대차계약서 작성해주세요", "전세계약서 초안 만들어주세요"\n     * 복합: "계약서 작성하고 주의사항도 검토해주세요"\n   - 키워드: 작성, 만들, 생성, 초안, 계약서, 문서, 양식\n   - 필요한 처리: 문서 생성 에이전트 호출, 템플릿 기반 작성\n\n5. **CONTRACT_REVIEW (계약서검토)**\n   - 설명: 기존 계약서나 문서를 검토해달라는 요청\n   - 예시:\n     * 단순: "이 계약서 검토해주세요", "특약사항 문제없나요?"\n     * 복합: "계약서 검토하고 수정사항도 제안해주세요"\n   - 키워드: 검토, 확인, 점검, 리뷰, 분석해, 살펴봐, 체크\n   - 필요한 처리: 문서 분석, 위험 요소 식별, 개선사항 제안\n\n6. **COMPREHENSIVE (종합분석)**\n   - 설명: 여러 측면을 종합적으로 분석해달라는 요청, 또는 복잡한 상황에 대한 해결책 요청\n   - 예시:\n     * 단순: "이 물건 전체적으로 분석해주세요"\n     * 복합: "시세, 법률, 대출 모두 검토해서 종합 의견 주세요"\n     * 해결형: "10년 거주했는데 전세금 3억을 10억으로 올려달래. 어떻게 해야 해?"\n     * 상황+해결: "집주인이 계약 갱신 거부했어. 법적으로 어떻게 대응해야 할까?"\n   - 키워드: 종합, 전체, 모든, 전반적, 종합적, 평가, 분석, 어떻게, 방법, 해결, 대처\n   - 패턴: 구체적 상황 설명 + "어떻게/방법/해결" 요청\n   - 필요한 처리: 다중 데이터 소스 통합 분석, 상황 평가, 해결책 제시\n\n7. **RISK_ANALYSIS (리스크분석)**\n   - 설명: 위험 요소나 주의사항에 대한 질문\n   - 예시:\n     * 단순: "이 계약 위험한가요?", "주의할 점 알려주세요"\n     * 복합: "리스크 분석하고 대안도 제시해주세요"\n   - 키워드: 위험, 리스크, 주의, 문제점, 조심, 걱정, 우려\n   - 필요한 처리: 위험 요소 분석, 주의사항 추출\n\n8. **UNCLEAR (불분명)**\n   - 설명: 의도를 명확히 파악하기 어려운 질문\n   - 예시: "이거 좀 봐주세요", "어떻게 해야 할까요?", "도와주세요"\n   - 처리: 추가 질문으로 의도 명확화 필요\n\n9. **IRRELEVANT (무관)**\n   - 설명: 부동산과 전혀 관련 없는 질문\n   - 예시: "날씨 어때?", "저녁 뭐 먹지?", "주식 추천해줘"\n   - 처리: 부동산 관련 질문을 유도\n\n## 복합 질문 예시와 분석 (CoT 적용):\n\n### 예시 1: "강남구 아파트 시세 알려주고 전세자금대출 가능한지도 확인해줘"\n**CoT 분석**:\n1. 구조: 두 개의 요청 ("시세" + "대출")\n2. 유형: 정보 확인형 (둘 다)\n3. 복잡도: 중 (두 가지 독립적 조회)\n4. 필요 처리: 검색 + 계산/분석\n\n**결론**:\n- 주 의도: MARKET_INQUIRY (시세 조회가 먼저 필요)\n- 부가 의도: LOAN_CONSULT (대출 확인)\n- 분해: ["강남구 아파트 시세 조회", "전세자금대출 가능 여부 확인"]\n\n### 예시 2: "이 계약서 검토해서 위험한 부분 있는지 알려주고 수정 제안도 해줘"\n**CoT 분석**:\n1. 구조: 검토 + 위험 평가 + 수정안\n2. 유형: 평가/판단형 + 해결책 요청형\n3. 복잡도: 고 (3단계 처리)\n4. 필요 처리: 검토 + 분석 + 문서 생성\n\n**결론**:\n- 주 의도: CONTRACT_REVIEW (계약서 검토)\n- 부가 의도: RISK_ANALYSIS (위험 분석)\n- 분해: ["계약서 전체 검토", "위험 요소 식별", "수정사항 제안"]\n\n### 예시 3: "집주인이 짜증나, 10년 살았는데 전세금 3억을 10억으로 올려달래. 법적으로 해결방법 알려줘"\n**CoT 분석**:\n1. 구조: 상황 설명 (10년 거주, 3억→10억) + 해결책 요청\n2. 유형: 해결책 요청형 (단순 정보 X)\n3. 복잡도: 고 (구체적 상황 + 수치 비교 + 법률 + 대응방안)\n4. 필요 처리: 법률 검색 + 상황 분석 + 해결책 제시\n\n**결론**:\n- 주 의도: COMPREHENSIVE (복잡한 상황에 대한 종합 해결)\n- 부가 의도: LEGAL_CONSULT, RISK_ANALYSIS\n- 분해: ["전세금 인상 한도 법률 조회", "3억→10억 인상의 타당성 분석", "구체적 대응 방안 제시"]\n- **이유**: "법적으로"라는 키워드가 있지만, 단순 법률 확인이 아니라 구체적 상황에 대한 해결책을 요구하므로 COMPREHENSIVE\n\n### 예시 4: "전세금 인상률 상한이 얼마야?"\n**CoT 분석**:\n1. 구조: 단순 사실 확인\n2. 유형: 정보 확인형\n3. 복잡도: 저 (단일 개념)\n4. 필요 처리: 검색만\n\n**결론**:\n- 주 의도: LEGAL_CONSULT (법률 정보 조회)\n- 부가 의도: 없음\n- 분해: 필요 없음\n\n## 응답 형식 (JSON 형식으로 응답):\n\n```json\n{\n    "intent": "LEGAL_CONSULT",\n    "confidence": 0.9,\n    "keywords": ["전세금", "인상", "제한"],\n    "sub_intents": [],\n    "is_compound": false,\n    "decomposed_tasks": [],\n    "entities": {\n        "location": "강남구",\n        "price": "5억",\n        "contract_type": "전세",\n        "date": "2024년",\n        "area": "84㎡",\n        "action_verbs": ["확인", "검토"]\n    },\n    "reasoning": "전세금 인상에 대한 법률 질문이므로 LEGAL_CONSULT로 분류"\n}\n```\n\n응답 규칙:\n- intent: 위 9개 카테고리 중 하나 (대문자_언더스코어 형식)\n- confidence: 0.0~1.0 (0.8 이상이면 매우 확실, 0.5 미만이면 불확실)\n- keywords: 추출된 주요 키워드 목록\n- sub_intents: 복합 질문일 경우 부가적인 의도들\n- is_compound: 복합 질문 여부 (true/false)\n- decomposed_tasks: 복합 질문을 분해한 개별 작업들\n- entities: 추출된 엔티티 정보\n- reasoning: **반드시 CoT 5단계를 거쳐 분석한 과정을 포함** (구조 파악 → 유형 판단 → 복잡도 평가 → 필요 처리 → 최종 검증)\n\n## reasoning 작성 예시:\n"1단계(구조): 상황 설명(10년 거주, 3억→10억) + 해결책 요청 포함.\n2단계(유형): 해결책 요청형 - 단순 정보가 아닌 대응방안 필요.\n3단계(복잡도): 고 - 구체적 수치 비교와 복잡한 상황.\n4단계(처리): 법률 검색 + 상황 분석 + 해결책 제시 필요.\n5단계(검증): LEGAL_CONSULT만으로는 불충분, 종합적 분석 필요 → COMPREHENSIVE 선택"\n\n## 판단 가이드:\n- 여러 의도가 섞여있다면, 가장 주된 의도를 intent에, 나머지를 sub_intents에 기록\n- "그리고", "또한", "함께", "같이" 등의 연결어가 있으면 복합 질문일 가능성 높음\n- 법률 관련 키워드가 있으면 LEGAL_CONSULT 우선\n- 가격/시세 언급이 명확하면 MARKET_INQUIRY\n- 계약서라는 단어와 함께 "작성/만들기"가 있으면 CONTRACT_CREATION\n- 계약서라는 단어와 함께 "검토/확인"이 있으면 CONTRACT_REVIEW\n- 불확실하면 confidence를 낮게 설정하고 UNCLEAR 선택\n- 복합 질문은 is_compound를 true로 설정하고 개별 작업으로 분해\n\n분석할 질문: 주택담보대출 금리 비교해주세요'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 15:56:10,011 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 15:56:10,011 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 15:56:10,011 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 15:56:10,011 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 15:56:10,011 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 15:56:10,012 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 15:56:16,459 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 06:56:16 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'6216'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'6244'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9990'), (b'x-ratelimit-remaining-tokens', b'197245'), (b'x-ratelimit-reset-requests', b'1m24.07s'), (b'x-ratelimit-reset-tokens', b'826ms'), (b'x-request-id', b'req_6d51fed4725e4bb39338ecc276d71705'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b047e7eae3091-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 15:56:16,460 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 15:56:16,460 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 15:56:16,460 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 15:56:16,460 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 15:56:16,460 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 15:56:16,460 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 06:56:16 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '6216', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '6244', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9990', 'x-ratelimit-remaining-tokens': '197245', 'x-ratelimit-reset-requests': '1m24.07s', 'x-ratelimit-reset-tokens': '826ms', 'x-request-id': 'req_6d51fed4725e4bb39338ecc276d71705', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b047e7eae3091-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 15:56:16,460 - openai._base_client - DEBUG - request_id: req_6d51fed4725e4bb39338ecc276d71705
2025-10-05 15:56:16,460 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: intent_analysis | Model: gpt-4o-mini-2024-07-18 | Tokens: 3381 (prompt: 3179, completion: 202)
2025-10-05 15:56:16,462 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM Intent Analysis Result: {'intent': 'LOAN_CONSULT', 'confidence': 0.9, 'keywords': ['주택담보대출', '금리', '비교'], 'sub_intents': [], 'is_compound': False, 'decomposed_tasks': [], 'entities': {'loan_type': '주택담보대출', 'action_verbs': ['비교']}, 'reasoning': '1단계(구조): 단순 정보 요청으로 금리 비교에 대한 질문. 2단계(유형): 정보 확인형 - 금리 정보를 확인하는 것이므로 검색만으로 충분. 3단계(복잡도): 저 - 단일 개념 확인. 4단계(처리): 대출 금리 정보 검색 필요. 5단계(검증): 단순 금리 비교 요청이므로 LOAN_CONSULT로 분류.'}
2025-10-05 15:56:16,462 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-75f03a28-29f2-411d-ad88-a4dbf816f968', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 Agent 선택 전문가입니다.\n사용자의 요청에 가장 적합한 Agent/Team을 선택하는 것이 목표입니다.\n\n## 현재 상황\n\n**사용자 질문:** 주택담보대출 금리 비교해주세요\n**분석된 의도:** 대출상담\n**추출된 키워드:** [\'주택담보대출\', \'금리\', \'비교\']\n\n## 사용 가능한 Agent/Team 정보\n\n{\'search_team\': {\'name\': \'search_team\', \'capabilities\': \'법률 검색, 부동산 시세 조회, 대출 상품 검색\', \'tools\': [\'legal_search\', \'market_data\', \'loan_data\'], \'use_cases\': [\'법률 상담\', \'시세 조회\', \'대출 정보\']}, \'analysis_team\': {\'name\': \'analysis_team\', \'capabilities\': \'데이터 분석, 리스크 평가, 인사이트 생성, 추천\', \'tools\': [\'data_analyzer\', \'risk_evaluator\'], \'use_cases\': [\'시장 분석\', \'리스크 평가\', \'투자 분석\']}, \'document_team\': {\'name\': \'document_team\', \'capabilities\': \'계약서 작성, 문서 생성, 문서 검토\', \'tools\': [\'document_generator\', \'contract_reviewer\'], \'use_cases\': [\'계약서 작성\', \'문서 검토\']}}\n\n## Agent 역할 및 상세 가이드\n\n### 1. search_team (검색 팀)\n- **주요 기능**: 정보 검색 및 데이터 수집\n- **전문 분야**:\n  * 법률 정보 검색 (전세법, 임대차보호법, 부동산 관련 법규)\n  * 부동산 시세 조회 (매매가, 전세가, 월세, 실거래가)\n  * 대출 상품 정보 검색 (금리, 한도, 조건)\n  * 지역 정보 및 인프라 조회\n- **도구**: legal_search, market_data, loan_data\n- **적합한 작업**: 정보 조회, 데이터 수집, 법률 확인, 시세 파악\n- **예시**:\n  * "전세금 5% 인상 가능한가요?"\n  * "강남구 아파트 전세 시세"\n  * "전세자금대출 한도 얼마?"\n\n### 2. analysis_team (분석 팀)\n- **주요 기능**: 데이터 분석 및 평가\n- **전문 분야**:\n  * 시장 동향 분석 (상승률, 하락률, 추세)\n  * 리스크 평가 (계약, 투자 위험도)\n  * 투자 수익률 계산 (ROI, 월세 수익률)\n  * 대출 한도 및 조건 분석 (LTV, DTI, DSR)\n  * 비교 분석 (지역별, 상품별)\n- **도구**: data_analyzer, risk_evaluator, calculator\n- **적합한 작업**: 데이터 분석, 리스크 평가, 계산, 비교, 예측\n- **의존성**: 보통 search_team의 데이터가 필요\n- **예시**:\n  * "이 지역 투자 가치 분석해줘"\n  * "계약 리스크 평가해줘"\n  * "대출 가능 금액 계산해줘"\n\n### 3. document_team (문서 팀)\n- **주요 기능**: 문서 생성 및 관리\n- **전문 분야**:\n  * 계약서 작성 (임대차, 매매, 전세)\n  * 문서 템플릿 관리\n  * 특약사항 생성\n  * 계약서 수정안 작성\n  * 법률 문서 검토\n- **도구**: document_generator, contract_template, contract_reviewer\n- **적합한 작업**: 문서 작성, 계약서 생성, 문서 수정, 검토\n- **예시**:\n  * "임대차계약서 작성해줘"\n  * "특약사항 추가해줘"\n  * "계약서 수정안 만들어줘"\n\n## Chain-of-Thought Agent 선택 프로세스\n\n다음 단계를 **순서대로** 따라 최적의 Agent 조합을 선택하세요:\n\n### 1단계: 질문 요구사항 파악\n- 단순 정보 조회인가? → search_team만 필요\n- 판단/평가가 필요한가? → search + analysis 필요\n- 해결책 제시가 필요한가? → search + analysis 필요\n- 문서 생성이 필요한가? → document_team 추가\n\n### 2단계: 작업 복잡도 판단\n- **단순** (검색만): "~이 뭐야?", "~알려줘" → search_team\n- **중간** (검색+판단): "~괜찮아?", "~적절해?" → search + analysis\n- **복잡** (종합 해결): 구체적 상황 + "어떻게 해야 해?" → search + analysis\n\n### 3단계: 의존성 분석\n- 독립적 작업: 단일 팀으로 처리 가능\n- 순차적 의존: 이전 결과 필요 → 여러 팀 순서대로\n- 병렬 가능: 동시 조회 가능 → coordination: "parallel"\n\n### 4단계: 최종 검증\n- 선택한 팀들로 질문에 완전히 답변 가능한가?\n- 불필요한 팀이 포함되지 않았는가?\n- 순서가 논리적인가? (데이터 흐름 고려)\n\n### 중요 원칙:\n- **법률 키워드만으로 판단하지 말 것**: "법적으로 어떻게 해야 해?" = 법률 검색 + 분석 필요\n- **상황 설명 + 해결책 요청** = 반드시 analysis_team 포함\n- **구체적 수치 비교** (3억→10억 같은) = analysis_team 필요\n\n## 의도별 Agent 매핑 가이드 (기본 가이드 - CoT로 조정 가능)\n\n| 의도 (Intent) | 기본 조합 | 상황별 조정 |\n|--------------|-----------|-------------|\n| LEGAL_CONSULT | ["search_team"] | 해결책 요청시 → + analysis_team |\n| MARKET_INQUIRY | ["search_team"] | 비교/평가시 → + analysis_team |\n| LOAN_CONSULT | ["search_team", "analysis_team"] | 계산 필수 |\n| CONTRACT_CREATION | ["document_team"] | 검토 후 작성 → search + document |\n| CONTRACT_REVIEW | ["search_team", "analysis_team"] | 법률 검토 + 리스크 분석 |\n| COMPREHENSIVE | ["search_team", "analysis_team"] | **항상 분석 포함** |\n| RISK_ANALYSIS | ["analysis_team"] | 법률 근거 필요시 → search + analysis |\n| UNCLEAR | ["search_team", "analysis_team"] | 포괄적 대응 |\n\n**중요**: 위 매핑은 **기본 가이드**일 뿐입니다.\n실제 질문의 내용(CoT 분석 결과)에 따라 조정하세요!\n\n## 복합 질문 처리 예시 (CoT 적용)\n\n### 예시 1: 순차적 처리\n질문: "강남구 시세 확인하고 투자 가치 분석해줘"\n**CoT 분석**:\n1. 요구사항: 시세 조회 + 투자 가치 평가\n2. 복잡도: 중간 (검색 + 분석)\n3. 의존성: 시세 데이터 → 투자 분석 (순차)\n4. 검증: search만으로는 "투자 가치 평가" 불가능\n\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "1단계: 시세 조회+투자 평가 필요. 2단계: 중간 복잡도. 3단계: 순차 의존. 4단계: search로 시세 수집 후 analysis로 투자 가치 평가 필요",\n    "coordination": "sequential"\n}\n```\n\n### 예시 2: 단순 정보 조회\n질문: "전세금 인상률 한도가 얼마야?"\n**CoT 분석**:\n1. 요구사항: 단순 사실 확인\n2. 복잡도: 낮음 (정보 확인형)\n3. 의존성: 없음\n4. 검증: search_team만으로 충분\n\n```json\n{\n    "selected_agents": ["search_team"],\n    "reasoning": "1단계: 단순 정보 조회. 2단계: 저복잡도. 3단계: 독립적. 4단계: 법률 검색만으로 답변 가능",\n    "coordination": "single"\n}\n```\n\n### 예시 3: 해결책 요청 (핵심 예시!)\n질문: "집주인이 전세금 3억을 10억으로 올려달래. 법적으로 어떻게 해야 해?"\n의도: COMPREHENSIVE\n**CoT 분석**:\n1. 요구사항: 상황 설명 + 해결책 요청\n2. 복잡도: 높음 (구체적 상황 + 수치 비교)\n3. 의존성: 법률 확인 → 상황 분석 → 해결책 제시\n4. 검증: "법적으로"만 보고 search만 선택하면 불충분! 해결책 제시 필요\n\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "1단계: 법률 + 상황 분석 + 해결책 필요. 2단계: 고복잡도(3억→10억 비정상). 3단계: 순차(법률 확인 후 타당성 분석). 4단계: \'어떻게 해야\' = 단순 법률 조회 아님, 분석 필수",\n    "coordination": "sequential",\n    "confidence": 0.95\n}\n```\n\n## 응답 형식 (JSON)\n\n```json\n{\n    "selected_agents": ["선택된 agent/team 목록"],\n    "reasoning": "선택 이유를 구체적으로 설명. 각 Agent의 역할과 처리 순서 포함",\n    "coordination": "single/sequential/parallel/pipeline",\n    "dependencies": {"agent2": ["agent1"]},\n    "estimated_time": 30,\n    "confidence": 0.9\n}\n```\n\n## 선택 가이드라인\n\n1. **최소 Agent 원칙**: 가능한 적은 수의 Agent로 처리\n2. **전문성 우선**: 해당 작업에 가장 전문적인 Agent 선택\n3. **효율성 고려**: 병렬 처리 가능한 경우 명시\n4. **의존성 관리**: 데이터 흐름을 고려한 순서 지정\n5. **폴백 전략**: 불확실한 경우 ["search_team", "analysis_team"] 조합\n\n## 주의사항\n\n- selected_agents는 반드시 배열 형태\n- Agent 이름은 정확히: "search_team", "analysis_team", "document_team"\n- 최소 1개, 최대 3개 선택\n- 순서는 실행 우선순위 (앞에 있을수록 먼저 실행)\n- reasoning은 상세하고 논리적으로 작성\n- coordination 필드로 실행 방식 명시\n- 복합 질문의 경우 의존성 관계 명확히 표시'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 15:56:16,462 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 15:56:16,463 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 15:56:16,463 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 15:56:16,463 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 15:56:16,464 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 15:56:16,464 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 15:56:18,808 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 06:56:18 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'2104'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'2151'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9990'), (b'x-ratelimit-remaining-tokens', b'197889'), (b'x-ratelimit-reset-requests', b'1m26.26s'), (b'x-ratelimit-reset-tokens', b'633ms'), (b'x-request-id', b'req_3e2bfcf478794475b21dd738e399d4f2'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b04a6ce423091-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 15:56:18,809 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 15:56:18,809 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 15:56:18,818 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 15:56:18,819 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 15:56:18,819 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 15:56:18,819 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 06:56:18 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '2104', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '2151', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9990', 'x-ratelimit-remaining-tokens': '197889', 'x-ratelimit-reset-requests': '1m26.26s', 'x-ratelimit-reset-tokens': '633ms', 'x-request-id': 'req_3e2bfcf478794475b21dd738e399d4f2', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b04a6ce423091-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 15:56:18,819 - openai._base_client - DEBUG - request_id: req_3e2bfcf478794475b21dd738e399d4f2
2025-10-05 15:56:18,819 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: agent_selection | Model: gpt-4o-mini-2024-07-18 | Tokens: 2523 (prompt: 2359, completion: 164)
2025-10-05 15:56:18,819 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM agent selection reasoning: 1단계: 주택담보대출 금리 비교 요청으로, 대출 상품 정보 검색과 분석이 필요. 2단계: 중간 복잡도 (검색 + 분석). 3단계: 대출 상품 정보를 검색한 후, 금리 비교 및 분석이 필요하므로 순차적 의존 관계가 형성됨. 4단계: search_team으로 대출 상품 정보를 수집한 후, analysis_team으로 금리 비교 및 분석을 수행해야 함.
2025-10-05 15:56:18,819 - app.service_agent.cognitive_agents.planning_agent - INFO - ✅ Primary LLM selected agents: ['search_team', 'analysis_team']
2025-10-05 15:56:18,819 - __main__ - INFO -   의도: 대출상담
2025-10-05 15:56:18,820 - __main__ - INFO -   신뢰도: 0.90
2025-10-05 15:56:18,820 - __main__ - INFO -   추천 Agent: ['search_team', 'analysis_team']
2025-10-05 15:56:18,820 - __main__ - INFO - 
[Step 2] Query Decomposition...
2025-10-05 15:56:18,820 - app.service_agent.cognitive_agents.query_decomposer - INFO - Decomposing query: 주택담보대출 금리 비교해주세요...
2025-10-05 15:56:18,820 - app.service_agent.cognitive_agents.query_decomposer - INFO - Query is simple, no decomposition needed
2025-10-05 15:56:18,820 - __main__ - INFO -   복합 질문: False
2025-10-05 15:56:18,820 - __main__ - INFO -   작업 수: 1
2025-10-05 15:56:18,820 - __main__ - INFO -   실행 모드: sequential
2025-10-05 15:56:18,820 - __main__ - INFO - 
[Step 3] Execution Plan 생성...
2025-10-05 15:56:18,820 - app.service_agent.cognitive_agents.planning_agent - INFO - Creating execution plan for intent: 대출상담
2025-10-05 15:56:18,820 - app.service_agent.cognitive_agents.planning_agent - WARNING - AgentRegistry is empty, using default teams
2025-10-05 15:56:18,820 - app.service_agent.cognitive_agents.planning_agent - DEBUG - Suggested agents: ['search_team', 'analysis_team']
2025-10-05 15:56:18,820 - app.service_agent.cognitive_agents.planning_agent - DEBUG - Available agents: ['search_team', 'analysis_team', 'document_team']
2025-10-05 15:56:18,820 - app.service_agent.cognitive_agents.planning_agent - INFO - Selected agents/teams for execution: ['search_team', 'analysis_team']
2025-10-05 15:56:18,820 - __main__ - INFO -   전략: sequential
2025-10-05 15:56:18,820 - __main__ - INFO -   단계 수: 2
2025-10-05 15:56:18,820 - __main__ - INFO - 
✓ 테스트 성공 (소요시간: 8.81초)
2025-10-05 15:56:18,821 - __main__ - INFO - 
결과 저장: C:\kdy\Projects\holmesnyangz\beta_v001\backend\app\service_agent\reports\phase1_test_results.json
2025-10-05 15:56:18,821 - __main__ - INFO - 
================================================================================
2025-10-05 15:56:18,821 - __main__ - INFO - [11] 단일 질문 테스트: S011
2025-10-05 15:56:18,821 - __main__ - INFO - 질문: 임대차보호법 적용 대상은?
2025-10-05 15:56:18,821 - __main__ - INFO - ================================================================================
2025-10-05 15:56:18,821 - __main__ - INFO - 
[Step 1] Intent 분석...
2025-10-05 15:56:18,821 - app.service_agent.cognitive_agents.planning_agent - INFO - Analyzing intent for query: 임대차보호법 적용 대상은?...
2025-10-05 15:56:18,822 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-acfb7cca-e080-491e-b687-37fb02d8c1f1', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 의도 분석 전문가입니다.\n사용자의 질문을 정확히 이해하고, 어떤 종류의 도움이 필요한지 분류해야 합니다.\n\n## Chain-of-Thought 분석 프로세스\n\n질문을 분석할 때 다음 단계를 **순서대로** 따르세요:\n\n### 1단계: 질문 구조 파악\n- 단순 정보 요청인가? (예: "~이 뭐야?", "~알려줘")\n- 상황 설명이 포함되어 있는가? (배경, 현재 상태)\n- 구체적 수치나 데이터가 있는가? (금액, 비율, 기간 등)\n- 문제 해결을 요구하는가? (예: "어떻게 해야 해?", "방법 알려줘")\n\n### 2단계: 요청 유형 판단\n- **정보 확인형**: 사실, 개념, 규정 확인 → 검색만으로 충분\n- **평가/판단형**: "괜찮아?", "적절해?", "문제있어?" → 검색 + 분석 필요\n- **해결책 요청형**: "어떻게?", "방법?", "대처?" → 검색 + 분석 + 제안 필요\n- **비교/선택형**: "A vs B", "어느게 나아?" → 검색 + 분석(비교) 필요\n\n### 3단계: 복잡도 평가\n- **저**: 단일 개념/사실 확인 (예: "전세금 인상률 한도?")\n- **중**: 특정 상황 + 판단 (예: "3억을 5억으로 올려달래. 가능해?")\n- **고**: 복잡한 상황 + 여러 조건 + 해결책 (예: "10년 거주, 3억→10억 요구. 어떻게 해야 해?")\n\n### 4단계: 필요한 처리 결정\n- **검색만**: 정보 확인형 + 저복잡도\n- **검색+분석**: 평가/판단형 OR 중복잡도 OR 수치 비교 포함\n- **종합처리**: 해결책 요청형 OR 고복잡도 OR 여러 조건 동시 고려\n\n### 5단계: 최종 검증\n- 선택한 의도로 사용자 질문에 완전히 답변 가능한가?\n- 단순 정보 제공으로 끝나는가, 아니면 추가 분석/판단이 필요한가?\n- 상황 설명이 있으면서 "해결", "방법", "어떻게" 등이 있으면 → COMPREHENSIVE 고려\n\n## 중요: 복합 질문 처리\n복합적인 질문(여러 의도가 섞인 질문)의 경우, 가장 핵심적인 의도를 파악하되,\nsub_intents 필드에 부가적인 의도들도 함께 기록해주세요.\n\n**특히 주의**:\n- 법률 키워드가 있어도, "해결방법", "어떻게 해야" 같은 표현이 있으면 단순 LEGAL_CONSULT가 아닐 수 있음\n- 구체적 상황(금액, 기간 등) + 해결책 요구 = COMPREHENSIVE 또는 복합 의도로 분류\n\n## 분류 카테고리 설명:\n\n1. **LEGAL_CONSULT (법률상담)**\n   - 설명: 부동산 관련 법률, 권리, 의무에 대한 질문\n   - 예시:\n     * 단순: "전세금 5% 인상이 가능한가요?", "임대차계약 갱신 거부할 수 있나요?"\n     * 복합: "전세금 인상 가능한지 확인하고 법적 근거도 알려주세요"\n   - 키워드: 법, 전세, 임대, 보증금, 계약, 권리, 의무, 갱신, 임차인, 임대인, 법률, 규정, 조항\n   - 필요한 처리: 법률 데이터베이스 검색, 관련 법조항 찾기\n\n2. **MARKET_INQUIRY (시세조회)**\n   - 설명: 부동산 시장 가격, 시세, 거래 동향에 대한 질문\n   - 예시:\n     * 단순: "강남구 아파트 전세 시세 알려주세요", "서초동 매매가 얼마나 올랐나요?"\n     * 복합: "강남구 시세 확인하고 대출 가능 금액도 계산해줘"\n   - 키워드: 시세, 가격, 매매가, 전세가, 월세, 시장, 동향, 평균, 지역명, 상승률, 하락률\n   - 필요한 처리: 부동산 시세 데이터 조회, 지역별 가격 분석\n\n3. **LOAN_CONSULT (대출상담)**\n   - 설명: 주택담보대출, 전세자금대출 등 금융 관련 질문\n   - 예시:\n     * 단순: "전세자금대출 한도가 얼마인가요?", "LTV가 뭔가요?"\n     * 복합: "대출 한도 확인하고 금리 비교도 해주세요"\n   - 키워드: 대출, 금리, 한도, 조건, 상환, LTV, DTI, DSR, 담보, 금융, 은행\n   - 필요한 처리: 대출 상품 조회, 금리 정보 검색, 한도 계산\n\n4. **CONTRACT_CREATION (계약서작성)**\n   - 설명: 새로운 계약서나 문서를 작성해달라는 요청\n   - 예시:\n     * 단순: "임대차계약서 작성해주세요", "전세계약서 초안 만들어주세요"\n     * 복합: "계약서 작성하고 주의사항도 검토해주세요"\n   - 키워드: 작성, 만들, 생성, 초안, 계약서, 문서, 양식\n   - 필요한 처리: 문서 생성 에이전트 호출, 템플릿 기반 작성\n\n5. **CONTRACT_REVIEW (계약서검토)**\n   - 설명: 기존 계약서나 문서를 검토해달라는 요청\n   - 예시:\n     * 단순: "이 계약서 검토해주세요", "특약사항 문제없나요?"\n     * 복합: "계약서 검토하고 수정사항도 제안해주세요"\n   - 키워드: 검토, 확인, 점검, 리뷰, 분석해, 살펴봐, 체크\n   - 필요한 처리: 문서 분석, 위험 요소 식별, 개선사항 제안\n\n6. **COMPREHENSIVE (종합분석)**\n   - 설명: 여러 측면을 종합적으로 분석해달라는 요청, 또는 복잡한 상황에 대한 해결책 요청\n   - 예시:\n     * 단순: "이 물건 전체적으로 분석해주세요"\n     * 복합: "시세, 법률, 대출 모두 검토해서 종합 의견 주세요"\n     * 해결형: "10년 거주했는데 전세금 3억을 10억으로 올려달래. 어떻게 해야 해?"\n     * 상황+해결: "집주인이 계약 갱신 거부했어. 법적으로 어떻게 대응해야 할까?"\n   - 키워드: 종합, 전체, 모든, 전반적, 종합적, 평가, 분석, 어떻게, 방법, 해결, 대처\n   - 패턴: 구체적 상황 설명 + "어떻게/방법/해결" 요청\n   - 필요한 처리: 다중 데이터 소스 통합 분석, 상황 평가, 해결책 제시\n\n7. **RISK_ANALYSIS (리스크분석)**\n   - 설명: 위험 요소나 주의사항에 대한 질문\n   - 예시:\n     * 단순: "이 계약 위험한가요?", "주의할 점 알려주세요"\n     * 복합: "리스크 분석하고 대안도 제시해주세요"\n   - 키워드: 위험, 리스크, 주의, 문제점, 조심, 걱정, 우려\n   - 필요한 처리: 위험 요소 분석, 주의사항 추출\n\n8. **UNCLEAR (불분명)**\n   - 설명: 의도를 명확히 파악하기 어려운 질문\n   - 예시: "이거 좀 봐주세요", "어떻게 해야 할까요?", "도와주세요"\n   - 처리: 추가 질문으로 의도 명확화 필요\n\n9. **IRRELEVANT (무관)**\n   - 설명: 부동산과 전혀 관련 없는 질문\n   - 예시: "날씨 어때?", "저녁 뭐 먹지?", "주식 추천해줘"\n   - 처리: 부동산 관련 질문을 유도\n\n## 복합 질문 예시와 분석 (CoT 적용):\n\n### 예시 1: "강남구 아파트 시세 알려주고 전세자금대출 가능한지도 확인해줘"\n**CoT 분석**:\n1. 구조: 두 개의 요청 ("시세" + "대출")\n2. 유형: 정보 확인형 (둘 다)\n3. 복잡도: 중 (두 가지 독립적 조회)\n4. 필요 처리: 검색 + 계산/분석\n\n**결론**:\n- 주 의도: MARKET_INQUIRY (시세 조회가 먼저 필요)\n- 부가 의도: LOAN_CONSULT (대출 확인)\n- 분해: ["강남구 아파트 시세 조회", "전세자금대출 가능 여부 확인"]\n\n### 예시 2: "이 계약서 검토해서 위험한 부분 있는지 알려주고 수정 제안도 해줘"\n**CoT 분석**:\n1. 구조: 검토 + 위험 평가 + 수정안\n2. 유형: 평가/판단형 + 해결책 요청형\n3. 복잡도: 고 (3단계 처리)\n4. 필요 처리: 검토 + 분석 + 문서 생성\n\n**결론**:\n- 주 의도: CONTRACT_REVIEW (계약서 검토)\n- 부가 의도: RISK_ANALYSIS (위험 분석)\n- 분해: ["계약서 전체 검토", "위험 요소 식별", "수정사항 제안"]\n\n### 예시 3: "집주인이 짜증나, 10년 살았는데 전세금 3억을 10억으로 올려달래. 법적으로 해결방법 알려줘"\n**CoT 분석**:\n1. 구조: 상황 설명 (10년 거주, 3억→10억) + 해결책 요청\n2. 유형: 해결책 요청형 (단순 정보 X)\n3. 복잡도: 고 (구체적 상황 + 수치 비교 + 법률 + 대응방안)\n4. 필요 처리: 법률 검색 + 상황 분석 + 해결책 제시\n\n**결론**:\n- 주 의도: COMPREHENSIVE (복잡한 상황에 대한 종합 해결)\n- 부가 의도: LEGAL_CONSULT, RISK_ANALYSIS\n- 분해: ["전세금 인상 한도 법률 조회", "3억→10억 인상의 타당성 분석", "구체적 대응 방안 제시"]\n- **이유**: "법적으로"라는 키워드가 있지만, 단순 법률 확인이 아니라 구체적 상황에 대한 해결책을 요구하므로 COMPREHENSIVE\n\n### 예시 4: "전세금 인상률 상한이 얼마야?"\n**CoT 분석**:\n1. 구조: 단순 사실 확인\n2. 유형: 정보 확인형\n3. 복잡도: 저 (단일 개념)\n4. 필요 처리: 검색만\n\n**결론**:\n- 주 의도: LEGAL_CONSULT (법률 정보 조회)\n- 부가 의도: 없음\n- 분해: 필요 없음\n\n## 응답 형식 (JSON 형식으로 응답):\n\n```json\n{\n    "intent": "LEGAL_CONSULT",\n    "confidence": 0.9,\n    "keywords": ["전세금", "인상", "제한"],\n    "sub_intents": [],\n    "is_compound": false,\n    "decomposed_tasks": [],\n    "entities": {\n        "location": "강남구",\n        "price": "5억",\n        "contract_type": "전세",\n        "date": "2024년",\n        "area": "84㎡",\n        "action_verbs": ["확인", "검토"]\n    },\n    "reasoning": "전세금 인상에 대한 법률 질문이므로 LEGAL_CONSULT로 분류"\n}\n```\n\n응답 규칙:\n- intent: 위 9개 카테고리 중 하나 (대문자_언더스코어 형식)\n- confidence: 0.0~1.0 (0.8 이상이면 매우 확실, 0.5 미만이면 불확실)\n- keywords: 추출된 주요 키워드 목록\n- sub_intents: 복합 질문일 경우 부가적인 의도들\n- is_compound: 복합 질문 여부 (true/false)\n- decomposed_tasks: 복합 질문을 분해한 개별 작업들\n- entities: 추출된 엔티티 정보\n- reasoning: **반드시 CoT 5단계를 거쳐 분석한 과정을 포함** (구조 파악 → 유형 판단 → 복잡도 평가 → 필요 처리 → 최종 검증)\n\n## reasoning 작성 예시:\n"1단계(구조): 상황 설명(10년 거주, 3억→10억) + 해결책 요청 포함.\n2단계(유형): 해결책 요청형 - 단순 정보가 아닌 대응방안 필요.\n3단계(복잡도): 고 - 구체적 수치 비교와 복잡한 상황.\n4단계(처리): 법률 검색 + 상황 분석 + 해결책 제시 필요.\n5단계(검증): LEGAL_CONSULT만으로는 불충분, 종합적 분석 필요 → COMPREHENSIVE 선택"\n\n## 판단 가이드:\n- 여러 의도가 섞여있다면, 가장 주된 의도를 intent에, 나머지를 sub_intents에 기록\n- "그리고", "또한", "함께", "같이" 등의 연결어가 있으면 복합 질문일 가능성 높음\n- 법률 관련 키워드가 있으면 LEGAL_CONSULT 우선\n- 가격/시세 언급이 명확하면 MARKET_INQUIRY\n- 계약서라는 단어와 함께 "작성/만들기"가 있으면 CONTRACT_CREATION\n- 계약서라는 단어와 함께 "검토/확인"이 있으면 CONTRACT_REVIEW\n- 불확실하면 confidence를 낮게 설정하고 UNCLEAR 선택\n- 복합 질문은 is_compound를 true로 설정하고 개별 작업으로 분해\n\n분석할 질문: 임대차보호법 적용 대상은?'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 15:56:18,822 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 15:56:18,822 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 15:56:18,823 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 15:56:18,823 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 15:56:18,823 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 15:56:18,823 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 15:56:29,157 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 06:56:29 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'10061'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'10082'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9989'), (b'x-ratelimit-remaining-tokens', b'197247'), (b'x-ratelimit-reset-requests', b'1m32.544s'), (b'x-ratelimit-reset-tokens', b'825ms'), (b'x-request-id', b'req_8a8400c4a8434561a58445ea2910ab98'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b04b58da63091-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 15:56:29,158 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 15:56:29,158 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 15:56:29,158 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 15:56:29,158 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 15:56:29,158 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 15:56:29,158 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 06:56:29 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '10061', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '10082', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9989', 'x-ratelimit-remaining-tokens': '197247', 'x-ratelimit-reset-requests': '1m32.544s', 'x-ratelimit-reset-tokens': '825ms', 'x-request-id': 'req_8a8400c4a8434561a58445ea2910ab98', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b04b58da63091-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 15:56:29,158 - openai._base_client - DEBUG - request_id: req_8a8400c4a8434561a58445ea2910ab98
2025-10-05 15:56:29,159 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: intent_analysis | Model: gpt-4o-mini-2024-07-18 | Tokens: 3389 (prompt: 3179, completion: 210)
2025-10-05 15:56:29,159 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM Intent Analysis Result: {'intent': 'LEGAL_CONSULT', 'confidence': 0.9, 'keywords': ['임대차보호법', '적용', '대상'], 'sub_intents': [], 'is_compound': False, 'decomposed_tasks': [], 'entities': {'law': '임대차보호법', 'action_verbs': ['적용', '확인']}, 'reasoning': '1단계(구조): 단순 정보 요청으로, 임대차보호법의 적용 대상을 묻고 있음. 2단계(유형): 정보 확인형 - 법률에 대한 사실 확인이 필요. 3단계(복잡도): 저 - 단일 개념 확인. 4단계(처리): 법률 데이터베이스 검색 필요. 5단계(검증): 단순 정보 제공으로 충분하므로 LEGAL_CONSULT로 분류.'}
2025-10-05 15:56:29,159 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-8c0ee9ca-b8e9-48de-9caa-29ba264e6207', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 Agent 선택 전문가입니다.\n사용자의 요청에 가장 적합한 Agent/Team을 선택하는 것이 목표입니다.\n\n## 현재 상황\n\n**사용자 질문:** 임대차보호법 적용 대상은?\n**분석된 의도:** 법률상담\n**추출된 키워드:** [\'임대차보호법\', \'적용\', \'대상\']\n\n## 사용 가능한 Agent/Team 정보\n\n{\'search_team\': {\'name\': \'search_team\', \'capabilities\': \'법률 검색, 부동산 시세 조회, 대출 상품 검색\', \'tools\': [\'legal_search\', \'market_data\', \'loan_data\'], \'use_cases\': [\'법률 상담\', \'시세 조회\', \'대출 정보\']}, \'analysis_team\': {\'name\': \'analysis_team\', \'capabilities\': \'데이터 분석, 리스크 평가, 인사이트 생성, 추천\', \'tools\': [\'data_analyzer\', \'risk_evaluator\'], \'use_cases\': [\'시장 분석\', \'리스크 평가\', \'투자 분석\']}, \'document_team\': {\'name\': \'document_team\', \'capabilities\': \'계약서 작성, 문서 생성, 문서 검토\', \'tools\': [\'document_generator\', \'contract_reviewer\'], \'use_cases\': [\'계약서 작성\', \'문서 검토\']}}\n\n## Agent 역할 및 상세 가이드\n\n### 1. search_team (검색 팀)\n- **주요 기능**: 정보 검색 및 데이터 수집\n- **전문 분야**:\n  * 법률 정보 검색 (전세법, 임대차보호법, 부동산 관련 법규)\n  * 부동산 시세 조회 (매매가, 전세가, 월세, 실거래가)\n  * 대출 상품 정보 검색 (금리, 한도, 조건)\n  * 지역 정보 및 인프라 조회\n- **도구**: legal_search, market_data, loan_data\n- **적합한 작업**: 정보 조회, 데이터 수집, 법률 확인, 시세 파악\n- **예시**:\n  * "전세금 5% 인상 가능한가요?"\n  * "강남구 아파트 전세 시세"\n  * "전세자금대출 한도 얼마?"\n\n### 2. analysis_team (분석 팀)\n- **주요 기능**: 데이터 분석 및 평가\n- **전문 분야**:\n  * 시장 동향 분석 (상승률, 하락률, 추세)\n  * 리스크 평가 (계약, 투자 위험도)\n  * 투자 수익률 계산 (ROI, 월세 수익률)\n  * 대출 한도 및 조건 분석 (LTV, DTI, DSR)\n  * 비교 분석 (지역별, 상품별)\n- **도구**: data_analyzer, risk_evaluator, calculator\n- **적합한 작업**: 데이터 분석, 리스크 평가, 계산, 비교, 예측\n- **의존성**: 보통 search_team의 데이터가 필요\n- **예시**:\n  * "이 지역 투자 가치 분석해줘"\n  * "계약 리스크 평가해줘"\n  * "대출 가능 금액 계산해줘"\n\n### 3. document_team (문서 팀)\n- **주요 기능**: 문서 생성 및 관리\n- **전문 분야**:\n  * 계약서 작성 (임대차, 매매, 전세)\n  * 문서 템플릿 관리\n  * 특약사항 생성\n  * 계약서 수정안 작성\n  * 법률 문서 검토\n- **도구**: document_generator, contract_template, contract_reviewer\n- **적합한 작업**: 문서 작성, 계약서 생성, 문서 수정, 검토\n- **예시**:\n  * "임대차계약서 작성해줘"\n  * "특약사항 추가해줘"\n  * "계약서 수정안 만들어줘"\n\n## Chain-of-Thought Agent 선택 프로세스\n\n다음 단계를 **순서대로** 따라 최적의 Agent 조합을 선택하세요:\n\n### 1단계: 질문 요구사항 파악\n- 단순 정보 조회인가? → search_team만 필요\n- 판단/평가가 필요한가? → search + analysis 필요\n- 해결책 제시가 필요한가? → search + analysis 필요\n- 문서 생성이 필요한가? → document_team 추가\n\n### 2단계: 작업 복잡도 판단\n- **단순** (검색만): "~이 뭐야?", "~알려줘" → search_team\n- **중간** (검색+판단): "~괜찮아?", "~적절해?" → search + analysis\n- **복잡** (종합 해결): 구체적 상황 + "어떻게 해야 해?" → search + analysis\n\n### 3단계: 의존성 분석\n- 독립적 작업: 단일 팀으로 처리 가능\n- 순차적 의존: 이전 결과 필요 → 여러 팀 순서대로\n- 병렬 가능: 동시 조회 가능 → coordination: "parallel"\n\n### 4단계: 최종 검증\n- 선택한 팀들로 질문에 완전히 답변 가능한가?\n- 불필요한 팀이 포함되지 않았는가?\n- 순서가 논리적인가? (데이터 흐름 고려)\n\n### 중요 원칙:\n- **법률 키워드만으로 판단하지 말 것**: "법적으로 어떻게 해야 해?" = 법률 검색 + 분석 필요\n- **상황 설명 + 해결책 요청** = 반드시 analysis_team 포함\n- **구체적 수치 비교** (3억→10억 같은) = analysis_team 필요\n\n## 의도별 Agent 매핑 가이드 (기본 가이드 - CoT로 조정 가능)\n\n| 의도 (Intent) | 기본 조합 | 상황별 조정 |\n|--------------|-----------|-------------|\n| LEGAL_CONSULT | ["search_team"] | 해결책 요청시 → + analysis_team |\n| MARKET_INQUIRY | ["search_team"] | 비교/평가시 → + analysis_team |\n| LOAN_CONSULT | ["search_team", "analysis_team"] | 계산 필수 |\n| CONTRACT_CREATION | ["document_team"] | 검토 후 작성 → search + document |\n| CONTRACT_REVIEW | ["search_team", "analysis_team"] | 법률 검토 + 리스크 분석 |\n| COMPREHENSIVE | ["search_team", "analysis_team"] | **항상 분석 포함** |\n| RISK_ANALYSIS | ["analysis_team"] | 법률 근거 필요시 → search + analysis |\n| UNCLEAR | ["search_team", "analysis_team"] | 포괄적 대응 |\n\n**중요**: 위 매핑은 **기본 가이드**일 뿐입니다.\n실제 질문의 내용(CoT 분석 결과)에 따라 조정하세요!\n\n## 복합 질문 처리 예시 (CoT 적용)\n\n### 예시 1: 순차적 처리\n질문: "강남구 시세 확인하고 투자 가치 분석해줘"\n**CoT 분석**:\n1. 요구사항: 시세 조회 + 투자 가치 평가\n2. 복잡도: 중간 (검색 + 분석)\n3. 의존성: 시세 데이터 → 투자 분석 (순차)\n4. 검증: search만으로는 "투자 가치 평가" 불가능\n\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "1단계: 시세 조회+투자 평가 필요. 2단계: 중간 복잡도. 3단계: 순차 의존. 4단계: search로 시세 수집 후 analysis로 투자 가치 평가 필요",\n    "coordination": "sequential"\n}\n```\n\n### 예시 2: 단순 정보 조회\n질문: "전세금 인상률 한도가 얼마야?"\n**CoT 분석**:\n1. 요구사항: 단순 사실 확인\n2. 복잡도: 낮음 (정보 확인형)\n3. 의존성: 없음\n4. 검증: search_team만으로 충분\n\n```json\n{\n    "selected_agents": ["search_team"],\n    "reasoning": "1단계: 단순 정보 조회. 2단계: 저복잡도. 3단계: 독립적. 4단계: 법률 검색만으로 답변 가능",\n    "coordination": "single"\n}\n```\n\n### 예시 3: 해결책 요청 (핵심 예시!)\n질문: "집주인이 전세금 3억을 10억으로 올려달래. 법적으로 어떻게 해야 해?"\n의도: COMPREHENSIVE\n**CoT 분석**:\n1. 요구사항: 상황 설명 + 해결책 요청\n2. 복잡도: 높음 (구체적 상황 + 수치 비교)\n3. 의존성: 법률 확인 → 상황 분석 → 해결책 제시\n4. 검증: "법적으로"만 보고 search만 선택하면 불충분! 해결책 제시 필요\n\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "1단계: 법률 + 상황 분석 + 해결책 필요. 2단계: 고복잡도(3억→10억 비정상). 3단계: 순차(법률 확인 후 타당성 분석). 4단계: \'어떻게 해야\' = 단순 법률 조회 아님, 분석 필수",\n    "coordination": "sequential",\n    "confidence": 0.95\n}\n```\n\n## 응답 형식 (JSON)\n\n```json\n{\n    "selected_agents": ["선택된 agent/team 목록"],\n    "reasoning": "선택 이유를 구체적으로 설명. 각 Agent의 역할과 처리 순서 포함",\n    "coordination": "single/sequential/parallel/pipeline",\n    "dependencies": {"agent2": ["agent1"]},\n    "estimated_time": 30,\n    "confidence": 0.9\n}\n```\n\n## 선택 가이드라인\n\n1. **최소 Agent 원칙**: 가능한 적은 수의 Agent로 처리\n2. **전문성 우선**: 해당 작업에 가장 전문적인 Agent 선택\n3. **효율성 고려**: 병렬 처리 가능한 경우 명시\n4. **의존성 관리**: 데이터 흐름을 고려한 순서 지정\n5. **폴백 전략**: 불확실한 경우 ["search_team", "analysis_team"] 조합\n\n## 주의사항\n\n- selected_agents는 반드시 배열 형태\n- Agent 이름은 정확히: "search_team", "analysis_team", "document_team"\n- 최소 1개, 최대 3개 선택\n- 순서는 실행 우선순위 (앞에 있을수록 먼저 실행)\n- reasoning은 상세하고 논리적으로 작성\n- coordination 필드로 실행 방식 명시\n- 복합 질문의 경우 의존성 관계 명확히 표시'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 15:56:29,160 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 15:56:29,160 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 15:56:29,160 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 15:56:29,160 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 15:56:29,160 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 15:56:29,160 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 15:56:34,072 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 06:56:34 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'4659'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'4678'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9989'), (b'x-ratelimit-remaining-tokens', b'197891'), (b'x-ratelimit-reset-requests', b'1m30.849s'), (b'x-ratelimit-reset-tokens', b'632ms'), (b'x-request-id', b'req_a59b0832f6d643ccbea5a8115428bb99'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b04f61e7c3091-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 15:56:34,072 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 15:56:34,073 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 15:56:34,073 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 15:56:34,073 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 15:56:34,073 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 15:56:34,073 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 06:56:34 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '4659', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '4678', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9989', 'x-ratelimit-remaining-tokens': '197891', 'x-ratelimit-reset-requests': '1m30.849s', 'x-ratelimit-reset-tokens': '632ms', 'x-request-id': 'req_a59b0832f6d643ccbea5a8115428bb99', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b04f61e7c3091-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 15:56:34,073 - openai._base_client - DEBUG - request_id: req_a59b0832f6d643ccbea5a8115428bb99
2025-10-05 15:56:34,074 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: agent_selection | Model: gpt-4o-mini-2024-07-18 | Tokens: 2538 (prompt: 2358, completion: 180)
2025-10-05 15:56:34,074 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM agent selection reasoning: 1단계: 임대차보호법의 적용 대상에 대한 법률 정보 검색이 필요하고, 법률적 해석이나 적용 가능성에 대한 판단이 요구됨. 2단계: 중간 복잡도로, 법률 정보 검색 후 그에 대한 분석이 필요함. 3단계: 법률 정보를 검색한 후, 그 정보를 바탕으로 적용 대상을 분석해야 하므로 순차적 의존성이 있음. 4단계: 단순 법률 검색만으로는 충분하지 않으며, 분석이 필수적임.
2025-10-05 15:56:34,074 - app.service_agent.cognitive_agents.planning_agent - INFO - ✅ Primary LLM selected agents: ['search_team', 'analysis_team']
2025-10-05 15:56:34,074 - __main__ - INFO -   의도: 법률상담
2025-10-05 15:56:34,074 - __main__ - INFO -   신뢰도: 0.90
2025-10-05 15:56:34,074 - __main__ - INFO -   추천 Agent: ['search_team', 'analysis_team']
2025-10-05 15:56:34,074 - __main__ - INFO - 
[Step 2] Query Decomposition...
2025-10-05 15:56:34,074 - app.service_agent.cognitive_agents.query_decomposer - INFO - Decomposing query: 임대차보호법 적용 대상은?...
2025-10-05 15:56:34,074 - app.service_agent.cognitive_agents.query_decomposer - INFO - Query is simple, no decomposition needed
2025-10-05 15:56:34,074 - __main__ - INFO -   복합 질문: False
2025-10-05 15:56:34,074 - __main__ - INFO -   작업 수: 1
2025-10-05 15:56:34,074 - __main__ - INFO -   실행 모드: sequential
2025-10-05 15:56:34,074 - __main__ - INFO - 
[Step 3] Execution Plan 생성...
2025-10-05 15:56:34,074 - app.service_agent.cognitive_agents.planning_agent - INFO - Creating execution plan for intent: 법률상담
2025-10-05 15:56:34,074 - app.service_agent.cognitive_agents.planning_agent - WARNING - AgentRegistry is empty, using default teams
2025-10-05 15:56:34,074 - app.service_agent.cognitive_agents.planning_agent - DEBUG - Suggested agents: ['search_team', 'analysis_team']
2025-10-05 15:56:34,074 - app.service_agent.cognitive_agents.planning_agent - DEBUG - Available agents: ['search_team', 'analysis_team', 'document_team']
2025-10-05 15:56:34,074 - app.service_agent.cognitive_agents.planning_agent - INFO - Selected agents/teams for execution: ['search_team', 'analysis_team']
2025-10-05 15:56:34,074 - __main__ - INFO -   전략: sequential
2025-10-05 15:56:34,074 - __main__ - INFO -   단계 수: 2
2025-10-05 15:56:34,074 - __main__ - INFO - 
✓ 테스트 성공 (소요시간: 15.25초)
2025-10-05 15:56:34,074 - __main__ - INFO - 
================================================================================
2025-10-05 15:56:34,074 - __main__ - INFO - [12] 단일 질문 테스트: S012
2025-10-05 15:56:34,074 - __main__ - INFO - 질문: 마포구 오피스텔 전세 시세는?
2025-10-05 15:56:34,074 - __main__ - INFO - ================================================================================
2025-10-05 15:56:34,074 - __main__ - INFO - 
[Step 1] Intent 분석...
2025-10-05 15:56:34,074 - app.service_agent.cognitive_agents.planning_agent - INFO - Analyzing intent for query: 마포구 오피스텔 전세 시세는?...
2025-10-05 15:56:34,075 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-cd981076-754a-4366-b0f3-1fc7a27626b3', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 의도 분석 전문가입니다.\n사용자의 질문을 정확히 이해하고, 어떤 종류의 도움이 필요한지 분류해야 합니다.\n\n## Chain-of-Thought 분석 프로세스\n\n질문을 분석할 때 다음 단계를 **순서대로** 따르세요:\n\n### 1단계: 질문 구조 파악\n- 단순 정보 요청인가? (예: "~이 뭐야?", "~알려줘")\n- 상황 설명이 포함되어 있는가? (배경, 현재 상태)\n- 구체적 수치나 데이터가 있는가? (금액, 비율, 기간 등)\n- 문제 해결을 요구하는가? (예: "어떻게 해야 해?", "방법 알려줘")\n\n### 2단계: 요청 유형 판단\n- **정보 확인형**: 사실, 개념, 규정 확인 → 검색만으로 충분\n- **평가/판단형**: "괜찮아?", "적절해?", "문제있어?" → 검색 + 분석 필요\n- **해결책 요청형**: "어떻게?", "방법?", "대처?" → 검색 + 분석 + 제안 필요\n- **비교/선택형**: "A vs B", "어느게 나아?" → 검색 + 분석(비교) 필요\n\n### 3단계: 복잡도 평가\n- **저**: 단일 개념/사실 확인 (예: "전세금 인상률 한도?")\n- **중**: 특정 상황 + 판단 (예: "3억을 5억으로 올려달래. 가능해?")\n- **고**: 복잡한 상황 + 여러 조건 + 해결책 (예: "10년 거주, 3억→10억 요구. 어떻게 해야 해?")\n\n### 4단계: 필요한 처리 결정\n- **검색만**: 정보 확인형 + 저복잡도\n- **검색+분석**: 평가/판단형 OR 중복잡도 OR 수치 비교 포함\n- **종합처리**: 해결책 요청형 OR 고복잡도 OR 여러 조건 동시 고려\n\n### 5단계: 최종 검증\n- 선택한 의도로 사용자 질문에 완전히 답변 가능한가?\n- 단순 정보 제공으로 끝나는가, 아니면 추가 분석/판단이 필요한가?\n- 상황 설명이 있으면서 "해결", "방법", "어떻게" 등이 있으면 → COMPREHENSIVE 고려\n\n## 중요: 복합 질문 처리\n복합적인 질문(여러 의도가 섞인 질문)의 경우, 가장 핵심적인 의도를 파악하되,\nsub_intents 필드에 부가적인 의도들도 함께 기록해주세요.\n\n**특히 주의**:\n- 법률 키워드가 있어도, "해결방법", "어떻게 해야" 같은 표현이 있으면 단순 LEGAL_CONSULT가 아닐 수 있음\n- 구체적 상황(금액, 기간 등) + 해결책 요구 = COMPREHENSIVE 또는 복합 의도로 분류\n\n## 분류 카테고리 설명:\n\n1. **LEGAL_CONSULT (법률상담)**\n   - 설명: 부동산 관련 법률, 권리, 의무에 대한 질문\n   - 예시:\n     * 단순: "전세금 5% 인상이 가능한가요?", "임대차계약 갱신 거부할 수 있나요?"\n     * 복합: "전세금 인상 가능한지 확인하고 법적 근거도 알려주세요"\n   - 키워드: 법, 전세, 임대, 보증금, 계약, 권리, 의무, 갱신, 임차인, 임대인, 법률, 규정, 조항\n   - 필요한 처리: 법률 데이터베이스 검색, 관련 법조항 찾기\n\n2. **MARKET_INQUIRY (시세조회)**\n   - 설명: 부동산 시장 가격, 시세, 거래 동향에 대한 질문\n   - 예시:\n     * 단순: "강남구 아파트 전세 시세 알려주세요", "서초동 매매가 얼마나 올랐나요?"\n     * 복합: "강남구 시세 확인하고 대출 가능 금액도 계산해줘"\n   - 키워드: 시세, 가격, 매매가, 전세가, 월세, 시장, 동향, 평균, 지역명, 상승률, 하락률\n   - 필요한 처리: 부동산 시세 데이터 조회, 지역별 가격 분석\n\n3. **LOAN_CONSULT (대출상담)**\n   - 설명: 주택담보대출, 전세자금대출 등 금융 관련 질문\n   - 예시:\n     * 단순: "전세자금대출 한도가 얼마인가요?", "LTV가 뭔가요?"\n     * 복합: "대출 한도 확인하고 금리 비교도 해주세요"\n   - 키워드: 대출, 금리, 한도, 조건, 상환, LTV, DTI, DSR, 담보, 금융, 은행\n   - 필요한 처리: 대출 상품 조회, 금리 정보 검색, 한도 계산\n\n4. **CONTRACT_CREATION (계약서작성)**\n   - 설명: 새로운 계약서나 문서를 작성해달라는 요청\n   - 예시:\n     * 단순: "임대차계약서 작성해주세요", "전세계약서 초안 만들어주세요"\n     * 복합: "계약서 작성하고 주의사항도 검토해주세요"\n   - 키워드: 작성, 만들, 생성, 초안, 계약서, 문서, 양식\n   - 필요한 처리: 문서 생성 에이전트 호출, 템플릿 기반 작성\n\n5. **CONTRACT_REVIEW (계약서검토)**\n   - 설명: 기존 계약서나 문서를 검토해달라는 요청\n   - 예시:\n     * 단순: "이 계약서 검토해주세요", "특약사항 문제없나요?"\n     * 복합: "계약서 검토하고 수정사항도 제안해주세요"\n   - 키워드: 검토, 확인, 점검, 리뷰, 분석해, 살펴봐, 체크\n   - 필요한 처리: 문서 분석, 위험 요소 식별, 개선사항 제안\n\n6. **COMPREHENSIVE (종합분석)**\n   - 설명: 여러 측면을 종합적으로 분석해달라는 요청, 또는 복잡한 상황에 대한 해결책 요청\n   - 예시:\n     * 단순: "이 물건 전체적으로 분석해주세요"\n     * 복합: "시세, 법률, 대출 모두 검토해서 종합 의견 주세요"\n     * 해결형: "10년 거주했는데 전세금 3억을 10억으로 올려달래. 어떻게 해야 해?"\n     * 상황+해결: "집주인이 계약 갱신 거부했어. 법적으로 어떻게 대응해야 할까?"\n   - 키워드: 종합, 전체, 모든, 전반적, 종합적, 평가, 분석, 어떻게, 방법, 해결, 대처\n   - 패턴: 구체적 상황 설명 + "어떻게/방법/해결" 요청\n   - 필요한 처리: 다중 데이터 소스 통합 분석, 상황 평가, 해결책 제시\n\n7. **RISK_ANALYSIS (리스크분석)**\n   - 설명: 위험 요소나 주의사항에 대한 질문\n   - 예시:\n     * 단순: "이 계약 위험한가요?", "주의할 점 알려주세요"\n     * 복합: "리스크 분석하고 대안도 제시해주세요"\n   - 키워드: 위험, 리스크, 주의, 문제점, 조심, 걱정, 우려\n   - 필요한 처리: 위험 요소 분석, 주의사항 추출\n\n8. **UNCLEAR (불분명)**\n   - 설명: 의도를 명확히 파악하기 어려운 질문\n   - 예시: "이거 좀 봐주세요", "어떻게 해야 할까요?", "도와주세요"\n   - 처리: 추가 질문으로 의도 명확화 필요\n\n9. **IRRELEVANT (무관)**\n   - 설명: 부동산과 전혀 관련 없는 질문\n   - 예시: "날씨 어때?", "저녁 뭐 먹지?", "주식 추천해줘"\n   - 처리: 부동산 관련 질문을 유도\n\n## 복합 질문 예시와 분석 (CoT 적용):\n\n### 예시 1: "강남구 아파트 시세 알려주고 전세자금대출 가능한지도 확인해줘"\n**CoT 분석**:\n1. 구조: 두 개의 요청 ("시세" + "대출")\n2. 유형: 정보 확인형 (둘 다)\n3. 복잡도: 중 (두 가지 독립적 조회)\n4. 필요 처리: 검색 + 계산/분석\n\n**결론**:\n- 주 의도: MARKET_INQUIRY (시세 조회가 먼저 필요)\n- 부가 의도: LOAN_CONSULT (대출 확인)\n- 분해: ["강남구 아파트 시세 조회", "전세자금대출 가능 여부 확인"]\n\n### 예시 2: "이 계약서 검토해서 위험한 부분 있는지 알려주고 수정 제안도 해줘"\n**CoT 분석**:\n1. 구조: 검토 + 위험 평가 + 수정안\n2. 유형: 평가/판단형 + 해결책 요청형\n3. 복잡도: 고 (3단계 처리)\n4. 필요 처리: 검토 + 분석 + 문서 생성\n\n**결론**:\n- 주 의도: CONTRACT_REVIEW (계약서 검토)\n- 부가 의도: RISK_ANALYSIS (위험 분석)\n- 분해: ["계약서 전체 검토", "위험 요소 식별", "수정사항 제안"]\n\n### 예시 3: "집주인이 짜증나, 10년 살았는데 전세금 3억을 10억으로 올려달래. 법적으로 해결방법 알려줘"\n**CoT 분석**:\n1. 구조: 상황 설명 (10년 거주, 3억→10억) + 해결책 요청\n2. 유형: 해결책 요청형 (단순 정보 X)\n3. 복잡도: 고 (구체적 상황 + 수치 비교 + 법률 + 대응방안)\n4. 필요 처리: 법률 검색 + 상황 분석 + 해결책 제시\n\n**결론**:\n- 주 의도: COMPREHENSIVE (복잡한 상황에 대한 종합 해결)\n- 부가 의도: LEGAL_CONSULT, RISK_ANALYSIS\n- 분해: ["전세금 인상 한도 법률 조회", "3억→10억 인상의 타당성 분석", "구체적 대응 방안 제시"]\n- **이유**: "법적으로"라는 키워드가 있지만, 단순 법률 확인이 아니라 구체적 상황에 대한 해결책을 요구하므로 COMPREHENSIVE\n\n### 예시 4: "전세금 인상률 상한이 얼마야?"\n**CoT 분석**:\n1. 구조: 단순 사실 확인\n2. 유형: 정보 확인형\n3. 복잡도: 저 (단일 개념)\n4. 필요 처리: 검색만\n\n**결론**:\n- 주 의도: LEGAL_CONSULT (법률 정보 조회)\n- 부가 의도: 없음\n- 분해: 필요 없음\n\n## 응답 형식 (JSON 형식으로 응답):\n\n```json\n{\n    "intent": "LEGAL_CONSULT",\n    "confidence": 0.9,\n    "keywords": ["전세금", "인상", "제한"],\n    "sub_intents": [],\n    "is_compound": false,\n    "decomposed_tasks": [],\n    "entities": {\n        "location": "강남구",\n        "price": "5억",\n        "contract_type": "전세",\n        "date": "2024년",\n        "area": "84㎡",\n        "action_verbs": ["확인", "검토"]\n    },\n    "reasoning": "전세금 인상에 대한 법률 질문이므로 LEGAL_CONSULT로 분류"\n}\n```\n\n응답 규칙:\n- intent: 위 9개 카테고리 중 하나 (대문자_언더스코어 형식)\n- confidence: 0.0~1.0 (0.8 이상이면 매우 확실, 0.5 미만이면 불확실)\n- keywords: 추출된 주요 키워드 목록\n- sub_intents: 복합 질문일 경우 부가적인 의도들\n- is_compound: 복합 질문 여부 (true/false)\n- decomposed_tasks: 복합 질문을 분해한 개별 작업들\n- entities: 추출된 엔티티 정보\n- reasoning: **반드시 CoT 5단계를 거쳐 분석한 과정을 포함** (구조 파악 → 유형 판단 → 복잡도 평가 → 필요 처리 → 최종 검증)\n\n## reasoning 작성 예시:\n"1단계(구조): 상황 설명(10년 거주, 3억→10억) + 해결책 요청 포함.\n2단계(유형): 해결책 요청형 - 단순 정보가 아닌 대응방안 필요.\n3단계(복잡도): 고 - 구체적 수치 비교와 복잡한 상황.\n4단계(처리): 법률 검색 + 상황 분석 + 해결책 제시 필요.\n5단계(검증): LEGAL_CONSULT만으로는 불충분, 종합적 분석 필요 → COMPREHENSIVE 선택"\n\n## 판단 가이드:\n- 여러 의도가 섞여있다면, 가장 주된 의도를 intent에, 나머지를 sub_intents에 기록\n- "그리고", "또한", "함께", "같이" 등의 연결어가 있으면 복합 질문일 가능성 높음\n- 법률 관련 키워드가 있으면 LEGAL_CONSULT 우선\n- 가격/시세 언급이 명확하면 MARKET_INQUIRY\n- 계약서라는 단어와 함께 "작성/만들기"가 있으면 CONTRACT_CREATION\n- 계약서라는 단어와 함께 "검토/확인"이 있으면 CONTRACT_REVIEW\n- 불확실하면 confidence를 낮게 설정하고 UNCLEAR 선택\n- 복합 질문은 is_compound를 true로 설정하고 개별 작업으로 분해\n\n분석할 질문: 마포구 오피스텔 전세 시세는?'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 15:56:34,075 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 15:56:34,075 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 15:56:34,076 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 15:56:34,076 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 15:56:34,076 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 15:56:34,076 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 15:56:37,839 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 06:56:37 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'3557'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'3582'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9989'), (b'x-ratelimit-remaining-tokens', b'197246'), (b'x-ratelimit-reset-requests', b'1m34.891s'), (b'x-ratelimit-reset-tokens', b'826ms'), (b'x-request-id', b'req_bbb2724ef68f4f77aaa5d3dc1eb328b4'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b0514dcf03091-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 15:56:37,840 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 15:56:37,840 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 15:56:37,845 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 15:56:37,845 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 15:56:37,845 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 15:56:37,845 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 06:56:37 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '3557', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '3582', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9989', 'x-ratelimit-remaining-tokens': '197246', 'x-ratelimit-reset-requests': '1m34.891s', 'x-ratelimit-reset-tokens': '826ms', 'x-request-id': 'req_bbb2724ef68f4f77aaa5d3dc1eb328b4', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b0514dcf03091-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 15:56:37,846 - openai._base_client - DEBUG - request_id: req_bbb2724ef68f4f77aaa5d3dc1eb328b4
2025-10-05 15:56:37,846 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: intent_analysis | Model: gpt-4o-mini-2024-07-18 | Tokens: 3388 (prompt: 3182, completion: 206)
2025-10-05 15:56:37,846 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM Intent Analysis Result: {'intent': 'MARKET_INQUIRY', 'confidence': 0.95, 'keywords': ['마포구', '오피스텔', '전세', '시세'], 'sub_intents': [], 'is_compound': False, 'decomposed_tasks': [], 'entities': {'location': '마포구', 'property_type': '오피스텔', 'contract_type': '전세'}, 'reasoning': "1단계(구조): 단순 정보 요청으로 '전세 시세'에 대한 질문. 2단계(유형): 정보 확인형 - 시세에 대한 사실 확인. 3단계(복잡도): 저 - 단일 개념 확인. 4단계(처리): 시세 데이터 조회 필요. 5단계(검증): 단순 정보 제공으로 충분하므로 MARKET_INQUIRY로 분류."}
2025-10-05 15:56:37,846 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-ff508022-1430-4a6f-ad6d-5725befa4001', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 Agent 선택 전문가입니다.\n사용자의 요청에 가장 적합한 Agent/Team을 선택하는 것이 목표입니다.\n\n## 현재 상황\n\n**사용자 질문:** 마포구 오피스텔 전세 시세는?\n**분석된 의도:** 시세조회\n**추출된 키워드:** [\'마포구\', \'오피스텔\', \'전세\', \'시세\']\n\n## 사용 가능한 Agent/Team 정보\n\n{\'search_team\': {\'name\': \'search_team\', \'capabilities\': \'법률 검색, 부동산 시세 조회, 대출 상품 검색\', \'tools\': [\'legal_search\', \'market_data\', \'loan_data\'], \'use_cases\': [\'법률 상담\', \'시세 조회\', \'대출 정보\']}, \'analysis_team\': {\'name\': \'analysis_team\', \'capabilities\': \'데이터 분석, 리스크 평가, 인사이트 생성, 추천\', \'tools\': [\'data_analyzer\', \'risk_evaluator\'], \'use_cases\': [\'시장 분석\', \'리스크 평가\', \'투자 분석\']}, \'document_team\': {\'name\': \'document_team\', \'capabilities\': \'계약서 작성, 문서 생성, 문서 검토\', \'tools\': [\'document_generator\', \'contract_reviewer\'], \'use_cases\': [\'계약서 작성\', \'문서 검토\']}}\n\n## Agent 역할 및 상세 가이드\n\n### 1. search_team (검색 팀)\n- **주요 기능**: 정보 검색 및 데이터 수집\n- **전문 분야**:\n  * 법률 정보 검색 (전세법, 임대차보호법, 부동산 관련 법규)\n  * 부동산 시세 조회 (매매가, 전세가, 월세, 실거래가)\n  * 대출 상품 정보 검색 (금리, 한도, 조건)\n  * 지역 정보 및 인프라 조회\n- **도구**: legal_search, market_data, loan_data\n- **적합한 작업**: 정보 조회, 데이터 수집, 법률 확인, 시세 파악\n- **예시**:\n  * "전세금 5% 인상 가능한가요?"\n  * "강남구 아파트 전세 시세"\n  * "전세자금대출 한도 얼마?"\n\n### 2. analysis_team (분석 팀)\n- **주요 기능**: 데이터 분석 및 평가\n- **전문 분야**:\n  * 시장 동향 분석 (상승률, 하락률, 추세)\n  * 리스크 평가 (계약, 투자 위험도)\n  * 투자 수익률 계산 (ROI, 월세 수익률)\n  * 대출 한도 및 조건 분석 (LTV, DTI, DSR)\n  * 비교 분석 (지역별, 상품별)\n- **도구**: data_analyzer, risk_evaluator, calculator\n- **적합한 작업**: 데이터 분석, 리스크 평가, 계산, 비교, 예측\n- **의존성**: 보통 search_team의 데이터가 필요\n- **예시**:\n  * "이 지역 투자 가치 분석해줘"\n  * "계약 리스크 평가해줘"\n  * "대출 가능 금액 계산해줘"\n\n### 3. document_team (문서 팀)\n- **주요 기능**: 문서 생성 및 관리\n- **전문 분야**:\n  * 계약서 작성 (임대차, 매매, 전세)\n  * 문서 템플릿 관리\n  * 특약사항 생성\n  * 계약서 수정안 작성\n  * 법률 문서 검토\n- **도구**: document_generator, contract_template, contract_reviewer\n- **적합한 작업**: 문서 작성, 계약서 생성, 문서 수정, 검토\n- **예시**:\n  * "임대차계약서 작성해줘"\n  * "특약사항 추가해줘"\n  * "계약서 수정안 만들어줘"\n\n## Chain-of-Thought Agent 선택 프로세스\n\n다음 단계를 **순서대로** 따라 최적의 Agent 조합을 선택하세요:\n\n### 1단계: 질문 요구사항 파악\n- 단순 정보 조회인가? → search_team만 필요\n- 판단/평가가 필요한가? → search + analysis 필요\n- 해결책 제시가 필요한가? → search + analysis 필요\n- 문서 생성이 필요한가? → document_team 추가\n\n### 2단계: 작업 복잡도 판단\n- **단순** (검색만): "~이 뭐야?", "~알려줘" → search_team\n- **중간** (검색+판단): "~괜찮아?", "~적절해?" → search + analysis\n- **복잡** (종합 해결): 구체적 상황 + "어떻게 해야 해?" → search + analysis\n\n### 3단계: 의존성 분석\n- 독립적 작업: 단일 팀으로 처리 가능\n- 순차적 의존: 이전 결과 필요 → 여러 팀 순서대로\n- 병렬 가능: 동시 조회 가능 → coordination: "parallel"\n\n### 4단계: 최종 검증\n- 선택한 팀들로 질문에 완전히 답변 가능한가?\n- 불필요한 팀이 포함되지 않았는가?\n- 순서가 논리적인가? (데이터 흐름 고려)\n\n### 중요 원칙:\n- **법률 키워드만으로 판단하지 말 것**: "법적으로 어떻게 해야 해?" = 법률 검색 + 분석 필요\n- **상황 설명 + 해결책 요청** = 반드시 analysis_team 포함\n- **구체적 수치 비교** (3억→10억 같은) = analysis_team 필요\n\n## 의도별 Agent 매핑 가이드 (기본 가이드 - CoT로 조정 가능)\n\n| 의도 (Intent) | 기본 조합 | 상황별 조정 |\n|--------------|-----------|-------------|\n| LEGAL_CONSULT | ["search_team"] | 해결책 요청시 → + analysis_team |\n| MARKET_INQUIRY | ["search_team"] | 비교/평가시 → + analysis_team |\n| LOAN_CONSULT | ["search_team", "analysis_team"] | 계산 필수 |\n| CONTRACT_CREATION | ["document_team"] | 검토 후 작성 → search + document |\n| CONTRACT_REVIEW | ["search_team", "analysis_team"] | 법률 검토 + 리스크 분석 |\n| COMPREHENSIVE | ["search_team", "analysis_team"] | **항상 분석 포함** |\n| RISK_ANALYSIS | ["analysis_team"] | 법률 근거 필요시 → search + analysis |\n| UNCLEAR | ["search_team", "analysis_team"] | 포괄적 대응 |\n\n**중요**: 위 매핑은 **기본 가이드**일 뿐입니다.\n실제 질문의 내용(CoT 분석 결과)에 따라 조정하세요!\n\n## 복합 질문 처리 예시 (CoT 적용)\n\n### 예시 1: 순차적 처리\n질문: "강남구 시세 확인하고 투자 가치 분석해줘"\n**CoT 분석**:\n1. 요구사항: 시세 조회 + 투자 가치 평가\n2. 복잡도: 중간 (검색 + 분석)\n3. 의존성: 시세 데이터 → 투자 분석 (순차)\n4. 검증: search만으로는 "투자 가치 평가" 불가능\n\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "1단계: 시세 조회+투자 평가 필요. 2단계: 중간 복잡도. 3단계: 순차 의존. 4단계: search로 시세 수집 후 analysis로 투자 가치 평가 필요",\n    "coordination": "sequential"\n}\n```\n\n### 예시 2: 단순 정보 조회\n질문: "전세금 인상률 한도가 얼마야?"\n**CoT 분석**:\n1. 요구사항: 단순 사실 확인\n2. 복잡도: 낮음 (정보 확인형)\n3. 의존성: 없음\n4. 검증: search_team만으로 충분\n\n```json\n{\n    "selected_agents": ["search_team"],\n    "reasoning": "1단계: 단순 정보 조회. 2단계: 저복잡도. 3단계: 독립적. 4단계: 법률 검색만으로 답변 가능",\n    "coordination": "single"\n}\n```\n\n### 예시 3: 해결책 요청 (핵심 예시!)\n질문: "집주인이 전세금 3억을 10억으로 올려달래. 법적으로 어떻게 해야 해?"\n의도: COMPREHENSIVE\n**CoT 분석**:\n1. 요구사항: 상황 설명 + 해결책 요청\n2. 복잡도: 높음 (구체적 상황 + 수치 비교)\n3. 의존성: 법률 확인 → 상황 분석 → 해결책 제시\n4. 검증: "법적으로"만 보고 search만 선택하면 불충분! 해결책 제시 필요\n\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "1단계: 법률 + 상황 분석 + 해결책 필요. 2단계: 고복잡도(3억→10억 비정상). 3단계: 순차(법률 확인 후 타당성 분석). 4단계: \'어떻게 해야\' = 단순 법률 조회 아님, 분석 필수",\n    "coordination": "sequential",\n    "confidence": 0.95\n}\n```\n\n## 응답 형식 (JSON)\n\n```json\n{\n    "selected_agents": ["선택된 agent/team 목록"],\n    "reasoning": "선택 이유를 구체적으로 설명. 각 Agent의 역할과 처리 순서 포함",\n    "coordination": "single/sequential/parallel/pipeline",\n    "dependencies": {"agent2": ["agent1"]},\n    "estimated_time": 30,\n    "confidence": 0.9\n}\n```\n\n## 선택 가이드라인\n\n1. **최소 Agent 원칙**: 가능한 적은 수의 Agent로 처리\n2. **전문성 우선**: 해당 작업에 가장 전문적인 Agent 선택\n3. **효율성 고려**: 병렬 처리 가능한 경우 명시\n4. **의존성 관리**: 데이터 흐름을 고려한 순서 지정\n5. **폴백 전략**: 불확실한 경우 ["search_team", "analysis_team"] 조합\n\n## 주의사항\n\n- selected_agents는 반드시 배열 형태\n- Agent 이름은 정확히: "search_team", "analysis_team", "document_team"\n- 최소 1개, 최대 3개 선택\n- 순서는 실행 우선순위 (앞에 있을수록 먼저 실행)\n- reasoning은 상세하고 논리적으로 작성\n- coordination 필드로 실행 방식 명시\n- 복합 질문의 경우 의존성 관계 명확히 표시'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 15:56:37,847 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 15:56:37,847 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 15:56:37,847 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 15:56:37,847 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 15:56:37,847 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 15:56:37,847 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 15:56:41,650 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 06:56:41 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'3313'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'3538'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9988'), (b'x-ratelimit-remaining-tokens', b'197889'), (b'x-ratelimit-reset-requests', b'1m39.439s'), (b'x-ratelimit-reset-tokens', b'633ms'), (b'x-request-id', b'req_3b9905a969fa4b15bd025bc596ab50c1'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b052c6d0c3091-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 15:56:41,651 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 15:56:41,651 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 15:56:41,651 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 15:56:41,651 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 15:56:41,652 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 15:56:41,652 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 06:56:41 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '3313', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '3538', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9988', 'x-ratelimit-remaining-tokens': '197889', 'x-ratelimit-reset-requests': '1m39.439s', 'x-ratelimit-reset-tokens': '633ms', 'x-request-id': 'req_3b9905a969fa4b15bd025bc596ab50c1', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b052c6d0c3091-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 15:56:41,652 - openai._base_client - DEBUG - request_id: req_3b9905a969fa4b15bd025bc596ab50c1
2025-10-05 15:56:41,652 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: agent_selection | Model: gpt-4o-mini-2024-07-18 | Tokens: 2506 (prompt: 2363, completion: 143)
2025-10-05 15:56:41,652 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM agent selection reasoning: 1단계: 사용자는 마포구 오피스텔 전세 시세를 조회하고자 하므로, 단순한 시세 조회가 필요합니다. 2단계: 이 요청은 단순 정보 조회로 분류됩니다. 3단계: 독립적인 작업으로, search_team만으로 충분합니다. 4단계: search_team이 부동산 시세 조회에 적합하므로, 이 팀만으로 질문에 답변할 수 있습니다.
2025-10-05 15:56:41,652 - app.service_agent.cognitive_agents.planning_agent - INFO - ✅ Primary LLM selected agents: ['search_team']
2025-10-05 15:56:41,652 - __main__ - INFO -   의도: 시세조회
2025-10-05 15:56:41,652 - __main__ - INFO -   신뢰도: 0.95
2025-10-05 15:56:41,652 - __main__ - INFO -   추천 Agent: ['search_team']
2025-10-05 15:56:41,652 - __main__ - INFO - 
[Step 2] Query Decomposition...
2025-10-05 15:56:41,652 - app.service_agent.cognitive_agents.query_decomposer - INFO - Decomposing query: 마포구 오피스텔 전세 시세는?...
2025-10-05 15:56:41,652 - app.service_agent.cognitive_agents.query_decomposer - INFO - Query is simple, no decomposition needed
2025-10-05 15:56:41,652 - __main__ - INFO -   복합 질문: False
2025-10-05 15:56:41,652 - __main__ - INFO -   작업 수: 1
2025-10-05 15:56:41,652 - __main__ - INFO -   실행 모드: sequential
2025-10-05 15:56:41,652 - __main__ - INFO - 
[Step 3] Execution Plan 생성...
2025-10-05 15:56:41,652 - app.service_agent.cognitive_agents.planning_agent - INFO - Creating execution plan for intent: 시세조회
2025-10-05 15:56:41,652 - app.service_agent.cognitive_agents.planning_agent - WARNING - AgentRegistry is empty, using default teams
2025-10-05 15:56:41,652 - app.service_agent.cognitive_agents.planning_agent - DEBUG - Suggested agents: ['search_team']
2025-10-05 15:56:41,652 - app.service_agent.cognitive_agents.planning_agent - DEBUG - Available agents: ['search_team', 'analysis_team', 'document_team']
2025-10-05 15:56:41,652 - app.service_agent.cognitive_agents.planning_agent - INFO - Selected agents/teams for execution: ['search_team']
2025-10-05 15:56:41,652 - __main__ - INFO -   전략: sequential
2025-10-05 15:56:41,653 - __main__ - INFO -   단계 수: 1
2025-10-05 15:56:41,653 - __main__ - INFO - 
✓ 테스트 성공 (소요시간: 7.58초)
2025-10-05 15:56:41,653 - __main__ - INFO - 
================================================================================
2025-10-05 15:56:41,653 - __main__ - INFO - [13] 단일 질문 테스트: S013
2025-10-05 15:56:41,653 - __main__ - INFO - 질문: DSR 규제가 뭔가요?
2025-10-05 15:56:41,653 - __main__ - INFO - ================================================================================
2025-10-05 15:56:41,653 - __main__ - INFO - 
[Step 1] Intent 분석...
2025-10-05 15:56:41,653 - app.service_agent.cognitive_agents.planning_agent - INFO - Analyzing intent for query: DSR 규제가 뭔가요?...
2025-10-05 15:56:41,653 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-d0ee413a-4582-4046-8d52-f416d3de5093', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 의도 분석 전문가입니다.\n사용자의 질문을 정확히 이해하고, 어떤 종류의 도움이 필요한지 분류해야 합니다.\n\n## Chain-of-Thought 분석 프로세스\n\n질문을 분석할 때 다음 단계를 **순서대로** 따르세요:\n\n### 1단계: 질문 구조 파악\n- 단순 정보 요청인가? (예: "~이 뭐야?", "~알려줘")\n- 상황 설명이 포함되어 있는가? (배경, 현재 상태)\n- 구체적 수치나 데이터가 있는가? (금액, 비율, 기간 등)\n- 문제 해결을 요구하는가? (예: "어떻게 해야 해?", "방법 알려줘")\n\n### 2단계: 요청 유형 판단\n- **정보 확인형**: 사실, 개념, 규정 확인 → 검색만으로 충분\n- **평가/판단형**: "괜찮아?", "적절해?", "문제있어?" → 검색 + 분석 필요\n- **해결책 요청형**: "어떻게?", "방법?", "대처?" → 검색 + 분석 + 제안 필요\n- **비교/선택형**: "A vs B", "어느게 나아?" → 검색 + 분석(비교) 필요\n\n### 3단계: 복잡도 평가\n- **저**: 단일 개념/사실 확인 (예: "전세금 인상률 한도?")\n- **중**: 특정 상황 + 판단 (예: "3억을 5억으로 올려달래. 가능해?")\n- **고**: 복잡한 상황 + 여러 조건 + 해결책 (예: "10년 거주, 3억→10억 요구. 어떻게 해야 해?")\n\n### 4단계: 필요한 처리 결정\n- **검색만**: 정보 확인형 + 저복잡도\n- **검색+분석**: 평가/판단형 OR 중복잡도 OR 수치 비교 포함\n- **종합처리**: 해결책 요청형 OR 고복잡도 OR 여러 조건 동시 고려\n\n### 5단계: 최종 검증\n- 선택한 의도로 사용자 질문에 완전히 답변 가능한가?\n- 단순 정보 제공으로 끝나는가, 아니면 추가 분석/판단이 필요한가?\n- 상황 설명이 있으면서 "해결", "방법", "어떻게" 등이 있으면 → COMPREHENSIVE 고려\n\n## 중요: 복합 질문 처리\n복합적인 질문(여러 의도가 섞인 질문)의 경우, 가장 핵심적인 의도를 파악하되,\nsub_intents 필드에 부가적인 의도들도 함께 기록해주세요.\n\n**특히 주의**:\n- 법률 키워드가 있어도, "해결방법", "어떻게 해야" 같은 표현이 있으면 단순 LEGAL_CONSULT가 아닐 수 있음\n- 구체적 상황(금액, 기간 등) + 해결책 요구 = COMPREHENSIVE 또는 복합 의도로 분류\n\n## 분류 카테고리 설명:\n\n1. **LEGAL_CONSULT (법률상담)**\n   - 설명: 부동산 관련 법률, 권리, 의무에 대한 질문\n   - 예시:\n     * 단순: "전세금 5% 인상이 가능한가요?", "임대차계약 갱신 거부할 수 있나요?"\n     * 복합: "전세금 인상 가능한지 확인하고 법적 근거도 알려주세요"\n   - 키워드: 법, 전세, 임대, 보증금, 계약, 권리, 의무, 갱신, 임차인, 임대인, 법률, 규정, 조항\n   - 필요한 처리: 법률 데이터베이스 검색, 관련 법조항 찾기\n\n2. **MARKET_INQUIRY (시세조회)**\n   - 설명: 부동산 시장 가격, 시세, 거래 동향에 대한 질문\n   - 예시:\n     * 단순: "강남구 아파트 전세 시세 알려주세요", "서초동 매매가 얼마나 올랐나요?"\n     * 복합: "강남구 시세 확인하고 대출 가능 금액도 계산해줘"\n   - 키워드: 시세, 가격, 매매가, 전세가, 월세, 시장, 동향, 평균, 지역명, 상승률, 하락률\n   - 필요한 처리: 부동산 시세 데이터 조회, 지역별 가격 분석\n\n3. **LOAN_CONSULT (대출상담)**\n   - 설명: 주택담보대출, 전세자금대출 등 금융 관련 질문\n   - 예시:\n     * 단순: "전세자금대출 한도가 얼마인가요?", "LTV가 뭔가요?"\n     * 복합: "대출 한도 확인하고 금리 비교도 해주세요"\n   - 키워드: 대출, 금리, 한도, 조건, 상환, LTV, DTI, DSR, 담보, 금융, 은행\n   - 필요한 처리: 대출 상품 조회, 금리 정보 검색, 한도 계산\n\n4. **CONTRACT_CREATION (계약서작성)**\n   - 설명: 새로운 계약서나 문서를 작성해달라는 요청\n   - 예시:\n     * 단순: "임대차계약서 작성해주세요", "전세계약서 초안 만들어주세요"\n     * 복합: "계약서 작성하고 주의사항도 검토해주세요"\n   - 키워드: 작성, 만들, 생성, 초안, 계약서, 문서, 양식\n   - 필요한 처리: 문서 생성 에이전트 호출, 템플릿 기반 작성\n\n5. **CONTRACT_REVIEW (계약서검토)**\n   - 설명: 기존 계약서나 문서를 검토해달라는 요청\n   - 예시:\n     * 단순: "이 계약서 검토해주세요", "특약사항 문제없나요?"\n     * 복합: "계약서 검토하고 수정사항도 제안해주세요"\n   - 키워드: 검토, 확인, 점검, 리뷰, 분석해, 살펴봐, 체크\n   - 필요한 처리: 문서 분석, 위험 요소 식별, 개선사항 제안\n\n6. **COMPREHENSIVE (종합분석)**\n   - 설명: 여러 측면을 종합적으로 분석해달라는 요청, 또는 복잡한 상황에 대한 해결책 요청\n   - 예시:\n     * 단순: "이 물건 전체적으로 분석해주세요"\n     * 복합: "시세, 법률, 대출 모두 검토해서 종합 의견 주세요"\n     * 해결형: "10년 거주했는데 전세금 3억을 10억으로 올려달래. 어떻게 해야 해?"\n     * 상황+해결: "집주인이 계약 갱신 거부했어. 법적으로 어떻게 대응해야 할까?"\n   - 키워드: 종합, 전체, 모든, 전반적, 종합적, 평가, 분석, 어떻게, 방법, 해결, 대처\n   - 패턴: 구체적 상황 설명 + "어떻게/방법/해결" 요청\n   - 필요한 처리: 다중 데이터 소스 통합 분석, 상황 평가, 해결책 제시\n\n7. **RISK_ANALYSIS (리스크분석)**\n   - 설명: 위험 요소나 주의사항에 대한 질문\n   - 예시:\n     * 단순: "이 계약 위험한가요?", "주의할 점 알려주세요"\n     * 복합: "리스크 분석하고 대안도 제시해주세요"\n   - 키워드: 위험, 리스크, 주의, 문제점, 조심, 걱정, 우려\n   - 필요한 처리: 위험 요소 분석, 주의사항 추출\n\n8. **UNCLEAR (불분명)**\n   - 설명: 의도를 명확히 파악하기 어려운 질문\n   - 예시: "이거 좀 봐주세요", "어떻게 해야 할까요?", "도와주세요"\n   - 처리: 추가 질문으로 의도 명확화 필요\n\n9. **IRRELEVANT (무관)**\n   - 설명: 부동산과 전혀 관련 없는 질문\n   - 예시: "날씨 어때?", "저녁 뭐 먹지?", "주식 추천해줘"\n   - 처리: 부동산 관련 질문을 유도\n\n## 복합 질문 예시와 분석 (CoT 적용):\n\n### 예시 1: "강남구 아파트 시세 알려주고 전세자금대출 가능한지도 확인해줘"\n**CoT 분석**:\n1. 구조: 두 개의 요청 ("시세" + "대출")\n2. 유형: 정보 확인형 (둘 다)\n3. 복잡도: 중 (두 가지 독립적 조회)\n4. 필요 처리: 검색 + 계산/분석\n\n**결론**:\n- 주 의도: MARKET_INQUIRY (시세 조회가 먼저 필요)\n- 부가 의도: LOAN_CONSULT (대출 확인)\n- 분해: ["강남구 아파트 시세 조회", "전세자금대출 가능 여부 확인"]\n\n### 예시 2: "이 계약서 검토해서 위험한 부분 있는지 알려주고 수정 제안도 해줘"\n**CoT 분석**:\n1. 구조: 검토 + 위험 평가 + 수정안\n2. 유형: 평가/판단형 + 해결책 요청형\n3. 복잡도: 고 (3단계 처리)\n4. 필요 처리: 검토 + 분석 + 문서 생성\n\n**결론**:\n- 주 의도: CONTRACT_REVIEW (계약서 검토)\n- 부가 의도: RISK_ANALYSIS (위험 분석)\n- 분해: ["계약서 전체 검토", "위험 요소 식별", "수정사항 제안"]\n\n### 예시 3: "집주인이 짜증나, 10년 살았는데 전세금 3억을 10억으로 올려달래. 법적으로 해결방법 알려줘"\n**CoT 분석**:\n1. 구조: 상황 설명 (10년 거주, 3억→10억) + 해결책 요청\n2. 유형: 해결책 요청형 (단순 정보 X)\n3. 복잡도: 고 (구체적 상황 + 수치 비교 + 법률 + 대응방안)\n4. 필요 처리: 법률 검색 + 상황 분석 + 해결책 제시\n\n**결론**:\n- 주 의도: COMPREHENSIVE (복잡한 상황에 대한 종합 해결)\n- 부가 의도: LEGAL_CONSULT, RISK_ANALYSIS\n- 분해: ["전세금 인상 한도 법률 조회", "3억→10억 인상의 타당성 분석", "구체적 대응 방안 제시"]\n- **이유**: "법적으로"라는 키워드가 있지만, 단순 법률 확인이 아니라 구체적 상황에 대한 해결책을 요구하므로 COMPREHENSIVE\n\n### 예시 4: "전세금 인상률 상한이 얼마야?"\n**CoT 분석**:\n1. 구조: 단순 사실 확인\n2. 유형: 정보 확인형\n3. 복잡도: 저 (단일 개념)\n4. 필요 처리: 검색만\n\n**결론**:\n- 주 의도: LEGAL_CONSULT (법률 정보 조회)\n- 부가 의도: 없음\n- 분해: 필요 없음\n\n## 응답 형식 (JSON 형식으로 응답):\n\n```json\n{\n    "intent": "LEGAL_CONSULT",\n    "confidence": 0.9,\n    "keywords": ["전세금", "인상", "제한"],\n    "sub_intents": [],\n    "is_compound": false,\n    "decomposed_tasks": [],\n    "entities": {\n        "location": "강남구",\n        "price": "5억",\n        "contract_type": "전세",\n        "date": "2024년",\n        "area": "84㎡",\n        "action_verbs": ["확인", "검토"]\n    },\n    "reasoning": "전세금 인상에 대한 법률 질문이므로 LEGAL_CONSULT로 분류"\n}\n```\n\n응답 규칙:\n- intent: 위 9개 카테고리 중 하나 (대문자_언더스코어 형식)\n- confidence: 0.0~1.0 (0.8 이상이면 매우 확실, 0.5 미만이면 불확실)\n- keywords: 추출된 주요 키워드 목록\n- sub_intents: 복합 질문일 경우 부가적인 의도들\n- is_compound: 복합 질문 여부 (true/false)\n- decomposed_tasks: 복합 질문을 분해한 개별 작업들\n- entities: 추출된 엔티티 정보\n- reasoning: **반드시 CoT 5단계를 거쳐 분석한 과정을 포함** (구조 파악 → 유형 판단 → 복잡도 평가 → 필요 처리 → 최종 검증)\n\n## reasoning 작성 예시:\n"1단계(구조): 상황 설명(10년 거주, 3억→10억) + 해결책 요청 포함.\n2단계(유형): 해결책 요청형 - 단순 정보가 아닌 대응방안 필요.\n3단계(복잡도): 고 - 구체적 수치 비교와 복잡한 상황.\n4단계(처리): 법률 검색 + 상황 분석 + 해결책 제시 필요.\n5단계(검증): LEGAL_CONSULT만으로는 불충분, 종합적 분석 필요 → COMPREHENSIVE 선택"\n\n## 판단 가이드:\n- 여러 의도가 섞여있다면, 가장 주된 의도를 intent에, 나머지를 sub_intents에 기록\n- "그리고", "또한", "함께", "같이" 등의 연결어가 있으면 복합 질문일 가능성 높음\n- 법률 관련 키워드가 있으면 LEGAL_CONSULT 우선\n- 가격/시세 언급이 명확하면 MARKET_INQUIRY\n- 계약서라는 단어와 함께 "작성/만들기"가 있으면 CONTRACT_CREATION\n- 계약서라는 단어와 함께 "검토/확인"이 있으면 CONTRACT_REVIEW\n- 불확실하면 confidence를 낮게 설정하고 UNCLEAR 선택\n- 복합 질문은 is_compound를 true로 설정하고 개별 작업으로 분해\n\n분석할 질문: DSR 규제가 뭔가요?'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 15:56:41,653 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 15:56:41,654 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 15:56:41,654 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 15:56:41,654 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 15:56:41,654 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 15:56:41,654 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 15:56:50,127 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 06:56:50 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'8256'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'8272'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9987'), (b'x-ratelimit-remaining-tokens', b'197250'), (b'x-ratelimit-reset-requests', b'1m44.274s'), (b'x-ratelimit-reset-tokens', b'825ms'), (b'x-request-id', b'req_27628b3ae9194e978857a147474afe88'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b05443e0f3091-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 15:56:50,127 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 15:56:50,127 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 15:56:50,127 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 15:56:50,127 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 15:56:50,127 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 15:56:50,127 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 06:56:50 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '8256', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '8272', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9987', 'x-ratelimit-remaining-tokens': '197250', 'x-ratelimit-reset-requests': '1m44.274s', 'x-ratelimit-reset-tokens': '825ms', 'x-request-id': 'req_27628b3ae9194e978857a147474afe88', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b05443e0f3091-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 15:56:50,127 - openai._base_client - DEBUG - request_id: req_27628b3ae9194e978857a147474afe88
2025-10-05 15:56:50,128 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: intent_analysis | Model: gpt-4o-mini-2024-07-18 | Tokens: 3357 (prompt: 3178, completion: 179)
2025-10-05 15:56:50,128 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM Intent Analysis Result: {'intent': 'LOAN_CONSULT', 'confidence': 0.9, 'keywords': ['DSR', '규제'], 'sub_intents': [], 'is_compound': False, 'decomposed_tasks': [], 'entities': {'action_verbs': ['알려줘']}, 'reasoning': '1단계(구조): 단순 정보 요청으로 DSR 규제에 대한 설명을 요구. 2단계(유형): 정보 확인형 - DSR 규제에 대한 사실 확인. 3단계(복잡도): 저 - 단일 개념 확인. 4단계(처리): 검색만으로 충분. 5단계(검증): 단순 정보 제공으로 끝나므로 LOAN_CONSULT로 분류.'}
2025-10-05 15:56:50,128 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-49670ec2-fda5-4722-a21a-cb303cb4e58f', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 Agent 선택 전문가입니다.\n사용자의 요청에 가장 적합한 Agent/Team을 선택하는 것이 목표입니다.\n\n## 현재 상황\n\n**사용자 질문:** DSR 규제가 뭔가요?\n**분석된 의도:** 대출상담\n**추출된 키워드:** [\'DSR\', \'규제\']\n\n## 사용 가능한 Agent/Team 정보\n\n{\'search_team\': {\'name\': \'search_team\', \'capabilities\': \'법률 검색, 부동산 시세 조회, 대출 상품 검색\', \'tools\': [\'legal_search\', \'market_data\', \'loan_data\'], \'use_cases\': [\'법률 상담\', \'시세 조회\', \'대출 정보\']}, \'analysis_team\': {\'name\': \'analysis_team\', \'capabilities\': \'데이터 분석, 리스크 평가, 인사이트 생성, 추천\', \'tools\': [\'data_analyzer\', \'risk_evaluator\'], \'use_cases\': [\'시장 분석\', \'리스크 평가\', \'투자 분석\']}, \'document_team\': {\'name\': \'document_team\', \'capabilities\': \'계약서 작성, 문서 생성, 문서 검토\', \'tools\': [\'document_generator\', \'contract_reviewer\'], \'use_cases\': [\'계약서 작성\', \'문서 검토\']}}\n\n## Agent 역할 및 상세 가이드\n\n### 1. search_team (검색 팀)\n- **주요 기능**: 정보 검색 및 데이터 수집\n- **전문 분야**:\n  * 법률 정보 검색 (전세법, 임대차보호법, 부동산 관련 법규)\n  * 부동산 시세 조회 (매매가, 전세가, 월세, 실거래가)\n  * 대출 상품 정보 검색 (금리, 한도, 조건)\n  * 지역 정보 및 인프라 조회\n- **도구**: legal_search, market_data, loan_data\n- **적합한 작업**: 정보 조회, 데이터 수집, 법률 확인, 시세 파악\n- **예시**:\n  * "전세금 5% 인상 가능한가요?"\n  * "강남구 아파트 전세 시세"\n  * "전세자금대출 한도 얼마?"\n\n### 2. analysis_team (분석 팀)\n- **주요 기능**: 데이터 분석 및 평가\n- **전문 분야**:\n  * 시장 동향 분석 (상승률, 하락률, 추세)\n  * 리스크 평가 (계약, 투자 위험도)\n  * 투자 수익률 계산 (ROI, 월세 수익률)\n  * 대출 한도 및 조건 분석 (LTV, DTI, DSR)\n  * 비교 분석 (지역별, 상품별)\n- **도구**: data_analyzer, risk_evaluator, calculator\n- **적합한 작업**: 데이터 분석, 리스크 평가, 계산, 비교, 예측\n- **의존성**: 보통 search_team의 데이터가 필요\n- **예시**:\n  * "이 지역 투자 가치 분석해줘"\n  * "계약 리스크 평가해줘"\n  * "대출 가능 금액 계산해줘"\n\n### 3. document_team (문서 팀)\n- **주요 기능**: 문서 생성 및 관리\n- **전문 분야**:\n  * 계약서 작성 (임대차, 매매, 전세)\n  * 문서 템플릿 관리\n  * 특약사항 생성\n  * 계약서 수정안 작성\n  * 법률 문서 검토\n- **도구**: document_generator, contract_template, contract_reviewer\n- **적합한 작업**: 문서 작성, 계약서 생성, 문서 수정, 검토\n- **예시**:\n  * "임대차계약서 작성해줘"\n  * "특약사항 추가해줘"\n  * "계약서 수정안 만들어줘"\n\n## Chain-of-Thought Agent 선택 프로세스\n\n다음 단계를 **순서대로** 따라 최적의 Agent 조합을 선택하세요:\n\n### 1단계: 질문 요구사항 파악\n- 단순 정보 조회인가? → search_team만 필요\n- 판단/평가가 필요한가? → search + analysis 필요\n- 해결책 제시가 필요한가? → search + analysis 필요\n- 문서 생성이 필요한가? → document_team 추가\n\n### 2단계: 작업 복잡도 판단\n- **단순** (검색만): "~이 뭐야?", "~알려줘" → search_team\n- **중간** (검색+판단): "~괜찮아?", "~적절해?" → search + analysis\n- **복잡** (종합 해결): 구체적 상황 + "어떻게 해야 해?" → search + analysis\n\n### 3단계: 의존성 분석\n- 독립적 작업: 단일 팀으로 처리 가능\n- 순차적 의존: 이전 결과 필요 → 여러 팀 순서대로\n- 병렬 가능: 동시 조회 가능 → coordination: "parallel"\n\n### 4단계: 최종 검증\n- 선택한 팀들로 질문에 완전히 답변 가능한가?\n- 불필요한 팀이 포함되지 않았는가?\n- 순서가 논리적인가? (데이터 흐름 고려)\n\n### 중요 원칙:\n- **법률 키워드만으로 판단하지 말 것**: "법적으로 어떻게 해야 해?" = 법률 검색 + 분석 필요\n- **상황 설명 + 해결책 요청** = 반드시 analysis_team 포함\n- **구체적 수치 비교** (3억→10억 같은) = analysis_team 필요\n\n## 의도별 Agent 매핑 가이드 (기본 가이드 - CoT로 조정 가능)\n\n| 의도 (Intent) | 기본 조합 | 상황별 조정 |\n|--------------|-----------|-------------|\n| LEGAL_CONSULT | ["search_team"] | 해결책 요청시 → + analysis_team |\n| MARKET_INQUIRY | ["search_team"] | 비교/평가시 → + analysis_team |\n| LOAN_CONSULT | ["search_team", "analysis_team"] | 계산 필수 |\n| CONTRACT_CREATION | ["document_team"] | 검토 후 작성 → search + document |\n| CONTRACT_REVIEW | ["search_team", "analysis_team"] | 법률 검토 + 리스크 분석 |\n| COMPREHENSIVE | ["search_team", "analysis_team"] | **항상 분석 포함** |\n| RISK_ANALYSIS | ["analysis_team"] | 법률 근거 필요시 → search + analysis |\n| UNCLEAR | ["search_team", "analysis_team"] | 포괄적 대응 |\n\n**중요**: 위 매핑은 **기본 가이드**일 뿐입니다.\n실제 질문의 내용(CoT 분석 결과)에 따라 조정하세요!\n\n## 복합 질문 처리 예시 (CoT 적용)\n\n### 예시 1: 순차적 처리\n질문: "강남구 시세 확인하고 투자 가치 분석해줘"\n**CoT 분석**:\n1. 요구사항: 시세 조회 + 투자 가치 평가\n2. 복잡도: 중간 (검색 + 분석)\n3. 의존성: 시세 데이터 → 투자 분석 (순차)\n4. 검증: search만으로는 "투자 가치 평가" 불가능\n\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "1단계: 시세 조회+투자 평가 필요. 2단계: 중간 복잡도. 3단계: 순차 의존. 4단계: search로 시세 수집 후 analysis로 투자 가치 평가 필요",\n    "coordination": "sequential"\n}\n```\n\n### 예시 2: 단순 정보 조회\n질문: "전세금 인상률 한도가 얼마야?"\n**CoT 분석**:\n1. 요구사항: 단순 사실 확인\n2. 복잡도: 낮음 (정보 확인형)\n3. 의존성: 없음\n4. 검증: search_team만으로 충분\n\n```json\n{\n    "selected_agents": ["search_team"],\n    "reasoning": "1단계: 단순 정보 조회. 2단계: 저복잡도. 3단계: 독립적. 4단계: 법률 검색만으로 답변 가능",\n    "coordination": "single"\n}\n```\n\n### 예시 3: 해결책 요청 (핵심 예시!)\n질문: "집주인이 전세금 3억을 10억으로 올려달래. 법적으로 어떻게 해야 해?"\n의도: COMPREHENSIVE\n**CoT 분석**:\n1. 요구사항: 상황 설명 + 해결책 요청\n2. 복잡도: 높음 (구체적 상황 + 수치 비교)\n3. 의존성: 법률 확인 → 상황 분석 → 해결책 제시\n4. 검증: "법적으로"만 보고 search만 선택하면 불충분! 해결책 제시 필요\n\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "1단계: 법률 + 상황 분석 + 해결책 필요. 2단계: 고복잡도(3억→10억 비정상). 3단계: 순차(법률 확인 후 타당성 분석). 4단계: \'어떻게 해야\' = 단순 법률 조회 아님, 분석 필수",\n    "coordination": "sequential",\n    "confidence": 0.95\n}\n```\n\n## 응답 형식 (JSON)\n\n```json\n{\n    "selected_agents": ["선택된 agent/team 목록"],\n    "reasoning": "선택 이유를 구체적으로 설명. 각 Agent의 역할과 처리 순서 포함",\n    "coordination": "single/sequential/parallel/pipeline",\n    "dependencies": {"agent2": ["agent1"]},\n    "estimated_time": 30,\n    "confidence": 0.9\n}\n```\n\n## 선택 가이드라인\n\n1. **최소 Agent 원칙**: 가능한 적은 수의 Agent로 처리\n2. **전문성 우선**: 해당 작업에 가장 전문적인 Agent 선택\n3. **효율성 고려**: 병렬 처리 가능한 경우 명시\n4. **의존성 관리**: 데이터 흐름을 고려한 순서 지정\n5. **폴백 전략**: 불확실한 경우 ["search_team", "analysis_team"] 조합\n\n## 주의사항\n\n- selected_agents는 반드시 배열 형태\n- Agent 이름은 정확히: "search_team", "analysis_team", "document_team"\n- 최소 1개, 최대 3개 선택\n- 순서는 실행 우선순위 (앞에 있을수록 먼저 실행)\n- reasoning은 상세하고 논리적으로 작성\n- coordination 필드로 실행 방식 명시\n- 복합 질문의 경우 의존성 관계 명확히 표시'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 15:56:50,128 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 15:56:50,129 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 15:56:50,129 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 15:56:50,129 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 15:56:50,129 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 15:56:50,129 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 15:56:58,445 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 06:56:58 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'7827'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'8029'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9987'), (b'x-ratelimit-remaining-tokens', b'197901'), (b'x-ratelimit-reset-requests', b'1m44.754s'), (b'x-ratelimit-reset-tokens', b'629ms'), (b'x-request-id', b'req_2693563a3b3c9e13a3df38148bb6fffa'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b05792ae33091-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 15:56:58,445 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 15:56:58,445 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 15:56:58,446 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 15:56:58,446 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 15:56:58,446 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 15:56:58,446 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 06:56:58 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '7827', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '8029', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9987', 'x-ratelimit-remaining-tokens': '197901', 'x-ratelimit-reset-requests': '1m44.754s', 'x-ratelimit-reset-tokens': '629ms', 'x-request-id': 'req_2693563a3b3c9e13a3df38148bb6fffa', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b05792ae33091-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 15:56:58,446 - openai._base_client - DEBUG - request_id: req_2693563a3b3c9e13a3df38148bb6fffa
2025-10-05 15:56:58,446 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: agent_selection | Model: gpt-4o-mini-2024-07-18 | Tokens: 2525 (prompt: 2349, completion: 176)
2025-10-05 15:56:58,446 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM agent selection reasoning: 1단계: DSR 규제에 대한 정보 조회와 대출 관련 상담이 필요. 2단계: DSR 규제는 대출 상담과 관련된 내용이므로 중간 복잡도로 판단. 3단계: DSR 규제에 대한 정보 검색 후, 대출 조건 분석이 필요하므로 순차적 의존 관계가 있음. 4단계: 단순 정보 조회만으로는 DSR 규제의 의미와 대출 상담을 모두 해결할 수 없으므로 search_team과 analysis_team이 필요.
2025-10-05 15:56:58,446 - app.service_agent.cognitive_agents.planning_agent - INFO - ✅ Primary LLM selected agents: ['search_team', 'analysis_team']
2025-10-05 15:56:58,446 - __main__ - INFO -   의도: 대출상담
2025-10-05 15:56:58,446 - __main__ - INFO -   신뢰도: 0.90
2025-10-05 15:56:58,446 - __main__ - INFO -   추천 Agent: ['search_team', 'analysis_team']
2025-10-05 15:56:58,446 - __main__ - INFO - 
[Step 2] Query Decomposition...
2025-10-05 15:56:58,446 - app.service_agent.cognitive_agents.query_decomposer - INFO - Decomposing query: DSR 규제가 뭔가요?...
2025-10-05 15:56:58,446 - app.service_agent.cognitive_agents.query_decomposer - INFO - Query is simple, no decomposition needed
2025-10-05 15:56:58,447 - __main__ - INFO -   복합 질문: False
2025-10-05 15:56:58,447 - __main__ - INFO -   작업 수: 1
2025-10-05 15:56:58,447 - __main__ - INFO -   실행 모드: sequential
2025-10-05 15:56:58,447 - __main__ - INFO - 
[Step 3] Execution Plan 생성...
2025-10-05 15:56:58,447 - app.service_agent.cognitive_agents.planning_agent - INFO - Creating execution plan for intent: 대출상담
2025-10-05 15:56:58,447 - app.service_agent.cognitive_agents.planning_agent - WARNING - AgentRegistry is empty, using default teams
2025-10-05 15:56:58,447 - app.service_agent.cognitive_agents.planning_agent - DEBUG - Suggested agents: ['search_team', 'analysis_team']
2025-10-05 15:56:58,447 - app.service_agent.cognitive_agents.planning_agent - DEBUG - Available agents: ['search_team', 'analysis_team', 'document_team']
2025-10-05 15:56:58,447 - app.service_agent.cognitive_agents.planning_agent - INFO - Selected agents/teams for execution: ['search_team', 'analysis_team']
2025-10-05 15:56:58,447 - __main__ - INFO -   전략: sequential
2025-10-05 15:56:58,447 - __main__ - INFO -   단계 수: 2
2025-10-05 15:56:58,447 - __main__ - INFO - 
✓ 테스트 성공 (소요시간: 16.79초)
2025-10-05 15:56:58,447 - __main__ - INFO - 
================================================================================
2025-10-05 15:56:58,447 - __main__ - INFO - [14] 단일 질문 테스트: S014
2025-10-05 15:56:58,447 - __main__ - INFO - 질문: 묵시적 갱신이 뭔가요?
2025-10-05 15:56:58,447 - __main__ - INFO - ================================================================================
2025-10-05 15:56:58,448 - __main__ - INFO - 
[Step 1] Intent 분석...
2025-10-05 15:56:58,448 - app.service_agent.cognitive_agents.planning_agent - INFO - Analyzing intent for query: 묵시적 갱신이 뭔가요?...
2025-10-05 15:56:58,449 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-3875a48c-9298-4648-b805-7ce894d0ed32', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 의도 분석 전문가입니다.\n사용자의 질문을 정확히 이해하고, 어떤 종류의 도움이 필요한지 분류해야 합니다.\n\n## Chain-of-Thought 분석 프로세스\n\n질문을 분석할 때 다음 단계를 **순서대로** 따르세요:\n\n### 1단계: 질문 구조 파악\n- 단순 정보 요청인가? (예: "~이 뭐야?", "~알려줘")\n- 상황 설명이 포함되어 있는가? (배경, 현재 상태)\n- 구체적 수치나 데이터가 있는가? (금액, 비율, 기간 등)\n- 문제 해결을 요구하는가? (예: "어떻게 해야 해?", "방법 알려줘")\n\n### 2단계: 요청 유형 판단\n- **정보 확인형**: 사실, 개념, 규정 확인 → 검색만으로 충분\n- **평가/판단형**: "괜찮아?", "적절해?", "문제있어?" → 검색 + 분석 필요\n- **해결책 요청형**: "어떻게?", "방법?", "대처?" → 검색 + 분석 + 제안 필요\n- **비교/선택형**: "A vs B", "어느게 나아?" → 검색 + 분석(비교) 필요\n\n### 3단계: 복잡도 평가\n- **저**: 단일 개념/사실 확인 (예: "전세금 인상률 한도?")\n- **중**: 특정 상황 + 판단 (예: "3억을 5억으로 올려달래. 가능해?")\n- **고**: 복잡한 상황 + 여러 조건 + 해결책 (예: "10년 거주, 3억→10억 요구. 어떻게 해야 해?")\n\n### 4단계: 필요한 처리 결정\n- **검색만**: 정보 확인형 + 저복잡도\n- **검색+분석**: 평가/판단형 OR 중복잡도 OR 수치 비교 포함\n- **종합처리**: 해결책 요청형 OR 고복잡도 OR 여러 조건 동시 고려\n\n### 5단계: 최종 검증\n- 선택한 의도로 사용자 질문에 완전히 답변 가능한가?\n- 단순 정보 제공으로 끝나는가, 아니면 추가 분석/판단이 필요한가?\n- 상황 설명이 있으면서 "해결", "방법", "어떻게" 등이 있으면 → COMPREHENSIVE 고려\n\n## 중요: 복합 질문 처리\n복합적인 질문(여러 의도가 섞인 질문)의 경우, 가장 핵심적인 의도를 파악하되,\nsub_intents 필드에 부가적인 의도들도 함께 기록해주세요.\n\n**특히 주의**:\n- 법률 키워드가 있어도, "해결방법", "어떻게 해야" 같은 표현이 있으면 단순 LEGAL_CONSULT가 아닐 수 있음\n- 구체적 상황(금액, 기간 등) + 해결책 요구 = COMPREHENSIVE 또는 복합 의도로 분류\n\n## 분류 카테고리 설명:\n\n1. **LEGAL_CONSULT (법률상담)**\n   - 설명: 부동산 관련 법률, 권리, 의무에 대한 질문\n   - 예시:\n     * 단순: "전세금 5% 인상이 가능한가요?", "임대차계약 갱신 거부할 수 있나요?"\n     * 복합: "전세금 인상 가능한지 확인하고 법적 근거도 알려주세요"\n   - 키워드: 법, 전세, 임대, 보증금, 계약, 권리, 의무, 갱신, 임차인, 임대인, 법률, 규정, 조항\n   - 필요한 처리: 법률 데이터베이스 검색, 관련 법조항 찾기\n\n2. **MARKET_INQUIRY (시세조회)**\n   - 설명: 부동산 시장 가격, 시세, 거래 동향에 대한 질문\n   - 예시:\n     * 단순: "강남구 아파트 전세 시세 알려주세요", "서초동 매매가 얼마나 올랐나요?"\n     * 복합: "강남구 시세 확인하고 대출 가능 금액도 계산해줘"\n   - 키워드: 시세, 가격, 매매가, 전세가, 월세, 시장, 동향, 평균, 지역명, 상승률, 하락률\n   - 필요한 처리: 부동산 시세 데이터 조회, 지역별 가격 분석\n\n3. **LOAN_CONSULT (대출상담)**\n   - 설명: 주택담보대출, 전세자금대출 등 금융 관련 질문\n   - 예시:\n     * 단순: "전세자금대출 한도가 얼마인가요?", "LTV가 뭔가요?"\n     * 복합: "대출 한도 확인하고 금리 비교도 해주세요"\n   - 키워드: 대출, 금리, 한도, 조건, 상환, LTV, DTI, DSR, 담보, 금융, 은행\n   - 필요한 처리: 대출 상품 조회, 금리 정보 검색, 한도 계산\n\n4. **CONTRACT_CREATION (계약서작성)**\n   - 설명: 새로운 계약서나 문서를 작성해달라는 요청\n   - 예시:\n     * 단순: "임대차계약서 작성해주세요", "전세계약서 초안 만들어주세요"\n     * 복합: "계약서 작성하고 주의사항도 검토해주세요"\n   - 키워드: 작성, 만들, 생성, 초안, 계약서, 문서, 양식\n   - 필요한 처리: 문서 생성 에이전트 호출, 템플릿 기반 작성\n\n5. **CONTRACT_REVIEW (계약서검토)**\n   - 설명: 기존 계약서나 문서를 검토해달라는 요청\n   - 예시:\n     * 단순: "이 계약서 검토해주세요", "특약사항 문제없나요?"\n     * 복합: "계약서 검토하고 수정사항도 제안해주세요"\n   - 키워드: 검토, 확인, 점검, 리뷰, 분석해, 살펴봐, 체크\n   - 필요한 처리: 문서 분석, 위험 요소 식별, 개선사항 제안\n\n6. **COMPREHENSIVE (종합분석)**\n   - 설명: 여러 측면을 종합적으로 분석해달라는 요청, 또는 복잡한 상황에 대한 해결책 요청\n   - 예시:\n     * 단순: "이 물건 전체적으로 분석해주세요"\n     * 복합: "시세, 법률, 대출 모두 검토해서 종합 의견 주세요"\n     * 해결형: "10년 거주했는데 전세금 3억을 10억으로 올려달래. 어떻게 해야 해?"\n     * 상황+해결: "집주인이 계약 갱신 거부했어. 법적으로 어떻게 대응해야 할까?"\n   - 키워드: 종합, 전체, 모든, 전반적, 종합적, 평가, 분석, 어떻게, 방법, 해결, 대처\n   - 패턴: 구체적 상황 설명 + "어떻게/방법/해결" 요청\n   - 필요한 처리: 다중 데이터 소스 통합 분석, 상황 평가, 해결책 제시\n\n7. **RISK_ANALYSIS (리스크분석)**\n   - 설명: 위험 요소나 주의사항에 대한 질문\n   - 예시:\n     * 단순: "이 계약 위험한가요?", "주의할 점 알려주세요"\n     * 복합: "리스크 분석하고 대안도 제시해주세요"\n   - 키워드: 위험, 리스크, 주의, 문제점, 조심, 걱정, 우려\n   - 필요한 처리: 위험 요소 분석, 주의사항 추출\n\n8. **UNCLEAR (불분명)**\n   - 설명: 의도를 명확히 파악하기 어려운 질문\n   - 예시: "이거 좀 봐주세요", "어떻게 해야 할까요?", "도와주세요"\n   - 처리: 추가 질문으로 의도 명확화 필요\n\n9. **IRRELEVANT (무관)**\n   - 설명: 부동산과 전혀 관련 없는 질문\n   - 예시: "날씨 어때?", "저녁 뭐 먹지?", "주식 추천해줘"\n   - 처리: 부동산 관련 질문을 유도\n\n## 복합 질문 예시와 분석 (CoT 적용):\n\n### 예시 1: "강남구 아파트 시세 알려주고 전세자금대출 가능한지도 확인해줘"\n**CoT 분석**:\n1. 구조: 두 개의 요청 ("시세" + "대출")\n2. 유형: 정보 확인형 (둘 다)\n3. 복잡도: 중 (두 가지 독립적 조회)\n4. 필요 처리: 검색 + 계산/분석\n\n**결론**:\n- 주 의도: MARKET_INQUIRY (시세 조회가 먼저 필요)\n- 부가 의도: LOAN_CONSULT (대출 확인)\n- 분해: ["강남구 아파트 시세 조회", "전세자금대출 가능 여부 확인"]\n\n### 예시 2: "이 계약서 검토해서 위험한 부분 있는지 알려주고 수정 제안도 해줘"\n**CoT 분석**:\n1. 구조: 검토 + 위험 평가 + 수정안\n2. 유형: 평가/판단형 + 해결책 요청형\n3. 복잡도: 고 (3단계 처리)\n4. 필요 처리: 검토 + 분석 + 문서 생성\n\n**결론**:\n- 주 의도: CONTRACT_REVIEW (계약서 검토)\n- 부가 의도: RISK_ANALYSIS (위험 분석)\n- 분해: ["계약서 전체 검토", "위험 요소 식별", "수정사항 제안"]\n\n### 예시 3: "집주인이 짜증나, 10년 살았는데 전세금 3억을 10억으로 올려달래. 법적으로 해결방법 알려줘"\n**CoT 분석**:\n1. 구조: 상황 설명 (10년 거주, 3억→10억) + 해결책 요청\n2. 유형: 해결책 요청형 (단순 정보 X)\n3. 복잡도: 고 (구체적 상황 + 수치 비교 + 법률 + 대응방안)\n4. 필요 처리: 법률 검색 + 상황 분석 + 해결책 제시\n\n**결론**:\n- 주 의도: COMPREHENSIVE (복잡한 상황에 대한 종합 해결)\n- 부가 의도: LEGAL_CONSULT, RISK_ANALYSIS\n- 분해: ["전세금 인상 한도 법률 조회", "3억→10억 인상의 타당성 분석", "구체적 대응 방안 제시"]\n- **이유**: "법적으로"라는 키워드가 있지만, 단순 법률 확인이 아니라 구체적 상황에 대한 해결책을 요구하므로 COMPREHENSIVE\n\n### 예시 4: "전세금 인상률 상한이 얼마야?"\n**CoT 분석**:\n1. 구조: 단순 사실 확인\n2. 유형: 정보 확인형\n3. 복잡도: 저 (단일 개념)\n4. 필요 처리: 검색만\n\n**결론**:\n- 주 의도: LEGAL_CONSULT (법률 정보 조회)\n- 부가 의도: 없음\n- 분해: 필요 없음\n\n## 응답 형식 (JSON 형식으로 응답):\n\n```json\n{\n    "intent": "LEGAL_CONSULT",\n    "confidence": 0.9,\n    "keywords": ["전세금", "인상", "제한"],\n    "sub_intents": [],\n    "is_compound": false,\n    "decomposed_tasks": [],\n    "entities": {\n        "location": "강남구",\n        "price": "5억",\n        "contract_type": "전세",\n        "date": "2024년",\n        "area": "84㎡",\n        "action_verbs": ["확인", "검토"]\n    },\n    "reasoning": "전세금 인상에 대한 법률 질문이므로 LEGAL_CONSULT로 분류"\n}\n```\n\n응답 규칙:\n- intent: 위 9개 카테고리 중 하나 (대문자_언더스코어 형식)\n- confidence: 0.0~1.0 (0.8 이상이면 매우 확실, 0.5 미만이면 불확실)\n- keywords: 추출된 주요 키워드 목록\n- sub_intents: 복합 질문일 경우 부가적인 의도들\n- is_compound: 복합 질문 여부 (true/false)\n- decomposed_tasks: 복합 질문을 분해한 개별 작업들\n- entities: 추출된 엔티티 정보\n- reasoning: **반드시 CoT 5단계를 거쳐 분석한 과정을 포함** (구조 파악 → 유형 판단 → 복잡도 평가 → 필요 처리 → 최종 검증)\n\n## reasoning 작성 예시:\n"1단계(구조): 상황 설명(10년 거주, 3억→10억) + 해결책 요청 포함.\n2단계(유형): 해결책 요청형 - 단순 정보가 아닌 대응방안 필요.\n3단계(복잡도): 고 - 구체적 수치 비교와 복잡한 상황.\n4단계(처리): 법률 검색 + 상황 분석 + 해결책 제시 필요.\n5단계(검증): LEGAL_CONSULT만으로는 불충분, 종합적 분석 필요 → COMPREHENSIVE 선택"\n\n## 판단 가이드:\n- 여러 의도가 섞여있다면, 가장 주된 의도를 intent에, 나머지를 sub_intents에 기록\n- "그리고", "또한", "함께", "같이" 등의 연결어가 있으면 복합 질문일 가능성 높음\n- 법률 관련 키워드가 있으면 LEGAL_CONSULT 우선\n- 가격/시세 언급이 명확하면 MARKET_INQUIRY\n- 계약서라는 단어와 함께 "작성/만들기"가 있으면 CONTRACT_CREATION\n- 계약서라는 단어와 함께 "검토/확인"이 있으면 CONTRACT_REVIEW\n- 불확실하면 confidence를 낮게 설정하고 UNCLEAR 선택\n- 복합 질문은 is_compound를 true로 설정하고 개별 작업으로 분해\n\n분석할 질문: 묵시적 갱신이 뭔가요?'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 15:56:58,449 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 15:56:58,450 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 15:56:58,450 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 15:56:58,450 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 15:56:58,450 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 15:56:58,450 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 15:57:01,310 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 06:57:01 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'2570'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'2624'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9987'), (b'x-ratelimit-remaining-tokens', b'197248'), (b'x-ratelimit-reset-requests', b'1m44.748s'), (b'x-ratelimit-reset-tokens', b'825ms'), (b'x-request-id', b'req_7ebb5ade45274bee8e4ae12371ecbec3'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b05ad2cdc3091-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 15:57:01,311 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 15:57:01,311 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 15:57:01,311 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 15:57:01,311 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 15:57:01,311 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 15:57:01,311 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 06:57:01 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '2570', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '2624', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9987', 'x-ratelimit-remaining-tokens': '197248', 'x-ratelimit-reset-requests': '1m44.748s', 'x-ratelimit-reset-tokens': '825ms', 'x-request-id': 'req_7ebb5ade45274bee8e4ae12371ecbec3', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b05ad2cdc3091-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 15:57:01,312 - openai._base_client - DEBUG - request_id: req_7ebb5ade45274bee8e4ae12371ecbec3
2025-10-05 15:57:01,312 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: intent_analysis | Model: gpt-4o-mini-2024-07-18 | Tokens: 3368 (prompt: 3182, completion: 186)
2025-10-05 15:57:01,312 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM Intent Analysis Result: {'intent': 'LEGAL_CONSULT', 'confidence': 0.9, 'keywords': ['묵시적', '갱신', '임대차'], 'sub_intents': [], 'is_compound': False, 'decomposed_tasks': [], 'entities': {}, 'reasoning': '1단계(구조): 단순 정보 요청으로 묵시적 갱신의 정의를 묻고 있음. 2단계(유형): 정보 확인형 - 사실 확인만으로 충분. 3단계(복잡도): 저 - 단일 개념 확인. 4단계(처리): 법률 관련 정보 검색만 필요. 5단계(검증): 묵시적 갱신에 대한 정의를 제공하면 충분하므로 LEGAL_CONSULT로 분류.'}
2025-10-05 15:57:01,312 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-46fafcd2-e6a8-49a2-bdc5-7a4702e235b3', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 Agent 선택 전문가입니다.\n사용자의 요청에 가장 적합한 Agent/Team을 선택하는 것이 목표입니다.\n\n## 현재 상황\n\n**사용자 질문:** 묵시적 갱신이 뭔가요?\n**분석된 의도:** 법률상담\n**추출된 키워드:** [\'묵시적\', \'갱신\', \'임대차\']\n\n## 사용 가능한 Agent/Team 정보\n\n{\'search_team\': {\'name\': \'search_team\', \'capabilities\': \'법률 검색, 부동산 시세 조회, 대출 상품 검색\', \'tools\': [\'legal_search\', \'market_data\', \'loan_data\'], \'use_cases\': [\'법률 상담\', \'시세 조회\', \'대출 정보\']}, \'analysis_team\': {\'name\': \'analysis_team\', \'capabilities\': \'데이터 분석, 리스크 평가, 인사이트 생성, 추천\', \'tools\': [\'data_analyzer\', \'risk_evaluator\'], \'use_cases\': [\'시장 분석\', \'리스크 평가\', \'투자 분석\']}, \'document_team\': {\'name\': \'document_team\', \'capabilities\': \'계약서 작성, 문서 생성, 문서 검토\', \'tools\': [\'document_generator\', \'contract_reviewer\'], \'use_cases\': [\'계약서 작성\', \'문서 검토\']}}\n\n## Agent 역할 및 상세 가이드\n\n### 1. search_team (검색 팀)\n- **주요 기능**: 정보 검색 및 데이터 수집\n- **전문 분야**:\n  * 법률 정보 검색 (전세법, 임대차보호법, 부동산 관련 법규)\n  * 부동산 시세 조회 (매매가, 전세가, 월세, 실거래가)\n  * 대출 상품 정보 검색 (금리, 한도, 조건)\n  * 지역 정보 및 인프라 조회\n- **도구**: legal_search, market_data, loan_data\n- **적합한 작업**: 정보 조회, 데이터 수집, 법률 확인, 시세 파악\n- **예시**:\n  * "전세금 5% 인상 가능한가요?"\n  * "강남구 아파트 전세 시세"\n  * "전세자금대출 한도 얼마?"\n\n### 2. analysis_team (분석 팀)\n- **주요 기능**: 데이터 분석 및 평가\n- **전문 분야**:\n  * 시장 동향 분석 (상승률, 하락률, 추세)\n  * 리스크 평가 (계약, 투자 위험도)\n  * 투자 수익률 계산 (ROI, 월세 수익률)\n  * 대출 한도 및 조건 분석 (LTV, DTI, DSR)\n  * 비교 분석 (지역별, 상품별)\n- **도구**: data_analyzer, risk_evaluator, calculator\n- **적합한 작업**: 데이터 분석, 리스크 평가, 계산, 비교, 예측\n- **의존성**: 보통 search_team의 데이터가 필요\n- **예시**:\n  * "이 지역 투자 가치 분석해줘"\n  * "계약 리스크 평가해줘"\n  * "대출 가능 금액 계산해줘"\n\n### 3. document_team (문서 팀)\n- **주요 기능**: 문서 생성 및 관리\n- **전문 분야**:\n  * 계약서 작성 (임대차, 매매, 전세)\n  * 문서 템플릿 관리\n  * 특약사항 생성\n  * 계약서 수정안 작성\n  * 법률 문서 검토\n- **도구**: document_generator, contract_template, contract_reviewer\n- **적합한 작업**: 문서 작성, 계약서 생성, 문서 수정, 검토\n- **예시**:\n  * "임대차계약서 작성해줘"\n  * "특약사항 추가해줘"\n  * "계약서 수정안 만들어줘"\n\n## Chain-of-Thought Agent 선택 프로세스\n\n다음 단계를 **순서대로** 따라 최적의 Agent 조합을 선택하세요:\n\n### 1단계: 질문 요구사항 파악\n- 단순 정보 조회인가? → search_team만 필요\n- 판단/평가가 필요한가? → search + analysis 필요\n- 해결책 제시가 필요한가? → search + analysis 필요\n- 문서 생성이 필요한가? → document_team 추가\n\n### 2단계: 작업 복잡도 판단\n- **단순** (검색만): "~이 뭐야?", "~알려줘" → search_team\n- **중간** (검색+판단): "~괜찮아?", "~적절해?" → search + analysis\n- **복잡** (종합 해결): 구체적 상황 + "어떻게 해야 해?" → search + analysis\n\n### 3단계: 의존성 분석\n- 독립적 작업: 단일 팀으로 처리 가능\n- 순차적 의존: 이전 결과 필요 → 여러 팀 순서대로\n- 병렬 가능: 동시 조회 가능 → coordination: "parallel"\n\n### 4단계: 최종 검증\n- 선택한 팀들로 질문에 완전히 답변 가능한가?\n- 불필요한 팀이 포함되지 않았는가?\n- 순서가 논리적인가? (데이터 흐름 고려)\n\n### 중요 원칙:\n- **법률 키워드만으로 판단하지 말 것**: "법적으로 어떻게 해야 해?" = 법률 검색 + 분석 필요\n- **상황 설명 + 해결책 요청** = 반드시 analysis_team 포함\n- **구체적 수치 비교** (3억→10억 같은) = analysis_team 필요\n\n## 의도별 Agent 매핑 가이드 (기본 가이드 - CoT로 조정 가능)\n\n| 의도 (Intent) | 기본 조합 | 상황별 조정 |\n|--------------|-----------|-------------|\n| LEGAL_CONSULT | ["search_team"] | 해결책 요청시 → + analysis_team |\n| MARKET_INQUIRY | ["search_team"] | 비교/평가시 → + analysis_team |\n| LOAN_CONSULT | ["search_team", "analysis_team"] | 계산 필수 |\n| CONTRACT_CREATION | ["document_team"] | 검토 후 작성 → search + document |\n| CONTRACT_REVIEW | ["search_team", "analysis_team"] | 법률 검토 + 리스크 분석 |\n| COMPREHENSIVE | ["search_team", "analysis_team"] | **항상 분석 포함** |\n| RISK_ANALYSIS | ["analysis_team"] | 법률 근거 필요시 → search + analysis |\n| UNCLEAR | ["search_team", "analysis_team"] | 포괄적 대응 |\n\n**중요**: 위 매핑은 **기본 가이드**일 뿐입니다.\n실제 질문의 내용(CoT 분석 결과)에 따라 조정하세요!\n\n## 복합 질문 처리 예시 (CoT 적용)\n\n### 예시 1: 순차적 처리\n질문: "강남구 시세 확인하고 투자 가치 분석해줘"\n**CoT 분석**:\n1. 요구사항: 시세 조회 + 투자 가치 평가\n2. 복잡도: 중간 (검색 + 분석)\n3. 의존성: 시세 데이터 → 투자 분석 (순차)\n4. 검증: search만으로는 "투자 가치 평가" 불가능\n\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "1단계: 시세 조회+투자 평가 필요. 2단계: 중간 복잡도. 3단계: 순차 의존. 4단계: search로 시세 수집 후 analysis로 투자 가치 평가 필요",\n    "coordination": "sequential"\n}\n```\n\n### 예시 2: 단순 정보 조회\n질문: "전세금 인상률 한도가 얼마야?"\n**CoT 분석**:\n1. 요구사항: 단순 사실 확인\n2. 복잡도: 낮음 (정보 확인형)\n3. 의존성: 없음\n4. 검증: search_team만으로 충분\n\n```json\n{\n    "selected_agents": ["search_team"],\n    "reasoning": "1단계: 단순 정보 조회. 2단계: 저복잡도. 3단계: 독립적. 4단계: 법률 검색만으로 답변 가능",\n    "coordination": "single"\n}\n```\n\n### 예시 3: 해결책 요청 (핵심 예시!)\n질문: "집주인이 전세금 3억을 10억으로 올려달래. 법적으로 어떻게 해야 해?"\n의도: COMPREHENSIVE\n**CoT 분석**:\n1. 요구사항: 상황 설명 + 해결책 요청\n2. 복잡도: 높음 (구체적 상황 + 수치 비교)\n3. 의존성: 법률 확인 → 상황 분석 → 해결책 제시\n4. 검증: "법적으로"만 보고 search만 선택하면 불충분! 해결책 제시 필요\n\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "1단계: 법률 + 상황 분석 + 해결책 필요. 2단계: 고복잡도(3억→10억 비정상). 3단계: 순차(법률 확인 후 타당성 분석). 4단계: \'어떻게 해야\' = 단순 법률 조회 아님, 분석 필수",\n    "coordination": "sequential",\n    "confidence": 0.95\n}\n```\n\n## 응답 형식 (JSON)\n\n```json\n{\n    "selected_agents": ["선택된 agent/team 목록"],\n    "reasoning": "선택 이유를 구체적으로 설명. 각 Agent의 역할과 처리 순서 포함",\n    "coordination": "single/sequential/parallel/pipeline",\n    "dependencies": {"agent2": ["agent1"]},\n    "estimated_time": 30,\n    "confidence": 0.9\n}\n```\n\n## 선택 가이드라인\n\n1. **최소 Agent 원칙**: 가능한 적은 수의 Agent로 처리\n2. **전문성 우선**: 해당 작업에 가장 전문적인 Agent 선택\n3. **효율성 고려**: 병렬 처리 가능한 경우 명시\n4. **의존성 관리**: 데이터 흐름을 고려한 순서 지정\n5. **폴백 전략**: 불확실한 경우 ["search_team", "analysis_team"] 조합\n\n## 주의사항\n\n- selected_agents는 반드시 배열 형태\n- Agent 이름은 정확히: "search_team", "analysis_team", "document_team"\n- 최소 1개, 최대 3개 선택\n- 순서는 실행 우선순위 (앞에 있을수록 먼저 실행)\n- reasoning은 상세하고 논리적으로 작성\n- coordination 필드로 실행 방식 명시\n- 복합 질문의 경우 의존성 관계 명확히 표시'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 15:57:01,312 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 15:57:01,313 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 15:57:01,313 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 15:57:01,313 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 15:57:01,313 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 15:57:01,313 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 15:57:06,738 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 06:57:06 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'5185'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'5207'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9987'), (b'x-ratelimit-remaining-tokens', b'197894'), (b'x-ratelimit-reset-requests', b'1m50.523s'), (b'x-ratelimit-reset-tokens', b'631ms'), (b'x-request-id', b'req_075c9e0f3d0e41529a91ac0e35260e81'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b05bf1c493091-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 15:57:06,740 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 15:57:06,740 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 15:57:06,740 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 15:57:06,740 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 15:57:06,740 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 15:57:06,740 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 06:57:06 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '5185', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '5207', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9987', 'x-ratelimit-remaining-tokens': '197894', 'x-ratelimit-reset-requests': '1m50.523s', 'x-ratelimit-reset-tokens': '631ms', 'x-request-id': 'req_075c9e0f3d0e41529a91ac0e35260e81', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b05bf1c493091-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 15:57:06,740 - openai._base_client - DEBUG - request_id: req_075c9e0f3d0e41529a91ac0e35260e81
2025-10-05 15:57:06,741 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: agent_selection | Model: gpt-4o-mini-2024-07-18 | Tokens: 2522 (prompt: 2361, completion: 161)
2025-10-05 15:57:06,741 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM agent selection reasoning: 1단계: 묵시적 갱신에 대한 법률적 정보 검색과 함께, 이와 관련된 상황 분석 및 해결책 제시가 필요합니다. 2단계: 법률 상담이므로 중간 복잡도로 판단됩니다. 3단계: 법률 정보 검색 후, 그에 대한 분석이 필요하므로 순차적 의존성이 있습니다. 4단계: 단순 법률 조회만으로는 충분하지 않으며, 상황에 대한 분석이 필수적입니다.
2025-10-05 15:57:06,741 - app.service_agent.cognitive_agents.planning_agent - INFO - ✅ Primary LLM selected agents: ['search_team', 'analysis_team']
2025-10-05 15:57:06,741 - __main__ - INFO -   의도: 법률상담
2025-10-05 15:57:06,741 - __main__ - INFO -   신뢰도: 0.90
2025-10-05 15:57:06,741 - __main__ - INFO -   추천 Agent: ['search_team', 'analysis_team']
2025-10-05 15:57:06,741 - __main__ - INFO - 
[Step 2] Query Decomposition...
2025-10-05 15:57:06,741 - app.service_agent.cognitive_agents.query_decomposer - INFO - Decomposing query: 묵시적 갱신이 뭔가요?...
2025-10-05 15:57:06,741 - app.service_agent.cognitive_agents.query_decomposer - INFO - Query is simple, no decomposition needed
2025-10-05 15:57:06,741 - __main__ - INFO -   복합 질문: False
2025-10-05 15:57:06,741 - __main__ - INFO -   작업 수: 1
2025-10-05 15:57:06,741 - __main__ - INFO -   실행 모드: sequential
2025-10-05 15:57:06,741 - __main__ - INFO - 
[Step 3] Execution Plan 생성...
2025-10-05 15:57:06,741 - app.service_agent.cognitive_agents.planning_agent - INFO - Creating execution plan for intent: 법률상담
2025-10-05 15:57:06,741 - app.service_agent.cognitive_agents.planning_agent - WARNING - AgentRegistry is empty, using default teams
2025-10-05 15:57:06,741 - app.service_agent.cognitive_agents.planning_agent - DEBUG - Suggested agents: ['search_team', 'analysis_team']
2025-10-05 15:57:06,741 - app.service_agent.cognitive_agents.planning_agent - DEBUG - Available agents: ['search_team', 'analysis_team', 'document_team']
2025-10-05 15:57:06,741 - app.service_agent.cognitive_agents.planning_agent - INFO - Selected agents/teams for execution: ['search_team', 'analysis_team']
2025-10-05 15:57:06,741 - __main__ - INFO -   전략: sequential
2025-10-05 15:57:06,741 - __main__ - INFO -   단계 수: 2
2025-10-05 15:57:06,741 - __main__ - INFO - 
✓ 테스트 성공 (소요시간: 8.29초)
2025-10-05 15:57:06,741 - __main__ - INFO - 
================================================================================
2025-10-05 15:57:06,741 - __main__ - INFO - [15] 단일 질문 테스트: S015
2025-10-05 15:57:06,741 - __main__ - INFO - 질문: 용산구 아파트 실거래가 조회
2025-10-05 15:57:06,741 - __main__ - INFO - ================================================================================
2025-10-05 15:57:06,741 - __main__ - INFO - 
[Step 1] Intent 분석...
2025-10-05 15:57:06,741 - app.service_agent.cognitive_agents.planning_agent - INFO - Analyzing intent for query: 용산구 아파트 실거래가 조회...
2025-10-05 15:57:06,742 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-d4451ecb-6fa4-4962-b290-091d6a6ca5e7', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 의도 분석 전문가입니다.\n사용자의 질문을 정확히 이해하고, 어떤 종류의 도움이 필요한지 분류해야 합니다.\n\n## Chain-of-Thought 분석 프로세스\n\n질문을 분석할 때 다음 단계를 **순서대로** 따르세요:\n\n### 1단계: 질문 구조 파악\n- 단순 정보 요청인가? (예: "~이 뭐야?", "~알려줘")\n- 상황 설명이 포함되어 있는가? (배경, 현재 상태)\n- 구체적 수치나 데이터가 있는가? (금액, 비율, 기간 등)\n- 문제 해결을 요구하는가? (예: "어떻게 해야 해?", "방법 알려줘")\n\n### 2단계: 요청 유형 판단\n- **정보 확인형**: 사실, 개념, 규정 확인 → 검색만으로 충분\n- **평가/판단형**: "괜찮아?", "적절해?", "문제있어?" → 검색 + 분석 필요\n- **해결책 요청형**: "어떻게?", "방법?", "대처?" → 검색 + 분석 + 제안 필요\n- **비교/선택형**: "A vs B", "어느게 나아?" → 검색 + 분석(비교) 필요\n\n### 3단계: 복잡도 평가\n- **저**: 단일 개념/사실 확인 (예: "전세금 인상률 한도?")\n- **중**: 특정 상황 + 판단 (예: "3억을 5억으로 올려달래. 가능해?")\n- **고**: 복잡한 상황 + 여러 조건 + 해결책 (예: "10년 거주, 3억→10억 요구. 어떻게 해야 해?")\n\n### 4단계: 필요한 처리 결정\n- **검색만**: 정보 확인형 + 저복잡도\n- **검색+분석**: 평가/판단형 OR 중복잡도 OR 수치 비교 포함\n- **종합처리**: 해결책 요청형 OR 고복잡도 OR 여러 조건 동시 고려\n\n### 5단계: 최종 검증\n- 선택한 의도로 사용자 질문에 완전히 답변 가능한가?\n- 단순 정보 제공으로 끝나는가, 아니면 추가 분석/판단이 필요한가?\n- 상황 설명이 있으면서 "해결", "방법", "어떻게" 등이 있으면 → COMPREHENSIVE 고려\n\n## 중요: 복합 질문 처리\n복합적인 질문(여러 의도가 섞인 질문)의 경우, 가장 핵심적인 의도를 파악하되,\nsub_intents 필드에 부가적인 의도들도 함께 기록해주세요.\n\n**특히 주의**:\n- 법률 키워드가 있어도, "해결방법", "어떻게 해야" 같은 표현이 있으면 단순 LEGAL_CONSULT가 아닐 수 있음\n- 구체적 상황(금액, 기간 등) + 해결책 요구 = COMPREHENSIVE 또는 복합 의도로 분류\n\n## 분류 카테고리 설명:\n\n1. **LEGAL_CONSULT (법률상담)**\n   - 설명: 부동산 관련 법률, 권리, 의무에 대한 질문\n   - 예시:\n     * 단순: "전세금 5% 인상이 가능한가요?", "임대차계약 갱신 거부할 수 있나요?"\n     * 복합: "전세금 인상 가능한지 확인하고 법적 근거도 알려주세요"\n   - 키워드: 법, 전세, 임대, 보증금, 계약, 권리, 의무, 갱신, 임차인, 임대인, 법률, 규정, 조항\n   - 필요한 처리: 법률 데이터베이스 검색, 관련 법조항 찾기\n\n2. **MARKET_INQUIRY (시세조회)**\n   - 설명: 부동산 시장 가격, 시세, 거래 동향에 대한 질문\n   - 예시:\n     * 단순: "강남구 아파트 전세 시세 알려주세요", "서초동 매매가 얼마나 올랐나요?"\n     * 복합: "강남구 시세 확인하고 대출 가능 금액도 계산해줘"\n   - 키워드: 시세, 가격, 매매가, 전세가, 월세, 시장, 동향, 평균, 지역명, 상승률, 하락률\n   - 필요한 처리: 부동산 시세 데이터 조회, 지역별 가격 분석\n\n3. **LOAN_CONSULT (대출상담)**\n   - 설명: 주택담보대출, 전세자금대출 등 금융 관련 질문\n   - 예시:\n     * 단순: "전세자금대출 한도가 얼마인가요?", "LTV가 뭔가요?"\n     * 복합: "대출 한도 확인하고 금리 비교도 해주세요"\n   - 키워드: 대출, 금리, 한도, 조건, 상환, LTV, DTI, DSR, 담보, 금융, 은행\n   - 필요한 처리: 대출 상품 조회, 금리 정보 검색, 한도 계산\n\n4. **CONTRACT_CREATION (계약서작성)**\n   - 설명: 새로운 계약서나 문서를 작성해달라는 요청\n   - 예시:\n     * 단순: "임대차계약서 작성해주세요", "전세계약서 초안 만들어주세요"\n     * 복합: "계약서 작성하고 주의사항도 검토해주세요"\n   - 키워드: 작성, 만들, 생성, 초안, 계약서, 문서, 양식\n   - 필요한 처리: 문서 생성 에이전트 호출, 템플릿 기반 작성\n\n5. **CONTRACT_REVIEW (계약서검토)**\n   - 설명: 기존 계약서나 문서를 검토해달라는 요청\n   - 예시:\n     * 단순: "이 계약서 검토해주세요", "특약사항 문제없나요?"\n     * 복합: "계약서 검토하고 수정사항도 제안해주세요"\n   - 키워드: 검토, 확인, 점검, 리뷰, 분석해, 살펴봐, 체크\n   - 필요한 처리: 문서 분석, 위험 요소 식별, 개선사항 제안\n\n6. **COMPREHENSIVE (종합분석)**\n   - 설명: 여러 측면을 종합적으로 분석해달라는 요청, 또는 복잡한 상황에 대한 해결책 요청\n   - 예시:\n     * 단순: "이 물건 전체적으로 분석해주세요"\n     * 복합: "시세, 법률, 대출 모두 검토해서 종합 의견 주세요"\n     * 해결형: "10년 거주했는데 전세금 3억을 10억으로 올려달래. 어떻게 해야 해?"\n     * 상황+해결: "집주인이 계약 갱신 거부했어. 법적으로 어떻게 대응해야 할까?"\n   - 키워드: 종합, 전체, 모든, 전반적, 종합적, 평가, 분석, 어떻게, 방법, 해결, 대처\n   - 패턴: 구체적 상황 설명 + "어떻게/방법/해결" 요청\n   - 필요한 처리: 다중 데이터 소스 통합 분석, 상황 평가, 해결책 제시\n\n7. **RISK_ANALYSIS (리스크분석)**\n   - 설명: 위험 요소나 주의사항에 대한 질문\n   - 예시:\n     * 단순: "이 계약 위험한가요?", "주의할 점 알려주세요"\n     * 복합: "리스크 분석하고 대안도 제시해주세요"\n   - 키워드: 위험, 리스크, 주의, 문제점, 조심, 걱정, 우려\n   - 필요한 처리: 위험 요소 분석, 주의사항 추출\n\n8. **UNCLEAR (불분명)**\n   - 설명: 의도를 명확히 파악하기 어려운 질문\n   - 예시: "이거 좀 봐주세요", "어떻게 해야 할까요?", "도와주세요"\n   - 처리: 추가 질문으로 의도 명확화 필요\n\n9. **IRRELEVANT (무관)**\n   - 설명: 부동산과 전혀 관련 없는 질문\n   - 예시: "날씨 어때?", "저녁 뭐 먹지?", "주식 추천해줘"\n   - 처리: 부동산 관련 질문을 유도\n\n## 복합 질문 예시와 분석 (CoT 적용):\n\n### 예시 1: "강남구 아파트 시세 알려주고 전세자금대출 가능한지도 확인해줘"\n**CoT 분석**:\n1. 구조: 두 개의 요청 ("시세" + "대출")\n2. 유형: 정보 확인형 (둘 다)\n3. 복잡도: 중 (두 가지 독립적 조회)\n4. 필요 처리: 검색 + 계산/분석\n\n**결론**:\n- 주 의도: MARKET_INQUIRY (시세 조회가 먼저 필요)\n- 부가 의도: LOAN_CONSULT (대출 확인)\n- 분해: ["강남구 아파트 시세 조회", "전세자금대출 가능 여부 확인"]\n\n### 예시 2: "이 계약서 검토해서 위험한 부분 있는지 알려주고 수정 제안도 해줘"\n**CoT 분석**:\n1. 구조: 검토 + 위험 평가 + 수정안\n2. 유형: 평가/판단형 + 해결책 요청형\n3. 복잡도: 고 (3단계 처리)\n4. 필요 처리: 검토 + 분석 + 문서 생성\n\n**결론**:\n- 주 의도: CONTRACT_REVIEW (계약서 검토)\n- 부가 의도: RISK_ANALYSIS (위험 분석)\n- 분해: ["계약서 전체 검토", "위험 요소 식별", "수정사항 제안"]\n\n### 예시 3: "집주인이 짜증나, 10년 살았는데 전세금 3억을 10억으로 올려달래. 법적으로 해결방법 알려줘"\n**CoT 분석**:\n1. 구조: 상황 설명 (10년 거주, 3억→10억) + 해결책 요청\n2. 유형: 해결책 요청형 (단순 정보 X)\n3. 복잡도: 고 (구체적 상황 + 수치 비교 + 법률 + 대응방안)\n4. 필요 처리: 법률 검색 + 상황 분석 + 해결책 제시\n\n**결론**:\n- 주 의도: COMPREHENSIVE (복잡한 상황에 대한 종합 해결)\n- 부가 의도: LEGAL_CONSULT, RISK_ANALYSIS\n- 분해: ["전세금 인상 한도 법률 조회", "3억→10억 인상의 타당성 분석", "구체적 대응 방안 제시"]\n- **이유**: "법적으로"라는 키워드가 있지만, 단순 법률 확인이 아니라 구체적 상황에 대한 해결책을 요구하므로 COMPREHENSIVE\n\n### 예시 4: "전세금 인상률 상한이 얼마야?"\n**CoT 분석**:\n1. 구조: 단순 사실 확인\n2. 유형: 정보 확인형\n3. 복잡도: 저 (단일 개념)\n4. 필요 처리: 검색만\n\n**결론**:\n- 주 의도: LEGAL_CONSULT (법률 정보 조회)\n- 부가 의도: 없음\n- 분해: 필요 없음\n\n## 응답 형식 (JSON 형식으로 응답):\n\n```json\n{\n    "intent": "LEGAL_CONSULT",\n    "confidence": 0.9,\n    "keywords": ["전세금", "인상", "제한"],\n    "sub_intents": [],\n    "is_compound": false,\n    "decomposed_tasks": [],\n    "entities": {\n        "location": "강남구",\n        "price": "5억",\n        "contract_type": "전세",\n        "date": "2024년",\n        "area": "84㎡",\n        "action_verbs": ["확인", "검토"]\n    },\n    "reasoning": "전세금 인상에 대한 법률 질문이므로 LEGAL_CONSULT로 분류"\n}\n```\n\n응답 규칙:\n- intent: 위 9개 카테고리 중 하나 (대문자_언더스코어 형식)\n- confidence: 0.0~1.0 (0.8 이상이면 매우 확실, 0.5 미만이면 불확실)\n- keywords: 추출된 주요 키워드 목록\n- sub_intents: 복합 질문일 경우 부가적인 의도들\n- is_compound: 복합 질문 여부 (true/false)\n- decomposed_tasks: 복합 질문을 분해한 개별 작업들\n- entities: 추출된 엔티티 정보\n- reasoning: **반드시 CoT 5단계를 거쳐 분석한 과정을 포함** (구조 파악 → 유형 판단 → 복잡도 평가 → 필요 처리 → 최종 검증)\n\n## reasoning 작성 예시:\n"1단계(구조): 상황 설명(10년 거주, 3억→10억) + 해결책 요청 포함.\n2단계(유형): 해결책 요청형 - 단순 정보가 아닌 대응방안 필요.\n3단계(복잡도): 고 - 구체적 수치 비교와 복잡한 상황.\n4단계(처리): 법률 검색 + 상황 분석 + 해결책 제시 필요.\n5단계(검증): LEGAL_CONSULT만으로는 불충분, 종합적 분석 필요 → COMPREHENSIVE 선택"\n\n## 판단 가이드:\n- 여러 의도가 섞여있다면, 가장 주된 의도를 intent에, 나머지를 sub_intents에 기록\n- "그리고", "또한", "함께", "같이" 등의 연결어가 있으면 복합 질문일 가능성 높음\n- 법률 관련 키워드가 있으면 LEGAL_CONSULT 우선\n- 가격/시세 언급이 명확하면 MARKET_INQUIRY\n- 계약서라는 단어와 함께 "작성/만들기"가 있으면 CONTRACT_CREATION\n- 계약서라는 단어와 함께 "검토/확인"이 있으면 CONTRACT_REVIEW\n- 불확실하면 confidence를 낮게 설정하고 UNCLEAR 선택\n- 복합 질문은 is_compound를 true로 설정하고 개별 작업으로 분해\n\n분석할 질문: 용산구 아파트 실거래가 조회'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 15:57:06,742 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 15:57:06,742 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 15:57:06,742 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 15:57:06,742 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 15:57:06,743 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 15:57:06,743 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 15:57:12,631 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 06:57:12 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'5664'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'5689'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9986'), (b'x-ratelimit-remaining-tokens', b'197246'), (b'x-ratelimit-reset-requests', b'1m54.047s'), (b'x-ratelimit-reset-tokens', b'826ms'), (b'x-request-id', b'req_658b0e52c60947d1b5740b756f3760cc'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b05e10fe73091-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 15:57:12,631 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 15:57:12,631 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 15:57:12,641 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 15:57:12,641 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 15:57:12,641 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 15:57:12,641 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 06:57:12 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '5664', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '5689', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9986', 'x-ratelimit-remaining-tokens': '197246', 'x-ratelimit-reset-requests': '1m54.047s', 'x-ratelimit-reset-tokens': '826ms', 'x-request-id': 'req_658b0e52c60947d1b5740b756f3760cc', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b05e10fe73091-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 15:57:12,641 - openai._base_client - DEBUG - request_id: req_658b0e52c60947d1b5740b756f3760cc
2025-10-05 15:57:12,641 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: intent_analysis | Model: gpt-4o-mini-2024-07-18 | Tokens: 3381 (prompt: 3179, completion: 202)
2025-10-05 15:57:12,641 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM Intent Analysis Result: {'intent': 'MARKET_INQUIRY', 'confidence': 0.95, 'keywords': ['용산구', '아파트', '실거래가', '조회'], 'sub_intents': [], 'is_compound': False, 'decomposed_tasks': [], 'entities': {'location': '용산구', 'property_type': '아파트', 'action_verbs': ['조회']}, 'reasoning': "1단계(구조): 단순 정보 요청으로 '실거래가 조회' 포함. 2단계(유형): 정보 확인형 - 실거래가에 대한 사실 확인 필요. 3단계(복잡도): 저 - 단일 개념 확인. 4단계(처리): 검색만으로 충분. 5단계(검증): 단순 정보 요청이므로 MARKET_INQUIRY로 분류."}
2025-10-05 15:57:12,642 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-fbe9c1be-8135-48fc-9b14-e827b7274b0c', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 Agent 선택 전문가입니다.\n사용자의 요청에 가장 적합한 Agent/Team을 선택하는 것이 목표입니다.\n\n## 현재 상황\n\n**사용자 질문:** 용산구 아파트 실거래가 조회\n**분석된 의도:** 시세조회\n**추출된 키워드:** [\'용산구\', \'아파트\', \'실거래가\', \'조회\']\n\n## 사용 가능한 Agent/Team 정보\n\n{\'search_team\': {\'name\': \'search_team\', \'capabilities\': \'법률 검색, 부동산 시세 조회, 대출 상품 검색\', \'tools\': [\'legal_search\', \'market_data\', \'loan_data\'], \'use_cases\': [\'법률 상담\', \'시세 조회\', \'대출 정보\']}, \'analysis_team\': {\'name\': \'analysis_team\', \'capabilities\': \'데이터 분석, 리스크 평가, 인사이트 생성, 추천\', \'tools\': [\'data_analyzer\', \'risk_evaluator\'], \'use_cases\': [\'시장 분석\', \'리스크 평가\', \'투자 분석\']}, \'document_team\': {\'name\': \'document_team\', \'capabilities\': \'계약서 작성, 문서 생성, 문서 검토\', \'tools\': [\'document_generator\', \'contract_reviewer\'], \'use_cases\': [\'계약서 작성\', \'문서 검토\']}}\n\n## Agent 역할 및 상세 가이드\n\n### 1. search_team (검색 팀)\n- **주요 기능**: 정보 검색 및 데이터 수집\n- **전문 분야**:\n  * 법률 정보 검색 (전세법, 임대차보호법, 부동산 관련 법규)\n  * 부동산 시세 조회 (매매가, 전세가, 월세, 실거래가)\n  * 대출 상품 정보 검색 (금리, 한도, 조건)\n  * 지역 정보 및 인프라 조회\n- **도구**: legal_search, market_data, loan_data\n- **적합한 작업**: 정보 조회, 데이터 수집, 법률 확인, 시세 파악\n- **예시**:\n  * "전세금 5% 인상 가능한가요?"\n  * "강남구 아파트 전세 시세"\n  * "전세자금대출 한도 얼마?"\n\n### 2. analysis_team (분석 팀)\n- **주요 기능**: 데이터 분석 및 평가\n- **전문 분야**:\n  * 시장 동향 분석 (상승률, 하락률, 추세)\n  * 리스크 평가 (계약, 투자 위험도)\n  * 투자 수익률 계산 (ROI, 월세 수익률)\n  * 대출 한도 및 조건 분석 (LTV, DTI, DSR)\n  * 비교 분석 (지역별, 상품별)\n- **도구**: data_analyzer, risk_evaluator, calculator\n- **적합한 작업**: 데이터 분석, 리스크 평가, 계산, 비교, 예측\n- **의존성**: 보통 search_team의 데이터가 필요\n- **예시**:\n  * "이 지역 투자 가치 분석해줘"\n  * "계약 리스크 평가해줘"\n  * "대출 가능 금액 계산해줘"\n\n### 3. document_team (문서 팀)\n- **주요 기능**: 문서 생성 및 관리\n- **전문 분야**:\n  * 계약서 작성 (임대차, 매매, 전세)\n  * 문서 템플릿 관리\n  * 특약사항 생성\n  * 계약서 수정안 작성\n  * 법률 문서 검토\n- **도구**: document_generator, contract_template, contract_reviewer\n- **적합한 작업**: 문서 작성, 계약서 생성, 문서 수정, 검토\n- **예시**:\n  * "임대차계약서 작성해줘"\n  * "특약사항 추가해줘"\n  * "계약서 수정안 만들어줘"\n\n## Chain-of-Thought Agent 선택 프로세스\n\n다음 단계를 **순서대로** 따라 최적의 Agent 조합을 선택하세요:\n\n### 1단계: 질문 요구사항 파악\n- 단순 정보 조회인가? → search_team만 필요\n- 판단/평가가 필요한가? → search + analysis 필요\n- 해결책 제시가 필요한가? → search + analysis 필요\n- 문서 생성이 필요한가? → document_team 추가\n\n### 2단계: 작업 복잡도 판단\n- **단순** (검색만): "~이 뭐야?", "~알려줘" → search_team\n- **중간** (검색+판단): "~괜찮아?", "~적절해?" → search + analysis\n- **복잡** (종합 해결): 구체적 상황 + "어떻게 해야 해?" → search + analysis\n\n### 3단계: 의존성 분석\n- 독립적 작업: 단일 팀으로 처리 가능\n- 순차적 의존: 이전 결과 필요 → 여러 팀 순서대로\n- 병렬 가능: 동시 조회 가능 → coordination: "parallel"\n\n### 4단계: 최종 검증\n- 선택한 팀들로 질문에 완전히 답변 가능한가?\n- 불필요한 팀이 포함되지 않았는가?\n- 순서가 논리적인가? (데이터 흐름 고려)\n\n### 중요 원칙:\n- **법률 키워드만으로 판단하지 말 것**: "법적으로 어떻게 해야 해?" = 법률 검색 + 분석 필요\n- **상황 설명 + 해결책 요청** = 반드시 analysis_team 포함\n- **구체적 수치 비교** (3억→10억 같은) = analysis_team 필요\n\n## 의도별 Agent 매핑 가이드 (기본 가이드 - CoT로 조정 가능)\n\n| 의도 (Intent) | 기본 조합 | 상황별 조정 |\n|--------------|-----------|-------------|\n| LEGAL_CONSULT | ["search_team"] | 해결책 요청시 → + analysis_team |\n| MARKET_INQUIRY | ["search_team"] | 비교/평가시 → + analysis_team |\n| LOAN_CONSULT | ["search_team", "analysis_team"] | 계산 필수 |\n| CONTRACT_CREATION | ["document_team"] | 검토 후 작성 → search + document |\n| CONTRACT_REVIEW | ["search_team", "analysis_team"] | 법률 검토 + 리스크 분석 |\n| COMPREHENSIVE | ["search_team", "analysis_team"] | **항상 분석 포함** |\n| RISK_ANALYSIS | ["analysis_team"] | 법률 근거 필요시 → search + analysis |\n| UNCLEAR | ["search_team", "analysis_team"] | 포괄적 대응 |\n\n**중요**: 위 매핑은 **기본 가이드**일 뿐입니다.\n실제 질문의 내용(CoT 분석 결과)에 따라 조정하세요!\n\n## 복합 질문 처리 예시 (CoT 적용)\n\n### 예시 1: 순차적 처리\n질문: "강남구 시세 확인하고 투자 가치 분석해줘"\n**CoT 분석**:\n1. 요구사항: 시세 조회 + 투자 가치 평가\n2. 복잡도: 중간 (검색 + 분석)\n3. 의존성: 시세 데이터 → 투자 분석 (순차)\n4. 검증: search만으로는 "투자 가치 평가" 불가능\n\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "1단계: 시세 조회+투자 평가 필요. 2단계: 중간 복잡도. 3단계: 순차 의존. 4단계: search로 시세 수집 후 analysis로 투자 가치 평가 필요",\n    "coordination": "sequential"\n}\n```\n\n### 예시 2: 단순 정보 조회\n질문: "전세금 인상률 한도가 얼마야?"\n**CoT 분석**:\n1. 요구사항: 단순 사실 확인\n2. 복잡도: 낮음 (정보 확인형)\n3. 의존성: 없음\n4. 검증: search_team만으로 충분\n\n```json\n{\n    "selected_agents": ["search_team"],\n    "reasoning": "1단계: 단순 정보 조회. 2단계: 저복잡도. 3단계: 독립적. 4단계: 법률 검색만으로 답변 가능",\n    "coordination": "single"\n}\n```\n\n### 예시 3: 해결책 요청 (핵심 예시!)\n질문: "집주인이 전세금 3억을 10억으로 올려달래. 법적으로 어떻게 해야 해?"\n의도: COMPREHENSIVE\n**CoT 분석**:\n1. 요구사항: 상황 설명 + 해결책 요청\n2. 복잡도: 높음 (구체적 상황 + 수치 비교)\n3. 의존성: 법률 확인 → 상황 분석 → 해결책 제시\n4. 검증: "법적으로"만 보고 search만 선택하면 불충분! 해결책 제시 필요\n\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "1단계: 법률 + 상황 분석 + 해결책 필요. 2단계: 고복잡도(3억→10억 비정상). 3단계: 순차(법률 확인 후 타당성 분석). 4단계: \'어떻게 해야\' = 단순 법률 조회 아님, 분석 필수",\n    "coordination": "sequential",\n    "confidence": 0.95\n}\n```\n\n## 응답 형식 (JSON)\n\n```json\n{\n    "selected_agents": ["선택된 agent/team 목록"],\n    "reasoning": "선택 이유를 구체적으로 설명. 각 Agent의 역할과 처리 순서 포함",\n    "coordination": "single/sequential/parallel/pipeline",\n    "dependencies": {"agent2": ["agent1"]},\n    "estimated_time": 30,\n    "confidence": 0.9\n}\n```\n\n## 선택 가이드라인\n\n1. **최소 Agent 원칙**: 가능한 적은 수의 Agent로 처리\n2. **전문성 우선**: 해당 작업에 가장 전문적인 Agent 선택\n3. **효율성 고려**: 병렬 처리 가능한 경우 명시\n4. **의존성 관리**: 데이터 흐름을 고려한 순서 지정\n5. **폴백 전략**: 불확실한 경우 ["search_team", "analysis_team"] 조합\n\n## 주의사항\n\n- selected_agents는 반드시 배열 형태\n- Agent 이름은 정확히: "search_team", "analysis_team", "document_team"\n- 최소 1개, 최대 3개 선택\n- 순서는 실행 우선순위 (앞에 있을수록 먼저 실행)\n- reasoning은 상세하고 논리적으로 작성\n- coordination 필드로 실행 방식 명시\n- 복합 질문의 경우 의존성 관계 명확히 표시'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 15:57:12,642 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 15:57:12,642 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 15:57:12,643 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 15:57:12,643 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 15:57:12,643 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 15:57:12,643 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 15:57:15,498 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 06:57:15 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'2642'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'2664'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9986'), (b'x-ratelimit-remaining-tokens', b'197888'), (b'x-ratelimit-reset-requests', b'1m56.484s'), (b'x-ratelimit-reset-tokens', b'633ms'), (b'x-request-id', b'req_28533d0038b348849f9af6d7c6b7cd47'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b0605ec3a3091-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 15:57:15,498 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 15:57:15,499 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 15:57:15,504 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 15:57:15,504 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 15:57:15,504 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 15:57:15,504 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 06:57:15 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '2642', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '2664', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9986', 'x-ratelimit-remaining-tokens': '197888', 'x-ratelimit-reset-requests': '1m56.484s', 'x-ratelimit-reset-tokens': '633ms', 'x-request-id': 'req_28533d0038b348849f9af6d7c6b7cd47', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b0605ec3a3091-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 15:57:15,504 - openai._base_client - DEBUG - request_id: req_28533d0038b348849f9af6d7c6b7cd47
2025-10-05 15:57:15,504 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: agent_selection | Model: gpt-4o-mini-2024-07-18 | Tokens: 2493 (prompt: 2360, completion: 133)
2025-10-05 15:57:15,504 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM agent selection reasoning: 1단계: 사용자는 용산구 아파트의 실거래가를 조회하고자 하므로 단순한 시세 조회가 필요합니다. 2단계: 이 요청은 단순 정보 조회로 분류됩니다. 3단계: 독립적인 작업으로, search_team만으로 충분합니다. 4단계: search_team이 아파트 실거래가 정보를 제공할 수 있으므로 적합합니다.
2025-10-05 15:57:15,504 - app.service_agent.cognitive_agents.planning_agent - INFO - ✅ Primary LLM selected agents: ['search_team']
2025-10-05 15:57:15,504 - __main__ - INFO -   의도: 시세조회
2025-10-05 15:57:15,504 - __main__ - INFO -   신뢰도: 0.95
2025-10-05 15:57:15,504 - __main__ - INFO -   추천 Agent: ['search_team']
2025-10-05 15:57:15,504 - __main__ - INFO - 
[Step 2] Query Decomposition...
2025-10-05 15:57:15,504 - app.service_agent.cognitive_agents.query_decomposer - INFO - Decomposing query: 용산구 아파트 실거래가 조회...
2025-10-05 15:57:15,504 - app.service_agent.cognitive_agents.query_decomposer - INFO - Query is simple, no decomposition needed
2025-10-05 15:57:15,504 - __main__ - INFO -   복합 질문: False
2025-10-05 15:57:15,504 - __main__ - INFO -   작업 수: 1
2025-10-05 15:57:15,504 - __main__ - INFO -   실행 모드: sequential
2025-10-05 15:57:15,504 - __main__ - INFO - 
[Step 3] Execution Plan 생성...
2025-10-05 15:57:15,504 - app.service_agent.cognitive_agents.planning_agent - INFO - Creating execution plan for intent: 시세조회
2025-10-05 15:57:15,504 - app.service_agent.cognitive_agents.planning_agent - WARNING - AgentRegistry is empty, using default teams
2025-10-05 15:57:15,504 - app.service_agent.cognitive_agents.planning_agent - DEBUG - Suggested agents: ['search_team']
2025-10-05 15:57:15,504 - app.service_agent.cognitive_agents.planning_agent - DEBUG - Available agents: ['search_team', 'analysis_team', 'document_team']
2025-10-05 15:57:15,504 - app.service_agent.cognitive_agents.planning_agent - INFO - Selected agents/teams for execution: ['search_team']
2025-10-05 15:57:15,505 - __main__ - INFO -   전략: sequential
2025-10-05 15:57:15,505 - __main__ - INFO -   단계 수: 1
2025-10-05 15:57:15,505 - __main__ - INFO - 
✓ 테스트 성공 (소요시간: 8.76초)
2025-10-05 15:57:15,506 - __main__ - INFO - 
결과 저장: C:\kdy\Projects\holmesnyangz\beta_v001\backend\app\service_agent\reports\phase1_test_results.json
2025-10-05 15:57:15,507 - __main__ - INFO - 
================================================================================
2025-10-05 15:57:15,507 - __main__ - INFO - [16] 단일 질문 테스트: S016
2025-10-05 15:57:15,507 - __main__ - INFO - 질문: 신혼부부 특례 대출 조건은?
2025-10-05 15:57:15,507 - __main__ - INFO - ================================================================================
2025-10-05 15:57:15,507 - __main__ - INFO - 
[Step 1] Intent 분석...
2025-10-05 15:57:15,507 - app.service_agent.cognitive_agents.planning_agent - INFO - Analyzing intent for query: 신혼부부 특례 대출 조건은?...
2025-10-05 15:57:15,507 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-6c7d2f87-14fb-43a6-8576-0afa8abdaaa7', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 의도 분석 전문가입니다.\n사용자의 질문을 정확히 이해하고, 어떤 종류의 도움이 필요한지 분류해야 합니다.\n\n## Chain-of-Thought 분석 프로세스\n\n질문을 분석할 때 다음 단계를 **순서대로** 따르세요:\n\n### 1단계: 질문 구조 파악\n- 단순 정보 요청인가? (예: "~이 뭐야?", "~알려줘")\n- 상황 설명이 포함되어 있는가? (배경, 현재 상태)\n- 구체적 수치나 데이터가 있는가? (금액, 비율, 기간 등)\n- 문제 해결을 요구하는가? (예: "어떻게 해야 해?", "방법 알려줘")\n\n### 2단계: 요청 유형 판단\n- **정보 확인형**: 사실, 개념, 규정 확인 → 검색만으로 충분\n- **평가/판단형**: "괜찮아?", "적절해?", "문제있어?" → 검색 + 분석 필요\n- **해결책 요청형**: "어떻게?", "방법?", "대처?" → 검색 + 분석 + 제안 필요\n- **비교/선택형**: "A vs B", "어느게 나아?" → 검색 + 분석(비교) 필요\n\n### 3단계: 복잡도 평가\n- **저**: 단일 개념/사실 확인 (예: "전세금 인상률 한도?")\n- **중**: 특정 상황 + 판단 (예: "3억을 5억으로 올려달래. 가능해?")\n- **고**: 복잡한 상황 + 여러 조건 + 해결책 (예: "10년 거주, 3억→10억 요구. 어떻게 해야 해?")\n\n### 4단계: 필요한 처리 결정\n- **검색만**: 정보 확인형 + 저복잡도\n- **검색+분석**: 평가/판단형 OR 중복잡도 OR 수치 비교 포함\n- **종합처리**: 해결책 요청형 OR 고복잡도 OR 여러 조건 동시 고려\n\n### 5단계: 최종 검증\n- 선택한 의도로 사용자 질문에 완전히 답변 가능한가?\n- 단순 정보 제공으로 끝나는가, 아니면 추가 분석/판단이 필요한가?\n- 상황 설명이 있으면서 "해결", "방법", "어떻게" 등이 있으면 → COMPREHENSIVE 고려\n\n## 중요: 복합 질문 처리\n복합적인 질문(여러 의도가 섞인 질문)의 경우, 가장 핵심적인 의도를 파악하되,\nsub_intents 필드에 부가적인 의도들도 함께 기록해주세요.\n\n**특히 주의**:\n- 법률 키워드가 있어도, "해결방법", "어떻게 해야" 같은 표현이 있으면 단순 LEGAL_CONSULT가 아닐 수 있음\n- 구체적 상황(금액, 기간 등) + 해결책 요구 = COMPREHENSIVE 또는 복합 의도로 분류\n\n## 분류 카테고리 설명:\n\n1. **LEGAL_CONSULT (법률상담)**\n   - 설명: 부동산 관련 법률, 권리, 의무에 대한 질문\n   - 예시:\n     * 단순: "전세금 5% 인상이 가능한가요?", "임대차계약 갱신 거부할 수 있나요?"\n     * 복합: "전세금 인상 가능한지 확인하고 법적 근거도 알려주세요"\n   - 키워드: 법, 전세, 임대, 보증금, 계약, 권리, 의무, 갱신, 임차인, 임대인, 법률, 규정, 조항\n   - 필요한 처리: 법률 데이터베이스 검색, 관련 법조항 찾기\n\n2. **MARKET_INQUIRY (시세조회)**\n   - 설명: 부동산 시장 가격, 시세, 거래 동향에 대한 질문\n   - 예시:\n     * 단순: "강남구 아파트 전세 시세 알려주세요", "서초동 매매가 얼마나 올랐나요?"\n     * 복합: "강남구 시세 확인하고 대출 가능 금액도 계산해줘"\n   - 키워드: 시세, 가격, 매매가, 전세가, 월세, 시장, 동향, 평균, 지역명, 상승률, 하락률\n   - 필요한 처리: 부동산 시세 데이터 조회, 지역별 가격 분석\n\n3. **LOAN_CONSULT (대출상담)**\n   - 설명: 주택담보대출, 전세자금대출 등 금융 관련 질문\n   - 예시:\n     * 단순: "전세자금대출 한도가 얼마인가요?", "LTV가 뭔가요?"\n     * 복합: "대출 한도 확인하고 금리 비교도 해주세요"\n   - 키워드: 대출, 금리, 한도, 조건, 상환, LTV, DTI, DSR, 담보, 금융, 은행\n   - 필요한 처리: 대출 상품 조회, 금리 정보 검색, 한도 계산\n\n4. **CONTRACT_CREATION (계약서작성)**\n   - 설명: 새로운 계약서나 문서를 작성해달라는 요청\n   - 예시:\n     * 단순: "임대차계약서 작성해주세요", "전세계약서 초안 만들어주세요"\n     * 복합: "계약서 작성하고 주의사항도 검토해주세요"\n   - 키워드: 작성, 만들, 생성, 초안, 계약서, 문서, 양식\n   - 필요한 처리: 문서 생성 에이전트 호출, 템플릿 기반 작성\n\n5. **CONTRACT_REVIEW (계약서검토)**\n   - 설명: 기존 계약서나 문서를 검토해달라는 요청\n   - 예시:\n     * 단순: "이 계약서 검토해주세요", "특약사항 문제없나요?"\n     * 복합: "계약서 검토하고 수정사항도 제안해주세요"\n   - 키워드: 검토, 확인, 점검, 리뷰, 분석해, 살펴봐, 체크\n   - 필요한 처리: 문서 분석, 위험 요소 식별, 개선사항 제안\n\n6. **COMPREHENSIVE (종합분석)**\n   - 설명: 여러 측면을 종합적으로 분석해달라는 요청, 또는 복잡한 상황에 대한 해결책 요청\n   - 예시:\n     * 단순: "이 물건 전체적으로 분석해주세요"\n     * 복합: "시세, 법률, 대출 모두 검토해서 종합 의견 주세요"\n     * 해결형: "10년 거주했는데 전세금 3억을 10억으로 올려달래. 어떻게 해야 해?"\n     * 상황+해결: "집주인이 계약 갱신 거부했어. 법적으로 어떻게 대응해야 할까?"\n   - 키워드: 종합, 전체, 모든, 전반적, 종합적, 평가, 분석, 어떻게, 방법, 해결, 대처\n   - 패턴: 구체적 상황 설명 + "어떻게/방법/해결" 요청\n   - 필요한 처리: 다중 데이터 소스 통합 분석, 상황 평가, 해결책 제시\n\n7. **RISK_ANALYSIS (리스크분석)**\n   - 설명: 위험 요소나 주의사항에 대한 질문\n   - 예시:\n     * 단순: "이 계약 위험한가요?", "주의할 점 알려주세요"\n     * 복합: "리스크 분석하고 대안도 제시해주세요"\n   - 키워드: 위험, 리스크, 주의, 문제점, 조심, 걱정, 우려\n   - 필요한 처리: 위험 요소 분석, 주의사항 추출\n\n8. **UNCLEAR (불분명)**\n   - 설명: 의도를 명확히 파악하기 어려운 질문\n   - 예시: "이거 좀 봐주세요", "어떻게 해야 할까요?", "도와주세요"\n   - 처리: 추가 질문으로 의도 명확화 필요\n\n9. **IRRELEVANT (무관)**\n   - 설명: 부동산과 전혀 관련 없는 질문\n   - 예시: "날씨 어때?", "저녁 뭐 먹지?", "주식 추천해줘"\n   - 처리: 부동산 관련 질문을 유도\n\n## 복합 질문 예시와 분석 (CoT 적용):\n\n### 예시 1: "강남구 아파트 시세 알려주고 전세자금대출 가능한지도 확인해줘"\n**CoT 분석**:\n1. 구조: 두 개의 요청 ("시세" + "대출")\n2. 유형: 정보 확인형 (둘 다)\n3. 복잡도: 중 (두 가지 독립적 조회)\n4. 필요 처리: 검색 + 계산/분석\n\n**결론**:\n- 주 의도: MARKET_INQUIRY (시세 조회가 먼저 필요)\n- 부가 의도: LOAN_CONSULT (대출 확인)\n- 분해: ["강남구 아파트 시세 조회", "전세자금대출 가능 여부 확인"]\n\n### 예시 2: "이 계약서 검토해서 위험한 부분 있는지 알려주고 수정 제안도 해줘"\n**CoT 분석**:\n1. 구조: 검토 + 위험 평가 + 수정안\n2. 유형: 평가/판단형 + 해결책 요청형\n3. 복잡도: 고 (3단계 처리)\n4. 필요 처리: 검토 + 분석 + 문서 생성\n\n**결론**:\n- 주 의도: CONTRACT_REVIEW (계약서 검토)\n- 부가 의도: RISK_ANALYSIS (위험 분석)\n- 분해: ["계약서 전체 검토", "위험 요소 식별", "수정사항 제안"]\n\n### 예시 3: "집주인이 짜증나, 10년 살았는데 전세금 3억을 10억으로 올려달래. 법적으로 해결방법 알려줘"\n**CoT 분석**:\n1. 구조: 상황 설명 (10년 거주, 3억→10억) + 해결책 요청\n2. 유형: 해결책 요청형 (단순 정보 X)\n3. 복잡도: 고 (구체적 상황 + 수치 비교 + 법률 + 대응방안)\n4. 필요 처리: 법률 검색 + 상황 분석 + 해결책 제시\n\n**결론**:\n- 주 의도: COMPREHENSIVE (복잡한 상황에 대한 종합 해결)\n- 부가 의도: LEGAL_CONSULT, RISK_ANALYSIS\n- 분해: ["전세금 인상 한도 법률 조회", "3억→10억 인상의 타당성 분석", "구체적 대응 방안 제시"]\n- **이유**: "법적으로"라는 키워드가 있지만, 단순 법률 확인이 아니라 구체적 상황에 대한 해결책을 요구하므로 COMPREHENSIVE\n\n### 예시 4: "전세금 인상률 상한이 얼마야?"\n**CoT 분석**:\n1. 구조: 단순 사실 확인\n2. 유형: 정보 확인형\n3. 복잡도: 저 (단일 개념)\n4. 필요 처리: 검색만\n\n**결론**:\n- 주 의도: LEGAL_CONSULT (법률 정보 조회)\n- 부가 의도: 없음\n- 분해: 필요 없음\n\n## 응답 형식 (JSON 형식으로 응답):\n\n```json\n{\n    "intent": "LEGAL_CONSULT",\n    "confidence": 0.9,\n    "keywords": ["전세금", "인상", "제한"],\n    "sub_intents": [],\n    "is_compound": false,\n    "decomposed_tasks": [],\n    "entities": {\n        "location": "강남구",\n        "price": "5억",\n        "contract_type": "전세",\n        "date": "2024년",\n        "area": "84㎡",\n        "action_verbs": ["확인", "검토"]\n    },\n    "reasoning": "전세금 인상에 대한 법률 질문이므로 LEGAL_CONSULT로 분류"\n}\n```\n\n응답 규칙:\n- intent: 위 9개 카테고리 중 하나 (대문자_언더스코어 형식)\n- confidence: 0.0~1.0 (0.8 이상이면 매우 확실, 0.5 미만이면 불확실)\n- keywords: 추출된 주요 키워드 목록\n- sub_intents: 복합 질문일 경우 부가적인 의도들\n- is_compound: 복합 질문 여부 (true/false)\n- decomposed_tasks: 복합 질문을 분해한 개별 작업들\n- entities: 추출된 엔티티 정보\n- reasoning: **반드시 CoT 5단계를 거쳐 분석한 과정을 포함** (구조 파악 → 유형 판단 → 복잡도 평가 → 필요 처리 → 최종 검증)\n\n## reasoning 작성 예시:\n"1단계(구조): 상황 설명(10년 거주, 3억→10억) + 해결책 요청 포함.\n2단계(유형): 해결책 요청형 - 단순 정보가 아닌 대응방안 필요.\n3단계(복잡도): 고 - 구체적 수치 비교와 복잡한 상황.\n4단계(처리): 법률 검색 + 상황 분석 + 해결책 제시 필요.\n5단계(검증): LEGAL_CONSULT만으로는 불충분, 종합적 분석 필요 → COMPREHENSIVE 선택"\n\n## 판단 가이드:\n- 여러 의도가 섞여있다면, 가장 주된 의도를 intent에, 나머지를 sub_intents에 기록\n- "그리고", "또한", "함께", "같이" 등의 연결어가 있으면 복합 질문일 가능성 높음\n- 법률 관련 키워드가 있으면 LEGAL_CONSULT 우선\n- 가격/시세 언급이 명확하면 MARKET_INQUIRY\n- 계약서라는 단어와 함께 "작성/만들기"가 있으면 CONTRACT_CREATION\n- 계약서라는 단어와 함께 "검토/확인"이 있으면 CONTRACT_REVIEW\n- 불확실하면 confidence를 낮게 설정하고 UNCLEAR 선택\n- 복합 질문은 is_compound를 true로 설정하고 개별 작업으로 분해\n\n분석할 질문: 신혼부부 특례 대출 조건은?'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 15:57:15,508 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 15:57:15,508 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 15:57:15,508 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 15:57:15,508 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 15:57:15,508 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 15:57:15,508 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 15:57:18,795 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 06:57:18 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'2976'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'3100'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9985'), (b'x-ratelimit-remaining-tokens', b'197246'), (b'x-ratelimit-reset-requests', b'2m2.261s'), (b'x-ratelimit-reset-tokens', b'826ms'), (b'x-request-id', b'req_821d728e2f52474ab3da9d01949a502b'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b0617cf733091-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 15:57:18,796 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 15:57:18,796 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 15:57:18,796 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 15:57:18,796 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 15:57:18,796 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 15:57:18,796 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 06:57:18 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '2976', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '3100', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9985', 'x-ratelimit-remaining-tokens': '197246', 'x-ratelimit-reset-requests': '2m2.261s', 'x-ratelimit-reset-tokens': '826ms', 'x-request-id': 'req_821d728e2f52474ab3da9d01949a502b', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b0617cf733091-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 15:57:18,796 - openai._base_client - DEBUG - request_id: req_821d728e2f52474ab3da9d01949a502b
2025-10-05 15:57:18,797 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: intent_analysis | Model: gpt-4o-mini-2024-07-18 | Tokens: 3395 (prompt: 3180, completion: 215)
2025-10-05 15:57:18,797 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM Intent Analysis Result: {'intent': 'LOAN_CONSULT', 'confidence': 0.9, 'keywords': ['신혼부부', '특례', '대출', '조건'], 'sub_intents': [], 'is_compound': False, 'decomposed_tasks': [], 'entities': {'loan_type': '신혼부부 특례 대출', 'action_verbs': ['알려줘', '확인']}, 'reasoning': "1단계(구조): 단순 정보 요청으로 '신혼부부 특례 대출 조건'에 대한 질문. 2단계(유형): 정보 확인형 - 대출 조건에 대한 사실 확인 필요. 3단계(복잡도): 저 - 단일 개념 확인. 4단계(처리): 대출 조건에 대한 정보 검색만 필요. 5단계(검증): 단순 정보 요청이므로 LOAN_CONSULT로 분류."}
2025-10-05 15:57:18,797 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-aca2be5a-dc8d-4190-a0b9-20c6cf9d9acc', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 Agent 선택 전문가입니다.\n사용자의 요청에 가장 적합한 Agent/Team을 선택하는 것이 목표입니다.\n\n## 현재 상황\n\n**사용자 질문:** 신혼부부 특례 대출 조건은?\n**분석된 의도:** 대출상담\n**추출된 키워드:** [\'신혼부부\', \'특례\', \'대출\', \'조건\']\n\n## 사용 가능한 Agent/Team 정보\n\n{\'search_team\': {\'name\': \'search_team\', \'capabilities\': \'법률 검색, 부동산 시세 조회, 대출 상품 검색\', \'tools\': [\'legal_search\', \'market_data\', \'loan_data\'], \'use_cases\': [\'법률 상담\', \'시세 조회\', \'대출 정보\']}, \'analysis_team\': {\'name\': \'analysis_team\', \'capabilities\': \'데이터 분석, 리스크 평가, 인사이트 생성, 추천\', \'tools\': [\'data_analyzer\', \'risk_evaluator\'], \'use_cases\': [\'시장 분석\', \'리스크 평가\', \'투자 분석\']}, \'document_team\': {\'name\': \'document_team\', \'capabilities\': \'계약서 작성, 문서 생성, 문서 검토\', \'tools\': [\'document_generator\', \'contract_reviewer\'], \'use_cases\': [\'계약서 작성\', \'문서 검토\']}}\n\n## Agent 역할 및 상세 가이드\n\n### 1. search_team (검색 팀)\n- **주요 기능**: 정보 검색 및 데이터 수집\n- **전문 분야**:\n  * 법률 정보 검색 (전세법, 임대차보호법, 부동산 관련 법규)\n  * 부동산 시세 조회 (매매가, 전세가, 월세, 실거래가)\n  * 대출 상품 정보 검색 (금리, 한도, 조건)\n  * 지역 정보 및 인프라 조회\n- **도구**: legal_search, market_data, loan_data\n- **적합한 작업**: 정보 조회, 데이터 수집, 법률 확인, 시세 파악\n- **예시**:\n  * "전세금 5% 인상 가능한가요?"\n  * "강남구 아파트 전세 시세"\n  * "전세자금대출 한도 얼마?"\n\n### 2. analysis_team (분석 팀)\n- **주요 기능**: 데이터 분석 및 평가\n- **전문 분야**:\n  * 시장 동향 분석 (상승률, 하락률, 추세)\n  * 리스크 평가 (계약, 투자 위험도)\n  * 투자 수익률 계산 (ROI, 월세 수익률)\n  * 대출 한도 및 조건 분석 (LTV, DTI, DSR)\n  * 비교 분석 (지역별, 상품별)\n- **도구**: data_analyzer, risk_evaluator, calculator\n- **적합한 작업**: 데이터 분석, 리스크 평가, 계산, 비교, 예측\n- **의존성**: 보통 search_team의 데이터가 필요\n- **예시**:\n  * "이 지역 투자 가치 분석해줘"\n  * "계약 리스크 평가해줘"\n  * "대출 가능 금액 계산해줘"\n\n### 3. document_team (문서 팀)\n- **주요 기능**: 문서 생성 및 관리\n- **전문 분야**:\n  * 계약서 작성 (임대차, 매매, 전세)\n  * 문서 템플릿 관리\n  * 특약사항 생성\n  * 계약서 수정안 작성\n  * 법률 문서 검토\n- **도구**: document_generator, contract_template, contract_reviewer\n- **적합한 작업**: 문서 작성, 계약서 생성, 문서 수정, 검토\n- **예시**:\n  * "임대차계약서 작성해줘"\n  * "특약사항 추가해줘"\n  * "계약서 수정안 만들어줘"\n\n## Chain-of-Thought Agent 선택 프로세스\n\n다음 단계를 **순서대로** 따라 최적의 Agent 조합을 선택하세요:\n\n### 1단계: 질문 요구사항 파악\n- 단순 정보 조회인가? → search_team만 필요\n- 판단/평가가 필요한가? → search + analysis 필요\n- 해결책 제시가 필요한가? → search + analysis 필요\n- 문서 생성이 필요한가? → document_team 추가\n\n### 2단계: 작업 복잡도 판단\n- **단순** (검색만): "~이 뭐야?", "~알려줘" → search_team\n- **중간** (검색+판단): "~괜찮아?", "~적절해?" → search + analysis\n- **복잡** (종합 해결): 구체적 상황 + "어떻게 해야 해?" → search + analysis\n\n### 3단계: 의존성 분석\n- 독립적 작업: 단일 팀으로 처리 가능\n- 순차적 의존: 이전 결과 필요 → 여러 팀 순서대로\n- 병렬 가능: 동시 조회 가능 → coordination: "parallel"\n\n### 4단계: 최종 검증\n- 선택한 팀들로 질문에 완전히 답변 가능한가?\n- 불필요한 팀이 포함되지 않았는가?\n- 순서가 논리적인가? (데이터 흐름 고려)\n\n### 중요 원칙:\n- **법률 키워드만으로 판단하지 말 것**: "법적으로 어떻게 해야 해?" = 법률 검색 + 분석 필요\n- **상황 설명 + 해결책 요청** = 반드시 analysis_team 포함\n- **구체적 수치 비교** (3억→10억 같은) = analysis_team 필요\n\n## 의도별 Agent 매핑 가이드 (기본 가이드 - CoT로 조정 가능)\n\n| 의도 (Intent) | 기본 조합 | 상황별 조정 |\n|--------------|-----------|-------------|\n| LEGAL_CONSULT | ["search_team"] | 해결책 요청시 → + analysis_team |\n| MARKET_INQUIRY | ["search_team"] | 비교/평가시 → + analysis_team |\n| LOAN_CONSULT | ["search_team", "analysis_team"] | 계산 필수 |\n| CONTRACT_CREATION | ["document_team"] | 검토 후 작성 → search + document |\n| CONTRACT_REVIEW | ["search_team", "analysis_team"] | 법률 검토 + 리스크 분석 |\n| COMPREHENSIVE | ["search_team", "analysis_team"] | **항상 분석 포함** |\n| RISK_ANALYSIS | ["analysis_team"] | 법률 근거 필요시 → search + analysis |\n| UNCLEAR | ["search_team", "analysis_team"] | 포괄적 대응 |\n\n**중요**: 위 매핑은 **기본 가이드**일 뿐입니다.\n실제 질문의 내용(CoT 분석 결과)에 따라 조정하세요!\n\n## 복합 질문 처리 예시 (CoT 적용)\n\n### 예시 1: 순차적 처리\n질문: "강남구 시세 확인하고 투자 가치 분석해줘"\n**CoT 분석**:\n1. 요구사항: 시세 조회 + 투자 가치 평가\n2. 복잡도: 중간 (검색 + 분석)\n3. 의존성: 시세 데이터 → 투자 분석 (순차)\n4. 검증: search만으로는 "투자 가치 평가" 불가능\n\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "1단계: 시세 조회+투자 평가 필요. 2단계: 중간 복잡도. 3단계: 순차 의존. 4단계: search로 시세 수집 후 analysis로 투자 가치 평가 필요",\n    "coordination": "sequential"\n}\n```\n\n### 예시 2: 단순 정보 조회\n질문: "전세금 인상률 한도가 얼마야?"\n**CoT 분석**:\n1. 요구사항: 단순 사실 확인\n2. 복잡도: 낮음 (정보 확인형)\n3. 의존성: 없음\n4. 검증: search_team만으로 충분\n\n```json\n{\n    "selected_agents": ["search_team"],\n    "reasoning": "1단계: 단순 정보 조회. 2단계: 저복잡도. 3단계: 독립적. 4단계: 법률 검색만으로 답변 가능",\n    "coordination": "single"\n}\n```\n\n### 예시 3: 해결책 요청 (핵심 예시!)\n질문: "집주인이 전세금 3억을 10억으로 올려달래. 법적으로 어떻게 해야 해?"\n의도: COMPREHENSIVE\n**CoT 분석**:\n1. 요구사항: 상황 설명 + 해결책 요청\n2. 복잡도: 높음 (구체적 상황 + 수치 비교)\n3. 의존성: 법률 확인 → 상황 분석 → 해결책 제시\n4. 검증: "법적으로"만 보고 search만 선택하면 불충분! 해결책 제시 필요\n\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "1단계: 법률 + 상황 분석 + 해결책 필요. 2단계: 고복잡도(3억→10억 비정상). 3단계: 순차(법률 확인 후 타당성 분석). 4단계: \'어떻게 해야\' = 단순 법률 조회 아님, 분석 필수",\n    "coordination": "sequential",\n    "confidence": 0.95\n}\n```\n\n## 응답 형식 (JSON)\n\n```json\n{\n    "selected_agents": ["선택된 agent/team 목록"],\n    "reasoning": "선택 이유를 구체적으로 설명. 각 Agent의 역할과 처리 순서 포함",\n    "coordination": "single/sequential/parallel/pipeline",\n    "dependencies": {"agent2": ["agent1"]},\n    "estimated_time": 30,\n    "confidence": 0.9\n}\n```\n\n## 선택 가이드라인\n\n1. **최소 Agent 원칙**: 가능한 적은 수의 Agent로 처리\n2. **전문성 우선**: 해당 작업에 가장 전문적인 Agent 선택\n3. **효율성 고려**: 병렬 처리 가능한 경우 명시\n4. **의존성 관리**: 데이터 흐름을 고려한 순서 지정\n5. **폴백 전략**: 불확실한 경우 ["search_team", "analysis_team"] 조합\n\n## 주의사항\n\n- selected_agents는 반드시 배열 형태\n- Agent 이름은 정확히: "search_team", "analysis_team", "document_team"\n- 최소 1개, 최대 3개 선택\n- 순서는 실행 우선순위 (앞에 있을수록 먼저 실행)\n- reasoning은 상세하고 논리적으로 작성\n- coordination 필드로 실행 방식 명시\n- 복합 질문의 경우 의존성 관계 명확히 표시'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 15:57:18,798 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 15:57:18,798 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 15:57:18,798 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 15:57:18,798 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 15:57:18,799 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 15:57:18,799 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 15:57:23,814 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 06:57:23 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'4793'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'4828'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9985'), (b'x-ratelimit-remaining-tokens', b'197890'), (b'x-ratelimit-reset-requests', b'2m7.617s'), (b'x-ratelimit-reset-tokens', b'633ms'), (b'x-request-id', b'req_df30b8e0da6e4a758367922730ce1f9c'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b062c5dae3091-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 15:57:23,815 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 15:57:23,815 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 15:57:23,838 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 15:57:23,840 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 15:57:23,840 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 15:57:23,840 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 06:57:23 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '4793', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '4828', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9985', 'x-ratelimit-remaining-tokens': '197890', 'x-ratelimit-reset-requests': '2m7.617s', 'x-ratelimit-reset-tokens': '633ms', 'x-request-id': 'req_df30b8e0da6e4a758367922730ce1f9c', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b062c5dae3091-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 15:57:23,840 - openai._base_client - DEBUG - request_id: req_df30b8e0da6e4a758367922730ce1f9c
2025-10-05 15:57:23,840 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: agent_selection | Model: gpt-4o-mini-2024-07-18 | Tokens: 2556 (prompt: 2360, completion: 196)
2025-10-05 15:57:23,841 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM agent selection reasoning: 1단계: 신혼부부 특례 대출 조건에 대한 정보 조회와 함께, 대출 조건의 적절성을 평가해야 하므로 search_team과 analysis_team이 필요합니다. 2단계: 대출 조건에 대한 정보 검색과 그 조건의 적합성을 판단하는 중간 복잡도 작업입니다. 3단계: 대출 조건을 확인한 후, 그 조건이 신혼부부에게 적합한지 분석해야 하므로 순차적 의존성이 있습니다. 4단계: 단순히 대출 조건을 조회하는 것만으로는 충분하지 않으며, 분석이 필수적입니다.
2025-10-05 15:57:23,841 - app.service_agent.cognitive_agents.planning_agent - INFO - ✅ Primary LLM selected agents: ['search_team', 'analysis_team']
2025-10-05 15:57:23,841 - __main__ - INFO -   의도: 대출상담
2025-10-05 15:57:23,841 - __main__ - INFO -   신뢰도: 0.90
2025-10-05 15:57:23,841 - __main__ - INFO -   추천 Agent: ['search_team', 'analysis_team']
2025-10-05 15:57:23,841 - __main__ - INFO - 
[Step 2] Query Decomposition...
2025-10-05 15:57:23,841 - app.service_agent.cognitive_agents.query_decomposer - INFO - Decomposing query: 신혼부부 특례 대출 조건은?...
2025-10-05 15:57:23,841 - app.service_agent.cognitive_agents.query_decomposer - INFO - Query is simple, no decomposition needed
2025-10-05 15:57:23,841 - __main__ - INFO -   복합 질문: False
2025-10-05 15:57:23,841 - __main__ - INFO -   작업 수: 1
2025-10-05 15:57:23,841 - __main__ - INFO -   실행 모드: sequential
2025-10-05 15:57:23,841 - __main__ - INFO - 
[Step 3] Execution Plan 생성...
2025-10-05 15:57:23,841 - app.service_agent.cognitive_agents.planning_agent - INFO - Creating execution plan for intent: 대출상담
2025-10-05 15:57:23,841 - app.service_agent.cognitive_agents.planning_agent - WARNING - AgentRegistry is empty, using default teams
2025-10-05 15:57:23,841 - app.service_agent.cognitive_agents.planning_agent - DEBUG - Suggested agents: ['search_team', 'analysis_team']
2025-10-05 15:57:23,841 - app.service_agent.cognitive_agents.planning_agent - DEBUG - Available agents: ['search_team', 'analysis_team', 'document_team']
2025-10-05 15:57:23,841 - app.service_agent.cognitive_agents.planning_agent - INFO - Selected agents/teams for execution: ['search_team', 'analysis_team']
2025-10-05 15:57:23,841 - __main__ - INFO -   전략: sequential
2025-10-05 15:57:23,841 - __main__ - INFO -   단계 수: 2
2025-10-05 15:57:23,841 - __main__ - INFO - 
✓ 테스트 성공 (소요시간: 8.33초)
2025-10-05 15:57:23,841 - __main__ - INFO - 
================================================================================
2025-10-05 15:57:23,841 - __main__ - INFO - [17] 단일 질문 테스트: S017
2025-10-05 15:57:23,841 - __main__ - INFO - 질문: 계약금 환불 가능한가요?
2025-10-05 15:57:23,841 - __main__ - INFO - ================================================================================
2025-10-05 15:57:23,841 - __main__ - INFO - 
[Step 1] Intent 분석...
2025-10-05 15:57:23,841 - app.service_agent.cognitive_agents.planning_agent - INFO - Analyzing intent for query: 계약금 환불 가능한가요?...
2025-10-05 15:57:23,842 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-716cd794-85a9-412d-8004-9c8c490c86f6', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 의도 분석 전문가입니다.\n사용자의 질문을 정확히 이해하고, 어떤 종류의 도움이 필요한지 분류해야 합니다.\n\n## Chain-of-Thought 분석 프로세스\n\n질문을 분석할 때 다음 단계를 **순서대로** 따르세요:\n\n### 1단계: 질문 구조 파악\n- 단순 정보 요청인가? (예: "~이 뭐야?", "~알려줘")\n- 상황 설명이 포함되어 있는가? (배경, 현재 상태)\n- 구체적 수치나 데이터가 있는가? (금액, 비율, 기간 등)\n- 문제 해결을 요구하는가? (예: "어떻게 해야 해?", "방법 알려줘")\n\n### 2단계: 요청 유형 판단\n- **정보 확인형**: 사실, 개념, 규정 확인 → 검색만으로 충분\n- **평가/판단형**: "괜찮아?", "적절해?", "문제있어?" → 검색 + 분석 필요\n- **해결책 요청형**: "어떻게?", "방법?", "대처?" → 검색 + 분석 + 제안 필요\n- **비교/선택형**: "A vs B", "어느게 나아?" → 검색 + 분석(비교) 필요\n\n### 3단계: 복잡도 평가\n- **저**: 단일 개념/사실 확인 (예: "전세금 인상률 한도?")\n- **중**: 특정 상황 + 판단 (예: "3억을 5억으로 올려달래. 가능해?")\n- **고**: 복잡한 상황 + 여러 조건 + 해결책 (예: "10년 거주, 3억→10억 요구. 어떻게 해야 해?")\n\n### 4단계: 필요한 처리 결정\n- **검색만**: 정보 확인형 + 저복잡도\n- **검색+분석**: 평가/판단형 OR 중복잡도 OR 수치 비교 포함\n- **종합처리**: 해결책 요청형 OR 고복잡도 OR 여러 조건 동시 고려\n\n### 5단계: 최종 검증\n- 선택한 의도로 사용자 질문에 완전히 답변 가능한가?\n- 단순 정보 제공으로 끝나는가, 아니면 추가 분석/판단이 필요한가?\n- 상황 설명이 있으면서 "해결", "방법", "어떻게" 등이 있으면 → COMPREHENSIVE 고려\n\n## 중요: 복합 질문 처리\n복합적인 질문(여러 의도가 섞인 질문)의 경우, 가장 핵심적인 의도를 파악하되,\nsub_intents 필드에 부가적인 의도들도 함께 기록해주세요.\n\n**특히 주의**:\n- 법률 키워드가 있어도, "해결방법", "어떻게 해야" 같은 표현이 있으면 단순 LEGAL_CONSULT가 아닐 수 있음\n- 구체적 상황(금액, 기간 등) + 해결책 요구 = COMPREHENSIVE 또는 복합 의도로 분류\n\n## 분류 카테고리 설명:\n\n1. **LEGAL_CONSULT (법률상담)**\n   - 설명: 부동산 관련 법률, 권리, 의무에 대한 질문\n   - 예시:\n     * 단순: "전세금 5% 인상이 가능한가요?", "임대차계약 갱신 거부할 수 있나요?"\n     * 복합: "전세금 인상 가능한지 확인하고 법적 근거도 알려주세요"\n   - 키워드: 법, 전세, 임대, 보증금, 계약, 권리, 의무, 갱신, 임차인, 임대인, 법률, 규정, 조항\n   - 필요한 처리: 법률 데이터베이스 검색, 관련 법조항 찾기\n\n2. **MARKET_INQUIRY (시세조회)**\n   - 설명: 부동산 시장 가격, 시세, 거래 동향에 대한 질문\n   - 예시:\n     * 단순: "강남구 아파트 전세 시세 알려주세요", "서초동 매매가 얼마나 올랐나요?"\n     * 복합: "강남구 시세 확인하고 대출 가능 금액도 계산해줘"\n   - 키워드: 시세, 가격, 매매가, 전세가, 월세, 시장, 동향, 평균, 지역명, 상승률, 하락률\n   - 필요한 처리: 부동산 시세 데이터 조회, 지역별 가격 분석\n\n3. **LOAN_CONSULT (대출상담)**\n   - 설명: 주택담보대출, 전세자금대출 등 금융 관련 질문\n   - 예시:\n     * 단순: "전세자금대출 한도가 얼마인가요?", "LTV가 뭔가요?"\n     * 복합: "대출 한도 확인하고 금리 비교도 해주세요"\n   - 키워드: 대출, 금리, 한도, 조건, 상환, LTV, DTI, DSR, 담보, 금융, 은행\n   - 필요한 처리: 대출 상품 조회, 금리 정보 검색, 한도 계산\n\n4. **CONTRACT_CREATION (계약서작성)**\n   - 설명: 새로운 계약서나 문서를 작성해달라는 요청\n   - 예시:\n     * 단순: "임대차계약서 작성해주세요", "전세계약서 초안 만들어주세요"\n     * 복합: "계약서 작성하고 주의사항도 검토해주세요"\n   - 키워드: 작성, 만들, 생성, 초안, 계약서, 문서, 양식\n   - 필요한 처리: 문서 생성 에이전트 호출, 템플릿 기반 작성\n\n5. **CONTRACT_REVIEW (계약서검토)**\n   - 설명: 기존 계약서나 문서를 검토해달라는 요청\n   - 예시:\n     * 단순: "이 계약서 검토해주세요", "특약사항 문제없나요?"\n     * 복합: "계약서 검토하고 수정사항도 제안해주세요"\n   - 키워드: 검토, 확인, 점검, 리뷰, 분석해, 살펴봐, 체크\n   - 필요한 처리: 문서 분석, 위험 요소 식별, 개선사항 제안\n\n6. **COMPREHENSIVE (종합분석)**\n   - 설명: 여러 측면을 종합적으로 분석해달라는 요청, 또는 복잡한 상황에 대한 해결책 요청\n   - 예시:\n     * 단순: "이 물건 전체적으로 분석해주세요"\n     * 복합: "시세, 법률, 대출 모두 검토해서 종합 의견 주세요"\n     * 해결형: "10년 거주했는데 전세금 3억을 10억으로 올려달래. 어떻게 해야 해?"\n     * 상황+해결: "집주인이 계약 갱신 거부했어. 법적으로 어떻게 대응해야 할까?"\n   - 키워드: 종합, 전체, 모든, 전반적, 종합적, 평가, 분석, 어떻게, 방법, 해결, 대처\n   - 패턴: 구체적 상황 설명 + "어떻게/방법/해결" 요청\n   - 필요한 처리: 다중 데이터 소스 통합 분석, 상황 평가, 해결책 제시\n\n7. **RISK_ANALYSIS (리스크분석)**\n   - 설명: 위험 요소나 주의사항에 대한 질문\n   - 예시:\n     * 단순: "이 계약 위험한가요?", "주의할 점 알려주세요"\n     * 복합: "리스크 분석하고 대안도 제시해주세요"\n   - 키워드: 위험, 리스크, 주의, 문제점, 조심, 걱정, 우려\n   - 필요한 처리: 위험 요소 분석, 주의사항 추출\n\n8. **UNCLEAR (불분명)**\n   - 설명: 의도를 명확히 파악하기 어려운 질문\n   - 예시: "이거 좀 봐주세요", "어떻게 해야 할까요?", "도와주세요"\n   - 처리: 추가 질문으로 의도 명확화 필요\n\n9. **IRRELEVANT (무관)**\n   - 설명: 부동산과 전혀 관련 없는 질문\n   - 예시: "날씨 어때?", "저녁 뭐 먹지?", "주식 추천해줘"\n   - 처리: 부동산 관련 질문을 유도\n\n## 복합 질문 예시와 분석 (CoT 적용):\n\n### 예시 1: "강남구 아파트 시세 알려주고 전세자금대출 가능한지도 확인해줘"\n**CoT 분석**:\n1. 구조: 두 개의 요청 ("시세" + "대출")\n2. 유형: 정보 확인형 (둘 다)\n3. 복잡도: 중 (두 가지 독립적 조회)\n4. 필요 처리: 검색 + 계산/분석\n\n**결론**:\n- 주 의도: MARKET_INQUIRY (시세 조회가 먼저 필요)\n- 부가 의도: LOAN_CONSULT (대출 확인)\n- 분해: ["강남구 아파트 시세 조회", "전세자금대출 가능 여부 확인"]\n\n### 예시 2: "이 계약서 검토해서 위험한 부분 있는지 알려주고 수정 제안도 해줘"\n**CoT 분석**:\n1. 구조: 검토 + 위험 평가 + 수정안\n2. 유형: 평가/판단형 + 해결책 요청형\n3. 복잡도: 고 (3단계 처리)\n4. 필요 처리: 검토 + 분석 + 문서 생성\n\n**결론**:\n- 주 의도: CONTRACT_REVIEW (계약서 검토)\n- 부가 의도: RISK_ANALYSIS (위험 분석)\n- 분해: ["계약서 전체 검토", "위험 요소 식별", "수정사항 제안"]\n\n### 예시 3: "집주인이 짜증나, 10년 살았는데 전세금 3억을 10억으로 올려달래. 법적으로 해결방법 알려줘"\n**CoT 분석**:\n1. 구조: 상황 설명 (10년 거주, 3억→10억) + 해결책 요청\n2. 유형: 해결책 요청형 (단순 정보 X)\n3. 복잡도: 고 (구체적 상황 + 수치 비교 + 법률 + 대응방안)\n4. 필요 처리: 법률 검색 + 상황 분석 + 해결책 제시\n\n**결론**:\n- 주 의도: COMPREHENSIVE (복잡한 상황에 대한 종합 해결)\n- 부가 의도: LEGAL_CONSULT, RISK_ANALYSIS\n- 분해: ["전세금 인상 한도 법률 조회", "3억→10억 인상의 타당성 분석", "구체적 대응 방안 제시"]\n- **이유**: "법적으로"라는 키워드가 있지만, 단순 법률 확인이 아니라 구체적 상황에 대한 해결책을 요구하므로 COMPREHENSIVE\n\n### 예시 4: "전세금 인상률 상한이 얼마야?"\n**CoT 분석**:\n1. 구조: 단순 사실 확인\n2. 유형: 정보 확인형\n3. 복잡도: 저 (단일 개념)\n4. 필요 처리: 검색만\n\n**결론**:\n- 주 의도: LEGAL_CONSULT (법률 정보 조회)\n- 부가 의도: 없음\n- 분해: 필요 없음\n\n## 응답 형식 (JSON 형식으로 응답):\n\n```json\n{\n    "intent": "LEGAL_CONSULT",\n    "confidence": 0.9,\n    "keywords": ["전세금", "인상", "제한"],\n    "sub_intents": [],\n    "is_compound": false,\n    "decomposed_tasks": [],\n    "entities": {\n        "location": "강남구",\n        "price": "5억",\n        "contract_type": "전세",\n        "date": "2024년",\n        "area": "84㎡",\n        "action_verbs": ["확인", "검토"]\n    },\n    "reasoning": "전세금 인상에 대한 법률 질문이므로 LEGAL_CONSULT로 분류"\n}\n```\n\n응답 규칙:\n- intent: 위 9개 카테고리 중 하나 (대문자_언더스코어 형식)\n- confidence: 0.0~1.0 (0.8 이상이면 매우 확실, 0.5 미만이면 불확실)\n- keywords: 추출된 주요 키워드 목록\n- sub_intents: 복합 질문일 경우 부가적인 의도들\n- is_compound: 복합 질문 여부 (true/false)\n- decomposed_tasks: 복합 질문을 분해한 개별 작업들\n- entities: 추출된 엔티티 정보\n- reasoning: **반드시 CoT 5단계를 거쳐 분석한 과정을 포함** (구조 파악 → 유형 판단 → 복잡도 평가 → 필요 처리 → 최종 검증)\n\n## reasoning 작성 예시:\n"1단계(구조): 상황 설명(10년 거주, 3억→10억) + 해결책 요청 포함.\n2단계(유형): 해결책 요청형 - 단순 정보가 아닌 대응방안 필요.\n3단계(복잡도): 고 - 구체적 수치 비교와 복잡한 상황.\n4단계(처리): 법률 검색 + 상황 분석 + 해결책 제시 필요.\n5단계(검증): LEGAL_CONSULT만으로는 불충분, 종합적 분석 필요 → COMPREHENSIVE 선택"\n\n## 판단 가이드:\n- 여러 의도가 섞여있다면, 가장 주된 의도를 intent에, 나머지를 sub_intents에 기록\n- "그리고", "또한", "함께", "같이" 등의 연결어가 있으면 복합 질문일 가능성 높음\n- 법률 관련 키워드가 있으면 LEGAL_CONSULT 우선\n- 가격/시세 언급이 명확하면 MARKET_INQUIRY\n- 계약서라는 단어와 함께 "작성/만들기"가 있으면 CONTRACT_CREATION\n- 계약서라는 단어와 함께 "검토/확인"이 있으면 CONTRACT_REVIEW\n- 불확실하면 confidence를 낮게 설정하고 UNCLEAR 선택\n- 복합 질문은 is_compound를 true로 설정하고 개별 작업으로 분해\n\n분석할 질문: 계약금 환불 가능한가요?'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 15:57:23,842 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 15:57:23,842 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 15:57:23,842 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 15:57:23,842 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 15:57:23,843 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 15:57:23,843 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 15:57:27,935 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 06:57:27 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'3759'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'3790'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9984'), (b'x-ratelimit-remaining-tokens', b'197246'), (b'x-ratelimit-reset-requests', b'2m11.182s'), (b'x-ratelimit-reset-tokens', b'825ms'), (b'x-request-id', b'req_d6741b947fe04fc4adb063534a171cfb'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b064bec893091-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 15:57:27,935 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 15:57:27,936 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 15:57:27,936 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 15:57:27,936 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 15:57:27,936 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 15:57:27,936 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 06:57:27 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '3759', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '3790', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9984', 'x-ratelimit-remaining-tokens': '197246', 'x-ratelimit-reset-requests': '2m11.182s', 'x-ratelimit-reset-tokens': '825ms', 'x-request-id': 'req_d6741b947fe04fc4adb063534a171cfb', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b064bec893091-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 15:57:27,936 - openai._base_client - DEBUG - request_id: req_d6741b947fe04fc4adb063534a171cfb
2025-10-05 15:57:27,936 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: intent_analysis | Model: gpt-4o-mini-2024-07-18 | Tokens: 3376 (prompt: 3177, completion: 199)
2025-10-05 15:57:27,937 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM Intent Analysis Result: {'intent': 'LEGAL_CONSULT', 'confidence': 0.85, 'keywords': ['계약금', '환불', '가능'], 'sub_intents': [], 'is_compound': False, 'decomposed_tasks': [], 'entities': {'contract_type': '계약금', 'action_verbs': ['환불', '가능']}, 'reasoning': '1단계(구조): 단순 정보 요청으로 계약금 환불 가능성에 대한 질문. 2단계(유형): 정보 확인형 - 계약금 환불 가능 여부 확인. 3단계(복잡도): 저 - 단일 개념 확인. 4단계(처리): 법률 데이터베이스 검색 필요. 5단계(검증): 계약금 환불에 대한 법률 질문이므로 LEGAL_CONSULT로 분류.'}
2025-10-05 15:57:27,937 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-2e165b48-56b2-407c-a7b0-31ef9364c264', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 Agent 선택 전문가입니다.\n사용자의 요청에 가장 적합한 Agent/Team을 선택하는 것이 목표입니다.\n\n## 현재 상황\n\n**사용자 질문:** 계약금 환불 가능한가요?\n**분석된 의도:** 법률상담\n**추출된 키워드:** [\'계약금\', \'환불\', \'가능\']\n\n## 사용 가능한 Agent/Team 정보\n\n{\'search_team\': {\'name\': \'search_team\', \'capabilities\': \'법률 검색, 부동산 시세 조회, 대출 상품 검색\', \'tools\': [\'legal_search\', \'market_data\', \'loan_data\'], \'use_cases\': [\'법률 상담\', \'시세 조회\', \'대출 정보\']}, \'analysis_team\': {\'name\': \'analysis_team\', \'capabilities\': \'데이터 분석, 리스크 평가, 인사이트 생성, 추천\', \'tools\': [\'data_analyzer\', \'risk_evaluator\'], \'use_cases\': [\'시장 분석\', \'리스크 평가\', \'투자 분석\']}, \'document_team\': {\'name\': \'document_team\', \'capabilities\': \'계약서 작성, 문서 생성, 문서 검토\', \'tools\': [\'document_generator\', \'contract_reviewer\'], \'use_cases\': [\'계약서 작성\', \'문서 검토\']}}\n\n## Agent 역할 및 상세 가이드\n\n### 1. search_team (검색 팀)\n- **주요 기능**: 정보 검색 및 데이터 수집\n- **전문 분야**:\n  * 법률 정보 검색 (전세법, 임대차보호법, 부동산 관련 법규)\n  * 부동산 시세 조회 (매매가, 전세가, 월세, 실거래가)\n  * 대출 상품 정보 검색 (금리, 한도, 조건)\n  * 지역 정보 및 인프라 조회\n- **도구**: legal_search, market_data, loan_data\n- **적합한 작업**: 정보 조회, 데이터 수집, 법률 확인, 시세 파악\n- **예시**:\n  * "전세금 5% 인상 가능한가요?"\n  * "강남구 아파트 전세 시세"\n  * "전세자금대출 한도 얼마?"\n\n### 2. analysis_team (분석 팀)\n- **주요 기능**: 데이터 분석 및 평가\n- **전문 분야**:\n  * 시장 동향 분석 (상승률, 하락률, 추세)\n  * 리스크 평가 (계약, 투자 위험도)\n  * 투자 수익률 계산 (ROI, 월세 수익률)\n  * 대출 한도 및 조건 분석 (LTV, DTI, DSR)\n  * 비교 분석 (지역별, 상품별)\n- **도구**: data_analyzer, risk_evaluator, calculator\n- **적합한 작업**: 데이터 분석, 리스크 평가, 계산, 비교, 예측\n- **의존성**: 보통 search_team의 데이터가 필요\n- **예시**:\n  * "이 지역 투자 가치 분석해줘"\n  * "계약 리스크 평가해줘"\n  * "대출 가능 금액 계산해줘"\n\n### 3. document_team (문서 팀)\n- **주요 기능**: 문서 생성 및 관리\n- **전문 분야**:\n  * 계약서 작성 (임대차, 매매, 전세)\n  * 문서 템플릿 관리\n  * 특약사항 생성\n  * 계약서 수정안 작성\n  * 법률 문서 검토\n- **도구**: document_generator, contract_template, contract_reviewer\n- **적합한 작업**: 문서 작성, 계약서 생성, 문서 수정, 검토\n- **예시**:\n  * "임대차계약서 작성해줘"\n  * "특약사항 추가해줘"\n  * "계약서 수정안 만들어줘"\n\n## Chain-of-Thought Agent 선택 프로세스\n\n다음 단계를 **순서대로** 따라 최적의 Agent 조합을 선택하세요:\n\n### 1단계: 질문 요구사항 파악\n- 단순 정보 조회인가? → search_team만 필요\n- 판단/평가가 필요한가? → search + analysis 필요\n- 해결책 제시가 필요한가? → search + analysis 필요\n- 문서 생성이 필요한가? → document_team 추가\n\n### 2단계: 작업 복잡도 판단\n- **단순** (검색만): "~이 뭐야?", "~알려줘" → search_team\n- **중간** (검색+판단): "~괜찮아?", "~적절해?" → search + analysis\n- **복잡** (종합 해결): 구체적 상황 + "어떻게 해야 해?" → search + analysis\n\n### 3단계: 의존성 분석\n- 독립적 작업: 단일 팀으로 처리 가능\n- 순차적 의존: 이전 결과 필요 → 여러 팀 순서대로\n- 병렬 가능: 동시 조회 가능 → coordination: "parallel"\n\n### 4단계: 최종 검증\n- 선택한 팀들로 질문에 완전히 답변 가능한가?\n- 불필요한 팀이 포함되지 않았는가?\n- 순서가 논리적인가? (데이터 흐름 고려)\n\n### 중요 원칙:\n- **법률 키워드만으로 판단하지 말 것**: "법적으로 어떻게 해야 해?" = 법률 검색 + 분석 필요\n- **상황 설명 + 해결책 요청** = 반드시 analysis_team 포함\n- **구체적 수치 비교** (3억→10억 같은) = analysis_team 필요\n\n## 의도별 Agent 매핑 가이드 (기본 가이드 - CoT로 조정 가능)\n\n| 의도 (Intent) | 기본 조합 | 상황별 조정 |\n|--------------|-----------|-------------|\n| LEGAL_CONSULT | ["search_team"] | 해결책 요청시 → + analysis_team |\n| MARKET_INQUIRY | ["search_team"] | 비교/평가시 → + analysis_team |\n| LOAN_CONSULT | ["search_team", "analysis_team"] | 계산 필수 |\n| CONTRACT_CREATION | ["document_team"] | 검토 후 작성 → search + document |\n| CONTRACT_REVIEW | ["search_team", "analysis_team"] | 법률 검토 + 리스크 분석 |\n| COMPREHENSIVE | ["search_team", "analysis_team"] | **항상 분석 포함** |\n| RISK_ANALYSIS | ["analysis_team"] | 법률 근거 필요시 → search + analysis |\n| UNCLEAR | ["search_team", "analysis_team"] | 포괄적 대응 |\n\n**중요**: 위 매핑은 **기본 가이드**일 뿐입니다.\n실제 질문의 내용(CoT 분석 결과)에 따라 조정하세요!\n\n## 복합 질문 처리 예시 (CoT 적용)\n\n### 예시 1: 순차적 처리\n질문: "강남구 시세 확인하고 투자 가치 분석해줘"\n**CoT 분석**:\n1. 요구사항: 시세 조회 + 투자 가치 평가\n2. 복잡도: 중간 (검색 + 분석)\n3. 의존성: 시세 데이터 → 투자 분석 (순차)\n4. 검증: search만으로는 "투자 가치 평가" 불가능\n\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "1단계: 시세 조회+투자 평가 필요. 2단계: 중간 복잡도. 3단계: 순차 의존. 4단계: search로 시세 수집 후 analysis로 투자 가치 평가 필요",\n    "coordination": "sequential"\n}\n```\n\n### 예시 2: 단순 정보 조회\n질문: "전세금 인상률 한도가 얼마야?"\n**CoT 분석**:\n1. 요구사항: 단순 사실 확인\n2. 복잡도: 낮음 (정보 확인형)\n3. 의존성: 없음\n4. 검증: search_team만으로 충분\n\n```json\n{\n    "selected_agents": ["search_team"],\n    "reasoning": "1단계: 단순 정보 조회. 2단계: 저복잡도. 3단계: 독립적. 4단계: 법률 검색만으로 답변 가능",\n    "coordination": "single"\n}\n```\n\n### 예시 3: 해결책 요청 (핵심 예시!)\n질문: "집주인이 전세금 3억을 10억으로 올려달래. 법적으로 어떻게 해야 해?"\n의도: COMPREHENSIVE\n**CoT 분석**:\n1. 요구사항: 상황 설명 + 해결책 요청\n2. 복잡도: 높음 (구체적 상황 + 수치 비교)\n3. 의존성: 법률 확인 → 상황 분석 → 해결책 제시\n4. 검증: "법적으로"만 보고 search만 선택하면 불충분! 해결책 제시 필요\n\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "1단계: 법률 + 상황 분석 + 해결책 필요. 2단계: 고복잡도(3억→10억 비정상). 3단계: 순차(법률 확인 후 타당성 분석). 4단계: \'어떻게 해야\' = 단순 법률 조회 아님, 분석 필수",\n    "coordination": "sequential",\n    "confidence": 0.95\n}\n```\n\n## 응답 형식 (JSON)\n\n```json\n{\n    "selected_agents": ["선택된 agent/team 목록"],\n    "reasoning": "선택 이유를 구체적으로 설명. 각 Agent의 역할과 처리 순서 포함",\n    "coordination": "single/sequential/parallel/pipeline",\n    "dependencies": {"agent2": ["agent1"]},\n    "estimated_time": 30,\n    "confidence": 0.9\n}\n```\n\n## 선택 가이드라인\n\n1. **최소 Agent 원칙**: 가능한 적은 수의 Agent로 처리\n2. **전문성 우선**: 해당 작업에 가장 전문적인 Agent 선택\n3. **효율성 고려**: 병렬 처리 가능한 경우 명시\n4. **의존성 관리**: 데이터 흐름을 고려한 순서 지정\n5. **폴백 전략**: 불확실한 경우 ["search_team", "analysis_team"] 조합\n\n## 주의사항\n\n- selected_agents는 반드시 배열 형태\n- Agent 이름은 정확히: "search_team", "analysis_team", "document_team"\n- 최소 1개, 최대 3개 선택\n- 순서는 실행 우선순위 (앞에 있을수록 먼저 실행)\n- reasoning은 상세하고 논리적으로 작성\n- coordination 필드로 실행 방식 명시\n- 복합 질문의 경우 의존성 관계 명확히 표시'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 15:57:27,937 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 15:57:27,937 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 15:57:27,938 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 15:57:27,938 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 15:57:27,938 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 15:57:27,938 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 15:57:31,941 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 06:57:31 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'3783'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'3798'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9984'), (b'x-ratelimit-remaining-tokens', b'197894'), (b'x-ratelimit-reset-requests', b'2m15.739s'), (b'x-ratelimit-reset-tokens', b'631ms'), (b'x-request-id', b'req_7abe5052b6ce44bbac453a5cf630f2fa'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b06657f393091-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 15:57:31,941 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 15:57:31,941 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 15:57:31,941 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 15:57:31,941 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 15:57:31,941 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 15:57:31,941 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 06:57:31 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '3783', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '3798', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9984', 'x-ratelimit-remaining-tokens': '197894', 'x-ratelimit-reset-requests': '2m15.739s', 'x-ratelimit-reset-tokens': '631ms', 'x-request-id': 'req_7abe5052b6ce44bbac453a5cf630f2fa', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b06657f393091-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 15:57:31,941 - openai._base_client - DEBUG - request_id: req_7abe5052b6ce44bbac453a5cf630f2fa
2025-10-05 15:57:31,942 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: agent_selection | Model: gpt-4o-mini-2024-07-18 | Tokens: 2513 (prompt: 2352, completion: 161)
2025-10-05 15:57:31,942 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM agent selection reasoning: 1단계: 계약금 환불 가능성에 대한 법률 정보 검색과 함께, 환불 가능성에 대한 분석이 필요합니다. 2단계: 중간 복잡도 (법률 정보 확인 + 판단). 3단계: 법률 검색 후 환불 가능성에 대한 분석이 필요하므로 순차적 의존성이 있습니다. 4단계: 단순 법률 검색만으로는 충분하지 않으며, 분석이 필수적입니다.
2025-10-05 15:57:31,942 - app.service_agent.cognitive_agents.planning_agent - INFO - ✅ Primary LLM selected agents: ['search_team', 'analysis_team']
2025-10-05 15:57:31,942 - __main__ - INFO -   의도: 법률상담
2025-10-05 15:57:31,942 - __main__ - INFO -   신뢰도: 0.85
2025-10-05 15:57:31,942 - __main__ - INFO -   추천 Agent: ['search_team', 'analysis_team']
2025-10-05 15:57:31,942 - __main__ - INFO - 
[Step 2] Query Decomposition...
2025-10-05 15:57:31,942 - app.service_agent.cognitive_agents.query_decomposer - INFO - Decomposing query: 계약금 환불 가능한가요?...
2025-10-05 15:57:31,942 - app.service_agent.cognitive_agents.query_decomposer - INFO - Query is simple, no decomposition needed
2025-10-05 15:57:31,942 - __main__ - INFO -   복합 질문: False
2025-10-05 15:57:31,942 - __main__ - INFO -   작업 수: 1
2025-10-05 15:57:31,942 - __main__ - INFO -   실행 모드: sequential
2025-10-05 15:57:31,942 - __main__ - INFO - 
[Step 3] Execution Plan 생성...
2025-10-05 15:57:31,942 - app.service_agent.cognitive_agents.planning_agent - INFO - Creating execution plan for intent: 법률상담
2025-10-05 15:57:31,942 - app.service_agent.cognitive_agents.planning_agent - WARNING - AgentRegistry is empty, using default teams
2025-10-05 15:57:31,942 - app.service_agent.cognitive_agents.planning_agent - DEBUG - Suggested agents: ['search_team', 'analysis_team']
2025-10-05 15:57:31,942 - app.service_agent.cognitive_agents.planning_agent - DEBUG - Available agents: ['search_team', 'analysis_team', 'document_team']
2025-10-05 15:57:31,942 - app.service_agent.cognitive_agents.planning_agent - INFO - Selected agents/teams for execution: ['search_team', 'analysis_team']
2025-10-05 15:57:31,942 - __main__ - INFO -   전략: sequential
2025-10-05 15:57:31,942 - __main__ - INFO -   단계 수: 2
2025-10-05 15:57:31,942 - __main__ - INFO - 
✓ 테스트 성공 (소요시간: 8.10초)
2025-10-05 15:57:31,942 - __main__ - INFO - 
================================================================================
2025-10-05 15:57:31,942 - __main__ - INFO - [18] 단일 질문 테스트: S018
2025-10-05 15:57:31,942 - __main__ - INFO - 질문: 성동구 빌라 전세 시세 알려주세요
2025-10-05 15:57:31,942 - __main__ - INFO - ================================================================================
2025-10-05 15:57:31,942 - __main__ - INFO - 
[Step 1] Intent 분석...
2025-10-05 15:57:31,942 - app.service_agent.cognitive_agents.planning_agent - INFO - Analyzing intent for query: 성동구 빌라 전세 시세 알려주세요...
2025-10-05 15:57:31,943 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-ff641328-bf82-4dc9-b1cb-17147a14bc7d', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 의도 분석 전문가입니다.\n사용자의 질문을 정확히 이해하고, 어떤 종류의 도움이 필요한지 분류해야 합니다.\n\n## Chain-of-Thought 분석 프로세스\n\n질문을 분석할 때 다음 단계를 **순서대로** 따르세요:\n\n### 1단계: 질문 구조 파악\n- 단순 정보 요청인가? (예: "~이 뭐야?", "~알려줘")\n- 상황 설명이 포함되어 있는가? (배경, 현재 상태)\n- 구체적 수치나 데이터가 있는가? (금액, 비율, 기간 등)\n- 문제 해결을 요구하는가? (예: "어떻게 해야 해?", "방법 알려줘")\n\n### 2단계: 요청 유형 판단\n- **정보 확인형**: 사실, 개념, 규정 확인 → 검색만으로 충분\n- **평가/판단형**: "괜찮아?", "적절해?", "문제있어?" → 검색 + 분석 필요\n- **해결책 요청형**: "어떻게?", "방법?", "대처?" → 검색 + 분석 + 제안 필요\n- **비교/선택형**: "A vs B", "어느게 나아?" → 검색 + 분석(비교) 필요\n\n### 3단계: 복잡도 평가\n- **저**: 단일 개념/사실 확인 (예: "전세금 인상률 한도?")\n- **중**: 특정 상황 + 판단 (예: "3억을 5억으로 올려달래. 가능해?")\n- **고**: 복잡한 상황 + 여러 조건 + 해결책 (예: "10년 거주, 3억→10억 요구. 어떻게 해야 해?")\n\n### 4단계: 필요한 처리 결정\n- **검색만**: 정보 확인형 + 저복잡도\n- **검색+분석**: 평가/판단형 OR 중복잡도 OR 수치 비교 포함\n- **종합처리**: 해결책 요청형 OR 고복잡도 OR 여러 조건 동시 고려\n\n### 5단계: 최종 검증\n- 선택한 의도로 사용자 질문에 완전히 답변 가능한가?\n- 단순 정보 제공으로 끝나는가, 아니면 추가 분석/판단이 필요한가?\n- 상황 설명이 있으면서 "해결", "방법", "어떻게" 등이 있으면 → COMPREHENSIVE 고려\n\n## 중요: 복합 질문 처리\n복합적인 질문(여러 의도가 섞인 질문)의 경우, 가장 핵심적인 의도를 파악하되,\nsub_intents 필드에 부가적인 의도들도 함께 기록해주세요.\n\n**특히 주의**:\n- 법률 키워드가 있어도, "해결방법", "어떻게 해야" 같은 표현이 있으면 단순 LEGAL_CONSULT가 아닐 수 있음\n- 구체적 상황(금액, 기간 등) + 해결책 요구 = COMPREHENSIVE 또는 복합 의도로 분류\n\n## 분류 카테고리 설명:\n\n1. **LEGAL_CONSULT (법률상담)**\n   - 설명: 부동산 관련 법률, 권리, 의무에 대한 질문\n   - 예시:\n     * 단순: "전세금 5% 인상이 가능한가요?", "임대차계약 갱신 거부할 수 있나요?"\n     * 복합: "전세금 인상 가능한지 확인하고 법적 근거도 알려주세요"\n   - 키워드: 법, 전세, 임대, 보증금, 계약, 권리, 의무, 갱신, 임차인, 임대인, 법률, 규정, 조항\n   - 필요한 처리: 법률 데이터베이스 검색, 관련 법조항 찾기\n\n2. **MARKET_INQUIRY (시세조회)**\n   - 설명: 부동산 시장 가격, 시세, 거래 동향에 대한 질문\n   - 예시:\n     * 단순: "강남구 아파트 전세 시세 알려주세요", "서초동 매매가 얼마나 올랐나요?"\n     * 복합: "강남구 시세 확인하고 대출 가능 금액도 계산해줘"\n   - 키워드: 시세, 가격, 매매가, 전세가, 월세, 시장, 동향, 평균, 지역명, 상승률, 하락률\n   - 필요한 처리: 부동산 시세 데이터 조회, 지역별 가격 분석\n\n3. **LOAN_CONSULT (대출상담)**\n   - 설명: 주택담보대출, 전세자금대출 등 금융 관련 질문\n   - 예시:\n     * 단순: "전세자금대출 한도가 얼마인가요?", "LTV가 뭔가요?"\n     * 복합: "대출 한도 확인하고 금리 비교도 해주세요"\n   - 키워드: 대출, 금리, 한도, 조건, 상환, LTV, DTI, DSR, 담보, 금융, 은행\n   - 필요한 처리: 대출 상품 조회, 금리 정보 검색, 한도 계산\n\n4. **CONTRACT_CREATION (계약서작성)**\n   - 설명: 새로운 계약서나 문서를 작성해달라는 요청\n   - 예시:\n     * 단순: "임대차계약서 작성해주세요", "전세계약서 초안 만들어주세요"\n     * 복합: "계약서 작성하고 주의사항도 검토해주세요"\n   - 키워드: 작성, 만들, 생성, 초안, 계약서, 문서, 양식\n   - 필요한 처리: 문서 생성 에이전트 호출, 템플릿 기반 작성\n\n5. **CONTRACT_REVIEW (계약서검토)**\n   - 설명: 기존 계약서나 문서를 검토해달라는 요청\n   - 예시:\n     * 단순: "이 계약서 검토해주세요", "특약사항 문제없나요?"\n     * 복합: "계약서 검토하고 수정사항도 제안해주세요"\n   - 키워드: 검토, 확인, 점검, 리뷰, 분석해, 살펴봐, 체크\n   - 필요한 처리: 문서 분석, 위험 요소 식별, 개선사항 제안\n\n6. **COMPREHENSIVE (종합분석)**\n   - 설명: 여러 측면을 종합적으로 분석해달라는 요청, 또는 복잡한 상황에 대한 해결책 요청\n   - 예시:\n     * 단순: "이 물건 전체적으로 분석해주세요"\n     * 복합: "시세, 법률, 대출 모두 검토해서 종합 의견 주세요"\n     * 해결형: "10년 거주했는데 전세금 3억을 10억으로 올려달래. 어떻게 해야 해?"\n     * 상황+해결: "집주인이 계약 갱신 거부했어. 법적으로 어떻게 대응해야 할까?"\n   - 키워드: 종합, 전체, 모든, 전반적, 종합적, 평가, 분석, 어떻게, 방법, 해결, 대처\n   - 패턴: 구체적 상황 설명 + "어떻게/방법/해결" 요청\n   - 필요한 처리: 다중 데이터 소스 통합 분석, 상황 평가, 해결책 제시\n\n7. **RISK_ANALYSIS (리스크분석)**\n   - 설명: 위험 요소나 주의사항에 대한 질문\n   - 예시:\n     * 단순: "이 계약 위험한가요?", "주의할 점 알려주세요"\n     * 복합: "리스크 분석하고 대안도 제시해주세요"\n   - 키워드: 위험, 리스크, 주의, 문제점, 조심, 걱정, 우려\n   - 필요한 처리: 위험 요소 분석, 주의사항 추출\n\n8. **UNCLEAR (불분명)**\n   - 설명: 의도를 명확히 파악하기 어려운 질문\n   - 예시: "이거 좀 봐주세요", "어떻게 해야 할까요?", "도와주세요"\n   - 처리: 추가 질문으로 의도 명확화 필요\n\n9. **IRRELEVANT (무관)**\n   - 설명: 부동산과 전혀 관련 없는 질문\n   - 예시: "날씨 어때?", "저녁 뭐 먹지?", "주식 추천해줘"\n   - 처리: 부동산 관련 질문을 유도\n\n## 복합 질문 예시와 분석 (CoT 적용):\n\n### 예시 1: "강남구 아파트 시세 알려주고 전세자금대출 가능한지도 확인해줘"\n**CoT 분석**:\n1. 구조: 두 개의 요청 ("시세" + "대출")\n2. 유형: 정보 확인형 (둘 다)\n3. 복잡도: 중 (두 가지 독립적 조회)\n4. 필요 처리: 검색 + 계산/분석\n\n**결론**:\n- 주 의도: MARKET_INQUIRY (시세 조회가 먼저 필요)\n- 부가 의도: LOAN_CONSULT (대출 확인)\n- 분해: ["강남구 아파트 시세 조회", "전세자금대출 가능 여부 확인"]\n\n### 예시 2: "이 계약서 검토해서 위험한 부분 있는지 알려주고 수정 제안도 해줘"\n**CoT 분석**:\n1. 구조: 검토 + 위험 평가 + 수정안\n2. 유형: 평가/판단형 + 해결책 요청형\n3. 복잡도: 고 (3단계 처리)\n4. 필요 처리: 검토 + 분석 + 문서 생성\n\n**결론**:\n- 주 의도: CONTRACT_REVIEW (계약서 검토)\n- 부가 의도: RISK_ANALYSIS (위험 분석)\n- 분해: ["계약서 전체 검토", "위험 요소 식별", "수정사항 제안"]\n\n### 예시 3: "집주인이 짜증나, 10년 살았는데 전세금 3억을 10억으로 올려달래. 법적으로 해결방법 알려줘"\n**CoT 분석**:\n1. 구조: 상황 설명 (10년 거주, 3억→10억) + 해결책 요청\n2. 유형: 해결책 요청형 (단순 정보 X)\n3. 복잡도: 고 (구체적 상황 + 수치 비교 + 법률 + 대응방안)\n4. 필요 처리: 법률 검색 + 상황 분석 + 해결책 제시\n\n**결론**:\n- 주 의도: COMPREHENSIVE (복잡한 상황에 대한 종합 해결)\n- 부가 의도: LEGAL_CONSULT, RISK_ANALYSIS\n- 분해: ["전세금 인상 한도 법률 조회", "3억→10억 인상의 타당성 분석", "구체적 대응 방안 제시"]\n- **이유**: "법적으로"라는 키워드가 있지만, 단순 법률 확인이 아니라 구체적 상황에 대한 해결책을 요구하므로 COMPREHENSIVE\n\n### 예시 4: "전세금 인상률 상한이 얼마야?"\n**CoT 분석**:\n1. 구조: 단순 사실 확인\n2. 유형: 정보 확인형\n3. 복잡도: 저 (단일 개념)\n4. 필요 처리: 검색만\n\n**결론**:\n- 주 의도: LEGAL_CONSULT (법률 정보 조회)\n- 부가 의도: 없음\n- 분해: 필요 없음\n\n## 응답 형식 (JSON 형식으로 응답):\n\n```json\n{\n    "intent": "LEGAL_CONSULT",\n    "confidence": 0.9,\n    "keywords": ["전세금", "인상", "제한"],\n    "sub_intents": [],\n    "is_compound": false,\n    "decomposed_tasks": [],\n    "entities": {\n        "location": "강남구",\n        "price": "5억",\n        "contract_type": "전세",\n        "date": "2024년",\n        "area": "84㎡",\n        "action_verbs": ["확인", "검토"]\n    },\n    "reasoning": "전세금 인상에 대한 법률 질문이므로 LEGAL_CONSULT로 분류"\n}\n```\n\n응답 규칙:\n- intent: 위 9개 카테고리 중 하나 (대문자_언더스코어 형식)\n- confidence: 0.0~1.0 (0.8 이상이면 매우 확실, 0.5 미만이면 불확실)\n- keywords: 추출된 주요 키워드 목록\n- sub_intents: 복합 질문일 경우 부가적인 의도들\n- is_compound: 복합 질문 여부 (true/false)\n- decomposed_tasks: 복합 질문을 분해한 개별 작업들\n- entities: 추출된 엔티티 정보\n- reasoning: **반드시 CoT 5단계를 거쳐 분석한 과정을 포함** (구조 파악 → 유형 판단 → 복잡도 평가 → 필요 처리 → 최종 검증)\n\n## reasoning 작성 예시:\n"1단계(구조): 상황 설명(10년 거주, 3억→10억) + 해결책 요청 포함.\n2단계(유형): 해결책 요청형 - 단순 정보가 아닌 대응방안 필요.\n3단계(복잡도): 고 - 구체적 수치 비교와 복잡한 상황.\n4단계(처리): 법률 검색 + 상황 분석 + 해결책 제시 필요.\n5단계(검증): LEGAL_CONSULT만으로는 불충분, 종합적 분석 필요 → COMPREHENSIVE 선택"\n\n## 판단 가이드:\n- 여러 의도가 섞여있다면, 가장 주된 의도를 intent에, 나머지를 sub_intents에 기록\n- "그리고", "또한", "함께", "같이" 등의 연결어가 있으면 복합 질문일 가능성 높음\n- 법률 관련 키워드가 있으면 LEGAL_CONSULT 우선\n- 가격/시세 언급이 명확하면 MARKET_INQUIRY\n- 계약서라는 단어와 함께 "작성/만들기"가 있으면 CONTRACT_CREATION\n- 계약서라는 단어와 함께 "검토/확인"이 있으면 CONTRACT_REVIEW\n- 불확실하면 confidence를 낮게 설정하고 UNCLEAR 선택\n- 복합 질문은 is_compound를 true로 설정하고 개별 작업으로 분해\n\n분석할 질문: 성동구 빌라 전세 시세 알려주세요'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 15:57:31,943 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 15:57:31,943 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 15:57:31,943 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 15:57:31,943 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 15:57:31,944 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 15:57:31,944 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 15:57:35,456 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 06:57:35 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'3282'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'3312'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9983'), (b'x-ratelimit-remaining-tokens', b'197244'), (b'x-ratelimit-reset-requests', b'2m20.379s'), (b'x-ratelimit-reset-tokens', b'826ms'), (b'x-request-id', b'req_e7642f7692f745679c9d2b39cf3ac0a0'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b067e8fb43091-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 15:57:35,457 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 15:57:35,457 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 15:57:35,459 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 15:57:35,459 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 15:57:35,459 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 15:57:35,460 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 06:57:35 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '3282', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '3312', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9983', 'x-ratelimit-remaining-tokens': '197244', 'x-ratelimit-reset-requests': '2m20.379s', 'x-ratelimit-reset-tokens': '826ms', 'x-request-id': 'req_e7642f7692f745679c9d2b39cf3ac0a0', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b067e8fb43091-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 15:57:35,460 - openai._base_client - DEBUG - request_id: req_e7642f7692f745679c9d2b39cf3ac0a0
2025-10-05 15:57:35,460 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: intent_analysis | Model: gpt-4o-mini-2024-07-18 | Tokens: 3383 (prompt: 3181, completion: 202)
2025-10-05 15:57:35,460 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM Intent Analysis Result: {'intent': 'MARKET_INQUIRY', 'confidence': 0.95, 'keywords': ['성동구', '빌라', '전세', '시세'], 'sub_intents': [], 'is_compound': False, 'decomposed_tasks': [], 'entities': {'location': '성동구', 'property_type': '빌라', 'contract_type': '전세'}, 'reasoning': "1단계(구조): 단순 정보 요청으로 '전세 시세'에 대한 질문. 2단계(유형): 정보 확인형 - 시세에 대한 사실 확인. 3단계(복잡도): 저 - 단일 개념 확인. 4단계(처리): 시세 데이터 조회만 필요. 5단계(검증): 단순 시세 요청이므로 MARKET_INQUIRY로 분류."}
2025-10-05 15:57:35,461 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-418c8cf2-bbbd-4a99-af52-1777663b6062', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 Agent 선택 전문가입니다.\n사용자의 요청에 가장 적합한 Agent/Team을 선택하는 것이 목표입니다.\n\n## 현재 상황\n\n**사용자 질문:** 성동구 빌라 전세 시세 알려주세요\n**분석된 의도:** 시세조회\n**추출된 키워드:** [\'성동구\', \'빌라\', \'전세\', \'시세\']\n\n## 사용 가능한 Agent/Team 정보\n\n{\'search_team\': {\'name\': \'search_team\', \'capabilities\': \'법률 검색, 부동산 시세 조회, 대출 상품 검색\', \'tools\': [\'legal_search\', \'market_data\', \'loan_data\'], \'use_cases\': [\'법률 상담\', \'시세 조회\', \'대출 정보\']}, \'analysis_team\': {\'name\': \'analysis_team\', \'capabilities\': \'데이터 분석, 리스크 평가, 인사이트 생성, 추천\', \'tools\': [\'data_analyzer\', \'risk_evaluator\'], \'use_cases\': [\'시장 분석\', \'리스크 평가\', \'투자 분석\']}, \'document_team\': {\'name\': \'document_team\', \'capabilities\': \'계약서 작성, 문서 생성, 문서 검토\', \'tools\': [\'document_generator\', \'contract_reviewer\'], \'use_cases\': [\'계약서 작성\', \'문서 검토\']}}\n\n## Agent 역할 및 상세 가이드\n\n### 1. search_team (검색 팀)\n- **주요 기능**: 정보 검색 및 데이터 수집\n- **전문 분야**:\n  * 법률 정보 검색 (전세법, 임대차보호법, 부동산 관련 법규)\n  * 부동산 시세 조회 (매매가, 전세가, 월세, 실거래가)\n  * 대출 상품 정보 검색 (금리, 한도, 조건)\n  * 지역 정보 및 인프라 조회\n- **도구**: legal_search, market_data, loan_data\n- **적합한 작업**: 정보 조회, 데이터 수집, 법률 확인, 시세 파악\n- **예시**:\n  * "전세금 5% 인상 가능한가요?"\n  * "강남구 아파트 전세 시세"\n  * "전세자금대출 한도 얼마?"\n\n### 2. analysis_team (분석 팀)\n- **주요 기능**: 데이터 분석 및 평가\n- **전문 분야**:\n  * 시장 동향 분석 (상승률, 하락률, 추세)\n  * 리스크 평가 (계약, 투자 위험도)\n  * 투자 수익률 계산 (ROI, 월세 수익률)\n  * 대출 한도 및 조건 분석 (LTV, DTI, DSR)\n  * 비교 분석 (지역별, 상품별)\n- **도구**: data_analyzer, risk_evaluator, calculator\n- **적합한 작업**: 데이터 분석, 리스크 평가, 계산, 비교, 예측\n- **의존성**: 보통 search_team의 데이터가 필요\n- **예시**:\n  * "이 지역 투자 가치 분석해줘"\n  * "계약 리스크 평가해줘"\n  * "대출 가능 금액 계산해줘"\n\n### 3. document_team (문서 팀)\n- **주요 기능**: 문서 생성 및 관리\n- **전문 분야**:\n  * 계약서 작성 (임대차, 매매, 전세)\n  * 문서 템플릿 관리\n  * 특약사항 생성\n  * 계약서 수정안 작성\n  * 법률 문서 검토\n- **도구**: document_generator, contract_template, contract_reviewer\n- **적합한 작업**: 문서 작성, 계약서 생성, 문서 수정, 검토\n- **예시**:\n  * "임대차계약서 작성해줘"\n  * "특약사항 추가해줘"\n  * "계약서 수정안 만들어줘"\n\n## Chain-of-Thought Agent 선택 프로세스\n\n다음 단계를 **순서대로** 따라 최적의 Agent 조합을 선택하세요:\n\n### 1단계: 질문 요구사항 파악\n- 단순 정보 조회인가? → search_team만 필요\n- 판단/평가가 필요한가? → search + analysis 필요\n- 해결책 제시가 필요한가? → search + analysis 필요\n- 문서 생성이 필요한가? → document_team 추가\n\n### 2단계: 작업 복잡도 판단\n- **단순** (검색만): "~이 뭐야?", "~알려줘" → search_team\n- **중간** (검색+판단): "~괜찮아?", "~적절해?" → search + analysis\n- **복잡** (종합 해결): 구체적 상황 + "어떻게 해야 해?" → search + analysis\n\n### 3단계: 의존성 분석\n- 독립적 작업: 단일 팀으로 처리 가능\n- 순차적 의존: 이전 결과 필요 → 여러 팀 순서대로\n- 병렬 가능: 동시 조회 가능 → coordination: "parallel"\n\n### 4단계: 최종 검증\n- 선택한 팀들로 질문에 완전히 답변 가능한가?\n- 불필요한 팀이 포함되지 않았는가?\n- 순서가 논리적인가? (데이터 흐름 고려)\n\n### 중요 원칙:\n- **법률 키워드만으로 판단하지 말 것**: "법적으로 어떻게 해야 해?" = 법률 검색 + 분석 필요\n- **상황 설명 + 해결책 요청** = 반드시 analysis_team 포함\n- **구체적 수치 비교** (3억→10억 같은) = analysis_team 필요\n\n## 의도별 Agent 매핑 가이드 (기본 가이드 - CoT로 조정 가능)\n\n| 의도 (Intent) | 기본 조합 | 상황별 조정 |\n|--------------|-----------|-------------|\n| LEGAL_CONSULT | ["search_team"] | 해결책 요청시 → + analysis_team |\n| MARKET_INQUIRY | ["search_team"] | 비교/평가시 → + analysis_team |\n| LOAN_CONSULT | ["search_team", "analysis_team"] | 계산 필수 |\n| CONTRACT_CREATION | ["document_team"] | 검토 후 작성 → search + document |\n| CONTRACT_REVIEW | ["search_team", "analysis_team"] | 법률 검토 + 리스크 분석 |\n| COMPREHENSIVE | ["search_team", "analysis_team"] | **항상 분석 포함** |\n| RISK_ANALYSIS | ["analysis_team"] | 법률 근거 필요시 → search + analysis |\n| UNCLEAR | ["search_team", "analysis_team"] | 포괄적 대응 |\n\n**중요**: 위 매핑은 **기본 가이드**일 뿐입니다.\n실제 질문의 내용(CoT 분석 결과)에 따라 조정하세요!\n\n## 복합 질문 처리 예시 (CoT 적용)\n\n### 예시 1: 순차적 처리\n질문: "강남구 시세 확인하고 투자 가치 분석해줘"\n**CoT 분석**:\n1. 요구사항: 시세 조회 + 투자 가치 평가\n2. 복잡도: 중간 (검색 + 분석)\n3. 의존성: 시세 데이터 → 투자 분석 (순차)\n4. 검증: search만으로는 "투자 가치 평가" 불가능\n\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "1단계: 시세 조회+투자 평가 필요. 2단계: 중간 복잡도. 3단계: 순차 의존. 4단계: search로 시세 수집 후 analysis로 투자 가치 평가 필요",\n    "coordination": "sequential"\n}\n```\n\n### 예시 2: 단순 정보 조회\n질문: "전세금 인상률 한도가 얼마야?"\n**CoT 분석**:\n1. 요구사항: 단순 사실 확인\n2. 복잡도: 낮음 (정보 확인형)\n3. 의존성: 없음\n4. 검증: search_team만으로 충분\n\n```json\n{\n    "selected_agents": ["search_team"],\n    "reasoning": "1단계: 단순 정보 조회. 2단계: 저복잡도. 3단계: 독립적. 4단계: 법률 검색만으로 답변 가능",\n    "coordination": "single"\n}\n```\n\n### 예시 3: 해결책 요청 (핵심 예시!)\n질문: "집주인이 전세금 3억을 10억으로 올려달래. 법적으로 어떻게 해야 해?"\n의도: COMPREHENSIVE\n**CoT 분석**:\n1. 요구사항: 상황 설명 + 해결책 요청\n2. 복잡도: 높음 (구체적 상황 + 수치 비교)\n3. 의존성: 법률 확인 → 상황 분석 → 해결책 제시\n4. 검증: "법적으로"만 보고 search만 선택하면 불충분! 해결책 제시 필요\n\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "1단계: 법률 + 상황 분석 + 해결책 필요. 2단계: 고복잡도(3억→10억 비정상). 3단계: 순차(법률 확인 후 타당성 분석). 4단계: \'어떻게 해야\' = 단순 법률 조회 아님, 분석 필수",\n    "coordination": "sequential",\n    "confidence": 0.95\n}\n```\n\n## 응답 형식 (JSON)\n\n```json\n{\n    "selected_agents": ["선택된 agent/team 목록"],\n    "reasoning": "선택 이유를 구체적으로 설명. 각 Agent의 역할과 처리 순서 포함",\n    "coordination": "single/sequential/parallel/pipeline",\n    "dependencies": {"agent2": ["agent1"]},\n    "estimated_time": 30,\n    "confidence": 0.9\n}\n```\n\n## 선택 가이드라인\n\n1. **최소 Agent 원칙**: 가능한 적은 수의 Agent로 처리\n2. **전문성 우선**: 해당 작업에 가장 전문적인 Agent 선택\n3. **효율성 고려**: 병렬 처리 가능한 경우 명시\n4. **의존성 관리**: 데이터 흐름을 고려한 순서 지정\n5. **폴백 전략**: 불확실한 경우 ["search_team", "analysis_team"] 조합\n\n## 주의사항\n\n- selected_agents는 반드시 배열 형태\n- Agent 이름은 정확히: "search_team", "analysis_team", "document_team"\n- 최소 1개, 최대 3개 선택\n- 순서는 실행 우선순위 (앞에 있을수록 먼저 실행)\n- reasoning은 상세하고 논리적으로 작성\n- coordination 필드로 실행 방식 명시\n- 복합 질문의 경우 의존성 관계 명확히 표시'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 15:57:35,461 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 15:57:35,461 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 15:57:35,462 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 15:57:35,462 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 15:57:35,462 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 15:57:35,462 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 15:57:38,189 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 06:57:38 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'2501'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'2524'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9983'), (b'x-ratelimit-remaining-tokens', b'197889'), (b'x-ratelimit-reset-requests', b'2m25.489s'), (b'x-ratelimit-reset-tokens', b'633ms'), (b'x-request-id', b'req_880d977bf1f847ca9920ce9febe53a36'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b06947e6d3091-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 15:57:38,189 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 15:57:38,190 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 15:57:38,202 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 15:57:38,202 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 15:57:38,202 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 15:57:38,202 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 06:57:38 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '2501', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '2524', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9983', 'x-ratelimit-remaining-tokens': '197889', 'x-ratelimit-reset-requests': '2m25.489s', 'x-ratelimit-reset-tokens': '633ms', 'x-request-id': 'req_880d977bf1f847ca9920ce9febe53a36', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b06947e6d3091-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 15:57:38,202 - openai._base_client - DEBUG - request_id: req_880d977bf1f847ca9920ce9febe53a36
2025-10-05 15:57:38,202 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: agent_selection | Model: gpt-4o-mini-2024-07-18 | Tokens: 2471 (prompt: 2361, completion: 110)
2025-10-05 15:57:38,203 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM agent selection reasoning: 1단계: 성동구 빌라 전세 시세 조회 필요. 2단계: 단순 정보 조회로 저복잡도. 3단계: 독립적 작업으로 search_team만으로 충분. 4단계: search_team이 부동산 시세 조회 전문이므로 적합.
2025-10-05 15:57:38,203 - app.service_agent.cognitive_agents.planning_agent - INFO - ✅ Primary LLM selected agents: ['search_team']
2025-10-05 15:57:38,203 - __main__ - INFO -   의도: 시세조회
2025-10-05 15:57:38,203 - __main__ - INFO -   신뢰도: 0.95
2025-10-05 15:57:38,203 - __main__ - INFO -   추천 Agent: ['search_team']
2025-10-05 15:57:38,203 - __main__ - INFO - 
[Step 2] Query Decomposition...
2025-10-05 15:57:38,203 - app.service_agent.cognitive_agents.query_decomposer - INFO - Decomposing query: 성동구 빌라 전세 시세 알려주세요...
2025-10-05 15:57:38,203 - app.service_agent.cognitive_agents.query_decomposer - INFO - Query is simple, no decomposition needed
2025-10-05 15:57:38,203 - __main__ - INFO -   복합 질문: False
2025-10-05 15:57:38,203 - __main__ - INFO -   작업 수: 1
2025-10-05 15:57:38,203 - __main__ - INFO -   실행 모드: sequential
2025-10-05 15:57:38,203 - __main__ - INFO - 
[Step 3] Execution Plan 생성...
2025-10-05 15:57:38,203 - app.service_agent.cognitive_agents.planning_agent - INFO - Creating execution plan for intent: 시세조회
2025-10-05 15:57:38,203 - app.service_agent.cognitive_agents.planning_agent - WARNING - AgentRegistry is empty, using default teams
2025-10-05 15:57:38,203 - app.service_agent.cognitive_agents.planning_agent - DEBUG - Suggested agents: ['search_team']
2025-10-05 15:57:38,203 - app.service_agent.cognitive_agents.planning_agent - DEBUG - Available agents: ['search_team', 'analysis_team', 'document_team']
2025-10-05 15:57:38,203 - app.service_agent.cognitive_agents.planning_agent - INFO - Selected agents/teams for execution: ['search_team']
2025-10-05 15:57:38,203 - __main__ - INFO -   전략: sequential
2025-10-05 15:57:38,203 - __main__ - INFO -   단계 수: 1
2025-10-05 15:57:38,203 - __main__ - INFO - 
✓ 테스트 성공 (소요시간: 6.26초)
2025-10-05 15:57:38,203 - __main__ - INFO - 
================================================================================
2025-10-05 15:57:38,203 - __main__ - INFO - [19] 단일 질문 테스트: S019
2025-10-05 15:57:38,203 - __main__ - INFO - 질문: 생애최초 주택 구매 대출 한도는?
2025-10-05 15:57:38,203 - __main__ - INFO - ================================================================================
2025-10-05 15:57:38,203 - __main__ - INFO - 
[Step 1] Intent 분석...
2025-10-05 15:57:38,203 - app.service_agent.cognitive_agents.planning_agent - INFO - Analyzing intent for query: 생애최초 주택 구매 대출 한도는?...
2025-10-05 15:57:38,204 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-47a13541-ff6c-4cbd-b263-c0ace5326856', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 의도 분석 전문가입니다.\n사용자의 질문을 정확히 이해하고, 어떤 종류의 도움이 필요한지 분류해야 합니다.\n\n## Chain-of-Thought 분석 프로세스\n\n질문을 분석할 때 다음 단계를 **순서대로** 따르세요:\n\n### 1단계: 질문 구조 파악\n- 단순 정보 요청인가? (예: "~이 뭐야?", "~알려줘")\n- 상황 설명이 포함되어 있는가? (배경, 현재 상태)\n- 구체적 수치나 데이터가 있는가? (금액, 비율, 기간 등)\n- 문제 해결을 요구하는가? (예: "어떻게 해야 해?", "방법 알려줘")\n\n### 2단계: 요청 유형 판단\n- **정보 확인형**: 사실, 개념, 규정 확인 → 검색만으로 충분\n- **평가/판단형**: "괜찮아?", "적절해?", "문제있어?" → 검색 + 분석 필요\n- **해결책 요청형**: "어떻게?", "방법?", "대처?" → 검색 + 분석 + 제안 필요\n- **비교/선택형**: "A vs B", "어느게 나아?" → 검색 + 분석(비교) 필요\n\n### 3단계: 복잡도 평가\n- **저**: 단일 개념/사실 확인 (예: "전세금 인상률 한도?")\n- **중**: 특정 상황 + 판단 (예: "3억을 5억으로 올려달래. 가능해?")\n- **고**: 복잡한 상황 + 여러 조건 + 해결책 (예: "10년 거주, 3억→10억 요구. 어떻게 해야 해?")\n\n### 4단계: 필요한 처리 결정\n- **검색만**: 정보 확인형 + 저복잡도\n- **검색+분석**: 평가/판단형 OR 중복잡도 OR 수치 비교 포함\n- **종합처리**: 해결책 요청형 OR 고복잡도 OR 여러 조건 동시 고려\n\n### 5단계: 최종 검증\n- 선택한 의도로 사용자 질문에 완전히 답변 가능한가?\n- 단순 정보 제공으로 끝나는가, 아니면 추가 분석/판단이 필요한가?\n- 상황 설명이 있으면서 "해결", "방법", "어떻게" 등이 있으면 → COMPREHENSIVE 고려\n\n## 중요: 복합 질문 처리\n복합적인 질문(여러 의도가 섞인 질문)의 경우, 가장 핵심적인 의도를 파악하되,\nsub_intents 필드에 부가적인 의도들도 함께 기록해주세요.\n\n**특히 주의**:\n- 법률 키워드가 있어도, "해결방법", "어떻게 해야" 같은 표현이 있으면 단순 LEGAL_CONSULT가 아닐 수 있음\n- 구체적 상황(금액, 기간 등) + 해결책 요구 = COMPREHENSIVE 또는 복합 의도로 분류\n\n## 분류 카테고리 설명:\n\n1. **LEGAL_CONSULT (법률상담)**\n   - 설명: 부동산 관련 법률, 권리, 의무에 대한 질문\n   - 예시:\n     * 단순: "전세금 5% 인상이 가능한가요?", "임대차계약 갱신 거부할 수 있나요?"\n     * 복합: "전세금 인상 가능한지 확인하고 법적 근거도 알려주세요"\n   - 키워드: 법, 전세, 임대, 보증금, 계약, 권리, 의무, 갱신, 임차인, 임대인, 법률, 규정, 조항\n   - 필요한 처리: 법률 데이터베이스 검색, 관련 법조항 찾기\n\n2. **MARKET_INQUIRY (시세조회)**\n   - 설명: 부동산 시장 가격, 시세, 거래 동향에 대한 질문\n   - 예시:\n     * 단순: "강남구 아파트 전세 시세 알려주세요", "서초동 매매가 얼마나 올랐나요?"\n     * 복합: "강남구 시세 확인하고 대출 가능 금액도 계산해줘"\n   - 키워드: 시세, 가격, 매매가, 전세가, 월세, 시장, 동향, 평균, 지역명, 상승률, 하락률\n   - 필요한 처리: 부동산 시세 데이터 조회, 지역별 가격 분석\n\n3. **LOAN_CONSULT (대출상담)**\n   - 설명: 주택담보대출, 전세자금대출 등 금융 관련 질문\n   - 예시:\n     * 단순: "전세자금대출 한도가 얼마인가요?", "LTV가 뭔가요?"\n     * 복합: "대출 한도 확인하고 금리 비교도 해주세요"\n   - 키워드: 대출, 금리, 한도, 조건, 상환, LTV, DTI, DSR, 담보, 금융, 은행\n   - 필요한 처리: 대출 상품 조회, 금리 정보 검색, 한도 계산\n\n4. **CONTRACT_CREATION (계약서작성)**\n   - 설명: 새로운 계약서나 문서를 작성해달라는 요청\n   - 예시:\n     * 단순: "임대차계약서 작성해주세요", "전세계약서 초안 만들어주세요"\n     * 복합: "계약서 작성하고 주의사항도 검토해주세요"\n   - 키워드: 작성, 만들, 생성, 초안, 계약서, 문서, 양식\n   - 필요한 처리: 문서 생성 에이전트 호출, 템플릿 기반 작성\n\n5. **CONTRACT_REVIEW (계약서검토)**\n   - 설명: 기존 계약서나 문서를 검토해달라는 요청\n   - 예시:\n     * 단순: "이 계약서 검토해주세요", "특약사항 문제없나요?"\n     * 복합: "계약서 검토하고 수정사항도 제안해주세요"\n   - 키워드: 검토, 확인, 점검, 리뷰, 분석해, 살펴봐, 체크\n   - 필요한 처리: 문서 분석, 위험 요소 식별, 개선사항 제안\n\n6. **COMPREHENSIVE (종합분석)**\n   - 설명: 여러 측면을 종합적으로 분석해달라는 요청, 또는 복잡한 상황에 대한 해결책 요청\n   - 예시:\n     * 단순: "이 물건 전체적으로 분석해주세요"\n     * 복합: "시세, 법률, 대출 모두 검토해서 종합 의견 주세요"\n     * 해결형: "10년 거주했는데 전세금 3억을 10억으로 올려달래. 어떻게 해야 해?"\n     * 상황+해결: "집주인이 계약 갱신 거부했어. 법적으로 어떻게 대응해야 할까?"\n   - 키워드: 종합, 전체, 모든, 전반적, 종합적, 평가, 분석, 어떻게, 방법, 해결, 대처\n   - 패턴: 구체적 상황 설명 + "어떻게/방법/해결" 요청\n   - 필요한 처리: 다중 데이터 소스 통합 분석, 상황 평가, 해결책 제시\n\n7. **RISK_ANALYSIS (리스크분석)**\n   - 설명: 위험 요소나 주의사항에 대한 질문\n   - 예시:\n     * 단순: "이 계약 위험한가요?", "주의할 점 알려주세요"\n     * 복합: "리스크 분석하고 대안도 제시해주세요"\n   - 키워드: 위험, 리스크, 주의, 문제점, 조심, 걱정, 우려\n   - 필요한 처리: 위험 요소 분석, 주의사항 추출\n\n8. **UNCLEAR (불분명)**\n   - 설명: 의도를 명확히 파악하기 어려운 질문\n   - 예시: "이거 좀 봐주세요", "어떻게 해야 할까요?", "도와주세요"\n   - 처리: 추가 질문으로 의도 명확화 필요\n\n9. **IRRELEVANT (무관)**\n   - 설명: 부동산과 전혀 관련 없는 질문\n   - 예시: "날씨 어때?", "저녁 뭐 먹지?", "주식 추천해줘"\n   - 처리: 부동산 관련 질문을 유도\n\n## 복합 질문 예시와 분석 (CoT 적용):\n\n### 예시 1: "강남구 아파트 시세 알려주고 전세자금대출 가능한지도 확인해줘"\n**CoT 분석**:\n1. 구조: 두 개의 요청 ("시세" + "대출")\n2. 유형: 정보 확인형 (둘 다)\n3. 복잡도: 중 (두 가지 독립적 조회)\n4. 필요 처리: 검색 + 계산/분석\n\n**결론**:\n- 주 의도: MARKET_INQUIRY (시세 조회가 먼저 필요)\n- 부가 의도: LOAN_CONSULT (대출 확인)\n- 분해: ["강남구 아파트 시세 조회", "전세자금대출 가능 여부 확인"]\n\n### 예시 2: "이 계약서 검토해서 위험한 부분 있는지 알려주고 수정 제안도 해줘"\n**CoT 분석**:\n1. 구조: 검토 + 위험 평가 + 수정안\n2. 유형: 평가/판단형 + 해결책 요청형\n3. 복잡도: 고 (3단계 처리)\n4. 필요 처리: 검토 + 분석 + 문서 생성\n\n**결론**:\n- 주 의도: CONTRACT_REVIEW (계약서 검토)\n- 부가 의도: RISK_ANALYSIS (위험 분석)\n- 분해: ["계약서 전체 검토", "위험 요소 식별", "수정사항 제안"]\n\n### 예시 3: "집주인이 짜증나, 10년 살았는데 전세금 3억을 10억으로 올려달래. 법적으로 해결방법 알려줘"\n**CoT 분석**:\n1. 구조: 상황 설명 (10년 거주, 3억→10억) + 해결책 요청\n2. 유형: 해결책 요청형 (단순 정보 X)\n3. 복잡도: 고 (구체적 상황 + 수치 비교 + 법률 + 대응방안)\n4. 필요 처리: 법률 검색 + 상황 분석 + 해결책 제시\n\n**결론**:\n- 주 의도: COMPREHENSIVE (복잡한 상황에 대한 종합 해결)\n- 부가 의도: LEGAL_CONSULT, RISK_ANALYSIS\n- 분해: ["전세금 인상 한도 법률 조회", "3억→10억 인상의 타당성 분석", "구체적 대응 방안 제시"]\n- **이유**: "법적으로"라는 키워드가 있지만, 단순 법률 확인이 아니라 구체적 상황에 대한 해결책을 요구하므로 COMPREHENSIVE\n\n### 예시 4: "전세금 인상률 상한이 얼마야?"\n**CoT 분석**:\n1. 구조: 단순 사실 확인\n2. 유형: 정보 확인형\n3. 복잡도: 저 (단일 개념)\n4. 필요 처리: 검색만\n\n**결론**:\n- 주 의도: LEGAL_CONSULT (법률 정보 조회)\n- 부가 의도: 없음\n- 분해: 필요 없음\n\n## 응답 형식 (JSON 형식으로 응답):\n\n```json\n{\n    "intent": "LEGAL_CONSULT",\n    "confidence": 0.9,\n    "keywords": ["전세금", "인상", "제한"],\n    "sub_intents": [],\n    "is_compound": false,\n    "decomposed_tasks": [],\n    "entities": {\n        "location": "강남구",\n        "price": "5억",\n        "contract_type": "전세",\n        "date": "2024년",\n        "area": "84㎡",\n        "action_verbs": ["확인", "검토"]\n    },\n    "reasoning": "전세금 인상에 대한 법률 질문이므로 LEGAL_CONSULT로 분류"\n}\n```\n\n응답 규칙:\n- intent: 위 9개 카테고리 중 하나 (대문자_언더스코어 형식)\n- confidence: 0.0~1.0 (0.8 이상이면 매우 확실, 0.5 미만이면 불확실)\n- keywords: 추출된 주요 키워드 목록\n- sub_intents: 복합 질문일 경우 부가적인 의도들\n- is_compound: 복합 질문 여부 (true/false)\n- decomposed_tasks: 복합 질문을 분해한 개별 작업들\n- entities: 추출된 엔티티 정보\n- reasoning: **반드시 CoT 5단계를 거쳐 분석한 과정을 포함** (구조 파악 → 유형 판단 → 복잡도 평가 → 필요 처리 → 최종 검증)\n\n## reasoning 작성 예시:\n"1단계(구조): 상황 설명(10년 거주, 3억→10억) + 해결책 요청 포함.\n2단계(유형): 해결책 요청형 - 단순 정보가 아닌 대응방안 필요.\n3단계(복잡도): 고 - 구체적 수치 비교와 복잡한 상황.\n4단계(처리): 법률 검색 + 상황 분석 + 해결책 제시 필요.\n5단계(검증): LEGAL_CONSULT만으로는 불충분, 종합적 분석 필요 → COMPREHENSIVE 선택"\n\n## 판단 가이드:\n- 여러 의도가 섞여있다면, 가장 주된 의도를 intent에, 나머지를 sub_intents에 기록\n- "그리고", "또한", "함께", "같이" 등의 연결어가 있으면 복합 질문일 가능성 높음\n- 법률 관련 키워드가 있으면 LEGAL_CONSULT 우선\n- 가격/시세 언급이 명확하면 MARKET_INQUIRY\n- 계약서라는 단어와 함께 "작성/만들기"가 있으면 CONTRACT_CREATION\n- 계약서라는 단어와 함께 "검토/확인"이 있으면 CONTRACT_REVIEW\n- 불확실하면 confidence를 낮게 설정하고 UNCLEAR 선택\n- 복합 질문은 is_compound를 true로 설정하고 개별 작업으로 분해\n\n분석할 질문: 생애최초 주택 구매 대출 한도는?'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 15:57:38,204 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 15:57:38,204 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 15:57:38,204 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 15:57:38,204 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 15:57:38,204 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 15:57:38,205 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 15:57:41,990 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 06:57:41 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'3576'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'3600'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9982'), (b'x-ratelimit-remaining-tokens', b'197245'), (b'x-ratelimit-reset-requests', b'2m31.408s'), (b'x-ratelimit-reset-tokens', b'826ms'), (b'x-request-id', b'req_83f90ee881b94bfda7ab6c6234cc93d0'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b06a5aff63091-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 15:57:41,991 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 15:57:41,991 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 15:57:41,995 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 15:57:41,995 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 15:57:41,995 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 15:57:41,995 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 06:57:41 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '3576', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '3600', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9982', 'x-ratelimit-remaining-tokens': '197245', 'x-ratelimit-reset-requests': '2m31.408s', 'x-ratelimit-reset-tokens': '826ms', 'x-request-id': 'req_83f90ee881b94bfda7ab6c6234cc93d0', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b06a5aff63091-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 15:57:41,997 - openai._base_client - DEBUG - request_id: req_83f90ee881b94bfda7ab6c6234cc93d0
2025-10-05 15:57:41,997 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: intent_analysis | Model: gpt-4o-mini-2024-07-18 | Tokens: 3389 (prompt: 3182, completion: 207)
2025-10-05 15:57:41,997 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM Intent Analysis Result: {'intent': 'LOAN_CONSULT', 'confidence': 0.9, 'keywords': ['생애최초', '주택', '구매', '대출', '한도'], 'sub_intents': [], 'is_compound': False, 'decomposed_tasks': [], 'entities': {'loan_type': '주택담보대출', 'first_time_homebuyer': True}, 'reasoning': '1단계(구조): 단순 정보 요청으로 대출 한도에 대한 질문. 2단계(유형): 정보 확인형 - 대출 한도에 대한 사실 확인 필요. 3단계(복잡도): 저 - 단일 개념 확인. 4단계(처리): 대출 한도에 대한 정보 검색만 필요. 5단계(검증): 단순 정보 요청이므로 LOAN_CONSULT로 분류.'}
2025-10-05 15:57:41,997 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-122f9db8-ca76-43f0-a74b-12bfa47a8d2b', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 Agent 선택 전문가입니다.\n사용자의 요청에 가장 적합한 Agent/Team을 선택하는 것이 목표입니다.\n\n## 현재 상황\n\n**사용자 질문:** 생애최초 주택 구매 대출 한도는?\n**분석된 의도:** 대출상담\n**추출된 키워드:** [\'생애최초\', \'주택\', \'구매\', \'대출\', \'한도\']\n\n## 사용 가능한 Agent/Team 정보\n\n{\'search_team\': {\'name\': \'search_team\', \'capabilities\': \'법률 검색, 부동산 시세 조회, 대출 상품 검색\', \'tools\': [\'legal_search\', \'market_data\', \'loan_data\'], \'use_cases\': [\'법률 상담\', \'시세 조회\', \'대출 정보\']}, \'analysis_team\': {\'name\': \'analysis_team\', \'capabilities\': \'데이터 분석, 리스크 평가, 인사이트 생성, 추천\', \'tools\': [\'data_analyzer\', \'risk_evaluator\'], \'use_cases\': [\'시장 분석\', \'리스크 평가\', \'투자 분석\']}, \'document_team\': {\'name\': \'document_team\', \'capabilities\': \'계약서 작성, 문서 생성, 문서 검토\', \'tools\': [\'document_generator\', \'contract_reviewer\'], \'use_cases\': [\'계약서 작성\', \'문서 검토\']}}\n\n## Agent 역할 및 상세 가이드\n\n### 1. search_team (검색 팀)\n- **주요 기능**: 정보 검색 및 데이터 수집\n- **전문 분야**:\n  * 법률 정보 검색 (전세법, 임대차보호법, 부동산 관련 법규)\n  * 부동산 시세 조회 (매매가, 전세가, 월세, 실거래가)\n  * 대출 상품 정보 검색 (금리, 한도, 조건)\n  * 지역 정보 및 인프라 조회\n- **도구**: legal_search, market_data, loan_data\n- **적합한 작업**: 정보 조회, 데이터 수집, 법률 확인, 시세 파악\n- **예시**:\n  * "전세금 5% 인상 가능한가요?"\n  * "강남구 아파트 전세 시세"\n  * "전세자금대출 한도 얼마?"\n\n### 2. analysis_team (분석 팀)\n- **주요 기능**: 데이터 분석 및 평가\n- **전문 분야**:\n  * 시장 동향 분석 (상승률, 하락률, 추세)\n  * 리스크 평가 (계약, 투자 위험도)\n  * 투자 수익률 계산 (ROI, 월세 수익률)\n  * 대출 한도 및 조건 분석 (LTV, DTI, DSR)\n  * 비교 분석 (지역별, 상품별)\n- **도구**: data_analyzer, risk_evaluator, calculator\n- **적합한 작업**: 데이터 분석, 리스크 평가, 계산, 비교, 예측\n- **의존성**: 보통 search_team의 데이터가 필요\n- **예시**:\n  * "이 지역 투자 가치 분석해줘"\n  * "계약 리스크 평가해줘"\n  * "대출 가능 금액 계산해줘"\n\n### 3. document_team (문서 팀)\n- **주요 기능**: 문서 생성 및 관리\n- **전문 분야**:\n  * 계약서 작성 (임대차, 매매, 전세)\n  * 문서 템플릿 관리\n  * 특약사항 생성\n  * 계약서 수정안 작성\n  * 법률 문서 검토\n- **도구**: document_generator, contract_template, contract_reviewer\n- **적합한 작업**: 문서 작성, 계약서 생성, 문서 수정, 검토\n- **예시**:\n  * "임대차계약서 작성해줘"\n  * "특약사항 추가해줘"\n  * "계약서 수정안 만들어줘"\n\n## Chain-of-Thought Agent 선택 프로세스\n\n다음 단계를 **순서대로** 따라 최적의 Agent 조합을 선택하세요:\n\n### 1단계: 질문 요구사항 파악\n- 단순 정보 조회인가? → search_team만 필요\n- 판단/평가가 필요한가? → search + analysis 필요\n- 해결책 제시가 필요한가? → search + analysis 필요\n- 문서 생성이 필요한가? → document_team 추가\n\n### 2단계: 작업 복잡도 판단\n- **단순** (검색만): "~이 뭐야?", "~알려줘" → search_team\n- **중간** (검색+판단): "~괜찮아?", "~적절해?" → search + analysis\n- **복잡** (종합 해결): 구체적 상황 + "어떻게 해야 해?" → search + analysis\n\n### 3단계: 의존성 분석\n- 독립적 작업: 단일 팀으로 처리 가능\n- 순차적 의존: 이전 결과 필요 → 여러 팀 순서대로\n- 병렬 가능: 동시 조회 가능 → coordination: "parallel"\n\n### 4단계: 최종 검증\n- 선택한 팀들로 질문에 완전히 답변 가능한가?\n- 불필요한 팀이 포함되지 않았는가?\n- 순서가 논리적인가? (데이터 흐름 고려)\n\n### 중요 원칙:\n- **법률 키워드만으로 판단하지 말 것**: "법적으로 어떻게 해야 해?" = 법률 검색 + 분석 필요\n- **상황 설명 + 해결책 요청** = 반드시 analysis_team 포함\n- **구체적 수치 비교** (3억→10억 같은) = analysis_team 필요\n\n## 의도별 Agent 매핑 가이드 (기본 가이드 - CoT로 조정 가능)\n\n| 의도 (Intent) | 기본 조합 | 상황별 조정 |\n|--------------|-----------|-------------|\n| LEGAL_CONSULT | ["search_team"] | 해결책 요청시 → + analysis_team |\n| MARKET_INQUIRY | ["search_team"] | 비교/평가시 → + analysis_team |\n| LOAN_CONSULT | ["search_team", "analysis_team"] | 계산 필수 |\n| CONTRACT_CREATION | ["document_team"] | 검토 후 작성 → search + document |\n| CONTRACT_REVIEW | ["search_team", "analysis_team"] | 법률 검토 + 리스크 분석 |\n| COMPREHENSIVE | ["search_team", "analysis_team"] | **항상 분석 포함** |\n| RISK_ANALYSIS | ["analysis_team"] | 법률 근거 필요시 → search + analysis |\n| UNCLEAR | ["search_team", "analysis_team"] | 포괄적 대응 |\n\n**중요**: 위 매핑은 **기본 가이드**일 뿐입니다.\n실제 질문의 내용(CoT 분석 결과)에 따라 조정하세요!\n\n## 복합 질문 처리 예시 (CoT 적용)\n\n### 예시 1: 순차적 처리\n질문: "강남구 시세 확인하고 투자 가치 분석해줘"\n**CoT 분석**:\n1. 요구사항: 시세 조회 + 투자 가치 평가\n2. 복잡도: 중간 (검색 + 분석)\n3. 의존성: 시세 데이터 → 투자 분석 (순차)\n4. 검증: search만으로는 "투자 가치 평가" 불가능\n\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "1단계: 시세 조회+투자 평가 필요. 2단계: 중간 복잡도. 3단계: 순차 의존. 4단계: search로 시세 수집 후 analysis로 투자 가치 평가 필요",\n    "coordination": "sequential"\n}\n```\n\n### 예시 2: 단순 정보 조회\n질문: "전세금 인상률 한도가 얼마야?"\n**CoT 분석**:\n1. 요구사항: 단순 사실 확인\n2. 복잡도: 낮음 (정보 확인형)\n3. 의존성: 없음\n4. 검증: search_team만으로 충분\n\n```json\n{\n    "selected_agents": ["search_team"],\n    "reasoning": "1단계: 단순 정보 조회. 2단계: 저복잡도. 3단계: 독립적. 4단계: 법률 검색만으로 답변 가능",\n    "coordination": "single"\n}\n```\n\n### 예시 3: 해결책 요청 (핵심 예시!)\n질문: "집주인이 전세금 3억을 10억으로 올려달래. 법적으로 어떻게 해야 해?"\n의도: COMPREHENSIVE\n**CoT 분석**:\n1. 요구사항: 상황 설명 + 해결책 요청\n2. 복잡도: 높음 (구체적 상황 + 수치 비교)\n3. 의존성: 법률 확인 → 상황 분석 → 해결책 제시\n4. 검증: "법적으로"만 보고 search만 선택하면 불충분! 해결책 제시 필요\n\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "1단계: 법률 + 상황 분석 + 해결책 필요. 2단계: 고복잡도(3억→10억 비정상). 3단계: 순차(법률 확인 후 타당성 분석). 4단계: \'어떻게 해야\' = 단순 법률 조회 아님, 분석 필수",\n    "coordination": "sequential",\n    "confidence": 0.95\n}\n```\n\n## 응답 형식 (JSON)\n\n```json\n{\n    "selected_agents": ["선택된 agent/team 목록"],\n    "reasoning": "선택 이유를 구체적으로 설명. 각 Agent의 역할과 처리 순서 포함",\n    "coordination": "single/sequential/parallel/pipeline",\n    "dependencies": {"agent2": ["agent1"]},\n    "estimated_time": 30,\n    "confidence": 0.9\n}\n```\n\n## 선택 가이드라인\n\n1. **최소 Agent 원칙**: 가능한 적은 수의 Agent로 처리\n2. **전문성 우선**: 해당 작업에 가장 전문적인 Agent 선택\n3. **효율성 고려**: 병렬 처리 가능한 경우 명시\n4. **의존성 관리**: 데이터 흐름을 고려한 순서 지정\n5. **폴백 전략**: 불확실한 경우 ["search_team", "analysis_team"] 조합\n\n## 주의사항\n\n- selected_agents는 반드시 배열 형태\n- Agent 이름은 정확히: "search_team", "analysis_team", "document_team"\n- 최소 1개, 최대 3개 선택\n- 순서는 실행 우선순위 (앞에 있을수록 먼저 실행)\n- reasoning은 상세하고 논리적으로 작성\n- coordination 필드로 실행 방식 명시\n- 복합 질문의 경우 의존성 관계 명확히 표시'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 15:57:41,999 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 15:57:41,999 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 15:57:41,999 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 15:57:41,999 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 15:57:41,999 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 15:57:41,999 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 15:57:46,981 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 06:57:46 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'4720'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'4741'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9981'), (b'x-ratelimit-remaining-tokens', b'197886'), (b'x-ratelimit-reset-requests', b'2m36.253s'), (b'x-ratelimit-reset-tokens', b'634ms'), (b'x-request-id', b'req_94ff005816ca4a4f9efed4cbf1bbdcec'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b06bd58a43091-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 15:57:46,982 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 15:57:46,982 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 15:57:46,982 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 15:57:46,982 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 15:57:46,982 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 15:57:46,982 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 06:57:46 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '4720', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '4741', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9981', 'x-ratelimit-remaining-tokens': '197886', 'x-ratelimit-reset-requests': '2m36.253s', 'x-ratelimit-reset-tokens': '634ms', 'x-request-id': 'req_94ff005816ca4a4f9efed4cbf1bbdcec', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b06bd58a43091-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 15:57:46,982 - openai._base_client - DEBUG - request_id: req_94ff005816ca4a4f9efed4cbf1bbdcec
2025-10-05 15:57:46,982 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: agent_selection | Model: gpt-4o-mini-2024-07-18 | Tokens: 2562 (prompt: 2367, completion: 195)
2025-10-05 15:57:46,982 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM agent selection reasoning: 1단계: 대출 한도에 대한 정보 조회와 함께 대출 조건 분석이 필요합니다. 2단계: 대출 한도에 대한 정보는 단순 조회가 아닌, 조건에 따라 달라질 수 있으므로 중간 복잡도로 판단됩니다. 3단계: 대출 한도를 확인하기 위해서는 먼저 대출 상품 정보를 검색한 후, 그에 따른 분석이 필요하므로 순차적 의존성이 있습니다. 4단계: 대출 한도에 대한 정보는 search_team을 통해 수집하고, 그 정보를 바탕으로 analysis_team이 대출 가능 금액을 분석해야 합니다.
2025-10-05 15:57:46,982 - app.service_agent.cognitive_agents.planning_agent - INFO - ✅ Primary LLM selected agents: ['search_team', 'analysis_team']
2025-10-05 15:57:46,983 - __main__ - INFO -   의도: 대출상담
2025-10-05 15:57:46,983 - __main__ - INFO -   신뢰도: 0.90
2025-10-05 15:57:46,983 - __main__ - INFO -   추천 Agent: ['search_team', 'analysis_team']
2025-10-05 15:57:46,983 - __main__ - INFO - 
[Step 2] Query Decomposition...
2025-10-05 15:57:46,983 - app.service_agent.cognitive_agents.query_decomposer - INFO - Decomposing query: 생애최초 주택 구매 대출 한도는?...
2025-10-05 15:57:46,983 - app.service_agent.cognitive_agents.query_decomposer - INFO - Query is simple, no decomposition needed
2025-10-05 15:57:46,983 - __main__ - INFO -   복합 질문: False
2025-10-05 15:57:46,983 - __main__ - INFO -   작업 수: 1
2025-10-05 15:57:46,983 - __main__ - INFO -   실행 모드: sequential
2025-10-05 15:57:46,983 - __main__ - INFO - 
[Step 3] Execution Plan 생성...
2025-10-05 15:57:46,983 - app.service_agent.cognitive_agents.planning_agent - INFO - Creating execution plan for intent: 대출상담
2025-10-05 15:57:46,983 - app.service_agent.cognitive_agents.planning_agent - WARNING - AgentRegistry is empty, using default teams
2025-10-05 15:57:46,983 - app.service_agent.cognitive_agents.planning_agent - DEBUG - Suggested agents: ['search_team', 'analysis_team']
2025-10-05 15:57:46,983 - app.service_agent.cognitive_agents.planning_agent - DEBUG - Available agents: ['search_team', 'analysis_team', 'document_team']
2025-10-05 15:57:46,983 - app.service_agent.cognitive_agents.planning_agent - INFO - Selected agents/teams for execution: ['search_team', 'analysis_team']
2025-10-05 15:57:46,983 - __main__ - INFO -   전략: sequential
2025-10-05 15:57:46,983 - __main__ - INFO -   단계 수: 2
2025-10-05 15:57:46,983 - __main__ - INFO - 
✓ 테스트 성공 (소요시간: 8.78초)
2025-10-05 15:57:46,983 - __main__ - INFO - 
================================================================================
2025-10-05 15:57:46,983 - __main__ - INFO - [20] 단일 질문 테스트: S020
2025-10-05 15:57:46,983 - __main__ - INFO - 질문: 전입신고 기간은 얼마나 되나요?
2025-10-05 15:57:46,983 - __main__ - INFO - ================================================================================
2025-10-05 15:57:46,983 - __main__ - INFO - 
[Step 1] Intent 분석...
2025-10-05 15:57:46,983 - app.service_agent.cognitive_agents.planning_agent - INFO - Analyzing intent for query: 전입신고 기간은 얼마나 되나요?...
2025-10-05 15:57:46,983 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-e6d875ab-ea37-410e-b3ef-88bddf821d6a', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 의도 분석 전문가입니다.\n사용자의 질문을 정확히 이해하고, 어떤 종류의 도움이 필요한지 분류해야 합니다.\n\n## Chain-of-Thought 분석 프로세스\n\n질문을 분석할 때 다음 단계를 **순서대로** 따르세요:\n\n### 1단계: 질문 구조 파악\n- 단순 정보 요청인가? (예: "~이 뭐야?", "~알려줘")\n- 상황 설명이 포함되어 있는가? (배경, 현재 상태)\n- 구체적 수치나 데이터가 있는가? (금액, 비율, 기간 등)\n- 문제 해결을 요구하는가? (예: "어떻게 해야 해?", "방법 알려줘")\n\n### 2단계: 요청 유형 판단\n- **정보 확인형**: 사실, 개념, 규정 확인 → 검색만으로 충분\n- **평가/판단형**: "괜찮아?", "적절해?", "문제있어?" → 검색 + 분석 필요\n- **해결책 요청형**: "어떻게?", "방법?", "대처?" → 검색 + 분석 + 제안 필요\n- **비교/선택형**: "A vs B", "어느게 나아?" → 검색 + 분석(비교) 필요\n\n### 3단계: 복잡도 평가\n- **저**: 단일 개념/사실 확인 (예: "전세금 인상률 한도?")\n- **중**: 특정 상황 + 판단 (예: "3억을 5억으로 올려달래. 가능해?")\n- **고**: 복잡한 상황 + 여러 조건 + 해결책 (예: "10년 거주, 3억→10억 요구. 어떻게 해야 해?")\n\n### 4단계: 필요한 처리 결정\n- **검색만**: 정보 확인형 + 저복잡도\n- **검색+분석**: 평가/판단형 OR 중복잡도 OR 수치 비교 포함\n- **종합처리**: 해결책 요청형 OR 고복잡도 OR 여러 조건 동시 고려\n\n### 5단계: 최종 검증\n- 선택한 의도로 사용자 질문에 완전히 답변 가능한가?\n- 단순 정보 제공으로 끝나는가, 아니면 추가 분석/판단이 필요한가?\n- 상황 설명이 있으면서 "해결", "방법", "어떻게" 등이 있으면 → COMPREHENSIVE 고려\n\n## 중요: 복합 질문 처리\n복합적인 질문(여러 의도가 섞인 질문)의 경우, 가장 핵심적인 의도를 파악하되,\nsub_intents 필드에 부가적인 의도들도 함께 기록해주세요.\n\n**특히 주의**:\n- 법률 키워드가 있어도, "해결방법", "어떻게 해야" 같은 표현이 있으면 단순 LEGAL_CONSULT가 아닐 수 있음\n- 구체적 상황(금액, 기간 등) + 해결책 요구 = COMPREHENSIVE 또는 복합 의도로 분류\n\n## 분류 카테고리 설명:\n\n1. **LEGAL_CONSULT (법률상담)**\n   - 설명: 부동산 관련 법률, 권리, 의무에 대한 질문\n   - 예시:\n     * 단순: "전세금 5% 인상이 가능한가요?", "임대차계약 갱신 거부할 수 있나요?"\n     * 복합: "전세금 인상 가능한지 확인하고 법적 근거도 알려주세요"\n   - 키워드: 법, 전세, 임대, 보증금, 계약, 권리, 의무, 갱신, 임차인, 임대인, 법률, 규정, 조항\n   - 필요한 처리: 법률 데이터베이스 검색, 관련 법조항 찾기\n\n2. **MARKET_INQUIRY (시세조회)**\n   - 설명: 부동산 시장 가격, 시세, 거래 동향에 대한 질문\n   - 예시:\n     * 단순: "강남구 아파트 전세 시세 알려주세요", "서초동 매매가 얼마나 올랐나요?"\n     * 복합: "강남구 시세 확인하고 대출 가능 금액도 계산해줘"\n   - 키워드: 시세, 가격, 매매가, 전세가, 월세, 시장, 동향, 평균, 지역명, 상승률, 하락률\n   - 필요한 처리: 부동산 시세 데이터 조회, 지역별 가격 분석\n\n3. **LOAN_CONSULT (대출상담)**\n   - 설명: 주택담보대출, 전세자금대출 등 금융 관련 질문\n   - 예시:\n     * 단순: "전세자금대출 한도가 얼마인가요?", "LTV가 뭔가요?"\n     * 복합: "대출 한도 확인하고 금리 비교도 해주세요"\n   - 키워드: 대출, 금리, 한도, 조건, 상환, LTV, DTI, DSR, 담보, 금융, 은행\n   - 필요한 처리: 대출 상품 조회, 금리 정보 검색, 한도 계산\n\n4. **CONTRACT_CREATION (계약서작성)**\n   - 설명: 새로운 계약서나 문서를 작성해달라는 요청\n   - 예시:\n     * 단순: "임대차계약서 작성해주세요", "전세계약서 초안 만들어주세요"\n     * 복합: "계약서 작성하고 주의사항도 검토해주세요"\n   - 키워드: 작성, 만들, 생성, 초안, 계약서, 문서, 양식\n   - 필요한 처리: 문서 생성 에이전트 호출, 템플릿 기반 작성\n\n5. **CONTRACT_REVIEW (계약서검토)**\n   - 설명: 기존 계약서나 문서를 검토해달라는 요청\n   - 예시:\n     * 단순: "이 계약서 검토해주세요", "특약사항 문제없나요?"\n     * 복합: "계약서 검토하고 수정사항도 제안해주세요"\n   - 키워드: 검토, 확인, 점검, 리뷰, 분석해, 살펴봐, 체크\n   - 필요한 처리: 문서 분석, 위험 요소 식별, 개선사항 제안\n\n6. **COMPREHENSIVE (종합분석)**\n   - 설명: 여러 측면을 종합적으로 분석해달라는 요청, 또는 복잡한 상황에 대한 해결책 요청\n   - 예시:\n     * 단순: "이 물건 전체적으로 분석해주세요"\n     * 복합: "시세, 법률, 대출 모두 검토해서 종합 의견 주세요"\n     * 해결형: "10년 거주했는데 전세금 3억을 10억으로 올려달래. 어떻게 해야 해?"\n     * 상황+해결: "집주인이 계약 갱신 거부했어. 법적으로 어떻게 대응해야 할까?"\n   - 키워드: 종합, 전체, 모든, 전반적, 종합적, 평가, 분석, 어떻게, 방법, 해결, 대처\n   - 패턴: 구체적 상황 설명 + "어떻게/방법/해결" 요청\n   - 필요한 처리: 다중 데이터 소스 통합 분석, 상황 평가, 해결책 제시\n\n7. **RISK_ANALYSIS (리스크분석)**\n   - 설명: 위험 요소나 주의사항에 대한 질문\n   - 예시:\n     * 단순: "이 계약 위험한가요?", "주의할 점 알려주세요"\n     * 복합: "리스크 분석하고 대안도 제시해주세요"\n   - 키워드: 위험, 리스크, 주의, 문제점, 조심, 걱정, 우려\n   - 필요한 처리: 위험 요소 분석, 주의사항 추출\n\n8. **UNCLEAR (불분명)**\n   - 설명: 의도를 명확히 파악하기 어려운 질문\n   - 예시: "이거 좀 봐주세요", "어떻게 해야 할까요?", "도와주세요"\n   - 처리: 추가 질문으로 의도 명확화 필요\n\n9. **IRRELEVANT (무관)**\n   - 설명: 부동산과 전혀 관련 없는 질문\n   - 예시: "날씨 어때?", "저녁 뭐 먹지?", "주식 추천해줘"\n   - 처리: 부동산 관련 질문을 유도\n\n## 복합 질문 예시와 분석 (CoT 적용):\n\n### 예시 1: "강남구 아파트 시세 알려주고 전세자금대출 가능한지도 확인해줘"\n**CoT 분석**:\n1. 구조: 두 개의 요청 ("시세" + "대출")\n2. 유형: 정보 확인형 (둘 다)\n3. 복잡도: 중 (두 가지 독립적 조회)\n4. 필요 처리: 검색 + 계산/분석\n\n**결론**:\n- 주 의도: MARKET_INQUIRY (시세 조회가 먼저 필요)\n- 부가 의도: LOAN_CONSULT (대출 확인)\n- 분해: ["강남구 아파트 시세 조회", "전세자금대출 가능 여부 확인"]\n\n### 예시 2: "이 계약서 검토해서 위험한 부분 있는지 알려주고 수정 제안도 해줘"\n**CoT 분석**:\n1. 구조: 검토 + 위험 평가 + 수정안\n2. 유형: 평가/판단형 + 해결책 요청형\n3. 복잡도: 고 (3단계 처리)\n4. 필요 처리: 검토 + 분석 + 문서 생성\n\n**결론**:\n- 주 의도: CONTRACT_REVIEW (계약서 검토)\n- 부가 의도: RISK_ANALYSIS (위험 분석)\n- 분해: ["계약서 전체 검토", "위험 요소 식별", "수정사항 제안"]\n\n### 예시 3: "집주인이 짜증나, 10년 살았는데 전세금 3억을 10억으로 올려달래. 법적으로 해결방법 알려줘"\n**CoT 분석**:\n1. 구조: 상황 설명 (10년 거주, 3억→10억) + 해결책 요청\n2. 유형: 해결책 요청형 (단순 정보 X)\n3. 복잡도: 고 (구체적 상황 + 수치 비교 + 법률 + 대응방안)\n4. 필요 처리: 법률 검색 + 상황 분석 + 해결책 제시\n\n**결론**:\n- 주 의도: COMPREHENSIVE (복잡한 상황에 대한 종합 해결)\n- 부가 의도: LEGAL_CONSULT, RISK_ANALYSIS\n- 분해: ["전세금 인상 한도 법률 조회", "3억→10억 인상의 타당성 분석", "구체적 대응 방안 제시"]\n- **이유**: "법적으로"라는 키워드가 있지만, 단순 법률 확인이 아니라 구체적 상황에 대한 해결책을 요구하므로 COMPREHENSIVE\n\n### 예시 4: "전세금 인상률 상한이 얼마야?"\n**CoT 분석**:\n1. 구조: 단순 사실 확인\n2. 유형: 정보 확인형\n3. 복잡도: 저 (단일 개념)\n4. 필요 처리: 검색만\n\n**결론**:\n- 주 의도: LEGAL_CONSULT (법률 정보 조회)\n- 부가 의도: 없음\n- 분해: 필요 없음\n\n## 응답 형식 (JSON 형식으로 응답):\n\n```json\n{\n    "intent": "LEGAL_CONSULT",\n    "confidence": 0.9,\n    "keywords": ["전세금", "인상", "제한"],\n    "sub_intents": [],\n    "is_compound": false,\n    "decomposed_tasks": [],\n    "entities": {\n        "location": "강남구",\n        "price": "5억",\n        "contract_type": "전세",\n        "date": "2024년",\n        "area": "84㎡",\n        "action_verbs": ["확인", "검토"]\n    },\n    "reasoning": "전세금 인상에 대한 법률 질문이므로 LEGAL_CONSULT로 분류"\n}\n```\n\n응답 규칙:\n- intent: 위 9개 카테고리 중 하나 (대문자_언더스코어 형식)\n- confidence: 0.0~1.0 (0.8 이상이면 매우 확실, 0.5 미만이면 불확실)\n- keywords: 추출된 주요 키워드 목록\n- sub_intents: 복합 질문일 경우 부가적인 의도들\n- is_compound: 복합 질문 여부 (true/false)\n- decomposed_tasks: 복합 질문을 분해한 개별 작업들\n- entities: 추출된 엔티티 정보\n- reasoning: **반드시 CoT 5단계를 거쳐 분석한 과정을 포함** (구조 파악 → 유형 판단 → 복잡도 평가 → 필요 처리 → 최종 검증)\n\n## reasoning 작성 예시:\n"1단계(구조): 상황 설명(10년 거주, 3억→10억) + 해결책 요청 포함.\n2단계(유형): 해결책 요청형 - 단순 정보가 아닌 대응방안 필요.\n3단계(복잡도): 고 - 구체적 수치 비교와 복잡한 상황.\n4단계(처리): 법률 검색 + 상황 분석 + 해결책 제시 필요.\n5단계(검증): LEGAL_CONSULT만으로는 불충분, 종합적 분석 필요 → COMPREHENSIVE 선택"\n\n## 판단 가이드:\n- 여러 의도가 섞여있다면, 가장 주된 의도를 intent에, 나머지를 sub_intents에 기록\n- "그리고", "또한", "함께", "같이" 등의 연결어가 있으면 복합 질문일 가능성 높음\n- 법률 관련 키워드가 있으면 LEGAL_CONSULT 우선\n- 가격/시세 언급이 명확하면 MARKET_INQUIRY\n- 계약서라는 단어와 함께 "작성/만들기"가 있으면 CONTRACT_CREATION\n- 계약서라는 단어와 함께 "검토/확인"이 있으면 CONTRACT_REVIEW\n- 불확실하면 confidence를 낮게 설정하고 UNCLEAR 선택\n- 복합 질문은 is_compound를 true로 설정하고 개별 작업으로 분해\n\n분석할 질문: 전입신고 기간은 얼마나 되나요?'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 15:57:46,984 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 15:57:46,984 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 15:57:46,984 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 15:57:46,984 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 15:57:46,984 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 15:57:46,984 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 15:57:50,407 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 06:57:50 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'3202'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'3221'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9981'), (b'x-ratelimit-remaining-tokens', b'197245'), (b'x-ratelimit-reset-requests', b'2m39.893s'), (b'x-ratelimit-reset-tokens', b'826ms'), (b'x-request-id', b'req_5eb8b3e261b146a9abcb112b4c72224b'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b06dc880d3091-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 15:57:50,407 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 15:57:50,407 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 15:57:50,407 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 15:57:50,407 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 15:57:50,408 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 15:57:50,408 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 06:57:50 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '3202', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '3221', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9981', 'x-ratelimit-remaining-tokens': '197245', 'x-ratelimit-reset-requests': '2m39.893s', 'x-ratelimit-reset-tokens': '826ms', 'x-request-id': 'req_5eb8b3e261b146a9abcb112b4c72224b', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b06dc880d3091-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 15:57:50,408 - openai._base_client - DEBUG - request_id: req_5eb8b3e261b146a9abcb112b4c72224b
2025-10-05 15:57:50,408 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: intent_analysis | Model: gpt-4o-mini-2024-07-18 | Tokens: 3352 (prompt: 3179, completion: 173)
2025-10-05 15:57:50,408 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM Intent Analysis Result: {'intent': 'LEGAL_CONSULT', 'confidence': 0.8, 'keywords': ['전입신고', '기간'], 'sub_intents': [], 'is_compound': False, 'decomposed_tasks': [], 'entities': {'action_verbs': ['확인']}, 'reasoning': '1단계(구조): 단순 정보 요청으로 전입신고 기간에 대한 질문. 2단계(유형): 정보 확인형 - 사실 확인만으로 충분. 3단계(복잡도): 저 - 단일 개념 확인. 4단계(처리): 검색만 필요. 5단계(검증): 단순 정보 제공으로 충분하므로 LEGAL_CONSULT로 분류.'}
2025-10-05 15:57:50,408 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-6ce6d162-32f3-42bd-9294-c5fd27b8d89a', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 Agent 선택 전문가입니다.\n사용자의 요청에 가장 적합한 Agent/Team을 선택하는 것이 목표입니다.\n\n## 현재 상황\n\n**사용자 질문:** 전입신고 기간은 얼마나 되나요?\n**분석된 의도:** 법률상담\n**추출된 키워드:** [\'전입신고\', \'기간\']\n\n## 사용 가능한 Agent/Team 정보\n\n{\'search_team\': {\'name\': \'search_team\', \'capabilities\': \'법률 검색, 부동산 시세 조회, 대출 상품 검색\', \'tools\': [\'legal_search\', \'market_data\', \'loan_data\'], \'use_cases\': [\'법률 상담\', \'시세 조회\', \'대출 정보\']}, \'analysis_team\': {\'name\': \'analysis_team\', \'capabilities\': \'데이터 분석, 리스크 평가, 인사이트 생성, 추천\', \'tools\': [\'data_analyzer\', \'risk_evaluator\'], \'use_cases\': [\'시장 분석\', \'리스크 평가\', \'투자 분석\']}, \'document_team\': {\'name\': \'document_team\', \'capabilities\': \'계약서 작성, 문서 생성, 문서 검토\', \'tools\': [\'document_generator\', \'contract_reviewer\'], \'use_cases\': [\'계약서 작성\', \'문서 검토\']}}\n\n## Agent 역할 및 상세 가이드\n\n### 1. search_team (검색 팀)\n- **주요 기능**: 정보 검색 및 데이터 수집\n- **전문 분야**:\n  * 법률 정보 검색 (전세법, 임대차보호법, 부동산 관련 법규)\n  * 부동산 시세 조회 (매매가, 전세가, 월세, 실거래가)\n  * 대출 상품 정보 검색 (금리, 한도, 조건)\n  * 지역 정보 및 인프라 조회\n- **도구**: legal_search, market_data, loan_data\n- **적합한 작업**: 정보 조회, 데이터 수집, 법률 확인, 시세 파악\n- **예시**:\n  * "전세금 5% 인상 가능한가요?"\n  * "강남구 아파트 전세 시세"\n  * "전세자금대출 한도 얼마?"\n\n### 2. analysis_team (분석 팀)\n- **주요 기능**: 데이터 분석 및 평가\n- **전문 분야**:\n  * 시장 동향 분석 (상승률, 하락률, 추세)\n  * 리스크 평가 (계약, 투자 위험도)\n  * 투자 수익률 계산 (ROI, 월세 수익률)\n  * 대출 한도 및 조건 분석 (LTV, DTI, DSR)\n  * 비교 분석 (지역별, 상품별)\n- **도구**: data_analyzer, risk_evaluator, calculator\n- **적합한 작업**: 데이터 분석, 리스크 평가, 계산, 비교, 예측\n- **의존성**: 보통 search_team의 데이터가 필요\n- **예시**:\n  * "이 지역 투자 가치 분석해줘"\n  * "계약 리스크 평가해줘"\n  * "대출 가능 금액 계산해줘"\n\n### 3. document_team (문서 팀)\n- **주요 기능**: 문서 생성 및 관리\n- **전문 분야**:\n  * 계약서 작성 (임대차, 매매, 전세)\n  * 문서 템플릿 관리\n  * 특약사항 생성\n  * 계약서 수정안 작성\n  * 법률 문서 검토\n- **도구**: document_generator, contract_template, contract_reviewer\n- **적합한 작업**: 문서 작성, 계약서 생성, 문서 수정, 검토\n- **예시**:\n  * "임대차계약서 작성해줘"\n  * "특약사항 추가해줘"\n  * "계약서 수정안 만들어줘"\n\n## Chain-of-Thought Agent 선택 프로세스\n\n다음 단계를 **순서대로** 따라 최적의 Agent 조합을 선택하세요:\n\n### 1단계: 질문 요구사항 파악\n- 단순 정보 조회인가? → search_team만 필요\n- 판단/평가가 필요한가? → search + analysis 필요\n- 해결책 제시가 필요한가? → search + analysis 필요\n- 문서 생성이 필요한가? → document_team 추가\n\n### 2단계: 작업 복잡도 판단\n- **단순** (검색만): "~이 뭐야?", "~알려줘" → search_team\n- **중간** (검색+판단): "~괜찮아?", "~적절해?" → search + analysis\n- **복잡** (종합 해결): 구체적 상황 + "어떻게 해야 해?" → search + analysis\n\n### 3단계: 의존성 분석\n- 독립적 작업: 단일 팀으로 처리 가능\n- 순차적 의존: 이전 결과 필요 → 여러 팀 순서대로\n- 병렬 가능: 동시 조회 가능 → coordination: "parallel"\n\n### 4단계: 최종 검증\n- 선택한 팀들로 질문에 완전히 답변 가능한가?\n- 불필요한 팀이 포함되지 않았는가?\n- 순서가 논리적인가? (데이터 흐름 고려)\n\n### 중요 원칙:\n- **법률 키워드만으로 판단하지 말 것**: "법적으로 어떻게 해야 해?" = 법률 검색 + 분석 필요\n- **상황 설명 + 해결책 요청** = 반드시 analysis_team 포함\n- **구체적 수치 비교** (3억→10억 같은) = analysis_team 필요\n\n## 의도별 Agent 매핑 가이드 (기본 가이드 - CoT로 조정 가능)\n\n| 의도 (Intent) | 기본 조합 | 상황별 조정 |\n|--------------|-----------|-------------|\n| LEGAL_CONSULT | ["search_team"] | 해결책 요청시 → + analysis_team |\n| MARKET_INQUIRY | ["search_team"] | 비교/평가시 → + analysis_team |\n| LOAN_CONSULT | ["search_team", "analysis_team"] | 계산 필수 |\n| CONTRACT_CREATION | ["document_team"] | 검토 후 작성 → search + document |\n| CONTRACT_REVIEW | ["search_team", "analysis_team"] | 법률 검토 + 리스크 분석 |\n| COMPREHENSIVE | ["search_team", "analysis_team"] | **항상 분석 포함** |\n| RISK_ANALYSIS | ["analysis_team"] | 법률 근거 필요시 → search + analysis |\n| UNCLEAR | ["search_team", "analysis_team"] | 포괄적 대응 |\n\n**중요**: 위 매핑은 **기본 가이드**일 뿐입니다.\n실제 질문의 내용(CoT 분석 결과)에 따라 조정하세요!\n\n## 복합 질문 처리 예시 (CoT 적용)\n\n### 예시 1: 순차적 처리\n질문: "강남구 시세 확인하고 투자 가치 분석해줘"\n**CoT 분석**:\n1. 요구사항: 시세 조회 + 투자 가치 평가\n2. 복잡도: 중간 (검색 + 분석)\n3. 의존성: 시세 데이터 → 투자 분석 (순차)\n4. 검증: search만으로는 "투자 가치 평가" 불가능\n\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "1단계: 시세 조회+투자 평가 필요. 2단계: 중간 복잡도. 3단계: 순차 의존. 4단계: search로 시세 수집 후 analysis로 투자 가치 평가 필요",\n    "coordination": "sequential"\n}\n```\n\n### 예시 2: 단순 정보 조회\n질문: "전세금 인상률 한도가 얼마야?"\n**CoT 분석**:\n1. 요구사항: 단순 사실 확인\n2. 복잡도: 낮음 (정보 확인형)\n3. 의존성: 없음\n4. 검증: search_team만으로 충분\n\n```json\n{\n    "selected_agents": ["search_team"],\n    "reasoning": "1단계: 단순 정보 조회. 2단계: 저복잡도. 3단계: 독립적. 4단계: 법률 검색만으로 답변 가능",\n    "coordination": "single"\n}\n```\n\n### 예시 3: 해결책 요청 (핵심 예시!)\n질문: "집주인이 전세금 3억을 10억으로 올려달래. 법적으로 어떻게 해야 해?"\n의도: COMPREHENSIVE\n**CoT 분석**:\n1. 요구사항: 상황 설명 + 해결책 요청\n2. 복잡도: 높음 (구체적 상황 + 수치 비교)\n3. 의존성: 법률 확인 → 상황 분석 → 해결책 제시\n4. 검증: "법적으로"만 보고 search만 선택하면 불충분! 해결책 제시 필요\n\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "1단계: 법률 + 상황 분석 + 해결책 필요. 2단계: 고복잡도(3억→10억 비정상). 3단계: 순차(법률 확인 후 타당성 분석). 4단계: \'어떻게 해야\' = 단순 법률 조회 아님, 분석 필수",\n    "coordination": "sequential",\n    "confidence": 0.95\n}\n```\n\n## 응답 형식 (JSON)\n\n```json\n{\n    "selected_agents": ["선택된 agent/team 목록"],\n    "reasoning": "선택 이유를 구체적으로 설명. 각 Agent의 역할과 처리 순서 포함",\n    "coordination": "single/sequential/parallel/pipeline",\n    "dependencies": {"agent2": ["agent1"]},\n    "estimated_time": 30,\n    "confidence": 0.9\n}\n```\n\n## 선택 가이드라인\n\n1. **최소 Agent 원칙**: 가능한 적은 수의 Agent로 처리\n2. **전문성 우선**: 해당 작업에 가장 전문적인 Agent 선택\n3. **효율성 고려**: 병렬 처리 가능한 경우 명시\n4. **의존성 관리**: 데이터 흐름을 고려한 순서 지정\n5. **폴백 전략**: 불확실한 경우 ["search_team", "analysis_team"] 조합\n\n## 주의사항\n\n- selected_agents는 반드시 배열 형태\n- Agent 이름은 정확히: "search_team", "analysis_team", "document_team"\n- 최소 1개, 최대 3개 선택\n- 순서는 실행 우선순위 (앞에 있을수록 먼저 실행)\n- reasoning은 상세하고 논리적으로 작성\n- coordination 필드로 실행 방식 명시\n- 복합 질문의 경우 의존성 관계 명확히 표시'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 15:57:50,409 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 15:57:50,409 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 15:57:50,409 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 15:57:50,409 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 15:57:50,409 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 15:57:50,409 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 15:57:53,039 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 06:57:53 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'2423'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'2449'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9980'), (b'x-ratelimit-remaining-tokens', b'197894'), (b'x-ratelimit-reset-requests', b'2m45.435s'), (b'x-ratelimit-reset-tokens', b'631ms'), (b'x-request-id', b'req_fe4346a0b0f744b6aa5689818bdec58a'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b06f1edc13091-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 15:57:53,040 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 15:57:53,040 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 15:57:53,041 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 15:57:53,043 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 15:57:53,043 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 15:57:53,043 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 06:57:53 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '2423', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '2449', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9980', 'x-ratelimit-remaining-tokens': '197894', 'x-ratelimit-reset-requests': '2m45.435s', 'x-ratelimit-reset-tokens': '631ms', 'x-request-id': 'req_fe4346a0b0f744b6aa5689818bdec58a', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b06f1edc13091-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 15:57:53,043 - openai._base_client - DEBUG - request_id: req_fe4346a0b0f744b6aa5689818bdec58a
2025-10-05 15:57:53,044 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: agent_selection | Model: gpt-4o-mini-2024-07-18 | Tokens: 2460 (prompt: 2351, completion: 109)
2025-10-05 15:57:53,044 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM agent selection reasoning: 1단계: 전입신고 기간에 대한 정보 조회 필요. 2단계: 단순 정보 조회로 저복잡도. 3단계: 독립적 작업으로 search_team만으로 충분. 4단계: 법률 검색만으로 전입신고 기간에 대한 답변 가능.
2025-10-05 15:57:53,044 - app.service_agent.cognitive_agents.planning_agent - INFO - ✅ Primary LLM selected agents: ['search_team']
2025-10-05 15:57:53,044 - __main__ - INFO -   의도: 법률상담
2025-10-05 15:57:53,044 - __main__ - INFO -   신뢰도: 0.80
2025-10-05 15:57:53,044 - __main__ - INFO -   추천 Agent: ['search_team']
2025-10-05 15:57:53,044 - __main__ - INFO - 
[Step 2] Query Decomposition...
2025-10-05 15:57:53,044 - app.service_agent.cognitive_agents.query_decomposer - INFO - Decomposing query: 전입신고 기간은 얼마나 되나요?...
2025-10-05 15:57:53,044 - app.service_agent.cognitive_agents.query_decomposer - INFO - Query is simple, no decomposition needed
2025-10-05 15:57:53,044 - __main__ - INFO -   복합 질문: False
2025-10-05 15:57:53,044 - __main__ - INFO -   작업 수: 1
2025-10-05 15:57:53,044 - __main__ - INFO -   실행 모드: sequential
2025-10-05 15:57:53,044 - __main__ - INFO - 
[Step 3] Execution Plan 생성...
2025-10-05 15:57:53,044 - app.service_agent.cognitive_agents.planning_agent - INFO - Creating execution plan for intent: 법률상담
2025-10-05 15:57:53,044 - app.service_agent.cognitive_agents.planning_agent - WARNING - AgentRegistry is empty, using default teams
2025-10-05 15:57:53,044 - app.service_agent.cognitive_agents.planning_agent - DEBUG - Suggested agents: ['search_team']
2025-10-05 15:57:53,044 - app.service_agent.cognitive_agents.planning_agent - DEBUG - Available agents: ['search_team', 'analysis_team', 'document_team']
2025-10-05 15:57:53,044 - app.service_agent.cognitive_agents.planning_agent - INFO - Selected agents/teams for execution: ['search_team']
2025-10-05 15:57:53,044 - __main__ - INFO -   전략: sequential
2025-10-05 15:57:53,044 - __main__ - INFO -   단계 수: 1
2025-10-05 15:57:53,044 - __main__ - INFO - 
✓ 테스트 성공 (소요시간: 6.06초)
2025-10-05 15:57:53,046 - __main__ - INFO - 
결과 저장: C:\kdy\Projects\holmesnyangz\beta_v001\backend\app\service_agent\reports\phase1_test_results.json
2025-10-05 15:57:53,046 - __main__ - INFO - 

================================================================================
2025-10-05 15:57:53,046 - __main__ - INFO - PART 2: 복합 질문 테스트 (20개)
2025-10-05 15:57:53,046 - __main__ - INFO - ================================================================================
2025-10-05 15:57:53,046 - __main__ - INFO - 
================================================================================
2025-10-05 15:57:53,046 - __main__ - INFO - [21] 복합 질문 테스트: D001
2025-10-05 15:57:53,047 - __main__ - INFO - 질문: 강남구 아파트 시세 확인하고 대출 가능 금액 계산해줘
2025-10-05 15:57:53,047 - __main__ - INFO - ================================================================================
2025-10-05 15:57:53,047 - __main__ - INFO - 
[Step 1] Intent 분석...
2025-10-05 15:57:53,047 - app.service_agent.cognitive_agents.planning_agent - INFO - Analyzing intent for query: 강남구 아파트 시세 확인하고 대출 가능 금액 계산해줘...
2025-10-05 15:57:53,048 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-99d52fb6-2417-4a3b-bc1c-0d6d4eef2fe3', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 의도 분석 전문가입니다.\n사용자의 질문을 정확히 이해하고, 어떤 종류의 도움이 필요한지 분류해야 합니다.\n\n## Chain-of-Thought 분석 프로세스\n\n질문을 분석할 때 다음 단계를 **순서대로** 따르세요:\n\n### 1단계: 질문 구조 파악\n- 단순 정보 요청인가? (예: "~이 뭐야?", "~알려줘")\n- 상황 설명이 포함되어 있는가? (배경, 현재 상태)\n- 구체적 수치나 데이터가 있는가? (금액, 비율, 기간 등)\n- 문제 해결을 요구하는가? (예: "어떻게 해야 해?", "방법 알려줘")\n\n### 2단계: 요청 유형 판단\n- **정보 확인형**: 사실, 개념, 규정 확인 → 검색만으로 충분\n- **평가/판단형**: "괜찮아?", "적절해?", "문제있어?" → 검색 + 분석 필요\n- **해결책 요청형**: "어떻게?", "방법?", "대처?" → 검색 + 분석 + 제안 필요\n- **비교/선택형**: "A vs B", "어느게 나아?" → 검색 + 분석(비교) 필요\n\n### 3단계: 복잡도 평가\n- **저**: 단일 개념/사실 확인 (예: "전세금 인상률 한도?")\n- **중**: 특정 상황 + 판단 (예: "3억을 5억으로 올려달래. 가능해?")\n- **고**: 복잡한 상황 + 여러 조건 + 해결책 (예: "10년 거주, 3억→10억 요구. 어떻게 해야 해?")\n\n### 4단계: 필요한 처리 결정\n- **검색만**: 정보 확인형 + 저복잡도\n- **검색+분석**: 평가/판단형 OR 중복잡도 OR 수치 비교 포함\n- **종합처리**: 해결책 요청형 OR 고복잡도 OR 여러 조건 동시 고려\n\n### 5단계: 최종 검증\n- 선택한 의도로 사용자 질문에 완전히 답변 가능한가?\n- 단순 정보 제공으로 끝나는가, 아니면 추가 분석/판단이 필요한가?\n- 상황 설명이 있으면서 "해결", "방법", "어떻게" 등이 있으면 → COMPREHENSIVE 고려\n\n## 중요: 복합 질문 처리\n복합적인 질문(여러 의도가 섞인 질문)의 경우, 가장 핵심적인 의도를 파악하되,\nsub_intents 필드에 부가적인 의도들도 함께 기록해주세요.\n\n**특히 주의**:\n- 법률 키워드가 있어도, "해결방법", "어떻게 해야" 같은 표현이 있으면 단순 LEGAL_CONSULT가 아닐 수 있음\n- 구체적 상황(금액, 기간 등) + 해결책 요구 = COMPREHENSIVE 또는 복합 의도로 분류\n\n## 분류 카테고리 설명:\n\n1. **LEGAL_CONSULT (법률상담)**\n   - 설명: 부동산 관련 법률, 권리, 의무에 대한 질문\n   - 예시:\n     * 단순: "전세금 5% 인상이 가능한가요?", "임대차계약 갱신 거부할 수 있나요?"\n     * 복합: "전세금 인상 가능한지 확인하고 법적 근거도 알려주세요"\n   - 키워드: 법, 전세, 임대, 보증금, 계약, 권리, 의무, 갱신, 임차인, 임대인, 법률, 규정, 조항\n   - 필요한 처리: 법률 데이터베이스 검색, 관련 법조항 찾기\n\n2. **MARKET_INQUIRY (시세조회)**\n   - 설명: 부동산 시장 가격, 시세, 거래 동향에 대한 질문\n   - 예시:\n     * 단순: "강남구 아파트 전세 시세 알려주세요", "서초동 매매가 얼마나 올랐나요?"\n     * 복합: "강남구 시세 확인하고 대출 가능 금액도 계산해줘"\n   - 키워드: 시세, 가격, 매매가, 전세가, 월세, 시장, 동향, 평균, 지역명, 상승률, 하락률\n   - 필요한 처리: 부동산 시세 데이터 조회, 지역별 가격 분석\n\n3. **LOAN_CONSULT (대출상담)**\n   - 설명: 주택담보대출, 전세자금대출 등 금융 관련 질문\n   - 예시:\n     * 단순: "전세자금대출 한도가 얼마인가요?", "LTV가 뭔가요?"\n     * 복합: "대출 한도 확인하고 금리 비교도 해주세요"\n   - 키워드: 대출, 금리, 한도, 조건, 상환, LTV, DTI, DSR, 담보, 금융, 은행\n   - 필요한 처리: 대출 상품 조회, 금리 정보 검색, 한도 계산\n\n4. **CONTRACT_CREATION (계약서작성)**\n   - 설명: 새로운 계약서나 문서를 작성해달라는 요청\n   - 예시:\n     * 단순: "임대차계약서 작성해주세요", "전세계약서 초안 만들어주세요"\n     * 복합: "계약서 작성하고 주의사항도 검토해주세요"\n   - 키워드: 작성, 만들, 생성, 초안, 계약서, 문서, 양식\n   - 필요한 처리: 문서 생성 에이전트 호출, 템플릿 기반 작성\n\n5. **CONTRACT_REVIEW (계약서검토)**\n   - 설명: 기존 계약서나 문서를 검토해달라는 요청\n   - 예시:\n     * 단순: "이 계약서 검토해주세요", "특약사항 문제없나요?"\n     * 복합: "계약서 검토하고 수정사항도 제안해주세요"\n   - 키워드: 검토, 확인, 점검, 리뷰, 분석해, 살펴봐, 체크\n   - 필요한 처리: 문서 분석, 위험 요소 식별, 개선사항 제안\n\n6. **COMPREHENSIVE (종합분석)**\n   - 설명: 여러 측면을 종합적으로 분석해달라는 요청, 또는 복잡한 상황에 대한 해결책 요청\n   - 예시:\n     * 단순: "이 물건 전체적으로 분석해주세요"\n     * 복합: "시세, 법률, 대출 모두 검토해서 종합 의견 주세요"\n     * 해결형: "10년 거주했는데 전세금 3억을 10억으로 올려달래. 어떻게 해야 해?"\n     * 상황+해결: "집주인이 계약 갱신 거부했어. 법적으로 어떻게 대응해야 할까?"\n   - 키워드: 종합, 전체, 모든, 전반적, 종합적, 평가, 분석, 어떻게, 방법, 해결, 대처\n   - 패턴: 구체적 상황 설명 + "어떻게/방법/해결" 요청\n   - 필요한 처리: 다중 데이터 소스 통합 분석, 상황 평가, 해결책 제시\n\n7. **RISK_ANALYSIS (리스크분석)**\n   - 설명: 위험 요소나 주의사항에 대한 질문\n   - 예시:\n     * 단순: "이 계약 위험한가요?", "주의할 점 알려주세요"\n     * 복합: "리스크 분석하고 대안도 제시해주세요"\n   - 키워드: 위험, 리스크, 주의, 문제점, 조심, 걱정, 우려\n   - 필요한 처리: 위험 요소 분석, 주의사항 추출\n\n8. **UNCLEAR (불분명)**\n   - 설명: 의도를 명확히 파악하기 어려운 질문\n   - 예시: "이거 좀 봐주세요", "어떻게 해야 할까요?", "도와주세요"\n   - 처리: 추가 질문으로 의도 명확화 필요\n\n9. **IRRELEVANT (무관)**\n   - 설명: 부동산과 전혀 관련 없는 질문\n   - 예시: "날씨 어때?", "저녁 뭐 먹지?", "주식 추천해줘"\n   - 처리: 부동산 관련 질문을 유도\n\n## 복합 질문 예시와 분석 (CoT 적용):\n\n### 예시 1: "강남구 아파트 시세 알려주고 전세자금대출 가능한지도 확인해줘"\n**CoT 분석**:\n1. 구조: 두 개의 요청 ("시세" + "대출")\n2. 유형: 정보 확인형 (둘 다)\n3. 복잡도: 중 (두 가지 독립적 조회)\n4. 필요 처리: 검색 + 계산/분석\n\n**결론**:\n- 주 의도: MARKET_INQUIRY (시세 조회가 먼저 필요)\n- 부가 의도: LOAN_CONSULT (대출 확인)\n- 분해: ["강남구 아파트 시세 조회", "전세자금대출 가능 여부 확인"]\n\n### 예시 2: "이 계약서 검토해서 위험한 부분 있는지 알려주고 수정 제안도 해줘"\n**CoT 분석**:\n1. 구조: 검토 + 위험 평가 + 수정안\n2. 유형: 평가/판단형 + 해결책 요청형\n3. 복잡도: 고 (3단계 처리)\n4. 필요 처리: 검토 + 분석 + 문서 생성\n\n**결론**:\n- 주 의도: CONTRACT_REVIEW (계약서 검토)\n- 부가 의도: RISK_ANALYSIS (위험 분석)\n- 분해: ["계약서 전체 검토", "위험 요소 식별", "수정사항 제안"]\n\n### 예시 3: "집주인이 짜증나, 10년 살았는데 전세금 3억을 10억으로 올려달래. 법적으로 해결방법 알려줘"\n**CoT 분석**:\n1. 구조: 상황 설명 (10년 거주, 3억→10억) + 해결책 요청\n2. 유형: 해결책 요청형 (단순 정보 X)\n3. 복잡도: 고 (구체적 상황 + 수치 비교 + 법률 + 대응방안)\n4. 필요 처리: 법률 검색 + 상황 분석 + 해결책 제시\n\n**결론**:\n- 주 의도: COMPREHENSIVE (복잡한 상황에 대한 종합 해결)\n- 부가 의도: LEGAL_CONSULT, RISK_ANALYSIS\n- 분해: ["전세금 인상 한도 법률 조회", "3억→10억 인상의 타당성 분석", "구체적 대응 방안 제시"]\n- **이유**: "법적으로"라는 키워드가 있지만, 단순 법률 확인이 아니라 구체적 상황에 대한 해결책을 요구하므로 COMPREHENSIVE\n\n### 예시 4: "전세금 인상률 상한이 얼마야?"\n**CoT 분석**:\n1. 구조: 단순 사실 확인\n2. 유형: 정보 확인형\n3. 복잡도: 저 (단일 개념)\n4. 필요 처리: 검색만\n\n**결론**:\n- 주 의도: LEGAL_CONSULT (법률 정보 조회)\n- 부가 의도: 없음\n- 분해: 필요 없음\n\n## 응답 형식 (JSON 형식으로 응답):\n\n```json\n{\n    "intent": "LEGAL_CONSULT",\n    "confidence": 0.9,\n    "keywords": ["전세금", "인상", "제한"],\n    "sub_intents": [],\n    "is_compound": false,\n    "decomposed_tasks": [],\n    "entities": {\n        "location": "강남구",\n        "price": "5억",\n        "contract_type": "전세",\n        "date": "2024년",\n        "area": "84㎡",\n        "action_verbs": ["확인", "검토"]\n    },\n    "reasoning": "전세금 인상에 대한 법률 질문이므로 LEGAL_CONSULT로 분류"\n}\n```\n\n응답 규칙:\n- intent: 위 9개 카테고리 중 하나 (대문자_언더스코어 형식)\n- confidence: 0.0~1.0 (0.8 이상이면 매우 확실, 0.5 미만이면 불확실)\n- keywords: 추출된 주요 키워드 목록\n- sub_intents: 복합 질문일 경우 부가적인 의도들\n- is_compound: 복합 질문 여부 (true/false)\n- decomposed_tasks: 복합 질문을 분해한 개별 작업들\n- entities: 추출된 엔티티 정보\n- reasoning: **반드시 CoT 5단계를 거쳐 분석한 과정을 포함** (구조 파악 → 유형 판단 → 복잡도 평가 → 필요 처리 → 최종 검증)\n\n## reasoning 작성 예시:\n"1단계(구조): 상황 설명(10년 거주, 3억→10억) + 해결책 요청 포함.\n2단계(유형): 해결책 요청형 - 단순 정보가 아닌 대응방안 필요.\n3단계(복잡도): 고 - 구체적 수치 비교와 복잡한 상황.\n4단계(처리): 법률 검색 + 상황 분석 + 해결책 제시 필요.\n5단계(검증): LEGAL_CONSULT만으로는 불충분, 종합적 분석 필요 → COMPREHENSIVE 선택"\n\n## 판단 가이드:\n- 여러 의도가 섞여있다면, 가장 주된 의도를 intent에, 나머지를 sub_intents에 기록\n- "그리고", "또한", "함께", "같이" 등의 연결어가 있으면 복합 질문일 가능성 높음\n- 법률 관련 키워드가 있으면 LEGAL_CONSULT 우선\n- 가격/시세 언급이 명확하면 MARKET_INQUIRY\n- 계약서라는 단어와 함께 "작성/만들기"가 있으면 CONTRACT_CREATION\n- 계약서라는 단어와 함께 "검토/확인"이 있으면 CONTRACT_REVIEW\n- 불확실하면 confidence를 낮게 설정하고 UNCLEAR 선택\n- 복합 질문은 is_compound를 true로 설정하고 개별 작업으로 분해\n\n분석할 질문: 강남구 아파트 시세 확인하고 대출 가능 금액 계산해줘'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 15:57:53,048 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 15:57:53,049 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 15:57:53,049 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 15:57:53,049 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 15:57:53,049 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 15:57:53,049 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 15:57:57,119 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 06:57:57 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'3829'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'3849'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9980'), (b'x-ratelimit-remaining-tokens', b'197237'), (b'x-ratelimit-reset-requests', b'2m51.117s'), (b'x-ratelimit-reset-tokens', b'828ms'), (b'x-request-id', b'req_d85cf2ceec4042aa9bae8825e0b98285'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b07026f013091-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 15:57:57,119 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 15:57:57,119 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 15:57:57,119 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 15:57:57,119 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 15:57:57,119 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 15:57:57,119 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 06:57:57 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '3829', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '3849', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9980', 'x-ratelimit-remaining-tokens': '197237', 'x-ratelimit-reset-requests': '2m51.117s', 'x-ratelimit-reset-tokens': '828ms', 'x-request-id': 'req_d85cf2ceec4042aa9bae8825e0b98285', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b07026f013091-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 15:57:57,119 - openai._base_client - DEBUG - request_id: req_d85cf2ceec4042aa9bae8825e0b98285
2025-10-05 15:57:57,120 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: intent_analysis | Model: gpt-4o-mini-2024-07-18 | Tokens: 3428 (prompt: 3186, completion: 242)
2025-10-05 15:57:57,120 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM Intent Analysis Result: {'intent': 'MARKET_INQUIRY', 'confidence': 0.85, 'keywords': ['강남구', '아파트', '시세', '대출', '가능 금액'], 'sub_intents': ['LOAN_CONSULT'], 'is_compound': True, 'decomposed_tasks': ['강남구 아파트 시세 조회', '대출 가능 금액 계산'], 'entities': {'location': '강남구', 'property_type': '아파트'}, 'reasoning': '1단계(구조): 두 개의 요청(시세 확인 + 대출 가능 금액 계산) 포함. 2단계(유형): 정보 확인형(시세) + 대출 관련 정보 요청. 3단계(복잡도): 중 - 두 가지 독립적 조회 필요. 4단계(처리): 시세 조회와 대출 가능 금액 계산을 위한 검색 필요. 5단계(검증): 두 가지 요청이 명확하므로 복합 질문으로 분류.'}
2025-10-05 15:57:57,121 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-36540ae7-8f03-43e6-8bb8-752b65f39344', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 Agent 선택 전문가입니다.\n사용자의 요청에 가장 적합한 Agent/Team을 선택하는 것이 목표입니다.\n\n## 현재 상황\n\n**사용자 질문:** 강남구 아파트 시세 확인하고 대출 가능 금액 계산해줘\n**분석된 의도:** 시세조회\n**추출된 키워드:** [\'강남구\', \'아파트\', \'시세\', \'대출\', \'가능 금액\']\n\n## 사용 가능한 Agent/Team 정보\n\n{\'search_team\': {\'name\': \'search_team\', \'capabilities\': \'법률 검색, 부동산 시세 조회, 대출 상품 검색\', \'tools\': [\'legal_search\', \'market_data\', \'loan_data\'], \'use_cases\': [\'법률 상담\', \'시세 조회\', \'대출 정보\']}, \'analysis_team\': {\'name\': \'analysis_team\', \'capabilities\': \'데이터 분석, 리스크 평가, 인사이트 생성, 추천\', \'tools\': [\'data_analyzer\', \'risk_evaluator\'], \'use_cases\': [\'시장 분석\', \'리스크 평가\', \'투자 분석\']}, \'document_team\': {\'name\': \'document_team\', \'capabilities\': \'계약서 작성, 문서 생성, 문서 검토\', \'tools\': [\'document_generator\', \'contract_reviewer\'], \'use_cases\': [\'계약서 작성\', \'문서 검토\']}}\n\n## Agent 역할 및 상세 가이드\n\n### 1. search_team (검색 팀)\n- **주요 기능**: 정보 검색 및 데이터 수집\n- **전문 분야**:\n  * 법률 정보 검색 (전세법, 임대차보호법, 부동산 관련 법규)\n  * 부동산 시세 조회 (매매가, 전세가, 월세, 실거래가)\n  * 대출 상품 정보 검색 (금리, 한도, 조건)\n  * 지역 정보 및 인프라 조회\n- **도구**: legal_search, market_data, loan_data\n- **적합한 작업**: 정보 조회, 데이터 수집, 법률 확인, 시세 파악\n- **예시**:\n  * "전세금 5% 인상 가능한가요?"\n  * "강남구 아파트 전세 시세"\n  * "전세자금대출 한도 얼마?"\n\n### 2. analysis_team (분석 팀)\n- **주요 기능**: 데이터 분석 및 평가\n- **전문 분야**:\n  * 시장 동향 분석 (상승률, 하락률, 추세)\n  * 리스크 평가 (계약, 투자 위험도)\n  * 투자 수익률 계산 (ROI, 월세 수익률)\n  * 대출 한도 및 조건 분석 (LTV, DTI, DSR)\n  * 비교 분석 (지역별, 상품별)\n- **도구**: data_analyzer, risk_evaluator, calculator\n- **적합한 작업**: 데이터 분석, 리스크 평가, 계산, 비교, 예측\n- **의존성**: 보통 search_team의 데이터가 필요\n- **예시**:\n  * "이 지역 투자 가치 분석해줘"\n  * "계약 리스크 평가해줘"\n  * "대출 가능 금액 계산해줘"\n\n### 3. document_team (문서 팀)\n- **주요 기능**: 문서 생성 및 관리\n- **전문 분야**:\n  * 계약서 작성 (임대차, 매매, 전세)\n  * 문서 템플릿 관리\n  * 특약사항 생성\n  * 계약서 수정안 작성\n  * 법률 문서 검토\n- **도구**: document_generator, contract_template, contract_reviewer\n- **적합한 작업**: 문서 작성, 계약서 생성, 문서 수정, 검토\n- **예시**:\n  * "임대차계약서 작성해줘"\n  * "특약사항 추가해줘"\n  * "계약서 수정안 만들어줘"\n\n## Chain-of-Thought Agent 선택 프로세스\n\n다음 단계를 **순서대로** 따라 최적의 Agent 조합을 선택하세요:\n\n### 1단계: 질문 요구사항 파악\n- 단순 정보 조회인가? → search_team만 필요\n- 판단/평가가 필요한가? → search + analysis 필요\n- 해결책 제시가 필요한가? → search + analysis 필요\n- 문서 생성이 필요한가? → document_team 추가\n\n### 2단계: 작업 복잡도 판단\n- **단순** (검색만): "~이 뭐야?", "~알려줘" → search_team\n- **중간** (검색+판단): "~괜찮아?", "~적절해?" → search + analysis\n- **복잡** (종합 해결): 구체적 상황 + "어떻게 해야 해?" → search + analysis\n\n### 3단계: 의존성 분석\n- 독립적 작업: 단일 팀으로 처리 가능\n- 순차적 의존: 이전 결과 필요 → 여러 팀 순서대로\n- 병렬 가능: 동시 조회 가능 → coordination: "parallel"\n\n### 4단계: 최종 검증\n- 선택한 팀들로 질문에 완전히 답변 가능한가?\n- 불필요한 팀이 포함되지 않았는가?\n- 순서가 논리적인가? (데이터 흐름 고려)\n\n### 중요 원칙:\n- **법률 키워드만으로 판단하지 말 것**: "법적으로 어떻게 해야 해?" = 법률 검색 + 분석 필요\n- **상황 설명 + 해결책 요청** = 반드시 analysis_team 포함\n- **구체적 수치 비교** (3억→10억 같은) = analysis_team 필요\n\n## 의도별 Agent 매핑 가이드 (기본 가이드 - CoT로 조정 가능)\n\n| 의도 (Intent) | 기본 조합 | 상황별 조정 |\n|--------------|-----------|-------------|\n| LEGAL_CONSULT | ["search_team"] | 해결책 요청시 → + analysis_team |\n| MARKET_INQUIRY | ["search_team"] | 비교/평가시 → + analysis_team |\n| LOAN_CONSULT | ["search_team", "analysis_team"] | 계산 필수 |\n| CONTRACT_CREATION | ["document_team"] | 검토 후 작성 → search + document |\n| CONTRACT_REVIEW | ["search_team", "analysis_team"] | 법률 검토 + 리스크 분석 |\n| COMPREHENSIVE | ["search_team", "analysis_team"] | **항상 분석 포함** |\n| RISK_ANALYSIS | ["analysis_team"] | 법률 근거 필요시 → search + analysis |\n| UNCLEAR | ["search_team", "analysis_team"] | 포괄적 대응 |\n\n**중요**: 위 매핑은 **기본 가이드**일 뿐입니다.\n실제 질문의 내용(CoT 분석 결과)에 따라 조정하세요!\n\n## 복합 질문 처리 예시 (CoT 적용)\n\n### 예시 1: 순차적 처리\n질문: "강남구 시세 확인하고 투자 가치 분석해줘"\n**CoT 분석**:\n1. 요구사항: 시세 조회 + 투자 가치 평가\n2. 복잡도: 중간 (검색 + 분석)\n3. 의존성: 시세 데이터 → 투자 분석 (순차)\n4. 검증: search만으로는 "투자 가치 평가" 불가능\n\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "1단계: 시세 조회+투자 평가 필요. 2단계: 중간 복잡도. 3단계: 순차 의존. 4단계: search로 시세 수집 후 analysis로 투자 가치 평가 필요",\n    "coordination": "sequential"\n}\n```\n\n### 예시 2: 단순 정보 조회\n질문: "전세금 인상률 한도가 얼마야?"\n**CoT 분석**:\n1. 요구사항: 단순 사실 확인\n2. 복잡도: 낮음 (정보 확인형)\n3. 의존성: 없음\n4. 검증: search_team만으로 충분\n\n```json\n{\n    "selected_agents": ["search_team"],\n    "reasoning": "1단계: 단순 정보 조회. 2단계: 저복잡도. 3단계: 독립적. 4단계: 법률 검색만으로 답변 가능",\n    "coordination": "single"\n}\n```\n\n### 예시 3: 해결책 요청 (핵심 예시!)\n질문: "집주인이 전세금 3억을 10억으로 올려달래. 법적으로 어떻게 해야 해?"\n의도: COMPREHENSIVE\n**CoT 분석**:\n1. 요구사항: 상황 설명 + 해결책 요청\n2. 복잡도: 높음 (구체적 상황 + 수치 비교)\n3. 의존성: 법률 확인 → 상황 분석 → 해결책 제시\n4. 검증: "법적으로"만 보고 search만 선택하면 불충분! 해결책 제시 필요\n\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "1단계: 법률 + 상황 분석 + 해결책 필요. 2단계: 고복잡도(3억→10억 비정상). 3단계: 순차(법률 확인 후 타당성 분석). 4단계: \'어떻게 해야\' = 단순 법률 조회 아님, 분석 필수",\n    "coordination": "sequential",\n    "confidence": 0.95\n}\n```\n\n## 응답 형식 (JSON)\n\n```json\n{\n    "selected_agents": ["선택된 agent/team 목록"],\n    "reasoning": "선택 이유를 구체적으로 설명. 각 Agent의 역할과 처리 순서 포함",\n    "coordination": "single/sequential/parallel/pipeline",\n    "dependencies": {"agent2": ["agent1"]},\n    "estimated_time": 30,\n    "confidence": 0.9\n}\n```\n\n## 선택 가이드라인\n\n1. **최소 Agent 원칙**: 가능한 적은 수의 Agent로 처리\n2. **전문성 우선**: 해당 작업에 가장 전문적인 Agent 선택\n3. **효율성 고려**: 병렬 처리 가능한 경우 명시\n4. **의존성 관리**: 데이터 흐름을 고려한 순서 지정\n5. **폴백 전략**: 불확실한 경우 ["search_team", "analysis_team"] 조합\n\n## 주의사항\n\n- selected_agents는 반드시 배열 형태\n- Agent 이름은 정확히: "search_team", "analysis_team", "document_team"\n- 최소 1개, 최대 3개 선택\n- 순서는 실행 우선순위 (앞에 있을수록 먼저 실행)\n- reasoning은 상세하고 논리적으로 작성\n- coordination 필드로 실행 방식 명시\n- 복합 질문의 경우 의존성 관계 명확히 표시'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 15:57:57,121 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 15:57:57,121 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 15:57:57,121 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 15:57:57,121 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 15:57:57,121 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 15:57:57,121 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 15:58:00,964 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 06:58:00 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'3608'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'3636'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9979'), (b'x-ratelimit-remaining-tokens', b'197877'), (b'x-ratelimit-reset-requests', b'2m55.669s'), (b'x-ratelimit-reset-tokens', b'636ms'), (b'x-request-id', b'req_dc150d83df864eee98e7059365cfd590'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b071bda183091-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 15:58:00,965 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 15:58:00,965 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 15:58:00,969 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 15:58:00,969 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 15:58:00,969 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 15:58:00,969 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 06:58:00 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '3608', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '3636', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9979', 'x-ratelimit-remaining-tokens': '197877', 'x-ratelimit-reset-requests': '2m55.669s', 'x-ratelimit-reset-tokens': '636ms', 'x-request-id': 'req_dc150d83df864eee98e7059365cfd590', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b071bda183091-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 15:58:00,969 - openai._base_client - DEBUG - request_id: req_dc150d83df864eee98e7059365cfd590
2025-10-05 15:58:00,970 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: agent_selection | Model: gpt-4o-mini-2024-07-18 | Tokens: 2544 (prompt: 2371, completion: 173)
2025-10-05 15:58:00,970 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM agent selection reasoning: 1단계: 강남구 아파트 시세 조회와 대출 가능 금액 계산이 필요합니다. 2단계: 시세 조회는 단순 정보 검색이지만, 대출 가능 금액 계산은 분석이 필요하므로 중간 복잡도로 판단됩니다. 3단계: 시세 데이터가 대출 가능 금액 계산에 필요하므로 순차적으로 진행해야 합니다. 4단계: search_team으로 시세를 조회한 후, analysis_team으로 대출 가능 금액을 계산해야 합니다.
2025-10-05 15:58:00,970 - app.service_agent.cognitive_agents.planning_agent - INFO - ✅ Primary LLM selected agents: ['search_team', 'analysis_team']
2025-10-05 15:58:00,970 - __main__ - INFO -   의도: 시세조회
2025-10-05 15:58:00,970 - __main__ - INFO -   신뢰도: 0.85
2025-10-05 15:58:00,970 - __main__ - INFO -   추천 Agent: ['search_team', 'analysis_team']
2025-10-05 15:58:00,970 - __main__ - INFO - 
[Step 2] Query Decomposition...
2025-10-05 15:58:00,970 - app.service_agent.cognitive_agents.query_decomposer - INFO - Decomposing query: 강남구 아파트 시세 확인하고 대출 가능 금액 계산해줘...
2025-10-05 15:58:00,971 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-8008a0fc-490b-4653-9385-8b50c9e2c76f', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 질문 분해 전문가입니다.\n복잡한 사용자 질문을 독립적으로 처리 가능한 작업 단위로 분해하는 것이 목표입니다.\n\n## Chain-of-Thought 분해 프로세스:\n\n### 1단계: 복합 질문 여부 판단\n- 단순 정보 조회만 필요한가? → is_compound: false\n- **다음 중 하나라도 해당하면 is_compound: true**:\n  * "그리고", "그 다음", "한 후" 같은 연결어로 여러 요청 연결\n  * 명시적으로 2개 이상의 작업 요청 (예: "시세 확인하고 대출 계산해줘")\n  * 상황 설명 + 해결책 요청 (예: "3억→10억 올려달래. 어떻게 해야 해?")\n  * 해결책을 위해 여러 단계 처리 필요 (검색 → 분석 → 제안)\n\n### 2단계: 필요 작업 식별\n- 정보 수집이 필요한가? → search 작업\n- 평가/판단이 필요한가? → analysis 작업\n- 문서 생성이 필요한가? → generation 작업\n- **해결책 요청**인가? → search + analysis (최소 2개)\n\n### 3단계: 작업 순서 결정\n- 독립적 작업: 병렬 가능\n- 이전 결과 필요: 순차 실행 (depends_on 설정)\n\n## 중요 원칙:\n1. 각 작업은 하나의 명확한 목표를 가져야 합니다\n2. 작업 간 의존성을 명확히 파악해야 합니다\n3. 병렬 처리 가능한 작업은 구분해야 합니다\n4. **주의**: "어떻게 해야", "방법 알려줘" 같은 해결책 요청은 복합 질문!\n\n## 작업 유형 (type):\n- search: 정보 검색 (법률, 시세, 대출 정보 등)\n- analysis: 데이터 분석 (리스크 평가, 시장 분석 등)\n- generation: 문서 생성 (계약서 작성 등)\n- review: 검토/평가 (계약서 검토, 조건 확인 등)\n- calculation: 계산/산출 (대출 한도, 세금 등)\n- comparison: 비교 분석 (여러 옵션 비교)\n\n## 담당 팀 (agent):\n- search_team: 법률, 시세, 대출 정보 검색\n- analysis_team: 데이터 분석, 리스크 평가, 계산\n- document_team: 문서 생성, 계약서 작성\n\n## 학습 예시:\n\n### 예시 1: 복합 질문 (순차적)\n질문: "강남구 아파트 시세 확인하고 대출 가능 금액 계산해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "강남구 아파트 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "대출 가능 금액 계산",\n            "type": "calculation",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "required_data": {"price": "task_0.result.price"},\n            "estimated_time": 15\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "시세 정보가 있어야 대출 금액 계산이 가능하므로 순차 실행"\n}\n```\n\n### 예시 2: 복합 질문 (병렬 가능)\n질문: "이 지역 전세 시세와 매매 시세 모두 알려주고 비교 분석해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "전세 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "매매 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "전세/매매 시세 비교 분석",\n            "type": "comparison",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0", "task_1"],\n            "required_data": {\n                "lease_price": "task_0.result",\n                "sale_price": "task_1.result"\n            },\n            "estimated_time": 25\n        }\n    ],\n    "execution_mode": "mixed",\n    "parallel_groups": [["task_0", "task_1"], ["task_2"]],\n    "reasoning": "시세 조회는 독립적이므로 병렬 처리, 비교는 두 결과 필요"\n}\n```\n\n### 예시 3: 복합 질문 (3단계 이상)\n질문: "이 계약서 검토해서 위험한 부분 찾고 수정안 만들어서 최종 계약서 작성해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "계약서 내용 전체 검토",\n            "type": "review",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 30\n        },\n        {\n            "description": "위험 요소 및 문제점 분석",\n            "type": "analysis",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "estimated_time": 25\n        },\n        {\n            "description": "수정안 제안 생성",\n            "type": "generation",\n            "agent": "document_team",\n            "priority": 3,\n            "depends_on": ["task_1"],\n            "estimated_time": 20\n        },\n        {\n            "description": "최종 계약서 작성",\n            "type": "generation",\n            "agent": "document_team",\n            "priority": 4,\n            "depends_on": ["task_2"],\n            "estimated_time": 30\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "각 단계가 이전 결과에 의존하므로 순차 실행 필요"\n}\n```\n\n### 예시 4: 단순 질문 (분해 불필요)\n질문: "전세금 인상률 상한이 얼마야?"\n분해:\n```json\n{\n    "is_compound": false,\n    "sub_tasks": [\n        {\n            "description": "전세금 인상률 상한 법률 정보 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 15\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "단일 정보 조회 요청으로 분해 불필요"\n}\n```\n\n### 예시 5: 조건부 실행\n질문: "이 물건 시세 확인하고 적정가면 대출 상담도 받고 싶어"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "물건 시세 조회 및 적정성 평가",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 25\n        },\n        {\n            "description": "대출 상담 정보 제공",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "optional": true,\n            "context": {"condition": "if_reasonable_price"},\n            "estimated_time": 20\n        }\n    ],\n    "execution_mode": "conditional",\n    "reasoning": "시세 확인 결과에 따라 대출 상담 진행 여부 결정"\n}\n```\n\n### 예시 6: 상황 설명 + 해결책 요청 (핵심 패턴!)\n질문: "집주인이 전세금 3억을 10억으로 올려달래. 법적으로 어떻게 해야 해?"\n**CoT 분석**:\n1. 질문 분석: 상황 설명 + 해결책 요청\n2. 연결어: 없지만, "어떻게 해야" = 해결책 요청\n3. 의존성: 법률 확인 → 상황 분석 → 대응 방안\n4. 복합 여부: **YES** (해결책을 위해 여러 단계 필요)\n\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "전세금 인상 한도 관련 법률 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "3억→10억 인상의 법적 타당성 및 적정성 분석",\n            "type": "analysis",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "required_data": {"legal_limit": "task_0.result", "current": 300000000, "requested": 1000000000},\n            "estimated_time": 25\n        },\n        {\n            "description": "구체적 대응 방안 및 해결책 제시",\n            "type": "analysis",\n            "agent": "analysis_team",\n            "priority": 3,\n            "depends_on": ["task_1"],\n            "estimated_time": 20\n        }\n    ],\n    "execution_mode": "sequential",\n    "confidence": 0.95,\n    "reasoning": "상황 설명+해결책 요청 패턴. \'어떻게 해야\'는 단순 정보 조회가 아닌 종합 해결책 필요. 법률 조회 → 상황 분석 → 해결책 제시 3단계 순차 처리"\n}\n```\n\n## Chain-of-Thought 프로세스:\n\n1. **질문 분석**: 어떤 정보나 작업을 요구하는가?\n2. **연결어 확인**: "그리고", "또한", "해서", "한 후" 등이 있는가?\n3. **의존성 파악**: 어떤 작업이 다른 작업의 결과를 필요로 하는가?\n4. **병렬성 판단**: 독립적으로 실행 가능한 작업이 있는가?\n5. **최적화**: 불필요한 분해는 없는가?\n\n## 응답 형식 (JSON):\n\n{\n    "is_compound": true/false,\n    "sub_tasks": [\n        {\n            "description": "작업 설명",\n            "type": "작업 유형",\n            "agent": "담당 팀",\n            "priority": 우선순위 (1이 가장 높음),\n            "depends_on": ["선행 작업 ID 리스트"],\n            "required_data": {"필요한 데이터 매핑"},\n            "estimated_time": 예상 소요 시간(초),\n            "optional": true/false,\n            "context": {"추가 컨텍스트"}\n        }\n    ],\n    "execution_mode": "sequential/parallel/mixed/conditional",\n    "parallel_groups": [["병렬 실행 가능한 작업 ID 그룹"]],\n    "confidence": 0.0-1.0,\n    "reasoning": "분해 결정의 이유와 근거"\n}\n\n## 분해 가이드라인:\n\n1. **분해가 필요한 경우**:\n   - 여러 종류의 정보를 요청하는 경우\n   - 순차적 처리가 필요한 경우 (A의 결과로 B 수행)\n   - 서로 다른 팀의 전문성이 필요한 경우\n\n2. **분해가 불필요한 경우**:\n   - 단일 정보 조회\n   - 단순한 질문-답변\n   - 하나의 팀에서 완전히 처리 가능한 경우\n\n3. **병렬 처리 기준**:\n   - 서로 독립적인 정보 조회\n   - 의존성이 없는 분석 작업\n   - 동시에 진행해도 충돌하지 않는 작업\n\n4. **우선순위 설정**:\n   - 의존성이 없는 작업: priority 1\n   - 1차 의존 작업: priority 2\n   - 2차 의존 작업: priority 3\n   - 이런 식으로 증가\n\n현재 의도: 시세조회\n추출된 엔티티: None\n\n분석할 질문: 강남구 아파트 시세 확인하고 대출 가능 금액 계산해줘'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 15:58:00,972 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 15:58:00,972 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 15:58:00,972 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 15:58:00,972 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 15:58:00,972 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 15:58:00,973 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 15:58:03,839 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 06:58:03 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'2618'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'2660'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9979'), (b'x-ratelimit-remaining-tokens', b'197331'), (b'x-ratelimit-reset-requests', b'3m0.463s'), (b'x-ratelimit-reset-tokens', b'800ms'), (b'x-request-id', b'req_b6755de2bf0643abb26578ab8fc7f25b'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b0733f8f33091-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 15:58:03,839 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 15:58:03,839 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 15:58:03,848 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 15:58:03,848 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 15:58:03,848 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 15:58:03,849 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 06:58:03 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '2618', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '2660', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9979', 'x-ratelimit-remaining-tokens': '197331', 'x-ratelimit-reset-requests': '3m0.463s', 'x-ratelimit-reset-tokens': '800ms', 'x-request-id': 'req_b6755de2bf0643abb26578ab8fc7f25b', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b0733f8f33091-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 15:58:03,849 - openai._base_client - DEBUG - request_id: req_b6755de2bf0643abb26578ab8fc7f25b
2025-10-05 15:58:03,849 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: query_decomposition | Model: gpt-4o-mini-2024-07-18 | Tokens: 2873 (prompt: 2695, completion: 178)
2025-10-05 15:58:03,849 - app.service_agent.cognitive_agents.query_decomposer - INFO - Successfully decomposed into 2 tasks
2025-10-05 15:58:03,849 - __main__ - INFO -   복합 질문: True
2025-10-05 15:58:03,849 - __main__ - INFO -   작업 수: 2
2025-10-05 15:58:03,849 - __main__ - INFO -   실행 모드: sequential
2025-10-05 15:58:03,849 - __main__ - INFO -     - task_0: 강남구 아파트 시세 조회 (search_team)
2025-10-05 15:58:03,849 - __main__ - INFO -     - task_1: 대출 가능 금액 계산 (analysis_team)
2025-10-05 15:58:03,849 - __main__ - INFO - 
[Step 3] Comprehensive Plan 생성...
2025-10-05 15:58:03,849 - app.service_agent.cognitive_agents.planning_agent - INFO - Creating comprehensive plan for query: 강남구 아파트 시세 확인하고 대출 가능 금액 계산해줘...
2025-10-05 15:58:03,849 - app.service_agent.cognitive_agents.planning_agent - INFO - Analyzing intent for query: 강남구 아파트 시세 확인하고 대출 가능 금액 계산해줘...
2025-10-05 15:58:03,849 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-189f36b1-ddb0-4195-888d-19d79311329e', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 의도 분석 전문가입니다.\n사용자의 질문을 정확히 이해하고, 어떤 종류의 도움이 필요한지 분류해야 합니다.\n\n## Chain-of-Thought 분석 프로세스\n\n질문을 분석할 때 다음 단계를 **순서대로** 따르세요:\n\n### 1단계: 질문 구조 파악\n- 단순 정보 요청인가? (예: "~이 뭐야?", "~알려줘")\n- 상황 설명이 포함되어 있는가? (배경, 현재 상태)\n- 구체적 수치나 데이터가 있는가? (금액, 비율, 기간 등)\n- 문제 해결을 요구하는가? (예: "어떻게 해야 해?", "방법 알려줘")\n\n### 2단계: 요청 유형 판단\n- **정보 확인형**: 사실, 개념, 규정 확인 → 검색만으로 충분\n- **평가/판단형**: "괜찮아?", "적절해?", "문제있어?" → 검색 + 분석 필요\n- **해결책 요청형**: "어떻게?", "방법?", "대처?" → 검색 + 분석 + 제안 필요\n- **비교/선택형**: "A vs B", "어느게 나아?" → 검색 + 분석(비교) 필요\n\n### 3단계: 복잡도 평가\n- **저**: 단일 개념/사실 확인 (예: "전세금 인상률 한도?")\n- **중**: 특정 상황 + 판단 (예: "3억을 5억으로 올려달래. 가능해?")\n- **고**: 복잡한 상황 + 여러 조건 + 해결책 (예: "10년 거주, 3억→10억 요구. 어떻게 해야 해?")\n\n### 4단계: 필요한 처리 결정\n- **검색만**: 정보 확인형 + 저복잡도\n- **검색+분석**: 평가/판단형 OR 중복잡도 OR 수치 비교 포함\n- **종합처리**: 해결책 요청형 OR 고복잡도 OR 여러 조건 동시 고려\n\n### 5단계: 최종 검증\n- 선택한 의도로 사용자 질문에 완전히 답변 가능한가?\n- 단순 정보 제공으로 끝나는가, 아니면 추가 분석/판단이 필요한가?\n- 상황 설명이 있으면서 "해결", "방법", "어떻게" 등이 있으면 → COMPREHENSIVE 고려\n\n## 중요: 복합 질문 처리\n복합적인 질문(여러 의도가 섞인 질문)의 경우, 가장 핵심적인 의도를 파악하되,\nsub_intents 필드에 부가적인 의도들도 함께 기록해주세요.\n\n**특히 주의**:\n- 법률 키워드가 있어도, "해결방법", "어떻게 해야" 같은 표현이 있으면 단순 LEGAL_CONSULT가 아닐 수 있음\n- 구체적 상황(금액, 기간 등) + 해결책 요구 = COMPREHENSIVE 또는 복합 의도로 분류\n\n## 분류 카테고리 설명:\n\n1. **LEGAL_CONSULT (법률상담)**\n   - 설명: 부동산 관련 법률, 권리, 의무에 대한 질문\n   - 예시:\n     * 단순: "전세금 5% 인상이 가능한가요?", "임대차계약 갱신 거부할 수 있나요?"\n     * 복합: "전세금 인상 가능한지 확인하고 법적 근거도 알려주세요"\n   - 키워드: 법, 전세, 임대, 보증금, 계약, 권리, 의무, 갱신, 임차인, 임대인, 법률, 규정, 조항\n   - 필요한 처리: 법률 데이터베이스 검색, 관련 법조항 찾기\n\n2. **MARKET_INQUIRY (시세조회)**\n   - 설명: 부동산 시장 가격, 시세, 거래 동향에 대한 질문\n   - 예시:\n     * 단순: "강남구 아파트 전세 시세 알려주세요", "서초동 매매가 얼마나 올랐나요?"\n     * 복합: "강남구 시세 확인하고 대출 가능 금액도 계산해줘"\n   - 키워드: 시세, 가격, 매매가, 전세가, 월세, 시장, 동향, 평균, 지역명, 상승률, 하락률\n   - 필요한 처리: 부동산 시세 데이터 조회, 지역별 가격 분석\n\n3. **LOAN_CONSULT (대출상담)**\n   - 설명: 주택담보대출, 전세자금대출 등 금융 관련 질문\n   - 예시:\n     * 단순: "전세자금대출 한도가 얼마인가요?", "LTV가 뭔가요?"\n     * 복합: "대출 한도 확인하고 금리 비교도 해주세요"\n   - 키워드: 대출, 금리, 한도, 조건, 상환, LTV, DTI, DSR, 담보, 금융, 은행\n   - 필요한 처리: 대출 상품 조회, 금리 정보 검색, 한도 계산\n\n4. **CONTRACT_CREATION (계약서작성)**\n   - 설명: 새로운 계약서나 문서를 작성해달라는 요청\n   - 예시:\n     * 단순: "임대차계약서 작성해주세요", "전세계약서 초안 만들어주세요"\n     * 복합: "계약서 작성하고 주의사항도 검토해주세요"\n   - 키워드: 작성, 만들, 생성, 초안, 계약서, 문서, 양식\n   - 필요한 처리: 문서 생성 에이전트 호출, 템플릿 기반 작성\n\n5. **CONTRACT_REVIEW (계약서검토)**\n   - 설명: 기존 계약서나 문서를 검토해달라는 요청\n   - 예시:\n     * 단순: "이 계약서 검토해주세요", "특약사항 문제없나요?"\n     * 복합: "계약서 검토하고 수정사항도 제안해주세요"\n   - 키워드: 검토, 확인, 점검, 리뷰, 분석해, 살펴봐, 체크\n   - 필요한 처리: 문서 분석, 위험 요소 식별, 개선사항 제안\n\n6. **COMPREHENSIVE (종합분석)**\n   - 설명: 여러 측면을 종합적으로 분석해달라는 요청, 또는 복잡한 상황에 대한 해결책 요청\n   - 예시:\n     * 단순: "이 물건 전체적으로 분석해주세요"\n     * 복합: "시세, 법률, 대출 모두 검토해서 종합 의견 주세요"\n     * 해결형: "10년 거주했는데 전세금 3억을 10억으로 올려달래. 어떻게 해야 해?"\n     * 상황+해결: "집주인이 계약 갱신 거부했어. 법적으로 어떻게 대응해야 할까?"\n   - 키워드: 종합, 전체, 모든, 전반적, 종합적, 평가, 분석, 어떻게, 방법, 해결, 대처\n   - 패턴: 구체적 상황 설명 + "어떻게/방법/해결" 요청\n   - 필요한 처리: 다중 데이터 소스 통합 분석, 상황 평가, 해결책 제시\n\n7. **RISK_ANALYSIS (리스크분석)**\n   - 설명: 위험 요소나 주의사항에 대한 질문\n   - 예시:\n     * 단순: "이 계약 위험한가요?", "주의할 점 알려주세요"\n     * 복합: "리스크 분석하고 대안도 제시해주세요"\n   - 키워드: 위험, 리스크, 주의, 문제점, 조심, 걱정, 우려\n   - 필요한 처리: 위험 요소 분석, 주의사항 추출\n\n8. **UNCLEAR (불분명)**\n   - 설명: 의도를 명확히 파악하기 어려운 질문\n   - 예시: "이거 좀 봐주세요", "어떻게 해야 할까요?", "도와주세요"\n   - 처리: 추가 질문으로 의도 명확화 필요\n\n9. **IRRELEVANT (무관)**\n   - 설명: 부동산과 전혀 관련 없는 질문\n   - 예시: "날씨 어때?", "저녁 뭐 먹지?", "주식 추천해줘"\n   - 처리: 부동산 관련 질문을 유도\n\n## 복합 질문 예시와 분석 (CoT 적용):\n\n### 예시 1: "강남구 아파트 시세 알려주고 전세자금대출 가능한지도 확인해줘"\n**CoT 분석**:\n1. 구조: 두 개의 요청 ("시세" + "대출")\n2. 유형: 정보 확인형 (둘 다)\n3. 복잡도: 중 (두 가지 독립적 조회)\n4. 필요 처리: 검색 + 계산/분석\n\n**결론**:\n- 주 의도: MARKET_INQUIRY (시세 조회가 먼저 필요)\n- 부가 의도: LOAN_CONSULT (대출 확인)\n- 분해: ["강남구 아파트 시세 조회", "전세자금대출 가능 여부 확인"]\n\n### 예시 2: "이 계약서 검토해서 위험한 부분 있는지 알려주고 수정 제안도 해줘"\n**CoT 분석**:\n1. 구조: 검토 + 위험 평가 + 수정안\n2. 유형: 평가/판단형 + 해결책 요청형\n3. 복잡도: 고 (3단계 처리)\n4. 필요 처리: 검토 + 분석 + 문서 생성\n\n**결론**:\n- 주 의도: CONTRACT_REVIEW (계약서 검토)\n- 부가 의도: RISK_ANALYSIS (위험 분석)\n- 분해: ["계약서 전체 검토", "위험 요소 식별", "수정사항 제안"]\n\n### 예시 3: "집주인이 짜증나, 10년 살았는데 전세금 3억을 10억으로 올려달래. 법적으로 해결방법 알려줘"\n**CoT 분석**:\n1. 구조: 상황 설명 (10년 거주, 3억→10억) + 해결책 요청\n2. 유형: 해결책 요청형 (단순 정보 X)\n3. 복잡도: 고 (구체적 상황 + 수치 비교 + 법률 + 대응방안)\n4. 필요 처리: 법률 검색 + 상황 분석 + 해결책 제시\n\n**결론**:\n- 주 의도: COMPREHENSIVE (복잡한 상황에 대한 종합 해결)\n- 부가 의도: LEGAL_CONSULT, RISK_ANALYSIS\n- 분해: ["전세금 인상 한도 법률 조회", "3억→10억 인상의 타당성 분석", "구체적 대응 방안 제시"]\n- **이유**: "법적으로"라는 키워드가 있지만, 단순 법률 확인이 아니라 구체적 상황에 대한 해결책을 요구하므로 COMPREHENSIVE\n\n### 예시 4: "전세금 인상률 상한이 얼마야?"\n**CoT 분석**:\n1. 구조: 단순 사실 확인\n2. 유형: 정보 확인형\n3. 복잡도: 저 (단일 개념)\n4. 필요 처리: 검색만\n\n**결론**:\n- 주 의도: LEGAL_CONSULT (법률 정보 조회)\n- 부가 의도: 없음\n- 분해: 필요 없음\n\n## 응답 형식 (JSON 형식으로 응답):\n\n```json\n{\n    "intent": "LEGAL_CONSULT",\n    "confidence": 0.9,\n    "keywords": ["전세금", "인상", "제한"],\n    "sub_intents": [],\n    "is_compound": false,\n    "decomposed_tasks": [],\n    "entities": {\n        "location": "강남구",\n        "price": "5억",\n        "contract_type": "전세",\n        "date": "2024년",\n        "area": "84㎡",\n        "action_verbs": ["확인", "검토"]\n    },\n    "reasoning": "전세금 인상에 대한 법률 질문이므로 LEGAL_CONSULT로 분류"\n}\n```\n\n응답 규칙:\n- intent: 위 9개 카테고리 중 하나 (대문자_언더스코어 형식)\n- confidence: 0.0~1.0 (0.8 이상이면 매우 확실, 0.5 미만이면 불확실)\n- keywords: 추출된 주요 키워드 목록\n- sub_intents: 복합 질문일 경우 부가적인 의도들\n- is_compound: 복합 질문 여부 (true/false)\n- decomposed_tasks: 복합 질문을 분해한 개별 작업들\n- entities: 추출된 엔티티 정보\n- reasoning: **반드시 CoT 5단계를 거쳐 분석한 과정을 포함** (구조 파악 → 유형 판단 → 복잡도 평가 → 필요 처리 → 최종 검증)\n\n## reasoning 작성 예시:\n"1단계(구조): 상황 설명(10년 거주, 3억→10억) + 해결책 요청 포함.\n2단계(유형): 해결책 요청형 - 단순 정보가 아닌 대응방안 필요.\n3단계(복잡도): 고 - 구체적 수치 비교와 복잡한 상황.\n4단계(처리): 법률 검색 + 상황 분석 + 해결책 제시 필요.\n5단계(검증): LEGAL_CONSULT만으로는 불충분, 종합적 분석 필요 → COMPREHENSIVE 선택"\n\n## 판단 가이드:\n- 여러 의도가 섞여있다면, 가장 주된 의도를 intent에, 나머지를 sub_intents에 기록\n- "그리고", "또한", "함께", "같이" 등의 연결어가 있으면 복합 질문일 가능성 높음\n- 법률 관련 키워드가 있으면 LEGAL_CONSULT 우선\n- 가격/시세 언급이 명확하면 MARKET_INQUIRY\n- 계약서라는 단어와 함께 "작성/만들기"가 있으면 CONTRACT_CREATION\n- 계약서라는 단어와 함께 "검토/확인"이 있으면 CONTRACT_REVIEW\n- 불확실하면 confidence를 낮게 설정하고 UNCLEAR 선택\n- 복합 질문은 is_compound를 true로 설정하고 개별 작업으로 분해\n\n분석할 질문: 강남구 아파트 시세 확인하고 대출 가능 금액 계산해줘'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 15:58:03,850 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 15:58:03,850 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 15:58:03,850 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 15:58:03,850 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 15:58:03,851 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 15:58:03,851 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 15:58:07,380 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 06:58:07 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'3317'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'3344'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9978'), (b'x-ratelimit-remaining-tokens', b'197236'), (b'x-ratelimit-reset-requests', b'3m6.239s'), (b'x-ratelimit-reset-tokens', b'828ms'), (b'x-request-id', b'req_9ef947114eaf4123989bc8e96542af18'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b0745ed203091-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 15:58:07,380 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 15:58:07,380 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 15:58:07,385 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 15:58:07,385 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 15:58:07,386 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 15:58:07,386 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 06:58:07 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '3317', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '3344', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9978', 'x-ratelimit-remaining-tokens': '197236', 'x-ratelimit-reset-requests': '3m6.239s', 'x-ratelimit-reset-tokens': '828ms', 'x-request-id': 'req_9ef947114eaf4123989bc8e96542af18', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b0745ed203091-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 15:58:07,386 - openai._base_client - DEBUG - request_id: req_9ef947114eaf4123989bc8e96542af18
2025-10-05 15:58:07,386 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: intent_analysis | Model: gpt-4o-mini-2024-07-18 | Tokens: 3435 (prompt: 3186, completion: 249)
2025-10-05 15:58:07,386 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM Intent Analysis Result: {'intent': 'MARKET_INQUIRY', 'confidence': 0.85, 'keywords': ['강남구', '아파트', '시세', '대출', '가능 금액'], 'sub_intents': ['LOAN_CONSULT'], 'is_compound': True, 'decomposed_tasks': ['강남구 아파트 시세 조회', '대출 가능 금액 계산'], 'entities': {'location': '강남구', 'property_type': '아파트', 'action_verbs': ['확인', '계산']}, 'reasoning': '1단계(구조): 두 개의 요청(시세 확인 + 대출 가능 금액 계산) 포함. 2단계(유형): 정보 확인형(시세) + 대출 관련 정보 요청. 3단계(복잡도): 중 - 두 가지 독립적 조회 필요. 4단계(처리): 시세 조회와 대출 가능 금액 계산을 위한 검색 필요. 5단계(검증): 두 가지 요청이 있으므로 복합 질문으로 분류.'}
2025-10-05 15:58:07,387 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-ba386dd3-cc87-41a0-895d-bca9ba89eff8', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 Agent 선택 전문가입니다.\n사용자의 요청에 가장 적합한 Agent/Team을 선택하는 것이 목표입니다.\n\n## 현재 상황\n\n**사용자 질문:** 강남구 아파트 시세 확인하고 대출 가능 금액 계산해줘\n**분석된 의도:** 시세조회\n**추출된 키워드:** [\'강남구\', \'아파트\', \'시세\', \'대출\', \'가능 금액\']\n\n## 사용 가능한 Agent/Team 정보\n\n{\'search_team\': {\'name\': \'search_team\', \'capabilities\': \'법률 검색, 부동산 시세 조회, 대출 상품 검색\', \'tools\': [\'legal_search\', \'market_data\', \'loan_data\'], \'use_cases\': [\'법률 상담\', \'시세 조회\', \'대출 정보\']}, \'analysis_team\': {\'name\': \'analysis_team\', \'capabilities\': \'데이터 분석, 리스크 평가, 인사이트 생성, 추천\', \'tools\': [\'data_analyzer\', \'risk_evaluator\'], \'use_cases\': [\'시장 분석\', \'리스크 평가\', \'투자 분석\']}, \'document_team\': {\'name\': \'document_team\', \'capabilities\': \'계약서 작성, 문서 생성, 문서 검토\', \'tools\': [\'document_generator\', \'contract_reviewer\'], \'use_cases\': [\'계약서 작성\', \'문서 검토\']}}\n\n## Agent 역할 및 상세 가이드\n\n### 1. search_team (검색 팀)\n- **주요 기능**: 정보 검색 및 데이터 수집\n- **전문 분야**:\n  * 법률 정보 검색 (전세법, 임대차보호법, 부동산 관련 법규)\n  * 부동산 시세 조회 (매매가, 전세가, 월세, 실거래가)\n  * 대출 상품 정보 검색 (금리, 한도, 조건)\n  * 지역 정보 및 인프라 조회\n- **도구**: legal_search, market_data, loan_data\n- **적합한 작업**: 정보 조회, 데이터 수집, 법률 확인, 시세 파악\n- **예시**:\n  * "전세금 5% 인상 가능한가요?"\n  * "강남구 아파트 전세 시세"\n  * "전세자금대출 한도 얼마?"\n\n### 2. analysis_team (분석 팀)\n- **주요 기능**: 데이터 분석 및 평가\n- **전문 분야**:\n  * 시장 동향 분석 (상승률, 하락률, 추세)\n  * 리스크 평가 (계약, 투자 위험도)\n  * 투자 수익률 계산 (ROI, 월세 수익률)\n  * 대출 한도 및 조건 분석 (LTV, DTI, DSR)\n  * 비교 분석 (지역별, 상품별)\n- **도구**: data_analyzer, risk_evaluator, calculator\n- **적합한 작업**: 데이터 분석, 리스크 평가, 계산, 비교, 예측\n- **의존성**: 보통 search_team의 데이터가 필요\n- **예시**:\n  * "이 지역 투자 가치 분석해줘"\n  * "계약 리스크 평가해줘"\n  * "대출 가능 금액 계산해줘"\n\n### 3. document_team (문서 팀)\n- **주요 기능**: 문서 생성 및 관리\n- **전문 분야**:\n  * 계약서 작성 (임대차, 매매, 전세)\n  * 문서 템플릿 관리\n  * 특약사항 생성\n  * 계약서 수정안 작성\n  * 법률 문서 검토\n- **도구**: document_generator, contract_template, contract_reviewer\n- **적합한 작업**: 문서 작성, 계약서 생성, 문서 수정, 검토\n- **예시**:\n  * "임대차계약서 작성해줘"\n  * "특약사항 추가해줘"\n  * "계약서 수정안 만들어줘"\n\n## Chain-of-Thought Agent 선택 프로세스\n\n다음 단계를 **순서대로** 따라 최적의 Agent 조합을 선택하세요:\n\n### 1단계: 질문 요구사항 파악\n- 단순 정보 조회인가? → search_team만 필요\n- 판단/평가가 필요한가? → search + analysis 필요\n- 해결책 제시가 필요한가? → search + analysis 필요\n- 문서 생성이 필요한가? → document_team 추가\n\n### 2단계: 작업 복잡도 판단\n- **단순** (검색만): "~이 뭐야?", "~알려줘" → search_team\n- **중간** (검색+판단): "~괜찮아?", "~적절해?" → search + analysis\n- **복잡** (종합 해결): 구체적 상황 + "어떻게 해야 해?" → search + analysis\n\n### 3단계: 의존성 분석\n- 독립적 작업: 단일 팀으로 처리 가능\n- 순차적 의존: 이전 결과 필요 → 여러 팀 순서대로\n- 병렬 가능: 동시 조회 가능 → coordination: "parallel"\n\n### 4단계: 최종 검증\n- 선택한 팀들로 질문에 완전히 답변 가능한가?\n- 불필요한 팀이 포함되지 않았는가?\n- 순서가 논리적인가? (데이터 흐름 고려)\n\n### 중요 원칙:\n- **법률 키워드만으로 판단하지 말 것**: "법적으로 어떻게 해야 해?" = 법률 검색 + 분석 필요\n- **상황 설명 + 해결책 요청** = 반드시 analysis_team 포함\n- **구체적 수치 비교** (3억→10억 같은) = analysis_team 필요\n\n## 의도별 Agent 매핑 가이드 (기본 가이드 - CoT로 조정 가능)\n\n| 의도 (Intent) | 기본 조합 | 상황별 조정 |\n|--------------|-----------|-------------|\n| LEGAL_CONSULT | ["search_team"] | 해결책 요청시 → + analysis_team |\n| MARKET_INQUIRY | ["search_team"] | 비교/평가시 → + analysis_team |\n| LOAN_CONSULT | ["search_team", "analysis_team"] | 계산 필수 |\n| CONTRACT_CREATION | ["document_team"] | 검토 후 작성 → search + document |\n| CONTRACT_REVIEW | ["search_team", "analysis_team"] | 법률 검토 + 리스크 분석 |\n| COMPREHENSIVE | ["search_team", "analysis_team"] | **항상 분석 포함** |\n| RISK_ANALYSIS | ["analysis_team"] | 법률 근거 필요시 → search + analysis |\n| UNCLEAR | ["search_team", "analysis_team"] | 포괄적 대응 |\n\n**중요**: 위 매핑은 **기본 가이드**일 뿐입니다.\n실제 질문의 내용(CoT 분석 결과)에 따라 조정하세요!\n\n## 복합 질문 처리 예시 (CoT 적용)\n\n### 예시 1: 순차적 처리\n질문: "강남구 시세 확인하고 투자 가치 분석해줘"\n**CoT 분석**:\n1. 요구사항: 시세 조회 + 투자 가치 평가\n2. 복잡도: 중간 (검색 + 분석)\n3. 의존성: 시세 데이터 → 투자 분석 (순차)\n4. 검증: search만으로는 "투자 가치 평가" 불가능\n\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "1단계: 시세 조회+투자 평가 필요. 2단계: 중간 복잡도. 3단계: 순차 의존. 4단계: search로 시세 수집 후 analysis로 투자 가치 평가 필요",\n    "coordination": "sequential"\n}\n```\n\n### 예시 2: 단순 정보 조회\n질문: "전세금 인상률 한도가 얼마야?"\n**CoT 분석**:\n1. 요구사항: 단순 사실 확인\n2. 복잡도: 낮음 (정보 확인형)\n3. 의존성: 없음\n4. 검증: search_team만으로 충분\n\n```json\n{\n    "selected_agents": ["search_team"],\n    "reasoning": "1단계: 단순 정보 조회. 2단계: 저복잡도. 3단계: 독립적. 4단계: 법률 검색만으로 답변 가능",\n    "coordination": "single"\n}\n```\n\n### 예시 3: 해결책 요청 (핵심 예시!)\n질문: "집주인이 전세금 3억을 10억으로 올려달래. 법적으로 어떻게 해야 해?"\n의도: COMPREHENSIVE\n**CoT 분석**:\n1. 요구사항: 상황 설명 + 해결책 요청\n2. 복잡도: 높음 (구체적 상황 + 수치 비교)\n3. 의존성: 법률 확인 → 상황 분석 → 해결책 제시\n4. 검증: "법적으로"만 보고 search만 선택하면 불충분! 해결책 제시 필요\n\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "1단계: 법률 + 상황 분석 + 해결책 필요. 2단계: 고복잡도(3억→10억 비정상). 3단계: 순차(법률 확인 후 타당성 분석). 4단계: \'어떻게 해야\' = 단순 법률 조회 아님, 분석 필수",\n    "coordination": "sequential",\n    "confidence": 0.95\n}\n```\n\n## 응답 형식 (JSON)\n\n```json\n{\n    "selected_agents": ["선택된 agent/team 목록"],\n    "reasoning": "선택 이유를 구체적으로 설명. 각 Agent의 역할과 처리 순서 포함",\n    "coordination": "single/sequential/parallel/pipeline",\n    "dependencies": {"agent2": ["agent1"]},\n    "estimated_time": 30,\n    "confidence": 0.9\n}\n```\n\n## 선택 가이드라인\n\n1. **최소 Agent 원칙**: 가능한 적은 수의 Agent로 처리\n2. **전문성 우선**: 해당 작업에 가장 전문적인 Agent 선택\n3. **효율성 고려**: 병렬 처리 가능한 경우 명시\n4. **의존성 관리**: 데이터 흐름을 고려한 순서 지정\n5. **폴백 전략**: 불확실한 경우 ["search_team", "analysis_team"] 조합\n\n## 주의사항\n\n- selected_agents는 반드시 배열 형태\n- Agent 이름은 정확히: "search_team", "analysis_team", "document_team"\n- 최소 1개, 최대 3개 선택\n- 순서는 실행 우선순위 (앞에 있을수록 먼저 실행)\n- reasoning은 상세하고 논리적으로 작성\n- coordination 필드로 실행 방식 명시\n- 복합 질문의 경우 의존성 관계 명확히 표시'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 15:58:07,387 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 15:58:07,387 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 15:58:07,388 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 15:58:07,388 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 15:58:07,388 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 15:58:07,388 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 15:58:14,618 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 06:58:14 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'6995'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'7023'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9977'), (b'x-ratelimit-remaining-tokens', b'197877'), (b'x-ratelimit-reset-requests', b'3m11.33s'), (b'x-ratelimit-reset-tokens', b'636ms'), (b'x-request-id', b'req_60a32c625250474eaefd5d7f52b29ed4'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b075c0cb33091-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 15:58:14,618 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 15:58:14,619 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 15:58:14,619 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 15:58:14,619 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 15:58:14,619 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 15:58:14,619 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 06:58:14 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '6995', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '7023', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9977', 'x-ratelimit-remaining-tokens': '197877', 'x-ratelimit-reset-requests': '3m11.33s', 'x-ratelimit-reset-tokens': '636ms', 'x-request-id': 'req_60a32c625250474eaefd5d7f52b29ed4', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b075c0cb33091-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 15:58:14,619 - openai._base_client - DEBUG - request_id: req_60a32c625250474eaefd5d7f52b29ed4
2025-10-05 15:58:14,619 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: agent_selection | Model: gpt-4o-mini-2024-07-18 | Tokens: 2538 (prompt: 2371, completion: 167)
2025-10-05 15:58:14,619 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM agent selection reasoning: 1단계: 강남구 아파트 시세 조회와 대출 가능 금액 계산이 필요. 2단계: 시세 조회와 대출 계산은 중간 복잡도로, 두 가지 작업이 필요하다. 3단계: 시세 데이터가 대출 가능 금액 계산에 필요하므로 순차적 의존성이 있다. 4단계: search_team이 시세를 조회한 후, analysis_team이 대출 가능 금액을 계산하는 방식으로 진행해야 한다.
2025-10-05 15:58:14,619 - app.service_agent.cognitive_agents.planning_agent - INFO - ✅ Primary LLM selected agents: ['search_team', 'analysis_team']
2025-10-05 15:58:14,619 - app.service_agent.cognitive_agents.planning_agent - INFO - Intent analyzed: 시세조회 (confidence: 0.85)
2025-10-05 15:58:14,619 - app.service_agent.cognitive_agents.query_decomposer - INFO - Decomposing query: 강남구 아파트 시세 확인하고 대출 가능 금액 계산해줘...
2025-10-05 15:58:14,620 - app.service_agent.llm_manager.prompt_manager - DEBUG - Loaded prompt template: query_decomposition from C:\kdy\Projects\holmesnyangz\beta_v001\backend\app\service_agent\llm_manager\prompts\cognitive\query_decomposition.txt
2025-10-05 15:58:14,620 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-61ed77d6-8c33-470d-a16e-11f6ec67b0f7', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 질문 분해 전문가입니다.\n복잡한 사용자 질문을 독립적으로 처리 가능한 작업 단위로 분해하는 것이 목표입니다.\n\n## Chain-of-Thought 분해 프로세스:\n\n### 1단계: 복합 질문 여부 판단\n- 단순 정보 조회만 필요한가? → is_compound: false\n- **다음 중 하나라도 해당하면 is_compound: true**:\n  * "그리고", "그 다음", "한 후" 같은 연결어로 여러 요청 연결\n  * 명시적으로 2개 이상의 작업 요청 (예: "시세 확인하고 대출 계산해줘")\n  * 상황 설명 + 해결책 요청 (예: "3억→10억 올려달래. 어떻게 해야 해?")\n  * 해결책을 위해 여러 단계 처리 필요 (검색 → 분석 → 제안)\n\n### 2단계: 필요 작업 식별\n- 정보 수집이 필요한가? → search 작업\n- 평가/판단이 필요한가? → analysis 작업\n- 문서 생성이 필요한가? → generation 작업\n- **해결책 요청**인가? → search + analysis (최소 2개)\n\n### 3단계: 작업 순서 결정\n- 독립적 작업: 병렬 가능\n- 이전 결과 필요: 순차 실행 (depends_on 설정)\n\n## 중요 원칙:\n1. 각 작업은 하나의 명확한 목표를 가져야 합니다\n2. 작업 간 의존성을 명확히 파악해야 합니다\n3. 병렬 처리 가능한 작업은 구분해야 합니다\n4. **주의**: "어떻게 해야", "방법 알려줘" 같은 해결책 요청은 복합 질문!\n\n## 작업 유형 (type):\n- search: 정보 검색 (법률, 시세, 대출 정보 등)\n- analysis: 데이터 분석 (리스크 평가, 시장 분석 등)\n- generation: 문서 생성 (계약서 작성 등)\n- review: 검토/평가 (계약서 검토, 조건 확인 등)\n- calculation: 계산/산출 (대출 한도, 세금 등)\n- comparison: 비교 분석 (여러 옵션 비교)\n\n## 담당 팀 (agent):\n- search_team: 법률, 시세, 대출 정보 검색\n- analysis_team: 데이터 분석, 리스크 평가, 계산\n- document_team: 문서 생성, 계약서 작성\n\n## 학습 예시:\n\n### 예시 1: 복합 질문 (순차적)\n질문: "강남구 아파트 시세 확인하고 대출 가능 금액 계산해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "강남구 아파트 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "대출 가능 금액 계산",\n            "type": "calculation",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "required_data": {"price": "task_0.result.price"},\n            "estimated_time": 15\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "시세 정보가 있어야 대출 금액 계산이 가능하므로 순차 실행"\n}\n```\n\n### 예시 2: 복합 질문 (병렬 가능)\n질문: "이 지역 전세 시세와 매매 시세 모두 알려주고 비교 분석해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "전세 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "매매 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "전세/매매 시세 비교 분석",\n            "type": "comparison",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0", "task_1"],\n            "required_data": {\n                "lease_price": "task_0.result",\n                "sale_price": "task_1.result"\n            },\n            "estimated_time": 25\n        }\n    ],\n    "execution_mode": "mixed",\n    "parallel_groups": [["task_0", "task_1"], ["task_2"]],\n    "reasoning": "시세 조회는 독립적이므로 병렬 처리, 비교는 두 결과 필요"\n}\n```\n\n### 예시 3: 복합 질문 (3단계 이상)\n질문: "이 계약서 검토해서 위험한 부분 찾고 수정안 만들어서 최종 계약서 작성해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "계약서 내용 전체 검토",\n            "type": "review",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 30\n        },\n        {\n            "description": "위험 요소 및 문제점 분석",\n            "type": "analysis",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "estimated_time": 25\n        },\n        {\n            "description": "수정안 제안 생성",\n            "type": "generation",\n            "agent": "document_team",\n            "priority": 3,\n            "depends_on": ["task_1"],\n            "estimated_time": 20\n        },\n        {\n            "description": "최종 계약서 작성",\n            "type": "generation",\n            "agent": "document_team",\n            "priority": 4,\n            "depends_on": ["task_2"],\n            "estimated_time": 30\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "각 단계가 이전 결과에 의존하므로 순차 실행 필요"\n}\n```\n\n### 예시 4: 단순 질문 (분해 불필요)\n질문: "전세금 인상률 상한이 얼마야?"\n분해:\n```json\n{\n    "is_compound": false,\n    "sub_tasks": [\n        {\n            "description": "전세금 인상률 상한 법률 정보 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 15\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "단일 정보 조회 요청으로 분해 불필요"\n}\n```\n\n### 예시 5: 조건부 실행\n질문: "이 물건 시세 확인하고 적정가면 대출 상담도 받고 싶어"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "물건 시세 조회 및 적정성 평가",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 25\n        },\n        {\n            "description": "대출 상담 정보 제공",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "optional": true,\n            "context": {"condition": "if_reasonable_price"},\n            "estimated_time": 20\n        }\n    ],\n    "execution_mode": "conditional",\n    "reasoning": "시세 확인 결과에 따라 대출 상담 진행 여부 결정"\n}\n```\n\n### 예시 6: 상황 설명 + 해결책 요청 (핵심 패턴!)\n질문: "집주인이 전세금 3억을 10억으로 올려달래. 법적으로 어떻게 해야 해?"\n**CoT 분석**:\n1. 질문 분석: 상황 설명 + 해결책 요청\n2. 연결어: 없지만, "어떻게 해야" = 해결책 요청\n3. 의존성: 법률 확인 → 상황 분석 → 대응 방안\n4. 복합 여부: **YES** (해결책을 위해 여러 단계 필요)\n\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "전세금 인상 한도 관련 법률 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "3억→10억 인상의 법적 타당성 및 적정성 분석",\n            "type": "analysis",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "required_data": {"legal_limit": "task_0.result", "current": 300000000, "requested": 1000000000},\n            "estimated_time": 25\n        },\n        {\n            "description": "구체적 대응 방안 및 해결책 제시",\n            "type": "analysis",\n            "agent": "analysis_team",\n            "priority": 3,\n            "depends_on": ["task_1"],\n            "estimated_time": 20\n        }\n    ],\n    "execution_mode": "sequential",\n    "confidence": 0.95,\n    "reasoning": "상황 설명+해결책 요청 패턴. \'어떻게 해야\'는 단순 정보 조회가 아닌 종합 해결책 필요. 법률 조회 → 상황 분석 → 해결책 제시 3단계 순차 처리"\n}\n```\n\n## Chain-of-Thought 프로세스:\n\n1. **질문 분석**: 어떤 정보나 작업을 요구하는가?\n2. **연결어 확인**: "그리고", "또한", "해서", "한 후" 등이 있는가?\n3. **의존성 파악**: 어떤 작업이 다른 작업의 결과를 필요로 하는가?\n4. **병렬성 판단**: 독립적으로 실행 가능한 작업이 있는가?\n5. **최적화**: 불필요한 분해는 없는가?\n\n## 응답 형식 (JSON):\n\n{\n    "is_compound": true/false,\n    "sub_tasks": [\n        {\n            "description": "작업 설명",\n            "type": "작업 유형",\n            "agent": "담당 팀",\n            "priority": 우선순위 (1이 가장 높음),\n            "depends_on": ["선행 작업 ID 리스트"],\n            "required_data": {"필요한 데이터 매핑"},\n            "estimated_time": 예상 소요 시간(초),\n            "optional": true/false,\n            "context": {"추가 컨텍스트"}\n        }\n    ],\n    "execution_mode": "sequential/parallel/mixed/conditional",\n    "parallel_groups": [["병렬 실행 가능한 작업 ID 그룹"]],\n    "confidence": 0.0-1.0,\n    "reasoning": "분해 결정의 이유와 근거"\n}\n\n## 분해 가이드라인:\n\n1. **분해가 필요한 경우**:\n   - 여러 종류의 정보를 요청하는 경우\n   - 순차적 처리가 필요한 경우 (A의 결과로 B 수행)\n   - 서로 다른 팀의 전문성이 필요한 경우\n\n2. **분해가 불필요한 경우**:\n   - 단일 정보 조회\n   - 단순한 질문-답변\n   - 하나의 팀에서 완전히 처리 가능한 경우\n\n3. **병렬 처리 기준**:\n   - 서로 독립적인 정보 조회\n   - 의존성이 없는 분석 작업\n   - 동시에 진행해도 충돌하지 않는 작업\n\n4. **우선순위 설정**:\n   - 의존성이 없는 작업: priority 1\n   - 1차 의존 작업: priority 2\n   - 2차 의존 작업: priority 3\n   - 이런 식으로 증가\n\n현재 의도: 시세조회\n추출된 엔티티: {\'location\': \'강남구\', \'property_type\': \'아파트\', \'action_verbs\': [\'확인\', \'계산\']}\n\n분석할 질문: 강남구 아파트 시세 확인하고 대출 가능 금액 계산해줘'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 15:58:14,621 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 15:58:14,621 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 15:58:14,621 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 15:58:14,621 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 15:58:14,621 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 15:58:14,622 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 15:58:19,852 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 06:58:19 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'4993'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'5009'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9977'), (b'x-ratelimit-remaining-tokens', b'197309'), (b'x-ratelimit-reset-requests', b'3m12.749s'), (b'x-ratelimit-reset-tokens', b'807ms'), (b'x-request-id', b'req_e5de4a899b404abab9cc00d340cc5c59'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b07893df83091-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 15:58:19,852 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 15:58:19,852 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 15:58:19,852 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 15:58:19,852 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 15:58:19,852 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 15:58:19,852 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 06:58:19 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '4993', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '5009', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9977', 'x-ratelimit-remaining-tokens': '197309', 'x-ratelimit-reset-requests': '3m12.749s', 'x-ratelimit-reset-tokens': '807ms', 'x-request-id': 'req_e5de4a899b404abab9cc00d340cc5c59', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b07893df83091-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 15:58:19,852 - openai._base_client - DEBUG - request_id: req_e5de4a899b404abab9cc00d340cc5c59
2025-10-05 15:58:19,852 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: query_decomposition | Model: gpt-4o-mini-2024-07-18 | Tokens: 2901 (prompt: 2723, completion: 178)
2025-10-05 15:58:19,853 - app.service_agent.cognitive_agents.query_decomposer - INFO - Successfully decomposed into 2 tasks
2025-10-05 15:58:19,853 - app.service_agent.cognitive_agents.planning_agent - INFO - Query decomposed into 2 tasks
2025-10-05 15:58:19,853 - app.service_agent.cognitive_agents.planning_agent - WARNING - Plan validation errors: ["Agent 'search_team' not found in registry", "Agent 'analysis_team' depends on missing 'task_0'", "Agent 'analysis_team' not found in registry"]
2025-10-05 15:58:19,853 - app.service_agent.cognitive_agents.planning_agent - INFO - Optimizing execution plan
2025-10-05 15:58:19,853 - app.service_agent.cognitive_agents.planning_agent - INFO - Comprehensive plan created: Intent: 시세조회 (confidence: 0.85) | Strategy: sequential | Agents: search_team, analysis_team | Estimated time: 35.0s
2025-10-05 15:58:19,853 - __main__ - INFO -   전략: sequential
2025-10-05 15:58:19,853 - __main__ - INFO -   단계 수: 2
2025-10-05 15:58:19,853 - __main__ - INFO - 
✓ 테스트 성공 (소요시간: 26.81초)
2025-10-05 15:58:19,853 - __main__ - INFO - 
================================================================================
2025-10-05 15:58:19,853 - __main__ - INFO - [22] 복합 질문 테스트: D002
2025-10-05 15:58:19,853 - __main__ - INFO - 질문: 서초동 전세 시세 알려주고 법적 주의사항도 알려줘
2025-10-05 15:58:19,853 - __main__ - INFO - ================================================================================
2025-10-05 15:58:19,853 - __main__ - INFO - 
[Step 1] Intent 분석...
2025-10-05 15:58:19,853 - app.service_agent.cognitive_agents.planning_agent - INFO - Analyzing intent for query: 서초동 전세 시세 알려주고 법적 주의사항도 알려줘...
2025-10-05 15:58:19,853 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-339bcdc0-656e-43d4-aef1-f1f2f85f5ead', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 의도 분석 전문가입니다.\n사용자의 질문을 정확히 이해하고, 어떤 종류의 도움이 필요한지 분류해야 합니다.\n\n## Chain-of-Thought 분석 프로세스\n\n질문을 분석할 때 다음 단계를 **순서대로** 따르세요:\n\n### 1단계: 질문 구조 파악\n- 단순 정보 요청인가? (예: "~이 뭐야?", "~알려줘")\n- 상황 설명이 포함되어 있는가? (배경, 현재 상태)\n- 구체적 수치나 데이터가 있는가? (금액, 비율, 기간 등)\n- 문제 해결을 요구하는가? (예: "어떻게 해야 해?", "방법 알려줘")\n\n### 2단계: 요청 유형 판단\n- **정보 확인형**: 사실, 개념, 규정 확인 → 검색만으로 충분\n- **평가/판단형**: "괜찮아?", "적절해?", "문제있어?" → 검색 + 분석 필요\n- **해결책 요청형**: "어떻게?", "방법?", "대처?" → 검색 + 분석 + 제안 필요\n- **비교/선택형**: "A vs B", "어느게 나아?" → 검색 + 분석(비교) 필요\n\n### 3단계: 복잡도 평가\n- **저**: 단일 개념/사실 확인 (예: "전세금 인상률 한도?")\n- **중**: 특정 상황 + 판단 (예: "3억을 5억으로 올려달래. 가능해?")\n- **고**: 복잡한 상황 + 여러 조건 + 해결책 (예: "10년 거주, 3억→10억 요구. 어떻게 해야 해?")\n\n### 4단계: 필요한 처리 결정\n- **검색만**: 정보 확인형 + 저복잡도\n- **검색+분석**: 평가/판단형 OR 중복잡도 OR 수치 비교 포함\n- **종합처리**: 해결책 요청형 OR 고복잡도 OR 여러 조건 동시 고려\n\n### 5단계: 최종 검증\n- 선택한 의도로 사용자 질문에 완전히 답변 가능한가?\n- 단순 정보 제공으로 끝나는가, 아니면 추가 분석/판단이 필요한가?\n- 상황 설명이 있으면서 "해결", "방법", "어떻게" 등이 있으면 → COMPREHENSIVE 고려\n\n## 중요: 복합 질문 처리\n복합적인 질문(여러 의도가 섞인 질문)의 경우, 가장 핵심적인 의도를 파악하되,\nsub_intents 필드에 부가적인 의도들도 함께 기록해주세요.\n\n**특히 주의**:\n- 법률 키워드가 있어도, "해결방법", "어떻게 해야" 같은 표현이 있으면 단순 LEGAL_CONSULT가 아닐 수 있음\n- 구체적 상황(금액, 기간 등) + 해결책 요구 = COMPREHENSIVE 또는 복합 의도로 분류\n\n## 분류 카테고리 설명:\n\n1. **LEGAL_CONSULT (법률상담)**\n   - 설명: 부동산 관련 법률, 권리, 의무에 대한 질문\n   - 예시:\n     * 단순: "전세금 5% 인상이 가능한가요?", "임대차계약 갱신 거부할 수 있나요?"\n     * 복합: "전세금 인상 가능한지 확인하고 법적 근거도 알려주세요"\n   - 키워드: 법, 전세, 임대, 보증금, 계약, 권리, 의무, 갱신, 임차인, 임대인, 법률, 규정, 조항\n   - 필요한 처리: 법률 데이터베이스 검색, 관련 법조항 찾기\n\n2. **MARKET_INQUIRY (시세조회)**\n   - 설명: 부동산 시장 가격, 시세, 거래 동향에 대한 질문\n   - 예시:\n     * 단순: "강남구 아파트 전세 시세 알려주세요", "서초동 매매가 얼마나 올랐나요?"\n     * 복합: "강남구 시세 확인하고 대출 가능 금액도 계산해줘"\n   - 키워드: 시세, 가격, 매매가, 전세가, 월세, 시장, 동향, 평균, 지역명, 상승률, 하락률\n   - 필요한 처리: 부동산 시세 데이터 조회, 지역별 가격 분석\n\n3. **LOAN_CONSULT (대출상담)**\n   - 설명: 주택담보대출, 전세자금대출 등 금융 관련 질문\n   - 예시:\n     * 단순: "전세자금대출 한도가 얼마인가요?", "LTV가 뭔가요?"\n     * 복합: "대출 한도 확인하고 금리 비교도 해주세요"\n   - 키워드: 대출, 금리, 한도, 조건, 상환, LTV, DTI, DSR, 담보, 금융, 은행\n   - 필요한 처리: 대출 상품 조회, 금리 정보 검색, 한도 계산\n\n4. **CONTRACT_CREATION (계약서작성)**\n   - 설명: 새로운 계약서나 문서를 작성해달라는 요청\n   - 예시:\n     * 단순: "임대차계약서 작성해주세요", "전세계약서 초안 만들어주세요"\n     * 복합: "계약서 작성하고 주의사항도 검토해주세요"\n   - 키워드: 작성, 만들, 생성, 초안, 계약서, 문서, 양식\n   - 필요한 처리: 문서 생성 에이전트 호출, 템플릿 기반 작성\n\n5. **CONTRACT_REVIEW (계약서검토)**\n   - 설명: 기존 계약서나 문서를 검토해달라는 요청\n   - 예시:\n     * 단순: "이 계약서 검토해주세요", "특약사항 문제없나요?"\n     * 복합: "계약서 검토하고 수정사항도 제안해주세요"\n   - 키워드: 검토, 확인, 점검, 리뷰, 분석해, 살펴봐, 체크\n   - 필요한 처리: 문서 분석, 위험 요소 식별, 개선사항 제안\n\n6. **COMPREHENSIVE (종합분석)**\n   - 설명: 여러 측면을 종합적으로 분석해달라는 요청, 또는 복잡한 상황에 대한 해결책 요청\n   - 예시:\n     * 단순: "이 물건 전체적으로 분석해주세요"\n     * 복합: "시세, 법률, 대출 모두 검토해서 종합 의견 주세요"\n     * 해결형: "10년 거주했는데 전세금 3억을 10억으로 올려달래. 어떻게 해야 해?"\n     * 상황+해결: "집주인이 계약 갱신 거부했어. 법적으로 어떻게 대응해야 할까?"\n   - 키워드: 종합, 전체, 모든, 전반적, 종합적, 평가, 분석, 어떻게, 방법, 해결, 대처\n   - 패턴: 구체적 상황 설명 + "어떻게/방법/해결" 요청\n   - 필요한 처리: 다중 데이터 소스 통합 분석, 상황 평가, 해결책 제시\n\n7. **RISK_ANALYSIS (리스크분석)**\n   - 설명: 위험 요소나 주의사항에 대한 질문\n   - 예시:\n     * 단순: "이 계약 위험한가요?", "주의할 점 알려주세요"\n     * 복합: "리스크 분석하고 대안도 제시해주세요"\n   - 키워드: 위험, 리스크, 주의, 문제점, 조심, 걱정, 우려\n   - 필요한 처리: 위험 요소 분석, 주의사항 추출\n\n8. **UNCLEAR (불분명)**\n   - 설명: 의도를 명확히 파악하기 어려운 질문\n   - 예시: "이거 좀 봐주세요", "어떻게 해야 할까요?", "도와주세요"\n   - 처리: 추가 질문으로 의도 명확화 필요\n\n9. **IRRELEVANT (무관)**\n   - 설명: 부동산과 전혀 관련 없는 질문\n   - 예시: "날씨 어때?", "저녁 뭐 먹지?", "주식 추천해줘"\n   - 처리: 부동산 관련 질문을 유도\n\n## 복합 질문 예시와 분석 (CoT 적용):\n\n### 예시 1: "강남구 아파트 시세 알려주고 전세자금대출 가능한지도 확인해줘"\n**CoT 분석**:\n1. 구조: 두 개의 요청 ("시세" + "대출")\n2. 유형: 정보 확인형 (둘 다)\n3. 복잡도: 중 (두 가지 독립적 조회)\n4. 필요 처리: 검색 + 계산/분석\n\n**결론**:\n- 주 의도: MARKET_INQUIRY (시세 조회가 먼저 필요)\n- 부가 의도: LOAN_CONSULT (대출 확인)\n- 분해: ["강남구 아파트 시세 조회", "전세자금대출 가능 여부 확인"]\n\n### 예시 2: "이 계약서 검토해서 위험한 부분 있는지 알려주고 수정 제안도 해줘"\n**CoT 분석**:\n1. 구조: 검토 + 위험 평가 + 수정안\n2. 유형: 평가/판단형 + 해결책 요청형\n3. 복잡도: 고 (3단계 처리)\n4. 필요 처리: 검토 + 분석 + 문서 생성\n\n**결론**:\n- 주 의도: CONTRACT_REVIEW (계약서 검토)\n- 부가 의도: RISK_ANALYSIS (위험 분석)\n- 분해: ["계약서 전체 검토", "위험 요소 식별", "수정사항 제안"]\n\n### 예시 3: "집주인이 짜증나, 10년 살았는데 전세금 3억을 10억으로 올려달래. 법적으로 해결방법 알려줘"\n**CoT 분석**:\n1. 구조: 상황 설명 (10년 거주, 3억→10억) + 해결책 요청\n2. 유형: 해결책 요청형 (단순 정보 X)\n3. 복잡도: 고 (구체적 상황 + 수치 비교 + 법률 + 대응방안)\n4. 필요 처리: 법률 검색 + 상황 분석 + 해결책 제시\n\n**결론**:\n- 주 의도: COMPREHENSIVE (복잡한 상황에 대한 종합 해결)\n- 부가 의도: LEGAL_CONSULT, RISK_ANALYSIS\n- 분해: ["전세금 인상 한도 법률 조회", "3억→10억 인상의 타당성 분석", "구체적 대응 방안 제시"]\n- **이유**: "법적으로"라는 키워드가 있지만, 단순 법률 확인이 아니라 구체적 상황에 대한 해결책을 요구하므로 COMPREHENSIVE\n\n### 예시 4: "전세금 인상률 상한이 얼마야?"\n**CoT 분석**:\n1. 구조: 단순 사실 확인\n2. 유형: 정보 확인형\n3. 복잡도: 저 (단일 개념)\n4. 필요 처리: 검색만\n\n**결론**:\n- 주 의도: LEGAL_CONSULT (법률 정보 조회)\n- 부가 의도: 없음\n- 분해: 필요 없음\n\n## 응답 형식 (JSON 형식으로 응답):\n\n```json\n{\n    "intent": "LEGAL_CONSULT",\n    "confidence": 0.9,\n    "keywords": ["전세금", "인상", "제한"],\n    "sub_intents": [],\n    "is_compound": false,\n    "decomposed_tasks": [],\n    "entities": {\n        "location": "강남구",\n        "price": "5억",\n        "contract_type": "전세",\n        "date": "2024년",\n        "area": "84㎡",\n        "action_verbs": ["확인", "검토"]\n    },\n    "reasoning": "전세금 인상에 대한 법률 질문이므로 LEGAL_CONSULT로 분류"\n}\n```\n\n응답 규칙:\n- intent: 위 9개 카테고리 중 하나 (대문자_언더스코어 형식)\n- confidence: 0.0~1.0 (0.8 이상이면 매우 확실, 0.5 미만이면 불확실)\n- keywords: 추출된 주요 키워드 목록\n- sub_intents: 복합 질문일 경우 부가적인 의도들\n- is_compound: 복합 질문 여부 (true/false)\n- decomposed_tasks: 복합 질문을 분해한 개별 작업들\n- entities: 추출된 엔티티 정보\n- reasoning: **반드시 CoT 5단계를 거쳐 분석한 과정을 포함** (구조 파악 → 유형 판단 → 복잡도 평가 → 필요 처리 → 최종 검증)\n\n## reasoning 작성 예시:\n"1단계(구조): 상황 설명(10년 거주, 3억→10억) + 해결책 요청 포함.\n2단계(유형): 해결책 요청형 - 단순 정보가 아닌 대응방안 필요.\n3단계(복잡도): 고 - 구체적 수치 비교와 복잡한 상황.\n4단계(처리): 법률 검색 + 상황 분석 + 해결책 제시 필요.\n5단계(검증): LEGAL_CONSULT만으로는 불충분, 종합적 분석 필요 → COMPREHENSIVE 선택"\n\n## 판단 가이드:\n- 여러 의도가 섞여있다면, 가장 주된 의도를 intent에, 나머지를 sub_intents에 기록\n- "그리고", "또한", "함께", "같이" 등의 연결어가 있으면 복합 질문일 가능성 높음\n- 법률 관련 키워드가 있으면 LEGAL_CONSULT 우선\n- 가격/시세 언급이 명확하면 MARKET_INQUIRY\n- 계약서라는 단어와 함께 "작성/만들기"가 있으면 CONTRACT_CREATION\n- 계약서라는 단어와 함께 "검토/확인"이 있으면 CONTRACT_REVIEW\n- 불확실하면 confidence를 낮게 설정하고 UNCLEAR 선택\n- 복합 질문은 is_compound를 true로 설정하고 개별 작업으로 분해\n\n분석할 질문: 서초동 전세 시세 알려주고 법적 주의사항도 알려줘'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 15:58:19,854 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 15:58:19,854 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 15:58:19,854 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 15:58:19,854 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 15:58:19,854 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 15:58:19,854 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 15:58:24,460 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 06:58:24 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'4306'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'4354'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9977'), (b'x-ratelimit-remaining-tokens', b'197238'), (b'x-ratelimit-reset-requests', b'3m16.14s'), (b'x-ratelimit-reset-tokens', b'828ms'), (b'x-request-id', b'req_fb2b662177a44672821f2bc88d977365'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b07a9f8403091-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 15:58:24,460 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 15:58:24,461 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 15:58:24,461 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 15:58:24,461 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 15:58:24,461 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 15:58:24,461 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 06:58:24 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '4306', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '4354', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9977', 'x-ratelimit-remaining-tokens': '197238', 'x-ratelimit-reset-requests': '3m16.14s', 'x-ratelimit-reset-tokens': '828ms', 'x-request-id': 'req_fb2b662177a44672821f2bc88d977365', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b07a9f8403091-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 15:58:24,461 - openai._base_client - DEBUG - request_id: req_fb2b662177a44672821f2bc88d977365
2025-10-05 15:58:24,461 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: intent_analysis | Model: gpt-4o-mini-2024-07-18 | Tokens: 3455 (prompt: 3187, completion: 268)
2025-10-05 15:58:24,461 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM Intent Analysis Result: {'intent': 'COMPREHENSIVE', 'confidence': 0.85, 'keywords': ['서초동', '전세', '시세', '법적', '주의사항'], 'sub_intents': ['MARKET_INQUIRY', 'LEGAL_CONSULT'], 'is_compound': True, 'decomposed_tasks': ['서초동 전세 시세 조회', '전세 계약의 법적 주의사항 확인'], 'entities': {'location': '서초동', 'contract_type': '전세', 'action_verbs': ['알려줘', '확인']}, 'reasoning': '1단계(구조): 두 개의 요청(전세 시세 + 법적 주의사항). 2단계(유형): 정보 확인형(시세) + 평가/판단형(법적 주의사항). 3단계(복잡도): 중 - 두 가지 독립적 조회 필요. 4단계(처리): 시세 조회와 법적 주의사항 확인이 필요. 5단계(검증): 두 가지 요청이 있으므로 COMPREHENSIVE로 분류.'}
2025-10-05 15:58:24,462 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-27fa238d-8a79-461c-a999-ac250b234544', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 Agent 선택 전문가입니다.\n사용자의 요청에 가장 적합한 Agent/Team을 선택하는 것이 목표입니다.\n\n## 현재 상황\n\n**사용자 질문:** 서초동 전세 시세 알려주고 법적 주의사항도 알려줘\n**분석된 의도:** 종합분석\n**추출된 키워드:** [\'서초동\', \'전세\', \'시세\', \'법적\', \'주의사항\']\n\n## 사용 가능한 Agent/Team 정보\n\n{\'search_team\': {\'name\': \'search_team\', \'capabilities\': \'법률 검색, 부동산 시세 조회, 대출 상품 검색\', \'tools\': [\'legal_search\', \'market_data\', \'loan_data\'], \'use_cases\': [\'법률 상담\', \'시세 조회\', \'대출 정보\']}, \'analysis_team\': {\'name\': \'analysis_team\', \'capabilities\': \'데이터 분석, 리스크 평가, 인사이트 생성, 추천\', \'tools\': [\'data_analyzer\', \'risk_evaluator\'], \'use_cases\': [\'시장 분석\', \'리스크 평가\', \'투자 분석\']}, \'document_team\': {\'name\': \'document_team\', \'capabilities\': \'계약서 작성, 문서 생성, 문서 검토\', \'tools\': [\'document_generator\', \'contract_reviewer\'], \'use_cases\': [\'계약서 작성\', \'문서 검토\']}}\n\n## Agent 역할 및 상세 가이드\n\n### 1. search_team (검색 팀)\n- **주요 기능**: 정보 검색 및 데이터 수집\n- **전문 분야**:\n  * 법률 정보 검색 (전세법, 임대차보호법, 부동산 관련 법규)\n  * 부동산 시세 조회 (매매가, 전세가, 월세, 실거래가)\n  * 대출 상품 정보 검색 (금리, 한도, 조건)\n  * 지역 정보 및 인프라 조회\n- **도구**: legal_search, market_data, loan_data\n- **적합한 작업**: 정보 조회, 데이터 수집, 법률 확인, 시세 파악\n- **예시**:\n  * "전세금 5% 인상 가능한가요?"\n  * "강남구 아파트 전세 시세"\n  * "전세자금대출 한도 얼마?"\n\n### 2. analysis_team (분석 팀)\n- **주요 기능**: 데이터 분석 및 평가\n- **전문 분야**:\n  * 시장 동향 분석 (상승률, 하락률, 추세)\n  * 리스크 평가 (계약, 투자 위험도)\n  * 투자 수익률 계산 (ROI, 월세 수익률)\n  * 대출 한도 및 조건 분석 (LTV, DTI, DSR)\n  * 비교 분석 (지역별, 상품별)\n- **도구**: data_analyzer, risk_evaluator, calculator\n- **적합한 작업**: 데이터 분석, 리스크 평가, 계산, 비교, 예측\n- **의존성**: 보통 search_team의 데이터가 필요\n- **예시**:\n  * "이 지역 투자 가치 분석해줘"\n  * "계약 리스크 평가해줘"\n  * "대출 가능 금액 계산해줘"\n\n### 3. document_team (문서 팀)\n- **주요 기능**: 문서 생성 및 관리\n- **전문 분야**:\n  * 계약서 작성 (임대차, 매매, 전세)\n  * 문서 템플릿 관리\n  * 특약사항 생성\n  * 계약서 수정안 작성\n  * 법률 문서 검토\n- **도구**: document_generator, contract_template, contract_reviewer\n- **적합한 작업**: 문서 작성, 계약서 생성, 문서 수정, 검토\n- **예시**:\n  * "임대차계약서 작성해줘"\n  * "특약사항 추가해줘"\n  * "계약서 수정안 만들어줘"\n\n## Chain-of-Thought Agent 선택 프로세스\n\n다음 단계를 **순서대로** 따라 최적의 Agent 조합을 선택하세요:\n\n### 1단계: 질문 요구사항 파악\n- 단순 정보 조회인가? → search_team만 필요\n- 판단/평가가 필요한가? → search + analysis 필요\n- 해결책 제시가 필요한가? → search + analysis 필요\n- 문서 생성이 필요한가? → document_team 추가\n\n### 2단계: 작업 복잡도 판단\n- **단순** (검색만): "~이 뭐야?", "~알려줘" → search_team\n- **중간** (검색+판단): "~괜찮아?", "~적절해?" → search + analysis\n- **복잡** (종합 해결): 구체적 상황 + "어떻게 해야 해?" → search + analysis\n\n### 3단계: 의존성 분석\n- 독립적 작업: 단일 팀으로 처리 가능\n- 순차적 의존: 이전 결과 필요 → 여러 팀 순서대로\n- 병렬 가능: 동시 조회 가능 → coordination: "parallel"\n\n### 4단계: 최종 검증\n- 선택한 팀들로 질문에 완전히 답변 가능한가?\n- 불필요한 팀이 포함되지 않았는가?\n- 순서가 논리적인가? (데이터 흐름 고려)\n\n### 중요 원칙:\n- **법률 키워드만으로 판단하지 말 것**: "법적으로 어떻게 해야 해?" = 법률 검색 + 분석 필요\n- **상황 설명 + 해결책 요청** = 반드시 analysis_team 포함\n- **구체적 수치 비교** (3억→10억 같은) = analysis_team 필요\n\n## 의도별 Agent 매핑 가이드 (기본 가이드 - CoT로 조정 가능)\n\n| 의도 (Intent) | 기본 조합 | 상황별 조정 |\n|--------------|-----------|-------------|\n| LEGAL_CONSULT | ["search_team"] | 해결책 요청시 → + analysis_team |\n| MARKET_INQUIRY | ["search_team"] | 비교/평가시 → + analysis_team |\n| LOAN_CONSULT | ["search_team", "analysis_team"] | 계산 필수 |\n| CONTRACT_CREATION | ["document_team"] | 검토 후 작성 → search + document |\n| CONTRACT_REVIEW | ["search_team", "analysis_team"] | 법률 검토 + 리스크 분석 |\n| COMPREHENSIVE | ["search_team", "analysis_team"] | **항상 분석 포함** |\n| RISK_ANALYSIS | ["analysis_team"] | 법률 근거 필요시 → search + analysis |\n| UNCLEAR | ["search_team", "analysis_team"] | 포괄적 대응 |\n\n**중요**: 위 매핑은 **기본 가이드**일 뿐입니다.\n실제 질문의 내용(CoT 분석 결과)에 따라 조정하세요!\n\n## 복합 질문 처리 예시 (CoT 적용)\n\n### 예시 1: 순차적 처리\n질문: "강남구 시세 확인하고 투자 가치 분석해줘"\n**CoT 분석**:\n1. 요구사항: 시세 조회 + 투자 가치 평가\n2. 복잡도: 중간 (검색 + 분석)\n3. 의존성: 시세 데이터 → 투자 분석 (순차)\n4. 검증: search만으로는 "투자 가치 평가" 불가능\n\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "1단계: 시세 조회+투자 평가 필요. 2단계: 중간 복잡도. 3단계: 순차 의존. 4단계: search로 시세 수집 후 analysis로 투자 가치 평가 필요",\n    "coordination": "sequential"\n}\n```\n\n### 예시 2: 단순 정보 조회\n질문: "전세금 인상률 한도가 얼마야?"\n**CoT 분석**:\n1. 요구사항: 단순 사실 확인\n2. 복잡도: 낮음 (정보 확인형)\n3. 의존성: 없음\n4. 검증: search_team만으로 충분\n\n```json\n{\n    "selected_agents": ["search_team"],\n    "reasoning": "1단계: 단순 정보 조회. 2단계: 저복잡도. 3단계: 독립적. 4단계: 법률 검색만으로 답변 가능",\n    "coordination": "single"\n}\n```\n\n### 예시 3: 해결책 요청 (핵심 예시!)\n질문: "집주인이 전세금 3억을 10억으로 올려달래. 법적으로 어떻게 해야 해?"\n의도: COMPREHENSIVE\n**CoT 분석**:\n1. 요구사항: 상황 설명 + 해결책 요청\n2. 복잡도: 높음 (구체적 상황 + 수치 비교)\n3. 의존성: 법률 확인 → 상황 분석 → 해결책 제시\n4. 검증: "법적으로"만 보고 search만 선택하면 불충분! 해결책 제시 필요\n\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "1단계: 법률 + 상황 분석 + 해결책 필요. 2단계: 고복잡도(3억→10억 비정상). 3단계: 순차(법률 확인 후 타당성 분석). 4단계: \'어떻게 해야\' = 단순 법률 조회 아님, 분석 필수",\n    "coordination": "sequential",\n    "confidence": 0.95\n}\n```\n\n## 응답 형식 (JSON)\n\n```json\n{\n    "selected_agents": ["선택된 agent/team 목록"],\n    "reasoning": "선택 이유를 구체적으로 설명. 각 Agent의 역할과 처리 순서 포함",\n    "coordination": "single/sequential/parallel/pipeline",\n    "dependencies": {"agent2": ["agent1"]},\n    "estimated_time": 30,\n    "confidence": 0.9\n}\n```\n\n## 선택 가이드라인\n\n1. **최소 Agent 원칙**: 가능한 적은 수의 Agent로 처리\n2. **전문성 우선**: 해당 작업에 가장 전문적인 Agent 선택\n3. **효율성 고려**: 병렬 처리 가능한 경우 명시\n4. **의존성 관리**: 데이터 흐름을 고려한 순서 지정\n5. **폴백 전략**: 불확실한 경우 ["search_team", "analysis_team"] 조합\n\n## 주의사항\n\n- selected_agents는 반드시 배열 형태\n- Agent 이름은 정확히: "search_team", "analysis_team", "document_team"\n- 최소 1개, 최대 3개 선택\n- 순서는 실행 우선순위 (앞에 있을수록 먼저 실행)\n- reasoning은 상세하고 논리적으로 작성\n- coordination 필드로 실행 방식 명시\n- 복합 질문의 경우 의존성 관계 명확히 표시'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 15:58:24,462 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 15:58:24,462 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 15:58:24,462 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 15:58:24,462 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 15:58:24,463 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 15:58:24,463 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 15:58:29,069 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 06:58:28 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'4313'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'4330'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9976'), (b'x-ratelimit-remaining-tokens', b'197879'), (b'x-ratelimit-reset-requests', b'3m20.488s'), (b'x-ratelimit-reset-tokens', b'636ms'), (b'x-request-id', b'req_af99eb86eab94b3fa850fe99eb6d76a8'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b07c6b8cc3091-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 15:58:29,069 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 15:58:29,069 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 15:58:29,069 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 15:58:29,069 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 15:58:29,069 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 15:58:29,069 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 06:58:28 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '4313', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '4330', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9976', 'x-ratelimit-remaining-tokens': '197879', 'x-ratelimit-reset-requests': '3m20.488s', 'x-ratelimit-reset-tokens': '636ms', 'x-request-id': 'req_af99eb86eab94b3fa850fe99eb6d76a8', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b07c6b8cc3091-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 15:58:29,069 - openai._base_client - DEBUG - request_id: req_af99eb86eab94b3fa850fe99eb6d76a8
2025-10-05 15:58:29,070 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: agent_selection | Model: gpt-4o-mini-2024-07-18 | Tokens: 2572 (prompt: 2372, completion: 200)
2025-10-05 15:58:29,070 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM agent selection reasoning: 1단계: 서초동 전세 시세 조회와 법적 주의사항에 대한 종합적인 분석이 필요합니다. 2단계: 전세 시세 조회와 법적 주의사항은 단순 정보 조회가 아닌, 법률적 맥락과 시장 분석이 결합된 중간 복잡도의 작업입니다. 3단계: 법률 정보 검색 후, 해당 정보를 바탕으로 시장 분석이 필요하므로 순차적으로 진행해야 합니다. 4단계: 단순 법률 조회로는 '법적 주의사항'에 대한 충분한 답변이 불가능하므로, 분석 팀의 도움이 필요합니다.
2025-10-05 15:58:29,070 - app.service_agent.cognitive_agents.planning_agent - INFO - ✅ Primary LLM selected agents: ['search_team', 'analysis_team']
2025-10-05 15:58:29,070 - __main__ - INFO -   의도: 종합분석
2025-10-05 15:58:29,070 - __main__ - INFO -   신뢰도: 0.85
2025-10-05 15:58:29,070 - __main__ - INFO -   추천 Agent: ['search_team', 'analysis_team']
2025-10-05 15:58:29,070 - __main__ - INFO - 
[Step 2] Query Decomposition...
2025-10-05 15:58:29,070 - app.service_agent.cognitive_agents.query_decomposer - INFO - Decomposing query: 서초동 전세 시세 알려주고 법적 주의사항도 알려줘...
2025-10-05 15:58:29,070 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-0aca4eb5-1795-4e85-a86a-88aea954c66b', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 질문 분해 전문가입니다.\n복잡한 사용자 질문을 독립적으로 처리 가능한 작업 단위로 분해하는 것이 목표입니다.\n\n## Chain-of-Thought 분해 프로세스:\n\n### 1단계: 복합 질문 여부 판단\n- 단순 정보 조회만 필요한가? → is_compound: false\n- **다음 중 하나라도 해당하면 is_compound: true**:\n  * "그리고", "그 다음", "한 후" 같은 연결어로 여러 요청 연결\n  * 명시적으로 2개 이상의 작업 요청 (예: "시세 확인하고 대출 계산해줘")\n  * 상황 설명 + 해결책 요청 (예: "3억→10억 올려달래. 어떻게 해야 해?")\n  * 해결책을 위해 여러 단계 처리 필요 (검색 → 분석 → 제안)\n\n### 2단계: 필요 작업 식별\n- 정보 수집이 필요한가? → search 작업\n- 평가/판단이 필요한가? → analysis 작업\n- 문서 생성이 필요한가? → generation 작업\n- **해결책 요청**인가? → search + analysis (최소 2개)\n\n### 3단계: 작업 순서 결정\n- 독립적 작업: 병렬 가능\n- 이전 결과 필요: 순차 실행 (depends_on 설정)\n\n## 중요 원칙:\n1. 각 작업은 하나의 명확한 목표를 가져야 합니다\n2. 작업 간 의존성을 명확히 파악해야 합니다\n3. 병렬 처리 가능한 작업은 구분해야 합니다\n4. **주의**: "어떻게 해야", "방법 알려줘" 같은 해결책 요청은 복합 질문!\n\n## 작업 유형 (type):\n- search: 정보 검색 (법률, 시세, 대출 정보 등)\n- analysis: 데이터 분석 (리스크 평가, 시장 분석 등)\n- generation: 문서 생성 (계약서 작성 등)\n- review: 검토/평가 (계약서 검토, 조건 확인 등)\n- calculation: 계산/산출 (대출 한도, 세금 등)\n- comparison: 비교 분석 (여러 옵션 비교)\n\n## 담당 팀 (agent):\n- search_team: 법률, 시세, 대출 정보 검색\n- analysis_team: 데이터 분석, 리스크 평가, 계산\n- document_team: 문서 생성, 계약서 작성\n\n## 학습 예시:\n\n### 예시 1: 복합 질문 (순차적)\n질문: "강남구 아파트 시세 확인하고 대출 가능 금액 계산해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "강남구 아파트 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "대출 가능 금액 계산",\n            "type": "calculation",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "required_data": {"price": "task_0.result.price"},\n            "estimated_time": 15\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "시세 정보가 있어야 대출 금액 계산이 가능하므로 순차 실행"\n}\n```\n\n### 예시 2: 복합 질문 (병렬 가능)\n질문: "이 지역 전세 시세와 매매 시세 모두 알려주고 비교 분석해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "전세 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "매매 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "전세/매매 시세 비교 분석",\n            "type": "comparison",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0", "task_1"],\n            "required_data": {\n                "lease_price": "task_0.result",\n                "sale_price": "task_1.result"\n            },\n            "estimated_time": 25\n        }\n    ],\n    "execution_mode": "mixed",\n    "parallel_groups": [["task_0", "task_1"], ["task_2"]],\n    "reasoning": "시세 조회는 독립적이므로 병렬 처리, 비교는 두 결과 필요"\n}\n```\n\n### 예시 3: 복합 질문 (3단계 이상)\n질문: "이 계약서 검토해서 위험한 부분 찾고 수정안 만들어서 최종 계약서 작성해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "계약서 내용 전체 검토",\n            "type": "review",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 30\n        },\n        {\n            "description": "위험 요소 및 문제점 분석",\n            "type": "analysis",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "estimated_time": 25\n        },\n        {\n            "description": "수정안 제안 생성",\n            "type": "generation",\n            "agent": "document_team",\n            "priority": 3,\n            "depends_on": ["task_1"],\n            "estimated_time": 20\n        },\n        {\n            "description": "최종 계약서 작성",\n            "type": "generation",\n            "agent": "document_team",\n            "priority": 4,\n            "depends_on": ["task_2"],\n            "estimated_time": 30\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "각 단계가 이전 결과에 의존하므로 순차 실행 필요"\n}\n```\n\n### 예시 4: 단순 질문 (분해 불필요)\n질문: "전세금 인상률 상한이 얼마야?"\n분해:\n```json\n{\n    "is_compound": false,\n    "sub_tasks": [\n        {\n            "description": "전세금 인상률 상한 법률 정보 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 15\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "단일 정보 조회 요청으로 분해 불필요"\n}\n```\n\n### 예시 5: 조건부 실행\n질문: "이 물건 시세 확인하고 적정가면 대출 상담도 받고 싶어"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "물건 시세 조회 및 적정성 평가",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 25\n        },\n        {\n            "description": "대출 상담 정보 제공",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "optional": true,\n            "context": {"condition": "if_reasonable_price"},\n            "estimated_time": 20\n        }\n    ],\n    "execution_mode": "conditional",\n    "reasoning": "시세 확인 결과에 따라 대출 상담 진행 여부 결정"\n}\n```\n\n### 예시 6: 상황 설명 + 해결책 요청 (핵심 패턴!)\n질문: "집주인이 전세금 3억을 10억으로 올려달래. 법적으로 어떻게 해야 해?"\n**CoT 분석**:\n1. 질문 분석: 상황 설명 + 해결책 요청\n2. 연결어: 없지만, "어떻게 해야" = 해결책 요청\n3. 의존성: 법률 확인 → 상황 분석 → 대응 방안\n4. 복합 여부: **YES** (해결책을 위해 여러 단계 필요)\n\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "전세금 인상 한도 관련 법률 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "3억→10억 인상의 법적 타당성 및 적정성 분석",\n            "type": "analysis",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "required_data": {"legal_limit": "task_0.result", "current": 300000000, "requested": 1000000000},\n            "estimated_time": 25\n        },\n        {\n            "description": "구체적 대응 방안 및 해결책 제시",\n            "type": "analysis",\n            "agent": "analysis_team",\n            "priority": 3,\n            "depends_on": ["task_1"],\n            "estimated_time": 20\n        }\n    ],\n    "execution_mode": "sequential",\n    "confidence": 0.95,\n    "reasoning": "상황 설명+해결책 요청 패턴. \'어떻게 해야\'는 단순 정보 조회가 아닌 종합 해결책 필요. 법률 조회 → 상황 분석 → 해결책 제시 3단계 순차 처리"\n}\n```\n\n## Chain-of-Thought 프로세스:\n\n1. **질문 분석**: 어떤 정보나 작업을 요구하는가?\n2. **연결어 확인**: "그리고", "또한", "해서", "한 후" 등이 있는가?\n3. **의존성 파악**: 어떤 작업이 다른 작업의 결과를 필요로 하는가?\n4. **병렬성 판단**: 독립적으로 실행 가능한 작업이 있는가?\n5. **최적화**: 불필요한 분해는 없는가?\n\n## 응답 형식 (JSON):\n\n{\n    "is_compound": true/false,\n    "sub_tasks": [\n        {\n            "description": "작업 설명",\n            "type": "작업 유형",\n            "agent": "담당 팀",\n            "priority": 우선순위 (1이 가장 높음),\n            "depends_on": ["선행 작업 ID 리스트"],\n            "required_data": {"필요한 데이터 매핑"},\n            "estimated_time": 예상 소요 시간(초),\n            "optional": true/false,\n            "context": {"추가 컨텍스트"}\n        }\n    ],\n    "execution_mode": "sequential/parallel/mixed/conditional",\n    "parallel_groups": [["병렬 실행 가능한 작업 ID 그룹"]],\n    "confidence": 0.0-1.0,\n    "reasoning": "분해 결정의 이유와 근거"\n}\n\n## 분해 가이드라인:\n\n1. **분해가 필요한 경우**:\n   - 여러 종류의 정보를 요청하는 경우\n   - 순차적 처리가 필요한 경우 (A의 결과로 B 수행)\n   - 서로 다른 팀의 전문성이 필요한 경우\n\n2. **분해가 불필요한 경우**:\n   - 단일 정보 조회\n   - 단순한 질문-답변\n   - 하나의 팀에서 완전히 처리 가능한 경우\n\n3. **병렬 처리 기준**:\n   - 서로 독립적인 정보 조회\n   - 의존성이 없는 분석 작업\n   - 동시에 진행해도 충돌하지 않는 작업\n\n4. **우선순위 설정**:\n   - 의존성이 없는 작업: priority 1\n   - 1차 의존 작업: priority 2\n   - 2차 의존 작업: priority 3\n   - 이런 식으로 증가\n\n현재 의도: 종합분석\n추출된 엔티티: None\n\n분석할 질문: 서초동 전세 시세 알려주고 법적 주의사항도 알려줘'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 15:58:29,071 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 15:58:29,071 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 15:58:29,071 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 15:58:29,071 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 15:58:29,072 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 15:58:29,072 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 15:58:32,790 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 06:58:32 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'3512'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'3532'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9976'), (b'x-ratelimit-remaining-tokens', b'197332'), (b'x-ratelimit-reset-requests', b'3m24.224s'), (b'x-ratelimit-reset-tokens', b'800ms'), (b'x-request-id', b'req_d6b65db578c14464aed42637c33eb6ac'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b07e38d883091-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 15:58:32,790 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 15:58:32,790 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 15:58:32,817 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 15:58:32,817 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 15:58:32,817 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 15:58:32,817 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 06:58:32 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '3512', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '3532', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9976', 'x-ratelimit-remaining-tokens': '197332', 'x-ratelimit-reset-requests': '3m24.224s', 'x-ratelimit-reset-tokens': '800ms', 'x-request-id': 'req_d6b65db578c14464aed42637c33eb6ac', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b07e38d883091-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 15:58:32,817 - openai._base_client - DEBUG - request_id: req_d6b65db578c14464aed42637c33eb6ac
2025-10-05 15:58:32,818 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: query_decomposition | Model: gpt-4o-mini-2024-07-18 | Tokens: 2877 (prompt: 2697, completion: 180)
2025-10-05 15:58:32,818 - app.service_agent.cognitive_agents.query_decomposer - INFO - Successfully decomposed into 2 tasks
2025-10-05 15:58:32,818 - __main__ - INFO -   복합 질문: True
2025-10-05 15:58:32,818 - __main__ - INFO -   작업 수: 2
2025-10-05 15:58:32,818 - __main__ - INFO -   실행 모드: parallel
2025-10-05 15:58:32,818 - __main__ - INFO -     - task_0: 서초동 전세 시세 조회 (search_team)
2025-10-05 15:58:32,818 - __main__ - INFO -     - task_1: 전세 계약 관련 법적 주의사항 조회 (search_team)
2025-10-05 15:58:32,818 - __main__ - INFO - 
[Step 3] Comprehensive Plan 생성...
2025-10-05 15:58:32,818 - app.service_agent.cognitive_agents.planning_agent - INFO - Creating comprehensive plan for query: 서초동 전세 시세 알려주고 법적 주의사항도 알려줘...
2025-10-05 15:58:32,818 - app.service_agent.cognitive_agents.planning_agent - INFO - Analyzing intent for query: 서초동 전세 시세 알려주고 법적 주의사항도 알려줘...
2025-10-05 15:58:32,818 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-36298b0d-f494-4426-99b2-6b937c81cf5e', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 의도 분석 전문가입니다.\n사용자의 질문을 정확히 이해하고, 어떤 종류의 도움이 필요한지 분류해야 합니다.\n\n## Chain-of-Thought 분석 프로세스\n\n질문을 분석할 때 다음 단계를 **순서대로** 따르세요:\n\n### 1단계: 질문 구조 파악\n- 단순 정보 요청인가? (예: "~이 뭐야?", "~알려줘")\n- 상황 설명이 포함되어 있는가? (배경, 현재 상태)\n- 구체적 수치나 데이터가 있는가? (금액, 비율, 기간 등)\n- 문제 해결을 요구하는가? (예: "어떻게 해야 해?", "방법 알려줘")\n\n### 2단계: 요청 유형 판단\n- **정보 확인형**: 사실, 개념, 규정 확인 → 검색만으로 충분\n- **평가/판단형**: "괜찮아?", "적절해?", "문제있어?" → 검색 + 분석 필요\n- **해결책 요청형**: "어떻게?", "방법?", "대처?" → 검색 + 분석 + 제안 필요\n- **비교/선택형**: "A vs B", "어느게 나아?" → 검색 + 분석(비교) 필요\n\n### 3단계: 복잡도 평가\n- **저**: 단일 개념/사실 확인 (예: "전세금 인상률 한도?")\n- **중**: 특정 상황 + 판단 (예: "3억을 5억으로 올려달래. 가능해?")\n- **고**: 복잡한 상황 + 여러 조건 + 해결책 (예: "10년 거주, 3억→10억 요구. 어떻게 해야 해?")\n\n### 4단계: 필요한 처리 결정\n- **검색만**: 정보 확인형 + 저복잡도\n- **검색+분석**: 평가/판단형 OR 중복잡도 OR 수치 비교 포함\n- **종합처리**: 해결책 요청형 OR 고복잡도 OR 여러 조건 동시 고려\n\n### 5단계: 최종 검증\n- 선택한 의도로 사용자 질문에 완전히 답변 가능한가?\n- 단순 정보 제공으로 끝나는가, 아니면 추가 분석/판단이 필요한가?\n- 상황 설명이 있으면서 "해결", "방법", "어떻게" 등이 있으면 → COMPREHENSIVE 고려\n\n## 중요: 복합 질문 처리\n복합적인 질문(여러 의도가 섞인 질문)의 경우, 가장 핵심적인 의도를 파악하되,\nsub_intents 필드에 부가적인 의도들도 함께 기록해주세요.\n\n**특히 주의**:\n- 법률 키워드가 있어도, "해결방법", "어떻게 해야" 같은 표현이 있으면 단순 LEGAL_CONSULT가 아닐 수 있음\n- 구체적 상황(금액, 기간 등) + 해결책 요구 = COMPREHENSIVE 또는 복합 의도로 분류\n\n## 분류 카테고리 설명:\n\n1. **LEGAL_CONSULT (법률상담)**\n   - 설명: 부동산 관련 법률, 권리, 의무에 대한 질문\n   - 예시:\n     * 단순: "전세금 5% 인상이 가능한가요?", "임대차계약 갱신 거부할 수 있나요?"\n     * 복합: "전세금 인상 가능한지 확인하고 법적 근거도 알려주세요"\n   - 키워드: 법, 전세, 임대, 보증금, 계약, 권리, 의무, 갱신, 임차인, 임대인, 법률, 규정, 조항\n   - 필요한 처리: 법률 데이터베이스 검색, 관련 법조항 찾기\n\n2. **MARKET_INQUIRY (시세조회)**\n   - 설명: 부동산 시장 가격, 시세, 거래 동향에 대한 질문\n   - 예시:\n     * 단순: "강남구 아파트 전세 시세 알려주세요", "서초동 매매가 얼마나 올랐나요?"\n     * 복합: "강남구 시세 확인하고 대출 가능 금액도 계산해줘"\n   - 키워드: 시세, 가격, 매매가, 전세가, 월세, 시장, 동향, 평균, 지역명, 상승률, 하락률\n   - 필요한 처리: 부동산 시세 데이터 조회, 지역별 가격 분석\n\n3. **LOAN_CONSULT (대출상담)**\n   - 설명: 주택담보대출, 전세자금대출 등 금융 관련 질문\n   - 예시:\n     * 단순: "전세자금대출 한도가 얼마인가요?", "LTV가 뭔가요?"\n     * 복합: "대출 한도 확인하고 금리 비교도 해주세요"\n   - 키워드: 대출, 금리, 한도, 조건, 상환, LTV, DTI, DSR, 담보, 금융, 은행\n   - 필요한 처리: 대출 상품 조회, 금리 정보 검색, 한도 계산\n\n4. **CONTRACT_CREATION (계약서작성)**\n   - 설명: 새로운 계약서나 문서를 작성해달라는 요청\n   - 예시:\n     * 단순: "임대차계약서 작성해주세요", "전세계약서 초안 만들어주세요"\n     * 복합: "계약서 작성하고 주의사항도 검토해주세요"\n   - 키워드: 작성, 만들, 생성, 초안, 계약서, 문서, 양식\n   - 필요한 처리: 문서 생성 에이전트 호출, 템플릿 기반 작성\n\n5. **CONTRACT_REVIEW (계약서검토)**\n   - 설명: 기존 계약서나 문서를 검토해달라는 요청\n   - 예시:\n     * 단순: "이 계약서 검토해주세요", "특약사항 문제없나요?"\n     * 복합: "계약서 검토하고 수정사항도 제안해주세요"\n   - 키워드: 검토, 확인, 점검, 리뷰, 분석해, 살펴봐, 체크\n   - 필요한 처리: 문서 분석, 위험 요소 식별, 개선사항 제안\n\n6. **COMPREHENSIVE (종합분석)**\n   - 설명: 여러 측면을 종합적으로 분석해달라는 요청, 또는 복잡한 상황에 대한 해결책 요청\n   - 예시:\n     * 단순: "이 물건 전체적으로 분석해주세요"\n     * 복합: "시세, 법률, 대출 모두 검토해서 종합 의견 주세요"\n     * 해결형: "10년 거주했는데 전세금 3억을 10억으로 올려달래. 어떻게 해야 해?"\n     * 상황+해결: "집주인이 계약 갱신 거부했어. 법적으로 어떻게 대응해야 할까?"\n   - 키워드: 종합, 전체, 모든, 전반적, 종합적, 평가, 분석, 어떻게, 방법, 해결, 대처\n   - 패턴: 구체적 상황 설명 + "어떻게/방법/해결" 요청\n   - 필요한 처리: 다중 데이터 소스 통합 분석, 상황 평가, 해결책 제시\n\n7. **RISK_ANALYSIS (리스크분석)**\n   - 설명: 위험 요소나 주의사항에 대한 질문\n   - 예시:\n     * 단순: "이 계약 위험한가요?", "주의할 점 알려주세요"\n     * 복합: "리스크 분석하고 대안도 제시해주세요"\n   - 키워드: 위험, 리스크, 주의, 문제점, 조심, 걱정, 우려\n   - 필요한 처리: 위험 요소 분석, 주의사항 추출\n\n8. **UNCLEAR (불분명)**\n   - 설명: 의도를 명확히 파악하기 어려운 질문\n   - 예시: "이거 좀 봐주세요", "어떻게 해야 할까요?", "도와주세요"\n   - 처리: 추가 질문으로 의도 명확화 필요\n\n9. **IRRELEVANT (무관)**\n   - 설명: 부동산과 전혀 관련 없는 질문\n   - 예시: "날씨 어때?", "저녁 뭐 먹지?", "주식 추천해줘"\n   - 처리: 부동산 관련 질문을 유도\n\n## 복합 질문 예시와 분석 (CoT 적용):\n\n### 예시 1: "강남구 아파트 시세 알려주고 전세자금대출 가능한지도 확인해줘"\n**CoT 분석**:\n1. 구조: 두 개의 요청 ("시세" + "대출")\n2. 유형: 정보 확인형 (둘 다)\n3. 복잡도: 중 (두 가지 독립적 조회)\n4. 필요 처리: 검색 + 계산/분석\n\n**결론**:\n- 주 의도: MARKET_INQUIRY (시세 조회가 먼저 필요)\n- 부가 의도: LOAN_CONSULT (대출 확인)\n- 분해: ["강남구 아파트 시세 조회", "전세자금대출 가능 여부 확인"]\n\n### 예시 2: "이 계약서 검토해서 위험한 부분 있는지 알려주고 수정 제안도 해줘"\n**CoT 분석**:\n1. 구조: 검토 + 위험 평가 + 수정안\n2. 유형: 평가/판단형 + 해결책 요청형\n3. 복잡도: 고 (3단계 처리)\n4. 필요 처리: 검토 + 분석 + 문서 생성\n\n**결론**:\n- 주 의도: CONTRACT_REVIEW (계약서 검토)\n- 부가 의도: RISK_ANALYSIS (위험 분석)\n- 분해: ["계약서 전체 검토", "위험 요소 식별", "수정사항 제안"]\n\n### 예시 3: "집주인이 짜증나, 10년 살았는데 전세금 3억을 10억으로 올려달래. 법적으로 해결방법 알려줘"\n**CoT 분석**:\n1. 구조: 상황 설명 (10년 거주, 3억→10억) + 해결책 요청\n2. 유형: 해결책 요청형 (단순 정보 X)\n3. 복잡도: 고 (구체적 상황 + 수치 비교 + 법률 + 대응방안)\n4. 필요 처리: 법률 검색 + 상황 분석 + 해결책 제시\n\n**결론**:\n- 주 의도: COMPREHENSIVE (복잡한 상황에 대한 종합 해결)\n- 부가 의도: LEGAL_CONSULT, RISK_ANALYSIS\n- 분해: ["전세금 인상 한도 법률 조회", "3억→10억 인상의 타당성 분석", "구체적 대응 방안 제시"]\n- **이유**: "법적으로"라는 키워드가 있지만, 단순 법률 확인이 아니라 구체적 상황에 대한 해결책을 요구하므로 COMPREHENSIVE\n\n### 예시 4: "전세금 인상률 상한이 얼마야?"\n**CoT 분석**:\n1. 구조: 단순 사실 확인\n2. 유형: 정보 확인형\n3. 복잡도: 저 (단일 개념)\n4. 필요 처리: 검색만\n\n**결론**:\n- 주 의도: LEGAL_CONSULT (법률 정보 조회)\n- 부가 의도: 없음\n- 분해: 필요 없음\n\n## 응답 형식 (JSON 형식으로 응답):\n\n```json\n{\n    "intent": "LEGAL_CONSULT",\n    "confidence": 0.9,\n    "keywords": ["전세금", "인상", "제한"],\n    "sub_intents": [],\n    "is_compound": false,\n    "decomposed_tasks": [],\n    "entities": {\n        "location": "강남구",\n        "price": "5억",\n        "contract_type": "전세",\n        "date": "2024년",\n        "area": "84㎡",\n        "action_verbs": ["확인", "검토"]\n    },\n    "reasoning": "전세금 인상에 대한 법률 질문이므로 LEGAL_CONSULT로 분류"\n}\n```\n\n응답 규칙:\n- intent: 위 9개 카테고리 중 하나 (대문자_언더스코어 형식)\n- confidence: 0.0~1.0 (0.8 이상이면 매우 확실, 0.5 미만이면 불확실)\n- keywords: 추출된 주요 키워드 목록\n- sub_intents: 복합 질문일 경우 부가적인 의도들\n- is_compound: 복합 질문 여부 (true/false)\n- decomposed_tasks: 복합 질문을 분해한 개별 작업들\n- entities: 추출된 엔티티 정보\n- reasoning: **반드시 CoT 5단계를 거쳐 분석한 과정을 포함** (구조 파악 → 유형 판단 → 복잡도 평가 → 필요 처리 → 최종 검증)\n\n## reasoning 작성 예시:\n"1단계(구조): 상황 설명(10년 거주, 3억→10억) + 해결책 요청 포함.\n2단계(유형): 해결책 요청형 - 단순 정보가 아닌 대응방안 필요.\n3단계(복잡도): 고 - 구체적 수치 비교와 복잡한 상황.\n4단계(처리): 법률 검색 + 상황 분석 + 해결책 제시 필요.\n5단계(검증): LEGAL_CONSULT만으로는 불충분, 종합적 분석 필요 → COMPREHENSIVE 선택"\n\n## 판단 가이드:\n- 여러 의도가 섞여있다면, 가장 주된 의도를 intent에, 나머지를 sub_intents에 기록\n- "그리고", "또한", "함께", "같이" 등의 연결어가 있으면 복합 질문일 가능성 높음\n- 법률 관련 키워드가 있으면 LEGAL_CONSULT 우선\n- 가격/시세 언급이 명확하면 MARKET_INQUIRY\n- 계약서라는 단어와 함께 "작성/만들기"가 있으면 CONTRACT_CREATION\n- 계약서라는 단어와 함께 "검토/확인"이 있으면 CONTRACT_REVIEW\n- 불확실하면 confidence를 낮게 설정하고 UNCLEAR 선택\n- 복합 질문은 is_compound를 true로 설정하고 개별 작업으로 분해\n\n분석할 질문: 서초동 전세 시세 알려주고 법적 주의사항도 알려줘'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 15:58:32,819 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 15:58:32,819 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 15:58:32,819 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 15:58:32,819 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 15:58:32,819 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 15:58:32,819 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 15:58:36,852 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 06:58:36 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'3805'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'3819'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9975'), (b'x-ratelimit-remaining-tokens', b'197238'), (b'x-ratelimit-reset-requests', b'3m29.102s'), (b'x-ratelimit-reset-tokens', b'828ms'), (b'x-request-id', b'req_3499ecf161b741e2ad390ef2c9f5622b'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b07fafb543091-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 15:58:36,852 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 15:58:36,852 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 15:58:36,853 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 15:58:36,853 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 15:58:36,853 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 15:58:36,853 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 06:58:36 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '3805', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '3819', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9975', 'x-ratelimit-remaining-tokens': '197238', 'x-ratelimit-reset-requests': '3m29.102s', 'x-ratelimit-reset-tokens': '828ms', 'x-request-id': 'req_3499ecf161b741e2ad390ef2c9f5622b', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b07fafb543091-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 15:58:36,853 - openai._base_client - DEBUG - request_id: req_3499ecf161b741e2ad390ef2c9f5622b
2025-10-05 15:58:36,853 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: intent_analysis | Model: gpt-4o-mini-2024-07-18 | Tokens: 3455 (prompt: 3187, completion: 268)
2025-10-05 15:58:36,853 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM Intent Analysis Result: {'intent': 'COMPREHENSIVE', 'confidence': 0.85, 'keywords': ['서초동', '전세', '시세', '법적', '주의사항'], 'sub_intents': ['MARKET_INQUIRY', 'LEGAL_CONSULT'], 'is_compound': True, 'decomposed_tasks': ['서초동 전세 시세 조회', '전세 계약의 법적 주의사항 확인'], 'entities': {'location': '서초동', 'contract_type': '전세', 'action_verbs': ['알려줘', '확인']}, 'reasoning': '1단계(구조): 두 개의 요청(전세 시세 + 법적 주의사항). 2단계(유형): 정보 확인형(시세) + 평가/판단형(법적 주의사항). 3단계(복잡도): 중 - 두 가지 독립적 조회 필요. 4단계(처리): 시세 조회와 법적 주의사항 확인이 필요. 5단계(검증): 두 가지 요청이 있으므로 COMPREHENSIVE로 분류.'}
2025-10-05 15:58:36,855 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-b8a95b48-c825-4fd9-9b10-cc9b58ae9226', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 Agent 선택 전문가입니다.\n사용자의 요청에 가장 적합한 Agent/Team을 선택하는 것이 목표입니다.\n\n## 현재 상황\n\n**사용자 질문:** 서초동 전세 시세 알려주고 법적 주의사항도 알려줘\n**분석된 의도:** 종합분석\n**추출된 키워드:** [\'서초동\', \'전세\', \'시세\', \'법적\', \'주의사항\']\n\n## 사용 가능한 Agent/Team 정보\n\n{\'search_team\': {\'name\': \'search_team\', \'capabilities\': \'법률 검색, 부동산 시세 조회, 대출 상품 검색\', \'tools\': [\'legal_search\', \'market_data\', \'loan_data\'], \'use_cases\': [\'법률 상담\', \'시세 조회\', \'대출 정보\']}, \'analysis_team\': {\'name\': \'analysis_team\', \'capabilities\': \'데이터 분석, 리스크 평가, 인사이트 생성, 추천\', \'tools\': [\'data_analyzer\', \'risk_evaluator\'], \'use_cases\': [\'시장 분석\', \'리스크 평가\', \'투자 분석\']}, \'document_team\': {\'name\': \'document_team\', \'capabilities\': \'계약서 작성, 문서 생성, 문서 검토\', \'tools\': [\'document_generator\', \'contract_reviewer\'], \'use_cases\': [\'계약서 작성\', \'문서 검토\']}}\n\n## Agent 역할 및 상세 가이드\n\n### 1. search_team (검색 팀)\n- **주요 기능**: 정보 검색 및 데이터 수집\n- **전문 분야**:\n  * 법률 정보 검색 (전세법, 임대차보호법, 부동산 관련 법규)\n  * 부동산 시세 조회 (매매가, 전세가, 월세, 실거래가)\n  * 대출 상품 정보 검색 (금리, 한도, 조건)\n  * 지역 정보 및 인프라 조회\n- **도구**: legal_search, market_data, loan_data\n- **적합한 작업**: 정보 조회, 데이터 수집, 법률 확인, 시세 파악\n- **예시**:\n  * "전세금 5% 인상 가능한가요?"\n  * "강남구 아파트 전세 시세"\n  * "전세자금대출 한도 얼마?"\n\n### 2. analysis_team (분석 팀)\n- **주요 기능**: 데이터 분석 및 평가\n- **전문 분야**:\n  * 시장 동향 분석 (상승률, 하락률, 추세)\n  * 리스크 평가 (계약, 투자 위험도)\n  * 투자 수익률 계산 (ROI, 월세 수익률)\n  * 대출 한도 및 조건 분석 (LTV, DTI, DSR)\n  * 비교 분석 (지역별, 상품별)\n- **도구**: data_analyzer, risk_evaluator, calculator\n- **적합한 작업**: 데이터 분석, 리스크 평가, 계산, 비교, 예측\n- **의존성**: 보통 search_team의 데이터가 필요\n- **예시**:\n  * "이 지역 투자 가치 분석해줘"\n  * "계약 리스크 평가해줘"\n  * "대출 가능 금액 계산해줘"\n\n### 3. document_team (문서 팀)\n- **주요 기능**: 문서 생성 및 관리\n- **전문 분야**:\n  * 계약서 작성 (임대차, 매매, 전세)\n  * 문서 템플릿 관리\n  * 특약사항 생성\n  * 계약서 수정안 작성\n  * 법률 문서 검토\n- **도구**: document_generator, contract_template, contract_reviewer\n- **적합한 작업**: 문서 작성, 계약서 생성, 문서 수정, 검토\n- **예시**:\n  * "임대차계약서 작성해줘"\n  * "특약사항 추가해줘"\n  * "계약서 수정안 만들어줘"\n\n## Chain-of-Thought Agent 선택 프로세스\n\n다음 단계를 **순서대로** 따라 최적의 Agent 조합을 선택하세요:\n\n### 1단계: 질문 요구사항 파악\n- 단순 정보 조회인가? → search_team만 필요\n- 판단/평가가 필요한가? → search + analysis 필요\n- 해결책 제시가 필요한가? → search + analysis 필요\n- 문서 생성이 필요한가? → document_team 추가\n\n### 2단계: 작업 복잡도 판단\n- **단순** (검색만): "~이 뭐야?", "~알려줘" → search_team\n- **중간** (검색+판단): "~괜찮아?", "~적절해?" → search + analysis\n- **복잡** (종합 해결): 구체적 상황 + "어떻게 해야 해?" → search + analysis\n\n### 3단계: 의존성 분석\n- 독립적 작업: 단일 팀으로 처리 가능\n- 순차적 의존: 이전 결과 필요 → 여러 팀 순서대로\n- 병렬 가능: 동시 조회 가능 → coordination: "parallel"\n\n### 4단계: 최종 검증\n- 선택한 팀들로 질문에 완전히 답변 가능한가?\n- 불필요한 팀이 포함되지 않았는가?\n- 순서가 논리적인가? (데이터 흐름 고려)\n\n### 중요 원칙:\n- **법률 키워드만으로 판단하지 말 것**: "법적으로 어떻게 해야 해?" = 법률 검색 + 분석 필요\n- **상황 설명 + 해결책 요청** = 반드시 analysis_team 포함\n- **구체적 수치 비교** (3억→10억 같은) = analysis_team 필요\n\n## 의도별 Agent 매핑 가이드 (기본 가이드 - CoT로 조정 가능)\n\n| 의도 (Intent) | 기본 조합 | 상황별 조정 |\n|--------------|-----------|-------------|\n| LEGAL_CONSULT | ["search_team"] | 해결책 요청시 → + analysis_team |\n| MARKET_INQUIRY | ["search_team"] | 비교/평가시 → + analysis_team |\n| LOAN_CONSULT | ["search_team", "analysis_team"] | 계산 필수 |\n| CONTRACT_CREATION | ["document_team"] | 검토 후 작성 → search + document |\n| CONTRACT_REVIEW | ["search_team", "analysis_team"] | 법률 검토 + 리스크 분석 |\n| COMPREHENSIVE | ["search_team", "analysis_team"] | **항상 분석 포함** |\n| RISK_ANALYSIS | ["analysis_team"] | 법률 근거 필요시 → search + analysis |\n| UNCLEAR | ["search_team", "analysis_team"] | 포괄적 대응 |\n\n**중요**: 위 매핑은 **기본 가이드**일 뿐입니다.\n실제 질문의 내용(CoT 분석 결과)에 따라 조정하세요!\n\n## 복합 질문 처리 예시 (CoT 적용)\n\n### 예시 1: 순차적 처리\n질문: "강남구 시세 확인하고 투자 가치 분석해줘"\n**CoT 분석**:\n1. 요구사항: 시세 조회 + 투자 가치 평가\n2. 복잡도: 중간 (검색 + 분석)\n3. 의존성: 시세 데이터 → 투자 분석 (순차)\n4. 검증: search만으로는 "투자 가치 평가" 불가능\n\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "1단계: 시세 조회+투자 평가 필요. 2단계: 중간 복잡도. 3단계: 순차 의존. 4단계: search로 시세 수집 후 analysis로 투자 가치 평가 필요",\n    "coordination": "sequential"\n}\n```\n\n### 예시 2: 단순 정보 조회\n질문: "전세금 인상률 한도가 얼마야?"\n**CoT 분석**:\n1. 요구사항: 단순 사실 확인\n2. 복잡도: 낮음 (정보 확인형)\n3. 의존성: 없음\n4. 검증: search_team만으로 충분\n\n```json\n{\n    "selected_agents": ["search_team"],\n    "reasoning": "1단계: 단순 정보 조회. 2단계: 저복잡도. 3단계: 독립적. 4단계: 법률 검색만으로 답변 가능",\n    "coordination": "single"\n}\n```\n\n### 예시 3: 해결책 요청 (핵심 예시!)\n질문: "집주인이 전세금 3억을 10억으로 올려달래. 법적으로 어떻게 해야 해?"\n의도: COMPREHENSIVE\n**CoT 분석**:\n1. 요구사항: 상황 설명 + 해결책 요청\n2. 복잡도: 높음 (구체적 상황 + 수치 비교)\n3. 의존성: 법률 확인 → 상황 분석 → 해결책 제시\n4. 검증: "법적으로"만 보고 search만 선택하면 불충분! 해결책 제시 필요\n\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "1단계: 법률 + 상황 분석 + 해결책 필요. 2단계: 고복잡도(3억→10억 비정상). 3단계: 순차(법률 확인 후 타당성 분석). 4단계: \'어떻게 해야\' = 단순 법률 조회 아님, 분석 필수",\n    "coordination": "sequential",\n    "confidence": 0.95\n}\n```\n\n## 응답 형식 (JSON)\n\n```json\n{\n    "selected_agents": ["선택된 agent/team 목록"],\n    "reasoning": "선택 이유를 구체적으로 설명. 각 Agent의 역할과 처리 순서 포함",\n    "coordination": "single/sequential/parallel/pipeline",\n    "dependencies": {"agent2": ["agent1"]},\n    "estimated_time": 30,\n    "confidence": 0.9\n}\n```\n\n## 선택 가이드라인\n\n1. **최소 Agent 원칙**: 가능한 적은 수의 Agent로 처리\n2. **전문성 우선**: 해당 작업에 가장 전문적인 Agent 선택\n3. **효율성 고려**: 병렬 처리 가능한 경우 명시\n4. **의존성 관리**: 데이터 흐름을 고려한 순서 지정\n5. **폴백 전략**: 불확실한 경우 ["search_team", "analysis_team"] 조합\n\n## 주의사항\n\n- selected_agents는 반드시 배열 형태\n- Agent 이름은 정확히: "search_team", "analysis_team", "document_team"\n- 최소 1개, 최대 3개 선택\n- 순서는 실행 우선순위 (앞에 있을수록 먼저 실행)\n- reasoning은 상세하고 논리적으로 작성\n- coordination 필드로 실행 방식 명시\n- 복합 질문의 경우 의존성 관계 명확히 표시'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 15:58:36,855 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 15:58:36,855 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 15:58:36,855 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 15:58:36,855 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 15:58:36,856 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 15:58:36,856 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 15:58:40,947 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 06:58:40 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'3819'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'3838'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9975'), (b'x-ratelimit-remaining-tokens', b'197879'), (b'x-ratelimit-reset-requests', b'3m33.698s'), (b'x-ratelimit-reset-tokens', b'636ms'), (b'x-request-id', b'req_1a0fac5c03d940d7a7ccd95f0b003404'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b08143c363091-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 15:58:40,947 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 15:58:40,947 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 15:58:40,947 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 15:58:40,947 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 15:58:40,947 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 15:58:40,947 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 06:58:40 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '3819', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '3838', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9975', 'x-ratelimit-remaining-tokens': '197879', 'x-ratelimit-reset-requests': '3m33.698s', 'x-ratelimit-reset-tokens': '636ms', 'x-request-id': 'req_1a0fac5c03d940d7a7ccd95f0b003404', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b08143c363091-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 15:58:40,947 - openai._base_client - DEBUG - request_id: req_1a0fac5c03d940d7a7ccd95f0b003404
2025-10-05 15:58:40,947 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: agent_selection | Model: gpt-4o-mini-2024-07-18 | Tokens: 2563 (prompt: 2372, completion: 191)
2025-10-05 15:58:40,947 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM agent selection reasoning: 1단계: 서초동 전세 시세 조회와 법적 주의사항에 대한 종합적인 분석이 필요. 2단계: 복잡한 질문으로, 단순 정보 조회가 아닌 법률적 측면과 시세 분석이 모두 포함됨. 3단계: 법률 정보 검색 후 시세 분석이 필요하므로 순차적 의존 관계가 형성됨. 4단계: 법적 주의사항을 확인하기 위해 search_team이 먼저 법률 정보를 수집하고, 그 후 analysis_team이 시세와 법적 리스크를 종합적으로 분석해야 함.
2025-10-05 15:58:40,947 - app.service_agent.cognitive_agents.planning_agent - INFO - ✅ Primary LLM selected agents: ['search_team', 'analysis_team']
2025-10-05 15:58:40,948 - app.service_agent.cognitive_agents.planning_agent - INFO - Intent analyzed: 종합분석 (confidence: 0.85)
2025-10-05 15:58:40,948 - app.service_agent.cognitive_agents.query_decomposer - INFO - Decomposing query: 서초동 전세 시세 알려주고 법적 주의사항도 알려줘...
2025-10-05 15:58:40,948 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-35de1a55-d3c7-48bf-86d0-d83f6f721edb', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 질문 분해 전문가입니다.\n복잡한 사용자 질문을 독립적으로 처리 가능한 작업 단위로 분해하는 것이 목표입니다.\n\n## Chain-of-Thought 분해 프로세스:\n\n### 1단계: 복합 질문 여부 판단\n- 단순 정보 조회만 필요한가? → is_compound: false\n- **다음 중 하나라도 해당하면 is_compound: true**:\n  * "그리고", "그 다음", "한 후" 같은 연결어로 여러 요청 연결\n  * 명시적으로 2개 이상의 작업 요청 (예: "시세 확인하고 대출 계산해줘")\n  * 상황 설명 + 해결책 요청 (예: "3억→10억 올려달래. 어떻게 해야 해?")\n  * 해결책을 위해 여러 단계 처리 필요 (검색 → 분석 → 제안)\n\n### 2단계: 필요 작업 식별\n- 정보 수집이 필요한가? → search 작업\n- 평가/판단이 필요한가? → analysis 작업\n- 문서 생성이 필요한가? → generation 작업\n- **해결책 요청**인가? → search + analysis (최소 2개)\n\n### 3단계: 작업 순서 결정\n- 독립적 작업: 병렬 가능\n- 이전 결과 필요: 순차 실행 (depends_on 설정)\n\n## 중요 원칙:\n1. 각 작업은 하나의 명확한 목표를 가져야 합니다\n2. 작업 간 의존성을 명확히 파악해야 합니다\n3. 병렬 처리 가능한 작업은 구분해야 합니다\n4. **주의**: "어떻게 해야", "방법 알려줘" 같은 해결책 요청은 복합 질문!\n\n## 작업 유형 (type):\n- search: 정보 검색 (법률, 시세, 대출 정보 등)\n- analysis: 데이터 분석 (리스크 평가, 시장 분석 등)\n- generation: 문서 생성 (계약서 작성 등)\n- review: 검토/평가 (계약서 검토, 조건 확인 등)\n- calculation: 계산/산출 (대출 한도, 세금 등)\n- comparison: 비교 분석 (여러 옵션 비교)\n\n## 담당 팀 (agent):\n- search_team: 법률, 시세, 대출 정보 검색\n- analysis_team: 데이터 분석, 리스크 평가, 계산\n- document_team: 문서 생성, 계약서 작성\n\n## 학습 예시:\n\n### 예시 1: 복합 질문 (순차적)\n질문: "강남구 아파트 시세 확인하고 대출 가능 금액 계산해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "강남구 아파트 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "대출 가능 금액 계산",\n            "type": "calculation",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "required_data": {"price": "task_0.result.price"},\n            "estimated_time": 15\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "시세 정보가 있어야 대출 금액 계산이 가능하므로 순차 실행"\n}\n```\n\n### 예시 2: 복합 질문 (병렬 가능)\n질문: "이 지역 전세 시세와 매매 시세 모두 알려주고 비교 분석해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "전세 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "매매 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "전세/매매 시세 비교 분석",\n            "type": "comparison",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0", "task_1"],\n            "required_data": {\n                "lease_price": "task_0.result",\n                "sale_price": "task_1.result"\n            },\n            "estimated_time": 25\n        }\n    ],\n    "execution_mode": "mixed",\n    "parallel_groups": [["task_0", "task_1"], ["task_2"]],\n    "reasoning": "시세 조회는 독립적이므로 병렬 처리, 비교는 두 결과 필요"\n}\n```\n\n### 예시 3: 복합 질문 (3단계 이상)\n질문: "이 계약서 검토해서 위험한 부분 찾고 수정안 만들어서 최종 계약서 작성해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "계약서 내용 전체 검토",\n            "type": "review",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 30\n        },\n        {\n            "description": "위험 요소 및 문제점 분석",\n            "type": "analysis",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "estimated_time": 25\n        },\n        {\n            "description": "수정안 제안 생성",\n            "type": "generation",\n            "agent": "document_team",\n            "priority": 3,\n            "depends_on": ["task_1"],\n            "estimated_time": 20\n        },\n        {\n            "description": "최종 계약서 작성",\n            "type": "generation",\n            "agent": "document_team",\n            "priority": 4,\n            "depends_on": ["task_2"],\n            "estimated_time": 30\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "각 단계가 이전 결과에 의존하므로 순차 실행 필요"\n}\n```\n\n### 예시 4: 단순 질문 (분해 불필요)\n질문: "전세금 인상률 상한이 얼마야?"\n분해:\n```json\n{\n    "is_compound": false,\n    "sub_tasks": [\n        {\n            "description": "전세금 인상률 상한 법률 정보 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 15\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "단일 정보 조회 요청으로 분해 불필요"\n}\n```\n\n### 예시 5: 조건부 실행\n질문: "이 물건 시세 확인하고 적정가면 대출 상담도 받고 싶어"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "물건 시세 조회 및 적정성 평가",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 25\n        },\n        {\n            "description": "대출 상담 정보 제공",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "optional": true,\n            "context": {"condition": "if_reasonable_price"},\n            "estimated_time": 20\n        }\n    ],\n    "execution_mode": "conditional",\n    "reasoning": "시세 확인 결과에 따라 대출 상담 진행 여부 결정"\n}\n```\n\n### 예시 6: 상황 설명 + 해결책 요청 (핵심 패턴!)\n질문: "집주인이 전세금 3억을 10억으로 올려달래. 법적으로 어떻게 해야 해?"\n**CoT 분석**:\n1. 질문 분석: 상황 설명 + 해결책 요청\n2. 연결어: 없지만, "어떻게 해야" = 해결책 요청\n3. 의존성: 법률 확인 → 상황 분석 → 대응 방안\n4. 복합 여부: **YES** (해결책을 위해 여러 단계 필요)\n\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "전세금 인상 한도 관련 법률 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "3억→10억 인상의 법적 타당성 및 적정성 분석",\n            "type": "analysis",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "required_data": {"legal_limit": "task_0.result", "current": 300000000, "requested": 1000000000},\n            "estimated_time": 25\n        },\n        {\n            "description": "구체적 대응 방안 및 해결책 제시",\n            "type": "analysis",\n            "agent": "analysis_team",\n            "priority": 3,\n            "depends_on": ["task_1"],\n            "estimated_time": 20\n        }\n    ],\n    "execution_mode": "sequential",\n    "confidence": 0.95,\n    "reasoning": "상황 설명+해결책 요청 패턴. \'어떻게 해야\'는 단순 정보 조회가 아닌 종합 해결책 필요. 법률 조회 → 상황 분석 → 해결책 제시 3단계 순차 처리"\n}\n```\n\n## Chain-of-Thought 프로세스:\n\n1. **질문 분석**: 어떤 정보나 작업을 요구하는가?\n2. **연결어 확인**: "그리고", "또한", "해서", "한 후" 등이 있는가?\n3. **의존성 파악**: 어떤 작업이 다른 작업의 결과를 필요로 하는가?\n4. **병렬성 판단**: 독립적으로 실행 가능한 작업이 있는가?\n5. **최적화**: 불필요한 분해는 없는가?\n\n## 응답 형식 (JSON):\n\n{\n    "is_compound": true/false,\n    "sub_tasks": [\n        {\n            "description": "작업 설명",\n            "type": "작업 유형",\n            "agent": "담당 팀",\n            "priority": 우선순위 (1이 가장 높음),\n            "depends_on": ["선행 작업 ID 리스트"],\n            "required_data": {"필요한 데이터 매핑"},\n            "estimated_time": 예상 소요 시간(초),\n            "optional": true/false,\n            "context": {"추가 컨텍스트"}\n        }\n    ],\n    "execution_mode": "sequential/parallel/mixed/conditional",\n    "parallel_groups": [["병렬 실행 가능한 작업 ID 그룹"]],\n    "confidence": 0.0-1.0,\n    "reasoning": "분해 결정의 이유와 근거"\n}\n\n## 분해 가이드라인:\n\n1. **분해가 필요한 경우**:\n   - 여러 종류의 정보를 요청하는 경우\n   - 순차적 처리가 필요한 경우 (A의 결과로 B 수행)\n   - 서로 다른 팀의 전문성이 필요한 경우\n\n2. **분해가 불필요한 경우**:\n   - 단일 정보 조회\n   - 단순한 질문-답변\n   - 하나의 팀에서 완전히 처리 가능한 경우\n\n3. **병렬 처리 기준**:\n   - 서로 독립적인 정보 조회\n   - 의존성이 없는 분석 작업\n   - 동시에 진행해도 충돌하지 않는 작업\n\n4. **우선순위 설정**:\n   - 의존성이 없는 작업: priority 1\n   - 1차 의존 작업: priority 2\n   - 2차 의존 작업: priority 3\n   - 이런 식으로 증가\n\n현재 의도: 종합분석\n추출된 엔티티: {\'location\': \'서초동\', \'contract_type\': \'전세\', \'action_verbs\': [\'알려줘\', \'확인\']}\n\n분석할 질문: 서초동 전세 시세 알려주고 법적 주의사항도 알려줘'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 15:58:40,948 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 15:58:40,948 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 15:58:40,949 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 15:58:40,949 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 15:58:40,949 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 15:58:40,949 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 15:58:43,185 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 06:58:43 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'2031'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'2048'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9974'), (b'x-ratelimit-remaining-tokens', b'197310'), (b'x-ratelimit-reset-requests', b'3m38.579s'), (b'x-ratelimit-reset-tokens', b'807ms'), (b'x-request-id', b'req_b18ccad87f82406c950a9d8b8fff50e3'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b082dcc593091-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 15:58:43,186 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 15:58:43,186 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 15:58:43,186 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 15:58:43,186 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 15:58:43,186 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 15:58:43,186 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 06:58:43 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '2031', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '2048', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9974', 'x-ratelimit-remaining-tokens': '197310', 'x-ratelimit-reset-requests': '3m38.579s', 'x-ratelimit-reset-tokens': '807ms', 'x-request-id': 'req_b18ccad87f82406c950a9d8b8fff50e3', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b082dcc593091-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 15:58:43,186 - openai._base_client - DEBUG - request_id: req_b18ccad87f82406c950a9d8b8fff50e3
2025-10-05 15:58:43,186 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: query_decomposition | Model: gpt-4o-mini-2024-07-18 | Tokens: 2906 (prompt: 2726, completion: 180)
2025-10-05 15:58:43,186 - app.service_agent.cognitive_agents.query_decomposer - INFO - Successfully decomposed into 2 tasks
2025-10-05 15:58:43,186 - app.service_agent.cognitive_agents.planning_agent - INFO - Query decomposed into 2 tasks
2025-10-05 15:58:43,186 - app.service_agent.cognitive_agents.planning_agent - WARNING - Plan validation errors: ["Agent 'search_team' not found in registry", "Agent 'search_team' not found in registry"]
2025-10-05 15:58:43,186 - app.service_agent.cognitive_agents.planning_agent - INFO - Optimizing execution plan
2025-10-05 15:58:43,186 - app.service_agent.cognitive_agents.planning_agent - INFO - Comprehensive plan created: Intent: 종합분석 (confidence: 0.85) | Strategy: parallel | Agents: search_team, search_team | Estimated time: 20.0s | Parallel groups: [['search_team']]
2025-10-05 15:58:43,187 - __main__ - INFO -   전략: parallel
2025-10-05 15:58:43,187 - __main__ - INFO -   단계 수: 2
2025-10-05 15:58:43,187 - __main__ - INFO - 
✓ 테스트 성공 (소요시간: 23.33초)
2025-10-05 15:58:43,187 - __main__ - INFO - 
================================================================================
2025-10-05 15:58:43,187 - __main__ - INFO - [23] 복합 질문 테스트: D003
2025-10-05 15:58:43,187 - __main__ - INFO - 질문: 이 계약서 검토하고 위험 요소 분석해줘
2025-10-05 15:58:43,187 - __main__ - INFO - ================================================================================
2025-10-05 15:58:43,187 - __main__ - INFO - 
[Step 1] Intent 분석...
2025-10-05 15:58:43,187 - app.service_agent.cognitive_agents.planning_agent - INFO - Analyzing intent for query: 이 계약서 검토하고 위험 요소 분석해줘...
2025-10-05 15:58:43,187 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-a0154e85-432b-465a-a88f-4a6b2b6dcb7f', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 의도 분석 전문가입니다.\n사용자의 질문을 정확히 이해하고, 어떤 종류의 도움이 필요한지 분류해야 합니다.\n\n## Chain-of-Thought 분석 프로세스\n\n질문을 분석할 때 다음 단계를 **순서대로** 따르세요:\n\n### 1단계: 질문 구조 파악\n- 단순 정보 요청인가? (예: "~이 뭐야?", "~알려줘")\n- 상황 설명이 포함되어 있는가? (배경, 현재 상태)\n- 구체적 수치나 데이터가 있는가? (금액, 비율, 기간 등)\n- 문제 해결을 요구하는가? (예: "어떻게 해야 해?", "방법 알려줘")\n\n### 2단계: 요청 유형 판단\n- **정보 확인형**: 사실, 개념, 규정 확인 → 검색만으로 충분\n- **평가/판단형**: "괜찮아?", "적절해?", "문제있어?" → 검색 + 분석 필요\n- **해결책 요청형**: "어떻게?", "방법?", "대처?" → 검색 + 분석 + 제안 필요\n- **비교/선택형**: "A vs B", "어느게 나아?" → 검색 + 분석(비교) 필요\n\n### 3단계: 복잡도 평가\n- **저**: 단일 개념/사실 확인 (예: "전세금 인상률 한도?")\n- **중**: 특정 상황 + 판단 (예: "3억을 5억으로 올려달래. 가능해?")\n- **고**: 복잡한 상황 + 여러 조건 + 해결책 (예: "10년 거주, 3억→10억 요구. 어떻게 해야 해?")\n\n### 4단계: 필요한 처리 결정\n- **검색만**: 정보 확인형 + 저복잡도\n- **검색+분석**: 평가/판단형 OR 중복잡도 OR 수치 비교 포함\n- **종합처리**: 해결책 요청형 OR 고복잡도 OR 여러 조건 동시 고려\n\n### 5단계: 최종 검증\n- 선택한 의도로 사용자 질문에 완전히 답변 가능한가?\n- 단순 정보 제공으로 끝나는가, 아니면 추가 분석/판단이 필요한가?\n- 상황 설명이 있으면서 "해결", "방법", "어떻게" 등이 있으면 → COMPREHENSIVE 고려\n\n## 중요: 복합 질문 처리\n복합적인 질문(여러 의도가 섞인 질문)의 경우, 가장 핵심적인 의도를 파악하되,\nsub_intents 필드에 부가적인 의도들도 함께 기록해주세요.\n\n**특히 주의**:\n- 법률 키워드가 있어도, "해결방법", "어떻게 해야" 같은 표현이 있으면 단순 LEGAL_CONSULT가 아닐 수 있음\n- 구체적 상황(금액, 기간 등) + 해결책 요구 = COMPREHENSIVE 또는 복합 의도로 분류\n\n## 분류 카테고리 설명:\n\n1. **LEGAL_CONSULT (법률상담)**\n   - 설명: 부동산 관련 법률, 권리, 의무에 대한 질문\n   - 예시:\n     * 단순: "전세금 5% 인상이 가능한가요?", "임대차계약 갱신 거부할 수 있나요?"\n     * 복합: "전세금 인상 가능한지 확인하고 법적 근거도 알려주세요"\n   - 키워드: 법, 전세, 임대, 보증금, 계약, 권리, 의무, 갱신, 임차인, 임대인, 법률, 규정, 조항\n   - 필요한 처리: 법률 데이터베이스 검색, 관련 법조항 찾기\n\n2. **MARKET_INQUIRY (시세조회)**\n   - 설명: 부동산 시장 가격, 시세, 거래 동향에 대한 질문\n   - 예시:\n     * 단순: "강남구 아파트 전세 시세 알려주세요", "서초동 매매가 얼마나 올랐나요?"\n     * 복합: "강남구 시세 확인하고 대출 가능 금액도 계산해줘"\n   - 키워드: 시세, 가격, 매매가, 전세가, 월세, 시장, 동향, 평균, 지역명, 상승률, 하락률\n   - 필요한 처리: 부동산 시세 데이터 조회, 지역별 가격 분석\n\n3. **LOAN_CONSULT (대출상담)**\n   - 설명: 주택담보대출, 전세자금대출 등 금융 관련 질문\n   - 예시:\n     * 단순: "전세자금대출 한도가 얼마인가요?", "LTV가 뭔가요?"\n     * 복합: "대출 한도 확인하고 금리 비교도 해주세요"\n   - 키워드: 대출, 금리, 한도, 조건, 상환, LTV, DTI, DSR, 담보, 금융, 은행\n   - 필요한 처리: 대출 상품 조회, 금리 정보 검색, 한도 계산\n\n4. **CONTRACT_CREATION (계약서작성)**\n   - 설명: 새로운 계약서나 문서를 작성해달라는 요청\n   - 예시:\n     * 단순: "임대차계약서 작성해주세요", "전세계약서 초안 만들어주세요"\n     * 복합: "계약서 작성하고 주의사항도 검토해주세요"\n   - 키워드: 작성, 만들, 생성, 초안, 계약서, 문서, 양식\n   - 필요한 처리: 문서 생성 에이전트 호출, 템플릿 기반 작성\n\n5. **CONTRACT_REVIEW (계약서검토)**\n   - 설명: 기존 계약서나 문서를 검토해달라는 요청\n   - 예시:\n     * 단순: "이 계약서 검토해주세요", "특약사항 문제없나요?"\n     * 복합: "계약서 검토하고 수정사항도 제안해주세요"\n   - 키워드: 검토, 확인, 점검, 리뷰, 분석해, 살펴봐, 체크\n   - 필요한 처리: 문서 분석, 위험 요소 식별, 개선사항 제안\n\n6. **COMPREHENSIVE (종합분석)**\n   - 설명: 여러 측면을 종합적으로 분석해달라는 요청, 또는 복잡한 상황에 대한 해결책 요청\n   - 예시:\n     * 단순: "이 물건 전체적으로 분석해주세요"\n     * 복합: "시세, 법률, 대출 모두 검토해서 종합 의견 주세요"\n     * 해결형: "10년 거주했는데 전세금 3억을 10억으로 올려달래. 어떻게 해야 해?"\n     * 상황+해결: "집주인이 계약 갱신 거부했어. 법적으로 어떻게 대응해야 할까?"\n   - 키워드: 종합, 전체, 모든, 전반적, 종합적, 평가, 분석, 어떻게, 방법, 해결, 대처\n   - 패턴: 구체적 상황 설명 + "어떻게/방법/해결" 요청\n   - 필요한 처리: 다중 데이터 소스 통합 분석, 상황 평가, 해결책 제시\n\n7. **RISK_ANALYSIS (리스크분석)**\n   - 설명: 위험 요소나 주의사항에 대한 질문\n   - 예시:\n     * 단순: "이 계약 위험한가요?", "주의할 점 알려주세요"\n     * 복합: "리스크 분석하고 대안도 제시해주세요"\n   - 키워드: 위험, 리스크, 주의, 문제점, 조심, 걱정, 우려\n   - 필요한 처리: 위험 요소 분석, 주의사항 추출\n\n8. **UNCLEAR (불분명)**\n   - 설명: 의도를 명확히 파악하기 어려운 질문\n   - 예시: "이거 좀 봐주세요", "어떻게 해야 할까요?", "도와주세요"\n   - 처리: 추가 질문으로 의도 명확화 필요\n\n9. **IRRELEVANT (무관)**\n   - 설명: 부동산과 전혀 관련 없는 질문\n   - 예시: "날씨 어때?", "저녁 뭐 먹지?", "주식 추천해줘"\n   - 처리: 부동산 관련 질문을 유도\n\n## 복합 질문 예시와 분석 (CoT 적용):\n\n### 예시 1: "강남구 아파트 시세 알려주고 전세자금대출 가능한지도 확인해줘"\n**CoT 분석**:\n1. 구조: 두 개의 요청 ("시세" + "대출")\n2. 유형: 정보 확인형 (둘 다)\n3. 복잡도: 중 (두 가지 독립적 조회)\n4. 필요 처리: 검색 + 계산/분석\n\n**결론**:\n- 주 의도: MARKET_INQUIRY (시세 조회가 먼저 필요)\n- 부가 의도: LOAN_CONSULT (대출 확인)\n- 분해: ["강남구 아파트 시세 조회", "전세자금대출 가능 여부 확인"]\n\n### 예시 2: "이 계약서 검토해서 위험한 부분 있는지 알려주고 수정 제안도 해줘"\n**CoT 분석**:\n1. 구조: 검토 + 위험 평가 + 수정안\n2. 유형: 평가/판단형 + 해결책 요청형\n3. 복잡도: 고 (3단계 처리)\n4. 필요 처리: 검토 + 분석 + 문서 생성\n\n**결론**:\n- 주 의도: CONTRACT_REVIEW (계약서 검토)\n- 부가 의도: RISK_ANALYSIS (위험 분석)\n- 분해: ["계약서 전체 검토", "위험 요소 식별", "수정사항 제안"]\n\n### 예시 3: "집주인이 짜증나, 10년 살았는데 전세금 3억을 10억으로 올려달래. 법적으로 해결방법 알려줘"\n**CoT 분석**:\n1. 구조: 상황 설명 (10년 거주, 3억→10억) + 해결책 요청\n2. 유형: 해결책 요청형 (단순 정보 X)\n3. 복잡도: 고 (구체적 상황 + 수치 비교 + 법률 + 대응방안)\n4. 필요 처리: 법률 검색 + 상황 분석 + 해결책 제시\n\n**결론**:\n- 주 의도: COMPREHENSIVE (복잡한 상황에 대한 종합 해결)\n- 부가 의도: LEGAL_CONSULT, RISK_ANALYSIS\n- 분해: ["전세금 인상 한도 법률 조회", "3억→10억 인상의 타당성 분석", "구체적 대응 방안 제시"]\n- **이유**: "법적으로"라는 키워드가 있지만, 단순 법률 확인이 아니라 구체적 상황에 대한 해결책을 요구하므로 COMPREHENSIVE\n\n### 예시 4: "전세금 인상률 상한이 얼마야?"\n**CoT 분석**:\n1. 구조: 단순 사실 확인\n2. 유형: 정보 확인형\n3. 복잡도: 저 (단일 개념)\n4. 필요 처리: 검색만\n\n**결론**:\n- 주 의도: LEGAL_CONSULT (법률 정보 조회)\n- 부가 의도: 없음\n- 분해: 필요 없음\n\n## 응답 형식 (JSON 형식으로 응답):\n\n```json\n{\n    "intent": "LEGAL_CONSULT",\n    "confidence": 0.9,\n    "keywords": ["전세금", "인상", "제한"],\n    "sub_intents": [],\n    "is_compound": false,\n    "decomposed_tasks": [],\n    "entities": {\n        "location": "강남구",\n        "price": "5억",\n        "contract_type": "전세",\n        "date": "2024년",\n        "area": "84㎡",\n        "action_verbs": ["확인", "검토"]\n    },\n    "reasoning": "전세금 인상에 대한 법률 질문이므로 LEGAL_CONSULT로 분류"\n}\n```\n\n응답 규칙:\n- intent: 위 9개 카테고리 중 하나 (대문자_언더스코어 형식)\n- confidence: 0.0~1.0 (0.8 이상이면 매우 확실, 0.5 미만이면 불확실)\n- keywords: 추출된 주요 키워드 목록\n- sub_intents: 복합 질문일 경우 부가적인 의도들\n- is_compound: 복합 질문 여부 (true/false)\n- decomposed_tasks: 복합 질문을 분해한 개별 작업들\n- entities: 추출된 엔티티 정보\n- reasoning: **반드시 CoT 5단계를 거쳐 분석한 과정을 포함** (구조 파악 → 유형 판단 → 복잡도 평가 → 필요 처리 → 최종 검증)\n\n## reasoning 작성 예시:\n"1단계(구조): 상황 설명(10년 거주, 3억→10억) + 해결책 요청 포함.\n2단계(유형): 해결책 요청형 - 단순 정보가 아닌 대응방안 필요.\n3단계(복잡도): 고 - 구체적 수치 비교와 복잡한 상황.\n4단계(처리): 법률 검색 + 상황 분석 + 해결책 제시 필요.\n5단계(검증): LEGAL_CONSULT만으로는 불충분, 종합적 분석 필요 → COMPREHENSIVE 선택"\n\n## 판단 가이드:\n- 여러 의도가 섞여있다면, 가장 주된 의도를 intent에, 나머지를 sub_intents에 기록\n- "그리고", "또한", "함께", "같이" 등의 연결어가 있으면 복합 질문일 가능성 높음\n- 법률 관련 키워드가 있으면 LEGAL_CONSULT 우선\n- 가격/시세 언급이 명확하면 MARKET_INQUIRY\n- 계약서라는 단어와 함께 "작성/만들기"가 있으면 CONTRACT_CREATION\n- 계약서라는 단어와 함께 "검토/확인"이 있으면 CONTRACT_REVIEW\n- 불확실하면 confidence를 낮게 설정하고 UNCLEAR 선택\n- 복합 질문은 is_compound를 true로 설정하고 개별 작업으로 분해\n\n분석할 질문: 이 계약서 검토하고 위험 요소 분석해줘'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 15:58:43,188 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 15:58:43,188 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 15:58:43,189 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 15:58:43,189 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 15:58:43,189 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 15:58:43,189 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 15:58:47,397 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 06:58:47 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'3965'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'3991'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9973'), (b'x-ratelimit-remaining-tokens', b'197242'), (b'x-ratelimit-reset-requests', b'3m44.667s'), (b'x-ratelimit-reset-tokens', b'827ms'), (b'x-request-id', b'req_7b4533ede6564f2b8505d25678c08dcc'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b083bca4a3091-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 15:58:47,397 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 15:58:47,398 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 15:58:47,398 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 15:58:47,398 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 15:58:47,398 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 15:58:47,398 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 06:58:47 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '3965', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '3991', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9973', 'x-ratelimit-remaining-tokens': '197242', 'x-ratelimit-reset-requests': '3m44.667s', 'x-ratelimit-reset-tokens': '827ms', 'x-request-id': 'req_7b4533ede6564f2b8505d25678c08dcc', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b083bca4a3091-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 15:58:47,398 - openai._base_client - DEBUG - request_id: req_7b4533ede6564f2b8505d25678c08dcc
2025-10-05 15:58:47,398 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: intent_analysis | Model: gpt-4o-mini-2024-07-18 | Tokens: 3424 (prompt: 3180, completion: 244)
2025-10-05 15:58:47,398 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM Intent Analysis Result: {'intent': 'CONTRACT_REVIEW', 'confidence': 0.85, 'keywords': ['계약서', '검토', '위험', '분석'], 'sub_intents': ['RISK_ANALYSIS'], 'is_compound': True, 'decomposed_tasks': ['계약서 검토', '위험 요소 분석'], 'entities': {'contract_type': '계약서', 'action_verbs': ['검토', '분석']}, 'reasoning': '1단계(구조): 계약서 검토 요청과 위험 요소 분석 요청이 포함됨. 2단계(유형): 계약서 검토와 위험 분석이 모두 포함되어 있어 평가/판단형과 해결책 요청형의 복합 요청. 3단계(복잡도): 고 - 두 가지 작업이 동시에 요구됨. 4단계(처리): 계약서 검토와 위험 요소 분석이 필요함. 5단계(검증): 단순 계약서 검토만으로는 부족하므로 RISK_ANALYSIS도 포함되어야 함.'}
2025-10-05 15:58:47,399 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-29c4c82e-9a87-4a21-a228-f51233a1ba06', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 Agent 선택 전문가입니다.\n사용자의 요청에 가장 적합한 Agent/Team을 선택하는 것이 목표입니다.\n\n## 현재 상황\n\n**사용자 질문:** 이 계약서 검토하고 위험 요소 분석해줘\n**분석된 의도:** 계약서검토\n**추출된 키워드:** [\'계약서\', \'검토\', \'위험\', \'분석\']\n\n## 사용 가능한 Agent/Team 정보\n\n{\'search_team\': {\'name\': \'search_team\', \'capabilities\': \'법률 검색, 부동산 시세 조회, 대출 상품 검색\', \'tools\': [\'legal_search\', \'market_data\', \'loan_data\'], \'use_cases\': [\'법률 상담\', \'시세 조회\', \'대출 정보\']}, \'analysis_team\': {\'name\': \'analysis_team\', \'capabilities\': \'데이터 분석, 리스크 평가, 인사이트 생성, 추천\', \'tools\': [\'data_analyzer\', \'risk_evaluator\'], \'use_cases\': [\'시장 분석\', \'리스크 평가\', \'투자 분석\']}, \'document_team\': {\'name\': \'document_team\', \'capabilities\': \'계약서 작성, 문서 생성, 문서 검토\', \'tools\': [\'document_generator\', \'contract_reviewer\'], \'use_cases\': [\'계약서 작성\', \'문서 검토\']}}\n\n## Agent 역할 및 상세 가이드\n\n### 1. search_team (검색 팀)\n- **주요 기능**: 정보 검색 및 데이터 수집\n- **전문 분야**:\n  * 법률 정보 검색 (전세법, 임대차보호법, 부동산 관련 법규)\n  * 부동산 시세 조회 (매매가, 전세가, 월세, 실거래가)\n  * 대출 상품 정보 검색 (금리, 한도, 조건)\n  * 지역 정보 및 인프라 조회\n- **도구**: legal_search, market_data, loan_data\n- **적합한 작업**: 정보 조회, 데이터 수집, 법률 확인, 시세 파악\n- **예시**:\n  * "전세금 5% 인상 가능한가요?"\n  * "강남구 아파트 전세 시세"\n  * "전세자금대출 한도 얼마?"\n\n### 2. analysis_team (분석 팀)\n- **주요 기능**: 데이터 분석 및 평가\n- **전문 분야**:\n  * 시장 동향 분석 (상승률, 하락률, 추세)\n  * 리스크 평가 (계약, 투자 위험도)\n  * 투자 수익률 계산 (ROI, 월세 수익률)\n  * 대출 한도 및 조건 분석 (LTV, DTI, DSR)\n  * 비교 분석 (지역별, 상품별)\n- **도구**: data_analyzer, risk_evaluator, calculator\n- **적합한 작업**: 데이터 분석, 리스크 평가, 계산, 비교, 예측\n- **의존성**: 보통 search_team의 데이터가 필요\n- **예시**:\n  * "이 지역 투자 가치 분석해줘"\n  * "계약 리스크 평가해줘"\n  * "대출 가능 금액 계산해줘"\n\n### 3. document_team (문서 팀)\n- **주요 기능**: 문서 생성 및 관리\n- **전문 분야**:\n  * 계약서 작성 (임대차, 매매, 전세)\n  * 문서 템플릿 관리\n  * 특약사항 생성\n  * 계약서 수정안 작성\n  * 법률 문서 검토\n- **도구**: document_generator, contract_template, contract_reviewer\n- **적합한 작업**: 문서 작성, 계약서 생성, 문서 수정, 검토\n- **예시**:\n  * "임대차계약서 작성해줘"\n  * "특약사항 추가해줘"\n  * "계약서 수정안 만들어줘"\n\n## Chain-of-Thought Agent 선택 프로세스\n\n다음 단계를 **순서대로** 따라 최적의 Agent 조합을 선택하세요:\n\n### 1단계: 질문 요구사항 파악\n- 단순 정보 조회인가? → search_team만 필요\n- 판단/평가가 필요한가? → search + analysis 필요\n- 해결책 제시가 필요한가? → search + analysis 필요\n- 문서 생성이 필요한가? → document_team 추가\n\n### 2단계: 작업 복잡도 판단\n- **단순** (검색만): "~이 뭐야?", "~알려줘" → search_team\n- **중간** (검색+판단): "~괜찮아?", "~적절해?" → search + analysis\n- **복잡** (종합 해결): 구체적 상황 + "어떻게 해야 해?" → search + analysis\n\n### 3단계: 의존성 분석\n- 독립적 작업: 단일 팀으로 처리 가능\n- 순차적 의존: 이전 결과 필요 → 여러 팀 순서대로\n- 병렬 가능: 동시 조회 가능 → coordination: "parallel"\n\n### 4단계: 최종 검증\n- 선택한 팀들로 질문에 완전히 답변 가능한가?\n- 불필요한 팀이 포함되지 않았는가?\n- 순서가 논리적인가? (데이터 흐름 고려)\n\n### 중요 원칙:\n- **법률 키워드만으로 판단하지 말 것**: "법적으로 어떻게 해야 해?" = 법률 검색 + 분석 필요\n- **상황 설명 + 해결책 요청** = 반드시 analysis_team 포함\n- **구체적 수치 비교** (3억→10억 같은) = analysis_team 필요\n\n## 의도별 Agent 매핑 가이드 (기본 가이드 - CoT로 조정 가능)\n\n| 의도 (Intent) | 기본 조합 | 상황별 조정 |\n|--------------|-----------|-------------|\n| LEGAL_CONSULT | ["search_team"] | 해결책 요청시 → + analysis_team |\n| MARKET_INQUIRY | ["search_team"] | 비교/평가시 → + analysis_team |\n| LOAN_CONSULT | ["search_team", "analysis_team"] | 계산 필수 |\n| CONTRACT_CREATION | ["document_team"] | 검토 후 작성 → search + document |\n| CONTRACT_REVIEW | ["search_team", "analysis_team"] | 법률 검토 + 리스크 분석 |\n| COMPREHENSIVE | ["search_team", "analysis_team"] | **항상 분석 포함** |\n| RISK_ANALYSIS | ["analysis_team"] | 법률 근거 필요시 → search + analysis |\n| UNCLEAR | ["search_team", "analysis_team"] | 포괄적 대응 |\n\n**중요**: 위 매핑은 **기본 가이드**일 뿐입니다.\n실제 질문의 내용(CoT 분석 결과)에 따라 조정하세요!\n\n## 복합 질문 처리 예시 (CoT 적용)\n\n### 예시 1: 순차적 처리\n질문: "강남구 시세 확인하고 투자 가치 분석해줘"\n**CoT 분석**:\n1. 요구사항: 시세 조회 + 투자 가치 평가\n2. 복잡도: 중간 (검색 + 분석)\n3. 의존성: 시세 데이터 → 투자 분석 (순차)\n4. 검증: search만으로는 "투자 가치 평가" 불가능\n\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "1단계: 시세 조회+투자 평가 필요. 2단계: 중간 복잡도. 3단계: 순차 의존. 4단계: search로 시세 수집 후 analysis로 투자 가치 평가 필요",\n    "coordination": "sequential"\n}\n```\n\n### 예시 2: 단순 정보 조회\n질문: "전세금 인상률 한도가 얼마야?"\n**CoT 분석**:\n1. 요구사항: 단순 사실 확인\n2. 복잡도: 낮음 (정보 확인형)\n3. 의존성: 없음\n4. 검증: search_team만으로 충분\n\n```json\n{\n    "selected_agents": ["search_team"],\n    "reasoning": "1단계: 단순 정보 조회. 2단계: 저복잡도. 3단계: 독립적. 4단계: 법률 검색만으로 답변 가능",\n    "coordination": "single"\n}\n```\n\n### 예시 3: 해결책 요청 (핵심 예시!)\n질문: "집주인이 전세금 3억을 10억으로 올려달래. 법적으로 어떻게 해야 해?"\n의도: COMPREHENSIVE\n**CoT 분석**:\n1. 요구사항: 상황 설명 + 해결책 요청\n2. 복잡도: 높음 (구체적 상황 + 수치 비교)\n3. 의존성: 법률 확인 → 상황 분석 → 해결책 제시\n4. 검증: "법적으로"만 보고 search만 선택하면 불충분! 해결책 제시 필요\n\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "1단계: 법률 + 상황 분석 + 해결책 필요. 2단계: 고복잡도(3억→10억 비정상). 3단계: 순차(법률 확인 후 타당성 분석). 4단계: \'어떻게 해야\' = 단순 법률 조회 아님, 분석 필수",\n    "coordination": "sequential",\n    "confidence": 0.95\n}\n```\n\n## 응답 형식 (JSON)\n\n```json\n{\n    "selected_agents": ["선택된 agent/team 목록"],\n    "reasoning": "선택 이유를 구체적으로 설명. 각 Agent의 역할과 처리 순서 포함",\n    "coordination": "single/sequential/parallel/pipeline",\n    "dependencies": {"agent2": ["agent1"]},\n    "estimated_time": 30,\n    "confidence": 0.9\n}\n```\n\n## 선택 가이드라인\n\n1. **최소 Agent 원칙**: 가능한 적은 수의 Agent로 처리\n2. **전문성 우선**: 해당 작업에 가장 전문적인 Agent 선택\n3. **효율성 고려**: 병렬 처리 가능한 경우 명시\n4. **의존성 관리**: 데이터 흐름을 고려한 순서 지정\n5. **폴백 전략**: 불확실한 경우 ["search_team", "analysis_team"] 조합\n\n## 주의사항\n\n- selected_agents는 반드시 배열 형태\n- Agent 이름은 정확히: "search_team", "analysis_team", "document_team"\n- 최소 1개, 최대 3개 선택\n- 순서는 실행 우선순위 (앞에 있을수록 먼저 실행)\n- reasoning은 상세하고 논리적으로 작성\n- coordination 필드로 실행 방식 명시\n- 복합 질문의 경우 의존성 관계 명확히 표시'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 15:58:47,399 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 15:58:47,400 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 15:58:47,400 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 15:58:47,400 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 15:58:47,402 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 15:58:47,402 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 15:58:49,759 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 06:58:49 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'2140'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'2171'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9973'), (b'x-ratelimit-remaining-tokens', b'197886'), (b'x-ratelimit-reset-requests', b'3m49.083s'), (b'x-ratelimit-reset-tokens', b'634ms'), (b'x-request-id', b'req_f9952b34656041cda2d35d19f4270276'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b08561c9d3091-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 15:58:49,760 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 15:58:49,760 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 15:58:49,766 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 15:58:49,766 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 15:58:49,766 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 15:58:49,766 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 06:58:49 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '2140', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '2171', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9973', 'x-ratelimit-remaining-tokens': '197886', 'x-ratelimit-reset-requests': '3m49.083s', 'x-ratelimit-reset-tokens': '634ms', 'x-request-id': 'req_f9952b34656041cda2d35d19f4270276', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b08561c9d3091-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 15:58:49,766 - openai._base_client - DEBUG - request_id: req_f9952b34656041cda2d35d19f4270276
2025-10-05 15:58:49,767 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: agent_selection | Model: gpt-4o-mini-2024-07-18 | Tokens: 2494 (prompt: 2361, completion: 133)
2025-10-05 15:58:49,767 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM agent selection reasoning: 사용자가 계약서 검토와 위험 요소 분석을 요청하였으므로, 계약서 검토를 전문으로 하는 document_team과 리스크 평가를 전문으로 하는 analysis_team이 필요합니다. document_team이 계약서를 검토한 후, 그 결과를 바탕으로 analysis_team이 위험 요소를 분석하는 순차적 처리가 필요합니다.
2025-10-05 15:58:49,767 - app.service_agent.cognitive_agents.planning_agent - INFO - ✅ Primary LLM selected agents: ['document_team', 'analysis_team']
2025-10-05 15:58:49,767 - __main__ - INFO -   의도: 계약서검토
2025-10-05 15:58:49,767 - __main__ - INFO -   신뢰도: 0.85
2025-10-05 15:58:49,767 - __main__ - INFO -   추천 Agent: ['document_team', 'analysis_team']
2025-10-05 15:58:49,767 - __main__ - INFO - 
[Step 2] Query Decomposition...
2025-10-05 15:58:49,767 - app.service_agent.cognitive_agents.query_decomposer - INFO - Decomposing query: 이 계약서 검토하고 위험 요소 분석해줘...
2025-10-05 15:58:49,767 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-16d52efc-93a0-4555-b795-f42fa341fbf1', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 질문 분해 전문가입니다.\n복잡한 사용자 질문을 독립적으로 처리 가능한 작업 단위로 분해하는 것이 목표입니다.\n\n## Chain-of-Thought 분해 프로세스:\n\n### 1단계: 복합 질문 여부 판단\n- 단순 정보 조회만 필요한가? → is_compound: false\n- **다음 중 하나라도 해당하면 is_compound: true**:\n  * "그리고", "그 다음", "한 후" 같은 연결어로 여러 요청 연결\n  * 명시적으로 2개 이상의 작업 요청 (예: "시세 확인하고 대출 계산해줘")\n  * 상황 설명 + 해결책 요청 (예: "3억→10억 올려달래. 어떻게 해야 해?")\n  * 해결책을 위해 여러 단계 처리 필요 (검색 → 분석 → 제안)\n\n### 2단계: 필요 작업 식별\n- 정보 수집이 필요한가? → search 작업\n- 평가/판단이 필요한가? → analysis 작업\n- 문서 생성이 필요한가? → generation 작업\n- **해결책 요청**인가? → search + analysis (최소 2개)\n\n### 3단계: 작업 순서 결정\n- 독립적 작업: 병렬 가능\n- 이전 결과 필요: 순차 실행 (depends_on 설정)\n\n## 중요 원칙:\n1. 각 작업은 하나의 명확한 목표를 가져야 합니다\n2. 작업 간 의존성을 명확히 파악해야 합니다\n3. 병렬 처리 가능한 작업은 구분해야 합니다\n4. **주의**: "어떻게 해야", "방법 알려줘" 같은 해결책 요청은 복합 질문!\n\n## 작업 유형 (type):\n- search: 정보 검색 (법률, 시세, 대출 정보 등)\n- analysis: 데이터 분석 (리스크 평가, 시장 분석 등)\n- generation: 문서 생성 (계약서 작성 등)\n- review: 검토/평가 (계약서 검토, 조건 확인 등)\n- calculation: 계산/산출 (대출 한도, 세금 등)\n- comparison: 비교 분석 (여러 옵션 비교)\n\n## 담당 팀 (agent):\n- search_team: 법률, 시세, 대출 정보 검색\n- analysis_team: 데이터 분석, 리스크 평가, 계산\n- document_team: 문서 생성, 계약서 작성\n\n## 학습 예시:\n\n### 예시 1: 복합 질문 (순차적)\n질문: "강남구 아파트 시세 확인하고 대출 가능 금액 계산해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "강남구 아파트 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "대출 가능 금액 계산",\n            "type": "calculation",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "required_data": {"price": "task_0.result.price"},\n            "estimated_time": 15\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "시세 정보가 있어야 대출 금액 계산이 가능하므로 순차 실행"\n}\n```\n\n### 예시 2: 복합 질문 (병렬 가능)\n질문: "이 지역 전세 시세와 매매 시세 모두 알려주고 비교 분석해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "전세 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "매매 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "전세/매매 시세 비교 분석",\n            "type": "comparison",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0", "task_1"],\n            "required_data": {\n                "lease_price": "task_0.result",\n                "sale_price": "task_1.result"\n            },\n            "estimated_time": 25\n        }\n    ],\n    "execution_mode": "mixed",\n    "parallel_groups": [["task_0", "task_1"], ["task_2"]],\n    "reasoning": "시세 조회는 독립적이므로 병렬 처리, 비교는 두 결과 필요"\n}\n```\n\n### 예시 3: 복합 질문 (3단계 이상)\n질문: "이 계약서 검토해서 위험한 부분 찾고 수정안 만들어서 최종 계약서 작성해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "계약서 내용 전체 검토",\n            "type": "review",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 30\n        },\n        {\n            "description": "위험 요소 및 문제점 분석",\n            "type": "analysis",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "estimated_time": 25\n        },\n        {\n            "description": "수정안 제안 생성",\n            "type": "generation",\n            "agent": "document_team",\n            "priority": 3,\n            "depends_on": ["task_1"],\n            "estimated_time": 20\n        },\n        {\n            "description": "최종 계약서 작성",\n            "type": "generation",\n            "agent": "document_team",\n            "priority": 4,\n            "depends_on": ["task_2"],\n            "estimated_time": 30\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "각 단계가 이전 결과에 의존하므로 순차 실행 필요"\n}\n```\n\n### 예시 4: 단순 질문 (분해 불필요)\n질문: "전세금 인상률 상한이 얼마야?"\n분해:\n```json\n{\n    "is_compound": false,\n    "sub_tasks": [\n        {\n            "description": "전세금 인상률 상한 법률 정보 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 15\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "단일 정보 조회 요청으로 분해 불필요"\n}\n```\n\n### 예시 5: 조건부 실행\n질문: "이 물건 시세 확인하고 적정가면 대출 상담도 받고 싶어"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "물건 시세 조회 및 적정성 평가",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 25\n        },\n        {\n            "description": "대출 상담 정보 제공",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "optional": true,\n            "context": {"condition": "if_reasonable_price"},\n            "estimated_time": 20\n        }\n    ],\n    "execution_mode": "conditional",\n    "reasoning": "시세 확인 결과에 따라 대출 상담 진행 여부 결정"\n}\n```\n\n### 예시 6: 상황 설명 + 해결책 요청 (핵심 패턴!)\n질문: "집주인이 전세금 3억을 10억으로 올려달래. 법적으로 어떻게 해야 해?"\n**CoT 분석**:\n1. 질문 분석: 상황 설명 + 해결책 요청\n2. 연결어: 없지만, "어떻게 해야" = 해결책 요청\n3. 의존성: 법률 확인 → 상황 분석 → 대응 방안\n4. 복합 여부: **YES** (해결책을 위해 여러 단계 필요)\n\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "전세금 인상 한도 관련 법률 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "3억→10억 인상의 법적 타당성 및 적정성 분석",\n            "type": "analysis",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "required_data": {"legal_limit": "task_0.result", "current": 300000000, "requested": 1000000000},\n            "estimated_time": 25\n        },\n        {\n            "description": "구체적 대응 방안 및 해결책 제시",\n            "type": "analysis",\n            "agent": "analysis_team",\n            "priority": 3,\n            "depends_on": ["task_1"],\n            "estimated_time": 20\n        }\n    ],\n    "execution_mode": "sequential",\n    "confidence": 0.95,\n    "reasoning": "상황 설명+해결책 요청 패턴. \'어떻게 해야\'는 단순 정보 조회가 아닌 종합 해결책 필요. 법률 조회 → 상황 분석 → 해결책 제시 3단계 순차 처리"\n}\n```\n\n## Chain-of-Thought 프로세스:\n\n1. **질문 분석**: 어떤 정보나 작업을 요구하는가?\n2. **연결어 확인**: "그리고", "또한", "해서", "한 후" 등이 있는가?\n3. **의존성 파악**: 어떤 작업이 다른 작업의 결과를 필요로 하는가?\n4. **병렬성 판단**: 독립적으로 실행 가능한 작업이 있는가?\n5. **최적화**: 불필요한 분해는 없는가?\n\n## 응답 형식 (JSON):\n\n{\n    "is_compound": true/false,\n    "sub_tasks": [\n        {\n            "description": "작업 설명",\n            "type": "작업 유형",\n            "agent": "담당 팀",\n            "priority": 우선순위 (1이 가장 높음),\n            "depends_on": ["선행 작업 ID 리스트"],\n            "required_data": {"필요한 데이터 매핑"},\n            "estimated_time": 예상 소요 시간(초),\n            "optional": true/false,\n            "context": {"추가 컨텍스트"}\n        }\n    ],\n    "execution_mode": "sequential/parallel/mixed/conditional",\n    "parallel_groups": [["병렬 실행 가능한 작업 ID 그룹"]],\n    "confidence": 0.0-1.0,\n    "reasoning": "분해 결정의 이유와 근거"\n}\n\n## 분해 가이드라인:\n\n1. **분해가 필요한 경우**:\n   - 여러 종류의 정보를 요청하는 경우\n   - 순차적 처리가 필요한 경우 (A의 결과로 B 수행)\n   - 서로 다른 팀의 전문성이 필요한 경우\n\n2. **분해가 불필요한 경우**:\n   - 단일 정보 조회\n   - 단순한 질문-답변\n   - 하나의 팀에서 완전히 처리 가능한 경우\n\n3. **병렬 처리 기준**:\n   - 서로 독립적인 정보 조회\n   - 의존성이 없는 분석 작업\n   - 동시에 진행해도 충돌하지 않는 작업\n\n4. **우선순위 설정**:\n   - 의존성이 없는 작업: priority 1\n   - 1차 의존 작업: priority 2\n   - 2차 의존 작업: priority 3\n   - 이런 식으로 증가\n\n현재 의도: 계약서검토\n추출된 엔티티: None\n\n분석할 질문: 이 계약서 검토하고 위험 요소 분석해줘'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 15:58:49,768 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 15:58:49,768 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 15:58:49,768 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 15:58:49,768 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 15:58:49,768 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 15:58:49,768 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 15:58:52,514 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 06:58:52 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'2536'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'2566'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9972'), (b'x-ratelimit-remaining-tokens', b'197336'), (b'x-ratelimit-reset-requests', b'3m55.675s'), (b'x-ratelimit-reset-tokens', b'799ms'), (b'x-request-id', b'req_960c446bf71540a78ad1e09cf1e936bb'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b0864e9e03091-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 15:58:52,514 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 15:58:52,514 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 15:58:52,519 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 15:58:52,519 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 15:58:52,519 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 15:58:52,519 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 06:58:52 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '2536', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '2566', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9972', 'x-ratelimit-remaining-tokens': '197336', 'x-ratelimit-reset-requests': '3m55.675s', 'x-ratelimit-reset-tokens': '799ms', 'x-request-id': 'req_960c446bf71540a78ad1e09cf1e936bb', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b0864e9e03091-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 15:58:52,519 - openai._base_client - DEBUG - request_id: req_960c446bf71540a78ad1e09cf1e936bb
2025-10-05 15:58:52,520 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: query_decomposition | Model: gpt-4o-mini-2024-07-18 | Tokens: 2853 (prompt: 2690, completion: 163)
2025-10-05 15:58:52,520 - app.service_agent.cognitive_agents.query_decomposer - INFO - Successfully decomposed into 2 tasks
2025-10-05 15:58:52,520 - __main__ - INFO -   복합 질문: True
2025-10-05 15:58:52,520 - __main__ - INFO -   작업 수: 2
2025-10-05 15:58:52,520 - __main__ - INFO -   실행 모드: sequential
2025-10-05 15:58:52,520 - __main__ - INFO -     - task_0: 계약서 내용 전체 검토 (search_team)
2025-10-05 15:58:52,520 - __main__ - INFO -     - task_1: 위험 요소 및 문제점 분석 (analysis_team)
2025-10-05 15:58:52,520 - __main__ - INFO - 
[Step 3] Comprehensive Plan 생성...
2025-10-05 15:58:52,520 - app.service_agent.cognitive_agents.planning_agent - INFO - Creating comprehensive plan for query: 이 계약서 검토하고 위험 요소 분석해줘...
2025-10-05 15:58:52,520 - app.service_agent.cognitive_agents.planning_agent - INFO - Analyzing intent for query: 이 계약서 검토하고 위험 요소 분석해줘...
2025-10-05 15:58:52,520 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-be0a87b6-0d8f-433e-83b5-cbd8c4d1c192', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 의도 분석 전문가입니다.\n사용자의 질문을 정확히 이해하고, 어떤 종류의 도움이 필요한지 분류해야 합니다.\n\n## Chain-of-Thought 분석 프로세스\n\n질문을 분석할 때 다음 단계를 **순서대로** 따르세요:\n\n### 1단계: 질문 구조 파악\n- 단순 정보 요청인가? (예: "~이 뭐야?", "~알려줘")\n- 상황 설명이 포함되어 있는가? (배경, 현재 상태)\n- 구체적 수치나 데이터가 있는가? (금액, 비율, 기간 등)\n- 문제 해결을 요구하는가? (예: "어떻게 해야 해?", "방법 알려줘")\n\n### 2단계: 요청 유형 판단\n- **정보 확인형**: 사실, 개념, 규정 확인 → 검색만으로 충분\n- **평가/판단형**: "괜찮아?", "적절해?", "문제있어?" → 검색 + 분석 필요\n- **해결책 요청형**: "어떻게?", "방법?", "대처?" → 검색 + 분석 + 제안 필요\n- **비교/선택형**: "A vs B", "어느게 나아?" → 검색 + 분석(비교) 필요\n\n### 3단계: 복잡도 평가\n- **저**: 단일 개념/사실 확인 (예: "전세금 인상률 한도?")\n- **중**: 특정 상황 + 판단 (예: "3억을 5억으로 올려달래. 가능해?")\n- **고**: 복잡한 상황 + 여러 조건 + 해결책 (예: "10년 거주, 3억→10억 요구. 어떻게 해야 해?")\n\n### 4단계: 필요한 처리 결정\n- **검색만**: 정보 확인형 + 저복잡도\n- **검색+분석**: 평가/판단형 OR 중복잡도 OR 수치 비교 포함\n- **종합처리**: 해결책 요청형 OR 고복잡도 OR 여러 조건 동시 고려\n\n### 5단계: 최종 검증\n- 선택한 의도로 사용자 질문에 완전히 답변 가능한가?\n- 단순 정보 제공으로 끝나는가, 아니면 추가 분석/판단이 필요한가?\n- 상황 설명이 있으면서 "해결", "방법", "어떻게" 등이 있으면 → COMPREHENSIVE 고려\n\n## 중요: 복합 질문 처리\n복합적인 질문(여러 의도가 섞인 질문)의 경우, 가장 핵심적인 의도를 파악하되,\nsub_intents 필드에 부가적인 의도들도 함께 기록해주세요.\n\n**특히 주의**:\n- 법률 키워드가 있어도, "해결방법", "어떻게 해야" 같은 표현이 있으면 단순 LEGAL_CONSULT가 아닐 수 있음\n- 구체적 상황(금액, 기간 등) + 해결책 요구 = COMPREHENSIVE 또는 복합 의도로 분류\n\n## 분류 카테고리 설명:\n\n1. **LEGAL_CONSULT (법률상담)**\n   - 설명: 부동산 관련 법률, 권리, 의무에 대한 질문\n   - 예시:\n     * 단순: "전세금 5% 인상이 가능한가요?", "임대차계약 갱신 거부할 수 있나요?"\n     * 복합: "전세금 인상 가능한지 확인하고 법적 근거도 알려주세요"\n   - 키워드: 법, 전세, 임대, 보증금, 계약, 권리, 의무, 갱신, 임차인, 임대인, 법률, 규정, 조항\n   - 필요한 처리: 법률 데이터베이스 검색, 관련 법조항 찾기\n\n2. **MARKET_INQUIRY (시세조회)**\n   - 설명: 부동산 시장 가격, 시세, 거래 동향에 대한 질문\n   - 예시:\n     * 단순: "강남구 아파트 전세 시세 알려주세요", "서초동 매매가 얼마나 올랐나요?"\n     * 복합: "강남구 시세 확인하고 대출 가능 금액도 계산해줘"\n   - 키워드: 시세, 가격, 매매가, 전세가, 월세, 시장, 동향, 평균, 지역명, 상승률, 하락률\n   - 필요한 처리: 부동산 시세 데이터 조회, 지역별 가격 분석\n\n3. **LOAN_CONSULT (대출상담)**\n   - 설명: 주택담보대출, 전세자금대출 등 금융 관련 질문\n   - 예시:\n     * 단순: "전세자금대출 한도가 얼마인가요?", "LTV가 뭔가요?"\n     * 복합: "대출 한도 확인하고 금리 비교도 해주세요"\n   - 키워드: 대출, 금리, 한도, 조건, 상환, LTV, DTI, DSR, 담보, 금융, 은행\n   - 필요한 처리: 대출 상품 조회, 금리 정보 검색, 한도 계산\n\n4. **CONTRACT_CREATION (계약서작성)**\n   - 설명: 새로운 계약서나 문서를 작성해달라는 요청\n   - 예시:\n     * 단순: "임대차계약서 작성해주세요", "전세계약서 초안 만들어주세요"\n     * 복합: "계약서 작성하고 주의사항도 검토해주세요"\n   - 키워드: 작성, 만들, 생성, 초안, 계약서, 문서, 양식\n   - 필요한 처리: 문서 생성 에이전트 호출, 템플릿 기반 작성\n\n5. **CONTRACT_REVIEW (계약서검토)**\n   - 설명: 기존 계약서나 문서를 검토해달라는 요청\n   - 예시:\n     * 단순: "이 계약서 검토해주세요", "특약사항 문제없나요?"\n     * 복합: "계약서 검토하고 수정사항도 제안해주세요"\n   - 키워드: 검토, 확인, 점검, 리뷰, 분석해, 살펴봐, 체크\n   - 필요한 처리: 문서 분석, 위험 요소 식별, 개선사항 제안\n\n6. **COMPREHENSIVE (종합분석)**\n   - 설명: 여러 측면을 종합적으로 분석해달라는 요청, 또는 복잡한 상황에 대한 해결책 요청\n   - 예시:\n     * 단순: "이 물건 전체적으로 분석해주세요"\n     * 복합: "시세, 법률, 대출 모두 검토해서 종합 의견 주세요"\n     * 해결형: "10년 거주했는데 전세금 3억을 10억으로 올려달래. 어떻게 해야 해?"\n     * 상황+해결: "집주인이 계약 갱신 거부했어. 법적으로 어떻게 대응해야 할까?"\n   - 키워드: 종합, 전체, 모든, 전반적, 종합적, 평가, 분석, 어떻게, 방법, 해결, 대처\n   - 패턴: 구체적 상황 설명 + "어떻게/방법/해결" 요청\n   - 필요한 처리: 다중 데이터 소스 통합 분석, 상황 평가, 해결책 제시\n\n7. **RISK_ANALYSIS (리스크분석)**\n   - 설명: 위험 요소나 주의사항에 대한 질문\n   - 예시:\n     * 단순: "이 계약 위험한가요?", "주의할 점 알려주세요"\n     * 복합: "리스크 분석하고 대안도 제시해주세요"\n   - 키워드: 위험, 리스크, 주의, 문제점, 조심, 걱정, 우려\n   - 필요한 처리: 위험 요소 분석, 주의사항 추출\n\n8. **UNCLEAR (불분명)**\n   - 설명: 의도를 명확히 파악하기 어려운 질문\n   - 예시: "이거 좀 봐주세요", "어떻게 해야 할까요?", "도와주세요"\n   - 처리: 추가 질문으로 의도 명확화 필요\n\n9. **IRRELEVANT (무관)**\n   - 설명: 부동산과 전혀 관련 없는 질문\n   - 예시: "날씨 어때?", "저녁 뭐 먹지?", "주식 추천해줘"\n   - 처리: 부동산 관련 질문을 유도\n\n## 복합 질문 예시와 분석 (CoT 적용):\n\n### 예시 1: "강남구 아파트 시세 알려주고 전세자금대출 가능한지도 확인해줘"\n**CoT 분석**:\n1. 구조: 두 개의 요청 ("시세" + "대출")\n2. 유형: 정보 확인형 (둘 다)\n3. 복잡도: 중 (두 가지 독립적 조회)\n4. 필요 처리: 검색 + 계산/분석\n\n**결론**:\n- 주 의도: MARKET_INQUIRY (시세 조회가 먼저 필요)\n- 부가 의도: LOAN_CONSULT (대출 확인)\n- 분해: ["강남구 아파트 시세 조회", "전세자금대출 가능 여부 확인"]\n\n### 예시 2: "이 계약서 검토해서 위험한 부분 있는지 알려주고 수정 제안도 해줘"\n**CoT 분석**:\n1. 구조: 검토 + 위험 평가 + 수정안\n2. 유형: 평가/판단형 + 해결책 요청형\n3. 복잡도: 고 (3단계 처리)\n4. 필요 처리: 검토 + 분석 + 문서 생성\n\n**결론**:\n- 주 의도: CONTRACT_REVIEW (계약서 검토)\n- 부가 의도: RISK_ANALYSIS (위험 분석)\n- 분해: ["계약서 전체 검토", "위험 요소 식별", "수정사항 제안"]\n\n### 예시 3: "집주인이 짜증나, 10년 살았는데 전세금 3억을 10억으로 올려달래. 법적으로 해결방법 알려줘"\n**CoT 분석**:\n1. 구조: 상황 설명 (10년 거주, 3억→10억) + 해결책 요청\n2. 유형: 해결책 요청형 (단순 정보 X)\n3. 복잡도: 고 (구체적 상황 + 수치 비교 + 법률 + 대응방안)\n4. 필요 처리: 법률 검색 + 상황 분석 + 해결책 제시\n\n**결론**:\n- 주 의도: COMPREHENSIVE (복잡한 상황에 대한 종합 해결)\n- 부가 의도: LEGAL_CONSULT, RISK_ANALYSIS\n- 분해: ["전세금 인상 한도 법률 조회", "3억→10억 인상의 타당성 분석", "구체적 대응 방안 제시"]\n- **이유**: "법적으로"라는 키워드가 있지만, 단순 법률 확인이 아니라 구체적 상황에 대한 해결책을 요구하므로 COMPREHENSIVE\n\n### 예시 4: "전세금 인상률 상한이 얼마야?"\n**CoT 분석**:\n1. 구조: 단순 사실 확인\n2. 유형: 정보 확인형\n3. 복잡도: 저 (단일 개념)\n4. 필요 처리: 검색만\n\n**결론**:\n- 주 의도: LEGAL_CONSULT (법률 정보 조회)\n- 부가 의도: 없음\n- 분해: 필요 없음\n\n## 응답 형식 (JSON 형식으로 응답):\n\n```json\n{\n    "intent": "LEGAL_CONSULT",\n    "confidence": 0.9,\n    "keywords": ["전세금", "인상", "제한"],\n    "sub_intents": [],\n    "is_compound": false,\n    "decomposed_tasks": [],\n    "entities": {\n        "location": "강남구",\n        "price": "5억",\n        "contract_type": "전세",\n        "date": "2024년",\n        "area": "84㎡",\n        "action_verbs": ["확인", "검토"]\n    },\n    "reasoning": "전세금 인상에 대한 법률 질문이므로 LEGAL_CONSULT로 분류"\n}\n```\n\n응답 규칙:\n- intent: 위 9개 카테고리 중 하나 (대문자_언더스코어 형식)\n- confidence: 0.0~1.0 (0.8 이상이면 매우 확실, 0.5 미만이면 불확실)\n- keywords: 추출된 주요 키워드 목록\n- sub_intents: 복합 질문일 경우 부가적인 의도들\n- is_compound: 복합 질문 여부 (true/false)\n- decomposed_tasks: 복합 질문을 분해한 개별 작업들\n- entities: 추출된 엔티티 정보\n- reasoning: **반드시 CoT 5단계를 거쳐 분석한 과정을 포함** (구조 파악 → 유형 판단 → 복잡도 평가 → 필요 처리 → 최종 검증)\n\n## reasoning 작성 예시:\n"1단계(구조): 상황 설명(10년 거주, 3억→10억) + 해결책 요청 포함.\n2단계(유형): 해결책 요청형 - 단순 정보가 아닌 대응방안 필요.\n3단계(복잡도): 고 - 구체적 수치 비교와 복잡한 상황.\n4단계(처리): 법률 검색 + 상황 분석 + 해결책 제시 필요.\n5단계(검증): LEGAL_CONSULT만으로는 불충분, 종합적 분석 필요 → COMPREHENSIVE 선택"\n\n## 판단 가이드:\n- 여러 의도가 섞여있다면, 가장 주된 의도를 intent에, 나머지를 sub_intents에 기록\n- "그리고", "또한", "함께", "같이" 등의 연결어가 있으면 복합 질문일 가능성 높음\n- 법률 관련 키워드가 있으면 LEGAL_CONSULT 우선\n- 가격/시세 언급이 명확하면 MARKET_INQUIRY\n- 계약서라는 단어와 함께 "작성/만들기"가 있으면 CONTRACT_CREATION\n- 계약서라는 단어와 함께 "검토/확인"이 있으면 CONTRACT_REVIEW\n- 불확실하면 confidence를 낮게 설정하고 UNCLEAR 선택\n- 복합 질문은 is_compound를 true로 설정하고 개별 작업으로 분해\n\n분석할 질문: 이 계약서 검토하고 위험 요소 분석해줘'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 15:58:52,521 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 15:58:52,521 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 15:58:52,522 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 15:58:52,522 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 15:58:52,522 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 15:58:52,522 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 15:58:56,680 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 06:58:56 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'3873'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'3900'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9972'), (b'x-ratelimit-remaining-tokens', b'197242'), (b'x-ratelimit-reset-requests', b'4m1.179s'), (b'x-ratelimit-reset-tokens', b'827ms'), (b'x-request-id', b'req_eb05be1de8134a8eac71cfecd2b493fe'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b08761abe3091-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 15:58:56,681 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 15:58:56,681 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 15:58:56,686 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 15:58:56,686 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 15:58:56,686 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 15:58:56,687 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 06:58:56 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '3873', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '3900', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9972', 'x-ratelimit-remaining-tokens': '197242', 'x-ratelimit-reset-requests': '4m1.179s', 'x-ratelimit-reset-tokens': '827ms', 'x-request-id': 'req_eb05be1de8134a8eac71cfecd2b493fe', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b08761abe3091-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 15:58:56,687 - openai._base_client - DEBUG - request_id: req_eb05be1de8134a8eac71cfecd2b493fe
2025-10-05 15:58:56,687 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: intent_analysis | Model: gpt-4o-mini-2024-07-18 | Tokens: 3402 (prompt: 3180, completion: 222)
2025-10-05 15:58:56,687 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM Intent Analysis Result: {'intent': 'CONTRACT_REVIEW', 'confidence': 0.85, 'keywords': ['계약서', '검토', '위험', '분석'], 'sub_intents': ['RISK_ANALYSIS'], 'is_compound': True, 'decomposed_tasks': ['계약서 검토', '위험 요소 분석'], 'entities': {'contract_type': '계약서', 'action_verbs': ['검토', '분석']}, 'reasoning': '1단계(구조): 계약서 검토 요청 + 위험 요소 분석 포함. 2단계(유형): 검토 요청형 + 위험 분석 요청형. 3단계(복잡도): 중 - 계약서 검토와 위험 요소 분석이 필요. 4단계(처리): 계약서 검토 + 위험 요소 분석 필요. 5단계(검증): 두 가지 요청이 포함되어 있어 CONTRACT_REVIEW와 RISK_ANALYSIS로 분류.'}
2025-10-05 15:58:56,688 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-23a8ea8c-241f-496f-99e7-a035e1ad98ae', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 Agent 선택 전문가입니다.\n사용자의 요청에 가장 적합한 Agent/Team을 선택하는 것이 목표입니다.\n\n## 현재 상황\n\n**사용자 질문:** 이 계약서 검토하고 위험 요소 분석해줘\n**분석된 의도:** 계약서검토\n**추출된 키워드:** [\'계약서\', \'검토\', \'위험\', \'분석\']\n\n## 사용 가능한 Agent/Team 정보\n\n{\'search_team\': {\'name\': \'search_team\', \'capabilities\': \'법률 검색, 부동산 시세 조회, 대출 상품 검색\', \'tools\': [\'legal_search\', \'market_data\', \'loan_data\'], \'use_cases\': [\'법률 상담\', \'시세 조회\', \'대출 정보\']}, \'analysis_team\': {\'name\': \'analysis_team\', \'capabilities\': \'데이터 분석, 리스크 평가, 인사이트 생성, 추천\', \'tools\': [\'data_analyzer\', \'risk_evaluator\'], \'use_cases\': [\'시장 분석\', \'리스크 평가\', \'투자 분석\']}, \'document_team\': {\'name\': \'document_team\', \'capabilities\': \'계약서 작성, 문서 생성, 문서 검토\', \'tools\': [\'document_generator\', \'contract_reviewer\'], \'use_cases\': [\'계약서 작성\', \'문서 검토\']}}\n\n## Agent 역할 및 상세 가이드\n\n### 1. search_team (검색 팀)\n- **주요 기능**: 정보 검색 및 데이터 수집\n- **전문 분야**:\n  * 법률 정보 검색 (전세법, 임대차보호법, 부동산 관련 법규)\n  * 부동산 시세 조회 (매매가, 전세가, 월세, 실거래가)\n  * 대출 상품 정보 검색 (금리, 한도, 조건)\n  * 지역 정보 및 인프라 조회\n- **도구**: legal_search, market_data, loan_data\n- **적합한 작업**: 정보 조회, 데이터 수집, 법률 확인, 시세 파악\n- **예시**:\n  * "전세금 5% 인상 가능한가요?"\n  * "강남구 아파트 전세 시세"\n  * "전세자금대출 한도 얼마?"\n\n### 2. analysis_team (분석 팀)\n- **주요 기능**: 데이터 분석 및 평가\n- **전문 분야**:\n  * 시장 동향 분석 (상승률, 하락률, 추세)\n  * 리스크 평가 (계약, 투자 위험도)\n  * 투자 수익률 계산 (ROI, 월세 수익률)\n  * 대출 한도 및 조건 분석 (LTV, DTI, DSR)\n  * 비교 분석 (지역별, 상품별)\n- **도구**: data_analyzer, risk_evaluator, calculator\n- **적합한 작업**: 데이터 분석, 리스크 평가, 계산, 비교, 예측\n- **의존성**: 보통 search_team의 데이터가 필요\n- **예시**:\n  * "이 지역 투자 가치 분석해줘"\n  * "계약 리스크 평가해줘"\n  * "대출 가능 금액 계산해줘"\n\n### 3. document_team (문서 팀)\n- **주요 기능**: 문서 생성 및 관리\n- **전문 분야**:\n  * 계약서 작성 (임대차, 매매, 전세)\n  * 문서 템플릿 관리\n  * 특약사항 생성\n  * 계약서 수정안 작성\n  * 법률 문서 검토\n- **도구**: document_generator, contract_template, contract_reviewer\n- **적합한 작업**: 문서 작성, 계약서 생성, 문서 수정, 검토\n- **예시**:\n  * "임대차계약서 작성해줘"\n  * "특약사항 추가해줘"\n  * "계약서 수정안 만들어줘"\n\n## Chain-of-Thought Agent 선택 프로세스\n\n다음 단계를 **순서대로** 따라 최적의 Agent 조합을 선택하세요:\n\n### 1단계: 질문 요구사항 파악\n- 단순 정보 조회인가? → search_team만 필요\n- 판단/평가가 필요한가? → search + analysis 필요\n- 해결책 제시가 필요한가? → search + analysis 필요\n- 문서 생성이 필요한가? → document_team 추가\n\n### 2단계: 작업 복잡도 판단\n- **단순** (검색만): "~이 뭐야?", "~알려줘" → search_team\n- **중간** (검색+판단): "~괜찮아?", "~적절해?" → search + analysis\n- **복잡** (종합 해결): 구체적 상황 + "어떻게 해야 해?" → search + analysis\n\n### 3단계: 의존성 분석\n- 독립적 작업: 단일 팀으로 처리 가능\n- 순차적 의존: 이전 결과 필요 → 여러 팀 순서대로\n- 병렬 가능: 동시 조회 가능 → coordination: "parallel"\n\n### 4단계: 최종 검증\n- 선택한 팀들로 질문에 완전히 답변 가능한가?\n- 불필요한 팀이 포함되지 않았는가?\n- 순서가 논리적인가? (데이터 흐름 고려)\n\n### 중요 원칙:\n- **법률 키워드만으로 판단하지 말 것**: "법적으로 어떻게 해야 해?" = 법률 검색 + 분석 필요\n- **상황 설명 + 해결책 요청** = 반드시 analysis_team 포함\n- **구체적 수치 비교** (3억→10억 같은) = analysis_team 필요\n\n## 의도별 Agent 매핑 가이드 (기본 가이드 - CoT로 조정 가능)\n\n| 의도 (Intent) | 기본 조합 | 상황별 조정 |\n|--------------|-----------|-------------|\n| LEGAL_CONSULT | ["search_team"] | 해결책 요청시 → + analysis_team |\n| MARKET_INQUIRY | ["search_team"] | 비교/평가시 → + analysis_team |\n| LOAN_CONSULT | ["search_team", "analysis_team"] | 계산 필수 |\n| CONTRACT_CREATION | ["document_team"] | 검토 후 작성 → search + document |\n| CONTRACT_REVIEW | ["search_team", "analysis_team"] | 법률 검토 + 리스크 분석 |\n| COMPREHENSIVE | ["search_team", "analysis_team"] | **항상 분석 포함** |\n| RISK_ANALYSIS | ["analysis_team"] | 법률 근거 필요시 → search + analysis |\n| UNCLEAR | ["search_team", "analysis_team"] | 포괄적 대응 |\n\n**중요**: 위 매핑은 **기본 가이드**일 뿐입니다.\n실제 질문의 내용(CoT 분석 결과)에 따라 조정하세요!\n\n## 복합 질문 처리 예시 (CoT 적용)\n\n### 예시 1: 순차적 처리\n질문: "강남구 시세 확인하고 투자 가치 분석해줘"\n**CoT 분석**:\n1. 요구사항: 시세 조회 + 투자 가치 평가\n2. 복잡도: 중간 (검색 + 분석)\n3. 의존성: 시세 데이터 → 투자 분석 (순차)\n4. 검증: search만으로는 "투자 가치 평가" 불가능\n\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "1단계: 시세 조회+투자 평가 필요. 2단계: 중간 복잡도. 3단계: 순차 의존. 4단계: search로 시세 수집 후 analysis로 투자 가치 평가 필요",\n    "coordination": "sequential"\n}\n```\n\n### 예시 2: 단순 정보 조회\n질문: "전세금 인상률 한도가 얼마야?"\n**CoT 분석**:\n1. 요구사항: 단순 사실 확인\n2. 복잡도: 낮음 (정보 확인형)\n3. 의존성: 없음\n4. 검증: search_team만으로 충분\n\n```json\n{\n    "selected_agents": ["search_team"],\n    "reasoning": "1단계: 단순 정보 조회. 2단계: 저복잡도. 3단계: 독립적. 4단계: 법률 검색만으로 답변 가능",\n    "coordination": "single"\n}\n```\n\n### 예시 3: 해결책 요청 (핵심 예시!)\n질문: "집주인이 전세금 3억을 10억으로 올려달래. 법적으로 어떻게 해야 해?"\n의도: COMPREHENSIVE\n**CoT 분석**:\n1. 요구사항: 상황 설명 + 해결책 요청\n2. 복잡도: 높음 (구체적 상황 + 수치 비교)\n3. 의존성: 법률 확인 → 상황 분석 → 해결책 제시\n4. 검증: "법적으로"만 보고 search만 선택하면 불충분! 해결책 제시 필요\n\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "1단계: 법률 + 상황 분석 + 해결책 필요. 2단계: 고복잡도(3억→10억 비정상). 3단계: 순차(법률 확인 후 타당성 분석). 4단계: \'어떻게 해야\' = 단순 법률 조회 아님, 분석 필수",\n    "coordination": "sequential",\n    "confidence": 0.95\n}\n```\n\n## 응답 형식 (JSON)\n\n```json\n{\n    "selected_agents": ["선택된 agent/team 목록"],\n    "reasoning": "선택 이유를 구체적으로 설명. 각 Agent의 역할과 처리 순서 포함",\n    "coordination": "single/sequential/parallel/pipeline",\n    "dependencies": {"agent2": ["agent1"]},\n    "estimated_time": 30,\n    "confidence": 0.9\n}\n```\n\n## 선택 가이드라인\n\n1. **최소 Agent 원칙**: 가능한 적은 수의 Agent로 처리\n2. **전문성 우선**: 해당 작업에 가장 전문적인 Agent 선택\n3. **효율성 고려**: 병렬 처리 가능한 경우 명시\n4. **의존성 관리**: 데이터 흐름을 고려한 순서 지정\n5. **폴백 전략**: 불확실한 경우 ["search_team", "analysis_team"] 조합\n\n## 주의사항\n\n- selected_agents는 반드시 배열 형태\n- Agent 이름은 정확히: "search_team", "analysis_team", "document_team"\n- 최소 1개, 최대 3개 선택\n- 순서는 실행 우선순위 (앞에 있을수록 먼저 실행)\n- reasoning은 상세하고 논리적으로 작성\n- coordination 필드로 실행 방식 명시\n- 복합 질문의 경우 의존성 관계 명확히 표시'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 15:58:56,689 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 15:58:56,689 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 15:58:56,689 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 15:58:56,689 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 15:58:56,689 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 15:58:56,689 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 15:58:59,193 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 06:58:59 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'2298'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'2314'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9971'), (b'x-ratelimit-remaining-tokens', b'197886'), (b'x-ratelimit-reset-requests', b'4m6.039s'), (b'x-ratelimit-reset-tokens', b'634ms'), (b'x-request-id', b'req_18f872a976004b6bb854cb2c9521be0c'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b08902c173091-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 15:58:59,193 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 15:58:59,193 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 15:58:59,196 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 15:58:59,196 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 15:58:59,196 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 15:58:59,197 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 06:58:59 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '2298', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '2314', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9971', 'x-ratelimit-remaining-tokens': '197886', 'x-ratelimit-reset-requests': '4m6.039s', 'x-ratelimit-reset-tokens': '634ms', 'x-request-id': 'req_18f872a976004b6bb854cb2c9521be0c', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b08902c173091-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 15:58:59,197 - openai._base_client - DEBUG - request_id: req_18f872a976004b6bb854cb2c9521be0c
2025-10-05 15:58:59,197 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: agent_selection | Model: gpt-4o-mini-2024-07-18 | Tokens: 2490 (prompt: 2361, completion: 129)
2025-10-05 15:58:59,197 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM agent selection reasoning: 사용자가 계약서 검토와 위험 요소 분석을 요청했습니다. 계약서 검토는 document_team의 전문 분야이며, 위험 요소 분석은 analysis_team이 담당합니다. 따라서 두 팀이 필요합니다. document_team이 계약서를 검토한 후, analysis_team이 리스크를 평가하는 순차적 처리가 필요합니다.
2025-10-05 15:58:59,197 - app.service_agent.cognitive_agents.planning_agent - INFO - ✅ Primary LLM selected agents: ['document_team', 'analysis_team']
2025-10-05 15:58:59,197 - app.service_agent.cognitive_agents.planning_agent - INFO - Intent analyzed: 계약서검토 (confidence: 0.85)
2025-10-05 15:58:59,197 - app.service_agent.cognitive_agents.query_decomposer - INFO - Decomposing query: 이 계약서 검토하고 위험 요소 분석해줘...
2025-10-05 15:58:59,197 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-3aba77b3-7357-4644-96ad-22125c00dc1e', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 질문 분해 전문가입니다.\n복잡한 사용자 질문을 독립적으로 처리 가능한 작업 단위로 분해하는 것이 목표입니다.\n\n## Chain-of-Thought 분해 프로세스:\n\n### 1단계: 복합 질문 여부 판단\n- 단순 정보 조회만 필요한가? → is_compound: false\n- **다음 중 하나라도 해당하면 is_compound: true**:\n  * "그리고", "그 다음", "한 후" 같은 연결어로 여러 요청 연결\n  * 명시적으로 2개 이상의 작업 요청 (예: "시세 확인하고 대출 계산해줘")\n  * 상황 설명 + 해결책 요청 (예: "3억→10억 올려달래. 어떻게 해야 해?")\n  * 해결책을 위해 여러 단계 처리 필요 (검색 → 분석 → 제안)\n\n### 2단계: 필요 작업 식별\n- 정보 수집이 필요한가? → search 작업\n- 평가/판단이 필요한가? → analysis 작업\n- 문서 생성이 필요한가? → generation 작업\n- **해결책 요청**인가? → search + analysis (최소 2개)\n\n### 3단계: 작업 순서 결정\n- 독립적 작업: 병렬 가능\n- 이전 결과 필요: 순차 실행 (depends_on 설정)\n\n## 중요 원칙:\n1. 각 작업은 하나의 명확한 목표를 가져야 합니다\n2. 작업 간 의존성을 명확히 파악해야 합니다\n3. 병렬 처리 가능한 작업은 구분해야 합니다\n4. **주의**: "어떻게 해야", "방법 알려줘" 같은 해결책 요청은 복합 질문!\n\n## 작업 유형 (type):\n- search: 정보 검색 (법률, 시세, 대출 정보 등)\n- analysis: 데이터 분석 (리스크 평가, 시장 분석 등)\n- generation: 문서 생성 (계약서 작성 등)\n- review: 검토/평가 (계약서 검토, 조건 확인 등)\n- calculation: 계산/산출 (대출 한도, 세금 등)\n- comparison: 비교 분석 (여러 옵션 비교)\n\n## 담당 팀 (agent):\n- search_team: 법률, 시세, 대출 정보 검색\n- analysis_team: 데이터 분석, 리스크 평가, 계산\n- document_team: 문서 생성, 계약서 작성\n\n## 학습 예시:\n\n### 예시 1: 복합 질문 (순차적)\n질문: "강남구 아파트 시세 확인하고 대출 가능 금액 계산해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "강남구 아파트 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "대출 가능 금액 계산",\n            "type": "calculation",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "required_data": {"price": "task_0.result.price"},\n            "estimated_time": 15\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "시세 정보가 있어야 대출 금액 계산이 가능하므로 순차 실행"\n}\n```\n\n### 예시 2: 복합 질문 (병렬 가능)\n질문: "이 지역 전세 시세와 매매 시세 모두 알려주고 비교 분석해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "전세 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "매매 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "전세/매매 시세 비교 분석",\n            "type": "comparison",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0", "task_1"],\n            "required_data": {\n                "lease_price": "task_0.result",\n                "sale_price": "task_1.result"\n            },\n            "estimated_time": 25\n        }\n    ],\n    "execution_mode": "mixed",\n    "parallel_groups": [["task_0", "task_1"], ["task_2"]],\n    "reasoning": "시세 조회는 독립적이므로 병렬 처리, 비교는 두 결과 필요"\n}\n```\n\n### 예시 3: 복합 질문 (3단계 이상)\n질문: "이 계약서 검토해서 위험한 부분 찾고 수정안 만들어서 최종 계약서 작성해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "계약서 내용 전체 검토",\n            "type": "review",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 30\n        },\n        {\n            "description": "위험 요소 및 문제점 분석",\n            "type": "analysis",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "estimated_time": 25\n        },\n        {\n            "description": "수정안 제안 생성",\n            "type": "generation",\n            "agent": "document_team",\n            "priority": 3,\n            "depends_on": ["task_1"],\n            "estimated_time": 20\n        },\n        {\n            "description": "최종 계약서 작성",\n            "type": "generation",\n            "agent": "document_team",\n            "priority": 4,\n            "depends_on": ["task_2"],\n            "estimated_time": 30\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "각 단계가 이전 결과에 의존하므로 순차 실행 필요"\n}\n```\n\n### 예시 4: 단순 질문 (분해 불필요)\n질문: "전세금 인상률 상한이 얼마야?"\n분해:\n```json\n{\n    "is_compound": false,\n    "sub_tasks": [\n        {\n            "description": "전세금 인상률 상한 법률 정보 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 15\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "단일 정보 조회 요청으로 분해 불필요"\n}\n```\n\n### 예시 5: 조건부 실행\n질문: "이 물건 시세 확인하고 적정가면 대출 상담도 받고 싶어"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "물건 시세 조회 및 적정성 평가",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 25\n        },\n        {\n            "description": "대출 상담 정보 제공",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "optional": true,\n            "context": {"condition": "if_reasonable_price"},\n            "estimated_time": 20\n        }\n    ],\n    "execution_mode": "conditional",\n    "reasoning": "시세 확인 결과에 따라 대출 상담 진행 여부 결정"\n}\n```\n\n### 예시 6: 상황 설명 + 해결책 요청 (핵심 패턴!)\n질문: "집주인이 전세금 3억을 10억으로 올려달래. 법적으로 어떻게 해야 해?"\n**CoT 분석**:\n1. 질문 분석: 상황 설명 + 해결책 요청\n2. 연결어: 없지만, "어떻게 해야" = 해결책 요청\n3. 의존성: 법률 확인 → 상황 분석 → 대응 방안\n4. 복합 여부: **YES** (해결책을 위해 여러 단계 필요)\n\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "전세금 인상 한도 관련 법률 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "3억→10억 인상의 법적 타당성 및 적정성 분석",\n            "type": "analysis",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "required_data": {"legal_limit": "task_0.result", "current": 300000000, "requested": 1000000000},\n            "estimated_time": 25\n        },\n        {\n            "description": "구체적 대응 방안 및 해결책 제시",\n            "type": "analysis",\n            "agent": "analysis_team",\n            "priority": 3,\n            "depends_on": ["task_1"],\n            "estimated_time": 20\n        }\n    ],\n    "execution_mode": "sequential",\n    "confidence": 0.95,\n    "reasoning": "상황 설명+해결책 요청 패턴. \'어떻게 해야\'는 단순 정보 조회가 아닌 종합 해결책 필요. 법률 조회 → 상황 분석 → 해결책 제시 3단계 순차 처리"\n}\n```\n\n## Chain-of-Thought 프로세스:\n\n1. **질문 분석**: 어떤 정보나 작업을 요구하는가?\n2. **연결어 확인**: "그리고", "또한", "해서", "한 후" 등이 있는가?\n3. **의존성 파악**: 어떤 작업이 다른 작업의 결과를 필요로 하는가?\n4. **병렬성 판단**: 독립적으로 실행 가능한 작업이 있는가?\n5. **최적화**: 불필요한 분해는 없는가?\n\n## 응답 형식 (JSON):\n\n{\n    "is_compound": true/false,\n    "sub_tasks": [\n        {\n            "description": "작업 설명",\n            "type": "작업 유형",\n            "agent": "담당 팀",\n            "priority": 우선순위 (1이 가장 높음),\n            "depends_on": ["선행 작업 ID 리스트"],\n            "required_data": {"필요한 데이터 매핑"},\n            "estimated_time": 예상 소요 시간(초),\n            "optional": true/false,\n            "context": {"추가 컨텍스트"}\n        }\n    ],\n    "execution_mode": "sequential/parallel/mixed/conditional",\n    "parallel_groups": [["병렬 실행 가능한 작업 ID 그룹"]],\n    "confidence": 0.0-1.0,\n    "reasoning": "분해 결정의 이유와 근거"\n}\n\n## 분해 가이드라인:\n\n1. **분해가 필요한 경우**:\n   - 여러 종류의 정보를 요청하는 경우\n   - 순차적 처리가 필요한 경우 (A의 결과로 B 수행)\n   - 서로 다른 팀의 전문성이 필요한 경우\n\n2. **분해가 불필요한 경우**:\n   - 단일 정보 조회\n   - 단순한 질문-답변\n   - 하나의 팀에서 완전히 처리 가능한 경우\n\n3. **병렬 처리 기준**:\n   - 서로 독립적인 정보 조회\n   - 의존성이 없는 분석 작업\n   - 동시에 진행해도 충돌하지 않는 작업\n\n4. **우선순위 설정**:\n   - 의존성이 없는 작업: priority 1\n   - 1차 의존 작업: priority 2\n   - 2차 의존 작업: priority 3\n   - 이런 식으로 증가\n\n현재 의도: 계약서검토\n추출된 엔티티: {\'contract_type\': \'계약서\', \'action_verbs\': [\'검토\', \'분석\']}\n\n분석할 질문: 이 계약서 검토하고 위험 요소 분석해줘'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 15:58:59,198 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 15:58:59,198 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 15:58:59,198 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 15:58:59,198 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 15:58:59,199 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 15:58:59,199 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 15:59:02,064 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 06:59:02 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'2654'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'2682'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9970'), (b'x-ratelimit-remaining-tokens', b'197320'), (b'x-ratelimit-reset-requests', b'4m12.168s'), (b'x-ratelimit-reset-tokens', b'804ms'), (b'x-request-id', b'req_bde937faca2b4fe3a7bebcdcc61e449e'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b089fdc973091-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 15:59:02,064 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 15:59:02,064 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 15:59:02,071 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 15:59:02,071 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 15:59:02,071 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 15:59:02,071 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 06:59:02 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '2654', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '2682', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9970', 'x-ratelimit-remaining-tokens': '197320', 'x-ratelimit-reset-requests': '4m12.168s', 'x-ratelimit-reset-tokens': '804ms', 'x-request-id': 'req_bde937faca2b4fe3a7bebcdcc61e449e', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b089fdc973091-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 15:59:02,071 - openai._base_client - DEBUG - request_id: req_bde937faca2b4fe3a7bebcdcc61e449e
2025-10-05 15:59:02,072 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: query_decomposition | Model: gpt-4o-mini-2024-07-18 | Tokens: 2873 (prompt: 2711, completion: 162)
2025-10-05 15:59:02,072 - app.service_agent.cognitive_agents.query_decomposer - INFO - Successfully decomposed into 2 tasks
2025-10-05 15:59:02,072 - app.service_agent.cognitive_agents.planning_agent - INFO - Query decomposed into 2 tasks
2025-10-05 15:59:02,072 - app.service_agent.cognitive_agents.planning_agent - WARNING - Plan validation errors: ["Agent 'search_team' not found in registry", "Agent 'analysis_team' depends on missing 'task_0'", "Agent 'analysis_team' not found in registry"]
2025-10-05 15:59:02,072 - app.service_agent.cognitive_agents.planning_agent - INFO - Optimizing execution plan
2025-10-05 15:59:02,072 - app.service_agent.cognitive_agents.planning_agent - INFO - Comprehensive plan created: Intent: 계약서검토 (confidence: 0.85) | Strategy: sequential | Agents: search_team, analysis_team | Estimated time: 55.0s
2025-10-05 15:59:02,072 - __main__ - INFO -   전략: sequential
2025-10-05 15:59:02,072 - __main__ - INFO -   단계 수: 2
2025-10-05 15:59:02,072 - __main__ - INFO - 
✓ 테스트 성공 (소요시간: 18.89초)
2025-10-05 15:59:02,072 - __main__ - INFO - 
================================================================================
2025-10-05 15:59:02,072 - __main__ - INFO - [24] 복합 질문 테스트: D004
2025-10-05 15:59:02,072 - __main__ - INFO - 질문: 송파구 시세 조회하고 투자 가치 평가해줘
2025-10-05 15:59:02,072 - __main__ - INFO - ================================================================================
2025-10-05 15:59:02,072 - __main__ - INFO - 
[Step 1] Intent 분석...
2025-10-05 15:59:02,072 - app.service_agent.cognitive_agents.planning_agent - INFO - Analyzing intent for query: 송파구 시세 조회하고 투자 가치 평가해줘...
2025-10-05 15:59:02,072 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-9977f956-2fd2-41b6-b925-3c5ce5548ad5', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 의도 분석 전문가입니다.\n사용자의 질문을 정확히 이해하고, 어떤 종류의 도움이 필요한지 분류해야 합니다.\n\n## Chain-of-Thought 분석 프로세스\n\n질문을 분석할 때 다음 단계를 **순서대로** 따르세요:\n\n### 1단계: 질문 구조 파악\n- 단순 정보 요청인가? (예: "~이 뭐야?", "~알려줘")\n- 상황 설명이 포함되어 있는가? (배경, 현재 상태)\n- 구체적 수치나 데이터가 있는가? (금액, 비율, 기간 등)\n- 문제 해결을 요구하는가? (예: "어떻게 해야 해?", "방법 알려줘")\n\n### 2단계: 요청 유형 판단\n- **정보 확인형**: 사실, 개념, 규정 확인 → 검색만으로 충분\n- **평가/판단형**: "괜찮아?", "적절해?", "문제있어?" → 검색 + 분석 필요\n- **해결책 요청형**: "어떻게?", "방법?", "대처?" → 검색 + 분석 + 제안 필요\n- **비교/선택형**: "A vs B", "어느게 나아?" → 검색 + 분석(비교) 필요\n\n### 3단계: 복잡도 평가\n- **저**: 단일 개념/사실 확인 (예: "전세금 인상률 한도?")\n- **중**: 특정 상황 + 판단 (예: "3억을 5억으로 올려달래. 가능해?")\n- **고**: 복잡한 상황 + 여러 조건 + 해결책 (예: "10년 거주, 3억→10억 요구. 어떻게 해야 해?")\n\n### 4단계: 필요한 처리 결정\n- **검색만**: 정보 확인형 + 저복잡도\n- **검색+분석**: 평가/판단형 OR 중복잡도 OR 수치 비교 포함\n- **종합처리**: 해결책 요청형 OR 고복잡도 OR 여러 조건 동시 고려\n\n### 5단계: 최종 검증\n- 선택한 의도로 사용자 질문에 완전히 답변 가능한가?\n- 단순 정보 제공으로 끝나는가, 아니면 추가 분석/판단이 필요한가?\n- 상황 설명이 있으면서 "해결", "방법", "어떻게" 등이 있으면 → COMPREHENSIVE 고려\n\n## 중요: 복합 질문 처리\n복합적인 질문(여러 의도가 섞인 질문)의 경우, 가장 핵심적인 의도를 파악하되,\nsub_intents 필드에 부가적인 의도들도 함께 기록해주세요.\n\n**특히 주의**:\n- 법률 키워드가 있어도, "해결방법", "어떻게 해야" 같은 표현이 있으면 단순 LEGAL_CONSULT가 아닐 수 있음\n- 구체적 상황(금액, 기간 등) + 해결책 요구 = COMPREHENSIVE 또는 복합 의도로 분류\n\n## 분류 카테고리 설명:\n\n1. **LEGAL_CONSULT (법률상담)**\n   - 설명: 부동산 관련 법률, 권리, 의무에 대한 질문\n   - 예시:\n     * 단순: "전세금 5% 인상이 가능한가요?", "임대차계약 갱신 거부할 수 있나요?"\n     * 복합: "전세금 인상 가능한지 확인하고 법적 근거도 알려주세요"\n   - 키워드: 법, 전세, 임대, 보증금, 계약, 권리, 의무, 갱신, 임차인, 임대인, 법률, 규정, 조항\n   - 필요한 처리: 법률 데이터베이스 검색, 관련 법조항 찾기\n\n2. **MARKET_INQUIRY (시세조회)**\n   - 설명: 부동산 시장 가격, 시세, 거래 동향에 대한 질문\n   - 예시:\n     * 단순: "강남구 아파트 전세 시세 알려주세요", "서초동 매매가 얼마나 올랐나요?"\n     * 복합: "강남구 시세 확인하고 대출 가능 금액도 계산해줘"\n   - 키워드: 시세, 가격, 매매가, 전세가, 월세, 시장, 동향, 평균, 지역명, 상승률, 하락률\n   - 필요한 처리: 부동산 시세 데이터 조회, 지역별 가격 분석\n\n3. **LOAN_CONSULT (대출상담)**\n   - 설명: 주택담보대출, 전세자금대출 등 금융 관련 질문\n   - 예시:\n     * 단순: "전세자금대출 한도가 얼마인가요?", "LTV가 뭔가요?"\n     * 복합: "대출 한도 확인하고 금리 비교도 해주세요"\n   - 키워드: 대출, 금리, 한도, 조건, 상환, LTV, DTI, DSR, 담보, 금융, 은행\n   - 필요한 처리: 대출 상품 조회, 금리 정보 검색, 한도 계산\n\n4. **CONTRACT_CREATION (계약서작성)**\n   - 설명: 새로운 계약서나 문서를 작성해달라는 요청\n   - 예시:\n     * 단순: "임대차계약서 작성해주세요", "전세계약서 초안 만들어주세요"\n     * 복합: "계약서 작성하고 주의사항도 검토해주세요"\n   - 키워드: 작성, 만들, 생성, 초안, 계약서, 문서, 양식\n   - 필요한 처리: 문서 생성 에이전트 호출, 템플릿 기반 작성\n\n5. **CONTRACT_REVIEW (계약서검토)**\n   - 설명: 기존 계약서나 문서를 검토해달라는 요청\n   - 예시:\n     * 단순: "이 계약서 검토해주세요", "특약사항 문제없나요?"\n     * 복합: "계약서 검토하고 수정사항도 제안해주세요"\n   - 키워드: 검토, 확인, 점검, 리뷰, 분석해, 살펴봐, 체크\n   - 필요한 처리: 문서 분석, 위험 요소 식별, 개선사항 제안\n\n6. **COMPREHENSIVE (종합분석)**\n   - 설명: 여러 측면을 종합적으로 분석해달라는 요청, 또는 복잡한 상황에 대한 해결책 요청\n   - 예시:\n     * 단순: "이 물건 전체적으로 분석해주세요"\n     * 복합: "시세, 법률, 대출 모두 검토해서 종합 의견 주세요"\n     * 해결형: "10년 거주했는데 전세금 3억을 10억으로 올려달래. 어떻게 해야 해?"\n     * 상황+해결: "집주인이 계약 갱신 거부했어. 법적으로 어떻게 대응해야 할까?"\n   - 키워드: 종합, 전체, 모든, 전반적, 종합적, 평가, 분석, 어떻게, 방법, 해결, 대처\n   - 패턴: 구체적 상황 설명 + "어떻게/방법/해결" 요청\n   - 필요한 처리: 다중 데이터 소스 통합 분석, 상황 평가, 해결책 제시\n\n7. **RISK_ANALYSIS (리스크분석)**\n   - 설명: 위험 요소나 주의사항에 대한 질문\n   - 예시:\n     * 단순: "이 계약 위험한가요?", "주의할 점 알려주세요"\n     * 복합: "리스크 분석하고 대안도 제시해주세요"\n   - 키워드: 위험, 리스크, 주의, 문제점, 조심, 걱정, 우려\n   - 필요한 처리: 위험 요소 분석, 주의사항 추출\n\n8. **UNCLEAR (불분명)**\n   - 설명: 의도를 명확히 파악하기 어려운 질문\n   - 예시: "이거 좀 봐주세요", "어떻게 해야 할까요?", "도와주세요"\n   - 처리: 추가 질문으로 의도 명확화 필요\n\n9. **IRRELEVANT (무관)**\n   - 설명: 부동산과 전혀 관련 없는 질문\n   - 예시: "날씨 어때?", "저녁 뭐 먹지?", "주식 추천해줘"\n   - 처리: 부동산 관련 질문을 유도\n\n## 복합 질문 예시와 분석 (CoT 적용):\n\n### 예시 1: "강남구 아파트 시세 알려주고 전세자금대출 가능한지도 확인해줘"\n**CoT 분석**:\n1. 구조: 두 개의 요청 ("시세" + "대출")\n2. 유형: 정보 확인형 (둘 다)\n3. 복잡도: 중 (두 가지 독립적 조회)\n4. 필요 처리: 검색 + 계산/분석\n\n**결론**:\n- 주 의도: MARKET_INQUIRY (시세 조회가 먼저 필요)\n- 부가 의도: LOAN_CONSULT (대출 확인)\n- 분해: ["강남구 아파트 시세 조회", "전세자금대출 가능 여부 확인"]\n\n### 예시 2: "이 계약서 검토해서 위험한 부분 있는지 알려주고 수정 제안도 해줘"\n**CoT 분석**:\n1. 구조: 검토 + 위험 평가 + 수정안\n2. 유형: 평가/판단형 + 해결책 요청형\n3. 복잡도: 고 (3단계 처리)\n4. 필요 처리: 검토 + 분석 + 문서 생성\n\n**결론**:\n- 주 의도: CONTRACT_REVIEW (계약서 검토)\n- 부가 의도: RISK_ANALYSIS (위험 분석)\n- 분해: ["계약서 전체 검토", "위험 요소 식별", "수정사항 제안"]\n\n### 예시 3: "집주인이 짜증나, 10년 살았는데 전세금 3억을 10억으로 올려달래. 법적으로 해결방법 알려줘"\n**CoT 분석**:\n1. 구조: 상황 설명 (10년 거주, 3억→10억) + 해결책 요청\n2. 유형: 해결책 요청형 (단순 정보 X)\n3. 복잡도: 고 (구체적 상황 + 수치 비교 + 법률 + 대응방안)\n4. 필요 처리: 법률 검색 + 상황 분석 + 해결책 제시\n\n**결론**:\n- 주 의도: COMPREHENSIVE (복잡한 상황에 대한 종합 해결)\n- 부가 의도: LEGAL_CONSULT, RISK_ANALYSIS\n- 분해: ["전세금 인상 한도 법률 조회", "3억→10억 인상의 타당성 분석", "구체적 대응 방안 제시"]\n- **이유**: "법적으로"라는 키워드가 있지만, 단순 법률 확인이 아니라 구체적 상황에 대한 해결책을 요구하므로 COMPREHENSIVE\n\n### 예시 4: "전세금 인상률 상한이 얼마야?"\n**CoT 분석**:\n1. 구조: 단순 사실 확인\n2. 유형: 정보 확인형\n3. 복잡도: 저 (단일 개념)\n4. 필요 처리: 검색만\n\n**결론**:\n- 주 의도: LEGAL_CONSULT (법률 정보 조회)\n- 부가 의도: 없음\n- 분해: 필요 없음\n\n## 응답 형식 (JSON 형식으로 응답):\n\n```json\n{\n    "intent": "LEGAL_CONSULT",\n    "confidence": 0.9,\n    "keywords": ["전세금", "인상", "제한"],\n    "sub_intents": [],\n    "is_compound": false,\n    "decomposed_tasks": [],\n    "entities": {\n        "location": "강남구",\n        "price": "5억",\n        "contract_type": "전세",\n        "date": "2024년",\n        "area": "84㎡",\n        "action_verbs": ["확인", "검토"]\n    },\n    "reasoning": "전세금 인상에 대한 법률 질문이므로 LEGAL_CONSULT로 분류"\n}\n```\n\n응답 규칙:\n- intent: 위 9개 카테고리 중 하나 (대문자_언더스코어 형식)\n- confidence: 0.0~1.0 (0.8 이상이면 매우 확실, 0.5 미만이면 불확실)\n- keywords: 추출된 주요 키워드 목록\n- sub_intents: 복합 질문일 경우 부가적인 의도들\n- is_compound: 복합 질문 여부 (true/false)\n- decomposed_tasks: 복합 질문을 분해한 개별 작업들\n- entities: 추출된 엔티티 정보\n- reasoning: **반드시 CoT 5단계를 거쳐 분석한 과정을 포함** (구조 파악 → 유형 판단 → 복잡도 평가 → 필요 처리 → 최종 검증)\n\n## reasoning 작성 예시:\n"1단계(구조): 상황 설명(10년 거주, 3억→10억) + 해결책 요청 포함.\n2단계(유형): 해결책 요청형 - 단순 정보가 아닌 대응방안 필요.\n3단계(복잡도): 고 - 구체적 수치 비교와 복잡한 상황.\n4단계(처리): 법률 검색 + 상황 분석 + 해결책 제시 필요.\n5단계(검증): LEGAL_CONSULT만으로는 불충분, 종합적 분석 필요 → COMPREHENSIVE 선택"\n\n## 판단 가이드:\n- 여러 의도가 섞여있다면, 가장 주된 의도를 intent에, 나머지를 sub_intents에 기록\n- "그리고", "또한", "함께", "같이" 등의 연결어가 있으면 복합 질문일 가능성 높음\n- 법률 관련 키워드가 있으면 LEGAL_CONSULT 우선\n- 가격/시세 언급이 명확하면 MARKET_INQUIRY\n- 계약서라는 단어와 함께 "작성/만들기"가 있으면 CONTRACT_CREATION\n- 계약서라는 단어와 함께 "검토/확인"이 있으면 CONTRACT_REVIEW\n- 불확실하면 confidence를 낮게 설정하고 UNCLEAR 선택\n- 복합 질문은 is_compound를 true로 설정하고 개별 작업으로 분해\n\n분석할 질문: 송파구 시세 조회하고 투자 가치 평가해줘'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 15:59:02,073 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 15:59:02,073 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 15:59:02,073 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 15:59:02,073 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 15:59:02,074 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 15:59:02,074 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 15:59:06,138 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 06:59:06 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'3745'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'3775'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9970'), (b'x-ratelimit-remaining-tokens', b'197242'), (b'x-ratelimit-reset-requests', b'4m17.603s'), (b'x-ratelimit-reset-tokens', b'827ms'), (b'x-request-id', b'req_afd7ef8a8b444599b428d7b2c25f73a2'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b08b1deea3091-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 15:59:06,138 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 15:59:06,138 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 15:59:06,138 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 15:59:06,139 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 15:59:06,139 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 15:59:06,139 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 06:59:06 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '3745', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '3775', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9970', 'x-ratelimit-remaining-tokens': '197242', 'x-ratelimit-reset-requests': '4m17.603s', 'x-ratelimit-reset-tokens': '827ms', 'x-request-id': 'req_afd7ef8a8b444599b428d7b2c25f73a2', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b08b1deea3091-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 15:59:06,139 - openai._base_client - DEBUG - request_id: req_afd7ef8a8b444599b428d7b2c25f73a2
2025-10-05 15:59:06,139 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: intent_analysis | Model: gpt-4o-mini-2024-07-18 | Tokens: 3420 (prompt: 3181, completion: 239)
2025-10-05 15:59:06,139 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM Intent Analysis Result: {'intent': 'COMPREHENSIVE', 'confidence': 0.85, 'keywords': ['송파구', '시세', '투자', '가치', '평가'], 'sub_intents': ['MARKET_INQUIRY', 'EVALUATION'], 'is_compound': True, 'decomposed_tasks': ['송파구 시세 조회', '송파구 투자 가치 평가'], 'entities': {'location': '송파구', 'action_verbs': ['조회', '평가']}, 'reasoning': '1단계(구조): 시세 조회와 투자 가치 평가 요청 포함. 2단계(유형): 두 가지 요청이 있어 종합적인 분석 필요. 3단계(복잡도): 중 - 시세와 투자 가치를 동시에 고려해야 함. 4단계(처리): 시세 데이터 조회와 투자 가치 분석 필요. 5단계(검증): 단순 시세 조회로는 부족하므로 COMPREHENSIVE로 분류.'}
2025-10-05 15:59:06,140 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-9ce1ff1b-3ad1-40ee-b2ee-7a28edf205bf', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 Agent 선택 전문가입니다.\n사용자의 요청에 가장 적합한 Agent/Team을 선택하는 것이 목표입니다.\n\n## 현재 상황\n\n**사용자 질문:** 송파구 시세 조회하고 투자 가치 평가해줘\n**분석된 의도:** 종합분석\n**추출된 키워드:** [\'송파구\', \'시세\', \'투자\', \'가치\', \'평가\']\n\n## 사용 가능한 Agent/Team 정보\n\n{\'search_team\': {\'name\': \'search_team\', \'capabilities\': \'법률 검색, 부동산 시세 조회, 대출 상품 검색\', \'tools\': [\'legal_search\', \'market_data\', \'loan_data\'], \'use_cases\': [\'법률 상담\', \'시세 조회\', \'대출 정보\']}, \'analysis_team\': {\'name\': \'analysis_team\', \'capabilities\': \'데이터 분석, 리스크 평가, 인사이트 생성, 추천\', \'tools\': [\'data_analyzer\', \'risk_evaluator\'], \'use_cases\': [\'시장 분석\', \'리스크 평가\', \'투자 분석\']}, \'document_team\': {\'name\': \'document_team\', \'capabilities\': \'계약서 작성, 문서 생성, 문서 검토\', \'tools\': [\'document_generator\', \'contract_reviewer\'], \'use_cases\': [\'계약서 작성\', \'문서 검토\']}}\n\n## Agent 역할 및 상세 가이드\n\n### 1. search_team (검색 팀)\n- **주요 기능**: 정보 검색 및 데이터 수집\n- **전문 분야**:\n  * 법률 정보 검색 (전세법, 임대차보호법, 부동산 관련 법규)\n  * 부동산 시세 조회 (매매가, 전세가, 월세, 실거래가)\n  * 대출 상품 정보 검색 (금리, 한도, 조건)\n  * 지역 정보 및 인프라 조회\n- **도구**: legal_search, market_data, loan_data\n- **적합한 작업**: 정보 조회, 데이터 수집, 법률 확인, 시세 파악\n- **예시**:\n  * "전세금 5% 인상 가능한가요?"\n  * "강남구 아파트 전세 시세"\n  * "전세자금대출 한도 얼마?"\n\n### 2. analysis_team (분석 팀)\n- **주요 기능**: 데이터 분석 및 평가\n- **전문 분야**:\n  * 시장 동향 분석 (상승률, 하락률, 추세)\n  * 리스크 평가 (계약, 투자 위험도)\n  * 투자 수익률 계산 (ROI, 월세 수익률)\n  * 대출 한도 및 조건 분석 (LTV, DTI, DSR)\n  * 비교 분석 (지역별, 상품별)\n- **도구**: data_analyzer, risk_evaluator, calculator\n- **적합한 작업**: 데이터 분석, 리스크 평가, 계산, 비교, 예측\n- **의존성**: 보통 search_team의 데이터가 필요\n- **예시**:\n  * "이 지역 투자 가치 분석해줘"\n  * "계약 리스크 평가해줘"\n  * "대출 가능 금액 계산해줘"\n\n### 3. document_team (문서 팀)\n- **주요 기능**: 문서 생성 및 관리\n- **전문 분야**:\n  * 계약서 작성 (임대차, 매매, 전세)\n  * 문서 템플릿 관리\n  * 특약사항 생성\n  * 계약서 수정안 작성\n  * 법률 문서 검토\n- **도구**: document_generator, contract_template, contract_reviewer\n- **적합한 작업**: 문서 작성, 계약서 생성, 문서 수정, 검토\n- **예시**:\n  * "임대차계약서 작성해줘"\n  * "특약사항 추가해줘"\n  * "계약서 수정안 만들어줘"\n\n## Chain-of-Thought Agent 선택 프로세스\n\n다음 단계를 **순서대로** 따라 최적의 Agent 조합을 선택하세요:\n\n### 1단계: 질문 요구사항 파악\n- 단순 정보 조회인가? → search_team만 필요\n- 판단/평가가 필요한가? → search + analysis 필요\n- 해결책 제시가 필요한가? → search + analysis 필요\n- 문서 생성이 필요한가? → document_team 추가\n\n### 2단계: 작업 복잡도 판단\n- **단순** (검색만): "~이 뭐야?", "~알려줘" → search_team\n- **중간** (검색+판단): "~괜찮아?", "~적절해?" → search + analysis\n- **복잡** (종합 해결): 구체적 상황 + "어떻게 해야 해?" → search + analysis\n\n### 3단계: 의존성 분석\n- 독립적 작업: 단일 팀으로 처리 가능\n- 순차적 의존: 이전 결과 필요 → 여러 팀 순서대로\n- 병렬 가능: 동시 조회 가능 → coordination: "parallel"\n\n### 4단계: 최종 검증\n- 선택한 팀들로 질문에 완전히 답변 가능한가?\n- 불필요한 팀이 포함되지 않았는가?\n- 순서가 논리적인가? (데이터 흐름 고려)\n\n### 중요 원칙:\n- **법률 키워드만으로 판단하지 말 것**: "법적으로 어떻게 해야 해?" = 법률 검색 + 분석 필요\n- **상황 설명 + 해결책 요청** = 반드시 analysis_team 포함\n- **구체적 수치 비교** (3억→10억 같은) = analysis_team 필요\n\n## 의도별 Agent 매핑 가이드 (기본 가이드 - CoT로 조정 가능)\n\n| 의도 (Intent) | 기본 조합 | 상황별 조정 |\n|--------------|-----------|-------------|\n| LEGAL_CONSULT | ["search_team"] | 해결책 요청시 → + analysis_team |\n| MARKET_INQUIRY | ["search_team"] | 비교/평가시 → + analysis_team |\n| LOAN_CONSULT | ["search_team", "analysis_team"] | 계산 필수 |\n| CONTRACT_CREATION | ["document_team"] | 검토 후 작성 → search + document |\n| CONTRACT_REVIEW | ["search_team", "analysis_team"] | 법률 검토 + 리스크 분석 |\n| COMPREHENSIVE | ["search_team", "analysis_team"] | **항상 분석 포함** |\n| RISK_ANALYSIS | ["analysis_team"] | 법률 근거 필요시 → search + analysis |\n| UNCLEAR | ["search_team", "analysis_team"] | 포괄적 대응 |\n\n**중요**: 위 매핑은 **기본 가이드**일 뿐입니다.\n실제 질문의 내용(CoT 분석 결과)에 따라 조정하세요!\n\n## 복합 질문 처리 예시 (CoT 적용)\n\n### 예시 1: 순차적 처리\n질문: "강남구 시세 확인하고 투자 가치 분석해줘"\n**CoT 분석**:\n1. 요구사항: 시세 조회 + 투자 가치 평가\n2. 복잡도: 중간 (검색 + 분석)\n3. 의존성: 시세 데이터 → 투자 분석 (순차)\n4. 검증: search만으로는 "투자 가치 평가" 불가능\n\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "1단계: 시세 조회+투자 평가 필요. 2단계: 중간 복잡도. 3단계: 순차 의존. 4단계: search로 시세 수집 후 analysis로 투자 가치 평가 필요",\n    "coordination": "sequential"\n}\n```\n\n### 예시 2: 단순 정보 조회\n질문: "전세금 인상률 한도가 얼마야?"\n**CoT 분석**:\n1. 요구사항: 단순 사실 확인\n2. 복잡도: 낮음 (정보 확인형)\n3. 의존성: 없음\n4. 검증: search_team만으로 충분\n\n```json\n{\n    "selected_agents": ["search_team"],\n    "reasoning": "1단계: 단순 정보 조회. 2단계: 저복잡도. 3단계: 독립적. 4단계: 법률 검색만으로 답변 가능",\n    "coordination": "single"\n}\n```\n\n### 예시 3: 해결책 요청 (핵심 예시!)\n질문: "집주인이 전세금 3억을 10억으로 올려달래. 법적으로 어떻게 해야 해?"\n의도: COMPREHENSIVE\n**CoT 분석**:\n1. 요구사항: 상황 설명 + 해결책 요청\n2. 복잡도: 높음 (구체적 상황 + 수치 비교)\n3. 의존성: 법률 확인 → 상황 분석 → 해결책 제시\n4. 검증: "법적으로"만 보고 search만 선택하면 불충분! 해결책 제시 필요\n\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "1단계: 법률 + 상황 분석 + 해결책 필요. 2단계: 고복잡도(3억→10억 비정상). 3단계: 순차(법률 확인 후 타당성 분석). 4단계: \'어떻게 해야\' = 단순 법률 조회 아님, 분석 필수",\n    "coordination": "sequential",\n    "confidence": 0.95\n}\n```\n\n## 응답 형식 (JSON)\n\n```json\n{\n    "selected_agents": ["선택된 agent/team 목록"],\n    "reasoning": "선택 이유를 구체적으로 설명. 각 Agent의 역할과 처리 순서 포함",\n    "coordination": "single/sequential/parallel/pipeline",\n    "dependencies": {"agent2": ["agent1"]},\n    "estimated_time": 30,\n    "confidence": 0.9\n}\n```\n\n## 선택 가이드라인\n\n1. **최소 Agent 원칙**: 가능한 적은 수의 Agent로 처리\n2. **전문성 우선**: 해당 작업에 가장 전문적인 Agent 선택\n3. **효율성 고려**: 병렬 처리 가능한 경우 명시\n4. **의존성 관리**: 데이터 흐름을 고려한 순서 지정\n5. **폴백 전략**: 불확실한 경우 ["search_team", "analysis_team"] 조합\n\n## 주의사항\n\n- selected_agents는 반드시 배열 형태\n- Agent 이름은 정확히: "search_team", "analysis_team", "document_team"\n- 최소 1개, 최대 3개 선택\n- 순서는 실행 우선순위 (앞에 있을수록 먼저 실행)\n- reasoning은 상세하고 논리적으로 작성\n- coordination 필드로 실행 방식 명시\n- 복합 질문의 경우 의존성 관계 명확히 표시'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 15:59:06,140 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 15:59:06,140 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 15:59:06,140 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 15:59:06,140 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 15:59:06,140 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 15:59:06,141 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 15:59:11,122 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 06:59:11 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'4782'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'4794'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9969'), (b'x-ratelimit-remaining-tokens', b'197884'), (b'x-ratelimit-reset-requests', b'4m22.193s'), (b'x-ratelimit-reset-tokens', b'634ms'), (b'x-request-id', b'req_e9a179b5e5524c85903447492e637627'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b08cb38363091-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 15:59:11,122 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 15:59:11,122 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 15:59:11,124 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 15:59:11,124 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 15:59:11,124 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 15:59:11,125 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 06:59:11 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '4782', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '4794', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9969', 'x-ratelimit-remaining-tokens': '197884', 'x-ratelimit-reset-requests': '4m22.193s', 'x-ratelimit-reset-tokens': '634ms', 'x-request-id': 'req_e9a179b5e5524c85903447492e637627', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b08cb38363091-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 15:59:11,125 - openai._base_client - DEBUG - request_id: req_e9a179b5e5524c85903447492e637627
2025-10-05 15:59:11,125 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: agent_selection | Model: gpt-4o-mini-2024-07-18 | Tokens: 2518 (prompt: 2366, completion: 152)
2025-10-05 15:59:11,125 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM agent selection reasoning: 1단계: 송파구 시세 조회와 투자 가치 평가가 필요합니다. 2단계: 이는 중간 복잡도로, 시세 조회 후 분석이 필요합니다. 3단계: 시세 데이터가 투자 가치 평가에 의존하므로 순차적으로 진행해야 합니다. 4단계: 단순 시세 조회만으로는 투자 가치 평가를 할 수 없으므로, 두 팀이 필요합니다.
2025-10-05 15:59:11,125 - app.service_agent.cognitive_agents.planning_agent - INFO - ✅ Primary LLM selected agents: ['search_team', 'analysis_team']
2025-10-05 15:59:11,125 - __main__ - INFO -   의도: 종합분석
2025-10-05 15:59:11,125 - __main__ - INFO -   신뢰도: 0.85
2025-10-05 15:59:11,125 - __main__ - INFO -   추천 Agent: ['search_team', 'analysis_team']
2025-10-05 15:59:11,125 - __main__ - INFO - 
[Step 2] Query Decomposition...
2025-10-05 15:59:11,125 - app.service_agent.cognitive_agents.query_decomposer - INFO - Decomposing query: 송파구 시세 조회하고 투자 가치 평가해줘...
2025-10-05 15:59:11,125 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-524e225c-09c4-46a7-b7a5-f360513920fb', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 질문 분해 전문가입니다.\n복잡한 사용자 질문을 독립적으로 처리 가능한 작업 단위로 분해하는 것이 목표입니다.\n\n## Chain-of-Thought 분해 프로세스:\n\n### 1단계: 복합 질문 여부 판단\n- 단순 정보 조회만 필요한가? → is_compound: false\n- **다음 중 하나라도 해당하면 is_compound: true**:\n  * "그리고", "그 다음", "한 후" 같은 연결어로 여러 요청 연결\n  * 명시적으로 2개 이상의 작업 요청 (예: "시세 확인하고 대출 계산해줘")\n  * 상황 설명 + 해결책 요청 (예: "3억→10억 올려달래. 어떻게 해야 해?")\n  * 해결책을 위해 여러 단계 처리 필요 (검색 → 분석 → 제안)\n\n### 2단계: 필요 작업 식별\n- 정보 수집이 필요한가? → search 작업\n- 평가/판단이 필요한가? → analysis 작업\n- 문서 생성이 필요한가? → generation 작업\n- **해결책 요청**인가? → search + analysis (최소 2개)\n\n### 3단계: 작업 순서 결정\n- 독립적 작업: 병렬 가능\n- 이전 결과 필요: 순차 실행 (depends_on 설정)\n\n## 중요 원칙:\n1. 각 작업은 하나의 명확한 목표를 가져야 합니다\n2. 작업 간 의존성을 명확히 파악해야 합니다\n3. 병렬 처리 가능한 작업은 구분해야 합니다\n4. **주의**: "어떻게 해야", "방법 알려줘" 같은 해결책 요청은 복합 질문!\n\n## 작업 유형 (type):\n- search: 정보 검색 (법률, 시세, 대출 정보 등)\n- analysis: 데이터 분석 (리스크 평가, 시장 분석 등)\n- generation: 문서 생성 (계약서 작성 등)\n- review: 검토/평가 (계약서 검토, 조건 확인 등)\n- calculation: 계산/산출 (대출 한도, 세금 등)\n- comparison: 비교 분석 (여러 옵션 비교)\n\n## 담당 팀 (agent):\n- search_team: 법률, 시세, 대출 정보 검색\n- analysis_team: 데이터 분석, 리스크 평가, 계산\n- document_team: 문서 생성, 계약서 작성\n\n## 학습 예시:\n\n### 예시 1: 복합 질문 (순차적)\n질문: "강남구 아파트 시세 확인하고 대출 가능 금액 계산해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "강남구 아파트 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "대출 가능 금액 계산",\n            "type": "calculation",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "required_data": {"price": "task_0.result.price"},\n            "estimated_time": 15\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "시세 정보가 있어야 대출 금액 계산이 가능하므로 순차 실행"\n}\n```\n\n### 예시 2: 복합 질문 (병렬 가능)\n질문: "이 지역 전세 시세와 매매 시세 모두 알려주고 비교 분석해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "전세 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "매매 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "전세/매매 시세 비교 분석",\n            "type": "comparison",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0", "task_1"],\n            "required_data": {\n                "lease_price": "task_0.result",\n                "sale_price": "task_1.result"\n            },\n            "estimated_time": 25\n        }\n    ],\n    "execution_mode": "mixed",\n    "parallel_groups": [["task_0", "task_1"], ["task_2"]],\n    "reasoning": "시세 조회는 독립적이므로 병렬 처리, 비교는 두 결과 필요"\n}\n```\n\n### 예시 3: 복합 질문 (3단계 이상)\n질문: "이 계약서 검토해서 위험한 부분 찾고 수정안 만들어서 최종 계약서 작성해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "계약서 내용 전체 검토",\n            "type": "review",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 30\n        },\n        {\n            "description": "위험 요소 및 문제점 분석",\n            "type": "analysis",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "estimated_time": 25\n        },\n        {\n            "description": "수정안 제안 생성",\n            "type": "generation",\n            "agent": "document_team",\n            "priority": 3,\n            "depends_on": ["task_1"],\n            "estimated_time": 20\n        },\n        {\n            "description": "최종 계약서 작성",\n            "type": "generation",\n            "agent": "document_team",\n            "priority": 4,\n            "depends_on": ["task_2"],\n            "estimated_time": 30\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "각 단계가 이전 결과에 의존하므로 순차 실행 필요"\n}\n```\n\n### 예시 4: 단순 질문 (분해 불필요)\n질문: "전세금 인상률 상한이 얼마야?"\n분해:\n```json\n{\n    "is_compound": false,\n    "sub_tasks": [\n        {\n            "description": "전세금 인상률 상한 법률 정보 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 15\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "단일 정보 조회 요청으로 분해 불필요"\n}\n```\n\n### 예시 5: 조건부 실행\n질문: "이 물건 시세 확인하고 적정가면 대출 상담도 받고 싶어"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "물건 시세 조회 및 적정성 평가",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 25\n        },\n        {\n            "description": "대출 상담 정보 제공",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "optional": true,\n            "context": {"condition": "if_reasonable_price"},\n            "estimated_time": 20\n        }\n    ],\n    "execution_mode": "conditional",\n    "reasoning": "시세 확인 결과에 따라 대출 상담 진행 여부 결정"\n}\n```\n\n### 예시 6: 상황 설명 + 해결책 요청 (핵심 패턴!)\n질문: "집주인이 전세금 3억을 10억으로 올려달래. 법적으로 어떻게 해야 해?"\n**CoT 분석**:\n1. 질문 분석: 상황 설명 + 해결책 요청\n2. 연결어: 없지만, "어떻게 해야" = 해결책 요청\n3. 의존성: 법률 확인 → 상황 분석 → 대응 방안\n4. 복합 여부: **YES** (해결책을 위해 여러 단계 필요)\n\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "전세금 인상 한도 관련 법률 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "3억→10억 인상의 법적 타당성 및 적정성 분석",\n            "type": "analysis",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "required_data": {"legal_limit": "task_0.result", "current": 300000000, "requested": 1000000000},\n            "estimated_time": 25\n        },\n        {\n            "description": "구체적 대응 방안 및 해결책 제시",\n            "type": "analysis",\n            "agent": "analysis_team",\n            "priority": 3,\n            "depends_on": ["task_1"],\n            "estimated_time": 20\n        }\n    ],\n    "execution_mode": "sequential",\n    "confidence": 0.95,\n    "reasoning": "상황 설명+해결책 요청 패턴. \'어떻게 해야\'는 단순 정보 조회가 아닌 종합 해결책 필요. 법률 조회 → 상황 분석 → 해결책 제시 3단계 순차 처리"\n}\n```\n\n## Chain-of-Thought 프로세스:\n\n1. **질문 분석**: 어떤 정보나 작업을 요구하는가?\n2. **연결어 확인**: "그리고", "또한", "해서", "한 후" 등이 있는가?\n3. **의존성 파악**: 어떤 작업이 다른 작업의 결과를 필요로 하는가?\n4. **병렬성 판단**: 독립적으로 실행 가능한 작업이 있는가?\n5. **최적화**: 불필요한 분해는 없는가?\n\n## 응답 형식 (JSON):\n\n{\n    "is_compound": true/false,\n    "sub_tasks": [\n        {\n            "description": "작업 설명",\n            "type": "작업 유형",\n            "agent": "담당 팀",\n            "priority": 우선순위 (1이 가장 높음),\n            "depends_on": ["선행 작업 ID 리스트"],\n            "required_data": {"필요한 데이터 매핑"},\n            "estimated_time": 예상 소요 시간(초),\n            "optional": true/false,\n            "context": {"추가 컨텍스트"}\n        }\n    ],\n    "execution_mode": "sequential/parallel/mixed/conditional",\n    "parallel_groups": [["병렬 실행 가능한 작업 ID 그룹"]],\n    "confidence": 0.0-1.0,\n    "reasoning": "분해 결정의 이유와 근거"\n}\n\n## 분해 가이드라인:\n\n1. **분해가 필요한 경우**:\n   - 여러 종류의 정보를 요청하는 경우\n   - 순차적 처리가 필요한 경우 (A의 결과로 B 수행)\n   - 서로 다른 팀의 전문성이 필요한 경우\n\n2. **분해가 불필요한 경우**:\n   - 단일 정보 조회\n   - 단순한 질문-답변\n   - 하나의 팀에서 완전히 처리 가능한 경우\n\n3. **병렬 처리 기준**:\n   - 서로 독립적인 정보 조회\n   - 의존성이 없는 분석 작업\n   - 동시에 진행해도 충돌하지 않는 작업\n\n4. **우선순위 설정**:\n   - 의존성이 없는 작업: priority 1\n   - 1차 의존 작업: priority 2\n   - 2차 의존 작업: priority 3\n   - 이런 식으로 증가\n\n현재 의도: 종합분석\n추출된 엔티티: None\n\n분석할 질문: 송파구 시세 조회하고 투자 가치 평가해줘'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 15:59:11,126 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 15:59:11,126 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 15:59:11,126 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 15:59:11,126 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 15:59:11,126 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 15:59:11,126 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 15:59:13,528 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 06:59:13 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'2182'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'2197'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9969'), (b'x-ratelimit-remaining-tokens', b'197336'), (b'x-ratelimit-reset-requests', b'4m25.829s'), (b'x-ratelimit-reset-tokens', b'799ms'), (b'x-request-id', b'req_fe7dea2c0c504759be2e86e12acfe1e7'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b08ea6b5a3091-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 15:59:13,528 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 15:59:13,529 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 15:59:13,536 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 15:59:13,536 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 15:59:13,537 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 15:59:13,537 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 06:59:13 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '2182', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '2197', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9969', 'x-ratelimit-remaining-tokens': '197336', 'x-ratelimit-reset-requests': '4m25.829s', 'x-ratelimit-reset-tokens': '799ms', 'x-request-id': 'req_fe7dea2c0c504759be2e86e12acfe1e7', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b08ea6b5a3091-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 15:59:13,537 - openai._base_client - DEBUG - request_id: req_fe7dea2c0c504759be2e86e12acfe1e7
2025-10-05 15:59:13,538 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: query_decomposition | Model: gpt-4o-mini-2024-07-18 | Tokens: 2869 (prompt: 2691, completion: 178)
2025-10-05 15:59:13,538 - app.service_agent.cognitive_agents.query_decomposer - INFO - Successfully decomposed into 2 tasks
2025-10-05 15:59:13,538 - __main__ - INFO -   복합 질문: True
2025-10-05 15:59:13,538 - __main__ - INFO -   작업 수: 2
2025-10-05 15:59:13,538 - __main__ - INFO -   실행 모드: sequential
2025-10-05 15:59:13,538 - __main__ - INFO -     - task_0: 송파구 아파트 시세 조회 (search_team)
2025-10-05 15:59:13,538 - __main__ - INFO -     - task_1: 송파구 시세에 대한 투자 가치 평가 (analysis_team)
2025-10-05 15:59:13,538 - __main__ - INFO - 
[Step 3] Comprehensive Plan 생성...
2025-10-05 15:59:13,538 - app.service_agent.cognitive_agents.planning_agent - INFO - Creating comprehensive plan for query: 송파구 시세 조회하고 투자 가치 평가해줘...
2025-10-05 15:59:13,538 - app.service_agent.cognitive_agents.planning_agent - INFO - Analyzing intent for query: 송파구 시세 조회하고 투자 가치 평가해줘...
2025-10-05 15:59:13,538 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-94d999cd-92b5-44cb-84e0-2797e58bcd0a', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 의도 분석 전문가입니다.\n사용자의 질문을 정확히 이해하고, 어떤 종류의 도움이 필요한지 분류해야 합니다.\n\n## Chain-of-Thought 분석 프로세스\n\n질문을 분석할 때 다음 단계를 **순서대로** 따르세요:\n\n### 1단계: 질문 구조 파악\n- 단순 정보 요청인가? (예: "~이 뭐야?", "~알려줘")\n- 상황 설명이 포함되어 있는가? (배경, 현재 상태)\n- 구체적 수치나 데이터가 있는가? (금액, 비율, 기간 등)\n- 문제 해결을 요구하는가? (예: "어떻게 해야 해?", "방법 알려줘")\n\n### 2단계: 요청 유형 판단\n- **정보 확인형**: 사실, 개념, 규정 확인 → 검색만으로 충분\n- **평가/판단형**: "괜찮아?", "적절해?", "문제있어?" → 검색 + 분석 필요\n- **해결책 요청형**: "어떻게?", "방법?", "대처?" → 검색 + 분석 + 제안 필요\n- **비교/선택형**: "A vs B", "어느게 나아?" → 검색 + 분석(비교) 필요\n\n### 3단계: 복잡도 평가\n- **저**: 단일 개념/사실 확인 (예: "전세금 인상률 한도?")\n- **중**: 특정 상황 + 판단 (예: "3억을 5억으로 올려달래. 가능해?")\n- **고**: 복잡한 상황 + 여러 조건 + 해결책 (예: "10년 거주, 3억→10억 요구. 어떻게 해야 해?")\n\n### 4단계: 필요한 처리 결정\n- **검색만**: 정보 확인형 + 저복잡도\n- **검색+분석**: 평가/판단형 OR 중복잡도 OR 수치 비교 포함\n- **종합처리**: 해결책 요청형 OR 고복잡도 OR 여러 조건 동시 고려\n\n### 5단계: 최종 검증\n- 선택한 의도로 사용자 질문에 완전히 답변 가능한가?\n- 단순 정보 제공으로 끝나는가, 아니면 추가 분석/판단이 필요한가?\n- 상황 설명이 있으면서 "해결", "방법", "어떻게" 등이 있으면 → COMPREHENSIVE 고려\n\n## 중요: 복합 질문 처리\n복합적인 질문(여러 의도가 섞인 질문)의 경우, 가장 핵심적인 의도를 파악하되,\nsub_intents 필드에 부가적인 의도들도 함께 기록해주세요.\n\n**특히 주의**:\n- 법률 키워드가 있어도, "해결방법", "어떻게 해야" 같은 표현이 있으면 단순 LEGAL_CONSULT가 아닐 수 있음\n- 구체적 상황(금액, 기간 등) + 해결책 요구 = COMPREHENSIVE 또는 복합 의도로 분류\n\n## 분류 카테고리 설명:\n\n1. **LEGAL_CONSULT (법률상담)**\n   - 설명: 부동산 관련 법률, 권리, 의무에 대한 질문\n   - 예시:\n     * 단순: "전세금 5% 인상이 가능한가요?", "임대차계약 갱신 거부할 수 있나요?"\n     * 복합: "전세금 인상 가능한지 확인하고 법적 근거도 알려주세요"\n   - 키워드: 법, 전세, 임대, 보증금, 계약, 권리, 의무, 갱신, 임차인, 임대인, 법률, 규정, 조항\n   - 필요한 처리: 법률 데이터베이스 검색, 관련 법조항 찾기\n\n2. **MARKET_INQUIRY (시세조회)**\n   - 설명: 부동산 시장 가격, 시세, 거래 동향에 대한 질문\n   - 예시:\n     * 단순: "강남구 아파트 전세 시세 알려주세요", "서초동 매매가 얼마나 올랐나요?"\n     * 복합: "강남구 시세 확인하고 대출 가능 금액도 계산해줘"\n   - 키워드: 시세, 가격, 매매가, 전세가, 월세, 시장, 동향, 평균, 지역명, 상승률, 하락률\n   - 필요한 처리: 부동산 시세 데이터 조회, 지역별 가격 분석\n\n3. **LOAN_CONSULT (대출상담)**\n   - 설명: 주택담보대출, 전세자금대출 등 금융 관련 질문\n   - 예시:\n     * 단순: "전세자금대출 한도가 얼마인가요?", "LTV가 뭔가요?"\n     * 복합: "대출 한도 확인하고 금리 비교도 해주세요"\n   - 키워드: 대출, 금리, 한도, 조건, 상환, LTV, DTI, DSR, 담보, 금융, 은행\n   - 필요한 처리: 대출 상품 조회, 금리 정보 검색, 한도 계산\n\n4. **CONTRACT_CREATION (계약서작성)**\n   - 설명: 새로운 계약서나 문서를 작성해달라는 요청\n   - 예시:\n     * 단순: "임대차계약서 작성해주세요", "전세계약서 초안 만들어주세요"\n     * 복합: "계약서 작성하고 주의사항도 검토해주세요"\n   - 키워드: 작성, 만들, 생성, 초안, 계약서, 문서, 양식\n   - 필요한 처리: 문서 생성 에이전트 호출, 템플릿 기반 작성\n\n5. **CONTRACT_REVIEW (계약서검토)**\n   - 설명: 기존 계약서나 문서를 검토해달라는 요청\n   - 예시:\n     * 단순: "이 계약서 검토해주세요", "특약사항 문제없나요?"\n     * 복합: "계약서 검토하고 수정사항도 제안해주세요"\n   - 키워드: 검토, 확인, 점검, 리뷰, 분석해, 살펴봐, 체크\n   - 필요한 처리: 문서 분석, 위험 요소 식별, 개선사항 제안\n\n6. **COMPREHENSIVE (종합분석)**\n   - 설명: 여러 측면을 종합적으로 분석해달라는 요청, 또는 복잡한 상황에 대한 해결책 요청\n   - 예시:\n     * 단순: "이 물건 전체적으로 분석해주세요"\n     * 복합: "시세, 법률, 대출 모두 검토해서 종합 의견 주세요"\n     * 해결형: "10년 거주했는데 전세금 3억을 10억으로 올려달래. 어떻게 해야 해?"\n     * 상황+해결: "집주인이 계약 갱신 거부했어. 법적으로 어떻게 대응해야 할까?"\n   - 키워드: 종합, 전체, 모든, 전반적, 종합적, 평가, 분석, 어떻게, 방법, 해결, 대처\n   - 패턴: 구체적 상황 설명 + "어떻게/방법/해결" 요청\n   - 필요한 처리: 다중 데이터 소스 통합 분석, 상황 평가, 해결책 제시\n\n7. **RISK_ANALYSIS (리스크분석)**\n   - 설명: 위험 요소나 주의사항에 대한 질문\n   - 예시:\n     * 단순: "이 계약 위험한가요?", "주의할 점 알려주세요"\n     * 복합: "리스크 분석하고 대안도 제시해주세요"\n   - 키워드: 위험, 리스크, 주의, 문제점, 조심, 걱정, 우려\n   - 필요한 처리: 위험 요소 분석, 주의사항 추출\n\n8. **UNCLEAR (불분명)**\n   - 설명: 의도를 명확히 파악하기 어려운 질문\n   - 예시: "이거 좀 봐주세요", "어떻게 해야 할까요?", "도와주세요"\n   - 처리: 추가 질문으로 의도 명확화 필요\n\n9. **IRRELEVANT (무관)**\n   - 설명: 부동산과 전혀 관련 없는 질문\n   - 예시: "날씨 어때?", "저녁 뭐 먹지?", "주식 추천해줘"\n   - 처리: 부동산 관련 질문을 유도\n\n## 복합 질문 예시와 분석 (CoT 적용):\n\n### 예시 1: "강남구 아파트 시세 알려주고 전세자금대출 가능한지도 확인해줘"\n**CoT 분석**:\n1. 구조: 두 개의 요청 ("시세" + "대출")\n2. 유형: 정보 확인형 (둘 다)\n3. 복잡도: 중 (두 가지 독립적 조회)\n4. 필요 처리: 검색 + 계산/분석\n\n**결론**:\n- 주 의도: MARKET_INQUIRY (시세 조회가 먼저 필요)\n- 부가 의도: LOAN_CONSULT (대출 확인)\n- 분해: ["강남구 아파트 시세 조회", "전세자금대출 가능 여부 확인"]\n\n### 예시 2: "이 계약서 검토해서 위험한 부분 있는지 알려주고 수정 제안도 해줘"\n**CoT 분석**:\n1. 구조: 검토 + 위험 평가 + 수정안\n2. 유형: 평가/판단형 + 해결책 요청형\n3. 복잡도: 고 (3단계 처리)\n4. 필요 처리: 검토 + 분석 + 문서 생성\n\n**결론**:\n- 주 의도: CONTRACT_REVIEW (계약서 검토)\n- 부가 의도: RISK_ANALYSIS (위험 분석)\n- 분해: ["계약서 전체 검토", "위험 요소 식별", "수정사항 제안"]\n\n### 예시 3: "집주인이 짜증나, 10년 살았는데 전세금 3억을 10억으로 올려달래. 법적으로 해결방법 알려줘"\n**CoT 분석**:\n1. 구조: 상황 설명 (10년 거주, 3억→10억) + 해결책 요청\n2. 유형: 해결책 요청형 (단순 정보 X)\n3. 복잡도: 고 (구체적 상황 + 수치 비교 + 법률 + 대응방안)\n4. 필요 처리: 법률 검색 + 상황 분석 + 해결책 제시\n\n**결론**:\n- 주 의도: COMPREHENSIVE (복잡한 상황에 대한 종합 해결)\n- 부가 의도: LEGAL_CONSULT, RISK_ANALYSIS\n- 분해: ["전세금 인상 한도 법률 조회", "3억→10억 인상의 타당성 분석", "구체적 대응 방안 제시"]\n- **이유**: "법적으로"라는 키워드가 있지만, 단순 법률 확인이 아니라 구체적 상황에 대한 해결책을 요구하므로 COMPREHENSIVE\n\n### 예시 4: "전세금 인상률 상한이 얼마야?"\n**CoT 분석**:\n1. 구조: 단순 사실 확인\n2. 유형: 정보 확인형\n3. 복잡도: 저 (단일 개념)\n4. 필요 처리: 검색만\n\n**결론**:\n- 주 의도: LEGAL_CONSULT (법률 정보 조회)\n- 부가 의도: 없음\n- 분해: 필요 없음\n\n## 응답 형식 (JSON 형식으로 응답):\n\n```json\n{\n    "intent": "LEGAL_CONSULT",\n    "confidence": 0.9,\n    "keywords": ["전세금", "인상", "제한"],\n    "sub_intents": [],\n    "is_compound": false,\n    "decomposed_tasks": [],\n    "entities": {\n        "location": "강남구",\n        "price": "5억",\n        "contract_type": "전세",\n        "date": "2024년",\n        "area": "84㎡",\n        "action_verbs": ["확인", "검토"]\n    },\n    "reasoning": "전세금 인상에 대한 법률 질문이므로 LEGAL_CONSULT로 분류"\n}\n```\n\n응답 규칙:\n- intent: 위 9개 카테고리 중 하나 (대문자_언더스코어 형식)\n- confidence: 0.0~1.0 (0.8 이상이면 매우 확실, 0.5 미만이면 불확실)\n- keywords: 추출된 주요 키워드 목록\n- sub_intents: 복합 질문일 경우 부가적인 의도들\n- is_compound: 복합 질문 여부 (true/false)\n- decomposed_tasks: 복합 질문을 분해한 개별 작업들\n- entities: 추출된 엔티티 정보\n- reasoning: **반드시 CoT 5단계를 거쳐 분석한 과정을 포함** (구조 파악 → 유형 판단 → 복잡도 평가 → 필요 처리 → 최종 검증)\n\n## reasoning 작성 예시:\n"1단계(구조): 상황 설명(10년 거주, 3억→10억) + 해결책 요청 포함.\n2단계(유형): 해결책 요청형 - 단순 정보가 아닌 대응방안 필요.\n3단계(복잡도): 고 - 구체적 수치 비교와 복잡한 상황.\n4단계(처리): 법률 검색 + 상황 분석 + 해결책 제시 필요.\n5단계(검증): LEGAL_CONSULT만으로는 불충분, 종합적 분석 필요 → COMPREHENSIVE 선택"\n\n## 판단 가이드:\n- 여러 의도가 섞여있다면, 가장 주된 의도를 intent에, 나머지를 sub_intents에 기록\n- "그리고", "또한", "함께", "같이" 등의 연결어가 있으면 복합 질문일 가능성 높음\n- 법률 관련 키워드가 있으면 LEGAL_CONSULT 우선\n- 가격/시세 언급이 명확하면 MARKET_INQUIRY\n- 계약서라는 단어와 함께 "작성/만들기"가 있으면 CONTRACT_CREATION\n- 계약서라는 단어와 함께 "검토/확인"이 있으면 CONTRACT_REVIEW\n- 불확실하면 confidence를 낮게 설정하고 UNCLEAR 선택\n- 복합 질문은 is_compound를 true로 설정하고 개별 작업으로 분해\n\n분석할 질문: 송파구 시세 조회하고 투자 가치 평가해줘'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 15:59:13,539 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 15:59:13,539 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 15:59:13,539 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 15:59:13,539 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 15:59:13,539 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 15:59:13,539 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 15:59:17,708 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 06:59:17 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'3945'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'3965'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9968'), (b'x-ratelimit-remaining-tokens', b'197242'), (b'x-ratelimit-reset-requests', b'4m32.387s'), (b'x-ratelimit-reset-tokens', b'827ms'), (b'x-request-id', b'req_2096ec801c58451dac2c0b88be228a64'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b08f97b093091-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 15:59:17,709 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 15:59:17,709 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 15:59:17,709 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 15:59:17,709 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 15:59:17,709 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 15:59:17,709 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 06:59:17 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '3945', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '3965', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9968', 'x-ratelimit-remaining-tokens': '197242', 'x-ratelimit-reset-requests': '4m32.387s', 'x-ratelimit-reset-tokens': '827ms', 'x-request-id': 'req_2096ec801c58451dac2c0b88be228a64', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b08f97b093091-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 15:59:17,709 - openai._base_client - DEBUG - request_id: req_2096ec801c58451dac2c0b88be228a64
2025-10-05 15:59:17,710 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: intent_analysis | Model: gpt-4o-mini-2024-07-18 | Tokens: 3425 (prompt: 3181, completion: 244)
2025-10-05 15:59:17,710 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM Intent Analysis Result: {'intent': 'COMPREHENSIVE', 'confidence': 0.85, 'keywords': ['송파구', '시세', '투자', '가치', '평가'], 'sub_intents': ['MARKET_INQUIRY', 'EVALUATION'], 'is_compound': True, 'decomposed_tasks': ['송파구 시세 조회', '송파구 투자 가치 평가'], 'entities': {'location': '송파구', 'action_verbs': ['조회', '평가']}, 'reasoning': '1단계(구조): 시세 조회와 투자 가치 평가 요청이 포함. 2단계(유형): 두 가지 요청이므로 종합적인 분석 필요. 3단계(복잡도): 중 - 시세와 투자 가치를 동시에 고려해야 함. 4단계(처리): 시세 데이터 조회와 투자 가치 분석 필요. 5단계(검증): 단순 시세 조회가 아닌 투자 가치 평가도 요구하므로 COMPREHENSIVE로 분류.'}
2025-10-05 15:59:17,710 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-db462c3c-b895-49e3-919e-7320a55b41a8', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 Agent 선택 전문가입니다.\n사용자의 요청에 가장 적합한 Agent/Team을 선택하는 것이 목표입니다.\n\n## 현재 상황\n\n**사용자 질문:** 송파구 시세 조회하고 투자 가치 평가해줘\n**분석된 의도:** 종합분석\n**추출된 키워드:** [\'송파구\', \'시세\', \'투자\', \'가치\', \'평가\']\n\n## 사용 가능한 Agent/Team 정보\n\n{\'search_team\': {\'name\': \'search_team\', \'capabilities\': \'법률 검색, 부동산 시세 조회, 대출 상품 검색\', \'tools\': [\'legal_search\', \'market_data\', \'loan_data\'], \'use_cases\': [\'법률 상담\', \'시세 조회\', \'대출 정보\']}, \'analysis_team\': {\'name\': \'analysis_team\', \'capabilities\': \'데이터 분석, 리스크 평가, 인사이트 생성, 추천\', \'tools\': [\'data_analyzer\', \'risk_evaluator\'], \'use_cases\': [\'시장 분석\', \'리스크 평가\', \'투자 분석\']}, \'document_team\': {\'name\': \'document_team\', \'capabilities\': \'계약서 작성, 문서 생성, 문서 검토\', \'tools\': [\'document_generator\', \'contract_reviewer\'], \'use_cases\': [\'계약서 작성\', \'문서 검토\']}}\n\n## Agent 역할 및 상세 가이드\n\n### 1. search_team (검색 팀)\n- **주요 기능**: 정보 검색 및 데이터 수집\n- **전문 분야**:\n  * 법률 정보 검색 (전세법, 임대차보호법, 부동산 관련 법규)\n  * 부동산 시세 조회 (매매가, 전세가, 월세, 실거래가)\n  * 대출 상품 정보 검색 (금리, 한도, 조건)\n  * 지역 정보 및 인프라 조회\n- **도구**: legal_search, market_data, loan_data\n- **적합한 작업**: 정보 조회, 데이터 수집, 법률 확인, 시세 파악\n- **예시**:\n  * "전세금 5% 인상 가능한가요?"\n  * "강남구 아파트 전세 시세"\n  * "전세자금대출 한도 얼마?"\n\n### 2. analysis_team (분석 팀)\n- **주요 기능**: 데이터 분석 및 평가\n- **전문 분야**:\n  * 시장 동향 분석 (상승률, 하락률, 추세)\n  * 리스크 평가 (계약, 투자 위험도)\n  * 투자 수익률 계산 (ROI, 월세 수익률)\n  * 대출 한도 및 조건 분석 (LTV, DTI, DSR)\n  * 비교 분석 (지역별, 상품별)\n- **도구**: data_analyzer, risk_evaluator, calculator\n- **적합한 작업**: 데이터 분석, 리스크 평가, 계산, 비교, 예측\n- **의존성**: 보통 search_team의 데이터가 필요\n- **예시**:\n  * "이 지역 투자 가치 분석해줘"\n  * "계약 리스크 평가해줘"\n  * "대출 가능 금액 계산해줘"\n\n### 3. document_team (문서 팀)\n- **주요 기능**: 문서 생성 및 관리\n- **전문 분야**:\n  * 계약서 작성 (임대차, 매매, 전세)\n  * 문서 템플릿 관리\n  * 특약사항 생성\n  * 계약서 수정안 작성\n  * 법률 문서 검토\n- **도구**: document_generator, contract_template, contract_reviewer\n- **적합한 작업**: 문서 작성, 계약서 생성, 문서 수정, 검토\n- **예시**:\n  * "임대차계약서 작성해줘"\n  * "특약사항 추가해줘"\n  * "계약서 수정안 만들어줘"\n\n## Chain-of-Thought Agent 선택 프로세스\n\n다음 단계를 **순서대로** 따라 최적의 Agent 조합을 선택하세요:\n\n### 1단계: 질문 요구사항 파악\n- 단순 정보 조회인가? → search_team만 필요\n- 판단/평가가 필요한가? → search + analysis 필요\n- 해결책 제시가 필요한가? → search + analysis 필요\n- 문서 생성이 필요한가? → document_team 추가\n\n### 2단계: 작업 복잡도 판단\n- **단순** (검색만): "~이 뭐야?", "~알려줘" → search_team\n- **중간** (검색+판단): "~괜찮아?", "~적절해?" → search + analysis\n- **복잡** (종합 해결): 구체적 상황 + "어떻게 해야 해?" → search + analysis\n\n### 3단계: 의존성 분석\n- 독립적 작업: 단일 팀으로 처리 가능\n- 순차적 의존: 이전 결과 필요 → 여러 팀 순서대로\n- 병렬 가능: 동시 조회 가능 → coordination: "parallel"\n\n### 4단계: 최종 검증\n- 선택한 팀들로 질문에 완전히 답변 가능한가?\n- 불필요한 팀이 포함되지 않았는가?\n- 순서가 논리적인가? (데이터 흐름 고려)\n\n### 중요 원칙:\n- **법률 키워드만으로 판단하지 말 것**: "법적으로 어떻게 해야 해?" = 법률 검색 + 분석 필요\n- **상황 설명 + 해결책 요청** = 반드시 analysis_team 포함\n- **구체적 수치 비교** (3억→10억 같은) = analysis_team 필요\n\n## 의도별 Agent 매핑 가이드 (기본 가이드 - CoT로 조정 가능)\n\n| 의도 (Intent) | 기본 조합 | 상황별 조정 |\n|--------------|-----------|-------------|\n| LEGAL_CONSULT | ["search_team"] | 해결책 요청시 → + analysis_team |\n| MARKET_INQUIRY | ["search_team"] | 비교/평가시 → + analysis_team |\n| LOAN_CONSULT | ["search_team", "analysis_team"] | 계산 필수 |\n| CONTRACT_CREATION | ["document_team"] | 검토 후 작성 → search + document |\n| CONTRACT_REVIEW | ["search_team", "analysis_team"] | 법률 검토 + 리스크 분석 |\n| COMPREHENSIVE | ["search_team", "analysis_team"] | **항상 분석 포함** |\n| RISK_ANALYSIS | ["analysis_team"] | 법률 근거 필요시 → search + analysis |\n| UNCLEAR | ["search_team", "analysis_team"] | 포괄적 대응 |\n\n**중요**: 위 매핑은 **기본 가이드**일 뿐입니다.\n실제 질문의 내용(CoT 분석 결과)에 따라 조정하세요!\n\n## 복합 질문 처리 예시 (CoT 적용)\n\n### 예시 1: 순차적 처리\n질문: "강남구 시세 확인하고 투자 가치 분석해줘"\n**CoT 분석**:\n1. 요구사항: 시세 조회 + 투자 가치 평가\n2. 복잡도: 중간 (검색 + 분석)\n3. 의존성: 시세 데이터 → 투자 분석 (순차)\n4. 검증: search만으로는 "투자 가치 평가" 불가능\n\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "1단계: 시세 조회+투자 평가 필요. 2단계: 중간 복잡도. 3단계: 순차 의존. 4단계: search로 시세 수집 후 analysis로 투자 가치 평가 필요",\n    "coordination": "sequential"\n}\n```\n\n### 예시 2: 단순 정보 조회\n질문: "전세금 인상률 한도가 얼마야?"\n**CoT 분석**:\n1. 요구사항: 단순 사실 확인\n2. 복잡도: 낮음 (정보 확인형)\n3. 의존성: 없음\n4. 검증: search_team만으로 충분\n\n```json\n{\n    "selected_agents": ["search_team"],\n    "reasoning": "1단계: 단순 정보 조회. 2단계: 저복잡도. 3단계: 독립적. 4단계: 법률 검색만으로 답변 가능",\n    "coordination": "single"\n}\n```\n\n### 예시 3: 해결책 요청 (핵심 예시!)\n질문: "집주인이 전세금 3억을 10억으로 올려달래. 법적으로 어떻게 해야 해?"\n의도: COMPREHENSIVE\n**CoT 분석**:\n1. 요구사항: 상황 설명 + 해결책 요청\n2. 복잡도: 높음 (구체적 상황 + 수치 비교)\n3. 의존성: 법률 확인 → 상황 분석 → 해결책 제시\n4. 검증: "법적으로"만 보고 search만 선택하면 불충분! 해결책 제시 필요\n\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "1단계: 법률 + 상황 분석 + 해결책 필요. 2단계: 고복잡도(3억→10억 비정상). 3단계: 순차(법률 확인 후 타당성 분석). 4단계: \'어떻게 해야\' = 단순 법률 조회 아님, 분석 필수",\n    "coordination": "sequential",\n    "confidence": 0.95\n}\n```\n\n## 응답 형식 (JSON)\n\n```json\n{\n    "selected_agents": ["선택된 agent/team 목록"],\n    "reasoning": "선택 이유를 구체적으로 설명. 각 Agent의 역할과 처리 순서 포함",\n    "coordination": "single/sequential/parallel/pipeline",\n    "dependencies": {"agent2": ["agent1"]},\n    "estimated_time": 30,\n    "confidence": 0.9\n}\n```\n\n## 선택 가이드라인\n\n1. **최소 Agent 원칙**: 가능한 적은 수의 Agent로 처리\n2. **전문성 우선**: 해당 작업에 가장 전문적인 Agent 선택\n3. **효율성 고려**: 병렬 처리 가능한 경우 명시\n4. **의존성 관리**: 데이터 흐름을 고려한 순서 지정\n5. **폴백 전략**: 불확실한 경우 ["search_team", "analysis_team"] 조합\n\n## 주의사항\n\n- selected_agents는 반드시 배열 형태\n- Agent 이름은 정확히: "search_team", "analysis_team", "document_team"\n- 최소 1개, 최대 3개 선택\n- 순서는 실행 우선순위 (앞에 있을수록 먼저 실행)\n- reasoning은 상세하고 논리적으로 작성\n- coordination 필드로 실행 방식 명시\n- 복합 질문의 경우 의존성 관계 명확히 표시'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 15:59:17,711 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 15:59:17,711 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 15:59:17,711 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 15:59:17,711 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 15:59:17,711 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 15:59:17,711 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 15:59:21,355 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 06:59:21 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'3425'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'3448'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9967'), (b'x-ratelimit-remaining-tokens', b'197884'), (b'x-ratelimit-reset-requests', b'4m36.536s'), (b'x-ratelimit-reset-tokens', b'634ms'), (b'x-request-id', b'req_3cf6f558394e4daaa77d517356ac8b79'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b09138c9d3091-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 15:59:21,355 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 15:59:21,355 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 15:59:21,357 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 15:59:21,357 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 15:59:21,357 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 15:59:21,358 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 06:59:21 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '3425', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '3448', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9967', 'x-ratelimit-remaining-tokens': '197884', 'x-ratelimit-reset-requests': '4m36.536s', 'x-ratelimit-reset-tokens': '634ms', 'x-request-id': 'req_3cf6f558394e4daaa77d517356ac8b79', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b09138c9d3091-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 15:59:21,358 - openai._base_client - DEBUG - request_id: req_3cf6f558394e4daaa77d517356ac8b79
2025-10-05 15:59:21,358 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: agent_selection | Model: gpt-4o-mini-2024-07-18 | Tokens: 2522 (prompt: 2366, completion: 156)
2025-10-05 15:59:21,358 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM agent selection reasoning: 1단계: 송파구 시세 조회와 투자 가치 평가가 필요하므로, 두 가지 작업이 포함됨. 2단계: 시세 조회 후 투자 가치 분석이 필요하므로 중간 복잡도. 3단계: 시세 데이터가 투자 분석에 필요하므로 순차적 의존성 존재. 4단계: search_team으로 시세를 조회한 후, analysis_team으로 투자 가치를 평가해야 함.
2025-10-05 15:59:21,358 - app.service_agent.cognitive_agents.planning_agent - INFO - ✅ Primary LLM selected agents: ['search_team', 'analysis_team']
2025-10-05 15:59:21,358 - app.service_agent.cognitive_agents.planning_agent - INFO - Intent analyzed: 종합분석 (confidence: 0.85)
2025-10-05 15:59:21,358 - app.service_agent.cognitive_agents.query_decomposer - INFO - Decomposing query: 송파구 시세 조회하고 투자 가치 평가해줘...
2025-10-05 15:59:21,358 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-759b50e1-6304-42c4-9eb8-15b89b7cf664', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 질문 분해 전문가입니다.\n복잡한 사용자 질문을 독립적으로 처리 가능한 작업 단위로 분해하는 것이 목표입니다.\n\n## Chain-of-Thought 분해 프로세스:\n\n### 1단계: 복합 질문 여부 판단\n- 단순 정보 조회만 필요한가? → is_compound: false\n- **다음 중 하나라도 해당하면 is_compound: true**:\n  * "그리고", "그 다음", "한 후" 같은 연결어로 여러 요청 연결\n  * 명시적으로 2개 이상의 작업 요청 (예: "시세 확인하고 대출 계산해줘")\n  * 상황 설명 + 해결책 요청 (예: "3억→10억 올려달래. 어떻게 해야 해?")\n  * 해결책을 위해 여러 단계 처리 필요 (검색 → 분석 → 제안)\n\n### 2단계: 필요 작업 식별\n- 정보 수집이 필요한가? → search 작업\n- 평가/판단이 필요한가? → analysis 작업\n- 문서 생성이 필요한가? → generation 작업\n- **해결책 요청**인가? → search + analysis (최소 2개)\n\n### 3단계: 작업 순서 결정\n- 독립적 작업: 병렬 가능\n- 이전 결과 필요: 순차 실행 (depends_on 설정)\n\n## 중요 원칙:\n1. 각 작업은 하나의 명확한 목표를 가져야 합니다\n2. 작업 간 의존성을 명확히 파악해야 합니다\n3. 병렬 처리 가능한 작업은 구분해야 합니다\n4. **주의**: "어떻게 해야", "방법 알려줘" 같은 해결책 요청은 복합 질문!\n\n## 작업 유형 (type):\n- search: 정보 검색 (법률, 시세, 대출 정보 등)\n- analysis: 데이터 분석 (리스크 평가, 시장 분석 등)\n- generation: 문서 생성 (계약서 작성 등)\n- review: 검토/평가 (계약서 검토, 조건 확인 등)\n- calculation: 계산/산출 (대출 한도, 세금 등)\n- comparison: 비교 분석 (여러 옵션 비교)\n\n## 담당 팀 (agent):\n- search_team: 법률, 시세, 대출 정보 검색\n- analysis_team: 데이터 분석, 리스크 평가, 계산\n- document_team: 문서 생성, 계약서 작성\n\n## 학습 예시:\n\n### 예시 1: 복합 질문 (순차적)\n질문: "강남구 아파트 시세 확인하고 대출 가능 금액 계산해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "강남구 아파트 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "대출 가능 금액 계산",\n            "type": "calculation",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "required_data": {"price": "task_0.result.price"},\n            "estimated_time": 15\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "시세 정보가 있어야 대출 금액 계산이 가능하므로 순차 실행"\n}\n```\n\n### 예시 2: 복합 질문 (병렬 가능)\n질문: "이 지역 전세 시세와 매매 시세 모두 알려주고 비교 분석해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "전세 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "매매 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "전세/매매 시세 비교 분석",\n            "type": "comparison",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0", "task_1"],\n            "required_data": {\n                "lease_price": "task_0.result",\n                "sale_price": "task_1.result"\n            },\n            "estimated_time": 25\n        }\n    ],\n    "execution_mode": "mixed",\n    "parallel_groups": [["task_0", "task_1"], ["task_2"]],\n    "reasoning": "시세 조회는 독립적이므로 병렬 처리, 비교는 두 결과 필요"\n}\n```\n\n### 예시 3: 복합 질문 (3단계 이상)\n질문: "이 계약서 검토해서 위험한 부분 찾고 수정안 만들어서 최종 계약서 작성해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "계약서 내용 전체 검토",\n            "type": "review",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 30\n        },\n        {\n            "description": "위험 요소 및 문제점 분석",\n            "type": "analysis",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "estimated_time": 25\n        },\n        {\n            "description": "수정안 제안 생성",\n            "type": "generation",\n            "agent": "document_team",\n            "priority": 3,\n            "depends_on": ["task_1"],\n            "estimated_time": 20\n        },\n        {\n            "description": "최종 계약서 작성",\n            "type": "generation",\n            "agent": "document_team",\n            "priority": 4,\n            "depends_on": ["task_2"],\n            "estimated_time": 30\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "각 단계가 이전 결과에 의존하므로 순차 실행 필요"\n}\n```\n\n### 예시 4: 단순 질문 (분해 불필요)\n질문: "전세금 인상률 상한이 얼마야?"\n분해:\n```json\n{\n    "is_compound": false,\n    "sub_tasks": [\n        {\n            "description": "전세금 인상률 상한 법률 정보 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 15\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "단일 정보 조회 요청으로 분해 불필요"\n}\n```\n\n### 예시 5: 조건부 실행\n질문: "이 물건 시세 확인하고 적정가면 대출 상담도 받고 싶어"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "물건 시세 조회 및 적정성 평가",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 25\n        },\n        {\n            "description": "대출 상담 정보 제공",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "optional": true,\n            "context": {"condition": "if_reasonable_price"},\n            "estimated_time": 20\n        }\n    ],\n    "execution_mode": "conditional",\n    "reasoning": "시세 확인 결과에 따라 대출 상담 진행 여부 결정"\n}\n```\n\n### 예시 6: 상황 설명 + 해결책 요청 (핵심 패턴!)\n질문: "집주인이 전세금 3억을 10억으로 올려달래. 법적으로 어떻게 해야 해?"\n**CoT 분석**:\n1. 질문 분석: 상황 설명 + 해결책 요청\n2. 연결어: 없지만, "어떻게 해야" = 해결책 요청\n3. 의존성: 법률 확인 → 상황 분석 → 대응 방안\n4. 복합 여부: **YES** (해결책을 위해 여러 단계 필요)\n\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "전세금 인상 한도 관련 법률 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "3억→10억 인상의 법적 타당성 및 적정성 분석",\n            "type": "analysis",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "required_data": {"legal_limit": "task_0.result", "current": 300000000, "requested": 1000000000},\n            "estimated_time": 25\n        },\n        {\n            "description": "구체적 대응 방안 및 해결책 제시",\n            "type": "analysis",\n            "agent": "analysis_team",\n            "priority": 3,\n            "depends_on": ["task_1"],\n            "estimated_time": 20\n        }\n    ],\n    "execution_mode": "sequential",\n    "confidence": 0.95,\n    "reasoning": "상황 설명+해결책 요청 패턴. \'어떻게 해야\'는 단순 정보 조회가 아닌 종합 해결책 필요. 법률 조회 → 상황 분석 → 해결책 제시 3단계 순차 처리"\n}\n```\n\n## Chain-of-Thought 프로세스:\n\n1. **질문 분석**: 어떤 정보나 작업을 요구하는가?\n2. **연결어 확인**: "그리고", "또한", "해서", "한 후" 등이 있는가?\n3. **의존성 파악**: 어떤 작업이 다른 작업의 결과를 필요로 하는가?\n4. **병렬성 판단**: 독립적으로 실행 가능한 작업이 있는가?\n5. **최적화**: 불필요한 분해는 없는가?\n\n## 응답 형식 (JSON):\n\n{\n    "is_compound": true/false,\n    "sub_tasks": [\n        {\n            "description": "작업 설명",\n            "type": "작업 유형",\n            "agent": "담당 팀",\n            "priority": 우선순위 (1이 가장 높음),\n            "depends_on": ["선행 작업 ID 리스트"],\n            "required_data": {"필요한 데이터 매핑"},\n            "estimated_time": 예상 소요 시간(초),\n            "optional": true/false,\n            "context": {"추가 컨텍스트"}\n        }\n    ],\n    "execution_mode": "sequential/parallel/mixed/conditional",\n    "parallel_groups": [["병렬 실행 가능한 작업 ID 그룹"]],\n    "confidence": 0.0-1.0,\n    "reasoning": "분해 결정의 이유와 근거"\n}\n\n## 분해 가이드라인:\n\n1. **분해가 필요한 경우**:\n   - 여러 종류의 정보를 요청하는 경우\n   - 순차적 처리가 필요한 경우 (A의 결과로 B 수행)\n   - 서로 다른 팀의 전문성이 필요한 경우\n\n2. **분해가 불필요한 경우**:\n   - 단일 정보 조회\n   - 단순한 질문-답변\n   - 하나의 팀에서 완전히 처리 가능한 경우\n\n3. **병렬 처리 기준**:\n   - 서로 독립적인 정보 조회\n   - 의존성이 없는 분석 작업\n   - 동시에 진행해도 충돌하지 않는 작업\n\n4. **우선순위 설정**:\n   - 의존성이 없는 작업: priority 1\n   - 1차 의존 작업: priority 2\n   - 2차 의존 작업: priority 3\n   - 이런 식으로 증가\n\n현재 의도: 종합분석\n추출된 엔티티: {\'location\': \'송파구\', \'action_verbs\': [\'조회\', \'평가\']}\n\n분석할 질문: 송파구 시세 조회하고 투자 가치 평가해줘'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 15:59:21,359 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 15:59:21,359 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 15:59:21,359 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 15:59:21,359 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 15:59:21,359 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 15:59:21,359 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 15:59:24,343 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 06:59:24 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'2789'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'2805'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9967'), (b'x-ratelimit-remaining-tokens', b'197321'), (b'x-ratelimit-reset-requests', b'4m41.852s'), (b'x-ratelimit-reset-tokens', b'803ms'), (b'x-request-id', b'req_3c1c1bf9ab8844c092ae631b065d339a'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b092a5d573091-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 15:59:24,345 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 15:59:24,345 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 15:59:24,353 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 15:59:24,354 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 15:59:24,354 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 15:59:24,354 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 06:59:24 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '2789', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '2805', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9967', 'x-ratelimit-remaining-tokens': '197321', 'x-ratelimit-reset-requests': '4m41.852s', 'x-ratelimit-reset-tokens': '803ms', 'x-request-id': 'req_3c1c1bf9ab8844c092ae631b065d339a', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b092a5d573091-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 15:59:24,354 - openai._base_client - DEBUG - request_id: req_3c1c1bf9ab8844c092ae631b065d339a
2025-10-05 15:59:24,355 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: query_decomposition | Model: gpt-4o-mini-2024-07-18 | Tokens: 2886 (prompt: 2710, completion: 176)
2025-10-05 15:59:24,355 - app.service_agent.cognitive_agents.query_decomposer - INFO - Successfully decomposed into 2 tasks
2025-10-05 15:59:24,355 - app.service_agent.cognitive_agents.planning_agent - INFO - Query decomposed into 2 tasks
2025-10-05 15:59:24,355 - app.service_agent.cognitive_agents.planning_agent - WARNING - Plan validation errors: ["Agent 'search_team' not found in registry", "Agent 'analysis_team' depends on missing 'task_0'", "Agent 'analysis_team' not found in registry"]
2025-10-05 15:59:24,355 - app.service_agent.cognitive_agents.planning_agent - INFO - Optimizing execution plan
2025-10-05 15:59:24,355 - app.service_agent.cognitive_agents.planning_agent - INFO - Comprehensive plan created: Intent: 종합분석 (confidence: 0.85) | Strategy: sequential | Agents: search_team, analysis_team | Estimated time: 45.0s
2025-10-05 15:59:24,355 - __main__ - INFO -   전략: sequential
2025-10-05 15:59:24,355 - __main__ - INFO -   단계 수: 2
2025-10-05 15:59:24,355 - __main__ - INFO - 
✓ 테스트 성공 (소요시간: 22.28초)
2025-10-05 15:59:24,355 - __main__ - INFO - 
================================================================================
2025-10-05 15:59:24,355 - __main__ - INFO - [25] 복합 질문 테스트: D005
2025-10-05 15:59:24,355 - __main__ - INFO - 질문: 전세금 인상 가능 여부 확인하고 관련 법조항 찾아줘
2025-10-05 15:59:24,355 - __main__ - INFO - ================================================================================
2025-10-05 15:59:24,355 - __main__ - INFO - 
[Step 1] Intent 분석...
2025-10-05 15:59:24,355 - app.service_agent.cognitive_agents.planning_agent - INFO - Analyzing intent for query: 전세금 인상 가능 여부 확인하고 관련 법조항 찾아줘...
2025-10-05 15:59:24,356 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-b95d1aa1-1e26-4028-92f0-b5ed37dbb80e', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 의도 분석 전문가입니다.\n사용자의 질문을 정확히 이해하고, 어떤 종류의 도움이 필요한지 분류해야 합니다.\n\n## Chain-of-Thought 분석 프로세스\n\n질문을 분석할 때 다음 단계를 **순서대로** 따르세요:\n\n### 1단계: 질문 구조 파악\n- 단순 정보 요청인가? (예: "~이 뭐야?", "~알려줘")\n- 상황 설명이 포함되어 있는가? (배경, 현재 상태)\n- 구체적 수치나 데이터가 있는가? (금액, 비율, 기간 등)\n- 문제 해결을 요구하는가? (예: "어떻게 해야 해?", "방법 알려줘")\n\n### 2단계: 요청 유형 판단\n- **정보 확인형**: 사실, 개념, 규정 확인 → 검색만으로 충분\n- **평가/판단형**: "괜찮아?", "적절해?", "문제있어?" → 검색 + 분석 필요\n- **해결책 요청형**: "어떻게?", "방법?", "대처?" → 검색 + 분석 + 제안 필요\n- **비교/선택형**: "A vs B", "어느게 나아?" → 검색 + 분석(비교) 필요\n\n### 3단계: 복잡도 평가\n- **저**: 단일 개념/사실 확인 (예: "전세금 인상률 한도?")\n- **중**: 특정 상황 + 판단 (예: "3억을 5억으로 올려달래. 가능해?")\n- **고**: 복잡한 상황 + 여러 조건 + 해결책 (예: "10년 거주, 3억→10억 요구. 어떻게 해야 해?")\n\n### 4단계: 필요한 처리 결정\n- **검색만**: 정보 확인형 + 저복잡도\n- **검색+분석**: 평가/판단형 OR 중복잡도 OR 수치 비교 포함\n- **종합처리**: 해결책 요청형 OR 고복잡도 OR 여러 조건 동시 고려\n\n### 5단계: 최종 검증\n- 선택한 의도로 사용자 질문에 완전히 답변 가능한가?\n- 단순 정보 제공으로 끝나는가, 아니면 추가 분석/판단이 필요한가?\n- 상황 설명이 있으면서 "해결", "방법", "어떻게" 등이 있으면 → COMPREHENSIVE 고려\n\n## 중요: 복합 질문 처리\n복합적인 질문(여러 의도가 섞인 질문)의 경우, 가장 핵심적인 의도를 파악하되,\nsub_intents 필드에 부가적인 의도들도 함께 기록해주세요.\n\n**특히 주의**:\n- 법률 키워드가 있어도, "해결방법", "어떻게 해야" 같은 표현이 있으면 단순 LEGAL_CONSULT가 아닐 수 있음\n- 구체적 상황(금액, 기간 등) + 해결책 요구 = COMPREHENSIVE 또는 복합 의도로 분류\n\n## 분류 카테고리 설명:\n\n1. **LEGAL_CONSULT (법률상담)**\n   - 설명: 부동산 관련 법률, 권리, 의무에 대한 질문\n   - 예시:\n     * 단순: "전세금 5% 인상이 가능한가요?", "임대차계약 갱신 거부할 수 있나요?"\n     * 복합: "전세금 인상 가능한지 확인하고 법적 근거도 알려주세요"\n   - 키워드: 법, 전세, 임대, 보증금, 계약, 권리, 의무, 갱신, 임차인, 임대인, 법률, 규정, 조항\n   - 필요한 처리: 법률 데이터베이스 검색, 관련 법조항 찾기\n\n2. **MARKET_INQUIRY (시세조회)**\n   - 설명: 부동산 시장 가격, 시세, 거래 동향에 대한 질문\n   - 예시:\n     * 단순: "강남구 아파트 전세 시세 알려주세요", "서초동 매매가 얼마나 올랐나요?"\n     * 복합: "강남구 시세 확인하고 대출 가능 금액도 계산해줘"\n   - 키워드: 시세, 가격, 매매가, 전세가, 월세, 시장, 동향, 평균, 지역명, 상승률, 하락률\n   - 필요한 처리: 부동산 시세 데이터 조회, 지역별 가격 분석\n\n3. **LOAN_CONSULT (대출상담)**\n   - 설명: 주택담보대출, 전세자금대출 등 금융 관련 질문\n   - 예시:\n     * 단순: "전세자금대출 한도가 얼마인가요?", "LTV가 뭔가요?"\n     * 복합: "대출 한도 확인하고 금리 비교도 해주세요"\n   - 키워드: 대출, 금리, 한도, 조건, 상환, LTV, DTI, DSR, 담보, 금융, 은행\n   - 필요한 처리: 대출 상품 조회, 금리 정보 검색, 한도 계산\n\n4. **CONTRACT_CREATION (계약서작성)**\n   - 설명: 새로운 계약서나 문서를 작성해달라는 요청\n   - 예시:\n     * 단순: "임대차계약서 작성해주세요", "전세계약서 초안 만들어주세요"\n     * 복합: "계약서 작성하고 주의사항도 검토해주세요"\n   - 키워드: 작성, 만들, 생성, 초안, 계약서, 문서, 양식\n   - 필요한 처리: 문서 생성 에이전트 호출, 템플릿 기반 작성\n\n5. **CONTRACT_REVIEW (계약서검토)**\n   - 설명: 기존 계약서나 문서를 검토해달라는 요청\n   - 예시:\n     * 단순: "이 계약서 검토해주세요", "특약사항 문제없나요?"\n     * 복합: "계약서 검토하고 수정사항도 제안해주세요"\n   - 키워드: 검토, 확인, 점검, 리뷰, 분석해, 살펴봐, 체크\n   - 필요한 처리: 문서 분석, 위험 요소 식별, 개선사항 제안\n\n6. **COMPREHENSIVE (종합분석)**\n   - 설명: 여러 측면을 종합적으로 분석해달라는 요청, 또는 복잡한 상황에 대한 해결책 요청\n   - 예시:\n     * 단순: "이 물건 전체적으로 분석해주세요"\n     * 복합: "시세, 법률, 대출 모두 검토해서 종합 의견 주세요"\n     * 해결형: "10년 거주했는데 전세금 3억을 10억으로 올려달래. 어떻게 해야 해?"\n     * 상황+해결: "집주인이 계약 갱신 거부했어. 법적으로 어떻게 대응해야 할까?"\n   - 키워드: 종합, 전체, 모든, 전반적, 종합적, 평가, 분석, 어떻게, 방법, 해결, 대처\n   - 패턴: 구체적 상황 설명 + "어떻게/방법/해결" 요청\n   - 필요한 처리: 다중 데이터 소스 통합 분석, 상황 평가, 해결책 제시\n\n7. **RISK_ANALYSIS (리스크분석)**\n   - 설명: 위험 요소나 주의사항에 대한 질문\n   - 예시:\n     * 단순: "이 계약 위험한가요?", "주의할 점 알려주세요"\n     * 복합: "리스크 분석하고 대안도 제시해주세요"\n   - 키워드: 위험, 리스크, 주의, 문제점, 조심, 걱정, 우려\n   - 필요한 처리: 위험 요소 분석, 주의사항 추출\n\n8. **UNCLEAR (불분명)**\n   - 설명: 의도를 명확히 파악하기 어려운 질문\n   - 예시: "이거 좀 봐주세요", "어떻게 해야 할까요?", "도와주세요"\n   - 처리: 추가 질문으로 의도 명확화 필요\n\n9. **IRRELEVANT (무관)**\n   - 설명: 부동산과 전혀 관련 없는 질문\n   - 예시: "날씨 어때?", "저녁 뭐 먹지?", "주식 추천해줘"\n   - 처리: 부동산 관련 질문을 유도\n\n## 복합 질문 예시와 분석 (CoT 적용):\n\n### 예시 1: "강남구 아파트 시세 알려주고 전세자금대출 가능한지도 확인해줘"\n**CoT 분석**:\n1. 구조: 두 개의 요청 ("시세" + "대출")\n2. 유형: 정보 확인형 (둘 다)\n3. 복잡도: 중 (두 가지 독립적 조회)\n4. 필요 처리: 검색 + 계산/분석\n\n**결론**:\n- 주 의도: MARKET_INQUIRY (시세 조회가 먼저 필요)\n- 부가 의도: LOAN_CONSULT (대출 확인)\n- 분해: ["강남구 아파트 시세 조회", "전세자금대출 가능 여부 확인"]\n\n### 예시 2: "이 계약서 검토해서 위험한 부분 있는지 알려주고 수정 제안도 해줘"\n**CoT 분석**:\n1. 구조: 검토 + 위험 평가 + 수정안\n2. 유형: 평가/판단형 + 해결책 요청형\n3. 복잡도: 고 (3단계 처리)\n4. 필요 처리: 검토 + 분석 + 문서 생성\n\n**결론**:\n- 주 의도: CONTRACT_REVIEW (계약서 검토)\n- 부가 의도: RISK_ANALYSIS (위험 분석)\n- 분해: ["계약서 전체 검토", "위험 요소 식별", "수정사항 제안"]\n\n### 예시 3: "집주인이 짜증나, 10년 살았는데 전세금 3억을 10억으로 올려달래. 법적으로 해결방법 알려줘"\n**CoT 분석**:\n1. 구조: 상황 설명 (10년 거주, 3억→10억) + 해결책 요청\n2. 유형: 해결책 요청형 (단순 정보 X)\n3. 복잡도: 고 (구체적 상황 + 수치 비교 + 법률 + 대응방안)\n4. 필요 처리: 법률 검색 + 상황 분석 + 해결책 제시\n\n**결론**:\n- 주 의도: COMPREHENSIVE (복잡한 상황에 대한 종합 해결)\n- 부가 의도: LEGAL_CONSULT, RISK_ANALYSIS\n- 분해: ["전세금 인상 한도 법률 조회", "3억→10억 인상의 타당성 분석", "구체적 대응 방안 제시"]\n- **이유**: "법적으로"라는 키워드가 있지만, 단순 법률 확인이 아니라 구체적 상황에 대한 해결책을 요구하므로 COMPREHENSIVE\n\n### 예시 4: "전세금 인상률 상한이 얼마야?"\n**CoT 분석**:\n1. 구조: 단순 사실 확인\n2. 유형: 정보 확인형\n3. 복잡도: 저 (단일 개념)\n4. 필요 처리: 검색만\n\n**결론**:\n- 주 의도: LEGAL_CONSULT (법률 정보 조회)\n- 부가 의도: 없음\n- 분해: 필요 없음\n\n## 응답 형식 (JSON 형식으로 응답):\n\n```json\n{\n    "intent": "LEGAL_CONSULT",\n    "confidence": 0.9,\n    "keywords": ["전세금", "인상", "제한"],\n    "sub_intents": [],\n    "is_compound": false,\n    "decomposed_tasks": [],\n    "entities": {\n        "location": "강남구",\n        "price": "5억",\n        "contract_type": "전세",\n        "date": "2024년",\n        "area": "84㎡",\n        "action_verbs": ["확인", "검토"]\n    },\n    "reasoning": "전세금 인상에 대한 법률 질문이므로 LEGAL_CONSULT로 분류"\n}\n```\n\n응답 규칙:\n- intent: 위 9개 카테고리 중 하나 (대문자_언더스코어 형식)\n- confidence: 0.0~1.0 (0.8 이상이면 매우 확실, 0.5 미만이면 불확실)\n- keywords: 추출된 주요 키워드 목록\n- sub_intents: 복합 질문일 경우 부가적인 의도들\n- is_compound: 복합 질문 여부 (true/false)\n- decomposed_tasks: 복합 질문을 분해한 개별 작업들\n- entities: 추출된 엔티티 정보\n- reasoning: **반드시 CoT 5단계를 거쳐 분석한 과정을 포함** (구조 파악 → 유형 판단 → 복잡도 평가 → 필요 처리 → 최종 검증)\n\n## reasoning 작성 예시:\n"1단계(구조): 상황 설명(10년 거주, 3억→10억) + 해결책 요청 포함.\n2단계(유형): 해결책 요청형 - 단순 정보가 아닌 대응방안 필요.\n3단계(복잡도): 고 - 구체적 수치 비교와 복잡한 상황.\n4단계(처리): 법률 검색 + 상황 분석 + 해결책 제시 필요.\n5단계(검증): LEGAL_CONSULT만으로는 불충분, 종합적 분석 필요 → COMPREHENSIVE 선택"\n\n## 판단 가이드:\n- 여러 의도가 섞여있다면, 가장 주된 의도를 intent에, 나머지를 sub_intents에 기록\n- "그리고", "또한", "함께", "같이" 등의 연결어가 있으면 복합 질문일 가능성 높음\n- 법률 관련 키워드가 있으면 LEGAL_CONSULT 우선\n- 가격/시세 언급이 명확하면 MARKET_INQUIRY\n- 계약서라는 단어와 함께 "작성/만들기"가 있으면 CONTRACT_CREATION\n- 계약서라는 단어와 함께 "검토/확인"이 있으면 CONTRACT_REVIEW\n- 불확실하면 confidence를 낮게 설정하고 UNCLEAR 선택\n- 복합 질문은 is_compound를 true로 설정하고 개별 작업으로 분해\n\n분석할 질문: 전세금 인상 가능 여부 확인하고 관련 법조항 찾아줘'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 15:59:24,356 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 15:59:24,357 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 15:59:24,357 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 15:59:24,357 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 15:59:24,357 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 15:59:24,357 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 15:59:29,796 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 06:59:29 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'5233'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'5245'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9966'), (b'x-ratelimit-remaining-tokens', b'197238'), (b'x-ratelimit-reset-requests', b'4m47.175s'), (b'x-ratelimit-reset-tokens', b'828ms'), (b'x-request-id', b'req_7c99898a78d545578410d2c1e74db708'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b093d1abb3091-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 15:59:29,797 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 15:59:29,797 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 15:59:29,797 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 15:59:29,797 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 15:59:29,797 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 15:59:29,797 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 06:59:29 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '5233', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '5245', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9966', 'x-ratelimit-remaining-tokens': '197238', 'x-ratelimit-reset-requests': '4m47.175s', 'x-ratelimit-reset-tokens': '828ms', 'x-request-id': 'req_7c99898a78d545578410d2c1e74db708', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b093d1abb3091-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 15:59:29,797 - openai._base_client - DEBUG - request_id: req_7c99898a78d545578410d2c1e74db708
2025-10-05 15:59:29,798 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: intent_analysis | Model: gpt-4o-mini-2024-07-18 | Tokens: 3444 (prompt: 3184, completion: 260)
2025-10-05 15:59:29,798 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM Intent Analysis Result: {'intent': 'COMPREHENSIVE', 'confidence': 0.85, 'keywords': ['전세금', '인상', '법조항'], 'sub_intents': ['LEGAL_CONSULT'], 'is_compound': True, 'decomposed_tasks': ['전세금 인상 가능 여부 확인', '관련 법조항 검색'], 'entities': {'price': None, 'contract_type': '전세', 'action_verbs': ['확인', '찾다']}, 'reasoning': '1단계(구조): 전세금 인상 가능 여부 확인 요청과 관련 법조항 검색 요청 포함. 2단계(유형): 해결책 요청형 - 단순 정보가 아닌 법적 근거와 가능성 확인 필요. 3단계(복잡도): 중 - 전세금 인상 가능성과 법적 조항을 동시에 고려해야 함. 4단계(처리): 법률 검색과 인상 가능성 확인이 필요. 5단계(검증): LEGAL_CONSULT만으로는 불충분, 종합적 분석 필요 → COMPREHENSIVE 선택.'}
2025-10-05 15:59:29,799 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-8ad7652d-304b-4526-a367-144a830fcd7a', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 Agent 선택 전문가입니다.\n사용자의 요청에 가장 적합한 Agent/Team을 선택하는 것이 목표입니다.\n\n## 현재 상황\n\n**사용자 질문:** 전세금 인상 가능 여부 확인하고 관련 법조항 찾아줘\n**분석된 의도:** 종합분석\n**추출된 키워드:** [\'전세금\', \'인상\', \'법조항\']\n\n## 사용 가능한 Agent/Team 정보\n\n{\'search_team\': {\'name\': \'search_team\', \'capabilities\': \'법률 검색, 부동산 시세 조회, 대출 상품 검색\', \'tools\': [\'legal_search\', \'market_data\', \'loan_data\'], \'use_cases\': [\'법률 상담\', \'시세 조회\', \'대출 정보\']}, \'analysis_team\': {\'name\': \'analysis_team\', \'capabilities\': \'데이터 분석, 리스크 평가, 인사이트 생성, 추천\', \'tools\': [\'data_analyzer\', \'risk_evaluator\'], \'use_cases\': [\'시장 분석\', \'리스크 평가\', \'투자 분석\']}, \'document_team\': {\'name\': \'document_team\', \'capabilities\': \'계약서 작성, 문서 생성, 문서 검토\', \'tools\': [\'document_generator\', \'contract_reviewer\'], \'use_cases\': [\'계약서 작성\', \'문서 검토\']}}\n\n## Agent 역할 및 상세 가이드\n\n### 1. search_team (검색 팀)\n- **주요 기능**: 정보 검색 및 데이터 수집\n- **전문 분야**:\n  * 법률 정보 검색 (전세법, 임대차보호법, 부동산 관련 법규)\n  * 부동산 시세 조회 (매매가, 전세가, 월세, 실거래가)\n  * 대출 상품 정보 검색 (금리, 한도, 조건)\n  * 지역 정보 및 인프라 조회\n- **도구**: legal_search, market_data, loan_data\n- **적합한 작업**: 정보 조회, 데이터 수집, 법률 확인, 시세 파악\n- **예시**:\n  * "전세금 5% 인상 가능한가요?"\n  * "강남구 아파트 전세 시세"\n  * "전세자금대출 한도 얼마?"\n\n### 2. analysis_team (분석 팀)\n- **주요 기능**: 데이터 분석 및 평가\n- **전문 분야**:\n  * 시장 동향 분석 (상승률, 하락률, 추세)\n  * 리스크 평가 (계약, 투자 위험도)\n  * 투자 수익률 계산 (ROI, 월세 수익률)\n  * 대출 한도 및 조건 분석 (LTV, DTI, DSR)\n  * 비교 분석 (지역별, 상품별)\n- **도구**: data_analyzer, risk_evaluator, calculator\n- **적합한 작업**: 데이터 분석, 리스크 평가, 계산, 비교, 예측\n- **의존성**: 보통 search_team의 데이터가 필요\n- **예시**:\n  * "이 지역 투자 가치 분석해줘"\n  * "계약 리스크 평가해줘"\n  * "대출 가능 금액 계산해줘"\n\n### 3. document_team (문서 팀)\n- **주요 기능**: 문서 생성 및 관리\n- **전문 분야**:\n  * 계약서 작성 (임대차, 매매, 전세)\n  * 문서 템플릿 관리\n  * 특약사항 생성\n  * 계약서 수정안 작성\n  * 법률 문서 검토\n- **도구**: document_generator, contract_template, contract_reviewer\n- **적합한 작업**: 문서 작성, 계약서 생성, 문서 수정, 검토\n- **예시**:\n  * "임대차계약서 작성해줘"\n  * "특약사항 추가해줘"\n  * "계약서 수정안 만들어줘"\n\n## Chain-of-Thought Agent 선택 프로세스\n\n다음 단계를 **순서대로** 따라 최적의 Agent 조합을 선택하세요:\n\n### 1단계: 질문 요구사항 파악\n- 단순 정보 조회인가? → search_team만 필요\n- 판단/평가가 필요한가? → search + analysis 필요\n- 해결책 제시가 필요한가? → search + analysis 필요\n- 문서 생성이 필요한가? → document_team 추가\n\n### 2단계: 작업 복잡도 판단\n- **단순** (검색만): "~이 뭐야?", "~알려줘" → search_team\n- **중간** (검색+판단): "~괜찮아?", "~적절해?" → search + analysis\n- **복잡** (종합 해결): 구체적 상황 + "어떻게 해야 해?" → search + analysis\n\n### 3단계: 의존성 분석\n- 독립적 작업: 단일 팀으로 처리 가능\n- 순차적 의존: 이전 결과 필요 → 여러 팀 순서대로\n- 병렬 가능: 동시 조회 가능 → coordination: "parallel"\n\n### 4단계: 최종 검증\n- 선택한 팀들로 질문에 완전히 답변 가능한가?\n- 불필요한 팀이 포함되지 않았는가?\n- 순서가 논리적인가? (데이터 흐름 고려)\n\n### 중요 원칙:\n- **법률 키워드만으로 판단하지 말 것**: "법적으로 어떻게 해야 해?" = 법률 검색 + 분석 필요\n- **상황 설명 + 해결책 요청** = 반드시 analysis_team 포함\n- **구체적 수치 비교** (3억→10억 같은) = analysis_team 필요\n\n## 의도별 Agent 매핑 가이드 (기본 가이드 - CoT로 조정 가능)\n\n| 의도 (Intent) | 기본 조합 | 상황별 조정 |\n|--------------|-----------|-------------|\n| LEGAL_CONSULT | ["search_team"] | 해결책 요청시 → + analysis_team |\n| MARKET_INQUIRY | ["search_team"] | 비교/평가시 → + analysis_team |\n| LOAN_CONSULT | ["search_team", "analysis_team"] | 계산 필수 |\n| CONTRACT_CREATION | ["document_team"] | 검토 후 작성 → search + document |\n| CONTRACT_REVIEW | ["search_team", "analysis_team"] | 법률 검토 + 리스크 분석 |\n| COMPREHENSIVE | ["search_team", "analysis_team"] | **항상 분석 포함** |\n| RISK_ANALYSIS | ["analysis_team"] | 법률 근거 필요시 → search + analysis |\n| UNCLEAR | ["search_team", "analysis_team"] | 포괄적 대응 |\n\n**중요**: 위 매핑은 **기본 가이드**일 뿐입니다.\n실제 질문의 내용(CoT 분석 결과)에 따라 조정하세요!\n\n## 복합 질문 처리 예시 (CoT 적용)\n\n### 예시 1: 순차적 처리\n질문: "강남구 시세 확인하고 투자 가치 분석해줘"\n**CoT 분석**:\n1. 요구사항: 시세 조회 + 투자 가치 평가\n2. 복잡도: 중간 (검색 + 분석)\n3. 의존성: 시세 데이터 → 투자 분석 (순차)\n4. 검증: search만으로는 "투자 가치 평가" 불가능\n\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "1단계: 시세 조회+투자 평가 필요. 2단계: 중간 복잡도. 3단계: 순차 의존. 4단계: search로 시세 수집 후 analysis로 투자 가치 평가 필요",\n    "coordination": "sequential"\n}\n```\n\n### 예시 2: 단순 정보 조회\n질문: "전세금 인상률 한도가 얼마야?"\n**CoT 분석**:\n1. 요구사항: 단순 사실 확인\n2. 복잡도: 낮음 (정보 확인형)\n3. 의존성: 없음\n4. 검증: search_team만으로 충분\n\n```json\n{\n    "selected_agents": ["search_team"],\n    "reasoning": "1단계: 단순 정보 조회. 2단계: 저복잡도. 3단계: 독립적. 4단계: 법률 검색만으로 답변 가능",\n    "coordination": "single"\n}\n```\n\n### 예시 3: 해결책 요청 (핵심 예시!)\n질문: "집주인이 전세금 3억을 10억으로 올려달래. 법적으로 어떻게 해야 해?"\n의도: COMPREHENSIVE\n**CoT 분석**:\n1. 요구사항: 상황 설명 + 해결책 요청\n2. 복잡도: 높음 (구체적 상황 + 수치 비교)\n3. 의존성: 법률 확인 → 상황 분석 → 해결책 제시\n4. 검증: "법적으로"만 보고 search만 선택하면 불충분! 해결책 제시 필요\n\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "1단계: 법률 + 상황 분석 + 해결책 필요. 2단계: 고복잡도(3억→10억 비정상). 3단계: 순차(법률 확인 후 타당성 분석). 4단계: \'어떻게 해야\' = 단순 법률 조회 아님, 분석 필수",\n    "coordination": "sequential",\n    "confidence": 0.95\n}\n```\n\n## 응답 형식 (JSON)\n\n```json\n{\n    "selected_agents": ["선택된 agent/team 목록"],\n    "reasoning": "선택 이유를 구체적으로 설명. 각 Agent의 역할과 처리 순서 포함",\n    "coordination": "single/sequential/parallel/pipeline",\n    "dependencies": {"agent2": ["agent1"]},\n    "estimated_time": 30,\n    "confidence": 0.9\n}\n```\n\n## 선택 가이드라인\n\n1. **최소 Agent 원칙**: 가능한 적은 수의 Agent로 처리\n2. **전문성 우선**: 해당 작업에 가장 전문적인 Agent 선택\n3. **효율성 고려**: 병렬 처리 가능한 경우 명시\n4. **의존성 관리**: 데이터 흐름을 고려한 순서 지정\n5. **폴백 전략**: 불확실한 경우 ["search_team", "analysis_team"] 조합\n\n## 주의사항\n\n- selected_agents는 반드시 배열 형태\n- Agent 이름은 정확히: "search_team", "analysis_team", "document_team"\n- 최소 1개, 최대 3개 선택\n- 순서는 실행 우선순위 (앞에 있을수록 먼저 실행)\n- reasoning은 상세하고 논리적으로 작성\n- coordination 필드로 실행 방식 명시\n- 복합 질문의 경우 의존성 관계 명확히 표시'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 15:59:29,800 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 15:59:29,800 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 15:59:29,800 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 15:59:29,800 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 15:59:29,800 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 15:59:29,800 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 15:59:32,289 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 06:59:32 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'2262'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'2291'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9966'), (b'x-ratelimit-remaining-tokens', b'197884'), (b'x-ratelimit-reset-requests', b'4m50.36s'), (b'x-ratelimit-reset-tokens', b'634ms'), (b'x-request-id', b'req_c22ff49ede4b40acb812c22d328ba69b'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b095f18ea3091-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 15:59:32,289 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 15:59:32,289 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 15:59:32,301 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 15:59:32,301 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 15:59:32,301 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 15:59:32,301 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 06:59:32 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '2262', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '2291', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9966', 'x-ratelimit-remaining-tokens': '197884', 'x-ratelimit-reset-requests': '4m50.36s', 'x-ratelimit-reset-tokens': '634ms', 'x-request-id': 'req_c22ff49ede4b40acb812c22d328ba69b', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b095f18ea3091-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 15:59:32,301 - openai._base_client - DEBUG - request_id: req_c22ff49ede4b40acb812c22d328ba69b
2025-10-05 15:59:32,302 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: agent_selection | Model: gpt-4o-mini-2024-07-18 | Tokens: 2511 (prompt: 2362, completion: 149)
2025-10-05 15:59:32,302 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM agent selection reasoning: 1단계: 전세금 인상 가능 여부 확인과 관련 법조항 검색이 필요하므로 search_team이 필요합니다. 2단계: 전세금 인상에 대한 법적 해석과 그에 따른 리스크 평가가 필요하므로 analysis_team도 포함해야 합니다. 3단계: 법률 검색 후 인상 가능성에 대한 분석이 필요하므로 순차적으로 진행해야 합니다.
2025-10-05 15:59:32,302 - app.service_agent.cognitive_agents.planning_agent - INFO - ✅ Primary LLM selected agents: ['search_team', 'analysis_team']
2025-10-05 15:59:32,302 - __main__ - INFO -   의도: 종합분석
2025-10-05 15:59:32,302 - __main__ - INFO -   신뢰도: 0.85
2025-10-05 15:59:32,302 - __main__ - INFO -   추천 Agent: ['search_team', 'analysis_team']
2025-10-05 15:59:32,302 - __main__ - INFO - 
[Step 2] Query Decomposition...
2025-10-05 15:59:32,302 - app.service_agent.cognitive_agents.query_decomposer - INFO - Decomposing query: 전세금 인상 가능 여부 확인하고 관련 법조항 찾아줘...
2025-10-05 15:59:32,302 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-f7e03718-6e48-4ec7-8515-60c83b151f26', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 질문 분해 전문가입니다.\n복잡한 사용자 질문을 독립적으로 처리 가능한 작업 단위로 분해하는 것이 목표입니다.\n\n## Chain-of-Thought 분해 프로세스:\n\n### 1단계: 복합 질문 여부 판단\n- 단순 정보 조회만 필요한가? → is_compound: false\n- **다음 중 하나라도 해당하면 is_compound: true**:\n  * "그리고", "그 다음", "한 후" 같은 연결어로 여러 요청 연결\n  * 명시적으로 2개 이상의 작업 요청 (예: "시세 확인하고 대출 계산해줘")\n  * 상황 설명 + 해결책 요청 (예: "3억→10억 올려달래. 어떻게 해야 해?")\n  * 해결책을 위해 여러 단계 처리 필요 (검색 → 분석 → 제안)\n\n### 2단계: 필요 작업 식별\n- 정보 수집이 필요한가? → search 작업\n- 평가/판단이 필요한가? → analysis 작업\n- 문서 생성이 필요한가? → generation 작업\n- **해결책 요청**인가? → search + analysis (최소 2개)\n\n### 3단계: 작업 순서 결정\n- 독립적 작업: 병렬 가능\n- 이전 결과 필요: 순차 실행 (depends_on 설정)\n\n## 중요 원칙:\n1. 각 작업은 하나의 명확한 목표를 가져야 합니다\n2. 작업 간 의존성을 명확히 파악해야 합니다\n3. 병렬 처리 가능한 작업은 구분해야 합니다\n4. **주의**: "어떻게 해야", "방법 알려줘" 같은 해결책 요청은 복합 질문!\n\n## 작업 유형 (type):\n- search: 정보 검색 (법률, 시세, 대출 정보 등)\n- analysis: 데이터 분석 (리스크 평가, 시장 분석 등)\n- generation: 문서 생성 (계약서 작성 등)\n- review: 검토/평가 (계약서 검토, 조건 확인 등)\n- calculation: 계산/산출 (대출 한도, 세금 등)\n- comparison: 비교 분석 (여러 옵션 비교)\n\n## 담당 팀 (agent):\n- search_team: 법률, 시세, 대출 정보 검색\n- analysis_team: 데이터 분석, 리스크 평가, 계산\n- document_team: 문서 생성, 계약서 작성\n\n## 학습 예시:\n\n### 예시 1: 복합 질문 (순차적)\n질문: "강남구 아파트 시세 확인하고 대출 가능 금액 계산해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "강남구 아파트 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "대출 가능 금액 계산",\n            "type": "calculation",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "required_data": {"price": "task_0.result.price"},\n            "estimated_time": 15\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "시세 정보가 있어야 대출 금액 계산이 가능하므로 순차 실행"\n}\n```\n\n### 예시 2: 복합 질문 (병렬 가능)\n질문: "이 지역 전세 시세와 매매 시세 모두 알려주고 비교 분석해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "전세 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "매매 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "전세/매매 시세 비교 분석",\n            "type": "comparison",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0", "task_1"],\n            "required_data": {\n                "lease_price": "task_0.result",\n                "sale_price": "task_1.result"\n            },\n            "estimated_time": 25\n        }\n    ],\n    "execution_mode": "mixed",\n    "parallel_groups": [["task_0", "task_1"], ["task_2"]],\n    "reasoning": "시세 조회는 독립적이므로 병렬 처리, 비교는 두 결과 필요"\n}\n```\n\n### 예시 3: 복합 질문 (3단계 이상)\n질문: "이 계약서 검토해서 위험한 부분 찾고 수정안 만들어서 최종 계약서 작성해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "계약서 내용 전체 검토",\n            "type": "review",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 30\n        },\n        {\n            "description": "위험 요소 및 문제점 분석",\n            "type": "analysis",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "estimated_time": 25\n        },\n        {\n            "description": "수정안 제안 생성",\n            "type": "generation",\n            "agent": "document_team",\n            "priority": 3,\n            "depends_on": ["task_1"],\n            "estimated_time": 20\n        },\n        {\n            "description": "최종 계약서 작성",\n            "type": "generation",\n            "agent": "document_team",\n            "priority": 4,\n            "depends_on": ["task_2"],\n            "estimated_time": 30\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "각 단계가 이전 결과에 의존하므로 순차 실행 필요"\n}\n```\n\n### 예시 4: 단순 질문 (분해 불필요)\n질문: "전세금 인상률 상한이 얼마야?"\n분해:\n```json\n{\n    "is_compound": false,\n    "sub_tasks": [\n        {\n            "description": "전세금 인상률 상한 법률 정보 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 15\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "단일 정보 조회 요청으로 분해 불필요"\n}\n```\n\n### 예시 5: 조건부 실행\n질문: "이 물건 시세 확인하고 적정가면 대출 상담도 받고 싶어"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "물건 시세 조회 및 적정성 평가",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 25\n        },\n        {\n            "description": "대출 상담 정보 제공",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "optional": true,\n            "context": {"condition": "if_reasonable_price"},\n            "estimated_time": 20\n        }\n    ],\n    "execution_mode": "conditional",\n    "reasoning": "시세 확인 결과에 따라 대출 상담 진행 여부 결정"\n}\n```\n\n### 예시 6: 상황 설명 + 해결책 요청 (핵심 패턴!)\n질문: "집주인이 전세금 3억을 10억으로 올려달래. 법적으로 어떻게 해야 해?"\n**CoT 분석**:\n1. 질문 분석: 상황 설명 + 해결책 요청\n2. 연결어: 없지만, "어떻게 해야" = 해결책 요청\n3. 의존성: 법률 확인 → 상황 분석 → 대응 방안\n4. 복합 여부: **YES** (해결책을 위해 여러 단계 필요)\n\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "전세금 인상 한도 관련 법률 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "3억→10억 인상의 법적 타당성 및 적정성 분석",\n            "type": "analysis",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "required_data": {"legal_limit": "task_0.result", "current": 300000000, "requested": 1000000000},\n            "estimated_time": 25\n        },\n        {\n            "description": "구체적 대응 방안 및 해결책 제시",\n            "type": "analysis",\n            "agent": "analysis_team",\n            "priority": 3,\n            "depends_on": ["task_1"],\n            "estimated_time": 20\n        }\n    ],\n    "execution_mode": "sequential",\n    "confidence": 0.95,\n    "reasoning": "상황 설명+해결책 요청 패턴. \'어떻게 해야\'는 단순 정보 조회가 아닌 종합 해결책 필요. 법률 조회 → 상황 분석 → 해결책 제시 3단계 순차 처리"\n}\n```\n\n## Chain-of-Thought 프로세스:\n\n1. **질문 분석**: 어떤 정보나 작업을 요구하는가?\n2. **연결어 확인**: "그리고", "또한", "해서", "한 후" 등이 있는가?\n3. **의존성 파악**: 어떤 작업이 다른 작업의 결과를 필요로 하는가?\n4. **병렬성 판단**: 독립적으로 실행 가능한 작업이 있는가?\n5. **최적화**: 불필요한 분해는 없는가?\n\n## 응답 형식 (JSON):\n\n{\n    "is_compound": true/false,\n    "sub_tasks": [\n        {\n            "description": "작업 설명",\n            "type": "작업 유형",\n            "agent": "담당 팀",\n            "priority": 우선순위 (1이 가장 높음),\n            "depends_on": ["선행 작업 ID 리스트"],\n            "required_data": {"필요한 데이터 매핑"},\n            "estimated_time": 예상 소요 시간(초),\n            "optional": true/false,\n            "context": {"추가 컨텍스트"}\n        }\n    ],\n    "execution_mode": "sequential/parallel/mixed/conditional",\n    "parallel_groups": [["병렬 실행 가능한 작업 ID 그룹"]],\n    "confidence": 0.0-1.0,\n    "reasoning": "분해 결정의 이유와 근거"\n}\n\n## 분해 가이드라인:\n\n1. **분해가 필요한 경우**:\n   - 여러 종류의 정보를 요청하는 경우\n   - 순차적 처리가 필요한 경우 (A의 결과로 B 수행)\n   - 서로 다른 팀의 전문성이 필요한 경우\n\n2. **분해가 불필요한 경우**:\n   - 단일 정보 조회\n   - 단순한 질문-답변\n   - 하나의 팀에서 완전히 처리 가능한 경우\n\n3. **병렬 처리 기준**:\n   - 서로 독립적인 정보 조회\n   - 의존성이 없는 분석 작업\n   - 동시에 진행해도 충돌하지 않는 작업\n\n4. **우선순위 설정**:\n   - 의존성이 없는 작업: priority 1\n   - 1차 의존 작업: priority 2\n   - 2차 의존 작업: priority 3\n   - 이런 식으로 증가\n\n현재 의도: 종합분석\n추출된 엔티티: None\n\n분석할 질문: 전세금 인상 가능 여부 확인하고 관련 법조항 찾아줘'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 15:59:32,303 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 15:59:32,303 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 15:59:32,304 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 15:59:32,304 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 15:59:32,304 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 15:59:32,304 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 15:59:34,606 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 06:59:34 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'2047'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'2060'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9965'), (b'x-ratelimit-remaining-tokens', b'197331'), (b'x-ratelimit-reset-requests', b'4m56.504s'), (b'x-ratelimit-reset-tokens', b'800ms'), (b'x-request-id', b'req_654c5b54b0a240e090a0b1db74a9b75a'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b096eca563091-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 15:59:34,606 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 15:59:34,606 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 15:59:34,606 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 15:59:34,607 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 15:59:34,607 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 15:59:34,607 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 06:59:34 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '2047', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '2060', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9965', 'x-ratelimit-remaining-tokens': '197331', 'x-ratelimit-reset-requests': '4m56.504s', 'x-ratelimit-reset-tokens': '800ms', 'x-request-id': 'req_654c5b54b0a240e090a0b1db74a9b75a', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b096eca563091-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 15:59:34,607 - openai._base_client - DEBUG - request_id: req_654c5b54b0a240e090a0b1db74a9b75a
2025-10-05 15:59:34,607 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: query_decomposition | Model: gpt-4o-mini-2024-07-18 | Tokens: 2867 (prompt: 2694, completion: 173)
2025-10-05 15:59:34,607 - app.service_agent.cognitive_agents.query_decomposer - INFO - Successfully decomposed into 2 tasks
2025-10-05 15:59:34,607 - __main__ - INFO -   복합 질문: True
2025-10-05 15:59:34,607 - __main__ - INFO -   작업 수: 2
2025-10-05 15:59:34,607 - __main__ - INFO -   실행 모드: sequential
2025-10-05 15:59:34,607 - __main__ - INFO -     - task_0: 전세금 인상 가능 여부 확인 (search_team)
2025-10-05 15:59:34,607 - __main__ - INFO -     - task_1: 전세금 인상 관련 법조항 조회 (search_team)
2025-10-05 15:59:34,607 - __main__ - INFO - 
[Step 3] Comprehensive Plan 생성...
2025-10-05 15:59:34,607 - app.service_agent.cognitive_agents.planning_agent - INFO - Creating comprehensive plan for query: 전세금 인상 가능 여부 확인하고 관련 법조항 찾아줘...
2025-10-05 15:59:34,607 - app.service_agent.cognitive_agents.planning_agent - INFO - Analyzing intent for query: 전세금 인상 가능 여부 확인하고 관련 법조항 찾아줘...
2025-10-05 15:59:34,608 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-61bf1eb0-2356-4257-beaf-ac0498109c3b', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 의도 분석 전문가입니다.\n사용자의 질문을 정확히 이해하고, 어떤 종류의 도움이 필요한지 분류해야 합니다.\n\n## Chain-of-Thought 분석 프로세스\n\n질문을 분석할 때 다음 단계를 **순서대로** 따르세요:\n\n### 1단계: 질문 구조 파악\n- 단순 정보 요청인가? (예: "~이 뭐야?", "~알려줘")\n- 상황 설명이 포함되어 있는가? (배경, 현재 상태)\n- 구체적 수치나 데이터가 있는가? (금액, 비율, 기간 등)\n- 문제 해결을 요구하는가? (예: "어떻게 해야 해?", "방법 알려줘")\n\n### 2단계: 요청 유형 판단\n- **정보 확인형**: 사실, 개념, 규정 확인 → 검색만으로 충분\n- **평가/판단형**: "괜찮아?", "적절해?", "문제있어?" → 검색 + 분석 필요\n- **해결책 요청형**: "어떻게?", "방법?", "대처?" → 검색 + 분석 + 제안 필요\n- **비교/선택형**: "A vs B", "어느게 나아?" → 검색 + 분석(비교) 필요\n\n### 3단계: 복잡도 평가\n- **저**: 단일 개념/사실 확인 (예: "전세금 인상률 한도?")\n- **중**: 특정 상황 + 판단 (예: "3억을 5억으로 올려달래. 가능해?")\n- **고**: 복잡한 상황 + 여러 조건 + 해결책 (예: "10년 거주, 3억→10억 요구. 어떻게 해야 해?")\n\n### 4단계: 필요한 처리 결정\n- **검색만**: 정보 확인형 + 저복잡도\n- **검색+분석**: 평가/판단형 OR 중복잡도 OR 수치 비교 포함\n- **종합처리**: 해결책 요청형 OR 고복잡도 OR 여러 조건 동시 고려\n\n### 5단계: 최종 검증\n- 선택한 의도로 사용자 질문에 완전히 답변 가능한가?\n- 단순 정보 제공으로 끝나는가, 아니면 추가 분석/판단이 필요한가?\n- 상황 설명이 있으면서 "해결", "방법", "어떻게" 등이 있으면 → COMPREHENSIVE 고려\n\n## 중요: 복합 질문 처리\n복합적인 질문(여러 의도가 섞인 질문)의 경우, 가장 핵심적인 의도를 파악하되,\nsub_intents 필드에 부가적인 의도들도 함께 기록해주세요.\n\n**특히 주의**:\n- 법률 키워드가 있어도, "해결방법", "어떻게 해야" 같은 표현이 있으면 단순 LEGAL_CONSULT가 아닐 수 있음\n- 구체적 상황(금액, 기간 등) + 해결책 요구 = COMPREHENSIVE 또는 복합 의도로 분류\n\n## 분류 카테고리 설명:\n\n1. **LEGAL_CONSULT (법률상담)**\n   - 설명: 부동산 관련 법률, 권리, 의무에 대한 질문\n   - 예시:\n     * 단순: "전세금 5% 인상이 가능한가요?", "임대차계약 갱신 거부할 수 있나요?"\n     * 복합: "전세금 인상 가능한지 확인하고 법적 근거도 알려주세요"\n   - 키워드: 법, 전세, 임대, 보증금, 계약, 권리, 의무, 갱신, 임차인, 임대인, 법률, 규정, 조항\n   - 필요한 처리: 법률 데이터베이스 검색, 관련 법조항 찾기\n\n2. **MARKET_INQUIRY (시세조회)**\n   - 설명: 부동산 시장 가격, 시세, 거래 동향에 대한 질문\n   - 예시:\n     * 단순: "강남구 아파트 전세 시세 알려주세요", "서초동 매매가 얼마나 올랐나요?"\n     * 복합: "강남구 시세 확인하고 대출 가능 금액도 계산해줘"\n   - 키워드: 시세, 가격, 매매가, 전세가, 월세, 시장, 동향, 평균, 지역명, 상승률, 하락률\n   - 필요한 처리: 부동산 시세 데이터 조회, 지역별 가격 분석\n\n3. **LOAN_CONSULT (대출상담)**\n   - 설명: 주택담보대출, 전세자금대출 등 금융 관련 질문\n   - 예시:\n     * 단순: "전세자금대출 한도가 얼마인가요?", "LTV가 뭔가요?"\n     * 복합: "대출 한도 확인하고 금리 비교도 해주세요"\n   - 키워드: 대출, 금리, 한도, 조건, 상환, LTV, DTI, DSR, 담보, 금융, 은행\n   - 필요한 처리: 대출 상품 조회, 금리 정보 검색, 한도 계산\n\n4. **CONTRACT_CREATION (계약서작성)**\n   - 설명: 새로운 계약서나 문서를 작성해달라는 요청\n   - 예시:\n     * 단순: "임대차계약서 작성해주세요", "전세계약서 초안 만들어주세요"\n     * 복합: "계약서 작성하고 주의사항도 검토해주세요"\n   - 키워드: 작성, 만들, 생성, 초안, 계약서, 문서, 양식\n   - 필요한 처리: 문서 생성 에이전트 호출, 템플릿 기반 작성\n\n5. **CONTRACT_REVIEW (계약서검토)**\n   - 설명: 기존 계약서나 문서를 검토해달라는 요청\n   - 예시:\n     * 단순: "이 계약서 검토해주세요", "특약사항 문제없나요?"\n     * 복합: "계약서 검토하고 수정사항도 제안해주세요"\n   - 키워드: 검토, 확인, 점검, 리뷰, 분석해, 살펴봐, 체크\n   - 필요한 처리: 문서 분석, 위험 요소 식별, 개선사항 제안\n\n6. **COMPREHENSIVE (종합분석)**\n   - 설명: 여러 측면을 종합적으로 분석해달라는 요청, 또는 복잡한 상황에 대한 해결책 요청\n   - 예시:\n     * 단순: "이 물건 전체적으로 분석해주세요"\n     * 복합: "시세, 법률, 대출 모두 검토해서 종합 의견 주세요"\n     * 해결형: "10년 거주했는데 전세금 3억을 10억으로 올려달래. 어떻게 해야 해?"\n     * 상황+해결: "집주인이 계약 갱신 거부했어. 법적으로 어떻게 대응해야 할까?"\n   - 키워드: 종합, 전체, 모든, 전반적, 종합적, 평가, 분석, 어떻게, 방법, 해결, 대처\n   - 패턴: 구체적 상황 설명 + "어떻게/방법/해결" 요청\n   - 필요한 처리: 다중 데이터 소스 통합 분석, 상황 평가, 해결책 제시\n\n7. **RISK_ANALYSIS (리스크분석)**\n   - 설명: 위험 요소나 주의사항에 대한 질문\n   - 예시:\n     * 단순: "이 계약 위험한가요?", "주의할 점 알려주세요"\n     * 복합: "리스크 분석하고 대안도 제시해주세요"\n   - 키워드: 위험, 리스크, 주의, 문제점, 조심, 걱정, 우려\n   - 필요한 처리: 위험 요소 분석, 주의사항 추출\n\n8. **UNCLEAR (불분명)**\n   - 설명: 의도를 명확히 파악하기 어려운 질문\n   - 예시: "이거 좀 봐주세요", "어떻게 해야 할까요?", "도와주세요"\n   - 처리: 추가 질문으로 의도 명확화 필요\n\n9. **IRRELEVANT (무관)**\n   - 설명: 부동산과 전혀 관련 없는 질문\n   - 예시: "날씨 어때?", "저녁 뭐 먹지?", "주식 추천해줘"\n   - 처리: 부동산 관련 질문을 유도\n\n## 복합 질문 예시와 분석 (CoT 적용):\n\n### 예시 1: "강남구 아파트 시세 알려주고 전세자금대출 가능한지도 확인해줘"\n**CoT 분석**:\n1. 구조: 두 개의 요청 ("시세" + "대출")\n2. 유형: 정보 확인형 (둘 다)\n3. 복잡도: 중 (두 가지 독립적 조회)\n4. 필요 처리: 검색 + 계산/분석\n\n**결론**:\n- 주 의도: MARKET_INQUIRY (시세 조회가 먼저 필요)\n- 부가 의도: LOAN_CONSULT (대출 확인)\n- 분해: ["강남구 아파트 시세 조회", "전세자금대출 가능 여부 확인"]\n\n### 예시 2: "이 계약서 검토해서 위험한 부분 있는지 알려주고 수정 제안도 해줘"\n**CoT 분석**:\n1. 구조: 검토 + 위험 평가 + 수정안\n2. 유형: 평가/판단형 + 해결책 요청형\n3. 복잡도: 고 (3단계 처리)\n4. 필요 처리: 검토 + 분석 + 문서 생성\n\n**결론**:\n- 주 의도: CONTRACT_REVIEW (계약서 검토)\n- 부가 의도: RISK_ANALYSIS (위험 분석)\n- 분해: ["계약서 전체 검토", "위험 요소 식별", "수정사항 제안"]\n\n### 예시 3: "집주인이 짜증나, 10년 살았는데 전세금 3억을 10억으로 올려달래. 법적으로 해결방법 알려줘"\n**CoT 분석**:\n1. 구조: 상황 설명 (10년 거주, 3억→10억) + 해결책 요청\n2. 유형: 해결책 요청형 (단순 정보 X)\n3. 복잡도: 고 (구체적 상황 + 수치 비교 + 법률 + 대응방안)\n4. 필요 처리: 법률 검색 + 상황 분석 + 해결책 제시\n\n**결론**:\n- 주 의도: COMPREHENSIVE (복잡한 상황에 대한 종합 해결)\n- 부가 의도: LEGAL_CONSULT, RISK_ANALYSIS\n- 분해: ["전세금 인상 한도 법률 조회", "3억→10억 인상의 타당성 분석", "구체적 대응 방안 제시"]\n- **이유**: "법적으로"라는 키워드가 있지만, 단순 법률 확인이 아니라 구체적 상황에 대한 해결책을 요구하므로 COMPREHENSIVE\n\n### 예시 4: "전세금 인상률 상한이 얼마야?"\n**CoT 분석**:\n1. 구조: 단순 사실 확인\n2. 유형: 정보 확인형\n3. 복잡도: 저 (단일 개념)\n4. 필요 처리: 검색만\n\n**결론**:\n- 주 의도: LEGAL_CONSULT (법률 정보 조회)\n- 부가 의도: 없음\n- 분해: 필요 없음\n\n## 응답 형식 (JSON 형식으로 응답):\n\n```json\n{\n    "intent": "LEGAL_CONSULT",\n    "confidence": 0.9,\n    "keywords": ["전세금", "인상", "제한"],\n    "sub_intents": [],\n    "is_compound": false,\n    "decomposed_tasks": [],\n    "entities": {\n        "location": "강남구",\n        "price": "5억",\n        "contract_type": "전세",\n        "date": "2024년",\n        "area": "84㎡",\n        "action_verbs": ["확인", "검토"]\n    },\n    "reasoning": "전세금 인상에 대한 법률 질문이므로 LEGAL_CONSULT로 분류"\n}\n```\n\n응답 규칙:\n- intent: 위 9개 카테고리 중 하나 (대문자_언더스코어 형식)\n- confidence: 0.0~1.0 (0.8 이상이면 매우 확실, 0.5 미만이면 불확실)\n- keywords: 추출된 주요 키워드 목록\n- sub_intents: 복합 질문일 경우 부가적인 의도들\n- is_compound: 복합 질문 여부 (true/false)\n- decomposed_tasks: 복합 질문을 분해한 개별 작업들\n- entities: 추출된 엔티티 정보\n- reasoning: **반드시 CoT 5단계를 거쳐 분석한 과정을 포함** (구조 파악 → 유형 판단 → 복잡도 평가 → 필요 처리 → 최종 검증)\n\n## reasoning 작성 예시:\n"1단계(구조): 상황 설명(10년 거주, 3억→10억) + 해결책 요청 포함.\n2단계(유형): 해결책 요청형 - 단순 정보가 아닌 대응방안 필요.\n3단계(복잡도): 고 - 구체적 수치 비교와 복잡한 상황.\n4단계(처리): 법률 검색 + 상황 분석 + 해결책 제시 필요.\n5단계(검증): LEGAL_CONSULT만으로는 불충분, 종합적 분석 필요 → COMPREHENSIVE 선택"\n\n## 판단 가이드:\n- 여러 의도가 섞여있다면, 가장 주된 의도를 intent에, 나머지를 sub_intents에 기록\n- "그리고", "또한", "함께", "같이" 등의 연결어가 있으면 복합 질문일 가능성 높음\n- 법률 관련 키워드가 있으면 LEGAL_CONSULT 우선\n- 가격/시세 언급이 명확하면 MARKET_INQUIRY\n- 계약서라는 단어와 함께 "작성/만들기"가 있으면 CONTRACT_CREATION\n- 계약서라는 단어와 함께 "검토/확인"이 있으면 CONTRACT_REVIEW\n- 불확실하면 confidence를 낮게 설정하고 UNCLEAR 선택\n- 복합 질문은 is_compound를 true로 설정하고 개별 작업으로 분해\n\n분석할 질문: 전세금 인상 가능 여부 확인하고 관련 법조항 찾아줘'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 15:59:34,608 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 15:59:34,608 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 15:59:34,608 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 15:59:34,608 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 15:59:34,608 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 15:59:34,608 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 15:59:38,395 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 06:59:38 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'3533'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'3559'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9964'), (b'x-ratelimit-remaining-tokens', b'197238'), (b'x-ratelimit-reset-requests', b'5m2.837s'), (b'x-ratelimit-reset-tokens', b'828ms'), (b'x-request-id', b'req_78b859ddd5694556b4f607037b5cc623'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b097d2a1a3091-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 15:59:38,396 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 15:59:38,397 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 15:59:38,397 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 15:59:38,398 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 15:59:38,398 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 15:59:38,398 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 06:59:38 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '3533', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '3559', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9964', 'x-ratelimit-remaining-tokens': '197238', 'x-ratelimit-reset-requests': '5m2.837s', 'x-ratelimit-reset-tokens': '828ms', 'x-request-id': 'req_78b859ddd5694556b4f607037b5cc623', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b097d2a1a3091-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 15:59:38,398 - openai._base_client - DEBUG - request_id: req_78b859ddd5694556b4f607037b5cc623
2025-10-05 15:59:38,398 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: intent_analysis | Model: gpt-4o-mini-2024-07-18 | Tokens: 3388 (prompt: 3184, completion: 204)
2025-10-05 15:59:38,398 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM Intent Analysis Result: {'intent': 'LEGAL_CONSULT', 'confidence': 0.9, 'keywords': ['전세금', '인상', '법조항'], 'sub_intents': [], 'is_compound': False, 'decomposed_tasks': [], 'entities': {'action_verbs': ['확인', '찾다']}, 'reasoning': '1단계(구조): 전세금 인상 가능 여부 확인 요청 + 관련 법조항 찾기 포함. 2단계(유형): 정보 확인형 - 전세금 인상 가능성에 대한 법률 정보 필요. 3단계(복잡도): 저 - 단일 개념 확인. 4단계(처리): 법률 데이터베이스 검색 필요. 5단계(검증): 전세금 인상 가능 여부에 대한 법률 질문이므로 LEGAL_CONSULT로 분류.'}
2025-10-05 15:59:38,399 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-475f4304-5bdc-4c6f-b5d6-4d8b88953aeb', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 Agent 선택 전문가입니다.\n사용자의 요청에 가장 적합한 Agent/Team을 선택하는 것이 목표입니다.\n\n## 현재 상황\n\n**사용자 질문:** 전세금 인상 가능 여부 확인하고 관련 법조항 찾아줘\n**분석된 의도:** 법률상담\n**추출된 키워드:** [\'전세금\', \'인상\', \'법조항\']\n\n## 사용 가능한 Agent/Team 정보\n\n{\'search_team\': {\'name\': \'search_team\', \'capabilities\': \'법률 검색, 부동산 시세 조회, 대출 상품 검색\', \'tools\': [\'legal_search\', \'market_data\', \'loan_data\'], \'use_cases\': [\'법률 상담\', \'시세 조회\', \'대출 정보\']}, \'analysis_team\': {\'name\': \'analysis_team\', \'capabilities\': \'데이터 분석, 리스크 평가, 인사이트 생성, 추천\', \'tools\': [\'data_analyzer\', \'risk_evaluator\'], \'use_cases\': [\'시장 분석\', \'리스크 평가\', \'투자 분석\']}, \'document_team\': {\'name\': \'document_team\', \'capabilities\': \'계약서 작성, 문서 생성, 문서 검토\', \'tools\': [\'document_generator\', \'contract_reviewer\'], \'use_cases\': [\'계약서 작성\', \'문서 검토\']}}\n\n## Agent 역할 및 상세 가이드\n\n### 1. search_team (검색 팀)\n- **주요 기능**: 정보 검색 및 데이터 수집\n- **전문 분야**:\n  * 법률 정보 검색 (전세법, 임대차보호법, 부동산 관련 법규)\n  * 부동산 시세 조회 (매매가, 전세가, 월세, 실거래가)\n  * 대출 상품 정보 검색 (금리, 한도, 조건)\n  * 지역 정보 및 인프라 조회\n- **도구**: legal_search, market_data, loan_data\n- **적합한 작업**: 정보 조회, 데이터 수집, 법률 확인, 시세 파악\n- **예시**:\n  * "전세금 5% 인상 가능한가요?"\n  * "강남구 아파트 전세 시세"\n  * "전세자금대출 한도 얼마?"\n\n### 2. analysis_team (분석 팀)\n- **주요 기능**: 데이터 분석 및 평가\n- **전문 분야**:\n  * 시장 동향 분석 (상승률, 하락률, 추세)\n  * 리스크 평가 (계약, 투자 위험도)\n  * 투자 수익률 계산 (ROI, 월세 수익률)\n  * 대출 한도 및 조건 분석 (LTV, DTI, DSR)\n  * 비교 분석 (지역별, 상품별)\n- **도구**: data_analyzer, risk_evaluator, calculator\n- **적합한 작업**: 데이터 분석, 리스크 평가, 계산, 비교, 예측\n- **의존성**: 보통 search_team의 데이터가 필요\n- **예시**:\n  * "이 지역 투자 가치 분석해줘"\n  * "계약 리스크 평가해줘"\n  * "대출 가능 금액 계산해줘"\n\n### 3. document_team (문서 팀)\n- **주요 기능**: 문서 생성 및 관리\n- **전문 분야**:\n  * 계약서 작성 (임대차, 매매, 전세)\n  * 문서 템플릿 관리\n  * 특약사항 생성\n  * 계약서 수정안 작성\n  * 법률 문서 검토\n- **도구**: document_generator, contract_template, contract_reviewer\n- **적합한 작업**: 문서 작성, 계약서 생성, 문서 수정, 검토\n- **예시**:\n  * "임대차계약서 작성해줘"\n  * "특약사항 추가해줘"\n  * "계약서 수정안 만들어줘"\n\n## Chain-of-Thought Agent 선택 프로세스\n\n다음 단계를 **순서대로** 따라 최적의 Agent 조합을 선택하세요:\n\n### 1단계: 질문 요구사항 파악\n- 단순 정보 조회인가? → search_team만 필요\n- 판단/평가가 필요한가? → search + analysis 필요\n- 해결책 제시가 필요한가? → search + analysis 필요\n- 문서 생성이 필요한가? → document_team 추가\n\n### 2단계: 작업 복잡도 판단\n- **단순** (검색만): "~이 뭐야?", "~알려줘" → search_team\n- **중간** (검색+판단): "~괜찮아?", "~적절해?" → search + analysis\n- **복잡** (종합 해결): 구체적 상황 + "어떻게 해야 해?" → search + analysis\n\n### 3단계: 의존성 분석\n- 독립적 작업: 단일 팀으로 처리 가능\n- 순차적 의존: 이전 결과 필요 → 여러 팀 순서대로\n- 병렬 가능: 동시 조회 가능 → coordination: "parallel"\n\n### 4단계: 최종 검증\n- 선택한 팀들로 질문에 완전히 답변 가능한가?\n- 불필요한 팀이 포함되지 않았는가?\n- 순서가 논리적인가? (데이터 흐름 고려)\n\n### 중요 원칙:\n- **법률 키워드만으로 판단하지 말 것**: "법적으로 어떻게 해야 해?" = 법률 검색 + 분석 필요\n- **상황 설명 + 해결책 요청** = 반드시 analysis_team 포함\n- **구체적 수치 비교** (3억→10억 같은) = analysis_team 필요\n\n## 의도별 Agent 매핑 가이드 (기본 가이드 - CoT로 조정 가능)\n\n| 의도 (Intent) | 기본 조합 | 상황별 조정 |\n|--------------|-----------|-------------|\n| LEGAL_CONSULT | ["search_team"] | 해결책 요청시 → + analysis_team |\n| MARKET_INQUIRY | ["search_team"] | 비교/평가시 → + analysis_team |\n| LOAN_CONSULT | ["search_team", "analysis_team"] | 계산 필수 |\n| CONTRACT_CREATION | ["document_team"] | 검토 후 작성 → search + document |\n| CONTRACT_REVIEW | ["search_team", "analysis_team"] | 법률 검토 + 리스크 분석 |\n| COMPREHENSIVE | ["search_team", "analysis_team"] | **항상 분석 포함** |\n| RISK_ANALYSIS | ["analysis_team"] | 법률 근거 필요시 → search + analysis |\n| UNCLEAR | ["search_team", "analysis_team"] | 포괄적 대응 |\n\n**중요**: 위 매핑은 **기본 가이드**일 뿐입니다.\n실제 질문의 내용(CoT 분석 결과)에 따라 조정하세요!\n\n## 복합 질문 처리 예시 (CoT 적용)\n\n### 예시 1: 순차적 처리\n질문: "강남구 시세 확인하고 투자 가치 분석해줘"\n**CoT 분석**:\n1. 요구사항: 시세 조회 + 투자 가치 평가\n2. 복잡도: 중간 (검색 + 분석)\n3. 의존성: 시세 데이터 → 투자 분석 (순차)\n4. 검증: search만으로는 "투자 가치 평가" 불가능\n\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "1단계: 시세 조회+투자 평가 필요. 2단계: 중간 복잡도. 3단계: 순차 의존. 4단계: search로 시세 수집 후 analysis로 투자 가치 평가 필요",\n    "coordination": "sequential"\n}\n```\n\n### 예시 2: 단순 정보 조회\n질문: "전세금 인상률 한도가 얼마야?"\n**CoT 분석**:\n1. 요구사항: 단순 사실 확인\n2. 복잡도: 낮음 (정보 확인형)\n3. 의존성: 없음\n4. 검증: search_team만으로 충분\n\n```json\n{\n    "selected_agents": ["search_team"],\n    "reasoning": "1단계: 단순 정보 조회. 2단계: 저복잡도. 3단계: 독립적. 4단계: 법률 검색만으로 답변 가능",\n    "coordination": "single"\n}\n```\n\n### 예시 3: 해결책 요청 (핵심 예시!)\n질문: "집주인이 전세금 3억을 10억으로 올려달래. 법적으로 어떻게 해야 해?"\n의도: COMPREHENSIVE\n**CoT 분석**:\n1. 요구사항: 상황 설명 + 해결책 요청\n2. 복잡도: 높음 (구체적 상황 + 수치 비교)\n3. 의존성: 법률 확인 → 상황 분석 → 해결책 제시\n4. 검증: "법적으로"만 보고 search만 선택하면 불충분! 해결책 제시 필요\n\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "1단계: 법률 + 상황 분석 + 해결책 필요. 2단계: 고복잡도(3억→10억 비정상). 3단계: 순차(법률 확인 후 타당성 분석). 4단계: \'어떻게 해야\' = 단순 법률 조회 아님, 분석 필수",\n    "coordination": "sequential",\n    "confidence": 0.95\n}\n```\n\n## 응답 형식 (JSON)\n\n```json\n{\n    "selected_agents": ["선택된 agent/team 목록"],\n    "reasoning": "선택 이유를 구체적으로 설명. 각 Agent의 역할과 처리 순서 포함",\n    "coordination": "single/sequential/parallel/pipeline",\n    "dependencies": {"agent2": ["agent1"]},\n    "estimated_time": 30,\n    "confidence": 0.9\n}\n```\n\n## 선택 가이드라인\n\n1. **최소 Agent 원칙**: 가능한 적은 수의 Agent로 처리\n2. **전문성 우선**: 해당 작업에 가장 전문적인 Agent 선택\n3. **효율성 고려**: 병렬 처리 가능한 경우 명시\n4. **의존성 관리**: 데이터 흐름을 고려한 순서 지정\n5. **폴백 전략**: 불확실한 경우 ["search_team", "analysis_team"] 조합\n\n## 주의사항\n\n- selected_agents는 반드시 배열 형태\n- Agent 이름은 정확히: "search_team", "analysis_team", "document_team"\n- 최소 1개, 최대 3개 선택\n- 순서는 실행 우선순위 (앞에 있을수록 먼저 실행)\n- reasoning은 상세하고 논리적으로 작성\n- coordination 필드로 실행 방식 명시\n- 복합 질문의 경우 의존성 관계 명확히 표시'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 15:59:38,399 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 15:59:38,399 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 15:59:38,400 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 15:59:38,400 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 15:59:38,400 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 15:59:38,400 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 15:59:41,875 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 06:59:41 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'3195'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'3225'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9965'), (b'x-ratelimit-remaining-tokens', b'197884'), (b'x-ratelimit-reset-requests', b'4m58.992s'), (b'x-ratelimit-reset-tokens', b'634ms'), (b'x-request-id', b'req_2caf521a72b54a92b0b50d0975036702'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b0994dbaa3091-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 15:59:41,876 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 15:59:41,876 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 15:59:41,876 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 15:59:41,876 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 15:59:41,876 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 15:59:41,877 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 06:59:41 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '3195', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '3225', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9965', 'x-ratelimit-remaining-tokens': '197884', 'x-ratelimit-reset-requests': '4m58.992s', 'x-ratelimit-reset-tokens': '634ms', 'x-request-id': 'req_2caf521a72b54a92b0b50d0975036702', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b0994dbaa3091-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 15:59:41,877 - openai._base_client - DEBUG - request_id: req_2caf521a72b54a92b0b50d0975036702
2025-10-05 15:59:41,877 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: agent_selection | Model: gpt-4o-mini-2024-07-18 | Tokens: 2551 (prompt: 2362, completion: 189)
2025-10-05 15:59:41,877 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM agent selection reasoning: 1단계: 전세금 인상 가능 여부와 관련 법조항 확인이 필요하며, 이는 법률 검색과 함께 상황 분석이 요구됨. 2단계: 복잡도는 중간으로, 법률 정보 조회 후 인상 가능성에 대한 분석이 필요함. 3단계: 법률 정보를 먼저 확인한 후, 그에 대한 분석이 필요하므로 순차적 의존성이 존재함. 4단계: 단순 법률 조회만으로는 충분하지 않으며, 인상 가능성에 대한 판단이 필요하므로 analysis_team이 포함되어야 함.
2025-10-05 15:59:41,877 - app.service_agent.cognitive_agents.planning_agent - INFO - ✅ Primary LLM selected agents: ['search_team', 'analysis_team']
2025-10-05 15:59:41,877 - app.service_agent.cognitive_agents.planning_agent - INFO - Intent analyzed: 법률상담 (confidence: 0.90)
2025-10-05 15:59:41,877 - app.service_agent.cognitive_agents.query_decomposer - INFO - Decomposing query: 전세금 인상 가능 여부 확인하고 관련 법조항 찾아줘...
2025-10-05 15:59:41,878 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-0b2fabe2-14ce-4edd-b899-4fc825adf21a', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 질문 분해 전문가입니다.\n복잡한 사용자 질문을 독립적으로 처리 가능한 작업 단위로 분해하는 것이 목표입니다.\n\n## Chain-of-Thought 분해 프로세스:\n\n### 1단계: 복합 질문 여부 판단\n- 단순 정보 조회만 필요한가? → is_compound: false\n- **다음 중 하나라도 해당하면 is_compound: true**:\n  * "그리고", "그 다음", "한 후" 같은 연결어로 여러 요청 연결\n  * 명시적으로 2개 이상의 작업 요청 (예: "시세 확인하고 대출 계산해줘")\n  * 상황 설명 + 해결책 요청 (예: "3억→10억 올려달래. 어떻게 해야 해?")\n  * 해결책을 위해 여러 단계 처리 필요 (검색 → 분석 → 제안)\n\n### 2단계: 필요 작업 식별\n- 정보 수집이 필요한가? → search 작업\n- 평가/판단이 필요한가? → analysis 작업\n- 문서 생성이 필요한가? → generation 작업\n- **해결책 요청**인가? → search + analysis (최소 2개)\n\n### 3단계: 작업 순서 결정\n- 독립적 작업: 병렬 가능\n- 이전 결과 필요: 순차 실행 (depends_on 설정)\n\n## 중요 원칙:\n1. 각 작업은 하나의 명확한 목표를 가져야 합니다\n2. 작업 간 의존성을 명확히 파악해야 합니다\n3. 병렬 처리 가능한 작업은 구분해야 합니다\n4. **주의**: "어떻게 해야", "방법 알려줘" 같은 해결책 요청은 복합 질문!\n\n## 작업 유형 (type):\n- search: 정보 검색 (법률, 시세, 대출 정보 등)\n- analysis: 데이터 분석 (리스크 평가, 시장 분석 등)\n- generation: 문서 생성 (계약서 작성 등)\n- review: 검토/평가 (계약서 검토, 조건 확인 등)\n- calculation: 계산/산출 (대출 한도, 세금 등)\n- comparison: 비교 분석 (여러 옵션 비교)\n\n## 담당 팀 (agent):\n- search_team: 법률, 시세, 대출 정보 검색\n- analysis_team: 데이터 분석, 리스크 평가, 계산\n- document_team: 문서 생성, 계약서 작성\n\n## 학습 예시:\n\n### 예시 1: 복합 질문 (순차적)\n질문: "강남구 아파트 시세 확인하고 대출 가능 금액 계산해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "강남구 아파트 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "대출 가능 금액 계산",\n            "type": "calculation",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "required_data": {"price": "task_0.result.price"},\n            "estimated_time": 15\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "시세 정보가 있어야 대출 금액 계산이 가능하므로 순차 실행"\n}\n```\n\n### 예시 2: 복합 질문 (병렬 가능)\n질문: "이 지역 전세 시세와 매매 시세 모두 알려주고 비교 분석해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "전세 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "매매 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "전세/매매 시세 비교 분석",\n            "type": "comparison",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0", "task_1"],\n            "required_data": {\n                "lease_price": "task_0.result",\n                "sale_price": "task_1.result"\n            },\n            "estimated_time": 25\n        }\n    ],\n    "execution_mode": "mixed",\n    "parallel_groups": [["task_0", "task_1"], ["task_2"]],\n    "reasoning": "시세 조회는 독립적이므로 병렬 처리, 비교는 두 결과 필요"\n}\n```\n\n### 예시 3: 복합 질문 (3단계 이상)\n질문: "이 계약서 검토해서 위험한 부분 찾고 수정안 만들어서 최종 계약서 작성해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "계약서 내용 전체 검토",\n            "type": "review",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 30\n        },\n        {\n            "description": "위험 요소 및 문제점 분석",\n            "type": "analysis",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "estimated_time": 25\n        },\n        {\n            "description": "수정안 제안 생성",\n            "type": "generation",\n            "agent": "document_team",\n            "priority": 3,\n            "depends_on": ["task_1"],\n            "estimated_time": 20\n        },\n        {\n            "description": "최종 계약서 작성",\n            "type": "generation",\n            "agent": "document_team",\n            "priority": 4,\n            "depends_on": ["task_2"],\n            "estimated_time": 30\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "각 단계가 이전 결과에 의존하므로 순차 실행 필요"\n}\n```\n\n### 예시 4: 단순 질문 (분해 불필요)\n질문: "전세금 인상률 상한이 얼마야?"\n분해:\n```json\n{\n    "is_compound": false,\n    "sub_tasks": [\n        {\n            "description": "전세금 인상률 상한 법률 정보 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 15\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "단일 정보 조회 요청으로 분해 불필요"\n}\n```\n\n### 예시 5: 조건부 실행\n질문: "이 물건 시세 확인하고 적정가면 대출 상담도 받고 싶어"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "물건 시세 조회 및 적정성 평가",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 25\n        },\n        {\n            "description": "대출 상담 정보 제공",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "optional": true,\n            "context": {"condition": "if_reasonable_price"},\n            "estimated_time": 20\n        }\n    ],\n    "execution_mode": "conditional",\n    "reasoning": "시세 확인 결과에 따라 대출 상담 진행 여부 결정"\n}\n```\n\n### 예시 6: 상황 설명 + 해결책 요청 (핵심 패턴!)\n질문: "집주인이 전세금 3억을 10억으로 올려달래. 법적으로 어떻게 해야 해?"\n**CoT 분석**:\n1. 질문 분석: 상황 설명 + 해결책 요청\n2. 연결어: 없지만, "어떻게 해야" = 해결책 요청\n3. 의존성: 법률 확인 → 상황 분석 → 대응 방안\n4. 복합 여부: **YES** (해결책을 위해 여러 단계 필요)\n\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "전세금 인상 한도 관련 법률 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "3억→10억 인상의 법적 타당성 및 적정성 분석",\n            "type": "analysis",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "required_data": {"legal_limit": "task_0.result", "current": 300000000, "requested": 1000000000},\n            "estimated_time": 25\n        },\n        {\n            "description": "구체적 대응 방안 및 해결책 제시",\n            "type": "analysis",\n            "agent": "analysis_team",\n            "priority": 3,\n            "depends_on": ["task_1"],\n            "estimated_time": 20\n        }\n    ],\n    "execution_mode": "sequential",\n    "confidence": 0.95,\n    "reasoning": "상황 설명+해결책 요청 패턴. \'어떻게 해야\'는 단순 정보 조회가 아닌 종합 해결책 필요. 법률 조회 → 상황 분석 → 해결책 제시 3단계 순차 처리"\n}\n```\n\n## Chain-of-Thought 프로세스:\n\n1. **질문 분석**: 어떤 정보나 작업을 요구하는가?\n2. **연결어 확인**: "그리고", "또한", "해서", "한 후" 등이 있는가?\n3. **의존성 파악**: 어떤 작업이 다른 작업의 결과를 필요로 하는가?\n4. **병렬성 판단**: 독립적으로 실행 가능한 작업이 있는가?\n5. **최적화**: 불필요한 분해는 없는가?\n\n## 응답 형식 (JSON):\n\n{\n    "is_compound": true/false,\n    "sub_tasks": [\n        {\n            "description": "작업 설명",\n            "type": "작업 유형",\n            "agent": "담당 팀",\n            "priority": 우선순위 (1이 가장 높음),\n            "depends_on": ["선행 작업 ID 리스트"],\n            "required_data": {"필요한 데이터 매핑"},\n            "estimated_time": 예상 소요 시간(초),\n            "optional": true/false,\n            "context": {"추가 컨텍스트"}\n        }\n    ],\n    "execution_mode": "sequential/parallel/mixed/conditional",\n    "parallel_groups": [["병렬 실행 가능한 작업 ID 그룹"]],\n    "confidence": 0.0-1.0,\n    "reasoning": "분해 결정의 이유와 근거"\n}\n\n## 분해 가이드라인:\n\n1. **분해가 필요한 경우**:\n   - 여러 종류의 정보를 요청하는 경우\n   - 순차적 처리가 필요한 경우 (A의 결과로 B 수행)\n   - 서로 다른 팀의 전문성이 필요한 경우\n\n2. **분해가 불필요한 경우**:\n   - 단일 정보 조회\n   - 단순한 질문-답변\n   - 하나의 팀에서 완전히 처리 가능한 경우\n\n3. **병렬 처리 기준**:\n   - 서로 독립적인 정보 조회\n   - 의존성이 없는 분석 작업\n   - 동시에 진행해도 충돌하지 않는 작업\n\n4. **우선순위 설정**:\n   - 의존성이 없는 작업: priority 1\n   - 1차 의존 작업: priority 2\n   - 2차 의존 작업: priority 3\n   - 이런 식으로 증가\n\n현재 의도: 법률상담\n추출된 엔티티: {\'action_verbs\': [\'확인\', \'찾다\']}\n\n분석할 질문: 전세금 인상 가능 여부 확인하고 관련 법조항 찾아줘'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 15:59:41,879 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 15:59:41,879 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 15:59:41,879 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 15:59:41,879 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 15:59:41,879 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 15:59:41,879 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 15:59:46,484 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 06:59:46 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'4291'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'4331'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9963'), (b'x-ratelimit-remaining-tokens', b'197324'), (b'x-ratelimit-reset-requests', b'5m12.848s'), (b'x-ratelimit-reset-tokens', b'802ms'), (b'x-request-id', b'req_5066678101df497783ce5febe1aecf4f'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b09aa9ae13091-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 15:59:46,485 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 15:59:46,485 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 15:59:46,485 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 15:59:46,485 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 15:59:46,485 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 15:59:46,485 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 06:59:46 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '4291', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '4331', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9963', 'x-ratelimit-remaining-tokens': '197324', 'x-ratelimit-reset-requests': '5m12.848s', 'x-ratelimit-reset-tokens': '802ms', 'x-request-id': 'req_5066678101df497783ce5febe1aecf4f', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b09aa9ae13091-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 15:59:46,485 - openai._base_client - DEBUG - request_id: req_5066678101df497783ce5febe1aecf4f
2025-10-05 15:59:46,486 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: query_decomposition | Model: gpt-4o-mini-2024-07-18 | Tokens: 2879 (prompt: 2706, completion: 173)
2025-10-05 15:59:46,486 - app.service_agent.cognitive_agents.query_decomposer - INFO - Successfully decomposed into 2 tasks
2025-10-05 15:59:46,486 - app.service_agent.cognitive_agents.planning_agent - INFO - Query decomposed into 2 tasks
2025-10-05 15:59:46,486 - app.service_agent.cognitive_agents.planning_agent - WARNING - Plan validation errors: ["Agent 'search_team' not found in registry", "Agent 'search_team' depends on missing 'task_0'", "Agent 'search_team' not found in registry"]
2025-10-05 15:59:46,486 - app.service_agent.cognitive_agents.planning_agent - INFO - Optimizing execution plan
2025-10-05 15:59:46,486 - app.service_agent.cognitive_agents.planning_agent - INFO - Comprehensive plan created: Intent: 법률상담 (confidence: 0.90) | Strategy: sequential | Agents: search_team, search_team | Estimated time: 35.0s
2025-10-05 15:59:46,486 - __main__ - INFO -   전략: sequential
2025-10-05 15:59:46,486 - __main__ - INFO -   단계 수: 2
2025-10-05 15:59:46,486 - __main__ - INFO - 
✓ 테스트 성공 (소요시간: 22.13초)
2025-10-05 15:59:46,489 - __main__ - INFO - 
결과 저장: C:\kdy\Projects\holmesnyangz\beta_v001\backend\app\service_agent\reports\phase1_test_results.json
2025-10-05 15:59:46,490 - __main__ - INFO - 
================================================================================
2025-10-05 15:59:46,490 - __main__ - INFO - [26] 복합 질문 테스트: D006
2025-10-05 15:59:46,490 - __main__ - INFO - 질문: 대출 한도 조회하고 금리 비교해줘
2025-10-05 15:59:46,490 - __main__ - INFO - ================================================================================
2025-10-05 15:59:46,490 - __main__ - INFO - 
[Step 1] Intent 분석...
2025-10-05 15:59:46,490 - app.service_agent.cognitive_agents.planning_agent - INFO - Analyzing intent for query: 대출 한도 조회하고 금리 비교해줘...
2025-10-05 15:59:46,490 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-e1882f1f-8a24-4d0e-977e-c7ec49e839f3', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 의도 분석 전문가입니다.\n사용자의 질문을 정확히 이해하고, 어떤 종류의 도움이 필요한지 분류해야 합니다.\n\n## Chain-of-Thought 분석 프로세스\n\n질문을 분석할 때 다음 단계를 **순서대로** 따르세요:\n\n### 1단계: 질문 구조 파악\n- 단순 정보 요청인가? (예: "~이 뭐야?", "~알려줘")\n- 상황 설명이 포함되어 있는가? (배경, 현재 상태)\n- 구체적 수치나 데이터가 있는가? (금액, 비율, 기간 등)\n- 문제 해결을 요구하는가? (예: "어떻게 해야 해?", "방법 알려줘")\n\n### 2단계: 요청 유형 판단\n- **정보 확인형**: 사실, 개념, 규정 확인 → 검색만으로 충분\n- **평가/판단형**: "괜찮아?", "적절해?", "문제있어?" → 검색 + 분석 필요\n- **해결책 요청형**: "어떻게?", "방법?", "대처?" → 검색 + 분석 + 제안 필요\n- **비교/선택형**: "A vs B", "어느게 나아?" → 검색 + 분석(비교) 필요\n\n### 3단계: 복잡도 평가\n- **저**: 단일 개념/사실 확인 (예: "전세금 인상률 한도?")\n- **중**: 특정 상황 + 판단 (예: "3억을 5억으로 올려달래. 가능해?")\n- **고**: 복잡한 상황 + 여러 조건 + 해결책 (예: "10년 거주, 3억→10억 요구. 어떻게 해야 해?")\n\n### 4단계: 필요한 처리 결정\n- **검색만**: 정보 확인형 + 저복잡도\n- **검색+분석**: 평가/판단형 OR 중복잡도 OR 수치 비교 포함\n- **종합처리**: 해결책 요청형 OR 고복잡도 OR 여러 조건 동시 고려\n\n### 5단계: 최종 검증\n- 선택한 의도로 사용자 질문에 완전히 답변 가능한가?\n- 단순 정보 제공으로 끝나는가, 아니면 추가 분석/판단이 필요한가?\n- 상황 설명이 있으면서 "해결", "방법", "어떻게" 등이 있으면 → COMPREHENSIVE 고려\n\n## 중요: 복합 질문 처리\n복합적인 질문(여러 의도가 섞인 질문)의 경우, 가장 핵심적인 의도를 파악하되,\nsub_intents 필드에 부가적인 의도들도 함께 기록해주세요.\n\n**특히 주의**:\n- 법률 키워드가 있어도, "해결방법", "어떻게 해야" 같은 표현이 있으면 단순 LEGAL_CONSULT가 아닐 수 있음\n- 구체적 상황(금액, 기간 등) + 해결책 요구 = COMPREHENSIVE 또는 복합 의도로 분류\n\n## 분류 카테고리 설명:\n\n1. **LEGAL_CONSULT (법률상담)**\n   - 설명: 부동산 관련 법률, 권리, 의무에 대한 질문\n   - 예시:\n     * 단순: "전세금 5% 인상이 가능한가요?", "임대차계약 갱신 거부할 수 있나요?"\n     * 복합: "전세금 인상 가능한지 확인하고 법적 근거도 알려주세요"\n   - 키워드: 법, 전세, 임대, 보증금, 계약, 권리, 의무, 갱신, 임차인, 임대인, 법률, 규정, 조항\n   - 필요한 처리: 법률 데이터베이스 검색, 관련 법조항 찾기\n\n2. **MARKET_INQUIRY (시세조회)**\n   - 설명: 부동산 시장 가격, 시세, 거래 동향에 대한 질문\n   - 예시:\n     * 단순: "강남구 아파트 전세 시세 알려주세요", "서초동 매매가 얼마나 올랐나요?"\n     * 복합: "강남구 시세 확인하고 대출 가능 금액도 계산해줘"\n   - 키워드: 시세, 가격, 매매가, 전세가, 월세, 시장, 동향, 평균, 지역명, 상승률, 하락률\n   - 필요한 처리: 부동산 시세 데이터 조회, 지역별 가격 분석\n\n3. **LOAN_CONSULT (대출상담)**\n   - 설명: 주택담보대출, 전세자금대출 등 금융 관련 질문\n   - 예시:\n     * 단순: "전세자금대출 한도가 얼마인가요?", "LTV가 뭔가요?"\n     * 복합: "대출 한도 확인하고 금리 비교도 해주세요"\n   - 키워드: 대출, 금리, 한도, 조건, 상환, LTV, DTI, DSR, 담보, 금융, 은행\n   - 필요한 처리: 대출 상품 조회, 금리 정보 검색, 한도 계산\n\n4. **CONTRACT_CREATION (계약서작성)**\n   - 설명: 새로운 계약서나 문서를 작성해달라는 요청\n   - 예시:\n     * 단순: "임대차계약서 작성해주세요", "전세계약서 초안 만들어주세요"\n     * 복합: "계약서 작성하고 주의사항도 검토해주세요"\n   - 키워드: 작성, 만들, 생성, 초안, 계약서, 문서, 양식\n   - 필요한 처리: 문서 생성 에이전트 호출, 템플릿 기반 작성\n\n5. **CONTRACT_REVIEW (계약서검토)**\n   - 설명: 기존 계약서나 문서를 검토해달라는 요청\n   - 예시:\n     * 단순: "이 계약서 검토해주세요", "특약사항 문제없나요?"\n     * 복합: "계약서 검토하고 수정사항도 제안해주세요"\n   - 키워드: 검토, 확인, 점검, 리뷰, 분석해, 살펴봐, 체크\n   - 필요한 처리: 문서 분석, 위험 요소 식별, 개선사항 제안\n\n6. **COMPREHENSIVE (종합분석)**\n   - 설명: 여러 측면을 종합적으로 분석해달라는 요청, 또는 복잡한 상황에 대한 해결책 요청\n   - 예시:\n     * 단순: "이 물건 전체적으로 분석해주세요"\n     * 복합: "시세, 법률, 대출 모두 검토해서 종합 의견 주세요"\n     * 해결형: "10년 거주했는데 전세금 3억을 10억으로 올려달래. 어떻게 해야 해?"\n     * 상황+해결: "집주인이 계약 갱신 거부했어. 법적으로 어떻게 대응해야 할까?"\n   - 키워드: 종합, 전체, 모든, 전반적, 종합적, 평가, 분석, 어떻게, 방법, 해결, 대처\n   - 패턴: 구체적 상황 설명 + "어떻게/방법/해결" 요청\n   - 필요한 처리: 다중 데이터 소스 통합 분석, 상황 평가, 해결책 제시\n\n7. **RISK_ANALYSIS (리스크분석)**\n   - 설명: 위험 요소나 주의사항에 대한 질문\n   - 예시:\n     * 단순: "이 계약 위험한가요?", "주의할 점 알려주세요"\n     * 복합: "리스크 분석하고 대안도 제시해주세요"\n   - 키워드: 위험, 리스크, 주의, 문제점, 조심, 걱정, 우려\n   - 필요한 처리: 위험 요소 분석, 주의사항 추출\n\n8. **UNCLEAR (불분명)**\n   - 설명: 의도를 명확히 파악하기 어려운 질문\n   - 예시: "이거 좀 봐주세요", "어떻게 해야 할까요?", "도와주세요"\n   - 처리: 추가 질문으로 의도 명확화 필요\n\n9. **IRRELEVANT (무관)**\n   - 설명: 부동산과 전혀 관련 없는 질문\n   - 예시: "날씨 어때?", "저녁 뭐 먹지?", "주식 추천해줘"\n   - 처리: 부동산 관련 질문을 유도\n\n## 복합 질문 예시와 분석 (CoT 적용):\n\n### 예시 1: "강남구 아파트 시세 알려주고 전세자금대출 가능한지도 확인해줘"\n**CoT 분석**:\n1. 구조: 두 개의 요청 ("시세" + "대출")\n2. 유형: 정보 확인형 (둘 다)\n3. 복잡도: 중 (두 가지 독립적 조회)\n4. 필요 처리: 검색 + 계산/분석\n\n**결론**:\n- 주 의도: MARKET_INQUIRY (시세 조회가 먼저 필요)\n- 부가 의도: LOAN_CONSULT (대출 확인)\n- 분해: ["강남구 아파트 시세 조회", "전세자금대출 가능 여부 확인"]\n\n### 예시 2: "이 계약서 검토해서 위험한 부분 있는지 알려주고 수정 제안도 해줘"\n**CoT 분석**:\n1. 구조: 검토 + 위험 평가 + 수정안\n2. 유형: 평가/판단형 + 해결책 요청형\n3. 복잡도: 고 (3단계 처리)\n4. 필요 처리: 검토 + 분석 + 문서 생성\n\n**결론**:\n- 주 의도: CONTRACT_REVIEW (계약서 검토)\n- 부가 의도: RISK_ANALYSIS (위험 분석)\n- 분해: ["계약서 전체 검토", "위험 요소 식별", "수정사항 제안"]\n\n### 예시 3: "집주인이 짜증나, 10년 살았는데 전세금 3억을 10억으로 올려달래. 법적으로 해결방법 알려줘"\n**CoT 분석**:\n1. 구조: 상황 설명 (10년 거주, 3억→10억) + 해결책 요청\n2. 유형: 해결책 요청형 (단순 정보 X)\n3. 복잡도: 고 (구체적 상황 + 수치 비교 + 법률 + 대응방안)\n4. 필요 처리: 법률 검색 + 상황 분석 + 해결책 제시\n\n**결론**:\n- 주 의도: COMPREHENSIVE (복잡한 상황에 대한 종합 해결)\n- 부가 의도: LEGAL_CONSULT, RISK_ANALYSIS\n- 분해: ["전세금 인상 한도 법률 조회", "3억→10억 인상의 타당성 분석", "구체적 대응 방안 제시"]\n- **이유**: "법적으로"라는 키워드가 있지만, 단순 법률 확인이 아니라 구체적 상황에 대한 해결책을 요구하므로 COMPREHENSIVE\n\n### 예시 4: "전세금 인상률 상한이 얼마야?"\n**CoT 분석**:\n1. 구조: 단순 사실 확인\n2. 유형: 정보 확인형\n3. 복잡도: 저 (단일 개념)\n4. 필요 처리: 검색만\n\n**결론**:\n- 주 의도: LEGAL_CONSULT (법률 정보 조회)\n- 부가 의도: 없음\n- 분해: 필요 없음\n\n## 응답 형식 (JSON 형식으로 응답):\n\n```json\n{\n    "intent": "LEGAL_CONSULT",\n    "confidence": 0.9,\n    "keywords": ["전세금", "인상", "제한"],\n    "sub_intents": [],\n    "is_compound": false,\n    "decomposed_tasks": [],\n    "entities": {\n        "location": "강남구",\n        "price": "5억",\n        "contract_type": "전세",\n        "date": "2024년",\n        "area": "84㎡",\n        "action_verbs": ["확인", "검토"]\n    },\n    "reasoning": "전세금 인상에 대한 법률 질문이므로 LEGAL_CONSULT로 분류"\n}\n```\n\n응답 규칙:\n- intent: 위 9개 카테고리 중 하나 (대문자_언더스코어 형식)\n- confidence: 0.0~1.0 (0.8 이상이면 매우 확실, 0.5 미만이면 불확실)\n- keywords: 추출된 주요 키워드 목록\n- sub_intents: 복합 질문일 경우 부가적인 의도들\n- is_compound: 복합 질문 여부 (true/false)\n- decomposed_tasks: 복합 질문을 분해한 개별 작업들\n- entities: 추출된 엔티티 정보\n- reasoning: **반드시 CoT 5단계를 거쳐 분석한 과정을 포함** (구조 파악 → 유형 판단 → 복잡도 평가 → 필요 처리 → 최종 검증)\n\n## reasoning 작성 예시:\n"1단계(구조): 상황 설명(10년 거주, 3억→10억) + 해결책 요청 포함.\n2단계(유형): 해결책 요청형 - 단순 정보가 아닌 대응방안 필요.\n3단계(복잡도): 고 - 구체적 수치 비교와 복잡한 상황.\n4단계(처리): 법률 검색 + 상황 분석 + 해결책 제시 필요.\n5단계(검증): LEGAL_CONSULT만으로는 불충분, 종합적 분석 필요 → COMPREHENSIVE 선택"\n\n## 판단 가이드:\n- 여러 의도가 섞여있다면, 가장 주된 의도를 intent에, 나머지를 sub_intents에 기록\n- "그리고", "또한", "함께", "같이" 등의 연결어가 있으면 복합 질문일 가능성 높음\n- 법률 관련 키워드가 있으면 LEGAL_CONSULT 우선\n- 가격/시세 언급이 명확하면 MARKET_INQUIRY\n- 계약서라는 단어와 함께 "작성/만들기"가 있으면 CONTRACT_CREATION\n- 계약서라는 단어와 함께 "검토/확인"이 있으면 CONTRACT_REVIEW\n- 불확실하면 confidence를 낮게 설정하고 UNCLEAR 선택\n- 복합 질문은 is_compound를 true로 설정하고 개별 작업으로 분해\n\n분석할 질문: 대출 한도 조회하고 금리 비교해줘'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 15:59:46,490 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 15:59:46,491 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 15:59:46,491 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 15:59:46,491 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 15:59:46,491 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 15:59:46,491 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 15:59:50,272 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 06:59:50 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'3447'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'3494'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9963'), (b'x-ratelimit-remaining-tokens', b'197244'), (b'x-ratelimit-reset-requests', b'5m16.875s'), (b'x-ratelimit-reset-tokens', b'826ms'), (b'x-request-id', b'req_3337d1a5ac524d67b824ac34f1cd120d'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b09c769563091-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 15:59:50,272 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 15:59:50,273 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 15:59:50,273 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 15:59:50,273 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 15:59:50,273 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 15:59:50,273 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 06:59:50 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '3447', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '3494', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9963', 'x-ratelimit-remaining-tokens': '197244', 'x-ratelimit-reset-requests': '5m16.875s', 'x-ratelimit-reset-tokens': '826ms', 'x-request-id': 'req_3337d1a5ac524d67b824ac34f1cd120d', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b09c769563091-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 15:59:50,273 - openai._base_client - DEBUG - request_id: req_3337d1a5ac524d67b824ac34f1cd120d
2025-10-05 15:59:50,273 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: intent_analysis | Model: gpt-4o-mini-2024-07-18 | Tokens: 3378 (prompt: 3180, completion: 198)
2025-10-05 15:59:50,273 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM Intent Analysis Result: {'intent': 'LOAN_CONSULT', 'confidence': 0.85, 'keywords': ['대출', '한도', '금리', '비교'], 'sub_intents': [], 'is_compound': False, 'decomposed_tasks': [], 'entities': {'loan_type': '주택담보대출', 'action_verbs': ['조회', '비교']}, 'reasoning': '1단계(구조): 대출 한도 조회와 금리 비교 요청. 2단계(유형): 대출 관련 정보 확인형. 3단계(복잡도): 중 - 두 가지 독립적 조회. 4단계(처리): 대출 한도 조회와 금리 정보 검색 필요. 5단계(검증): 단순 정보 요청이므로 LOAN_CONSULT로 분류.'}
2025-10-05 15:59:50,274 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-1b47e371-ed45-4372-9af2-245eeb0195e8', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 Agent 선택 전문가입니다.\n사용자의 요청에 가장 적합한 Agent/Team을 선택하는 것이 목표입니다.\n\n## 현재 상황\n\n**사용자 질문:** 대출 한도 조회하고 금리 비교해줘\n**분석된 의도:** 대출상담\n**추출된 키워드:** [\'대출\', \'한도\', \'금리\', \'비교\']\n\n## 사용 가능한 Agent/Team 정보\n\n{\'search_team\': {\'name\': \'search_team\', \'capabilities\': \'법률 검색, 부동산 시세 조회, 대출 상품 검색\', \'tools\': [\'legal_search\', \'market_data\', \'loan_data\'], \'use_cases\': [\'법률 상담\', \'시세 조회\', \'대출 정보\']}, \'analysis_team\': {\'name\': \'analysis_team\', \'capabilities\': \'데이터 분석, 리스크 평가, 인사이트 생성, 추천\', \'tools\': [\'data_analyzer\', \'risk_evaluator\'], \'use_cases\': [\'시장 분석\', \'리스크 평가\', \'투자 분석\']}, \'document_team\': {\'name\': \'document_team\', \'capabilities\': \'계약서 작성, 문서 생성, 문서 검토\', \'tools\': [\'document_generator\', \'contract_reviewer\'], \'use_cases\': [\'계약서 작성\', \'문서 검토\']}}\n\n## Agent 역할 및 상세 가이드\n\n### 1. search_team (검색 팀)\n- **주요 기능**: 정보 검색 및 데이터 수집\n- **전문 분야**:\n  * 법률 정보 검색 (전세법, 임대차보호법, 부동산 관련 법규)\n  * 부동산 시세 조회 (매매가, 전세가, 월세, 실거래가)\n  * 대출 상품 정보 검색 (금리, 한도, 조건)\n  * 지역 정보 및 인프라 조회\n- **도구**: legal_search, market_data, loan_data\n- **적합한 작업**: 정보 조회, 데이터 수집, 법률 확인, 시세 파악\n- **예시**:\n  * "전세금 5% 인상 가능한가요?"\n  * "강남구 아파트 전세 시세"\n  * "전세자금대출 한도 얼마?"\n\n### 2. analysis_team (분석 팀)\n- **주요 기능**: 데이터 분석 및 평가\n- **전문 분야**:\n  * 시장 동향 분석 (상승률, 하락률, 추세)\n  * 리스크 평가 (계약, 투자 위험도)\n  * 투자 수익률 계산 (ROI, 월세 수익률)\n  * 대출 한도 및 조건 분석 (LTV, DTI, DSR)\n  * 비교 분석 (지역별, 상품별)\n- **도구**: data_analyzer, risk_evaluator, calculator\n- **적합한 작업**: 데이터 분석, 리스크 평가, 계산, 비교, 예측\n- **의존성**: 보통 search_team의 데이터가 필요\n- **예시**:\n  * "이 지역 투자 가치 분석해줘"\n  * "계약 리스크 평가해줘"\n  * "대출 가능 금액 계산해줘"\n\n### 3. document_team (문서 팀)\n- **주요 기능**: 문서 생성 및 관리\n- **전문 분야**:\n  * 계약서 작성 (임대차, 매매, 전세)\n  * 문서 템플릿 관리\n  * 특약사항 생성\n  * 계약서 수정안 작성\n  * 법률 문서 검토\n- **도구**: document_generator, contract_template, contract_reviewer\n- **적합한 작업**: 문서 작성, 계약서 생성, 문서 수정, 검토\n- **예시**:\n  * "임대차계약서 작성해줘"\n  * "특약사항 추가해줘"\n  * "계약서 수정안 만들어줘"\n\n## Chain-of-Thought Agent 선택 프로세스\n\n다음 단계를 **순서대로** 따라 최적의 Agent 조합을 선택하세요:\n\n### 1단계: 질문 요구사항 파악\n- 단순 정보 조회인가? → search_team만 필요\n- 판단/평가가 필요한가? → search + analysis 필요\n- 해결책 제시가 필요한가? → search + analysis 필요\n- 문서 생성이 필요한가? → document_team 추가\n\n### 2단계: 작업 복잡도 판단\n- **단순** (검색만): "~이 뭐야?", "~알려줘" → search_team\n- **중간** (검색+판단): "~괜찮아?", "~적절해?" → search + analysis\n- **복잡** (종합 해결): 구체적 상황 + "어떻게 해야 해?" → search + analysis\n\n### 3단계: 의존성 분석\n- 독립적 작업: 단일 팀으로 처리 가능\n- 순차적 의존: 이전 결과 필요 → 여러 팀 순서대로\n- 병렬 가능: 동시 조회 가능 → coordination: "parallel"\n\n### 4단계: 최종 검증\n- 선택한 팀들로 질문에 완전히 답변 가능한가?\n- 불필요한 팀이 포함되지 않았는가?\n- 순서가 논리적인가? (데이터 흐름 고려)\n\n### 중요 원칙:\n- **법률 키워드만으로 판단하지 말 것**: "법적으로 어떻게 해야 해?" = 법률 검색 + 분석 필요\n- **상황 설명 + 해결책 요청** = 반드시 analysis_team 포함\n- **구체적 수치 비교** (3억→10억 같은) = analysis_team 필요\n\n## 의도별 Agent 매핑 가이드 (기본 가이드 - CoT로 조정 가능)\n\n| 의도 (Intent) | 기본 조합 | 상황별 조정 |\n|--------------|-----------|-------------|\n| LEGAL_CONSULT | ["search_team"] | 해결책 요청시 → + analysis_team |\n| MARKET_INQUIRY | ["search_team"] | 비교/평가시 → + analysis_team |\n| LOAN_CONSULT | ["search_team", "analysis_team"] | 계산 필수 |\n| CONTRACT_CREATION | ["document_team"] | 검토 후 작성 → search + document |\n| CONTRACT_REVIEW | ["search_team", "analysis_team"] | 법률 검토 + 리스크 분석 |\n| COMPREHENSIVE | ["search_team", "analysis_team"] | **항상 분석 포함** |\n| RISK_ANALYSIS | ["analysis_team"] | 법률 근거 필요시 → search + analysis |\n| UNCLEAR | ["search_team", "analysis_team"] | 포괄적 대응 |\n\n**중요**: 위 매핑은 **기본 가이드**일 뿐입니다.\n실제 질문의 내용(CoT 분석 결과)에 따라 조정하세요!\n\n## 복합 질문 처리 예시 (CoT 적용)\n\n### 예시 1: 순차적 처리\n질문: "강남구 시세 확인하고 투자 가치 분석해줘"\n**CoT 분석**:\n1. 요구사항: 시세 조회 + 투자 가치 평가\n2. 복잡도: 중간 (검색 + 분석)\n3. 의존성: 시세 데이터 → 투자 분석 (순차)\n4. 검증: search만으로는 "투자 가치 평가" 불가능\n\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "1단계: 시세 조회+투자 평가 필요. 2단계: 중간 복잡도. 3단계: 순차 의존. 4단계: search로 시세 수집 후 analysis로 투자 가치 평가 필요",\n    "coordination": "sequential"\n}\n```\n\n### 예시 2: 단순 정보 조회\n질문: "전세금 인상률 한도가 얼마야?"\n**CoT 분석**:\n1. 요구사항: 단순 사실 확인\n2. 복잡도: 낮음 (정보 확인형)\n3. 의존성: 없음\n4. 검증: search_team만으로 충분\n\n```json\n{\n    "selected_agents": ["search_team"],\n    "reasoning": "1단계: 단순 정보 조회. 2단계: 저복잡도. 3단계: 독립적. 4단계: 법률 검색만으로 답변 가능",\n    "coordination": "single"\n}\n```\n\n### 예시 3: 해결책 요청 (핵심 예시!)\n질문: "집주인이 전세금 3억을 10억으로 올려달래. 법적으로 어떻게 해야 해?"\n의도: COMPREHENSIVE\n**CoT 분석**:\n1. 요구사항: 상황 설명 + 해결책 요청\n2. 복잡도: 높음 (구체적 상황 + 수치 비교)\n3. 의존성: 법률 확인 → 상황 분석 → 해결책 제시\n4. 검증: "법적으로"만 보고 search만 선택하면 불충분! 해결책 제시 필요\n\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "1단계: 법률 + 상황 분석 + 해결책 필요. 2단계: 고복잡도(3억→10억 비정상). 3단계: 순차(법률 확인 후 타당성 분석). 4단계: \'어떻게 해야\' = 단순 법률 조회 아님, 분석 필수",\n    "coordination": "sequential",\n    "confidence": 0.95\n}\n```\n\n## 응답 형식 (JSON)\n\n```json\n{\n    "selected_agents": ["선택된 agent/team 목록"],\n    "reasoning": "선택 이유를 구체적으로 설명. 각 Agent의 역할과 처리 순서 포함",\n    "coordination": "single/sequential/parallel/pipeline",\n    "dependencies": {"agent2": ["agent1"]},\n    "estimated_time": 30,\n    "confidence": 0.9\n}\n```\n\n## 선택 가이드라인\n\n1. **최소 Agent 원칙**: 가능한 적은 수의 Agent로 처리\n2. **전문성 우선**: 해당 작업에 가장 전문적인 Agent 선택\n3. **효율성 고려**: 병렬 처리 가능한 경우 명시\n4. **의존성 관리**: 데이터 흐름을 고려한 순서 지정\n5. **폴백 전략**: 불확실한 경우 ["search_team", "analysis_team"] 조합\n\n## 주의사항\n\n- selected_agents는 반드시 배열 형태\n- Agent 이름은 정확히: "search_team", "analysis_team", "document_team"\n- 최소 1개, 최대 3개 선택\n- 순서는 실행 우선순위 (앞에 있을수록 먼저 실행)\n- reasoning은 상세하고 논리적으로 작성\n- coordination 필드로 실행 방식 명시\n- 복합 질문의 경우 의존성 관계 명확히 표시'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 15:59:50,274 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 15:59:50,274 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 15:59:50,274 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 15:59:50,274 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 15:59:50,275 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 15:59:50,275 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 15:59:53,446 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 06:59:53 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'2882'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'2906'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9962'), (b'x-ratelimit-remaining-tokens', b'197889'), (b'x-ratelimit-reset-requests', b'5m21.725s'), (b'x-ratelimit-reset-tokens', b'633ms'), (b'x-request-id', b'req_d02653cca91541adbbe252f727016f7e'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b09df19a43091-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 15:59:53,446 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 15:59:53,447 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 15:59:53,447 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 15:59:53,447 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 15:59:53,447 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 15:59:53,447 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 06:59:53 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '2882', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '2906', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9962', 'x-ratelimit-remaining-tokens': '197889', 'x-ratelimit-reset-requests': '5m21.725s', 'x-ratelimit-reset-tokens': '633ms', 'x-request-id': 'req_d02653cca91541adbbe252f727016f7e', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b09df19a43091-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 15:59:53,447 - openai._base_client - DEBUG - request_id: req_d02653cca91541adbbe252f727016f7e
2025-10-05 15:59:53,447 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: agent_selection | Model: gpt-4o-mini-2024-07-18 | Tokens: 2556 (prompt: 2360, completion: 196)
2025-10-05 15:59:53,447 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM agent selection reasoning: 1단계: 대출 한도 조회와 금리 비교를 요청하였으므로, 대출 상품 정보 검색이 필요하고, 이를 통해 한도와 금리를 비교 분석해야 합니다. 2단계: 중간 복잡도에 해당하며, 검색과 분석이 모두 필요합니다. 3단계: 대출 상품 정보를 검색한 후, 그 데이터를 기반으로 금리 비교 및 한도 분석을 진행해야 하므로 순차적 의존성이 존재합니다. 4단계: search_team이 대출 상품 정보를 수집한 후, analysis_team이 이를 분석하여 금리 비교와 한도 정보를 제공할 수 있습니다.
2025-10-05 15:59:53,447 - app.service_agent.cognitive_agents.planning_agent - INFO - ✅ Primary LLM selected agents: ['search_team', 'analysis_team']
2025-10-05 15:59:53,447 - __main__ - INFO -   의도: 대출상담
2025-10-05 15:59:53,447 - __main__ - INFO -   신뢰도: 0.85
2025-10-05 15:59:53,447 - __main__ - INFO -   추천 Agent: ['search_team', 'analysis_team']
2025-10-05 15:59:53,447 - __main__ - INFO - 
[Step 2] Query Decomposition...
2025-10-05 15:59:53,447 - app.service_agent.cognitive_agents.query_decomposer - INFO - Decomposing query: 대출 한도 조회하고 금리 비교해줘...
2025-10-05 15:59:53,448 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-621a0148-7449-4c28-b328-23996806e39a', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 질문 분해 전문가입니다.\n복잡한 사용자 질문을 독립적으로 처리 가능한 작업 단위로 분해하는 것이 목표입니다.\n\n## Chain-of-Thought 분해 프로세스:\n\n### 1단계: 복합 질문 여부 판단\n- 단순 정보 조회만 필요한가? → is_compound: false\n- **다음 중 하나라도 해당하면 is_compound: true**:\n  * "그리고", "그 다음", "한 후" 같은 연결어로 여러 요청 연결\n  * 명시적으로 2개 이상의 작업 요청 (예: "시세 확인하고 대출 계산해줘")\n  * 상황 설명 + 해결책 요청 (예: "3억→10억 올려달래. 어떻게 해야 해?")\n  * 해결책을 위해 여러 단계 처리 필요 (검색 → 분석 → 제안)\n\n### 2단계: 필요 작업 식별\n- 정보 수집이 필요한가? → search 작업\n- 평가/판단이 필요한가? → analysis 작업\n- 문서 생성이 필요한가? → generation 작업\n- **해결책 요청**인가? → search + analysis (최소 2개)\n\n### 3단계: 작업 순서 결정\n- 독립적 작업: 병렬 가능\n- 이전 결과 필요: 순차 실행 (depends_on 설정)\n\n## 중요 원칙:\n1. 각 작업은 하나의 명확한 목표를 가져야 합니다\n2. 작업 간 의존성을 명확히 파악해야 합니다\n3. 병렬 처리 가능한 작업은 구분해야 합니다\n4. **주의**: "어떻게 해야", "방법 알려줘" 같은 해결책 요청은 복합 질문!\n\n## 작업 유형 (type):\n- search: 정보 검색 (법률, 시세, 대출 정보 등)\n- analysis: 데이터 분석 (리스크 평가, 시장 분석 등)\n- generation: 문서 생성 (계약서 작성 등)\n- review: 검토/평가 (계약서 검토, 조건 확인 등)\n- calculation: 계산/산출 (대출 한도, 세금 등)\n- comparison: 비교 분석 (여러 옵션 비교)\n\n## 담당 팀 (agent):\n- search_team: 법률, 시세, 대출 정보 검색\n- analysis_team: 데이터 분석, 리스크 평가, 계산\n- document_team: 문서 생성, 계약서 작성\n\n## 학습 예시:\n\n### 예시 1: 복합 질문 (순차적)\n질문: "강남구 아파트 시세 확인하고 대출 가능 금액 계산해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "강남구 아파트 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "대출 가능 금액 계산",\n            "type": "calculation",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "required_data": {"price": "task_0.result.price"},\n            "estimated_time": 15\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "시세 정보가 있어야 대출 금액 계산이 가능하므로 순차 실행"\n}\n```\n\n### 예시 2: 복합 질문 (병렬 가능)\n질문: "이 지역 전세 시세와 매매 시세 모두 알려주고 비교 분석해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "전세 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "매매 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "전세/매매 시세 비교 분석",\n            "type": "comparison",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0", "task_1"],\n            "required_data": {\n                "lease_price": "task_0.result",\n                "sale_price": "task_1.result"\n            },\n            "estimated_time": 25\n        }\n    ],\n    "execution_mode": "mixed",\n    "parallel_groups": [["task_0", "task_1"], ["task_2"]],\n    "reasoning": "시세 조회는 독립적이므로 병렬 처리, 비교는 두 결과 필요"\n}\n```\n\n### 예시 3: 복합 질문 (3단계 이상)\n질문: "이 계약서 검토해서 위험한 부분 찾고 수정안 만들어서 최종 계약서 작성해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "계약서 내용 전체 검토",\n            "type": "review",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 30\n        },\n        {\n            "description": "위험 요소 및 문제점 분석",\n            "type": "analysis",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "estimated_time": 25\n        },\n        {\n            "description": "수정안 제안 생성",\n            "type": "generation",\n            "agent": "document_team",\n            "priority": 3,\n            "depends_on": ["task_1"],\n            "estimated_time": 20\n        },\n        {\n            "description": "최종 계약서 작성",\n            "type": "generation",\n            "agent": "document_team",\n            "priority": 4,\n            "depends_on": ["task_2"],\n            "estimated_time": 30\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "각 단계가 이전 결과에 의존하므로 순차 실행 필요"\n}\n```\n\n### 예시 4: 단순 질문 (분해 불필요)\n질문: "전세금 인상률 상한이 얼마야?"\n분해:\n```json\n{\n    "is_compound": false,\n    "sub_tasks": [\n        {\n            "description": "전세금 인상률 상한 법률 정보 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 15\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "단일 정보 조회 요청으로 분해 불필요"\n}\n```\n\n### 예시 5: 조건부 실행\n질문: "이 물건 시세 확인하고 적정가면 대출 상담도 받고 싶어"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "물건 시세 조회 및 적정성 평가",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 25\n        },\n        {\n            "description": "대출 상담 정보 제공",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "optional": true,\n            "context": {"condition": "if_reasonable_price"},\n            "estimated_time": 20\n        }\n    ],\n    "execution_mode": "conditional",\n    "reasoning": "시세 확인 결과에 따라 대출 상담 진행 여부 결정"\n}\n```\n\n### 예시 6: 상황 설명 + 해결책 요청 (핵심 패턴!)\n질문: "집주인이 전세금 3억을 10억으로 올려달래. 법적으로 어떻게 해야 해?"\n**CoT 분석**:\n1. 질문 분석: 상황 설명 + 해결책 요청\n2. 연결어: 없지만, "어떻게 해야" = 해결책 요청\n3. 의존성: 법률 확인 → 상황 분석 → 대응 방안\n4. 복합 여부: **YES** (해결책을 위해 여러 단계 필요)\n\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "전세금 인상 한도 관련 법률 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "3억→10억 인상의 법적 타당성 및 적정성 분석",\n            "type": "analysis",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "required_data": {"legal_limit": "task_0.result", "current": 300000000, "requested": 1000000000},\n            "estimated_time": 25\n        },\n        {\n            "description": "구체적 대응 방안 및 해결책 제시",\n            "type": "analysis",\n            "agent": "analysis_team",\n            "priority": 3,\n            "depends_on": ["task_1"],\n            "estimated_time": 20\n        }\n    ],\n    "execution_mode": "sequential",\n    "confidence": 0.95,\n    "reasoning": "상황 설명+해결책 요청 패턴. \'어떻게 해야\'는 단순 정보 조회가 아닌 종합 해결책 필요. 법률 조회 → 상황 분석 → 해결책 제시 3단계 순차 처리"\n}\n```\n\n## Chain-of-Thought 프로세스:\n\n1. **질문 분석**: 어떤 정보나 작업을 요구하는가?\n2. **연결어 확인**: "그리고", "또한", "해서", "한 후" 등이 있는가?\n3. **의존성 파악**: 어떤 작업이 다른 작업의 결과를 필요로 하는가?\n4. **병렬성 판단**: 독립적으로 실행 가능한 작업이 있는가?\n5. **최적화**: 불필요한 분해는 없는가?\n\n## 응답 형식 (JSON):\n\n{\n    "is_compound": true/false,\n    "sub_tasks": [\n        {\n            "description": "작업 설명",\n            "type": "작업 유형",\n            "agent": "담당 팀",\n            "priority": 우선순위 (1이 가장 높음),\n            "depends_on": ["선행 작업 ID 리스트"],\n            "required_data": {"필요한 데이터 매핑"},\n            "estimated_time": 예상 소요 시간(초),\n            "optional": true/false,\n            "context": {"추가 컨텍스트"}\n        }\n    ],\n    "execution_mode": "sequential/parallel/mixed/conditional",\n    "parallel_groups": [["병렬 실행 가능한 작업 ID 그룹"]],\n    "confidence": 0.0-1.0,\n    "reasoning": "분해 결정의 이유와 근거"\n}\n\n## 분해 가이드라인:\n\n1. **분해가 필요한 경우**:\n   - 여러 종류의 정보를 요청하는 경우\n   - 순차적 처리가 필요한 경우 (A의 결과로 B 수행)\n   - 서로 다른 팀의 전문성이 필요한 경우\n\n2. **분해가 불필요한 경우**:\n   - 단일 정보 조회\n   - 단순한 질문-답변\n   - 하나의 팀에서 완전히 처리 가능한 경우\n\n3. **병렬 처리 기준**:\n   - 서로 독립적인 정보 조회\n   - 의존성이 없는 분석 작업\n   - 동시에 진행해도 충돌하지 않는 작업\n\n4. **우선순위 설정**:\n   - 의존성이 없는 작업: priority 1\n   - 1차 의존 작업: priority 2\n   - 2차 의존 작업: priority 3\n   - 이런 식으로 증가\n\n현재 의도: 대출상담\n추출된 엔티티: None\n\n분석할 질문: 대출 한도 조회하고 금리 비교해줘'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 15:59:53,448 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 15:59:53,448 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 15:59:53,449 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 15:59:53,449 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 15:59:53,449 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 15:59:53,449 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 15:59:57,132 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 06:59:57 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'3405'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'3431'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9962'), (b'x-ratelimit-remaining-tokens', b'197338'), (b'x-ratelimit-reset-requests', b'5m27.199s'), (b'x-ratelimit-reset-tokens', b'798ms'), (b'x-request-id', b'req_f08d4ee18bfa49ccbba0f90443ee6ae7'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b09f2ee6a3091-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 15:59:57,133 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 15:59:57,133 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 15:59:57,133 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 15:59:57,133 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 15:59:57,133 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 15:59:57,133 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 06:59:57 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '3405', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '3431', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9962', 'x-ratelimit-remaining-tokens': '197338', 'x-ratelimit-reset-requests': '5m27.199s', 'x-ratelimit-reset-tokens': '798ms', 'x-request-id': 'req_f08d4ee18bfa49ccbba0f90443ee6ae7', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b09f2ee6a3091-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 15:59:57,133 - openai._base_client - DEBUG - request_id: req_f08d4ee18bfa49ccbba0f90443ee6ae7
2025-10-05 15:59:57,133 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: query_decomposition | Model: gpt-4o-mini-2024-07-18 | Tokens: 2965 (prompt: 2690, completion: 275)
2025-10-05 15:59:57,133 - app.service_agent.cognitive_agents.query_decomposer - INFO - Successfully decomposed into 3 tasks
2025-10-05 15:59:57,133 - __main__ - INFO -   복합 질문: True
2025-10-05 15:59:57,133 - __main__ - INFO -   작업 수: 3
2025-10-05 15:59:57,133 - __main__ - INFO -   실행 모드: conditional
2025-10-05 15:59:57,134 - __main__ - INFO -     - task_0: 대출 한도 조회 (search_team)
2025-10-05 15:59:57,134 - __main__ - INFO -     - task_1: 금리 정보 조회 (search_team)
2025-10-05 15:59:57,134 - __main__ - INFO -     - task_2: 대출 한도와 금리 비교 분석 (analysis_team)
2025-10-05 15:59:57,134 - __main__ - INFO - 
[Step 3] Comprehensive Plan 생성...
2025-10-05 15:59:57,134 - app.service_agent.cognitive_agents.planning_agent - INFO - Creating comprehensive plan for query: 대출 한도 조회하고 금리 비교해줘...
2025-10-05 15:59:57,134 - app.service_agent.cognitive_agents.planning_agent - INFO - Analyzing intent for query: 대출 한도 조회하고 금리 비교해줘...
2025-10-05 15:59:57,134 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-4b145b8e-92bf-4fa0-9f74-4f7369d7b207', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 의도 분석 전문가입니다.\n사용자의 질문을 정확히 이해하고, 어떤 종류의 도움이 필요한지 분류해야 합니다.\n\n## Chain-of-Thought 분석 프로세스\n\n질문을 분석할 때 다음 단계를 **순서대로** 따르세요:\n\n### 1단계: 질문 구조 파악\n- 단순 정보 요청인가? (예: "~이 뭐야?", "~알려줘")\n- 상황 설명이 포함되어 있는가? (배경, 현재 상태)\n- 구체적 수치나 데이터가 있는가? (금액, 비율, 기간 등)\n- 문제 해결을 요구하는가? (예: "어떻게 해야 해?", "방법 알려줘")\n\n### 2단계: 요청 유형 판단\n- **정보 확인형**: 사실, 개념, 규정 확인 → 검색만으로 충분\n- **평가/판단형**: "괜찮아?", "적절해?", "문제있어?" → 검색 + 분석 필요\n- **해결책 요청형**: "어떻게?", "방법?", "대처?" → 검색 + 분석 + 제안 필요\n- **비교/선택형**: "A vs B", "어느게 나아?" → 검색 + 분석(비교) 필요\n\n### 3단계: 복잡도 평가\n- **저**: 단일 개념/사실 확인 (예: "전세금 인상률 한도?")\n- **중**: 특정 상황 + 판단 (예: "3억을 5억으로 올려달래. 가능해?")\n- **고**: 복잡한 상황 + 여러 조건 + 해결책 (예: "10년 거주, 3억→10억 요구. 어떻게 해야 해?")\n\n### 4단계: 필요한 처리 결정\n- **검색만**: 정보 확인형 + 저복잡도\n- **검색+분석**: 평가/판단형 OR 중복잡도 OR 수치 비교 포함\n- **종합처리**: 해결책 요청형 OR 고복잡도 OR 여러 조건 동시 고려\n\n### 5단계: 최종 검증\n- 선택한 의도로 사용자 질문에 완전히 답변 가능한가?\n- 단순 정보 제공으로 끝나는가, 아니면 추가 분석/판단이 필요한가?\n- 상황 설명이 있으면서 "해결", "방법", "어떻게" 등이 있으면 → COMPREHENSIVE 고려\n\n## 중요: 복합 질문 처리\n복합적인 질문(여러 의도가 섞인 질문)의 경우, 가장 핵심적인 의도를 파악하되,\nsub_intents 필드에 부가적인 의도들도 함께 기록해주세요.\n\n**특히 주의**:\n- 법률 키워드가 있어도, "해결방법", "어떻게 해야" 같은 표현이 있으면 단순 LEGAL_CONSULT가 아닐 수 있음\n- 구체적 상황(금액, 기간 등) + 해결책 요구 = COMPREHENSIVE 또는 복합 의도로 분류\n\n## 분류 카테고리 설명:\n\n1. **LEGAL_CONSULT (법률상담)**\n   - 설명: 부동산 관련 법률, 권리, 의무에 대한 질문\n   - 예시:\n     * 단순: "전세금 5% 인상이 가능한가요?", "임대차계약 갱신 거부할 수 있나요?"\n     * 복합: "전세금 인상 가능한지 확인하고 법적 근거도 알려주세요"\n   - 키워드: 법, 전세, 임대, 보증금, 계약, 권리, 의무, 갱신, 임차인, 임대인, 법률, 규정, 조항\n   - 필요한 처리: 법률 데이터베이스 검색, 관련 법조항 찾기\n\n2. **MARKET_INQUIRY (시세조회)**\n   - 설명: 부동산 시장 가격, 시세, 거래 동향에 대한 질문\n   - 예시:\n     * 단순: "강남구 아파트 전세 시세 알려주세요", "서초동 매매가 얼마나 올랐나요?"\n     * 복합: "강남구 시세 확인하고 대출 가능 금액도 계산해줘"\n   - 키워드: 시세, 가격, 매매가, 전세가, 월세, 시장, 동향, 평균, 지역명, 상승률, 하락률\n   - 필요한 처리: 부동산 시세 데이터 조회, 지역별 가격 분석\n\n3. **LOAN_CONSULT (대출상담)**\n   - 설명: 주택담보대출, 전세자금대출 등 금융 관련 질문\n   - 예시:\n     * 단순: "전세자금대출 한도가 얼마인가요?", "LTV가 뭔가요?"\n     * 복합: "대출 한도 확인하고 금리 비교도 해주세요"\n   - 키워드: 대출, 금리, 한도, 조건, 상환, LTV, DTI, DSR, 담보, 금융, 은행\n   - 필요한 처리: 대출 상품 조회, 금리 정보 검색, 한도 계산\n\n4. **CONTRACT_CREATION (계약서작성)**\n   - 설명: 새로운 계약서나 문서를 작성해달라는 요청\n   - 예시:\n     * 단순: "임대차계약서 작성해주세요", "전세계약서 초안 만들어주세요"\n     * 복합: "계약서 작성하고 주의사항도 검토해주세요"\n   - 키워드: 작성, 만들, 생성, 초안, 계약서, 문서, 양식\n   - 필요한 처리: 문서 생성 에이전트 호출, 템플릿 기반 작성\n\n5. **CONTRACT_REVIEW (계약서검토)**\n   - 설명: 기존 계약서나 문서를 검토해달라는 요청\n   - 예시:\n     * 단순: "이 계약서 검토해주세요", "특약사항 문제없나요?"\n     * 복합: "계약서 검토하고 수정사항도 제안해주세요"\n   - 키워드: 검토, 확인, 점검, 리뷰, 분석해, 살펴봐, 체크\n   - 필요한 처리: 문서 분석, 위험 요소 식별, 개선사항 제안\n\n6. **COMPREHENSIVE (종합분석)**\n   - 설명: 여러 측면을 종합적으로 분석해달라는 요청, 또는 복잡한 상황에 대한 해결책 요청\n   - 예시:\n     * 단순: "이 물건 전체적으로 분석해주세요"\n     * 복합: "시세, 법률, 대출 모두 검토해서 종합 의견 주세요"\n     * 해결형: "10년 거주했는데 전세금 3억을 10억으로 올려달래. 어떻게 해야 해?"\n     * 상황+해결: "집주인이 계약 갱신 거부했어. 법적으로 어떻게 대응해야 할까?"\n   - 키워드: 종합, 전체, 모든, 전반적, 종합적, 평가, 분석, 어떻게, 방법, 해결, 대처\n   - 패턴: 구체적 상황 설명 + "어떻게/방법/해결" 요청\n   - 필요한 처리: 다중 데이터 소스 통합 분석, 상황 평가, 해결책 제시\n\n7. **RISK_ANALYSIS (리스크분석)**\n   - 설명: 위험 요소나 주의사항에 대한 질문\n   - 예시:\n     * 단순: "이 계약 위험한가요?", "주의할 점 알려주세요"\n     * 복합: "리스크 분석하고 대안도 제시해주세요"\n   - 키워드: 위험, 리스크, 주의, 문제점, 조심, 걱정, 우려\n   - 필요한 처리: 위험 요소 분석, 주의사항 추출\n\n8. **UNCLEAR (불분명)**\n   - 설명: 의도를 명확히 파악하기 어려운 질문\n   - 예시: "이거 좀 봐주세요", "어떻게 해야 할까요?", "도와주세요"\n   - 처리: 추가 질문으로 의도 명확화 필요\n\n9. **IRRELEVANT (무관)**\n   - 설명: 부동산과 전혀 관련 없는 질문\n   - 예시: "날씨 어때?", "저녁 뭐 먹지?", "주식 추천해줘"\n   - 처리: 부동산 관련 질문을 유도\n\n## 복합 질문 예시와 분석 (CoT 적용):\n\n### 예시 1: "강남구 아파트 시세 알려주고 전세자금대출 가능한지도 확인해줘"\n**CoT 분석**:\n1. 구조: 두 개의 요청 ("시세" + "대출")\n2. 유형: 정보 확인형 (둘 다)\n3. 복잡도: 중 (두 가지 독립적 조회)\n4. 필요 처리: 검색 + 계산/분석\n\n**결론**:\n- 주 의도: MARKET_INQUIRY (시세 조회가 먼저 필요)\n- 부가 의도: LOAN_CONSULT (대출 확인)\n- 분해: ["강남구 아파트 시세 조회", "전세자금대출 가능 여부 확인"]\n\n### 예시 2: "이 계약서 검토해서 위험한 부분 있는지 알려주고 수정 제안도 해줘"\n**CoT 분석**:\n1. 구조: 검토 + 위험 평가 + 수정안\n2. 유형: 평가/판단형 + 해결책 요청형\n3. 복잡도: 고 (3단계 처리)\n4. 필요 처리: 검토 + 분석 + 문서 생성\n\n**결론**:\n- 주 의도: CONTRACT_REVIEW (계약서 검토)\n- 부가 의도: RISK_ANALYSIS (위험 분석)\n- 분해: ["계약서 전체 검토", "위험 요소 식별", "수정사항 제안"]\n\n### 예시 3: "집주인이 짜증나, 10년 살았는데 전세금 3억을 10억으로 올려달래. 법적으로 해결방법 알려줘"\n**CoT 분석**:\n1. 구조: 상황 설명 (10년 거주, 3억→10억) + 해결책 요청\n2. 유형: 해결책 요청형 (단순 정보 X)\n3. 복잡도: 고 (구체적 상황 + 수치 비교 + 법률 + 대응방안)\n4. 필요 처리: 법률 검색 + 상황 분석 + 해결책 제시\n\n**결론**:\n- 주 의도: COMPREHENSIVE (복잡한 상황에 대한 종합 해결)\n- 부가 의도: LEGAL_CONSULT, RISK_ANALYSIS\n- 분해: ["전세금 인상 한도 법률 조회", "3억→10억 인상의 타당성 분석", "구체적 대응 방안 제시"]\n- **이유**: "법적으로"라는 키워드가 있지만, 단순 법률 확인이 아니라 구체적 상황에 대한 해결책을 요구하므로 COMPREHENSIVE\n\n### 예시 4: "전세금 인상률 상한이 얼마야?"\n**CoT 분석**:\n1. 구조: 단순 사실 확인\n2. 유형: 정보 확인형\n3. 복잡도: 저 (단일 개념)\n4. 필요 처리: 검색만\n\n**결론**:\n- 주 의도: LEGAL_CONSULT (법률 정보 조회)\n- 부가 의도: 없음\n- 분해: 필요 없음\n\n## 응답 형식 (JSON 형식으로 응답):\n\n```json\n{\n    "intent": "LEGAL_CONSULT",\n    "confidence": 0.9,\n    "keywords": ["전세금", "인상", "제한"],\n    "sub_intents": [],\n    "is_compound": false,\n    "decomposed_tasks": [],\n    "entities": {\n        "location": "강남구",\n        "price": "5억",\n        "contract_type": "전세",\n        "date": "2024년",\n        "area": "84㎡",\n        "action_verbs": ["확인", "검토"]\n    },\n    "reasoning": "전세금 인상에 대한 법률 질문이므로 LEGAL_CONSULT로 분류"\n}\n```\n\n응답 규칙:\n- intent: 위 9개 카테고리 중 하나 (대문자_언더스코어 형식)\n- confidence: 0.0~1.0 (0.8 이상이면 매우 확실, 0.5 미만이면 불확실)\n- keywords: 추출된 주요 키워드 목록\n- sub_intents: 복합 질문일 경우 부가적인 의도들\n- is_compound: 복합 질문 여부 (true/false)\n- decomposed_tasks: 복합 질문을 분해한 개별 작업들\n- entities: 추출된 엔티티 정보\n- reasoning: **반드시 CoT 5단계를 거쳐 분석한 과정을 포함** (구조 파악 → 유형 판단 → 복잡도 평가 → 필요 처리 → 최종 검증)\n\n## reasoning 작성 예시:\n"1단계(구조): 상황 설명(10년 거주, 3억→10억) + 해결책 요청 포함.\n2단계(유형): 해결책 요청형 - 단순 정보가 아닌 대응방안 필요.\n3단계(복잡도): 고 - 구체적 수치 비교와 복잡한 상황.\n4단계(처리): 법률 검색 + 상황 분석 + 해결책 제시 필요.\n5단계(검증): LEGAL_CONSULT만으로는 불충분, 종합적 분석 필요 → COMPREHENSIVE 선택"\n\n## 판단 가이드:\n- 여러 의도가 섞여있다면, 가장 주된 의도를 intent에, 나머지를 sub_intents에 기록\n- "그리고", "또한", "함께", "같이" 등의 연결어가 있으면 복합 질문일 가능성 높음\n- 법률 관련 키워드가 있으면 LEGAL_CONSULT 우선\n- 가격/시세 언급이 명확하면 MARKET_INQUIRY\n- 계약서라는 단어와 함께 "작성/만들기"가 있으면 CONTRACT_CREATION\n- 계약서라는 단어와 함께 "검토/확인"이 있으면 CONTRACT_REVIEW\n- 불확실하면 confidence를 낮게 설정하고 UNCLEAR 선택\n- 복합 질문은 is_compound를 true로 설정하고 개별 작업으로 분해\n\n분석할 질문: 대출 한도 조회하고 금리 비교해줘'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 15:59:57,134 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 15:59:57,134 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 15:59:57,135 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 15:59:57,135 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 15:59:57,135 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 15:59:57,135 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 16:00:01,519 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 07:00:01 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'4177'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'4201'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9961'), (b'x-ratelimit-remaining-tokens', b'197244'), (b'x-ratelimit-reset-requests', b'5m32.16s'), (b'x-ratelimit-reset-tokens', b'826ms'), (b'x-request-id', b'req_8089610febd84e108495b37d36132a3d'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b0a09ff223091-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 16:00:01,519 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 16:00:01,520 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 16:00:01,526 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 16:00:01,527 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 16:00:01,527 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 16:00:01,527 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 07:00:01 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '4177', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '4201', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9961', 'x-ratelimit-remaining-tokens': '197244', 'x-ratelimit-reset-requests': '5m32.16s', 'x-ratelimit-reset-tokens': '826ms', 'x-request-id': 'req_8089610febd84e108495b37d36132a3d', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b0a09ff223091-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 16:00:01,527 - openai._base_client - DEBUG - request_id: req_8089610febd84e108495b37d36132a3d
2025-10-05 16:00:01,527 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: intent_analysis | Model: gpt-4o-mini-2024-07-18 | Tokens: 3381 (prompt: 3180, completion: 201)
2025-10-05 16:00:01,527 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM Intent Analysis Result: {'intent': 'LOAN_CONSULT', 'confidence': 0.9, 'keywords': ['대출', '한도', '금리', '비교'], 'sub_intents': [], 'is_compound': False, 'decomposed_tasks': [], 'entities': {'loan_type': '주택담보대출', 'action_verbs': ['조회', '비교']}, 'reasoning': '1단계(구조): 대출 한도 조회와 금리 비교 요청. 2단계(유형): 대출 관련 정보 요청으로 LOAN_CONSULT. 3단계(복잡도): 저 - 단일 개념 확인. 4단계(처리): 대출 한도와 금리 정보 검색 필요. 5단계(검증): 단순 정보 요청이므로 LOAN_CONSULT로 분류.'}
2025-10-05 16:00:01,528 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-c7b6b81a-8f74-412b-bbf0-75494f73ea92', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 Agent 선택 전문가입니다.\n사용자의 요청에 가장 적합한 Agent/Team을 선택하는 것이 목표입니다.\n\n## 현재 상황\n\n**사용자 질문:** 대출 한도 조회하고 금리 비교해줘\n**분석된 의도:** 대출상담\n**추출된 키워드:** [\'대출\', \'한도\', \'금리\', \'비교\']\n\n## 사용 가능한 Agent/Team 정보\n\n{\'search_team\': {\'name\': \'search_team\', \'capabilities\': \'법률 검색, 부동산 시세 조회, 대출 상품 검색\', \'tools\': [\'legal_search\', \'market_data\', \'loan_data\'], \'use_cases\': [\'법률 상담\', \'시세 조회\', \'대출 정보\']}, \'analysis_team\': {\'name\': \'analysis_team\', \'capabilities\': \'데이터 분석, 리스크 평가, 인사이트 생성, 추천\', \'tools\': [\'data_analyzer\', \'risk_evaluator\'], \'use_cases\': [\'시장 분석\', \'리스크 평가\', \'투자 분석\']}, \'document_team\': {\'name\': \'document_team\', \'capabilities\': \'계약서 작성, 문서 생성, 문서 검토\', \'tools\': [\'document_generator\', \'contract_reviewer\'], \'use_cases\': [\'계약서 작성\', \'문서 검토\']}}\n\n## Agent 역할 및 상세 가이드\n\n### 1. search_team (검색 팀)\n- **주요 기능**: 정보 검색 및 데이터 수집\n- **전문 분야**:\n  * 법률 정보 검색 (전세법, 임대차보호법, 부동산 관련 법규)\n  * 부동산 시세 조회 (매매가, 전세가, 월세, 실거래가)\n  * 대출 상품 정보 검색 (금리, 한도, 조건)\n  * 지역 정보 및 인프라 조회\n- **도구**: legal_search, market_data, loan_data\n- **적합한 작업**: 정보 조회, 데이터 수집, 법률 확인, 시세 파악\n- **예시**:\n  * "전세금 5% 인상 가능한가요?"\n  * "강남구 아파트 전세 시세"\n  * "전세자금대출 한도 얼마?"\n\n### 2. analysis_team (분석 팀)\n- **주요 기능**: 데이터 분석 및 평가\n- **전문 분야**:\n  * 시장 동향 분석 (상승률, 하락률, 추세)\n  * 리스크 평가 (계약, 투자 위험도)\n  * 투자 수익률 계산 (ROI, 월세 수익률)\n  * 대출 한도 및 조건 분석 (LTV, DTI, DSR)\n  * 비교 분석 (지역별, 상품별)\n- **도구**: data_analyzer, risk_evaluator, calculator\n- **적합한 작업**: 데이터 분석, 리스크 평가, 계산, 비교, 예측\n- **의존성**: 보통 search_team의 데이터가 필요\n- **예시**:\n  * "이 지역 투자 가치 분석해줘"\n  * "계약 리스크 평가해줘"\n  * "대출 가능 금액 계산해줘"\n\n### 3. document_team (문서 팀)\n- **주요 기능**: 문서 생성 및 관리\n- **전문 분야**:\n  * 계약서 작성 (임대차, 매매, 전세)\n  * 문서 템플릿 관리\n  * 특약사항 생성\n  * 계약서 수정안 작성\n  * 법률 문서 검토\n- **도구**: document_generator, contract_template, contract_reviewer\n- **적합한 작업**: 문서 작성, 계약서 생성, 문서 수정, 검토\n- **예시**:\n  * "임대차계약서 작성해줘"\n  * "특약사항 추가해줘"\n  * "계약서 수정안 만들어줘"\n\n## Chain-of-Thought Agent 선택 프로세스\n\n다음 단계를 **순서대로** 따라 최적의 Agent 조합을 선택하세요:\n\n### 1단계: 질문 요구사항 파악\n- 단순 정보 조회인가? → search_team만 필요\n- 판단/평가가 필요한가? → search + analysis 필요\n- 해결책 제시가 필요한가? → search + analysis 필요\n- 문서 생성이 필요한가? → document_team 추가\n\n### 2단계: 작업 복잡도 판단\n- **단순** (검색만): "~이 뭐야?", "~알려줘" → search_team\n- **중간** (검색+판단): "~괜찮아?", "~적절해?" → search + analysis\n- **복잡** (종합 해결): 구체적 상황 + "어떻게 해야 해?" → search + analysis\n\n### 3단계: 의존성 분석\n- 독립적 작업: 단일 팀으로 처리 가능\n- 순차적 의존: 이전 결과 필요 → 여러 팀 순서대로\n- 병렬 가능: 동시 조회 가능 → coordination: "parallel"\n\n### 4단계: 최종 검증\n- 선택한 팀들로 질문에 완전히 답변 가능한가?\n- 불필요한 팀이 포함되지 않았는가?\n- 순서가 논리적인가? (데이터 흐름 고려)\n\n### 중요 원칙:\n- **법률 키워드만으로 판단하지 말 것**: "법적으로 어떻게 해야 해?" = 법률 검색 + 분석 필요\n- **상황 설명 + 해결책 요청** = 반드시 analysis_team 포함\n- **구체적 수치 비교** (3억→10억 같은) = analysis_team 필요\n\n## 의도별 Agent 매핑 가이드 (기본 가이드 - CoT로 조정 가능)\n\n| 의도 (Intent) | 기본 조합 | 상황별 조정 |\n|--------------|-----------|-------------|\n| LEGAL_CONSULT | ["search_team"] | 해결책 요청시 → + analysis_team |\n| MARKET_INQUIRY | ["search_team"] | 비교/평가시 → + analysis_team |\n| LOAN_CONSULT | ["search_team", "analysis_team"] | 계산 필수 |\n| CONTRACT_CREATION | ["document_team"] | 검토 후 작성 → search + document |\n| CONTRACT_REVIEW | ["search_team", "analysis_team"] | 법률 검토 + 리스크 분석 |\n| COMPREHENSIVE | ["search_team", "analysis_team"] | **항상 분석 포함** |\n| RISK_ANALYSIS | ["analysis_team"] | 법률 근거 필요시 → search + analysis |\n| UNCLEAR | ["search_team", "analysis_team"] | 포괄적 대응 |\n\n**중요**: 위 매핑은 **기본 가이드**일 뿐입니다.\n실제 질문의 내용(CoT 분석 결과)에 따라 조정하세요!\n\n## 복합 질문 처리 예시 (CoT 적용)\n\n### 예시 1: 순차적 처리\n질문: "강남구 시세 확인하고 투자 가치 분석해줘"\n**CoT 분석**:\n1. 요구사항: 시세 조회 + 투자 가치 평가\n2. 복잡도: 중간 (검색 + 분석)\n3. 의존성: 시세 데이터 → 투자 분석 (순차)\n4. 검증: search만으로는 "투자 가치 평가" 불가능\n\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "1단계: 시세 조회+투자 평가 필요. 2단계: 중간 복잡도. 3단계: 순차 의존. 4단계: search로 시세 수집 후 analysis로 투자 가치 평가 필요",\n    "coordination": "sequential"\n}\n```\n\n### 예시 2: 단순 정보 조회\n질문: "전세금 인상률 한도가 얼마야?"\n**CoT 분석**:\n1. 요구사항: 단순 사실 확인\n2. 복잡도: 낮음 (정보 확인형)\n3. 의존성: 없음\n4. 검증: search_team만으로 충분\n\n```json\n{\n    "selected_agents": ["search_team"],\n    "reasoning": "1단계: 단순 정보 조회. 2단계: 저복잡도. 3단계: 독립적. 4단계: 법률 검색만으로 답변 가능",\n    "coordination": "single"\n}\n```\n\n### 예시 3: 해결책 요청 (핵심 예시!)\n질문: "집주인이 전세금 3억을 10억으로 올려달래. 법적으로 어떻게 해야 해?"\n의도: COMPREHENSIVE\n**CoT 분석**:\n1. 요구사항: 상황 설명 + 해결책 요청\n2. 복잡도: 높음 (구체적 상황 + 수치 비교)\n3. 의존성: 법률 확인 → 상황 분석 → 해결책 제시\n4. 검증: "법적으로"만 보고 search만 선택하면 불충분! 해결책 제시 필요\n\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "1단계: 법률 + 상황 분석 + 해결책 필요. 2단계: 고복잡도(3억→10억 비정상). 3단계: 순차(법률 확인 후 타당성 분석). 4단계: \'어떻게 해야\' = 단순 법률 조회 아님, 분석 필수",\n    "coordination": "sequential",\n    "confidence": 0.95\n}\n```\n\n## 응답 형식 (JSON)\n\n```json\n{\n    "selected_agents": ["선택된 agent/team 목록"],\n    "reasoning": "선택 이유를 구체적으로 설명. 각 Agent의 역할과 처리 순서 포함",\n    "coordination": "single/sequential/parallel/pipeline",\n    "dependencies": {"agent2": ["agent1"]},\n    "estimated_time": 30,\n    "confidence": 0.9\n}\n```\n\n## 선택 가이드라인\n\n1. **최소 Agent 원칙**: 가능한 적은 수의 Agent로 처리\n2. **전문성 우선**: 해당 작업에 가장 전문적인 Agent 선택\n3. **효율성 고려**: 병렬 처리 가능한 경우 명시\n4. **의존성 관리**: 데이터 흐름을 고려한 순서 지정\n5. **폴백 전략**: 불확실한 경우 ["search_team", "analysis_team"] 조합\n\n## 주의사항\n\n- selected_agents는 반드시 배열 형태\n- Agent 이름은 정확히: "search_team", "analysis_team", "document_team"\n- 최소 1개, 최대 3개 선택\n- 순서는 실행 우선순위 (앞에 있을수록 먼저 실행)\n- reasoning은 상세하고 논리적으로 작성\n- coordination 필드로 실행 방식 명시\n- 복합 질문의 경우 의존성 관계 명확히 표시'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 16:00:01,529 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 16:00:01,530 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 16:00:01,530 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 16:00:01,530 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 16:00:01,530 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 16:00:01,530 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 16:00:05,428 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 07:00:05 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'3571'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'3591'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9961'), (b'x-ratelimit-remaining-tokens', b'197889'), (b'x-ratelimit-reset-requests', b'5m36.387s'), (b'x-ratelimit-reset-tokens', b'633ms'), (b'x-request-id', b'req_301d2f58f6ce4e6094f9b80c2538af23'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b0a2569e03091-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 16:00:05,430 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 16:00:05,431 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 16:00:05,431 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 16:00:05,432 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 16:00:05,432 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 16:00:05,432 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 07:00:05 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '3571', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '3591', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9961', 'x-ratelimit-remaining-tokens': '197889', 'x-ratelimit-reset-requests': '5m36.387s', 'x-ratelimit-reset-tokens': '633ms', 'x-request-id': 'req_301d2f58f6ce4e6094f9b80c2538af23', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b0a2569e03091-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 16:00:05,432 - openai._base_client - DEBUG - request_id: req_301d2f58f6ce4e6094f9b80c2538af23
2025-10-05 16:00:05,432 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: agent_selection | Model: gpt-4o-mini-2024-07-18 | Tokens: 2570 (prompt: 2360, completion: 210)
2025-10-05 16:00:05,432 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM agent selection reasoning: 1단계: 대출 한도 조회와 금리 비교가 필요하므로 대출 상품 정보 검색이 가능한 search_team과 대출 조건 분석 및 비교가 가능한 analysis_team이 필요합니다. 2단계: 중간 복잡도에 해당하며, 대출 한도와 금리를 비교하는 작업이 포함되어 있습니다. 3단계: search_team이 대출 상품 정보를 수집한 후, analysis_team이 이를 바탕으로 금리 비교 및 한도 분석을 수행해야 하므로 순차적 의존성이 있습니다. 4단계: 단순히 search_team만으로는 금리 비교와 한도 분석을 수행할 수 없으므로 analysis_team이 반드시 포함되어야 합니다.
2025-10-05 16:00:05,432 - app.service_agent.cognitive_agents.planning_agent - INFO - ✅ Primary LLM selected agents: ['search_team', 'analysis_team']
2025-10-05 16:00:05,433 - app.service_agent.cognitive_agents.planning_agent - INFO - Intent analyzed: 대출상담 (confidence: 0.90)
2025-10-05 16:00:05,433 - app.service_agent.cognitive_agents.query_decomposer - INFO - Decomposing query: 대출 한도 조회하고 금리 비교해줘...
2025-10-05 16:00:05,433 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-3452b8b4-e361-437a-afed-b3b33b8b3980', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 질문 분해 전문가입니다.\n복잡한 사용자 질문을 독립적으로 처리 가능한 작업 단위로 분해하는 것이 목표입니다.\n\n## Chain-of-Thought 분해 프로세스:\n\n### 1단계: 복합 질문 여부 판단\n- 단순 정보 조회만 필요한가? → is_compound: false\n- **다음 중 하나라도 해당하면 is_compound: true**:\n  * "그리고", "그 다음", "한 후" 같은 연결어로 여러 요청 연결\n  * 명시적으로 2개 이상의 작업 요청 (예: "시세 확인하고 대출 계산해줘")\n  * 상황 설명 + 해결책 요청 (예: "3억→10억 올려달래. 어떻게 해야 해?")\n  * 해결책을 위해 여러 단계 처리 필요 (검색 → 분석 → 제안)\n\n### 2단계: 필요 작업 식별\n- 정보 수집이 필요한가? → search 작업\n- 평가/판단이 필요한가? → analysis 작업\n- 문서 생성이 필요한가? → generation 작업\n- **해결책 요청**인가? → search + analysis (최소 2개)\n\n### 3단계: 작업 순서 결정\n- 독립적 작업: 병렬 가능\n- 이전 결과 필요: 순차 실행 (depends_on 설정)\n\n## 중요 원칙:\n1. 각 작업은 하나의 명확한 목표를 가져야 합니다\n2. 작업 간 의존성을 명확히 파악해야 합니다\n3. 병렬 처리 가능한 작업은 구분해야 합니다\n4. **주의**: "어떻게 해야", "방법 알려줘" 같은 해결책 요청은 복합 질문!\n\n## 작업 유형 (type):\n- search: 정보 검색 (법률, 시세, 대출 정보 등)\n- analysis: 데이터 분석 (리스크 평가, 시장 분석 등)\n- generation: 문서 생성 (계약서 작성 등)\n- review: 검토/평가 (계약서 검토, 조건 확인 등)\n- calculation: 계산/산출 (대출 한도, 세금 등)\n- comparison: 비교 분석 (여러 옵션 비교)\n\n## 담당 팀 (agent):\n- search_team: 법률, 시세, 대출 정보 검색\n- analysis_team: 데이터 분석, 리스크 평가, 계산\n- document_team: 문서 생성, 계약서 작성\n\n## 학습 예시:\n\n### 예시 1: 복합 질문 (순차적)\n질문: "강남구 아파트 시세 확인하고 대출 가능 금액 계산해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "강남구 아파트 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "대출 가능 금액 계산",\n            "type": "calculation",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "required_data": {"price": "task_0.result.price"},\n            "estimated_time": 15\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "시세 정보가 있어야 대출 금액 계산이 가능하므로 순차 실행"\n}\n```\n\n### 예시 2: 복합 질문 (병렬 가능)\n질문: "이 지역 전세 시세와 매매 시세 모두 알려주고 비교 분석해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "전세 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "매매 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "전세/매매 시세 비교 분석",\n            "type": "comparison",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0", "task_1"],\n            "required_data": {\n                "lease_price": "task_0.result",\n                "sale_price": "task_1.result"\n            },\n            "estimated_time": 25\n        }\n    ],\n    "execution_mode": "mixed",\n    "parallel_groups": [["task_0", "task_1"], ["task_2"]],\n    "reasoning": "시세 조회는 독립적이므로 병렬 처리, 비교는 두 결과 필요"\n}\n```\n\n### 예시 3: 복합 질문 (3단계 이상)\n질문: "이 계약서 검토해서 위험한 부분 찾고 수정안 만들어서 최종 계약서 작성해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "계약서 내용 전체 검토",\n            "type": "review",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 30\n        },\n        {\n            "description": "위험 요소 및 문제점 분석",\n            "type": "analysis",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "estimated_time": 25\n        },\n        {\n            "description": "수정안 제안 생성",\n            "type": "generation",\n            "agent": "document_team",\n            "priority": 3,\n            "depends_on": ["task_1"],\n            "estimated_time": 20\n        },\n        {\n            "description": "최종 계약서 작성",\n            "type": "generation",\n            "agent": "document_team",\n            "priority": 4,\n            "depends_on": ["task_2"],\n            "estimated_time": 30\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "각 단계가 이전 결과에 의존하므로 순차 실행 필요"\n}\n```\n\n### 예시 4: 단순 질문 (분해 불필요)\n질문: "전세금 인상률 상한이 얼마야?"\n분해:\n```json\n{\n    "is_compound": false,\n    "sub_tasks": [\n        {\n            "description": "전세금 인상률 상한 법률 정보 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 15\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "단일 정보 조회 요청으로 분해 불필요"\n}\n```\n\n### 예시 5: 조건부 실행\n질문: "이 물건 시세 확인하고 적정가면 대출 상담도 받고 싶어"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "물건 시세 조회 및 적정성 평가",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 25\n        },\n        {\n            "description": "대출 상담 정보 제공",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "optional": true,\n            "context": {"condition": "if_reasonable_price"},\n            "estimated_time": 20\n        }\n    ],\n    "execution_mode": "conditional",\n    "reasoning": "시세 확인 결과에 따라 대출 상담 진행 여부 결정"\n}\n```\n\n### 예시 6: 상황 설명 + 해결책 요청 (핵심 패턴!)\n질문: "집주인이 전세금 3억을 10억으로 올려달래. 법적으로 어떻게 해야 해?"\n**CoT 분석**:\n1. 질문 분석: 상황 설명 + 해결책 요청\n2. 연결어: 없지만, "어떻게 해야" = 해결책 요청\n3. 의존성: 법률 확인 → 상황 분석 → 대응 방안\n4. 복합 여부: **YES** (해결책을 위해 여러 단계 필요)\n\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "전세금 인상 한도 관련 법률 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "3억→10억 인상의 법적 타당성 및 적정성 분석",\n            "type": "analysis",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "required_data": {"legal_limit": "task_0.result", "current": 300000000, "requested": 1000000000},\n            "estimated_time": 25\n        },\n        {\n            "description": "구체적 대응 방안 및 해결책 제시",\n            "type": "analysis",\n            "agent": "analysis_team",\n            "priority": 3,\n            "depends_on": ["task_1"],\n            "estimated_time": 20\n        }\n    ],\n    "execution_mode": "sequential",\n    "confidence": 0.95,\n    "reasoning": "상황 설명+해결책 요청 패턴. \'어떻게 해야\'는 단순 정보 조회가 아닌 종합 해결책 필요. 법률 조회 → 상황 분석 → 해결책 제시 3단계 순차 처리"\n}\n```\n\n## Chain-of-Thought 프로세스:\n\n1. **질문 분석**: 어떤 정보나 작업을 요구하는가?\n2. **연결어 확인**: "그리고", "또한", "해서", "한 후" 등이 있는가?\n3. **의존성 파악**: 어떤 작업이 다른 작업의 결과를 필요로 하는가?\n4. **병렬성 판단**: 독립적으로 실행 가능한 작업이 있는가?\n5. **최적화**: 불필요한 분해는 없는가?\n\n## 응답 형식 (JSON):\n\n{\n    "is_compound": true/false,\n    "sub_tasks": [\n        {\n            "description": "작업 설명",\n            "type": "작업 유형",\n            "agent": "담당 팀",\n            "priority": 우선순위 (1이 가장 높음),\n            "depends_on": ["선행 작업 ID 리스트"],\n            "required_data": {"필요한 데이터 매핑"},\n            "estimated_time": 예상 소요 시간(초),\n            "optional": true/false,\n            "context": {"추가 컨텍스트"}\n        }\n    ],\n    "execution_mode": "sequential/parallel/mixed/conditional",\n    "parallel_groups": [["병렬 실행 가능한 작업 ID 그룹"]],\n    "confidence": 0.0-1.0,\n    "reasoning": "분해 결정의 이유와 근거"\n}\n\n## 분해 가이드라인:\n\n1. **분해가 필요한 경우**:\n   - 여러 종류의 정보를 요청하는 경우\n   - 순차적 처리가 필요한 경우 (A의 결과로 B 수행)\n   - 서로 다른 팀의 전문성이 필요한 경우\n\n2. **분해가 불필요한 경우**:\n   - 단일 정보 조회\n   - 단순한 질문-답변\n   - 하나의 팀에서 완전히 처리 가능한 경우\n\n3. **병렬 처리 기준**:\n   - 서로 독립적인 정보 조회\n   - 의존성이 없는 분석 작업\n   - 동시에 진행해도 충돌하지 않는 작업\n\n4. **우선순위 설정**:\n   - 의존성이 없는 작업: priority 1\n   - 1차 의존 작업: priority 2\n   - 2차 의존 작업: priority 3\n   - 이런 식으로 증가\n\n현재 의도: 대출상담\n추출된 엔티티: {\'loan_type\': \'주택담보대출\', \'action_verbs\': [\'조회\', \'비교\']}\n\n분석할 질문: 대출 한도 조회하고 금리 비교해줘'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 16:00:05,433 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 16:00:05,434 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 16:00:05,434 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 16:00:05,434 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 16:00:05,434 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 16:00:05,434 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 16:00:07,784 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 07:00:07 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'2021'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'2058'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9960'), (b'x-ratelimit-remaining-tokens', b'197321'), (b'x-ratelimit-reset-requests', b'5m41.139s'), (b'x-ratelimit-reset-tokens', b'803ms'), (b'x-request-id', b'req_9f709382e4004dcba0de963be56f686b'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b0a3ddc4e3091-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 16:00:07,784 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 16:00:07,784 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 16:00:07,785 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 16:00:07,785 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 16:00:07,785 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 16:00:07,785 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 07:00:07 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '2021', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '2058', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9960', 'x-ratelimit-remaining-tokens': '197321', 'x-ratelimit-reset-requests': '5m41.139s', 'x-ratelimit-reset-tokens': '803ms', 'x-request-id': 'req_9f709382e4004dcba0de963be56f686b', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b0a3ddc4e3091-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 16:00:07,785 - openai._base_client - DEBUG - request_id: req_9f709382e4004dcba0de963be56f686b
2025-10-05 16:00:07,785 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: query_decomposition | Model: gpt-4o-mini-2024-07-18 | Tokens: 2882 (prompt: 2713, completion: 169)
2025-10-05 16:00:07,785 - app.service_agent.cognitive_agents.query_decomposer - INFO - Successfully decomposed into 2 tasks
2025-10-05 16:00:07,785 - app.service_agent.cognitive_agents.planning_agent - INFO - Query decomposed into 2 tasks
2025-10-05 16:00:07,785 - app.service_agent.cognitive_agents.planning_agent - WARNING - Plan validation errors: ["Agent 'search_team' not found in registry", "Agent 'search_team' not found in registry"]
2025-10-05 16:00:07,785 - app.service_agent.cognitive_agents.planning_agent - INFO - Optimizing execution plan
2025-10-05 16:00:07,786 - app.service_agent.cognitive_agents.planning_agent - INFO - Comprehensive plan created: Intent: 대출상담 (confidence: 0.90) | Strategy: sequential | Agents: search_team, search_team | Estimated time: 20.0s | Parallel groups: [['task_0', 'task_1']]
2025-10-05 16:00:07,786 - __main__ - INFO -   전략: sequential
2025-10-05 16:00:07,786 - __main__ - INFO -   단계 수: 2
2025-10-05 16:00:07,786 - __main__ - INFO - 
✓ 테스트 성공 (소요시간: 21.30초)
2025-10-05 16:00:07,786 - __main__ - INFO - 
================================================================================
2025-10-05 16:00:07,786 - __main__ - INFO - [27] 복합 질문 테스트: D007
2025-10-05 16:00:07,786 - __main__ - INFO - 질문: 마포구 아파트 시세 알려주고 계약서 작성해줘
2025-10-05 16:00:07,786 - __main__ - INFO - ================================================================================
2025-10-05 16:00:07,786 - __main__ - INFO - 
[Step 1] Intent 분석...
2025-10-05 16:00:07,786 - app.service_agent.cognitive_agents.planning_agent - INFO - Analyzing intent for query: 마포구 아파트 시세 알려주고 계약서 작성해줘...
2025-10-05 16:00:07,786 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-a6c3db79-b9b4-43b3-a362-ef818f649987', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 의도 분석 전문가입니다.\n사용자의 질문을 정확히 이해하고, 어떤 종류의 도움이 필요한지 분류해야 합니다.\n\n## Chain-of-Thought 분석 프로세스\n\n질문을 분석할 때 다음 단계를 **순서대로** 따르세요:\n\n### 1단계: 질문 구조 파악\n- 단순 정보 요청인가? (예: "~이 뭐야?", "~알려줘")\n- 상황 설명이 포함되어 있는가? (배경, 현재 상태)\n- 구체적 수치나 데이터가 있는가? (금액, 비율, 기간 등)\n- 문제 해결을 요구하는가? (예: "어떻게 해야 해?", "방법 알려줘")\n\n### 2단계: 요청 유형 판단\n- **정보 확인형**: 사실, 개념, 규정 확인 → 검색만으로 충분\n- **평가/판단형**: "괜찮아?", "적절해?", "문제있어?" → 검색 + 분석 필요\n- **해결책 요청형**: "어떻게?", "방법?", "대처?" → 검색 + 분석 + 제안 필요\n- **비교/선택형**: "A vs B", "어느게 나아?" → 검색 + 분석(비교) 필요\n\n### 3단계: 복잡도 평가\n- **저**: 단일 개념/사실 확인 (예: "전세금 인상률 한도?")\n- **중**: 특정 상황 + 판단 (예: "3억을 5억으로 올려달래. 가능해?")\n- **고**: 복잡한 상황 + 여러 조건 + 해결책 (예: "10년 거주, 3억→10억 요구. 어떻게 해야 해?")\n\n### 4단계: 필요한 처리 결정\n- **검색만**: 정보 확인형 + 저복잡도\n- **검색+분석**: 평가/판단형 OR 중복잡도 OR 수치 비교 포함\n- **종합처리**: 해결책 요청형 OR 고복잡도 OR 여러 조건 동시 고려\n\n### 5단계: 최종 검증\n- 선택한 의도로 사용자 질문에 완전히 답변 가능한가?\n- 단순 정보 제공으로 끝나는가, 아니면 추가 분석/판단이 필요한가?\n- 상황 설명이 있으면서 "해결", "방법", "어떻게" 등이 있으면 → COMPREHENSIVE 고려\n\n## 중요: 복합 질문 처리\n복합적인 질문(여러 의도가 섞인 질문)의 경우, 가장 핵심적인 의도를 파악하되,\nsub_intents 필드에 부가적인 의도들도 함께 기록해주세요.\n\n**특히 주의**:\n- 법률 키워드가 있어도, "해결방법", "어떻게 해야" 같은 표현이 있으면 단순 LEGAL_CONSULT가 아닐 수 있음\n- 구체적 상황(금액, 기간 등) + 해결책 요구 = COMPREHENSIVE 또는 복합 의도로 분류\n\n## 분류 카테고리 설명:\n\n1. **LEGAL_CONSULT (법률상담)**\n   - 설명: 부동산 관련 법률, 권리, 의무에 대한 질문\n   - 예시:\n     * 단순: "전세금 5% 인상이 가능한가요?", "임대차계약 갱신 거부할 수 있나요?"\n     * 복합: "전세금 인상 가능한지 확인하고 법적 근거도 알려주세요"\n   - 키워드: 법, 전세, 임대, 보증금, 계약, 권리, 의무, 갱신, 임차인, 임대인, 법률, 규정, 조항\n   - 필요한 처리: 법률 데이터베이스 검색, 관련 법조항 찾기\n\n2. **MARKET_INQUIRY (시세조회)**\n   - 설명: 부동산 시장 가격, 시세, 거래 동향에 대한 질문\n   - 예시:\n     * 단순: "강남구 아파트 전세 시세 알려주세요", "서초동 매매가 얼마나 올랐나요?"\n     * 복합: "강남구 시세 확인하고 대출 가능 금액도 계산해줘"\n   - 키워드: 시세, 가격, 매매가, 전세가, 월세, 시장, 동향, 평균, 지역명, 상승률, 하락률\n   - 필요한 처리: 부동산 시세 데이터 조회, 지역별 가격 분석\n\n3. **LOAN_CONSULT (대출상담)**\n   - 설명: 주택담보대출, 전세자금대출 등 금융 관련 질문\n   - 예시:\n     * 단순: "전세자금대출 한도가 얼마인가요?", "LTV가 뭔가요?"\n     * 복합: "대출 한도 확인하고 금리 비교도 해주세요"\n   - 키워드: 대출, 금리, 한도, 조건, 상환, LTV, DTI, DSR, 담보, 금융, 은행\n   - 필요한 처리: 대출 상품 조회, 금리 정보 검색, 한도 계산\n\n4. **CONTRACT_CREATION (계약서작성)**\n   - 설명: 새로운 계약서나 문서를 작성해달라는 요청\n   - 예시:\n     * 단순: "임대차계약서 작성해주세요", "전세계약서 초안 만들어주세요"\n     * 복합: "계약서 작성하고 주의사항도 검토해주세요"\n   - 키워드: 작성, 만들, 생성, 초안, 계약서, 문서, 양식\n   - 필요한 처리: 문서 생성 에이전트 호출, 템플릿 기반 작성\n\n5. **CONTRACT_REVIEW (계약서검토)**\n   - 설명: 기존 계약서나 문서를 검토해달라는 요청\n   - 예시:\n     * 단순: "이 계약서 검토해주세요", "특약사항 문제없나요?"\n     * 복합: "계약서 검토하고 수정사항도 제안해주세요"\n   - 키워드: 검토, 확인, 점검, 리뷰, 분석해, 살펴봐, 체크\n   - 필요한 처리: 문서 분석, 위험 요소 식별, 개선사항 제안\n\n6. **COMPREHENSIVE (종합분석)**\n   - 설명: 여러 측면을 종합적으로 분석해달라는 요청, 또는 복잡한 상황에 대한 해결책 요청\n   - 예시:\n     * 단순: "이 물건 전체적으로 분석해주세요"\n     * 복합: "시세, 법률, 대출 모두 검토해서 종합 의견 주세요"\n     * 해결형: "10년 거주했는데 전세금 3억을 10억으로 올려달래. 어떻게 해야 해?"\n     * 상황+해결: "집주인이 계약 갱신 거부했어. 법적으로 어떻게 대응해야 할까?"\n   - 키워드: 종합, 전체, 모든, 전반적, 종합적, 평가, 분석, 어떻게, 방법, 해결, 대처\n   - 패턴: 구체적 상황 설명 + "어떻게/방법/해결" 요청\n   - 필요한 처리: 다중 데이터 소스 통합 분석, 상황 평가, 해결책 제시\n\n7. **RISK_ANALYSIS (리스크분석)**\n   - 설명: 위험 요소나 주의사항에 대한 질문\n   - 예시:\n     * 단순: "이 계약 위험한가요?", "주의할 점 알려주세요"\n     * 복합: "리스크 분석하고 대안도 제시해주세요"\n   - 키워드: 위험, 리스크, 주의, 문제점, 조심, 걱정, 우려\n   - 필요한 처리: 위험 요소 분석, 주의사항 추출\n\n8. **UNCLEAR (불분명)**\n   - 설명: 의도를 명확히 파악하기 어려운 질문\n   - 예시: "이거 좀 봐주세요", "어떻게 해야 할까요?", "도와주세요"\n   - 처리: 추가 질문으로 의도 명확화 필요\n\n9. **IRRELEVANT (무관)**\n   - 설명: 부동산과 전혀 관련 없는 질문\n   - 예시: "날씨 어때?", "저녁 뭐 먹지?", "주식 추천해줘"\n   - 처리: 부동산 관련 질문을 유도\n\n## 복합 질문 예시와 분석 (CoT 적용):\n\n### 예시 1: "강남구 아파트 시세 알려주고 전세자금대출 가능한지도 확인해줘"\n**CoT 분석**:\n1. 구조: 두 개의 요청 ("시세" + "대출")\n2. 유형: 정보 확인형 (둘 다)\n3. 복잡도: 중 (두 가지 독립적 조회)\n4. 필요 처리: 검색 + 계산/분석\n\n**결론**:\n- 주 의도: MARKET_INQUIRY (시세 조회가 먼저 필요)\n- 부가 의도: LOAN_CONSULT (대출 확인)\n- 분해: ["강남구 아파트 시세 조회", "전세자금대출 가능 여부 확인"]\n\n### 예시 2: "이 계약서 검토해서 위험한 부분 있는지 알려주고 수정 제안도 해줘"\n**CoT 분석**:\n1. 구조: 검토 + 위험 평가 + 수정안\n2. 유형: 평가/판단형 + 해결책 요청형\n3. 복잡도: 고 (3단계 처리)\n4. 필요 처리: 검토 + 분석 + 문서 생성\n\n**결론**:\n- 주 의도: CONTRACT_REVIEW (계약서 검토)\n- 부가 의도: RISK_ANALYSIS (위험 분석)\n- 분해: ["계약서 전체 검토", "위험 요소 식별", "수정사항 제안"]\n\n### 예시 3: "집주인이 짜증나, 10년 살았는데 전세금 3억을 10억으로 올려달래. 법적으로 해결방법 알려줘"\n**CoT 분석**:\n1. 구조: 상황 설명 (10년 거주, 3억→10억) + 해결책 요청\n2. 유형: 해결책 요청형 (단순 정보 X)\n3. 복잡도: 고 (구체적 상황 + 수치 비교 + 법률 + 대응방안)\n4. 필요 처리: 법률 검색 + 상황 분석 + 해결책 제시\n\n**결론**:\n- 주 의도: COMPREHENSIVE (복잡한 상황에 대한 종합 해결)\n- 부가 의도: LEGAL_CONSULT, RISK_ANALYSIS\n- 분해: ["전세금 인상 한도 법률 조회", "3억→10억 인상의 타당성 분석", "구체적 대응 방안 제시"]\n- **이유**: "법적으로"라는 키워드가 있지만, 단순 법률 확인이 아니라 구체적 상황에 대한 해결책을 요구하므로 COMPREHENSIVE\n\n### 예시 4: "전세금 인상률 상한이 얼마야?"\n**CoT 분석**:\n1. 구조: 단순 사실 확인\n2. 유형: 정보 확인형\n3. 복잡도: 저 (단일 개념)\n4. 필요 처리: 검색만\n\n**결론**:\n- 주 의도: LEGAL_CONSULT (법률 정보 조회)\n- 부가 의도: 없음\n- 분해: 필요 없음\n\n## 응답 형식 (JSON 형식으로 응답):\n\n```json\n{\n    "intent": "LEGAL_CONSULT",\n    "confidence": 0.9,\n    "keywords": ["전세금", "인상", "제한"],\n    "sub_intents": [],\n    "is_compound": false,\n    "decomposed_tasks": [],\n    "entities": {\n        "location": "강남구",\n        "price": "5억",\n        "contract_type": "전세",\n        "date": "2024년",\n        "area": "84㎡",\n        "action_verbs": ["확인", "검토"]\n    },\n    "reasoning": "전세금 인상에 대한 법률 질문이므로 LEGAL_CONSULT로 분류"\n}\n```\n\n응답 규칙:\n- intent: 위 9개 카테고리 중 하나 (대문자_언더스코어 형식)\n- confidence: 0.0~1.0 (0.8 이상이면 매우 확실, 0.5 미만이면 불확실)\n- keywords: 추출된 주요 키워드 목록\n- sub_intents: 복합 질문일 경우 부가적인 의도들\n- is_compound: 복합 질문 여부 (true/false)\n- decomposed_tasks: 복합 질문을 분해한 개별 작업들\n- entities: 추출된 엔티티 정보\n- reasoning: **반드시 CoT 5단계를 거쳐 분석한 과정을 포함** (구조 파악 → 유형 판단 → 복잡도 평가 → 필요 처리 → 최종 검증)\n\n## reasoning 작성 예시:\n"1단계(구조): 상황 설명(10년 거주, 3억→10억) + 해결책 요청 포함.\n2단계(유형): 해결책 요청형 - 단순 정보가 아닌 대응방안 필요.\n3단계(복잡도): 고 - 구체적 수치 비교와 복잡한 상황.\n4단계(처리): 법률 검색 + 상황 분석 + 해결책 제시 필요.\n5단계(검증): LEGAL_CONSULT만으로는 불충분, 종합적 분석 필요 → COMPREHENSIVE 선택"\n\n## 판단 가이드:\n- 여러 의도가 섞여있다면, 가장 주된 의도를 intent에, 나머지를 sub_intents에 기록\n- "그리고", "또한", "함께", "같이" 등의 연결어가 있으면 복합 질문일 가능성 높음\n- 법률 관련 키워드가 있으면 LEGAL_CONSULT 우선\n- 가격/시세 언급이 명확하면 MARKET_INQUIRY\n- 계약서라는 단어와 함께 "작성/만들기"가 있으면 CONTRACT_CREATION\n- 계약서라는 단어와 함께 "검토/확인"이 있으면 CONTRACT_REVIEW\n- 불확실하면 confidence를 낮게 설정하고 UNCLEAR 선택\n- 복합 질문은 is_compound를 true로 설정하고 개별 작업으로 분해\n\n분석할 질문: 마포구 아파트 시세 알려주고 계약서 작성해줘'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 16:00:07,788 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 16:00:07,788 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 16:00:07,788 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 16:00:07,788 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 16:00:07,788 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 16:00:07,788 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 16:00:13,518 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 07:00:13 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'5499'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'5526'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9959'), (b'x-ratelimit-remaining-tokens', b'197240'), (b'x-ratelimit-reset-requests', b'5m47.419s'), (b'x-ratelimit-reset-tokens', b'828ms'), (b'x-request-id', b'req_a3b8dd0f120245d1a459a22d166f2f03'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b0a4c8b753091-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 16:00:13,518 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 16:00:13,519 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 16:00:13,519 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 16:00:13,519 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 16:00:13,519 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 16:00:13,519 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 07:00:13 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '5499', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '5526', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9959', 'x-ratelimit-remaining-tokens': '197240', 'x-ratelimit-reset-requests': '5m47.419s', 'x-ratelimit-reset-tokens': '828ms', 'x-request-id': 'req_a3b8dd0f120245d1a459a22d166f2f03', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b0a4c8b753091-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 16:00:13,519 - openai._base_client - DEBUG - request_id: req_a3b8dd0f120245d1a459a22d166f2f03
2025-10-05 16:00:13,520 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: intent_analysis | Model: gpt-4o-mini-2024-07-18 | Tokens: 3451 (prompt: 3184, completion: 267)
2025-10-05 16:00:13,520 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM Intent Analysis Result: {'intent': 'COMPREHENSIVE', 'confidence': 0.85, 'keywords': ['마포구', '아파트', '시세', '계약서', '작성'], 'sub_intents': ['MARKET_INQUIRY', 'CONTRACT_CREATION'], 'is_compound': True, 'decomposed_tasks': ['마포구 아파트 시세 조회', '임대차계약서 작성'], 'entities': {'location': '마포구', 'contract_type': '아파트', 'action_verbs': ['알려주고', '작성해줘']}, 'reasoning': '1단계(구조): 두 개의 요청(시세 조회 + 계약서 작성) 포함. 2단계(유형): 정보 확인형(시세) + 계약서 작성 요청(해결책 요청형). 3단계(복잡도): 중 - 두 가지 독립적 조회가 필요. 4단계(처리): 시세 조회와 계약서 작성을 위한 별도의 처리 필요. 5단계(검증): 두 가지 요청이 있으므로 COMPREHENSIVE로 분류.'}
2025-10-05 16:00:13,521 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-61ba2bd9-b94d-467d-bc44-51a125397e11', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 Agent 선택 전문가입니다.\n사용자의 요청에 가장 적합한 Agent/Team을 선택하는 것이 목표입니다.\n\n## 현재 상황\n\n**사용자 질문:** 마포구 아파트 시세 알려주고 계약서 작성해줘\n**분석된 의도:** 종합분석\n**추출된 키워드:** [\'마포구\', \'아파트\', \'시세\', \'계약서\', \'작성\']\n\n## 사용 가능한 Agent/Team 정보\n\n{\'search_team\': {\'name\': \'search_team\', \'capabilities\': \'법률 검색, 부동산 시세 조회, 대출 상품 검색\', \'tools\': [\'legal_search\', \'market_data\', \'loan_data\'], \'use_cases\': [\'법률 상담\', \'시세 조회\', \'대출 정보\']}, \'analysis_team\': {\'name\': \'analysis_team\', \'capabilities\': \'데이터 분석, 리스크 평가, 인사이트 생성, 추천\', \'tools\': [\'data_analyzer\', \'risk_evaluator\'], \'use_cases\': [\'시장 분석\', \'리스크 평가\', \'투자 분석\']}, \'document_team\': {\'name\': \'document_team\', \'capabilities\': \'계약서 작성, 문서 생성, 문서 검토\', \'tools\': [\'document_generator\', \'contract_reviewer\'], \'use_cases\': [\'계약서 작성\', \'문서 검토\']}}\n\n## Agent 역할 및 상세 가이드\n\n### 1. search_team (검색 팀)\n- **주요 기능**: 정보 검색 및 데이터 수집\n- **전문 분야**:\n  * 법률 정보 검색 (전세법, 임대차보호법, 부동산 관련 법규)\n  * 부동산 시세 조회 (매매가, 전세가, 월세, 실거래가)\n  * 대출 상품 정보 검색 (금리, 한도, 조건)\n  * 지역 정보 및 인프라 조회\n- **도구**: legal_search, market_data, loan_data\n- **적합한 작업**: 정보 조회, 데이터 수집, 법률 확인, 시세 파악\n- **예시**:\n  * "전세금 5% 인상 가능한가요?"\n  * "강남구 아파트 전세 시세"\n  * "전세자금대출 한도 얼마?"\n\n### 2. analysis_team (분석 팀)\n- **주요 기능**: 데이터 분석 및 평가\n- **전문 분야**:\n  * 시장 동향 분석 (상승률, 하락률, 추세)\n  * 리스크 평가 (계약, 투자 위험도)\n  * 투자 수익률 계산 (ROI, 월세 수익률)\n  * 대출 한도 및 조건 분석 (LTV, DTI, DSR)\n  * 비교 분석 (지역별, 상품별)\n- **도구**: data_analyzer, risk_evaluator, calculator\n- **적합한 작업**: 데이터 분석, 리스크 평가, 계산, 비교, 예측\n- **의존성**: 보통 search_team의 데이터가 필요\n- **예시**:\n  * "이 지역 투자 가치 분석해줘"\n  * "계약 리스크 평가해줘"\n  * "대출 가능 금액 계산해줘"\n\n### 3. document_team (문서 팀)\n- **주요 기능**: 문서 생성 및 관리\n- **전문 분야**:\n  * 계약서 작성 (임대차, 매매, 전세)\n  * 문서 템플릿 관리\n  * 특약사항 생성\n  * 계약서 수정안 작성\n  * 법률 문서 검토\n- **도구**: document_generator, contract_template, contract_reviewer\n- **적합한 작업**: 문서 작성, 계약서 생성, 문서 수정, 검토\n- **예시**:\n  * "임대차계약서 작성해줘"\n  * "특약사항 추가해줘"\n  * "계약서 수정안 만들어줘"\n\n## Chain-of-Thought Agent 선택 프로세스\n\n다음 단계를 **순서대로** 따라 최적의 Agent 조합을 선택하세요:\n\n### 1단계: 질문 요구사항 파악\n- 단순 정보 조회인가? → search_team만 필요\n- 판단/평가가 필요한가? → search + analysis 필요\n- 해결책 제시가 필요한가? → search + analysis 필요\n- 문서 생성이 필요한가? → document_team 추가\n\n### 2단계: 작업 복잡도 판단\n- **단순** (검색만): "~이 뭐야?", "~알려줘" → search_team\n- **중간** (검색+판단): "~괜찮아?", "~적절해?" → search + analysis\n- **복잡** (종합 해결): 구체적 상황 + "어떻게 해야 해?" → search + analysis\n\n### 3단계: 의존성 분석\n- 독립적 작업: 단일 팀으로 처리 가능\n- 순차적 의존: 이전 결과 필요 → 여러 팀 순서대로\n- 병렬 가능: 동시 조회 가능 → coordination: "parallel"\n\n### 4단계: 최종 검증\n- 선택한 팀들로 질문에 완전히 답변 가능한가?\n- 불필요한 팀이 포함되지 않았는가?\n- 순서가 논리적인가? (데이터 흐름 고려)\n\n### 중요 원칙:\n- **법률 키워드만으로 판단하지 말 것**: "법적으로 어떻게 해야 해?" = 법률 검색 + 분석 필요\n- **상황 설명 + 해결책 요청** = 반드시 analysis_team 포함\n- **구체적 수치 비교** (3억→10억 같은) = analysis_team 필요\n\n## 의도별 Agent 매핑 가이드 (기본 가이드 - CoT로 조정 가능)\n\n| 의도 (Intent) | 기본 조합 | 상황별 조정 |\n|--------------|-----------|-------------|\n| LEGAL_CONSULT | ["search_team"] | 해결책 요청시 → + analysis_team |\n| MARKET_INQUIRY | ["search_team"] | 비교/평가시 → + analysis_team |\n| LOAN_CONSULT | ["search_team", "analysis_team"] | 계산 필수 |\n| CONTRACT_CREATION | ["document_team"] | 검토 후 작성 → search + document |\n| CONTRACT_REVIEW | ["search_team", "analysis_team"] | 법률 검토 + 리스크 분석 |\n| COMPREHENSIVE | ["search_team", "analysis_team"] | **항상 분석 포함** |\n| RISK_ANALYSIS | ["analysis_team"] | 법률 근거 필요시 → search + analysis |\n| UNCLEAR | ["search_team", "analysis_team"] | 포괄적 대응 |\n\n**중요**: 위 매핑은 **기본 가이드**일 뿐입니다.\n실제 질문의 내용(CoT 분석 결과)에 따라 조정하세요!\n\n## 복합 질문 처리 예시 (CoT 적용)\n\n### 예시 1: 순차적 처리\n질문: "강남구 시세 확인하고 투자 가치 분석해줘"\n**CoT 분석**:\n1. 요구사항: 시세 조회 + 투자 가치 평가\n2. 복잡도: 중간 (검색 + 분석)\n3. 의존성: 시세 데이터 → 투자 분석 (순차)\n4. 검증: search만으로는 "투자 가치 평가" 불가능\n\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "1단계: 시세 조회+투자 평가 필요. 2단계: 중간 복잡도. 3단계: 순차 의존. 4단계: search로 시세 수집 후 analysis로 투자 가치 평가 필요",\n    "coordination": "sequential"\n}\n```\n\n### 예시 2: 단순 정보 조회\n질문: "전세금 인상률 한도가 얼마야?"\n**CoT 분석**:\n1. 요구사항: 단순 사실 확인\n2. 복잡도: 낮음 (정보 확인형)\n3. 의존성: 없음\n4. 검증: search_team만으로 충분\n\n```json\n{\n    "selected_agents": ["search_team"],\n    "reasoning": "1단계: 단순 정보 조회. 2단계: 저복잡도. 3단계: 독립적. 4단계: 법률 검색만으로 답변 가능",\n    "coordination": "single"\n}\n```\n\n### 예시 3: 해결책 요청 (핵심 예시!)\n질문: "집주인이 전세금 3억을 10억으로 올려달래. 법적으로 어떻게 해야 해?"\n의도: COMPREHENSIVE\n**CoT 분석**:\n1. 요구사항: 상황 설명 + 해결책 요청\n2. 복잡도: 높음 (구체적 상황 + 수치 비교)\n3. 의존성: 법률 확인 → 상황 분석 → 해결책 제시\n4. 검증: "법적으로"만 보고 search만 선택하면 불충분! 해결책 제시 필요\n\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "1단계: 법률 + 상황 분석 + 해결책 필요. 2단계: 고복잡도(3억→10억 비정상). 3단계: 순차(법률 확인 후 타당성 분석). 4단계: \'어떻게 해야\' = 단순 법률 조회 아님, 분석 필수",\n    "coordination": "sequential",\n    "confidence": 0.95\n}\n```\n\n## 응답 형식 (JSON)\n\n```json\n{\n    "selected_agents": ["선택된 agent/team 목록"],\n    "reasoning": "선택 이유를 구체적으로 설명. 각 Agent의 역할과 처리 순서 포함",\n    "coordination": "single/sequential/parallel/pipeline",\n    "dependencies": {"agent2": ["agent1"]},\n    "estimated_time": 30,\n    "confidence": 0.9\n}\n```\n\n## 선택 가이드라인\n\n1. **최소 Agent 원칙**: 가능한 적은 수의 Agent로 처리\n2. **전문성 우선**: 해당 작업에 가장 전문적인 Agent 선택\n3. **효율성 고려**: 병렬 처리 가능한 경우 명시\n4. **의존성 관리**: 데이터 흐름을 고려한 순서 지정\n5. **폴백 전략**: 불확실한 경우 ["search_team", "analysis_team"] 조합\n\n## 주의사항\n\n- selected_agents는 반드시 배열 형태\n- Agent 이름은 정확히: "search_team", "analysis_team", "document_team"\n- 최소 1개, 최대 3개 선택\n- 순서는 실행 우선순위 (앞에 있을수록 먼저 실행)\n- reasoning은 상세하고 논리적으로 작성\n- coordination 필드로 실행 방식 명시\n- 복합 질문의 경우 의존성 관계 명확히 표시'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 16:00:13,522 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 16:00:13,522 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 16:00:13,522 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 16:00:13,522 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 16:00:13,523 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 16:00:13,523 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 16:00:16,896 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 07:00:16 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'3061'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'3091'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9959'), (b'x-ratelimit-remaining-tokens', b'197881'), (b'x-ratelimit-reset-requests', b'5m50.31s'), (b'x-ratelimit-reset-tokens', b'635ms'), (b'x-request-id', b'req_8039571460b445b9be20e223eb407586'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b0a70595b3091-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 16:00:16,896 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 16:00:16,896 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 16:00:16,896 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 16:00:16,896 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 16:00:16,896 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 16:00:16,896 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 07:00:16 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '3061', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '3091', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9959', 'x-ratelimit-remaining-tokens': '197881', 'x-ratelimit-reset-requests': '5m50.31s', 'x-ratelimit-reset-tokens': '635ms', 'x-request-id': 'req_8039571460b445b9be20e223eb407586', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b0a70595b3091-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 16:00:16,896 - openai._base_client - DEBUG - request_id: req_8039571460b445b9be20e223eb407586
2025-10-05 16:00:16,896 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: agent_selection | Model: gpt-4o-mini-2024-07-18 | Tokens: 2532 (prompt: 2369, completion: 163)
2025-10-05 16:00:16,896 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM agent selection reasoning: 1단계: 마포구 아파트 시세 조회와 계약서 작성이 필요. 2단계: 시세 조회는 search_team이 담당하고, 계약서 작성은 document_team이 담당해야 함. 3단계: 시세 데이터를 먼저 수집한 후, 이를 바탕으로 계약서를 작성해야 하므로 순차적 의존성이 있음. 4단계: search_team이 시세 정보를 제공한 후, document_team이 계약서를 작성하는 구조로 진행.
2025-10-05 16:00:16,896 - app.service_agent.cognitive_agents.planning_agent - INFO - ✅ Primary LLM selected agents: ['search_team', 'document_team']
2025-10-05 16:00:16,896 - __main__ - INFO -   의도: 종합분석
2025-10-05 16:00:16,896 - __main__ - INFO -   신뢰도: 0.85
2025-10-05 16:00:16,896 - __main__ - INFO -   추천 Agent: ['search_team', 'document_team']
2025-10-05 16:00:16,896 - __main__ - INFO - 
[Step 2] Query Decomposition...
2025-10-05 16:00:16,898 - app.service_agent.cognitive_agents.query_decomposer - INFO - Decomposing query: 마포구 아파트 시세 알려주고 계약서 작성해줘...
2025-10-05 16:00:16,898 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-aa6b9cf8-960b-4473-a983-17dfa4dbb4ee', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 질문 분해 전문가입니다.\n복잡한 사용자 질문을 독립적으로 처리 가능한 작업 단위로 분해하는 것이 목표입니다.\n\n## Chain-of-Thought 분해 프로세스:\n\n### 1단계: 복합 질문 여부 판단\n- 단순 정보 조회만 필요한가? → is_compound: false\n- **다음 중 하나라도 해당하면 is_compound: true**:\n  * "그리고", "그 다음", "한 후" 같은 연결어로 여러 요청 연결\n  * 명시적으로 2개 이상의 작업 요청 (예: "시세 확인하고 대출 계산해줘")\n  * 상황 설명 + 해결책 요청 (예: "3억→10억 올려달래. 어떻게 해야 해?")\n  * 해결책을 위해 여러 단계 처리 필요 (검색 → 분석 → 제안)\n\n### 2단계: 필요 작업 식별\n- 정보 수집이 필요한가? → search 작업\n- 평가/판단이 필요한가? → analysis 작업\n- 문서 생성이 필요한가? → generation 작업\n- **해결책 요청**인가? → search + analysis (최소 2개)\n\n### 3단계: 작업 순서 결정\n- 독립적 작업: 병렬 가능\n- 이전 결과 필요: 순차 실행 (depends_on 설정)\n\n## 중요 원칙:\n1. 각 작업은 하나의 명확한 목표를 가져야 합니다\n2. 작업 간 의존성을 명확히 파악해야 합니다\n3. 병렬 처리 가능한 작업은 구분해야 합니다\n4. **주의**: "어떻게 해야", "방법 알려줘" 같은 해결책 요청은 복합 질문!\n\n## 작업 유형 (type):\n- search: 정보 검색 (법률, 시세, 대출 정보 등)\n- analysis: 데이터 분석 (리스크 평가, 시장 분석 등)\n- generation: 문서 생성 (계약서 작성 등)\n- review: 검토/평가 (계약서 검토, 조건 확인 등)\n- calculation: 계산/산출 (대출 한도, 세금 등)\n- comparison: 비교 분석 (여러 옵션 비교)\n\n## 담당 팀 (agent):\n- search_team: 법률, 시세, 대출 정보 검색\n- analysis_team: 데이터 분석, 리스크 평가, 계산\n- document_team: 문서 생성, 계약서 작성\n\n## 학습 예시:\n\n### 예시 1: 복합 질문 (순차적)\n질문: "강남구 아파트 시세 확인하고 대출 가능 금액 계산해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "강남구 아파트 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "대출 가능 금액 계산",\n            "type": "calculation",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "required_data": {"price": "task_0.result.price"},\n            "estimated_time": 15\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "시세 정보가 있어야 대출 금액 계산이 가능하므로 순차 실행"\n}\n```\n\n### 예시 2: 복합 질문 (병렬 가능)\n질문: "이 지역 전세 시세와 매매 시세 모두 알려주고 비교 분석해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "전세 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "매매 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "전세/매매 시세 비교 분석",\n            "type": "comparison",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0", "task_1"],\n            "required_data": {\n                "lease_price": "task_0.result",\n                "sale_price": "task_1.result"\n            },\n            "estimated_time": 25\n        }\n    ],\n    "execution_mode": "mixed",\n    "parallel_groups": [["task_0", "task_1"], ["task_2"]],\n    "reasoning": "시세 조회는 독립적이므로 병렬 처리, 비교는 두 결과 필요"\n}\n```\n\n### 예시 3: 복합 질문 (3단계 이상)\n질문: "이 계약서 검토해서 위험한 부분 찾고 수정안 만들어서 최종 계약서 작성해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "계약서 내용 전체 검토",\n            "type": "review",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 30\n        },\n        {\n            "description": "위험 요소 및 문제점 분석",\n            "type": "analysis",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "estimated_time": 25\n        },\n        {\n            "description": "수정안 제안 생성",\n            "type": "generation",\n            "agent": "document_team",\n            "priority": 3,\n            "depends_on": ["task_1"],\n            "estimated_time": 20\n        },\n        {\n            "description": "최종 계약서 작성",\n            "type": "generation",\n            "agent": "document_team",\n            "priority": 4,\n            "depends_on": ["task_2"],\n            "estimated_time": 30\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "각 단계가 이전 결과에 의존하므로 순차 실행 필요"\n}\n```\n\n### 예시 4: 단순 질문 (분해 불필요)\n질문: "전세금 인상률 상한이 얼마야?"\n분해:\n```json\n{\n    "is_compound": false,\n    "sub_tasks": [\n        {\n            "description": "전세금 인상률 상한 법률 정보 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 15\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "단일 정보 조회 요청으로 분해 불필요"\n}\n```\n\n### 예시 5: 조건부 실행\n질문: "이 물건 시세 확인하고 적정가면 대출 상담도 받고 싶어"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "물건 시세 조회 및 적정성 평가",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 25\n        },\n        {\n            "description": "대출 상담 정보 제공",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "optional": true,\n            "context": {"condition": "if_reasonable_price"},\n            "estimated_time": 20\n        }\n    ],\n    "execution_mode": "conditional",\n    "reasoning": "시세 확인 결과에 따라 대출 상담 진행 여부 결정"\n}\n```\n\n### 예시 6: 상황 설명 + 해결책 요청 (핵심 패턴!)\n질문: "집주인이 전세금 3억을 10억으로 올려달래. 법적으로 어떻게 해야 해?"\n**CoT 분석**:\n1. 질문 분석: 상황 설명 + 해결책 요청\n2. 연결어: 없지만, "어떻게 해야" = 해결책 요청\n3. 의존성: 법률 확인 → 상황 분석 → 대응 방안\n4. 복합 여부: **YES** (해결책을 위해 여러 단계 필요)\n\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "전세금 인상 한도 관련 법률 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "3억→10억 인상의 법적 타당성 및 적정성 분석",\n            "type": "analysis",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "required_data": {"legal_limit": "task_0.result", "current": 300000000, "requested": 1000000000},\n            "estimated_time": 25\n        },\n        {\n            "description": "구체적 대응 방안 및 해결책 제시",\n            "type": "analysis",\n            "agent": "analysis_team",\n            "priority": 3,\n            "depends_on": ["task_1"],\n            "estimated_time": 20\n        }\n    ],\n    "execution_mode": "sequential",\n    "confidence": 0.95,\n    "reasoning": "상황 설명+해결책 요청 패턴. \'어떻게 해야\'는 단순 정보 조회가 아닌 종합 해결책 필요. 법률 조회 → 상황 분석 → 해결책 제시 3단계 순차 처리"\n}\n```\n\n## Chain-of-Thought 프로세스:\n\n1. **질문 분석**: 어떤 정보나 작업을 요구하는가?\n2. **연결어 확인**: "그리고", "또한", "해서", "한 후" 등이 있는가?\n3. **의존성 파악**: 어떤 작업이 다른 작업의 결과를 필요로 하는가?\n4. **병렬성 판단**: 독립적으로 실행 가능한 작업이 있는가?\n5. **최적화**: 불필요한 분해는 없는가?\n\n## 응답 형식 (JSON):\n\n{\n    "is_compound": true/false,\n    "sub_tasks": [\n        {\n            "description": "작업 설명",\n            "type": "작업 유형",\n            "agent": "담당 팀",\n            "priority": 우선순위 (1이 가장 높음),\n            "depends_on": ["선행 작업 ID 리스트"],\n            "required_data": {"필요한 데이터 매핑"},\n            "estimated_time": 예상 소요 시간(초),\n            "optional": true/false,\n            "context": {"추가 컨텍스트"}\n        }\n    ],\n    "execution_mode": "sequential/parallel/mixed/conditional",\n    "parallel_groups": [["병렬 실행 가능한 작업 ID 그룹"]],\n    "confidence": 0.0-1.0,\n    "reasoning": "분해 결정의 이유와 근거"\n}\n\n## 분해 가이드라인:\n\n1. **분해가 필요한 경우**:\n   - 여러 종류의 정보를 요청하는 경우\n   - 순차적 처리가 필요한 경우 (A의 결과로 B 수행)\n   - 서로 다른 팀의 전문성이 필요한 경우\n\n2. **분해가 불필요한 경우**:\n   - 단일 정보 조회\n   - 단순한 질문-답변\n   - 하나의 팀에서 완전히 처리 가능한 경우\n\n3. **병렬 처리 기준**:\n   - 서로 독립적인 정보 조회\n   - 의존성이 없는 분석 작업\n   - 동시에 진행해도 충돌하지 않는 작업\n\n4. **우선순위 설정**:\n   - 의존성이 없는 작업: priority 1\n   - 1차 의존 작업: priority 2\n   - 2차 의존 작업: priority 3\n   - 이런 식으로 증가\n\n현재 의도: 종합분석\n추출된 엔티티: None\n\n분석할 질문: 마포구 아파트 시세 알려주고 계약서 작성해줘'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 16:00:16,898 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 16:00:16,898 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 16:00:16,899 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 16:00:16,899 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 16:00:16,899 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 16:00:16,899 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 16:00:19,736 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 07:00:19 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'2638'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'2652'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9958'), (b'x-ratelimit-remaining-tokens', b'197334'), (b'x-ratelimit-reset-requests', b'5m55.594s'), (b'x-ratelimit-reset-tokens', b'799ms'), (b'x-request-id', b'req_6e98f2f7467a4e8098375f0cf85a695d'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b0a85784a3091-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 16:00:19,737 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 16:00:19,737 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 16:00:19,740 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 16:00:19,740 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 16:00:19,740 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 16:00:19,740 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 07:00:19 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '2638', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '2652', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9958', 'x-ratelimit-remaining-tokens': '197334', 'x-ratelimit-reset-requests': '5m55.594s', 'x-ratelimit-reset-tokens': '799ms', 'x-request-id': 'req_6e98f2f7467a4e8098375f0cf85a695d', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b0a85784a3091-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 16:00:19,740 - openai._base_client - DEBUG - request_id: req_6e98f2f7467a4e8098375f0cf85a695d
2025-10-05 16:00:19,740 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: query_decomposition | Model: gpt-4o-mini-2024-07-18 | Tokens: 2869 (prompt: 2694, completion: 175)
2025-10-05 16:00:19,741 - app.service_agent.cognitive_agents.query_decomposer - INFO - Successfully decomposed into 2 tasks
2025-10-05 16:00:19,741 - __main__ - INFO -   복합 질문: True
2025-10-05 16:00:19,741 - __main__ - INFO -   작업 수: 2
2025-10-05 16:00:19,741 - __main__ - INFO -   실행 모드: sequential
2025-10-05 16:00:19,741 - __main__ - INFO -     - task_0: 마포구 아파트 시세 조회 (search_team)
2025-10-05 16:00:19,741 - __main__ - INFO -     - task_1: 계약서 작성 (document_team)
2025-10-05 16:00:19,741 - __main__ - INFO - 
[Step 3] Comprehensive Plan 생성...
2025-10-05 16:00:19,741 - app.service_agent.cognitive_agents.planning_agent - INFO - Creating comprehensive plan for query: 마포구 아파트 시세 알려주고 계약서 작성해줘...
2025-10-05 16:00:19,741 - app.service_agent.cognitive_agents.planning_agent - INFO - Analyzing intent for query: 마포구 아파트 시세 알려주고 계약서 작성해줘...
2025-10-05 16:00:19,741 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-5d88557c-1292-4aec-8256-82ccfc714c3e', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 의도 분석 전문가입니다.\n사용자의 질문을 정확히 이해하고, 어떤 종류의 도움이 필요한지 분류해야 합니다.\n\n## Chain-of-Thought 분석 프로세스\n\n질문을 분석할 때 다음 단계를 **순서대로** 따르세요:\n\n### 1단계: 질문 구조 파악\n- 단순 정보 요청인가? (예: "~이 뭐야?", "~알려줘")\n- 상황 설명이 포함되어 있는가? (배경, 현재 상태)\n- 구체적 수치나 데이터가 있는가? (금액, 비율, 기간 등)\n- 문제 해결을 요구하는가? (예: "어떻게 해야 해?", "방법 알려줘")\n\n### 2단계: 요청 유형 판단\n- **정보 확인형**: 사실, 개념, 규정 확인 → 검색만으로 충분\n- **평가/판단형**: "괜찮아?", "적절해?", "문제있어?" → 검색 + 분석 필요\n- **해결책 요청형**: "어떻게?", "방법?", "대처?" → 검색 + 분석 + 제안 필요\n- **비교/선택형**: "A vs B", "어느게 나아?" → 검색 + 분석(비교) 필요\n\n### 3단계: 복잡도 평가\n- **저**: 단일 개념/사실 확인 (예: "전세금 인상률 한도?")\n- **중**: 특정 상황 + 판단 (예: "3억을 5억으로 올려달래. 가능해?")\n- **고**: 복잡한 상황 + 여러 조건 + 해결책 (예: "10년 거주, 3억→10억 요구. 어떻게 해야 해?")\n\n### 4단계: 필요한 처리 결정\n- **검색만**: 정보 확인형 + 저복잡도\n- **검색+분석**: 평가/판단형 OR 중복잡도 OR 수치 비교 포함\n- **종합처리**: 해결책 요청형 OR 고복잡도 OR 여러 조건 동시 고려\n\n### 5단계: 최종 검증\n- 선택한 의도로 사용자 질문에 완전히 답변 가능한가?\n- 단순 정보 제공으로 끝나는가, 아니면 추가 분석/판단이 필요한가?\n- 상황 설명이 있으면서 "해결", "방법", "어떻게" 등이 있으면 → COMPREHENSIVE 고려\n\n## 중요: 복합 질문 처리\n복합적인 질문(여러 의도가 섞인 질문)의 경우, 가장 핵심적인 의도를 파악하되,\nsub_intents 필드에 부가적인 의도들도 함께 기록해주세요.\n\n**특히 주의**:\n- 법률 키워드가 있어도, "해결방법", "어떻게 해야" 같은 표현이 있으면 단순 LEGAL_CONSULT가 아닐 수 있음\n- 구체적 상황(금액, 기간 등) + 해결책 요구 = COMPREHENSIVE 또는 복합 의도로 분류\n\n## 분류 카테고리 설명:\n\n1. **LEGAL_CONSULT (법률상담)**\n   - 설명: 부동산 관련 법률, 권리, 의무에 대한 질문\n   - 예시:\n     * 단순: "전세금 5% 인상이 가능한가요?", "임대차계약 갱신 거부할 수 있나요?"\n     * 복합: "전세금 인상 가능한지 확인하고 법적 근거도 알려주세요"\n   - 키워드: 법, 전세, 임대, 보증금, 계약, 권리, 의무, 갱신, 임차인, 임대인, 법률, 규정, 조항\n   - 필요한 처리: 법률 데이터베이스 검색, 관련 법조항 찾기\n\n2. **MARKET_INQUIRY (시세조회)**\n   - 설명: 부동산 시장 가격, 시세, 거래 동향에 대한 질문\n   - 예시:\n     * 단순: "강남구 아파트 전세 시세 알려주세요", "서초동 매매가 얼마나 올랐나요?"\n     * 복합: "강남구 시세 확인하고 대출 가능 금액도 계산해줘"\n   - 키워드: 시세, 가격, 매매가, 전세가, 월세, 시장, 동향, 평균, 지역명, 상승률, 하락률\n   - 필요한 처리: 부동산 시세 데이터 조회, 지역별 가격 분석\n\n3. **LOAN_CONSULT (대출상담)**\n   - 설명: 주택담보대출, 전세자금대출 등 금융 관련 질문\n   - 예시:\n     * 단순: "전세자금대출 한도가 얼마인가요?", "LTV가 뭔가요?"\n     * 복합: "대출 한도 확인하고 금리 비교도 해주세요"\n   - 키워드: 대출, 금리, 한도, 조건, 상환, LTV, DTI, DSR, 담보, 금융, 은행\n   - 필요한 처리: 대출 상품 조회, 금리 정보 검색, 한도 계산\n\n4. **CONTRACT_CREATION (계약서작성)**\n   - 설명: 새로운 계약서나 문서를 작성해달라는 요청\n   - 예시:\n     * 단순: "임대차계약서 작성해주세요", "전세계약서 초안 만들어주세요"\n     * 복합: "계약서 작성하고 주의사항도 검토해주세요"\n   - 키워드: 작성, 만들, 생성, 초안, 계약서, 문서, 양식\n   - 필요한 처리: 문서 생성 에이전트 호출, 템플릿 기반 작성\n\n5. **CONTRACT_REVIEW (계약서검토)**\n   - 설명: 기존 계약서나 문서를 검토해달라는 요청\n   - 예시:\n     * 단순: "이 계약서 검토해주세요", "특약사항 문제없나요?"\n     * 복합: "계약서 검토하고 수정사항도 제안해주세요"\n   - 키워드: 검토, 확인, 점검, 리뷰, 분석해, 살펴봐, 체크\n   - 필요한 처리: 문서 분석, 위험 요소 식별, 개선사항 제안\n\n6. **COMPREHENSIVE (종합분석)**\n   - 설명: 여러 측면을 종합적으로 분석해달라는 요청, 또는 복잡한 상황에 대한 해결책 요청\n   - 예시:\n     * 단순: "이 물건 전체적으로 분석해주세요"\n     * 복합: "시세, 법률, 대출 모두 검토해서 종합 의견 주세요"\n     * 해결형: "10년 거주했는데 전세금 3억을 10억으로 올려달래. 어떻게 해야 해?"\n     * 상황+해결: "집주인이 계약 갱신 거부했어. 법적으로 어떻게 대응해야 할까?"\n   - 키워드: 종합, 전체, 모든, 전반적, 종합적, 평가, 분석, 어떻게, 방법, 해결, 대처\n   - 패턴: 구체적 상황 설명 + "어떻게/방법/해결" 요청\n   - 필요한 처리: 다중 데이터 소스 통합 분석, 상황 평가, 해결책 제시\n\n7. **RISK_ANALYSIS (리스크분석)**\n   - 설명: 위험 요소나 주의사항에 대한 질문\n   - 예시:\n     * 단순: "이 계약 위험한가요?", "주의할 점 알려주세요"\n     * 복합: "리스크 분석하고 대안도 제시해주세요"\n   - 키워드: 위험, 리스크, 주의, 문제점, 조심, 걱정, 우려\n   - 필요한 처리: 위험 요소 분석, 주의사항 추출\n\n8. **UNCLEAR (불분명)**\n   - 설명: 의도를 명확히 파악하기 어려운 질문\n   - 예시: "이거 좀 봐주세요", "어떻게 해야 할까요?", "도와주세요"\n   - 처리: 추가 질문으로 의도 명확화 필요\n\n9. **IRRELEVANT (무관)**\n   - 설명: 부동산과 전혀 관련 없는 질문\n   - 예시: "날씨 어때?", "저녁 뭐 먹지?", "주식 추천해줘"\n   - 처리: 부동산 관련 질문을 유도\n\n## 복합 질문 예시와 분석 (CoT 적용):\n\n### 예시 1: "강남구 아파트 시세 알려주고 전세자금대출 가능한지도 확인해줘"\n**CoT 분석**:\n1. 구조: 두 개의 요청 ("시세" + "대출")\n2. 유형: 정보 확인형 (둘 다)\n3. 복잡도: 중 (두 가지 독립적 조회)\n4. 필요 처리: 검색 + 계산/분석\n\n**결론**:\n- 주 의도: MARKET_INQUIRY (시세 조회가 먼저 필요)\n- 부가 의도: LOAN_CONSULT (대출 확인)\n- 분해: ["강남구 아파트 시세 조회", "전세자금대출 가능 여부 확인"]\n\n### 예시 2: "이 계약서 검토해서 위험한 부분 있는지 알려주고 수정 제안도 해줘"\n**CoT 분석**:\n1. 구조: 검토 + 위험 평가 + 수정안\n2. 유형: 평가/판단형 + 해결책 요청형\n3. 복잡도: 고 (3단계 처리)\n4. 필요 처리: 검토 + 분석 + 문서 생성\n\n**결론**:\n- 주 의도: CONTRACT_REVIEW (계약서 검토)\n- 부가 의도: RISK_ANALYSIS (위험 분석)\n- 분해: ["계약서 전체 검토", "위험 요소 식별", "수정사항 제안"]\n\n### 예시 3: "집주인이 짜증나, 10년 살았는데 전세금 3억을 10억으로 올려달래. 법적으로 해결방법 알려줘"\n**CoT 분석**:\n1. 구조: 상황 설명 (10년 거주, 3억→10억) + 해결책 요청\n2. 유형: 해결책 요청형 (단순 정보 X)\n3. 복잡도: 고 (구체적 상황 + 수치 비교 + 법률 + 대응방안)\n4. 필요 처리: 법률 검색 + 상황 분석 + 해결책 제시\n\n**결론**:\n- 주 의도: COMPREHENSIVE (복잡한 상황에 대한 종합 해결)\n- 부가 의도: LEGAL_CONSULT, RISK_ANALYSIS\n- 분해: ["전세금 인상 한도 법률 조회", "3억→10억 인상의 타당성 분석", "구체적 대응 방안 제시"]\n- **이유**: "법적으로"라는 키워드가 있지만, 단순 법률 확인이 아니라 구체적 상황에 대한 해결책을 요구하므로 COMPREHENSIVE\n\n### 예시 4: "전세금 인상률 상한이 얼마야?"\n**CoT 분석**:\n1. 구조: 단순 사실 확인\n2. 유형: 정보 확인형\n3. 복잡도: 저 (단일 개념)\n4. 필요 처리: 검색만\n\n**결론**:\n- 주 의도: LEGAL_CONSULT (법률 정보 조회)\n- 부가 의도: 없음\n- 분해: 필요 없음\n\n## 응답 형식 (JSON 형식으로 응답):\n\n```json\n{\n    "intent": "LEGAL_CONSULT",\n    "confidence": 0.9,\n    "keywords": ["전세금", "인상", "제한"],\n    "sub_intents": [],\n    "is_compound": false,\n    "decomposed_tasks": [],\n    "entities": {\n        "location": "강남구",\n        "price": "5억",\n        "contract_type": "전세",\n        "date": "2024년",\n        "area": "84㎡",\n        "action_verbs": ["확인", "검토"]\n    },\n    "reasoning": "전세금 인상에 대한 법률 질문이므로 LEGAL_CONSULT로 분류"\n}\n```\n\n응답 규칙:\n- intent: 위 9개 카테고리 중 하나 (대문자_언더스코어 형식)\n- confidence: 0.0~1.0 (0.8 이상이면 매우 확실, 0.5 미만이면 불확실)\n- keywords: 추출된 주요 키워드 목록\n- sub_intents: 복합 질문일 경우 부가적인 의도들\n- is_compound: 복합 질문 여부 (true/false)\n- decomposed_tasks: 복합 질문을 분해한 개별 작업들\n- entities: 추출된 엔티티 정보\n- reasoning: **반드시 CoT 5단계를 거쳐 분석한 과정을 포함** (구조 파악 → 유형 판단 → 복잡도 평가 → 필요 처리 → 최종 검증)\n\n## reasoning 작성 예시:\n"1단계(구조): 상황 설명(10년 거주, 3억→10억) + 해결책 요청 포함.\n2단계(유형): 해결책 요청형 - 단순 정보가 아닌 대응방안 필요.\n3단계(복잡도): 고 - 구체적 수치 비교와 복잡한 상황.\n4단계(처리): 법률 검색 + 상황 분석 + 해결책 제시 필요.\n5단계(검증): LEGAL_CONSULT만으로는 불충분, 종합적 분석 필요 → COMPREHENSIVE 선택"\n\n## 판단 가이드:\n- 여러 의도가 섞여있다면, 가장 주된 의도를 intent에, 나머지를 sub_intents에 기록\n- "그리고", "또한", "함께", "같이" 등의 연결어가 있으면 복합 질문일 가능성 높음\n- 법률 관련 키워드가 있으면 LEGAL_CONSULT 우선\n- 가격/시세 언급이 명확하면 MARKET_INQUIRY\n- 계약서라는 단어와 함께 "작성/만들기"가 있으면 CONTRACT_CREATION\n- 계약서라는 단어와 함께 "검토/확인"이 있으면 CONTRACT_REVIEW\n- 불확실하면 confidence를 낮게 설정하고 UNCLEAR 선택\n- 복합 질문은 is_compound를 true로 설정하고 개별 작업으로 분해\n\n분석할 질문: 마포구 아파트 시세 알려주고 계약서 작성해줘'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 16:00:19,741 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 16:00:19,742 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 16:00:19,742 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 16:00:19,742 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 16:00:19,742 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 16:00:19,742 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 16:00:26,000 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 07:00:25 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'5997'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'6034'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9958'), (b'x-ratelimit-remaining-tokens', b'197240'), (b'x-ratelimit-reset-requests', b'6m1.396s'), (b'x-ratelimit-reset-tokens', b'828ms'), (b'x-request-id', b'req_bb984e6371264312926875380dc99ca3'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b0a973c303091-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 16:00:26,000 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 16:00:26,001 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 16:00:26,001 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 16:00:26,001 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 16:00:26,001 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 16:00:26,001 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 07:00:25 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '5997', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '6034', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9958', 'x-ratelimit-remaining-tokens': '197240', 'x-ratelimit-reset-requests': '6m1.396s', 'x-ratelimit-reset-tokens': '828ms', 'x-request-id': 'req_bb984e6371264312926875380dc99ca3', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b0a973c303091-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 16:00:26,001 - openai._base_client - DEBUG - request_id: req_bb984e6371264312926875380dc99ca3
2025-10-05 16:00:26,001 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: intent_analysis | Model: gpt-4o-mini-2024-07-18 | Tokens: 3439 (prompt: 3184, completion: 255)
2025-10-05 16:00:26,001 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM Intent Analysis Result: {'intent': 'COMPREHENSIVE', 'confidence': 0.85, 'keywords': ['마포구', '아파트', '시세', '계약서', '작성'], 'sub_intents': ['MARKET_INQUIRY', 'CONTRACT_CREATION'], 'is_compound': True, 'decomposed_tasks': ['마포구 아파트 시세 조회', '임대차계약서 작성'], 'entities': {'location': '마포구', 'contract_type': '임대차계약서', 'action_verbs': ['조회', '작성']}, 'reasoning': '1단계(구조): 두 개의 요청(시세 조회 + 계약서 작성) 포함. 2단계(유형): 정보 확인형(시세) + 계약서 작성 요청. 3단계(복잡도): 중 - 두 가지 독립적 조회 필요. 4단계(처리): 시세 조회와 계약서 작성 모두 필요. 5단계(검증): 두 가지 요청이 있으므로 COMPREHENSIVE로 분류.'}
2025-10-05 16:00:26,002 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-7549d29d-bf23-417a-83ba-ad8e61db19ed', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 Agent 선택 전문가입니다.\n사용자의 요청에 가장 적합한 Agent/Team을 선택하는 것이 목표입니다.\n\n## 현재 상황\n\n**사용자 질문:** 마포구 아파트 시세 알려주고 계약서 작성해줘\n**분석된 의도:** 종합분석\n**추출된 키워드:** [\'마포구\', \'아파트\', \'시세\', \'계약서\', \'작성\']\n\n## 사용 가능한 Agent/Team 정보\n\n{\'search_team\': {\'name\': \'search_team\', \'capabilities\': \'법률 검색, 부동산 시세 조회, 대출 상품 검색\', \'tools\': [\'legal_search\', \'market_data\', \'loan_data\'], \'use_cases\': [\'법률 상담\', \'시세 조회\', \'대출 정보\']}, \'analysis_team\': {\'name\': \'analysis_team\', \'capabilities\': \'데이터 분석, 리스크 평가, 인사이트 생성, 추천\', \'tools\': [\'data_analyzer\', \'risk_evaluator\'], \'use_cases\': [\'시장 분석\', \'리스크 평가\', \'투자 분석\']}, \'document_team\': {\'name\': \'document_team\', \'capabilities\': \'계약서 작성, 문서 생성, 문서 검토\', \'tools\': [\'document_generator\', \'contract_reviewer\'], \'use_cases\': [\'계약서 작성\', \'문서 검토\']}}\n\n## Agent 역할 및 상세 가이드\n\n### 1. search_team (검색 팀)\n- **주요 기능**: 정보 검색 및 데이터 수집\n- **전문 분야**:\n  * 법률 정보 검색 (전세법, 임대차보호법, 부동산 관련 법규)\n  * 부동산 시세 조회 (매매가, 전세가, 월세, 실거래가)\n  * 대출 상품 정보 검색 (금리, 한도, 조건)\n  * 지역 정보 및 인프라 조회\n- **도구**: legal_search, market_data, loan_data\n- **적합한 작업**: 정보 조회, 데이터 수집, 법률 확인, 시세 파악\n- **예시**:\n  * "전세금 5% 인상 가능한가요?"\n  * "강남구 아파트 전세 시세"\n  * "전세자금대출 한도 얼마?"\n\n### 2. analysis_team (분석 팀)\n- **주요 기능**: 데이터 분석 및 평가\n- **전문 분야**:\n  * 시장 동향 분석 (상승률, 하락률, 추세)\n  * 리스크 평가 (계약, 투자 위험도)\n  * 투자 수익률 계산 (ROI, 월세 수익률)\n  * 대출 한도 및 조건 분석 (LTV, DTI, DSR)\n  * 비교 분석 (지역별, 상품별)\n- **도구**: data_analyzer, risk_evaluator, calculator\n- **적합한 작업**: 데이터 분석, 리스크 평가, 계산, 비교, 예측\n- **의존성**: 보통 search_team의 데이터가 필요\n- **예시**:\n  * "이 지역 투자 가치 분석해줘"\n  * "계약 리스크 평가해줘"\n  * "대출 가능 금액 계산해줘"\n\n### 3. document_team (문서 팀)\n- **주요 기능**: 문서 생성 및 관리\n- **전문 분야**:\n  * 계약서 작성 (임대차, 매매, 전세)\n  * 문서 템플릿 관리\n  * 특약사항 생성\n  * 계약서 수정안 작성\n  * 법률 문서 검토\n- **도구**: document_generator, contract_template, contract_reviewer\n- **적합한 작업**: 문서 작성, 계약서 생성, 문서 수정, 검토\n- **예시**:\n  * "임대차계약서 작성해줘"\n  * "특약사항 추가해줘"\n  * "계약서 수정안 만들어줘"\n\n## Chain-of-Thought Agent 선택 프로세스\n\n다음 단계를 **순서대로** 따라 최적의 Agent 조합을 선택하세요:\n\n### 1단계: 질문 요구사항 파악\n- 단순 정보 조회인가? → search_team만 필요\n- 판단/평가가 필요한가? → search + analysis 필요\n- 해결책 제시가 필요한가? → search + analysis 필요\n- 문서 생성이 필요한가? → document_team 추가\n\n### 2단계: 작업 복잡도 판단\n- **단순** (검색만): "~이 뭐야?", "~알려줘" → search_team\n- **중간** (검색+판단): "~괜찮아?", "~적절해?" → search + analysis\n- **복잡** (종합 해결): 구체적 상황 + "어떻게 해야 해?" → search + analysis\n\n### 3단계: 의존성 분석\n- 독립적 작업: 단일 팀으로 처리 가능\n- 순차적 의존: 이전 결과 필요 → 여러 팀 순서대로\n- 병렬 가능: 동시 조회 가능 → coordination: "parallel"\n\n### 4단계: 최종 검증\n- 선택한 팀들로 질문에 완전히 답변 가능한가?\n- 불필요한 팀이 포함되지 않았는가?\n- 순서가 논리적인가? (데이터 흐름 고려)\n\n### 중요 원칙:\n- **법률 키워드만으로 판단하지 말 것**: "법적으로 어떻게 해야 해?" = 법률 검색 + 분석 필요\n- **상황 설명 + 해결책 요청** = 반드시 analysis_team 포함\n- **구체적 수치 비교** (3억→10억 같은) = analysis_team 필요\n\n## 의도별 Agent 매핑 가이드 (기본 가이드 - CoT로 조정 가능)\n\n| 의도 (Intent) | 기본 조합 | 상황별 조정 |\n|--------------|-----------|-------------|\n| LEGAL_CONSULT | ["search_team"] | 해결책 요청시 → + analysis_team |\n| MARKET_INQUIRY | ["search_team"] | 비교/평가시 → + analysis_team |\n| LOAN_CONSULT | ["search_team", "analysis_team"] | 계산 필수 |\n| CONTRACT_CREATION | ["document_team"] | 검토 후 작성 → search + document |\n| CONTRACT_REVIEW | ["search_team", "analysis_team"] | 법률 검토 + 리스크 분석 |\n| COMPREHENSIVE | ["search_team", "analysis_team"] | **항상 분석 포함** |\n| RISK_ANALYSIS | ["analysis_team"] | 법률 근거 필요시 → search + analysis |\n| UNCLEAR | ["search_team", "analysis_team"] | 포괄적 대응 |\n\n**중요**: 위 매핑은 **기본 가이드**일 뿐입니다.\n실제 질문의 내용(CoT 분석 결과)에 따라 조정하세요!\n\n## 복합 질문 처리 예시 (CoT 적용)\n\n### 예시 1: 순차적 처리\n질문: "강남구 시세 확인하고 투자 가치 분석해줘"\n**CoT 분석**:\n1. 요구사항: 시세 조회 + 투자 가치 평가\n2. 복잡도: 중간 (검색 + 분석)\n3. 의존성: 시세 데이터 → 투자 분석 (순차)\n4. 검증: search만으로는 "투자 가치 평가" 불가능\n\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "1단계: 시세 조회+투자 평가 필요. 2단계: 중간 복잡도. 3단계: 순차 의존. 4단계: search로 시세 수집 후 analysis로 투자 가치 평가 필요",\n    "coordination": "sequential"\n}\n```\n\n### 예시 2: 단순 정보 조회\n질문: "전세금 인상률 한도가 얼마야?"\n**CoT 분석**:\n1. 요구사항: 단순 사실 확인\n2. 복잡도: 낮음 (정보 확인형)\n3. 의존성: 없음\n4. 검증: search_team만으로 충분\n\n```json\n{\n    "selected_agents": ["search_team"],\n    "reasoning": "1단계: 단순 정보 조회. 2단계: 저복잡도. 3단계: 독립적. 4단계: 법률 검색만으로 답변 가능",\n    "coordination": "single"\n}\n```\n\n### 예시 3: 해결책 요청 (핵심 예시!)\n질문: "집주인이 전세금 3억을 10억으로 올려달래. 법적으로 어떻게 해야 해?"\n의도: COMPREHENSIVE\n**CoT 분석**:\n1. 요구사항: 상황 설명 + 해결책 요청\n2. 복잡도: 높음 (구체적 상황 + 수치 비교)\n3. 의존성: 법률 확인 → 상황 분석 → 해결책 제시\n4. 검증: "법적으로"만 보고 search만 선택하면 불충분! 해결책 제시 필요\n\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "1단계: 법률 + 상황 분석 + 해결책 필요. 2단계: 고복잡도(3억→10억 비정상). 3단계: 순차(법률 확인 후 타당성 분석). 4단계: \'어떻게 해야\' = 단순 법률 조회 아님, 분석 필수",\n    "coordination": "sequential",\n    "confidence": 0.95\n}\n```\n\n## 응답 형식 (JSON)\n\n```json\n{\n    "selected_agents": ["선택된 agent/team 목록"],\n    "reasoning": "선택 이유를 구체적으로 설명. 각 Agent의 역할과 처리 순서 포함",\n    "coordination": "single/sequential/parallel/pipeline",\n    "dependencies": {"agent2": ["agent1"]},\n    "estimated_time": 30,\n    "confidence": 0.9\n}\n```\n\n## 선택 가이드라인\n\n1. **최소 Agent 원칙**: 가능한 적은 수의 Agent로 처리\n2. **전문성 우선**: 해당 작업에 가장 전문적인 Agent 선택\n3. **효율성 고려**: 병렬 처리 가능한 경우 명시\n4. **의존성 관리**: 데이터 흐름을 고려한 순서 지정\n5. **폴백 전략**: 불확실한 경우 ["search_team", "analysis_team"] 조합\n\n## 주의사항\n\n- selected_agents는 반드시 배열 형태\n- Agent 이름은 정확히: "search_team", "analysis_team", "document_team"\n- 최소 1개, 최대 3개 선택\n- 순서는 실행 우선순위 (앞에 있을수록 먼저 실행)\n- reasoning은 상세하고 논리적으로 작성\n- coordination 필드로 실행 방식 명시\n- 복합 질문의 경우 의존성 관계 명확히 표시'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 16:00:26,004 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 16:00:26,004 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 16:00:26,005 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 16:00:26,005 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 16:00:26,005 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 16:00:26,005 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 16:00:29,680 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 07:00:29 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'3323'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'3351'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9957'), (b'x-ratelimit-remaining-tokens', b'197881'), (b'x-ratelimit-reset-requests', b'6m3.762s'), (b'x-ratelimit-reset-tokens', b'635ms'), (b'x-request-id', b'req_eaf6cf047ce04bb09073dc3d3695f9f1'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b0abe6e973091-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 16:00:29,680 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 16:00:29,681 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 16:00:29,681 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 16:00:29,681 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 16:00:29,681 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 16:00:29,681 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 07:00:29 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '3323', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '3351', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9957', 'x-ratelimit-remaining-tokens': '197881', 'x-ratelimit-reset-requests': '6m3.762s', 'x-ratelimit-reset-tokens': '635ms', 'x-request-id': 'req_eaf6cf047ce04bb09073dc3d3695f9f1', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b0abe6e973091-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 16:00:29,681 - openai._base_client - DEBUG - request_id: req_eaf6cf047ce04bb09073dc3d3695f9f1
2025-10-05 16:00:29,681 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: agent_selection | Model: gpt-4o-mini-2024-07-18 | Tokens: 2522 (prompt: 2369, completion: 153)
2025-10-05 16:00:29,681 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM agent selection reasoning: 1단계: 마포구 아파트 시세 조회와 계약서 작성이 필요. 2단계: 시세 조회는 search_team이 담당하고, 계약서 작성은 document_team이 담당해야 함. 3단계: 시세 조회 후 계약서 작성이 필요하므로 순차적으로 진행해야 함. 4단계: search_team이 시세 정보를 제공한 후, document_team이 계약서를 작성할 수 있음.
2025-10-05 16:00:29,681 - app.service_agent.cognitive_agents.planning_agent - INFO - ✅ Primary LLM selected agents: ['search_team', 'document_team']
2025-10-05 16:00:29,681 - app.service_agent.cognitive_agents.planning_agent - INFO - Intent analyzed: 종합분석 (confidence: 0.85)
2025-10-05 16:00:29,681 - app.service_agent.cognitive_agents.query_decomposer - INFO - Decomposing query: 마포구 아파트 시세 알려주고 계약서 작성해줘...
2025-10-05 16:00:29,682 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-e00843f6-c355-437c-b24d-b00347733e51', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 질문 분해 전문가입니다.\n복잡한 사용자 질문을 독립적으로 처리 가능한 작업 단위로 분해하는 것이 목표입니다.\n\n## Chain-of-Thought 분해 프로세스:\n\n### 1단계: 복합 질문 여부 판단\n- 단순 정보 조회만 필요한가? → is_compound: false\n- **다음 중 하나라도 해당하면 is_compound: true**:\n  * "그리고", "그 다음", "한 후" 같은 연결어로 여러 요청 연결\n  * 명시적으로 2개 이상의 작업 요청 (예: "시세 확인하고 대출 계산해줘")\n  * 상황 설명 + 해결책 요청 (예: "3억→10억 올려달래. 어떻게 해야 해?")\n  * 해결책을 위해 여러 단계 처리 필요 (검색 → 분석 → 제안)\n\n### 2단계: 필요 작업 식별\n- 정보 수집이 필요한가? → search 작업\n- 평가/판단이 필요한가? → analysis 작업\n- 문서 생성이 필요한가? → generation 작업\n- **해결책 요청**인가? → search + analysis (최소 2개)\n\n### 3단계: 작업 순서 결정\n- 독립적 작업: 병렬 가능\n- 이전 결과 필요: 순차 실행 (depends_on 설정)\n\n## 중요 원칙:\n1. 각 작업은 하나의 명확한 목표를 가져야 합니다\n2. 작업 간 의존성을 명확히 파악해야 합니다\n3. 병렬 처리 가능한 작업은 구분해야 합니다\n4. **주의**: "어떻게 해야", "방법 알려줘" 같은 해결책 요청은 복합 질문!\n\n## 작업 유형 (type):\n- search: 정보 검색 (법률, 시세, 대출 정보 등)\n- analysis: 데이터 분석 (리스크 평가, 시장 분석 등)\n- generation: 문서 생성 (계약서 작성 등)\n- review: 검토/평가 (계약서 검토, 조건 확인 등)\n- calculation: 계산/산출 (대출 한도, 세금 등)\n- comparison: 비교 분석 (여러 옵션 비교)\n\n## 담당 팀 (agent):\n- search_team: 법률, 시세, 대출 정보 검색\n- analysis_team: 데이터 분석, 리스크 평가, 계산\n- document_team: 문서 생성, 계약서 작성\n\n## 학습 예시:\n\n### 예시 1: 복합 질문 (순차적)\n질문: "강남구 아파트 시세 확인하고 대출 가능 금액 계산해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "강남구 아파트 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "대출 가능 금액 계산",\n            "type": "calculation",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "required_data": {"price": "task_0.result.price"},\n            "estimated_time": 15\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "시세 정보가 있어야 대출 금액 계산이 가능하므로 순차 실행"\n}\n```\n\n### 예시 2: 복합 질문 (병렬 가능)\n질문: "이 지역 전세 시세와 매매 시세 모두 알려주고 비교 분석해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "전세 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "매매 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "전세/매매 시세 비교 분석",\n            "type": "comparison",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0", "task_1"],\n            "required_data": {\n                "lease_price": "task_0.result",\n                "sale_price": "task_1.result"\n            },\n            "estimated_time": 25\n        }\n    ],\n    "execution_mode": "mixed",\n    "parallel_groups": [["task_0", "task_1"], ["task_2"]],\n    "reasoning": "시세 조회는 독립적이므로 병렬 처리, 비교는 두 결과 필요"\n}\n```\n\n### 예시 3: 복합 질문 (3단계 이상)\n질문: "이 계약서 검토해서 위험한 부분 찾고 수정안 만들어서 최종 계약서 작성해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "계약서 내용 전체 검토",\n            "type": "review",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 30\n        },\n        {\n            "description": "위험 요소 및 문제점 분석",\n            "type": "analysis",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "estimated_time": 25\n        },\n        {\n            "description": "수정안 제안 생성",\n            "type": "generation",\n            "agent": "document_team",\n            "priority": 3,\n            "depends_on": ["task_1"],\n            "estimated_time": 20\n        },\n        {\n            "description": "최종 계약서 작성",\n            "type": "generation",\n            "agent": "document_team",\n            "priority": 4,\n            "depends_on": ["task_2"],\n            "estimated_time": 30\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "각 단계가 이전 결과에 의존하므로 순차 실행 필요"\n}\n```\n\n### 예시 4: 단순 질문 (분해 불필요)\n질문: "전세금 인상률 상한이 얼마야?"\n분해:\n```json\n{\n    "is_compound": false,\n    "sub_tasks": [\n        {\n            "description": "전세금 인상률 상한 법률 정보 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 15\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "단일 정보 조회 요청으로 분해 불필요"\n}\n```\n\n### 예시 5: 조건부 실행\n질문: "이 물건 시세 확인하고 적정가면 대출 상담도 받고 싶어"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "물건 시세 조회 및 적정성 평가",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 25\n        },\n        {\n            "description": "대출 상담 정보 제공",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "optional": true,\n            "context": {"condition": "if_reasonable_price"},\n            "estimated_time": 20\n        }\n    ],\n    "execution_mode": "conditional",\n    "reasoning": "시세 확인 결과에 따라 대출 상담 진행 여부 결정"\n}\n```\n\n### 예시 6: 상황 설명 + 해결책 요청 (핵심 패턴!)\n질문: "집주인이 전세금 3억을 10억으로 올려달래. 법적으로 어떻게 해야 해?"\n**CoT 분석**:\n1. 질문 분석: 상황 설명 + 해결책 요청\n2. 연결어: 없지만, "어떻게 해야" = 해결책 요청\n3. 의존성: 법률 확인 → 상황 분석 → 대응 방안\n4. 복합 여부: **YES** (해결책을 위해 여러 단계 필요)\n\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "전세금 인상 한도 관련 법률 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "3억→10억 인상의 법적 타당성 및 적정성 분석",\n            "type": "analysis",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "required_data": {"legal_limit": "task_0.result", "current": 300000000, "requested": 1000000000},\n            "estimated_time": 25\n        },\n        {\n            "description": "구체적 대응 방안 및 해결책 제시",\n            "type": "analysis",\n            "agent": "analysis_team",\n            "priority": 3,\n            "depends_on": ["task_1"],\n            "estimated_time": 20\n        }\n    ],\n    "execution_mode": "sequential",\n    "confidence": 0.95,\n    "reasoning": "상황 설명+해결책 요청 패턴. \'어떻게 해야\'는 단순 정보 조회가 아닌 종합 해결책 필요. 법률 조회 → 상황 분석 → 해결책 제시 3단계 순차 처리"\n}\n```\n\n## Chain-of-Thought 프로세스:\n\n1. **질문 분석**: 어떤 정보나 작업을 요구하는가?\n2. **연결어 확인**: "그리고", "또한", "해서", "한 후" 등이 있는가?\n3. **의존성 파악**: 어떤 작업이 다른 작업의 결과를 필요로 하는가?\n4. **병렬성 판단**: 독립적으로 실행 가능한 작업이 있는가?\n5. **최적화**: 불필요한 분해는 없는가?\n\n## 응답 형식 (JSON):\n\n{\n    "is_compound": true/false,\n    "sub_tasks": [\n        {\n            "description": "작업 설명",\n            "type": "작업 유형",\n            "agent": "담당 팀",\n            "priority": 우선순위 (1이 가장 높음),\n            "depends_on": ["선행 작업 ID 리스트"],\n            "required_data": {"필요한 데이터 매핑"},\n            "estimated_time": 예상 소요 시간(초),\n            "optional": true/false,\n            "context": {"추가 컨텍스트"}\n        }\n    ],\n    "execution_mode": "sequential/parallel/mixed/conditional",\n    "parallel_groups": [["병렬 실행 가능한 작업 ID 그룹"]],\n    "confidence": 0.0-1.0,\n    "reasoning": "분해 결정의 이유와 근거"\n}\n\n## 분해 가이드라인:\n\n1. **분해가 필요한 경우**:\n   - 여러 종류의 정보를 요청하는 경우\n   - 순차적 처리가 필요한 경우 (A의 결과로 B 수행)\n   - 서로 다른 팀의 전문성이 필요한 경우\n\n2. **분해가 불필요한 경우**:\n   - 단일 정보 조회\n   - 단순한 질문-답변\n   - 하나의 팀에서 완전히 처리 가능한 경우\n\n3. **병렬 처리 기준**:\n   - 서로 독립적인 정보 조회\n   - 의존성이 없는 분석 작업\n   - 동시에 진행해도 충돌하지 않는 작업\n\n4. **우선순위 설정**:\n   - 의존성이 없는 작업: priority 1\n   - 1차 의존 작업: priority 2\n   - 2차 의존 작업: priority 3\n   - 이런 식으로 증가\n\n현재 의도: 종합분석\n추출된 엔티티: {\'location\': \'마포구\', \'contract_type\': \'임대차계약서\', \'action_verbs\': [\'조회\', \'작성\']}\n\n분석할 질문: 마포구 아파트 시세 알려주고 계약서 작성해줘'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 16:00:29,682 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 16:00:29,682 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 16:00:29,683 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 16:00:29,683 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 16:00:29,683 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 16:00:29,683 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 16:00:32,367 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 07:00:32 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'2455'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'2489'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9957'), (b'x-ratelimit-remaining-tokens', b'197310'), (b'x-ratelimit-reset-requests', b'6m8.721s'), (b'x-ratelimit-reset-tokens', b'807ms'), (b'x-request-id', b'req_b5e534092bc24779ad2484ee3252f5a4'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b0ad55c9c3091-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 16:00:32,367 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 16:00:32,367 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 16:00:32,378 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 16:00:32,378 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 16:00:32,378 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 16:00:32,378 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 07:00:32 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '2455', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '2489', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9957', 'x-ratelimit-remaining-tokens': '197310', 'x-ratelimit-reset-requests': '6m8.721s', 'x-ratelimit-reset-tokens': '807ms', 'x-request-id': 'req_b5e534092bc24779ad2484ee3252f5a4', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b0ad55c9c3091-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 16:00:32,378 - openai._base_client - DEBUG - request_id: req_b5e534092bc24779ad2484ee3252f5a4
2025-10-05 16:00:32,379 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: query_decomposition | Model: gpt-4o-mini-2024-07-18 | Tokens: 2899 (prompt: 2724, completion: 175)
2025-10-05 16:00:32,379 - app.service_agent.cognitive_agents.query_decomposer - INFO - Successfully decomposed into 2 tasks
2025-10-05 16:00:32,379 - app.service_agent.cognitive_agents.planning_agent - INFO - Query decomposed into 2 tasks
2025-10-05 16:00:32,379 - app.service_agent.cognitive_agents.planning_agent - WARNING - Plan validation errors: ["Agent 'search_team' not found in registry", "Agent 'document_team' depends on missing 'task_0'", "Agent 'document_team' not found in registry"]
2025-10-05 16:00:32,379 - app.service_agent.cognitive_agents.planning_agent - INFO - Optimizing execution plan
2025-10-05 16:00:32,379 - app.service_agent.cognitive_agents.planning_agent - INFO - Comprehensive plan created: Intent: 종합분석 (confidence: 0.85) | Strategy: sequential | Agents: search_team, document_team | Estimated time: 50.0s
2025-10-05 16:00:32,379 - __main__ - INFO -   전략: sequential
2025-10-05 16:00:32,379 - __main__ - INFO -   단계 수: 2
2025-10-05 16:00:32,379 - __main__ - INFO - 
✓ 테스트 성공 (소요시간: 24.59초)
2025-10-05 16:00:32,379 - __main__ - INFO - 
================================================================================
2025-10-05 16:00:32,379 - __main__ - INFO - [28] 복합 질문 테스트: D008
2025-10-05 16:00:32,379 - __main__ - INFO - 질문: 전세 시세 확인하고 리스크 평가해줘
2025-10-05 16:00:32,379 - __main__ - INFO - ================================================================================
2025-10-05 16:00:32,379 - __main__ - INFO - 
[Step 1] Intent 분석...
2025-10-05 16:00:32,379 - app.service_agent.cognitive_agents.planning_agent - INFO - Analyzing intent for query: 전세 시세 확인하고 리스크 평가해줘...
2025-10-05 16:00:32,379 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-b5cdceb3-6a7a-4699-a50b-895e52734c3b', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 의도 분석 전문가입니다.\n사용자의 질문을 정확히 이해하고, 어떤 종류의 도움이 필요한지 분류해야 합니다.\n\n## Chain-of-Thought 분석 프로세스\n\n질문을 분석할 때 다음 단계를 **순서대로** 따르세요:\n\n### 1단계: 질문 구조 파악\n- 단순 정보 요청인가? (예: "~이 뭐야?", "~알려줘")\n- 상황 설명이 포함되어 있는가? (배경, 현재 상태)\n- 구체적 수치나 데이터가 있는가? (금액, 비율, 기간 등)\n- 문제 해결을 요구하는가? (예: "어떻게 해야 해?", "방법 알려줘")\n\n### 2단계: 요청 유형 판단\n- **정보 확인형**: 사실, 개념, 규정 확인 → 검색만으로 충분\n- **평가/판단형**: "괜찮아?", "적절해?", "문제있어?" → 검색 + 분석 필요\n- **해결책 요청형**: "어떻게?", "방법?", "대처?" → 검색 + 분석 + 제안 필요\n- **비교/선택형**: "A vs B", "어느게 나아?" → 검색 + 분석(비교) 필요\n\n### 3단계: 복잡도 평가\n- **저**: 단일 개념/사실 확인 (예: "전세금 인상률 한도?")\n- **중**: 특정 상황 + 판단 (예: "3억을 5억으로 올려달래. 가능해?")\n- **고**: 복잡한 상황 + 여러 조건 + 해결책 (예: "10년 거주, 3억→10억 요구. 어떻게 해야 해?")\n\n### 4단계: 필요한 처리 결정\n- **검색만**: 정보 확인형 + 저복잡도\n- **검색+분석**: 평가/판단형 OR 중복잡도 OR 수치 비교 포함\n- **종합처리**: 해결책 요청형 OR 고복잡도 OR 여러 조건 동시 고려\n\n### 5단계: 최종 검증\n- 선택한 의도로 사용자 질문에 완전히 답변 가능한가?\n- 단순 정보 제공으로 끝나는가, 아니면 추가 분석/판단이 필요한가?\n- 상황 설명이 있으면서 "해결", "방법", "어떻게" 등이 있으면 → COMPREHENSIVE 고려\n\n## 중요: 복합 질문 처리\n복합적인 질문(여러 의도가 섞인 질문)의 경우, 가장 핵심적인 의도를 파악하되,\nsub_intents 필드에 부가적인 의도들도 함께 기록해주세요.\n\n**특히 주의**:\n- 법률 키워드가 있어도, "해결방법", "어떻게 해야" 같은 표현이 있으면 단순 LEGAL_CONSULT가 아닐 수 있음\n- 구체적 상황(금액, 기간 등) + 해결책 요구 = COMPREHENSIVE 또는 복합 의도로 분류\n\n## 분류 카테고리 설명:\n\n1. **LEGAL_CONSULT (법률상담)**\n   - 설명: 부동산 관련 법률, 권리, 의무에 대한 질문\n   - 예시:\n     * 단순: "전세금 5% 인상이 가능한가요?", "임대차계약 갱신 거부할 수 있나요?"\n     * 복합: "전세금 인상 가능한지 확인하고 법적 근거도 알려주세요"\n   - 키워드: 법, 전세, 임대, 보증금, 계약, 권리, 의무, 갱신, 임차인, 임대인, 법률, 규정, 조항\n   - 필요한 처리: 법률 데이터베이스 검색, 관련 법조항 찾기\n\n2. **MARKET_INQUIRY (시세조회)**\n   - 설명: 부동산 시장 가격, 시세, 거래 동향에 대한 질문\n   - 예시:\n     * 단순: "강남구 아파트 전세 시세 알려주세요", "서초동 매매가 얼마나 올랐나요?"\n     * 복합: "강남구 시세 확인하고 대출 가능 금액도 계산해줘"\n   - 키워드: 시세, 가격, 매매가, 전세가, 월세, 시장, 동향, 평균, 지역명, 상승률, 하락률\n   - 필요한 처리: 부동산 시세 데이터 조회, 지역별 가격 분석\n\n3. **LOAN_CONSULT (대출상담)**\n   - 설명: 주택담보대출, 전세자금대출 등 금융 관련 질문\n   - 예시:\n     * 단순: "전세자금대출 한도가 얼마인가요?", "LTV가 뭔가요?"\n     * 복합: "대출 한도 확인하고 금리 비교도 해주세요"\n   - 키워드: 대출, 금리, 한도, 조건, 상환, LTV, DTI, DSR, 담보, 금융, 은행\n   - 필요한 처리: 대출 상품 조회, 금리 정보 검색, 한도 계산\n\n4. **CONTRACT_CREATION (계약서작성)**\n   - 설명: 새로운 계약서나 문서를 작성해달라는 요청\n   - 예시:\n     * 단순: "임대차계약서 작성해주세요", "전세계약서 초안 만들어주세요"\n     * 복합: "계약서 작성하고 주의사항도 검토해주세요"\n   - 키워드: 작성, 만들, 생성, 초안, 계약서, 문서, 양식\n   - 필요한 처리: 문서 생성 에이전트 호출, 템플릿 기반 작성\n\n5. **CONTRACT_REVIEW (계약서검토)**\n   - 설명: 기존 계약서나 문서를 검토해달라는 요청\n   - 예시:\n     * 단순: "이 계약서 검토해주세요", "특약사항 문제없나요?"\n     * 복합: "계약서 검토하고 수정사항도 제안해주세요"\n   - 키워드: 검토, 확인, 점검, 리뷰, 분석해, 살펴봐, 체크\n   - 필요한 처리: 문서 분석, 위험 요소 식별, 개선사항 제안\n\n6. **COMPREHENSIVE (종합분석)**\n   - 설명: 여러 측면을 종합적으로 분석해달라는 요청, 또는 복잡한 상황에 대한 해결책 요청\n   - 예시:\n     * 단순: "이 물건 전체적으로 분석해주세요"\n     * 복합: "시세, 법률, 대출 모두 검토해서 종합 의견 주세요"\n     * 해결형: "10년 거주했는데 전세금 3억을 10억으로 올려달래. 어떻게 해야 해?"\n     * 상황+해결: "집주인이 계약 갱신 거부했어. 법적으로 어떻게 대응해야 할까?"\n   - 키워드: 종합, 전체, 모든, 전반적, 종합적, 평가, 분석, 어떻게, 방법, 해결, 대처\n   - 패턴: 구체적 상황 설명 + "어떻게/방법/해결" 요청\n   - 필요한 처리: 다중 데이터 소스 통합 분석, 상황 평가, 해결책 제시\n\n7. **RISK_ANALYSIS (리스크분석)**\n   - 설명: 위험 요소나 주의사항에 대한 질문\n   - 예시:\n     * 단순: "이 계약 위험한가요?", "주의할 점 알려주세요"\n     * 복합: "리스크 분석하고 대안도 제시해주세요"\n   - 키워드: 위험, 리스크, 주의, 문제점, 조심, 걱정, 우려\n   - 필요한 처리: 위험 요소 분석, 주의사항 추출\n\n8. **UNCLEAR (불분명)**\n   - 설명: 의도를 명확히 파악하기 어려운 질문\n   - 예시: "이거 좀 봐주세요", "어떻게 해야 할까요?", "도와주세요"\n   - 처리: 추가 질문으로 의도 명확화 필요\n\n9. **IRRELEVANT (무관)**\n   - 설명: 부동산과 전혀 관련 없는 질문\n   - 예시: "날씨 어때?", "저녁 뭐 먹지?", "주식 추천해줘"\n   - 처리: 부동산 관련 질문을 유도\n\n## 복합 질문 예시와 분석 (CoT 적용):\n\n### 예시 1: "강남구 아파트 시세 알려주고 전세자금대출 가능한지도 확인해줘"\n**CoT 분석**:\n1. 구조: 두 개의 요청 ("시세" + "대출")\n2. 유형: 정보 확인형 (둘 다)\n3. 복잡도: 중 (두 가지 독립적 조회)\n4. 필요 처리: 검색 + 계산/분석\n\n**결론**:\n- 주 의도: MARKET_INQUIRY (시세 조회가 먼저 필요)\n- 부가 의도: LOAN_CONSULT (대출 확인)\n- 분해: ["강남구 아파트 시세 조회", "전세자금대출 가능 여부 확인"]\n\n### 예시 2: "이 계약서 검토해서 위험한 부분 있는지 알려주고 수정 제안도 해줘"\n**CoT 분석**:\n1. 구조: 검토 + 위험 평가 + 수정안\n2. 유형: 평가/판단형 + 해결책 요청형\n3. 복잡도: 고 (3단계 처리)\n4. 필요 처리: 검토 + 분석 + 문서 생성\n\n**결론**:\n- 주 의도: CONTRACT_REVIEW (계약서 검토)\n- 부가 의도: RISK_ANALYSIS (위험 분석)\n- 분해: ["계약서 전체 검토", "위험 요소 식별", "수정사항 제안"]\n\n### 예시 3: "집주인이 짜증나, 10년 살았는데 전세금 3억을 10억으로 올려달래. 법적으로 해결방법 알려줘"\n**CoT 분석**:\n1. 구조: 상황 설명 (10년 거주, 3억→10억) + 해결책 요청\n2. 유형: 해결책 요청형 (단순 정보 X)\n3. 복잡도: 고 (구체적 상황 + 수치 비교 + 법률 + 대응방안)\n4. 필요 처리: 법률 검색 + 상황 분석 + 해결책 제시\n\n**결론**:\n- 주 의도: COMPREHENSIVE (복잡한 상황에 대한 종합 해결)\n- 부가 의도: LEGAL_CONSULT, RISK_ANALYSIS\n- 분해: ["전세금 인상 한도 법률 조회", "3억→10억 인상의 타당성 분석", "구체적 대응 방안 제시"]\n- **이유**: "법적으로"라는 키워드가 있지만, 단순 법률 확인이 아니라 구체적 상황에 대한 해결책을 요구하므로 COMPREHENSIVE\n\n### 예시 4: "전세금 인상률 상한이 얼마야?"\n**CoT 분석**:\n1. 구조: 단순 사실 확인\n2. 유형: 정보 확인형\n3. 복잡도: 저 (단일 개념)\n4. 필요 처리: 검색만\n\n**결론**:\n- 주 의도: LEGAL_CONSULT (법률 정보 조회)\n- 부가 의도: 없음\n- 분해: 필요 없음\n\n## 응답 형식 (JSON 형식으로 응답):\n\n```json\n{\n    "intent": "LEGAL_CONSULT",\n    "confidence": 0.9,\n    "keywords": ["전세금", "인상", "제한"],\n    "sub_intents": [],\n    "is_compound": false,\n    "decomposed_tasks": [],\n    "entities": {\n        "location": "강남구",\n        "price": "5억",\n        "contract_type": "전세",\n        "date": "2024년",\n        "area": "84㎡",\n        "action_verbs": ["확인", "검토"]\n    },\n    "reasoning": "전세금 인상에 대한 법률 질문이므로 LEGAL_CONSULT로 분류"\n}\n```\n\n응답 규칙:\n- intent: 위 9개 카테고리 중 하나 (대문자_언더스코어 형식)\n- confidence: 0.0~1.0 (0.8 이상이면 매우 확실, 0.5 미만이면 불확실)\n- keywords: 추출된 주요 키워드 목록\n- sub_intents: 복합 질문일 경우 부가적인 의도들\n- is_compound: 복합 질문 여부 (true/false)\n- decomposed_tasks: 복합 질문을 분해한 개별 작업들\n- entities: 추출된 엔티티 정보\n- reasoning: **반드시 CoT 5단계를 거쳐 분석한 과정을 포함** (구조 파악 → 유형 판단 → 복잡도 평가 → 필요 처리 → 최종 검증)\n\n## reasoning 작성 예시:\n"1단계(구조): 상황 설명(10년 거주, 3억→10억) + 해결책 요청 포함.\n2단계(유형): 해결책 요청형 - 단순 정보가 아닌 대응방안 필요.\n3단계(복잡도): 고 - 구체적 수치 비교와 복잡한 상황.\n4단계(처리): 법률 검색 + 상황 분석 + 해결책 제시 필요.\n5단계(검증): LEGAL_CONSULT만으로는 불충분, 종합적 분석 필요 → COMPREHENSIVE 선택"\n\n## 판단 가이드:\n- 여러 의도가 섞여있다면, 가장 주된 의도를 intent에, 나머지를 sub_intents에 기록\n- "그리고", "또한", "함께", "같이" 등의 연결어가 있으면 복합 질문일 가능성 높음\n- 법률 관련 키워드가 있으면 LEGAL_CONSULT 우선\n- 가격/시세 언급이 명확하면 MARKET_INQUIRY\n- 계약서라는 단어와 함께 "작성/만들기"가 있으면 CONTRACT_CREATION\n- 계약서라는 단어와 함께 "검토/확인"이 있으면 CONTRACT_REVIEW\n- 불확실하면 confidence를 낮게 설정하고 UNCLEAR 선택\n- 복합 질문은 is_compound를 true로 설정하고 개별 작업으로 분해\n\n분석할 질문: 전세 시세 확인하고 리스크 평가해줘'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 16:00:32,380 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 16:00:32,380 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 16:00:32,380 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 16:00:32,380 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 16:00:32,381 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 16:00:32,381 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 16:00:38,895 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 07:00:38 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'6298'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'6322'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9956'), (b'x-ratelimit-remaining-tokens', b'197243'), (b'x-ratelimit-reset-requests', b'6m14.666s'), (b'x-ratelimit-reset-tokens', b'827ms'), (b'x-request-id', b'req_1b4fa541a2214e3795a528ed389df6ae'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b0ae63e553091-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 16:00:38,896 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 16:00:38,896 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 16:00:38,901 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 16:00:38,901 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 16:00:38,901 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 16:00:38,901 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 07:00:38 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '6298', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '6322', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9956', 'x-ratelimit-remaining-tokens': '197243', 'x-ratelimit-reset-requests': '6m14.666s', 'x-ratelimit-reset-tokens': '827ms', 'x-request-id': 'req_1b4fa541a2214e3795a528ed389df6ae', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b0ae63e553091-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 16:00:38,901 - openai._base_client - DEBUG - request_id: req_1b4fa541a2214e3795a528ed389df6ae
2025-10-05 16:00:38,902 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: intent_analysis | Model: gpt-4o-mini-2024-07-18 | Tokens: 3433 (prompt: 3180, completion: 253)
2025-10-05 16:00:38,902 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM Intent Analysis Result: {'intent': 'COMPREHENSIVE', 'confidence': 0.85, 'keywords': ['전세', '시세', '리스크', '평가'], 'sub_intents': ['MARKET_INQUIRY', 'RISK_ANALYSIS'], 'is_compound': True, 'decomposed_tasks': ['전세 시세 확인', '리스크 평가'], 'entities': {'location': None, 'price': None, 'contract_type': '전세', 'date': None, 'area': None, 'action_verbs': ['확인', '평가']}, 'reasoning': '1단계(구조): 전세 시세 확인 요청 + 리스크 평가 요청 포함. 2단계(유형): 두 가지 요청이 있어 정보 확인형과 평가형이 결합됨. 3단계(복잡도): 중 - 두 가지 독립적 조회가 필요. 4단계(처리): 시세 조회와 리스크 분석이 필요. 5단계(검증): 두 가지 요청이 있으므로 COMPREHENSIVE로 분류.'}
2025-10-05 16:00:38,902 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-27f624c5-4e65-4b33-9aab-9814f076590a', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 Agent 선택 전문가입니다.\n사용자의 요청에 가장 적합한 Agent/Team을 선택하는 것이 목표입니다.\n\n## 현재 상황\n\n**사용자 질문:** 전세 시세 확인하고 리스크 평가해줘\n**분석된 의도:** 종합분석\n**추출된 키워드:** [\'전세\', \'시세\', \'리스크\', \'평가\']\n\n## 사용 가능한 Agent/Team 정보\n\n{\'search_team\': {\'name\': \'search_team\', \'capabilities\': \'법률 검색, 부동산 시세 조회, 대출 상품 검색\', \'tools\': [\'legal_search\', \'market_data\', \'loan_data\'], \'use_cases\': [\'법률 상담\', \'시세 조회\', \'대출 정보\']}, \'analysis_team\': {\'name\': \'analysis_team\', \'capabilities\': \'데이터 분석, 리스크 평가, 인사이트 생성, 추천\', \'tools\': [\'data_analyzer\', \'risk_evaluator\'], \'use_cases\': [\'시장 분석\', \'리스크 평가\', \'투자 분석\']}, \'document_team\': {\'name\': \'document_team\', \'capabilities\': \'계약서 작성, 문서 생성, 문서 검토\', \'tools\': [\'document_generator\', \'contract_reviewer\'], \'use_cases\': [\'계약서 작성\', \'문서 검토\']}}\n\n## Agent 역할 및 상세 가이드\n\n### 1. search_team (검색 팀)\n- **주요 기능**: 정보 검색 및 데이터 수집\n- **전문 분야**:\n  * 법률 정보 검색 (전세법, 임대차보호법, 부동산 관련 법규)\n  * 부동산 시세 조회 (매매가, 전세가, 월세, 실거래가)\n  * 대출 상품 정보 검색 (금리, 한도, 조건)\n  * 지역 정보 및 인프라 조회\n- **도구**: legal_search, market_data, loan_data\n- **적합한 작업**: 정보 조회, 데이터 수집, 법률 확인, 시세 파악\n- **예시**:\n  * "전세금 5% 인상 가능한가요?"\n  * "강남구 아파트 전세 시세"\n  * "전세자금대출 한도 얼마?"\n\n### 2. analysis_team (분석 팀)\n- **주요 기능**: 데이터 분석 및 평가\n- **전문 분야**:\n  * 시장 동향 분석 (상승률, 하락률, 추세)\n  * 리스크 평가 (계약, 투자 위험도)\n  * 투자 수익률 계산 (ROI, 월세 수익률)\n  * 대출 한도 및 조건 분석 (LTV, DTI, DSR)\n  * 비교 분석 (지역별, 상품별)\n- **도구**: data_analyzer, risk_evaluator, calculator\n- **적합한 작업**: 데이터 분석, 리스크 평가, 계산, 비교, 예측\n- **의존성**: 보통 search_team의 데이터가 필요\n- **예시**:\n  * "이 지역 투자 가치 분석해줘"\n  * "계약 리스크 평가해줘"\n  * "대출 가능 금액 계산해줘"\n\n### 3. document_team (문서 팀)\n- **주요 기능**: 문서 생성 및 관리\n- **전문 분야**:\n  * 계약서 작성 (임대차, 매매, 전세)\n  * 문서 템플릿 관리\n  * 특약사항 생성\n  * 계약서 수정안 작성\n  * 법률 문서 검토\n- **도구**: document_generator, contract_template, contract_reviewer\n- **적합한 작업**: 문서 작성, 계약서 생성, 문서 수정, 검토\n- **예시**:\n  * "임대차계약서 작성해줘"\n  * "특약사항 추가해줘"\n  * "계약서 수정안 만들어줘"\n\n## Chain-of-Thought Agent 선택 프로세스\n\n다음 단계를 **순서대로** 따라 최적의 Agent 조합을 선택하세요:\n\n### 1단계: 질문 요구사항 파악\n- 단순 정보 조회인가? → search_team만 필요\n- 판단/평가가 필요한가? → search + analysis 필요\n- 해결책 제시가 필요한가? → search + analysis 필요\n- 문서 생성이 필요한가? → document_team 추가\n\n### 2단계: 작업 복잡도 판단\n- **단순** (검색만): "~이 뭐야?", "~알려줘" → search_team\n- **중간** (검색+판단): "~괜찮아?", "~적절해?" → search + analysis\n- **복잡** (종합 해결): 구체적 상황 + "어떻게 해야 해?" → search + analysis\n\n### 3단계: 의존성 분석\n- 독립적 작업: 단일 팀으로 처리 가능\n- 순차적 의존: 이전 결과 필요 → 여러 팀 순서대로\n- 병렬 가능: 동시 조회 가능 → coordination: "parallel"\n\n### 4단계: 최종 검증\n- 선택한 팀들로 질문에 완전히 답변 가능한가?\n- 불필요한 팀이 포함되지 않았는가?\n- 순서가 논리적인가? (데이터 흐름 고려)\n\n### 중요 원칙:\n- **법률 키워드만으로 판단하지 말 것**: "법적으로 어떻게 해야 해?" = 법률 검색 + 분석 필요\n- **상황 설명 + 해결책 요청** = 반드시 analysis_team 포함\n- **구체적 수치 비교** (3억→10억 같은) = analysis_team 필요\n\n## 의도별 Agent 매핑 가이드 (기본 가이드 - CoT로 조정 가능)\n\n| 의도 (Intent) | 기본 조합 | 상황별 조정 |\n|--------------|-----------|-------------|\n| LEGAL_CONSULT | ["search_team"] | 해결책 요청시 → + analysis_team |\n| MARKET_INQUIRY | ["search_team"] | 비교/평가시 → + analysis_team |\n| LOAN_CONSULT | ["search_team", "analysis_team"] | 계산 필수 |\n| CONTRACT_CREATION | ["document_team"] | 검토 후 작성 → search + document |\n| CONTRACT_REVIEW | ["search_team", "analysis_team"] | 법률 검토 + 리스크 분석 |\n| COMPREHENSIVE | ["search_team", "analysis_team"] | **항상 분석 포함** |\n| RISK_ANALYSIS | ["analysis_team"] | 법률 근거 필요시 → search + analysis |\n| UNCLEAR | ["search_team", "analysis_team"] | 포괄적 대응 |\n\n**중요**: 위 매핑은 **기본 가이드**일 뿐입니다.\n실제 질문의 내용(CoT 분석 결과)에 따라 조정하세요!\n\n## 복합 질문 처리 예시 (CoT 적용)\n\n### 예시 1: 순차적 처리\n질문: "강남구 시세 확인하고 투자 가치 분석해줘"\n**CoT 분석**:\n1. 요구사항: 시세 조회 + 투자 가치 평가\n2. 복잡도: 중간 (검색 + 분석)\n3. 의존성: 시세 데이터 → 투자 분석 (순차)\n4. 검증: search만으로는 "투자 가치 평가" 불가능\n\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "1단계: 시세 조회+투자 평가 필요. 2단계: 중간 복잡도. 3단계: 순차 의존. 4단계: search로 시세 수집 후 analysis로 투자 가치 평가 필요",\n    "coordination": "sequential"\n}\n```\n\n### 예시 2: 단순 정보 조회\n질문: "전세금 인상률 한도가 얼마야?"\n**CoT 분석**:\n1. 요구사항: 단순 사실 확인\n2. 복잡도: 낮음 (정보 확인형)\n3. 의존성: 없음\n4. 검증: search_team만으로 충분\n\n```json\n{\n    "selected_agents": ["search_team"],\n    "reasoning": "1단계: 단순 정보 조회. 2단계: 저복잡도. 3단계: 독립적. 4단계: 법률 검색만으로 답변 가능",\n    "coordination": "single"\n}\n```\n\n### 예시 3: 해결책 요청 (핵심 예시!)\n질문: "집주인이 전세금 3억을 10억으로 올려달래. 법적으로 어떻게 해야 해?"\n의도: COMPREHENSIVE\n**CoT 분석**:\n1. 요구사항: 상황 설명 + 해결책 요청\n2. 복잡도: 높음 (구체적 상황 + 수치 비교)\n3. 의존성: 법률 확인 → 상황 분석 → 해결책 제시\n4. 검증: "법적으로"만 보고 search만 선택하면 불충분! 해결책 제시 필요\n\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "1단계: 법률 + 상황 분석 + 해결책 필요. 2단계: 고복잡도(3억→10억 비정상). 3단계: 순차(법률 확인 후 타당성 분석). 4단계: \'어떻게 해야\' = 단순 법률 조회 아님, 분석 필수",\n    "coordination": "sequential",\n    "confidence": 0.95\n}\n```\n\n## 응답 형식 (JSON)\n\n```json\n{\n    "selected_agents": ["선택된 agent/team 목록"],\n    "reasoning": "선택 이유를 구체적으로 설명. 각 Agent의 역할과 처리 순서 포함",\n    "coordination": "single/sequential/parallel/pipeline",\n    "dependencies": {"agent2": ["agent1"]},\n    "estimated_time": 30,\n    "confidence": 0.9\n}\n```\n\n## 선택 가이드라인\n\n1. **최소 Agent 원칙**: 가능한 적은 수의 Agent로 처리\n2. **전문성 우선**: 해당 작업에 가장 전문적인 Agent 선택\n3. **효율성 고려**: 병렬 처리 가능한 경우 명시\n4. **의존성 관리**: 데이터 흐름을 고려한 순서 지정\n5. **폴백 전략**: 불확실한 경우 ["search_team", "analysis_team"] 조합\n\n## 주의사항\n\n- selected_agents는 반드시 배열 형태\n- Agent 이름은 정확히: "search_team", "analysis_team", "document_team"\n- 최소 1개, 최대 3개 선택\n- 순서는 실행 우선순위 (앞에 있을수록 먼저 실행)\n- reasoning은 상세하고 논리적으로 작성\n- coordination 필드로 실행 방식 명시\n- 복합 질문의 경우 의존성 관계 명확히 표시'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 16:00:38,903 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 16:00:38,903 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 16:00:38,903 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 16:00:38,903 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 16:00:38,904 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 16:00:38,904 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 16:00:43,930 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 07:00:43 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'4728'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'4751'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9956'), (b'x-ratelimit-remaining-tokens', b'197888'), (b'x-ratelimit-reset-requests', b'6m16.784s'), (b'x-ratelimit-reset-tokens', b'633ms'), (b'x-request-id', b'req_e52611a03f9045beace6fd4af5101ad7'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b0b0ef8513091-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 16:00:43,930 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 16:00:43,930 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 16:00:43,931 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 16:00:43,931 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 16:00:43,931 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 16:00:43,931 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 07:00:43 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '4728', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '4751', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9956', 'x-ratelimit-remaining-tokens': '197888', 'x-ratelimit-reset-requests': '6m16.784s', 'x-ratelimit-reset-tokens': '633ms', 'x-request-id': 'req_e52611a03f9045beace6fd4af5101ad7', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b0b0ef8513091-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 16:00:43,931 - openai._base_client - DEBUG - request_id: req_e52611a03f9045beace6fd4af5101ad7
2025-10-05 16:00:43,931 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: agent_selection | Model: gpt-4o-mini-2024-07-18 | Tokens: 2532 (prompt: 2360, completion: 172)
2025-10-05 16:00:43,931 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM agent selection reasoning: 1단계: 전세 시세 확인과 리스크 평가가 필요하므로, 시세 조회를 위한 search_team과 리스크 평가를 위한 analysis_team이 필요합니다. 2단계: 중간 복잡도로, 시세 조회 후 리스크 평가가 이루어져야 합니다. 3단계: 시세 데이터가 리스크 평가에 필요하므로 순차적 의존성이 있습니다. 4단계: search_team으로 시세를 확인한 후, analysis_team으로 리스크를 평가할 수 있습니다.
2025-10-05 16:00:43,931 - app.service_agent.cognitive_agents.planning_agent - INFO - ✅ Primary LLM selected agents: ['search_team', 'analysis_team']
2025-10-05 16:00:43,931 - __main__ - INFO -   의도: 종합분석
2025-10-05 16:00:43,931 - __main__ - INFO -   신뢰도: 0.85
2025-10-05 16:00:43,932 - __main__ - INFO -   추천 Agent: ['search_team', 'analysis_team']
2025-10-05 16:00:43,932 - __main__ - INFO - 
[Step 2] Query Decomposition...
2025-10-05 16:00:43,932 - app.service_agent.cognitive_agents.query_decomposer - INFO - Decomposing query: 전세 시세 확인하고 리스크 평가해줘...
2025-10-05 16:00:43,932 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-1d786678-f5cf-4e30-8b5b-79f244b2478c', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 질문 분해 전문가입니다.\n복잡한 사용자 질문을 독립적으로 처리 가능한 작업 단위로 분해하는 것이 목표입니다.\n\n## Chain-of-Thought 분해 프로세스:\n\n### 1단계: 복합 질문 여부 판단\n- 단순 정보 조회만 필요한가? → is_compound: false\n- **다음 중 하나라도 해당하면 is_compound: true**:\n  * "그리고", "그 다음", "한 후" 같은 연결어로 여러 요청 연결\n  * 명시적으로 2개 이상의 작업 요청 (예: "시세 확인하고 대출 계산해줘")\n  * 상황 설명 + 해결책 요청 (예: "3억→10억 올려달래. 어떻게 해야 해?")\n  * 해결책을 위해 여러 단계 처리 필요 (검색 → 분석 → 제안)\n\n### 2단계: 필요 작업 식별\n- 정보 수집이 필요한가? → search 작업\n- 평가/판단이 필요한가? → analysis 작업\n- 문서 생성이 필요한가? → generation 작업\n- **해결책 요청**인가? → search + analysis (최소 2개)\n\n### 3단계: 작업 순서 결정\n- 독립적 작업: 병렬 가능\n- 이전 결과 필요: 순차 실행 (depends_on 설정)\n\n## 중요 원칙:\n1. 각 작업은 하나의 명확한 목표를 가져야 합니다\n2. 작업 간 의존성을 명확히 파악해야 합니다\n3. 병렬 처리 가능한 작업은 구분해야 합니다\n4. **주의**: "어떻게 해야", "방법 알려줘" 같은 해결책 요청은 복합 질문!\n\n## 작업 유형 (type):\n- search: 정보 검색 (법률, 시세, 대출 정보 등)\n- analysis: 데이터 분석 (리스크 평가, 시장 분석 등)\n- generation: 문서 생성 (계약서 작성 등)\n- review: 검토/평가 (계약서 검토, 조건 확인 등)\n- calculation: 계산/산출 (대출 한도, 세금 등)\n- comparison: 비교 분석 (여러 옵션 비교)\n\n## 담당 팀 (agent):\n- search_team: 법률, 시세, 대출 정보 검색\n- analysis_team: 데이터 분석, 리스크 평가, 계산\n- document_team: 문서 생성, 계약서 작성\n\n## 학습 예시:\n\n### 예시 1: 복합 질문 (순차적)\n질문: "강남구 아파트 시세 확인하고 대출 가능 금액 계산해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "강남구 아파트 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "대출 가능 금액 계산",\n            "type": "calculation",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "required_data": {"price": "task_0.result.price"},\n            "estimated_time": 15\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "시세 정보가 있어야 대출 금액 계산이 가능하므로 순차 실행"\n}\n```\n\n### 예시 2: 복합 질문 (병렬 가능)\n질문: "이 지역 전세 시세와 매매 시세 모두 알려주고 비교 분석해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "전세 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "매매 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "전세/매매 시세 비교 분석",\n            "type": "comparison",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0", "task_1"],\n            "required_data": {\n                "lease_price": "task_0.result",\n                "sale_price": "task_1.result"\n            },\n            "estimated_time": 25\n        }\n    ],\n    "execution_mode": "mixed",\n    "parallel_groups": [["task_0", "task_1"], ["task_2"]],\n    "reasoning": "시세 조회는 독립적이므로 병렬 처리, 비교는 두 결과 필요"\n}\n```\n\n### 예시 3: 복합 질문 (3단계 이상)\n질문: "이 계약서 검토해서 위험한 부분 찾고 수정안 만들어서 최종 계약서 작성해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "계약서 내용 전체 검토",\n            "type": "review",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 30\n        },\n        {\n            "description": "위험 요소 및 문제점 분석",\n            "type": "analysis",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "estimated_time": 25\n        },\n        {\n            "description": "수정안 제안 생성",\n            "type": "generation",\n            "agent": "document_team",\n            "priority": 3,\n            "depends_on": ["task_1"],\n            "estimated_time": 20\n        },\n        {\n            "description": "최종 계약서 작성",\n            "type": "generation",\n            "agent": "document_team",\n            "priority": 4,\n            "depends_on": ["task_2"],\n            "estimated_time": 30\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "각 단계가 이전 결과에 의존하므로 순차 실행 필요"\n}\n```\n\n### 예시 4: 단순 질문 (분해 불필요)\n질문: "전세금 인상률 상한이 얼마야?"\n분해:\n```json\n{\n    "is_compound": false,\n    "sub_tasks": [\n        {\n            "description": "전세금 인상률 상한 법률 정보 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 15\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "단일 정보 조회 요청으로 분해 불필요"\n}\n```\n\n### 예시 5: 조건부 실행\n질문: "이 물건 시세 확인하고 적정가면 대출 상담도 받고 싶어"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "물건 시세 조회 및 적정성 평가",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 25\n        },\n        {\n            "description": "대출 상담 정보 제공",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "optional": true,\n            "context": {"condition": "if_reasonable_price"},\n            "estimated_time": 20\n        }\n    ],\n    "execution_mode": "conditional",\n    "reasoning": "시세 확인 결과에 따라 대출 상담 진행 여부 결정"\n}\n```\n\n### 예시 6: 상황 설명 + 해결책 요청 (핵심 패턴!)\n질문: "집주인이 전세금 3억을 10억으로 올려달래. 법적으로 어떻게 해야 해?"\n**CoT 분석**:\n1. 질문 분석: 상황 설명 + 해결책 요청\n2. 연결어: 없지만, "어떻게 해야" = 해결책 요청\n3. 의존성: 법률 확인 → 상황 분석 → 대응 방안\n4. 복합 여부: **YES** (해결책을 위해 여러 단계 필요)\n\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "전세금 인상 한도 관련 법률 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "3억→10억 인상의 법적 타당성 및 적정성 분석",\n            "type": "analysis",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "required_data": {"legal_limit": "task_0.result", "current": 300000000, "requested": 1000000000},\n            "estimated_time": 25\n        },\n        {\n            "description": "구체적 대응 방안 및 해결책 제시",\n            "type": "analysis",\n            "agent": "analysis_team",\n            "priority": 3,\n            "depends_on": ["task_1"],\n            "estimated_time": 20\n        }\n    ],\n    "execution_mode": "sequential",\n    "confidence": 0.95,\n    "reasoning": "상황 설명+해결책 요청 패턴. \'어떻게 해야\'는 단순 정보 조회가 아닌 종합 해결책 필요. 법률 조회 → 상황 분석 → 해결책 제시 3단계 순차 처리"\n}\n```\n\n## Chain-of-Thought 프로세스:\n\n1. **질문 분석**: 어떤 정보나 작업을 요구하는가?\n2. **연결어 확인**: "그리고", "또한", "해서", "한 후" 등이 있는가?\n3. **의존성 파악**: 어떤 작업이 다른 작업의 결과를 필요로 하는가?\n4. **병렬성 판단**: 독립적으로 실행 가능한 작업이 있는가?\n5. **최적화**: 불필요한 분해는 없는가?\n\n## 응답 형식 (JSON):\n\n{\n    "is_compound": true/false,\n    "sub_tasks": [\n        {\n            "description": "작업 설명",\n            "type": "작업 유형",\n            "agent": "담당 팀",\n            "priority": 우선순위 (1이 가장 높음),\n            "depends_on": ["선행 작업 ID 리스트"],\n            "required_data": {"필요한 데이터 매핑"},\n            "estimated_time": 예상 소요 시간(초),\n            "optional": true/false,\n            "context": {"추가 컨텍스트"}\n        }\n    ],\n    "execution_mode": "sequential/parallel/mixed/conditional",\n    "parallel_groups": [["병렬 실행 가능한 작업 ID 그룹"]],\n    "confidence": 0.0-1.0,\n    "reasoning": "분해 결정의 이유와 근거"\n}\n\n## 분해 가이드라인:\n\n1. **분해가 필요한 경우**:\n   - 여러 종류의 정보를 요청하는 경우\n   - 순차적 처리가 필요한 경우 (A의 결과로 B 수행)\n   - 서로 다른 팀의 전문성이 필요한 경우\n\n2. **분해가 불필요한 경우**:\n   - 단일 정보 조회\n   - 단순한 질문-답변\n   - 하나의 팀에서 완전히 처리 가능한 경우\n\n3. **병렬 처리 기준**:\n   - 서로 독립적인 정보 조회\n   - 의존성이 없는 분석 작업\n   - 동시에 진행해도 충돌하지 않는 작업\n\n4. **우선순위 설정**:\n   - 의존성이 없는 작업: priority 1\n   - 1차 의존 작업: priority 2\n   - 2차 의존 작업: priority 3\n   - 이런 식으로 증가\n\n현재 의도: 종합분석\n추출된 엔티티: None\n\n분석할 질문: 전세 시세 확인하고 리스크 평가해줘'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 16:00:43,932 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 16:00:43,933 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 16:00:43,933 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 16:00:43,933 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 16:00:43,933 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 16:00:43,933 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 16:00:47,253 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 07:00:47 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'3101'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'3124'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9955'), (b'x-ratelimit-remaining-tokens', b'197337'), (b'x-ratelimit-reset-requests', b'6m20.703s'), (b'x-ratelimit-reset-tokens', b'798ms'), (b'x-request-id', b'req_0b33ad7a08f84f30bbd28fd966e78a29'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b0b2e6f433091-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 16:00:47,253 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 16:00:47,253 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 16:00:47,259 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 16:00:47,259 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 16:00:47,259 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 16:00:47,259 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 07:00:47 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '3101', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '3124', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9955', 'x-ratelimit-remaining-tokens': '197337', 'x-ratelimit-reset-requests': '6m20.703s', 'x-ratelimit-reset-tokens': '798ms', 'x-request-id': 'req_0b33ad7a08f84f30bbd28fd966e78a29', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b0b2e6f433091-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 16:00:47,259 - openai._base_client - DEBUG - request_id: req_0b33ad7a08f84f30bbd28fd966e78a29
2025-10-05 16:00:47,259 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: query_decomposition | Model: gpt-4o-mini-2024-07-18 | Tokens: 2867 (prompt: 2690, completion: 177)
2025-10-05 16:00:47,259 - app.service_agent.cognitive_agents.query_decomposer - INFO - Successfully decomposed into 2 tasks
2025-10-05 16:00:47,259 - __main__ - INFO -   복합 질문: True
2025-10-05 16:00:47,259 - __main__ - INFO -   작업 수: 2
2025-10-05 16:00:47,259 - __main__ - INFO -   실행 모드: sequential
2025-10-05 16:00:47,259 - __main__ - INFO -     - task_0: 전세 시세 조회 (search_team)
2025-10-05 16:00:47,259 - __main__ - INFO -     - task_1: 전세 시세에 대한 리스크 평가 (analysis_team)
2025-10-05 16:00:47,259 - __main__ - INFO - 
[Step 3] Comprehensive Plan 생성...
2025-10-05 16:00:47,260 - app.service_agent.cognitive_agents.planning_agent - INFO - Creating comprehensive plan for query: 전세 시세 확인하고 리스크 평가해줘...
2025-10-05 16:00:47,260 - app.service_agent.cognitive_agents.planning_agent - INFO - Analyzing intent for query: 전세 시세 확인하고 리스크 평가해줘...
2025-10-05 16:00:47,260 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-4279cd9b-c215-4313-a0b4-72cb72679b14', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 의도 분석 전문가입니다.\n사용자의 질문을 정확히 이해하고, 어떤 종류의 도움이 필요한지 분류해야 합니다.\n\n## Chain-of-Thought 분석 프로세스\n\n질문을 분석할 때 다음 단계를 **순서대로** 따르세요:\n\n### 1단계: 질문 구조 파악\n- 단순 정보 요청인가? (예: "~이 뭐야?", "~알려줘")\n- 상황 설명이 포함되어 있는가? (배경, 현재 상태)\n- 구체적 수치나 데이터가 있는가? (금액, 비율, 기간 등)\n- 문제 해결을 요구하는가? (예: "어떻게 해야 해?", "방법 알려줘")\n\n### 2단계: 요청 유형 판단\n- **정보 확인형**: 사실, 개념, 규정 확인 → 검색만으로 충분\n- **평가/판단형**: "괜찮아?", "적절해?", "문제있어?" → 검색 + 분석 필요\n- **해결책 요청형**: "어떻게?", "방법?", "대처?" → 검색 + 분석 + 제안 필요\n- **비교/선택형**: "A vs B", "어느게 나아?" → 검색 + 분석(비교) 필요\n\n### 3단계: 복잡도 평가\n- **저**: 단일 개념/사실 확인 (예: "전세금 인상률 한도?")\n- **중**: 특정 상황 + 판단 (예: "3억을 5억으로 올려달래. 가능해?")\n- **고**: 복잡한 상황 + 여러 조건 + 해결책 (예: "10년 거주, 3억→10억 요구. 어떻게 해야 해?")\n\n### 4단계: 필요한 처리 결정\n- **검색만**: 정보 확인형 + 저복잡도\n- **검색+분석**: 평가/판단형 OR 중복잡도 OR 수치 비교 포함\n- **종합처리**: 해결책 요청형 OR 고복잡도 OR 여러 조건 동시 고려\n\n### 5단계: 최종 검증\n- 선택한 의도로 사용자 질문에 완전히 답변 가능한가?\n- 단순 정보 제공으로 끝나는가, 아니면 추가 분석/판단이 필요한가?\n- 상황 설명이 있으면서 "해결", "방법", "어떻게" 등이 있으면 → COMPREHENSIVE 고려\n\n## 중요: 복합 질문 처리\n복합적인 질문(여러 의도가 섞인 질문)의 경우, 가장 핵심적인 의도를 파악하되,\nsub_intents 필드에 부가적인 의도들도 함께 기록해주세요.\n\n**특히 주의**:\n- 법률 키워드가 있어도, "해결방법", "어떻게 해야" 같은 표현이 있으면 단순 LEGAL_CONSULT가 아닐 수 있음\n- 구체적 상황(금액, 기간 등) + 해결책 요구 = COMPREHENSIVE 또는 복합 의도로 분류\n\n## 분류 카테고리 설명:\n\n1. **LEGAL_CONSULT (법률상담)**\n   - 설명: 부동산 관련 법률, 권리, 의무에 대한 질문\n   - 예시:\n     * 단순: "전세금 5% 인상이 가능한가요?", "임대차계약 갱신 거부할 수 있나요?"\n     * 복합: "전세금 인상 가능한지 확인하고 법적 근거도 알려주세요"\n   - 키워드: 법, 전세, 임대, 보증금, 계약, 권리, 의무, 갱신, 임차인, 임대인, 법률, 규정, 조항\n   - 필요한 처리: 법률 데이터베이스 검색, 관련 법조항 찾기\n\n2. **MARKET_INQUIRY (시세조회)**\n   - 설명: 부동산 시장 가격, 시세, 거래 동향에 대한 질문\n   - 예시:\n     * 단순: "강남구 아파트 전세 시세 알려주세요", "서초동 매매가 얼마나 올랐나요?"\n     * 복합: "강남구 시세 확인하고 대출 가능 금액도 계산해줘"\n   - 키워드: 시세, 가격, 매매가, 전세가, 월세, 시장, 동향, 평균, 지역명, 상승률, 하락률\n   - 필요한 처리: 부동산 시세 데이터 조회, 지역별 가격 분석\n\n3. **LOAN_CONSULT (대출상담)**\n   - 설명: 주택담보대출, 전세자금대출 등 금융 관련 질문\n   - 예시:\n     * 단순: "전세자금대출 한도가 얼마인가요?", "LTV가 뭔가요?"\n     * 복합: "대출 한도 확인하고 금리 비교도 해주세요"\n   - 키워드: 대출, 금리, 한도, 조건, 상환, LTV, DTI, DSR, 담보, 금융, 은행\n   - 필요한 처리: 대출 상품 조회, 금리 정보 검색, 한도 계산\n\n4. **CONTRACT_CREATION (계약서작성)**\n   - 설명: 새로운 계약서나 문서를 작성해달라는 요청\n   - 예시:\n     * 단순: "임대차계약서 작성해주세요", "전세계약서 초안 만들어주세요"\n     * 복합: "계약서 작성하고 주의사항도 검토해주세요"\n   - 키워드: 작성, 만들, 생성, 초안, 계약서, 문서, 양식\n   - 필요한 처리: 문서 생성 에이전트 호출, 템플릿 기반 작성\n\n5. **CONTRACT_REVIEW (계약서검토)**\n   - 설명: 기존 계약서나 문서를 검토해달라는 요청\n   - 예시:\n     * 단순: "이 계약서 검토해주세요", "특약사항 문제없나요?"\n     * 복합: "계약서 검토하고 수정사항도 제안해주세요"\n   - 키워드: 검토, 확인, 점검, 리뷰, 분석해, 살펴봐, 체크\n   - 필요한 처리: 문서 분석, 위험 요소 식별, 개선사항 제안\n\n6. **COMPREHENSIVE (종합분석)**\n   - 설명: 여러 측면을 종합적으로 분석해달라는 요청, 또는 복잡한 상황에 대한 해결책 요청\n   - 예시:\n     * 단순: "이 물건 전체적으로 분석해주세요"\n     * 복합: "시세, 법률, 대출 모두 검토해서 종합 의견 주세요"\n     * 해결형: "10년 거주했는데 전세금 3억을 10억으로 올려달래. 어떻게 해야 해?"\n     * 상황+해결: "집주인이 계약 갱신 거부했어. 법적으로 어떻게 대응해야 할까?"\n   - 키워드: 종합, 전체, 모든, 전반적, 종합적, 평가, 분석, 어떻게, 방법, 해결, 대처\n   - 패턴: 구체적 상황 설명 + "어떻게/방법/해결" 요청\n   - 필요한 처리: 다중 데이터 소스 통합 분석, 상황 평가, 해결책 제시\n\n7. **RISK_ANALYSIS (리스크분석)**\n   - 설명: 위험 요소나 주의사항에 대한 질문\n   - 예시:\n     * 단순: "이 계약 위험한가요?", "주의할 점 알려주세요"\n     * 복합: "리스크 분석하고 대안도 제시해주세요"\n   - 키워드: 위험, 리스크, 주의, 문제점, 조심, 걱정, 우려\n   - 필요한 처리: 위험 요소 분석, 주의사항 추출\n\n8. **UNCLEAR (불분명)**\n   - 설명: 의도를 명확히 파악하기 어려운 질문\n   - 예시: "이거 좀 봐주세요", "어떻게 해야 할까요?", "도와주세요"\n   - 처리: 추가 질문으로 의도 명확화 필요\n\n9. **IRRELEVANT (무관)**\n   - 설명: 부동산과 전혀 관련 없는 질문\n   - 예시: "날씨 어때?", "저녁 뭐 먹지?", "주식 추천해줘"\n   - 처리: 부동산 관련 질문을 유도\n\n## 복합 질문 예시와 분석 (CoT 적용):\n\n### 예시 1: "강남구 아파트 시세 알려주고 전세자금대출 가능한지도 확인해줘"\n**CoT 분석**:\n1. 구조: 두 개의 요청 ("시세" + "대출")\n2. 유형: 정보 확인형 (둘 다)\n3. 복잡도: 중 (두 가지 독립적 조회)\n4. 필요 처리: 검색 + 계산/분석\n\n**결론**:\n- 주 의도: MARKET_INQUIRY (시세 조회가 먼저 필요)\n- 부가 의도: LOAN_CONSULT (대출 확인)\n- 분해: ["강남구 아파트 시세 조회", "전세자금대출 가능 여부 확인"]\n\n### 예시 2: "이 계약서 검토해서 위험한 부분 있는지 알려주고 수정 제안도 해줘"\n**CoT 분석**:\n1. 구조: 검토 + 위험 평가 + 수정안\n2. 유형: 평가/판단형 + 해결책 요청형\n3. 복잡도: 고 (3단계 처리)\n4. 필요 처리: 검토 + 분석 + 문서 생성\n\n**결론**:\n- 주 의도: CONTRACT_REVIEW (계약서 검토)\n- 부가 의도: RISK_ANALYSIS (위험 분석)\n- 분해: ["계약서 전체 검토", "위험 요소 식별", "수정사항 제안"]\n\n### 예시 3: "집주인이 짜증나, 10년 살았는데 전세금 3억을 10억으로 올려달래. 법적으로 해결방법 알려줘"\n**CoT 분석**:\n1. 구조: 상황 설명 (10년 거주, 3억→10억) + 해결책 요청\n2. 유형: 해결책 요청형 (단순 정보 X)\n3. 복잡도: 고 (구체적 상황 + 수치 비교 + 법률 + 대응방안)\n4. 필요 처리: 법률 검색 + 상황 분석 + 해결책 제시\n\n**결론**:\n- 주 의도: COMPREHENSIVE (복잡한 상황에 대한 종합 해결)\n- 부가 의도: LEGAL_CONSULT, RISK_ANALYSIS\n- 분해: ["전세금 인상 한도 법률 조회", "3억→10억 인상의 타당성 분석", "구체적 대응 방안 제시"]\n- **이유**: "법적으로"라는 키워드가 있지만, 단순 법률 확인이 아니라 구체적 상황에 대한 해결책을 요구하므로 COMPREHENSIVE\n\n### 예시 4: "전세금 인상률 상한이 얼마야?"\n**CoT 분석**:\n1. 구조: 단순 사실 확인\n2. 유형: 정보 확인형\n3. 복잡도: 저 (단일 개념)\n4. 필요 처리: 검색만\n\n**결론**:\n- 주 의도: LEGAL_CONSULT (법률 정보 조회)\n- 부가 의도: 없음\n- 분해: 필요 없음\n\n## 응답 형식 (JSON 형식으로 응답):\n\n```json\n{\n    "intent": "LEGAL_CONSULT",\n    "confidence": 0.9,\n    "keywords": ["전세금", "인상", "제한"],\n    "sub_intents": [],\n    "is_compound": false,\n    "decomposed_tasks": [],\n    "entities": {\n        "location": "강남구",\n        "price": "5억",\n        "contract_type": "전세",\n        "date": "2024년",\n        "area": "84㎡",\n        "action_verbs": ["확인", "검토"]\n    },\n    "reasoning": "전세금 인상에 대한 법률 질문이므로 LEGAL_CONSULT로 분류"\n}\n```\n\n응답 규칙:\n- intent: 위 9개 카테고리 중 하나 (대문자_언더스코어 형식)\n- confidence: 0.0~1.0 (0.8 이상이면 매우 확실, 0.5 미만이면 불확실)\n- keywords: 추출된 주요 키워드 목록\n- sub_intents: 복합 질문일 경우 부가적인 의도들\n- is_compound: 복합 질문 여부 (true/false)\n- decomposed_tasks: 복합 질문을 분해한 개별 작업들\n- entities: 추출된 엔티티 정보\n- reasoning: **반드시 CoT 5단계를 거쳐 분석한 과정을 포함** (구조 파악 → 유형 판단 → 복잡도 평가 → 필요 처리 → 최종 검증)\n\n## reasoning 작성 예시:\n"1단계(구조): 상황 설명(10년 거주, 3억→10억) + 해결책 요청 포함.\n2단계(유형): 해결책 요청형 - 단순 정보가 아닌 대응방안 필요.\n3단계(복잡도): 고 - 구체적 수치 비교와 복잡한 상황.\n4단계(처리): 법률 검색 + 상황 분석 + 해결책 제시 필요.\n5단계(검증): LEGAL_CONSULT만으로는 불충분, 종합적 분석 필요 → COMPREHENSIVE 선택"\n\n## 판단 가이드:\n- 여러 의도가 섞여있다면, 가장 주된 의도를 intent에, 나머지를 sub_intents에 기록\n- "그리고", "또한", "함께", "같이" 등의 연결어가 있으면 복합 질문일 가능성 높음\n- 법률 관련 키워드가 있으면 LEGAL_CONSULT 우선\n- 가격/시세 언급이 명확하면 MARKET_INQUIRY\n- 계약서라는 단어와 함께 "작성/만들기"가 있으면 CONTRACT_CREATION\n- 계약서라는 단어와 함께 "검토/확인"이 있으면 CONTRACT_REVIEW\n- 불확실하면 confidence를 낮게 설정하고 UNCLEAR 선택\n- 복합 질문은 is_compound를 true로 설정하고 개별 작업으로 분해\n\n분석할 질문: 전세 시세 확인하고 리스크 평가해줘'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 16:00:47,262 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 16:00:47,262 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 16:00:47,262 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 16:00:47,262 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 16:00:47,262 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 16:00:47,262 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 16:00:53,760 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 07:00:53 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'6243'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'6268'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9955'), (b'x-ratelimit-remaining-tokens', b'197243'), (b'x-ratelimit-reset-requests', b'6m25.703s'), (b'x-ratelimit-reset-tokens', b'827ms'), (b'x-request-id', b'req_0104f485112141b595ba08e4eef6409b'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b0b433d883091-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 16:00:53,760 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 16:00:53,760 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 16:00:53,761 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 16:00:53,761 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 16:00:53,761 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 16:00:53,761 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 07:00:53 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '6243', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '6268', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9955', 'x-ratelimit-remaining-tokens': '197243', 'x-ratelimit-reset-requests': '6m25.703s', 'x-ratelimit-reset-tokens': '827ms', 'x-request-id': 'req_0104f485112141b595ba08e4eef6409b', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b0b433d883091-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 16:00:53,761 - openai._base_client - DEBUG - request_id: req_0104f485112141b595ba08e4eef6409b
2025-10-05 16:00:53,762 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: intent_analysis | Model: gpt-4o-mini-2024-07-18 | Tokens: 3431 (prompt: 3180, completion: 251)
2025-10-05 16:00:53,762 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM Intent Analysis Result: {'intent': 'COMPREHENSIVE', 'confidence': 0.85, 'keywords': ['전세', '시세', '리스크', '평가'], 'sub_intents': ['MARKET_INQUIRY', 'RISK_ANALYSIS'], 'is_compound': True, 'decomposed_tasks': ['전세 시세 확인', '리스크 평가'], 'entities': {'location': None, 'price': None, 'contract_type': '전세', 'date': None, 'area': None, 'action_verbs': ['확인', '평가']}, 'reasoning': '1단계(구조): 전세 시세 확인 요청 + 리스크 평가 요청 포함. 2단계(유형): 두 가지 요청이 포함되어 있어 해결책 요청형으로 판단. 3단계(복잡도): 중 - 두 가지 독립적 조회가 필요. 4단계(처리): 시세 조회와 리스크 분석이 필요. 5단계(검증): 두 가지 요청이 있으므로 COMPREHENSIVE로 분류.'}
2025-10-05 16:00:53,762 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-f4ddad76-96e7-4afb-9752-81f00573dff7', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 Agent 선택 전문가입니다.\n사용자의 요청에 가장 적합한 Agent/Team을 선택하는 것이 목표입니다.\n\n## 현재 상황\n\n**사용자 질문:** 전세 시세 확인하고 리스크 평가해줘\n**분석된 의도:** 종합분석\n**추출된 키워드:** [\'전세\', \'시세\', \'리스크\', \'평가\']\n\n## 사용 가능한 Agent/Team 정보\n\n{\'search_team\': {\'name\': \'search_team\', \'capabilities\': \'법률 검색, 부동산 시세 조회, 대출 상품 검색\', \'tools\': [\'legal_search\', \'market_data\', \'loan_data\'], \'use_cases\': [\'법률 상담\', \'시세 조회\', \'대출 정보\']}, \'analysis_team\': {\'name\': \'analysis_team\', \'capabilities\': \'데이터 분석, 리스크 평가, 인사이트 생성, 추천\', \'tools\': [\'data_analyzer\', \'risk_evaluator\'], \'use_cases\': [\'시장 분석\', \'리스크 평가\', \'투자 분석\']}, \'document_team\': {\'name\': \'document_team\', \'capabilities\': \'계약서 작성, 문서 생성, 문서 검토\', \'tools\': [\'document_generator\', \'contract_reviewer\'], \'use_cases\': [\'계약서 작성\', \'문서 검토\']}}\n\n## Agent 역할 및 상세 가이드\n\n### 1. search_team (검색 팀)\n- **주요 기능**: 정보 검색 및 데이터 수집\n- **전문 분야**:\n  * 법률 정보 검색 (전세법, 임대차보호법, 부동산 관련 법규)\n  * 부동산 시세 조회 (매매가, 전세가, 월세, 실거래가)\n  * 대출 상품 정보 검색 (금리, 한도, 조건)\n  * 지역 정보 및 인프라 조회\n- **도구**: legal_search, market_data, loan_data\n- **적합한 작업**: 정보 조회, 데이터 수집, 법률 확인, 시세 파악\n- **예시**:\n  * "전세금 5% 인상 가능한가요?"\n  * "강남구 아파트 전세 시세"\n  * "전세자금대출 한도 얼마?"\n\n### 2. analysis_team (분석 팀)\n- **주요 기능**: 데이터 분석 및 평가\n- **전문 분야**:\n  * 시장 동향 분석 (상승률, 하락률, 추세)\n  * 리스크 평가 (계약, 투자 위험도)\n  * 투자 수익률 계산 (ROI, 월세 수익률)\n  * 대출 한도 및 조건 분석 (LTV, DTI, DSR)\n  * 비교 분석 (지역별, 상품별)\n- **도구**: data_analyzer, risk_evaluator, calculator\n- **적합한 작업**: 데이터 분석, 리스크 평가, 계산, 비교, 예측\n- **의존성**: 보통 search_team의 데이터가 필요\n- **예시**:\n  * "이 지역 투자 가치 분석해줘"\n  * "계약 리스크 평가해줘"\n  * "대출 가능 금액 계산해줘"\n\n### 3. document_team (문서 팀)\n- **주요 기능**: 문서 생성 및 관리\n- **전문 분야**:\n  * 계약서 작성 (임대차, 매매, 전세)\n  * 문서 템플릿 관리\n  * 특약사항 생성\n  * 계약서 수정안 작성\n  * 법률 문서 검토\n- **도구**: document_generator, contract_template, contract_reviewer\n- **적합한 작업**: 문서 작성, 계약서 생성, 문서 수정, 검토\n- **예시**:\n  * "임대차계약서 작성해줘"\n  * "특약사항 추가해줘"\n  * "계약서 수정안 만들어줘"\n\n## Chain-of-Thought Agent 선택 프로세스\n\n다음 단계를 **순서대로** 따라 최적의 Agent 조합을 선택하세요:\n\n### 1단계: 질문 요구사항 파악\n- 단순 정보 조회인가? → search_team만 필요\n- 판단/평가가 필요한가? → search + analysis 필요\n- 해결책 제시가 필요한가? → search + analysis 필요\n- 문서 생성이 필요한가? → document_team 추가\n\n### 2단계: 작업 복잡도 판단\n- **단순** (검색만): "~이 뭐야?", "~알려줘" → search_team\n- **중간** (검색+판단): "~괜찮아?", "~적절해?" → search + analysis\n- **복잡** (종합 해결): 구체적 상황 + "어떻게 해야 해?" → search + analysis\n\n### 3단계: 의존성 분석\n- 독립적 작업: 단일 팀으로 처리 가능\n- 순차적 의존: 이전 결과 필요 → 여러 팀 순서대로\n- 병렬 가능: 동시 조회 가능 → coordination: "parallel"\n\n### 4단계: 최종 검증\n- 선택한 팀들로 질문에 완전히 답변 가능한가?\n- 불필요한 팀이 포함되지 않았는가?\n- 순서가 논리적인가? (데이터 흐름 고려)\n\n### 중요 원칙:\n- **법률 키워드만으로 판단하지 말 것**: "법적으로 어떻게 해야 해?" = 법률 검색 + 분석 필요\n- **상황 설명 + 해결책 요청** = 반드시 analysis_team 포함\n- **구체적 수치 비교** (3억→10억 같은) = analysis_team 필요\n\n## 의도별 Agent 매핑 가이드 (기본 가이드 - CoT로 조정 가능)\n\n| 의도 (Intent) | 기본 조합 | 상황별 조정 |\n|--------------|-----------|-------------|\n| LEGAL_CONSULT | ["search_team"] | 해결책 요청시 → + analysis_team |\n| MARKET_INQUIRY | ["search_team"] | 비교/평가시 → + analysis_team |\n| LOAN_CONSULT | ["search_team", "analysis_team"] | 계산 필수 |\n| CONTRACT_CREATION | ["document_team"] | 검토 후 작성 → search + document |\n| CONTRACT_REVIEW | ["search_team", "analysis_team"] | 법률 검토 + 리스크 분석 |\n| COMPREHENSIVE | ["search_team", "analysis_team"] | **항상 분석 포함** |\n| RISK_ANALYSIS | ["analysis_team"] | 법률 근거 필요시 → search + analysis |\n| UNCLEAR | ["search_team", "analysis_team"] | 포괄적 대응 |\n\n**중요**: 위 매핑은 **기본 가이드**일 뿐입니다.\n실제 질문의 내용(CoT 분석 결과)에 따라 조정하세요!\n\n## 복합 질문 처리 예시 (CoT 적용)\n\n### 예시 1: 순차적 처리\n질문: "강남구 시세 확인하고 투자 가치 분석해줘"\n**CoT 분석**:\n1. 요구사항: 시세 조회 + 투자 가치 평가\n2. 복잡도: 중간 (검색 + 분석)\n3. 의존성: 시세 데이터 → 투자 분석 (순차)\n4. 검증: search만으로는 "투자 가치 평가" 불가능\n\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "1단계: 시세 조회+투자 평가 필요. 2단계: 중간 복잡도. 3단계: 순차 의존. 4단계: search로 시세 수집 후 analysis로 투자 가치 평가 필요",\n    "coordination": "sequential"\n}\n```\n\n### 예시 2: 단순 정보 조회\n질문: "전세금 인상률 한도가 얼마야?"\n**CoT 분석**:\n1. 요구사항: 단순 사실 확인\n2. 복잡도: 낮음 (정보 확인형)\n3. 의존성: 없음\n4. 검증: search_team만으로 충분\n\n```json\n{\n    "selected_agents": ["search_team"],\n    "reasoning": "1단계: 단순 정보 조회. 2단계: 저복잡도. 3단계: 독립적. 4단계: 법률 검색만으로 답변 가능",\n    "coordination": "single"\n}\n```\n\n### 예시 3: 해결책 요청 (핵심 예시!)\n질문: "집주인이 전세금 3억을 10억으로 올려달래. 법적으로 어떻게 해야 해?"\n의도: COMPREHENSIVE\n**CoT 분석**:\n1. 요구사항: 상황 설명 + 해결책 요청\n2. 복잡도: 높음 (구체적 상황 + 수치 비교)\n3. 의존성: 법률 확인 → 상황 분석 → 해결책 제시\n4. 검증: "법적으로"만 보고 search만 선택하면 불충분! 해결책 제시 필요\n\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "1단계: 법률 + 상황 분석 + 해결책 필요. 2단계: 고복잡도(3억→10억 비정상). 3단계: 순차(법률 확인 후 타당성 분석). 4단계: \'어떻게 해야\' = 단순 법률 조회 아님, 분석 필수",\n    "coordination": "sequential",\n    "confidence": 0.95\n}\n```\n\n## 응답 형식 (JSON)\n\n```json\n{\n    "selected_agents": ["선택된 agent/team 목록"],\n    "reasoning": "선택 이유를 구체적으로 설명. 각 Agent의 역할과 처리 순서 포함",\n    "coordination": "single/sequential/parallel/pipeline",\n    "dependencies": {"agent2": ["agent1"]},\n    "estimated_time": 30,\n    "confidence": 0.9\n}\n```\n\n## 선택 가이드라인\n\n1. **최소 Agent 원칙**: 가능한 적은 수의 Agent로 처리\n2. **전문성 우선**: 해당 작업에 가장 전문적인 Agent 선택\n3. **효율성 고려**: 병렬 처리 가능한 경우 명시\n4. **의존성 관리**: 데이터 흐름을 고려한 순서 지정\n5. **폴백 전략**: 불확실한 경우 ["search_team", "analysis_team"] 조합\n\n## 주의사항\n\n- selected_agents는 반드시 배열 형태\n- Agent 이름은 정확히: "search_team", "analysis_team", "document_team"\n- 최소 1개, 최대 3개 선택\n- 순서는 실행 우선순위 (앞에 있을수록 먼저 실행)\n- reasoning은 상세하고 논리적으로 작성\n- coordination 필드로 실행 방식 명시\n- 복합 질문의 경우 의존성 관계 명확히 표시'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 16:00:53,762 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 16:00:53,763 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 16:00:53,763 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 16:00:53,763 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 16:00:53,763 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 16:00:53,763 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 16:00:58,472 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 07:00:58 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'4432'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'4450'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9955'), (b'x-ratelimit-remaining-tokens', b'197888'), (b'x-ratelimit-reset-requests', b'6m27.843s'), (b'x-ratelimit-reset-tokens', b'633ms'), (b'x-request-id', b'req_03add0d789314749ab55551cd193628d'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b0b6be82c3091-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 16:00:58,472 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 16:00:58,472 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 16:00:58,472 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 16:00:58,472 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 16:00:58,472 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 16:00:58,472 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 07:00:58 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '4432', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '4450', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9955', 'x-ratelimit-remaining-tokens': '197888', 'x-ratelimit-reset-requests': '6m27.843s', 'x-ratelimit-reset-tokens': '633ms', 'x-request-id': 'req_03add0d789314749ab55551cd193628d', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b0b6be82c3091-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 16:00:58,473 - openai._base_client - DEBUG - request_id: req_03add0d789314749ab55551cd193628d
2025-10-05 16:00:58,473 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: agent_selection | Model: gpt-4o-mini-2024-07-18 | Tokens: 2545 (prompt: 2360, completion: 185)
2025-10-05 16:00:58,473 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM agent selection reasoning: 1단계: 전세 시세 확인과 리스크 평가가 필요하므로, 시세 조회(search_team)와 리스크 분석(analysis_team)이 모두 필요합니다. 2단계: 중간 복잡도로, 시세 데이터 수집 후 리스크 평가가 이루어져야 합니다. 3단계: 시세 조회 후 그 데이터를 바탕으로 리스크 평가를 진행해야 하므로 순차적 의존성이 존재합니다. 4단계: 단순히 시세 조회만으로는 리스크 평가를 할 수 없으므로, 두 팀이 모두 필요합니다.
2025-10-05 16:00:58,473 - app.service_agent.cognitive_agents.planning_agent - INFO - ✅ Primary LLM selected agents: ['search_team', 'analysis_team']
2025-10-05 16:00:58,473 - app.service_agent.cognitive_agents.planning_agent - INFO - Intent analyzed: 종합분석 (confidence: 0.85)
2025-10-05 16:00:58,473 - app.service_agent.cognitive_agents.query_decomposer - INFO - Decomposing query: 전세 시세 확인하고 리스크 평가해줘...
2025-10-05 16:00:58,473 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-fdfe84c0-17f6-4ba7-a00b-5b642267763b', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 질문 분해 전문가입니다.\n복잡한 사용자 질문을 독립적으로 처리 가능한 작업 단위로 분해하는 것이 목표입니다.\n\n## Chain-of-Thought 분해 프로세스:\n\n### 1단계: 복합 질문 여부 판단\n- 단순 정보 조회만 필요한가? → is_compound: false\n- **다음 중 하나라도 해당하면 is_compound: true**:\n  * "그리고", "그 다음", "한 후" 같은 연결어로 여러 요청 연결\n  * 명시적으로 2개 이상의 작업 요청 (예: "시세 확인하고 대출 계산해줘")\n  * 상황 설명 + 해결책 요청 (예: "3억→10억 올려달래. 어떻게 해야 해?")\n  * 해결책을 위해 여러 단계 처리 필요 (검색 → 분석 → 제안)\n\n### 2단계: 필요 작업 식별\n- 정보 수집이 필요한가? → search 작업\n- 평가/판단이 필요한가? → analysis 작업\n- 문서 생성이 필요한가? → generation 작업\n- **해결책 요청**인가? → search + analysis (최소 2개)\n\n### 3단계: 작업 순서 결정\n- 독립적 작업: 병렬 가능\n- 이전 결과 필요: 순차 실행 (depends_on 설정)\n\n## 중요 원칙:\n1. 각 작업은 하나의 명확한 목표를 가져야 합니다\n2. 작업 간 의존성을 명확히 파악해야 합니다\n3. 병렬 처리 가능한 작업은 구분해야 합니다\n4. **주의**: "어떻게 해야", "방법 알려줘" 같은 해결책 요청은 복합 질문!\n\n## 작업 유형 (type):\n- search: 정보 검색 (법률, 시세, 대출 정보 등)\n- analysis: 데이터 분석 (리스크 평가, 시장 분석 등)\n- generation: 문서 생성 (계약서 작성 등)\n- review: 검토/평가 (계약서 검토, 조건 확인 등)\n- calculation: 계산/산출 (대출 한도, 세금 등)\n- comparison: 비교 분석 (여러 옵션 비교)\n\n## 담당 팀 (agent):\n- search_team: 법률, 시세, 대출 정보 검색\n- analysis_team: 데이터 분석, 리스크 평가, 계산\n- document_team: 문서 생성, 계약서 작성\n\n## 학습 예시:\n\n### 예시 1: 복합 질문 (순차적)\n질문: "강남구 아파트 시세 확인하고 대출 가능 금액 계산해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "강남구 아파트 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "대출 가능 금액 계산",\n            "type": "calculation",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "required_data": {"price": "task_0.result.price"},\n            "estimated_time": 15\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "시세 정보가 있어야 대출 금액 계산이 가능하므로 순차 실행"\n}\n```\n\n### 예시 2: 복합 질문 (병렬 가능)\n질문: "이 지역 전세 시세와 매매 시세 모두 알려주고 비교 분석해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "전세 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "매매 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "전세/매매 시세 비교 분석",\n            "type": "comparison",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0", "task_1"],\n            "required_data": {\n                "lease_price": "task_0.result",\n                "sale_price": "task_1.result"\n            },\n            "estimated_time": 25\n        }\n    ],\n    "execution_mode": "mixed",\n    "parallel_groups": [["task_0", "task_1"], ["task_2"]],\n    "reasoning": "시세 조회는 독립적이므로 병렬 처리, 비교는 두 결과 필요"\n}\n```\n\n### 예시 3: 복합 질문 (3단계 이상)\n질문: "이 계약서 검토해서 위험한 부분 찾고 수정안 만들어서 최종 계약서 작성해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "계약서 내용 전체 검토",\n            "type": "review",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 30\n        },\n        {\n            "description": "위험 요소 및 문제점 분석",\n            "type": "analysis",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "estimated_time": 25\n        },\n        {\n            "description": "수정안 제안 생성",\n            "type": "generation",\n            "agent": "document_team",\n            "priority": 3,\n            "depends_on": ["task_1"],\n            "estimated_time": 20\n        },\n        {\n            "description": "최종 계약서 작성",\n            "type": "generation",\n            "agent": "document_team",\n            "priority": 4,\n            "depends_on": ["task_2"],\n            "estimated_time": 30\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "각 단계가 이전 결과에 의존하므로 순차 실행 필요"\n}\n```\n\n### 예시 4: 단순 질문 (분해 불필요)\n질문: "전세금 인상률 상한이 얼마야?"\n분해:\n```json\n{\n    "is_compound": false,\n    "sub_tasks": [\n        {\n            "description": "전세금 인상률 상한 법률 정보 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 15\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "단일 정보 조회 요청으로 분해 불필요"\n}\n```\n\n### 예시 5: 조건부 실행\n질문: "이 물건 시세 확인하고 적정가면 대출 상담도 받고 싶어"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "물건 시세 조회 및 적정성 평가",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 25\n        },\n        {\n            "description": "대출 상담 정보 제공",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "optional": true,\n            "context": {"condition": "if_reasonable_price"},\n            "estimated_time": 20\n        }\n    ],\n    "execution_mode": "conditional",\n    "reasoning": "시세 확인 결과에 따라 대출 상담 진행 여부 결정"\n}\n```\n\n### 예시 6: 상황 설명 + 해결책 요청 (핵심 패턴!)\n질문: "집주인이 전세금 3억을 10억으로 올려달래. 법적으로 어떻게 해야 해?"\n**CoT 분석**:\n1. 질문 분석: 상황 설명 + 해결책 요청\n2. 연결어: 없지만, "어떻게 해야" = 해결책 요청\n3. 의존성: 법률 확인 → 상황 분석 → 대응 방안\n4. 복합 여부: **YES** (해결책을 위해 여러 단계 필요)\n\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "전세금 인상 한도 관련 법률 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "3억→10억 인상의 법적 타당성 및 적정성 분석",\n            "type": "analysis",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "required_data": {"legal_limit": "task_0.result", "current": 300000000, "requested": 1000000000},\n            "estimated_time": 25\n        },\n        {\n            "description": "구체적 대응 방안 및 해결책 제시",\n            "type": "analysis",\n            "agent": "analysis_team",\n            "priority": 3,\n            "depends_on": ["task_1"],\n            "estimated_time": 20\n        }\n    ],\n    "execution_mode": "sequential",\n    "confidence": 0.95,\n    "reasoning": "상황 설명+해결책 요청 패턴. \'어떻게 해야\'는 단순 정보 조회가 아닌 종합 해결책 필요. 법률 조회 → 상황 분석 → 해결책 제시 3단계 순차 처리"\n}\n```\n\n## Chain-of-Thought 프로세스:\n\n1. **질문 분석**: 어떤 정보나 작업을 요구하는가?\n2. **연결어 확인**: "그리고", "또한", "해서", "한 후" 등이 있는가?\n3. **의존성 파악**: 어떤 작업이 다른 작업의 결과를 필요로 하는가?\n4. **병렬성 판단**: 독립적으로 실행 가능한 작업이 있는가?\n5. **최적화**: 불필요한 분해는 없는가?\n\n## 응답 형식 (JSON):\n\n{\n    "is_compound": true/false,\n    "sub_tasks": [\n        {\n            "description": "작업 설명",\n            "type": "작업 유형",\n            "agent": "담당 팀",\n            "priority": 우선순위 (1이 가장 높음),\n            "depends_on": ["선행 작업 ID 리스트"],\n            "required_data": {"필요한 데이터 매핑"},\n            "estimated_time": 예상 소요 시간(초),\n            "optional": true/false,\n            "context": {"추가 컨텍스트"}\n        }\n    ],\n    "execution_mode": "sequential/parallel/mixed/conditional",\n    "parallel_groups": [["병렬 실행 가능한 작업 ID 그룹"]],\n    "confidence": 0.0-1.0,\n    "reasoning": "분해 결정의 이유와 근거"\n}\n\n## 분해 가이드라인:\n\n1. **분해가 필요한 경우**:\n   - 여러 종류의 정보를 요청하는 경우\n   - 순차적 처리가 필요한 경우 (A의 결과로 B 수행)\n   - 서로 다른 팀의 전문성이 필요한 경우\n\n2. **분해가 불필요한 경우**:\n   - 단일 정보 조회\n   - 단순한 질문-답변\n   - 하나의 팀에서 완전히 처리 가능한 경우\n\n3. **병렬 처리 기준**:\n   - 서로 독립적인 정보 조회\n   - 의존성이 없는 분석 작업\n   - 동시에 진행해도 충돌하지 않는 작업\n\n4. **우선순위 설정**:\n   - 의존성이 없는 작업: priority 1\n   - 1차 의존 작업: priority 2\n   - 2차 의존 작업: priority 3\n   - 이런 식으로 증가\n\n현재 의도: 종합분석\n추출된 엔티티: {\'location\': None, \'price\': None, \'contract_type\': \'전세\', \'date\': None, \'area\': None, \'action_verbs\': [\'확인\', \'평가\']}\n\n분석할 질문: 전세 시세 확인하고 리스크 평가해줘'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 16:00:58,474 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 16:00:58,474 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 16:00:58,474 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 16:00:58,474 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 16:00:58,474 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 16:00:58,474 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 16:01:01,749 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 07:01:01 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'3050'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'3063'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9954'), (b'x-ratelimit-remaining-tokens', b'197307'), (b'x-ratelimit-reset-requests', b'6m31.777s'), (b'x-ratelimit-reset-tokens', b'807ms'), (b'x-request-id', b'req_9afa7e7155d24e1faaeda43d49c66609'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b0b895e5f3091-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 16:01:01,749 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 16:01:01,749 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 16:01:01,749 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 16:01:01,749 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 16:01:01,749 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 16:01:01,749 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 07:01:01 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '3050', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '3063', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9954', 'x-ratelimit-remaining-tokens': '197307', 'x-ratelimit-reset-requests': '6m31.777s', 'x-ratelimit-reset-tokens': '807ms', 'x-request-id': 'req_9afa7e7155d24e1faaeda43d49c66609', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b0b895e5f3091-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 16:01:01,750 - openai._base_client - DEBUG - request_id: req_9afa7e7155d24e1faaeda43d49c66609
2025-10-05 16:01:01,750 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: query_decomposition | Model: gpt-4o-mini-2024-07-18 | Tokens: 2907 (prompt: 2730, completion: 177)
2025-10-05 16:01:01,750 - app.service_agent.cognitive_agents.query_decomposer - INFO - Successfully decomposed into 2 tasks
2025-10-05 16:01:01,750 - app.service_agent.cognitive_agents.planning_agent - INFO - Query decomposed into 2 tasks
2025-10-05 16:01:01,750 - app.service_agent.cognitive_agents.planning_agent - WARNING - Plan validation errors: ["Agent 'search_team' not found in registry", "Agent 'analysis_team' depends on missing 'task_0'", "Agent 'analysis_team' not found in registry"]
2025-10-05 16:01:01,750 - app.service_agent.cognitive_agents.planning_agent - INFO - Optimizing execution plan
2025-10-05 16:01:01,750 - app.service_agent.cognitive_agents.planning_agent - INFO - Comprehensive plan created: Intent: 종합분석 (confidence: 0.85) | Strategy: sequential | Agents: search_team, analysis_team | Estimated time: 45.0s
2025-10-05 16:01:01,750 - __main__ - INFO -   전략: sequential
2025-10-05 16:01:01,750 - __main__ - INFO -   단계 수: 2
2025-10-05 16:01:01,750 - __main__ - INFO - 
✓ 테스트 성공 (소요시간: 29.37초)
2025-10-05 16:01:01,750 - __main__ - INFO - 
================================================================================
2025-10-05 16:01:01,750 - __main__ - INFO - [29] 복합 질문 테스트: D009
2025-10-05 16:01:01,750 - __main__ - INFO - 질문: 임대차보호법 내용 찾고 적용 가능 여부 판단해줘
2025-10-05 16:01:01,750 - __main__ - INFO - ================================================================================
2025-10-05 16:01:01,750 - __main__ - INFO - 
[Step 1] Intent 분석...
2025-10-05 16:01:01,750 - app.service_agent.cognitive_agents.planning_agent - INFO - Analyzing intent for query: 임대차보호법 내용 찾고 적용 가능 여부 판단해줘...
2025-10-05 16:01:01,751 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-aaf70796-ee66-4f87-8c7d-f8a6dceaf24c', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 의도 분석 전문가입니다.\n사용자의 질문을 정확히 이해하고, 어떤 종류의 도움이 필요한지 분류해야 합니다.\n\n## Chain-of-Thought 분석 프로세스\n\n질문을 분석할 때 다음 단계를 **순서대로** 따르세요:\n\n### 1단계: 질문 구조 파악\n- 단순 정보 요청인가? (예: "~이 뭐야?", "~알려줘")\n- 상황 설명이 포함되어 있는가? (배경, 현재 상태)\n- 구체적 수치나 데이터가 있는가? (금액, 비율, 기간 등)\n- 문제 해결을 요구하는가? (예: "어떻게 해야 해?", "방법 알려줘")\n\n### 2단계: 요청 유형 판단\n- **정보 확인형**: 사실, 개념, 규정 확인 → 검색만으로 충분\n- **평가/판단형**: "괜찮아?", "적절해?", "문제있어?" → 검색 + 분석 필요\n- **해결책 요청형**: "어떻게?", "방법?", "대처?" → 검색 + 분석 + 제안 필요\n- **비교/선택형**: "A vs B", "어느게 나아?" → 검색 + 분석(비교) 필요\n\n### 3단계: 복잡도 평가\n- **저**: 단일 개념/사실 확인 (예: "전세금 인상률 한도?")\n- **중**: 특정 상황 + 판단 (예: "3억을 5억으로 올려달래. 가능해?")\n- **고**: 복잡한 상황 + 여러 조건 + 해결책 (예: "10년 거주, 3억→10억 요구. 어떻게 해야 해?")\n\n### 4단계: 필요한 처리 결정\n- **검색만**: 정보 확인형 + 저복잡도\n- **검색+분석**: 평가/판단형 OR 중복잡도 OR 수치 비교 포함\n- **종합처리**: 해결책 요청형 OR 고복잡도 OR 여러 조건 동시 고려\n\n### 5단계: 최종 검증\n- 선택한 의도로 사용자 질문에 완전히 답변 가능한가?\n- 단순 정보 제공으로 끝나는가, 아니면 추가 분석/판단이 필요한가?\n- 상황 설명이 있으면서 "해결", "방법", "어떻게" 등이 있으면 → COMPREHENSIVE 고려\n\n## 중요: 복합 질문 처리\n복합적인 질문(여러 의도가 섞인 질문)의 경우, 가장 핵심적인 의도를 파악하되,\nsub_intents 필드에 부가적인 의도들도 함께 기록해주세요.\n\n**특히 주의**:\n- 법률 키워드가 있어도, "해결방법", "어떻게 해야" 같은 표현이 있으면 단순 LEGAL_CONSULT가 아닐 수 있음\n- 구체적 상황(금액, 기간 등) + 해결책 요구 = COMPREHENSIVE 또는 복합 의도로 분류\n\n## 분류 카테고리 설명:\n\n1. **LEGAL_CONSULT (법률상담)**\n   - 설명: 부동산 관련 법률, 권리, 의무에 대한 질문\n   - 예시:\n     * 단순: "전세금 5% 인상이 가능한가요?", "임대차계약 갱신 거부할 수 있나요?"\n     * 복합: "전세금 인상 가능한지 확인하고 법적 근거도 알려주세요"\n   - 키워드: 법, 전세, 임대, 보증금, 계약, 권리, 의무, 갱신, 임차인, 임대인, 법률, 규정, 조항\n   - 필요한 처리: 법률 데이터베이스 검색, 관련 법조항 찾기\n\n2. **MARKET_INQUIRY (시세조회)**\n   - 설명: 부동산 시장 가격, 시세, 거래 동향에 대한 질문\n   - 예시:\n     * 단순: "강남구 아파트 전세 시세 알려주세요", "서초동 매매가 얼마나 올랐나요?"\n     * 복합: "강남구 시세 확인하고 대출 가능 금액도 계산해줘"\n   - 키워드: 시세, 가격, 매매가, 전세가, 월세, 시장, 동향, 평균, 지역명, 상승률, 하락률\n   - 필요한 처리: 부동산 시세 데이터 조회, 지역별 가격 분석\n\n3. **LOAN_CONSULT (대출상담)**\n   - 설명: 주택담보대출, 전세자금대출 등 금융 관련 질문\n   - 예시:\n     * 단순: "전세자금대출 한도가 얼마인가요?", "LTV가 뭔가요?"\n     * 복합: "대출 한도 확인하고 금리 비교도 해주세요"\n   - 키워드: 대출, 금리, 한도, 조건, 상환, LTV, DTI, DSR, 담보, 금융, 은행\n   - 필요한 처리: 대출 상품 조회, 금리 정보 검색, 한도 계산\n\n4. **CONTRACT_CREATION (계약서작성)**\n   - 설명: 새로운 계약서나 문서를 작성해달라는 요청\n   - 예시:\n     * 단순: "임대차계약서 작성해주세요", "전세계약서 초안 만들어주세요"\n     * 복합: "계약서 작성하고 주의사항도 검토해주세요"\n   - 키워드: 작성, 만들, 생성, 초안, 계약서, 문서, 양식\n   - 필요한 처리: 문서 생성 에이전트 호출, 템플릿 기반 작성\n\n5. **CONTRACT_REVIEW (계약서검토)**\n   - 설명: 기존 계약서나 문서를 검토해달라는 요청\n   - 예시:\n     * 단순: "이 계약서 검토해주세요", "특약사항 문제없나요?"\n     * 복합: "계약서 검토하고 수정사항도 제안해주세요"\n   - 키워드: 검토, 확인, 점검, 리뷰, 분석해, 살펴봐, 체크\n   - 필요한 처리: 문서 분석, 위험 요소 식별, 개선사항 제안\n\n6. **COMPREHENSIVE (종합분석)**\n   - 설명: 여러 측면을 종합적으로 분석해달라는 요청, 또는 복잡한 상황에 대한 해결책 요청\n   - 예시:\n     * 단순: "이 물건 전체적으로 분석해주세요"\n     * 복합: "시세, 법률, 대출 모두 검토해서 종합 의견 주세요"\n     * 해결형: "10년 거주했는데 전세금 3억을 10억으로 올려달래. 어떻게 해야 해?"\n     * 상황+해결: "집주인이 계약 갱신 거부했어. 법적으로 어떻게 대응해야 할까?"\n   - 키워드: 종합, 전체, 모든, 전반적, 종합적, 평가, 분석, 어떻게, 방법, 해결, 대처\n   - 패턴: 구체적 상황 설명 + "어떻게/방법/해결" 요청\n   - 필요한 처리: 다중 데이터 소스 통합 분석, 상황 평가, 해결책 제시\n\n7. **RISK_ANALYSIS (리스크분석)**\n   - 설명: 위험 요소나 주의사항에 대한 질문\n   - 예시:\n     * 단순: "이 계약 위험한가요?", "주의할 점 알려주세요"\n     * 복합: "리스크 분석하고 대안도 제시해주세요"\n   - 키워드: 위험, 리스크, 주의, 문제점, 조심, 걱정, 우려\n   - 필요한 처리: 위험 요소 분석, 주의사항 추출\n\n8. **UNCLEAR (불분명)**\n   - 설명: 의도를 명확히 파악하기 어려운 질문\n   - 예시: "이거 좀 봐주세요", "어떻게 해야 할까요?", "도와주세요"\n   - 처리: 추가 질문으로 의도 명확화 필요\n\n9. **IRRELEVANT (무관)**\n   - 설명: 부동산과 전혀 관련 없는 질문\n   - 예시: "날씨 어때?", "저녁 뭐 먹지?", "주식 추천해줘"\n   - 처리: 부동산 관련 질문을 유도\n\n## 복합 질문 예시와 분석 (CoT 적용):\n\n### 예시 1: "강남구 아파트 시세 알려주고 전세자금대출 가능한지도 확인해줘"\n**CoT 분석**:\n1. 구조: 두 개의 요청 ("시세" + "대출")\n2. 유형: 정보 확인형 (둘 다)\n3. 복잡도: 중 (두 가지 독립적 조회)\n4. 필요 처리: 검색 + 계산/분석\n\n**결론**:\n- 주 의도: MARKET_INQUIRY (시세 조회가 먼저 필요)\n- 부가 의도: LOAN_CONSULT (대출 확인)\n- 분해: ["강남구 아파트 시세 조회", "전세자금대출 가능 여부 확인"]\n\n### 예시 2: "이 계약서 검토해서 위험한 부분 있는지 알려주고 수정 제안도 해줘"\n**CoT 분석**:\n1. 구조: 검토 + 위험 평가 + 수정안\n2. 유형: 평가/판단형 + 해결책 요청형\n3. 복잡도: 고 (3단계 처리)\n4. 필요 처리: 검토 + 분석 + 문서 생성\n\n**결론**:\n- 주 의도: CONTRACT_REVIEW (계약서 검토)\n- 부가 의도: RISK_ANALYSIS (위험 분석)\n- 분해: ["계약서 전체 검토", "위험 요소 식별", "수정사항 제안"]\n\n### 예시 3: "집주인이 짜증나, 10년 살았는데 전세금 3억을 10억으로 올려달래. 법적으로 해결방법 알려줘"\n**CoT 분석**:\n1. 구조: 상황 설명 (10년 거주, 3억→10억) + 해결책 요청\n2. 유형: 해결책 요청형 (단순 정보 X)\n3. 복잡도: 고 (구체적 상황 + 수치 비교 + 법률 + 대응방안)\n4. 필요 처리: 법률 검색 + 상황 분석 + 해결책 제시\n\n**결론**:\n- 주 의도: COMPREHENSIVE (복잡한 상황에 대한 종합 해결)\n- 부가 의도: LEGAL_CONSULT, RISK_ANALYSIS\n- 분해: ["전세금 인상 한도 법률 조회", "3억→10억 인상의 타당성 분석", "구체적 대응 방안 제시"]\n- **이유**: "법적으로"라는 키워드가 있지만, 단순 법률 확인이 아니라 구체적 상황에 대한 해결책을 요구하므로 COMPREHENSIVE\n\n### 예시 4: "전세금 인상률 상한이 얼마야?"\n**CoT 분석**:\n1. 구조: 단순 사실 확인\n2. 유형: 정보 확인형\n3. 복잡도: 저 (단일 개념)\n4. 필요 처리: 검색만\n\n**결론**:\n- 주 의도: LEGAL_CONSULT (법률 정보 조회)\n- 부가 의도: 없음\n- 분해: 필요 없음\n\n## 응답 형식 (JSON 형식으로 응답):\n\n```json\n{\n    "intent": "LEGAL_CONSULT",\n    "confidence": 0.9,\n    "keywords": ["전세금", "인상", "제한"],\n    "sub_intents": [],\n    "is_compound": false,\n    "decomposed_tasks": [],\n    "entities": {\n        "location": "강남구",\n        "price": "5억",\n        "contract_type": "전세",\n        "date": "2024년",\n        "area": "84㎡",\n        "action_verbs": ["확인", "검토"]\n    },\n    "reasoning": "전세금 인상에 대한 법률 질문이므로 LEGAL_CONSULT로 분류"\n}\n```\n\n응답 규칙:\n- intent: 위 9개 카테고리 중 하나 (대문자_언더스코어 형식)\n- confidence: 0.0~1.0 (0.8 이상이면 매우 확실, 0.5 미만이면 불확실)\n- keywords: 추출된 주요 키워드 목록\n- sub_intents: 복합 질문일 경우 부가적인 의도들\n- is_compound: 복합 질문 여부 (true/false)\n- decomposed_tasks: 복합 질문을 분해한 개별 작업들\n- entities: 추출된 엔티티 정보\n- reasoning: **반드시 CoT 5단계를 거쳐 분석한 과정을 포함** (구조 파악 → 유형 판단 → 복잡도 평가 → 필요 처리 → 최종 검증)\n\n## reasoning 작성 예시:\n"1단계(구조): 상황 설명(10년 거주, 3억→10억) + 해결책 요청 포함.\n2단계(유형): 해결책 요청형 - 단순 정보가 아닌 대응방안 필요.\n3단계(복잡도): 고 - 구체적 수치 비교와 복잡한 상황.\n4단계(처리): 법률 검색 + 상황 분석 + 해결책 제시 필요.\n5단계(검증): LEGAL_CONSULT만으로는 불충분, 종합적 분석 필요 → COMPREHENSIVE 선택"\n\n## 판단 가이드:\n- 여러 의도가 섞여있다면, 가장 주된 의도를 intent에, 나머지를 sub_intents에 기록\n- "그리고", "또한", "함께", "같이" 등의 연결어가 있으면 복합 질문일 가능성 높음\n- 법률 관련 키워드가 있으면 LEGAL_CONSULT 우선\n- 가격/시세 언급이 명확하면 MARKET_INQUIRY\n- 계약서라는 단어와 함께 "작성/만들기"가 있으면 CONTRACT_CREATION\n- 계약서라는 단어와 함께 "검토/확인"이 있으면 CONTRACT_REVIEW\n- 불확실하면 confidence를 낮게 설정하고 UNCLEAR 선택\n- 복합 질문은 is_compound를 true로 설정하고 개별 작업으로 분해\n\n분석할 질문: 임대차보호법 내용 찾고 적용 가능 여부 판단해줘'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 16:01:01,751 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 16:01:01,751 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 16:01:01,751 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 16:01:01,751 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 16:01:01,752 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 16:01:01,752 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 16:01:08,713 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 07:01:08 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'6672'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'6708'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9954'), (b'x-ratelimit-remaining-tokens', b'197239'), (b'x-ratelimit-reset-requests', b'6m37.135s'), (b'x-ratelimit-reset-tokens', b'828ms'), (b'x-request-id', b'req_411c0eb0f18f47ad9b553e06bce294e1'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b0b9dcbe83091-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 16:01:08,713 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 16:01:08,714 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 16:01:08,714 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 16:01:08,714 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 16:01:08,714 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 16:01:08,714 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 07:01:08 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '6672', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '6708', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9954', 'x-ratelimit-remaining-tokens': '197239', 'x-ratelimit-reset-requests': '6m37.135s', 'x-ratelimit-reset-tokens': '828ms', 'x-request-id': 'req_411c0eb0f18f47ad9b553e06bce294e1', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b0b9dcbe83091-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 16:01:08,714 - openai._base_client - DEBUG - request_id: req_411c0eb0f18f47ad9b553e06bce294e1
2025-10-05 16:01:08,715 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: intent_analysis | Model: gpt-4o-mini-2024-07-18 | Tokens: 3439 (prompt: 3184, completion: 255)
2025-10-05 16:01:08,715 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM Intent Analysis Result: {'intent': 'COMPREHENSIVE', 'confidence': 0.85, 'keywords': ['임대차보호법', '적용', '가능 여부'], 'sub_intents': ['LEGAL_CONSULT'], 'is_compound': True, 'decomposed_tasks': ['임대차보호법 내용 검색', '적용 가능 여부 판단'], 'entities': {'law': '임대차보호법', 'action_verbs': ['찾고', '판단']}, 'reasoning': '1단계(구조): 임대차보호법 내용 요청 + 적용 가능 여부 판단 포함. 2단계(유형): 해결책 요청형 - 법률 정보 확인과 적용 가능성 분석 필요. 3단계(복잡도): 중 - 법률 내용 확인과 그에 대한 적용 여부 판단. 4단계(처리): 법률 내용 검색 + 적용 가능성 분석 필요. 5단계(검증): 단순 법률 정보 제공으로 끝나지 않고, 적용 가능성에 대한 판단이 필요하므로 COMPREHENSIVE 선택.'}
2025-10-05 16:01:08,715 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-e1af1159-1677-4b0e-9ab2-8d2c46f31aaa', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 Agent 선택 전문가입니다.\n사용자의 요청에 가장 적합한 Agent/Team을 선택하는 것이 목표입니다.\n\n## 현재 상황\n\n**사용자 질문:** 임대차보호법 내용 찾고 적용 가능 여부 판단해줘\n**분석된 의도:** 종합분석\n**추출된 키워드:** [\'임대차보호법\', \'적용\', \'가능 여부\']\n\n## 사용 가능한 Agent/Team 정보\n\n{\'search_team\': {\'name\': \'search_team\', \'capabilities\': \'법률 검색, 부동산 시세 조회, 대출 상품 검색\', \'tools\': [\'legal_search\', \'market_data\', \'loan_data\'], \'use_cases\': [\'법률 상담\', \'시세 조회\', \'대출 정보\']}, \'analysis_team\': {\'name\': \'analysis_team\', \'capabilities\': \'데이터 분석, 리스크 평가, 인사이트 생성, 추천\', \'tools\': [\'data_analyzer\', \'risk_evaluator\'], \'use_cases\': [\'시장 분석\', \'리스크 평가\', \'투자 분석\']}, \'document_team\': {\'name\': \'document_team\', \'capabilities\': \'계약서 작성, 문서 생성, 문서 검토\', \'tools\': [\'document_generator\', \'contract_reviewer\'], \'use_cases\': [\'계약서 작성\', \'문서 검토\']}}\n\n## Agent 역할 및 상세 가이드\n\n### 1. search_team (검색 팀)\n- **주요 기능**: 정보 검색 및 데이터 수집\n- **전문 분야**:\n  * 법률 정보 검색 (전세법, 임대차보호법, 부동산 관련 법규)\n  * 부동산 시세 조회 (매매가, 전세가, 월세, 실거래가)\n  * 대출 상품 정보 검색 (금리, 한도, 조건)\n  * 지역 정보 및 인프라 조회\n- **도구**: legal_search, market_data, loan_data\n- **적합한 작업**: 정보 조회, 데이터 수집, 법률 확인, 시세 파악\n- **예시**:\n  * "전세금 5% 인상 가능한가요?"\n  * "강남구 아파트 전세 시세"\n  * "전세자금대출 한도 얼마?"\n\n### 2. analysis_team (분석 팀)\n- **주요 기능**: 데이터 분석 및 평가\n- **전문 분야**:\n  * 시장 동향 분석 (상승률, 하락률, 추세)\n  * 리스크 평가 (계약, 투자 위험도)\n  * 투자 수익률 계산 (ROI, 월세 수익률)\n  * 대출 한도 및 조건 분석 (LTV, DTI, DSR)\n  * 비교 분석 (지역별, 상품별)\n- **도구**: data_analyzer, risk_evaluator, calculator\n- **적합한 작업**: 데이터 분석, 리스크 평가, 계산, 비교, 예측\n- **의존성**: 보통 search_team의 데이터가 필요\n- **예시**:\n  * "이 지역 투자 가치 분석해줘"\n  * "계약 리스크 평가해줘"\n  * "대출 가능 금액 계산해줘"\n\n### 3. document_team (문서 팀)\n- **주요 기능**: 문서 생성 및 관리\n- **전문 분야**:\n  * 계약서 작성 (임대차, 매매, 전세)\n  * 문서 템플릿 관리\n  * 특약사항 생성\n  * 계약서 수정안 작성\n  * 법률 문서 검토\n- **도구**: document_generator, contract_template, contract_reviewer\n- **적합한 작업**: 문서 작성, 계약서 생성, 문서 수정, 검토\n- **예시**:\n  * "임대차계약서 작성해줘"\n  * "특약사항 추가해줘"\n  * "계약서 수정안 만들어줘"\n\n## Chain-of-Thought Agent 선택 프로세스\n\n다음 단계를 **순서대로** 따라 최적의 Agent 조합을 선택하세요:\n\n### 1단계: 질문 요구사항 파악\n- 단순 정보 조회인가? → search_team만 필요\n- 판단/평가가 필요한가? → search + analysis 필요\n- 해결책 제시가 필요한가? → search + analysis 필요\n- 문서 생성이 필요한가? → document_team 추가\n\n### 2단계: 작업 복잡도 판단\n- **단순** (검색만): "~이 뭐야?", "~알려줘" → search_team\n- **중간** (검색+판단): "~괜찮아?", "~적절해?" → search + analysis\n- **복잡** (종합 해결): 구체적 상황 + "어떻게 해야 해?" → search + analysis\n\n### 3단계: 의존성 분석\n- 독립적 작업: 단일 팀으로 처리 가능\n- 순차적 의존: 이전 결과 필요 → 여러 팀 순서대로\n- 병렬 가능: 동시 조회 가능 → coordination: "parallel"\n\n### 4단계: 최종 검증\n- 선택한 팀들로 질문에 완전히 답변 가능한가?\n- 불필요한 팀이 포함되지 않았는가?\n- 순서가 논리적인가? (데이터 흐름 고려)\n\n### 중요 원칙:\n- **법률 키워드만으로 판단하지 말 것**: "법적으로 어떻게 해야 해?" = 법률 검색 + 분석 필요\n- **상황 설명 + 해결책 요청** = 반드시 analysis_team 포함\n- **구체적 수치 비교** (3억→10억 같은) = analysis_team 필요\n\n## 의도별 Agent 매핑 가이드 (기본 가이드 - CoT로 조정 가능)\n\n| 의도 (Intent) | 기본 조합 | 상황별 조정 |\n|--------------|-----------|-------------|\n| LEGAL_CONSULT | ["search_team"] | 해결책 요청시 → + analysis_team |\n| MARKET_INQUIRY | ["search_team"] | 비교/평가시 → + analysis_team |\n| LOAN_CONSULT | ["search_team", "analysis_team"] | 계산 필수 |\n| CONTRACT_CREATION | ["document_team"] | 검토 후 작성 → search + document |\n| CONTRACT_REVIEW | ["search_team", "analysis_team"] | 법률 검토 + 리스크 분석 |\n| COMPREHENSIVE | ["search_team", "analysis_team"] | **항상 분석 포함** |\n| RISK_ANALYSIS | ["analysis_team"] | 법률 근거 필요시 → search + analysis |\n| UNCLEAR | ["search_team", "analysis_team"] | 포괄적 대응 |\n\n**중요**: 위 매핑은 **기본 가이드**일 뿐입니다.\n실제 질문의 내용(CoT 분석 결과)에 따라 조정하세요!\n\n## 복합 질문 처리 예시 (CoT 적용)\n\n### 예시 1: 순차적 처리\n질문: "강남구 시세 확인하고 투자 가치 분석해줘"\n**CoT 분석**:\n1. 요구사항: 시세 조회 + 투자 가치 평가\n2. 복잡도: 중간 (검색 + 분석)\n3. 의존성: 시세 데이터 → 투자 분석 (순차)\n4. 검증: search만으로는 "투자 가치 평가" 불가능\n\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "1단계: 시세 조회+투자 평가 필요. 2단계: 중간 복잡도. 3단계: 순차 의존. 4단계: search로 시세 수집 후 analysis로 투자 가치 평가 필요",\n    "coordination": "sequential"\n}\n```\n\n### 예시 2: 단순 정보 조회\n질문: "전세금 인상률 한도가 얼마야?"\n**CoT 분석**:\n1. 요구사항: 단순 사실 확인\n2. 복잡도: 낮음 (정보 확인형)\n3. 의존성: 없음\n4. 검증: search_team만으로 충분\n\n```json\n{\n    "selected_agents": ["search_team"],\n    "reasoning": "1단계: 단순 정보 조회. 2단계: 저복잡도. 3단계: 독립적. 4단계: 법률 검색만으로 답변 가능",\n    "coordination": "single"\n}\n```\n\n### 예시 3: 해결책 요청 (핵심 예시!)\n질문: "집주인이 전세금 3억을 10억으로 올려달래. 법적으로 어떻게 해야 해?"\n의도: COMPREHENSIVE\n**CoT 분석**:\n1. 요구사항: 상황 설명 + 해결책 요청\n2. 복잡도: 높음 (구체적 상황 + 수치 비교)\n3. 의존성: 법률 확인 → 상황 분석 → 해결책 제시\n4. 검증: "법적으로"만 보고 search만 선택하면 불충분! 해결책 제시 필요\n\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "1단계: 법률 + 상황 분석 + 해결책 필요. 2단계: 고복잡도(3억→10억 비정상). 3단계: 순차(법률 확인 후 타당성 분석). 4단계: \'어떻게 해야\' = 단순 법률 조회 아님, 분석 필수",\n    "coordination": "sequential",\n    "confidence": 0.95\n}\n```\n\n## 응답 형식 (JSON)\n\n```json\n{\n    "selected_agents": ["선택된 agent/team 목록"],\n    "reasoning": "선택 이유를 구체적으로 설명. 각 Agent의 역할과 처리 순서 포함",\n    "coordination": "single/sequential/parallel/pipeline",\n    "dependencies": {"agent2": ["agent1"]},\n    "estimated_time": 30,\n    "confidence": 0.9\n}\n```\n\n## 선택 가이드라인\n\n1. **최소 Agent 원칙**: 가능한 적은 수의 Agent로 처리\n2. **전문성 우선**: 해당 작업에 가장 전문적인 Agent 선택\n3. **효율성 고려**: 병렬 처리 가능한 경우 명시\n4. **의존성 관리**: 데이터 흐름을 고려한 순서 지정\n5. **폴백 전략**: 불확실한 경우 ["search_team", "analysis_team"] 조합\n\n## 주의사항\n\n- selected_agents는 반드시 배열 형태\n- Agent 이름은 정확히: "search_team", "analysis_team", "document_team"\n- 최소 1개, 최대 3개 선택\n- 순서는 실행 우선순위 (앞에 있을수록 먼저 실행)\n- reasoning은 상세하고 논리적으로 작성\n- coordination 필드로 실행 방식 명시\n- 복합 질문의 경우 의존성 관계 명확히 표시'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 16:01:08,716 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 16:01:08,716 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 16:01:08,716 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 16:01:08,716 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 16:01:08,716 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 16:01:08,716 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 16:01:11,991 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 07:01:11 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'3065'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'3084'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9954'), (b'x-ratelimit-remaining-tokens', b'197882'), (b'x-ratelimit-reset-requests', b'6m30.176s'), (b'x-ratelimit-reset-tokens', b'635ms'), (b'x-request-id', b'req_f24ba39e8eb345f1bb5c2a8f44df7926'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b0bc95efb3091-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 16:01:11,991 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 16:01:11,991 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 16:01:11,996 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 16:01:11,996 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 16:01:11,997 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 16:01:11,997 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 07:01:11 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '3065', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '3084', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9954', 'x-ratelimit-remaining-tokens': '197882', 'x-ratelimit-reset-requests': '6m30.176s', 'x-ratelimit-reset-tokens': '635ms', 'x-request-id': 'req_f24ba39e8eb345f1bb5c2a8f44df7926', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b0bc95efb3091-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 16:01:11,997 - openai._base_client - DEBUG - request_id: req_f24ba39e8eb345f1bb5c2a8f44df7926
2025-10-05 16:01:11,997 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: agent_selection | Model: gpt-4o-mini-2024-07-18 | Tokens: 2549 (prompt: 2364, completion: 185)
2025-10-05 16:01:11,997 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM agent selection reasoning: 1단계: 임대차보호법에 대한 정보 검색과 적용 가능 여부 판단이 필요. 2단계: 법률 정보 검색 후, 해당 법률이 사용자의 상황에 어떻게 적용될 수 있는지 분석해야 하므로 중간 복잡도로 판단. 3단계: 법률 정보를 검색한 후, 그 결과를 바탕으로 적용 가능성을 평가해야 하므로 순차적 의존성이 존재. 4단계: 단순 법률 조회만으로는 사용자의 상황에 대한 해결책을 제시할 수 없으므로, 분석 팀이 필요.
2025-10-05 16:01:11,997 - app.service_agent.cognitive_agents.planning_agent - INFO - ✅ Primary LLM selected agents: ['search_team', 'analysis_team']
2025-10-05 16:01:11,997 - __main__ - INFO -   의도: 종합분석
2025-10-05 16:01:11,997 - __main__ - INFO -   신뢰도: 0.85
2025-10-05 16:01:11,997 - __main__ - INFO -   추천 Agent: ['search_team', 'analysis_team']
2025-10-05 16:01:11,997 - __main__ - INFO - 
[Step 2] Query Decomposition...
2025-10-05 16:01:11,997 - app.service_agent.cognitive_agents.query_decomposer - INFO - Decomposing query: 임대차보호법 내용 찾고 적용 가능 여부 판단해줘...
2025-10-05 16:01:11,998 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-d345cb5c-7ff3-4681-af49-caea8e9dd36a', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 질문 분해 전문가입니다.\n복잡한 사용자 질문을 독립적으로 처리 가능한 작업 단위로 분해하는 것이 목표입니다.\n\n## Chain-of-Thought 분해 프로세스:\n\n### 1단계: 복합 질문 여부 판단\n- 단순 정보 조회만 필요한가? → is_compound: false\n- **다음 중 하나라도 해당하면 is_compound: true**:\n  * "그리고", "그 다음", "한 후" 같은 연결어로 여러 요청 연결\n  * 명시적으로 2개 이상의 작업 요청 (예: "시세 확인하고 대출 계산해줘")\n  * 상황 설명 + 해결책 요청 (예: "3억→10억 올려달래. 어떻게 해야 해?")\n  * 해결책을 위해 여러 단계 처리 필요 (검색 → 분석 → 제안)\n\n### 2단계: 필요 작업 식별\n- 정보 수집이 필요한가? → search 작업\n- 평가/판단이 필요한가? → analysis 작업\n- 문서 생성이 필요한가? → generation 작업\n- **해결책 요청**인가? → search + analysis (최소 2개)\n\n### 3단계: 작업 순서 결정\n- 독립적 작업: 병렬 가능\n- 이전 결과 필요: 순차 실행 (depends_on 설정)\n\n## 중요 원칙:\n1. 각 작업은 하나의 명확한 목표를 가져야 합니다\n2. 작업 간 의존성을 명확히 파악해야 합니다\n3. 병렬 처리 가능한 작업은 구분해야 합니다\n4. **주의**: "어떻게 해야", "방법 알려줘" 같은 해결책 요청은 복합 질문!\n\n## 작업 유형 (type):\n- search: 정보 검색 (법률, 시세, 대출 정보 등)\n- analysis: 데이터 분석 (리스크 평가, 시장 분석 등)\n- generation: 문서 생성 (계약서 작성 등)\n- review: 검토/평가 (계약서 검토, 조건 확인 등)\n- calculation: 계산/산출 (대출 한도, 세금 등)\n- comparison: 비교 분석 (여러 옵션 비교)\n\n## 담당 팀 (agent):\n- search_team: 법률, 시세, 대출 정보 검색\n- analysis_team: 데이터 분석, 리스크 평가, 계산\n- document_team: 문서 생성, 계약서 작성\n\n## 학습 예시:\n\n### 예시 1: 복합 질문 (순차적)\n질문: "강남구 아파트 시세 확인하고 대출 가능 금액 계산해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "강남구 아파트 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "대출 가능 금액 계산",\n            "type": "calculation",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "required_data": {"price": "task_0.result.price"},\n            "estimated_time": 15\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "시세 정보가 있어야 대출 금액 계산이 가능하므로 순차 실행"\n}\n```\n\n### 예시 2: 복합 질문 (병렬 가능)\n질문: "이 지역 전세 시세와 매매 시세 모두 알려주고 비교 분석해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "전세 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "매매 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "전세/매매 시세 비교 분석",\n            "type": "comparison",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0", "task_1"],\n            "required_data": {\n                "lease_price": "task_0.result",\n                "sale_price": "task_1.result"\n            },\n            "estimated_time": 25\n        }\n    ],\n    "execution_mode": "mixed",\n    "parallel_groups": [["task_0", "task_1"], ["task_2"]],\n    "reasoning": "시세 조회는 독립적이므로 병렬 처리, 비교는 두 결과 필요"\n}\n```\n\n### 예시 3: 복합 질문 (3단계 이상)\n질문: "이 계약서 검토해서 위험한 부분 찾고 수정안 만들어서 최종 계약서 작성해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "계약서 내용 전체 검토",\n            "type": "review",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 30\n        },\n        {\n            "description": "위험 요소 및 문제점 분석",\n            "type": "analysis",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "estimated_time": 25\n        },\n        {\n            "description": "수정안 제안 생성",\n            "type": "generation",\n            "agent": "document_team",\n            "priority": 3,\n            "depends_on": ["task_1"],\n            "estimated_time": 20\n        },\n        {\n            "description": "최종 계약서 작성",\n            "type": "generation",\n            "agent": "document_team",\n            "priority": 4,\n            "depends_on": ["task_2"],\n            "estimated_time": 30\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "각 단계가 이전 결과에 의존하므로 순차 실행 필요"\n}\n```\n\n### 예시 4: 단순 질문 (분해 불필요)\n질문: "전세금 인상률 상한이 얼마야?"\n분해:\n```json\n{\n    "is_compound": false,\n    "sub_tasks": [\n        {\n            "description": "전세금 인상률 상한 법률 정보 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 15\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "단일 정보 조회 요청으로 분해 불필요"\n}\n```\n\n### 예시 5: 조건부 실행\n질문: "이 물건 시세 확인하고 적정가면 대출 상담도 받고 싶어"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "물건 시세 조회 및 적정성 평가",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 25\n        },\n        {\n            "description": "대출 상담 정보 제공",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "optional": true,\n            "context": {"condition": "if_reasonable_price"},\n            "estimated_time": 20\n        }\n    ],\n    "execution_mode": "conditional",\n    "reasoning": "시세 확인 결과에 따라 대출 상담 진행 여부 결정"\n}\n```\n\n### 예시 6: 상황 설명 + 해결책 요청 (핵심 패턴!)\n질문: "집주인이 전세금 3억을 10억으로 올려달래. 법적으로 어떻게 해야 해?"\n**CoT 분석**:\n1. 질문 분석: 상황 설명 + 해결책 요청\n2. 연결어: 없지만, "어떻게 해야" = 해결책 요청\n3. 의존성: 법률 확인 → 상황 분석 → 대응 방안\n4. 복합 여부: **YES** (해결책을 위해 여러 단계 필요)\n\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "전세금 인상 한도 관련 법률 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "3억→10억 인상의 법적 타당성 및 적정성 분석",\n            "type": "analysis",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "required_data": {"legal_limit": "task_0.result", "current": 300000000, "requested": 1000000000},\n            "estimated_time": 25\n        },\n        {\n            "description": "구체적 대응 방안 및 해결책 제시",\n            "type": "analysis",\n            "agent": "analysis_team",\n            "priority": 3,\n            "depends_on": ["task_1"],\n            "estimated_time": 20\n        }\n    ],\n    "execution_mode": "sequential",\n    "confidence": 0.95,\n    "reasoning": "상황 설명+해결책 요청 패턴. \'어떻게 해야\'는 단순 정보 조회가 아닌 종합 해결책 필요. 법률 조회 → 상황 분석 → 해결책 제시 3단계 순차 처리"\n}\n```\n\n## Chain-of-Thought 프로세스:\n\n1. **질문 분석**: 어떤 정보나 작업을 요구하는가?\n2. **연결어 확인**: "그리고", "또한", "해서", "한 후" 등이 있는가?\n3. **의존성 파악**: 어떤 작업이 다른 작업의 결과를 필요로 하는가?\n4. **병렬성 판단**: 독립적으로 실행 가능한 작업이 있는가?\n5. **최적화**: 불필요한 분해는 없는가?\n\n## 응답 형식 (JSON):\n\n{\n    "is_compound": true/false,\n    "sub_tasks": [\n        {\n            "description": "작업 설명",\n            "type": "작업 유형",\n            "agent": "담당 팀",\n            "priority": 우선순위 (1이 가장 높음),\n            "depends_on": ["선행 작업 ID 리스트"],\n            "required_data": {"필요한 데이터 매핑"},\n            "estimated_time": 예상 소요 시간(초),\n            "optional": true/false,\n            "context": {"추가 컨텍스트"}\n        }\n    ],\n    "execution_mode": "sequential/parallel/mixed/conditional",\n    "parallel_groups": [["병렬 실행 가능한 작업 ID 그룹"]],\n    "confidence": 0.0-1.0,\n    "reasoning": "분해 결정의 이유와 근거"\n}\n\n## 분해 가이드라인:\n\n1. **분해가 필요한 경우**:\n   - 여러 종류의 정보를 요청하는 경우\n   - 순차적 처리가 필요한 경우 (A의 결과로 B 수행)\n   - 서로 다른 팀의 전문성이 필요한 경우\n\n2. **분해가 불필요한 경우**:\n   - 단일 정보 조회\n   - 단순한 질문-답변\n   - 하나의 팀에서 완전히 처리 가능한 경우\n\n3. **병렬 처리 기준**:\n   - 서로 독립적인 정보 조회\n   - 의존성이 없는 분석 작업\n   - 동시에 진행해도 충돌하지 않는 작업\n\n4. **우선순위 설정**:\n   - 의존성이 없는 작업: priority 1\n   - 1차 의존 작업: priority 2\n   - 2차 의존 작업: priority 3\n   - 이런 식으로 증가\n\n현재 의도: 종합분석\n추출된 엔티티: None\n\n분석할 질문: 임대차보호법 내용 찾고 적용 가능 여부 판단해줘'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 16:01:11,998 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 16:01:11,998 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 16:01:11,998 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 16:01:11,998 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 16:01:11,998 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 16:01:11,999 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 16:01:15,471 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 07:01:15 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'3164'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'3194'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9953'), (b'x-ratelimit-remaining-tokens', b'197333'), (b'x-ratelimit-reset-requests', b'6m44.16s'), (b'x-ratelimit-reset-tokens', b'800ms'), (b'x-request-id', b'req_80c8df0e30ab4d5ab7d333538e5b0e86'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b0bdddbe53091-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 16:01:15,471 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 16:01:15,471 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 16:01:15,471 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 16:01:15,471 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 16:01:15,471 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 16:01:15,472 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 07:01:15 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '3164', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '3194', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9953', 'x-ratelimit-remaining-tokens': '197333', 'x-ratelimit-reset-requests': '6m44.16s', 'x-ratelimit-reset-tokens': '800ms', 'x-request-id': 'req_80c8df0e30ab4d5ab7d333538e5b0e86', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b0bdddbe53091-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 16:01:15,472 - openai._base_client - DEBUG - request_id: req_80c8df0e30ab4d5ab7d333538e5b0e86
2025-10-05 16:01:15,472 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: query_decomposition | Model: gpt-4o-mini-2024-07-18 | Tokens: 2886 (prompt: 2694, completion: 192)
2025-10-05 16:01:15,472 - app.service_agent.cognitive_agents.query_decomposer - INFO - Successfully decomposed into 2 tasks
2025-10-05 16:01:15,472 - __main__ - INFO -   복합 질문: True
2025-10-05 16:01:15,472 - __main__ - INFO -   작업 수: 2
2025-10-05 16:01:15,472 - __main__ - INFO -   실행 모드: sequential
2025-10-05 16:01:15,472 - __main__ - INFO -     - task_0: 임대차보호법 내용 조회 (search_team)
2025-10-05 16:01:15,472 - __main__ - INFO -     - task_1: 임대차보호법 적용 가능 여부 분석 (analysis_team)
2025-10-05 16:01:15,472 - __main__ - INFO - 
[Step 3] Comprehensive Plan 생성...
2025-10-05 16:01:15,472 - app.service_agent.cognitive_agents.planning_agent - INFO - Creating comprehensive plan for query: 임대차보호법 내용 찾고 적용 가능 여부 판단해줘...
2025-10-05 16:01:15,472 - app.service_agent.cognitive_agents.planning_agent - INFO - Analyzing intent for query: 임대차보호법 내용 찾고 적용 가능 여부 판단해줘...
2025-10-05 16:01:15,473 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-eab7021c-beac-48b0-87d5-19444424e175', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 의도 분석 전문가입니다.\n사용자의 질문을 정확히 이해하고, 어떤 종류의 도움이 필요한지 분류해야 합니다.\n\n## Chain-of-Thought 분석 프로세스\n\n질문을 분석할 때 다음 단계를 **순서대로** 따르세요:\n\n### 1단계: 질문 구조 파악\n- 단순 정보 요청인가? (예: "~이 뭐야?", "~알려줘")\n- 상황 설명이 포함되어 있는가? (배경, 현재 상태)\n- 구체적 수치나 데이터가 있는가? (금액, 비율, 기간 등)\n- 문제 해결을 요구하는가? (예: "어떻게 해야 해?", "방법 알려줘")\n\n### 2단계: 요청 유형 판단\n- **정보 확인형**: 사실, 개념, 규정 확인 → 검색만으로 충분\n- **평가/판단형**: "괜찮아?", "적절해?", "문제있어?" → 검색 + 분석 필요\n- **해결책 요청형**: "어떻게?", "방법?", "대처?" → 검색 + 분석 + 제안 필요\n- **비교/선택형**: "A vs B", "어느게 나아?" → 검색 + 분석(비교) 필요\n\n### 3단계: 복잡도 평가\n- **저**: 단일 개념/사실 확인 (예: "전세금 인상률 한도?")\n- **중**: 특정 상황 + 판단 (예: "3억을 5억으로 올려달래. 가능해?")\n- **고**: 복잡한 상황 + 여러 조건 + 해결책 (예: "10년 거주, 3억→10억 요구. 어떻게 해야 해?")\n\n### 4단계: 필요한 처리 결정\n- **검색만**: 정보 확인형 + 저복잡도\n- **검색+분석**: 평가/판단형 OR 중복잡도 OR 수치 비교 포함\n- **종합처리**: 해결책 요청형 OR 고복잡도 OR 여러 조건 동시 고려\n\n### 5단계: 최종 검증\n- 선택한 의도로 사용자 질문에 완전히 답변 가능한가?\n- 단순 정보 제공으로 끝나는가, 아니면 추가 분석/판단이 필요한가?\n- 상황 설명이 있으면서 "해결", "방법", "어떻게" 등이 있으면 → COMPREHENSIVE 고려\n\n## 중요: 복합 질문 처리\n복합적인 질문(여러 의도가 섞인 질문)의 경우, 가장 핵심적인 의도를 파악하되,\nsub_intents 필드에 부가적인 의도들도 함께 기록해주세요.\n\n**특히 주의**:\n- 법률 키워드가 있어도, "해결방법", "어떻게 해야" 같은 표현이 있으면 단순 LEGAL_CONSULT가 아닐 수 있음\n- 구체적 상황(금액, 기간 등) + 해결책 요구 = COMPREHENSIVE 또는 복합 의도로 분류\n\n## 분류 카테고리 설명:\n\n1. **LEGAL_CONSULT (법률상담)**\n   - 설명: 부동산 관련 법률, 권리, 의무에 대한 질문\n   - 예시:\n     * 단순: "전세금 5% 인상이 가능한가요?", "임대차계약 갱신 거부할 수 있나요?"\n     * 복합: "전세금 인상 가능한지 확인하고 법적 근거도 알려주세요"\n   - 키워드: 법, 전세, 임대, 보증금, 계약, 권리, 의무, 갱신, 임차인, 임대인, 법률, 규정, 조항\n   - 필요한 처리: 법률 데이터베이스 검색, 관련 법조항 찾기\n\n2. **MARKET_INQUIRY (시세조회)**\n   - 설명: 부동산 시장 가격, 시세, 거래 동향에 대한 질문\n   - 예시:\n     * 단순: "강남구 아파트 전세 시세 알려주세요", "서초동 매매가 얼마나 올랐나요?"\n     * 복합: "강남구 시세 확인하고 대출 가능 금액도 계산해줘"\n   - 키워드: 시세, 가격, 매매가, 전세가, 월세, 시장, 동향, 평균, 지역명, 상승률, 하락률\n   - 필요한 처리: 부동산 시세 데이터 조회, 지역별 가격 분석\n\n3. **LOAN_CONSULT (대출상담)**\n   - 설명: 주택담보대출, 전세자금대출 등 금융 관련 질문\n   - 예시:\n     * 단순: "전세자금대출 한도가 얼마인가요?", "LTV가 뭔가요?"\n     * 복합: "대출 한도 확인하고 금리 비교도 해주세요"\n   - 키워드: 대출, 금리, 한도, 조건, 상환, LTV, DTI, DSR, 담보, 금융, 은행\n   - 필요한 처리: 대출 상품 조회, 금리 정보 검색, 한도 계산\n\n4. **CONTRACT_CREATION (계약서작성)**\n   - 설명: 새로운 계약서나 문서를 작성해달라는 요청\n   - 예시:\n     * 단순: "임대차계약서 작성해주세요", "전세계약서 초안 만들어주세요"\n     * 복합: "계약서 작성하고 주의사항도 검토해주세요"\n   - 키워드: 작성, 만들, 생성, 초안, 계약서, 문서, 양식\n   - 필요한 처리: 문서 생성 에이전트 호출, 템플릿 기반 작성\n\n5. **CONTRACT_REVIEW (계약서검토)**\n   - 설명: 기존 계약서나 문서를 검토해달라는 요청\n   - 예시:\n     * 단순: "이 계약서 검토해주세요", "특약사항 문제없나요?"\n     * 복합: "계약서 검토하고 수정사항도 제안해주세요"\n   - 키워드: 검토, 확인, 점검, 리뷰, 분석해, 살펴봐, 체크\n   - 필요한 처리: 문서 분석, 위험 요소 식별, 개선사항 제안\n\n6. **COMPREHENSIVE (종합분석)**\n   - 설명: 여러 측면을 종합적으로 분석해달라는 요청, 또는 복잡한 상황에 대한 해결책 요청\n   - 예시:\n     * 단순: "이 물건 전체적으로 분석해주세요"\n     * 복합: "시세, 법률, 대출 모두 검토해서 종합 의견 주세요"\n     * 해결형: "10년 거주했는데 전세금 3억을 10억으로 올려달래. 어떻게 해야 해?"\n     * 상황+해결: "집주인이 계약 갱신 거부했어. 법적으로 어떻게 대응해야 할까?"\n   - 키워드: 종합, 전체, 모든, 전반적, 종합적, 평가, 분석, 어떻게, 방법, 해결, 대처\n   - 패턴: 구체적 상황 설명 + "어떻게/방법/해결" 요청\n   - 필요한 처리: 다중 데이터 소스 통합 분석, 상황 평가, 해결책 제시\n\n7. **RISK_ANALYSIS (리스크분석)**\n   - 설명: 위험 요소나 주의사항에 대한 질문\n   - 예시:\n     * 단순: "이 계약 위험한가요?", "주의할 점 알려주세요"\n     * 복합: "리스크 분석하고 대안도 제시해주세요"\n   - 키워드: 위험, 리스크, 주의, 문제점, 조심, 걱정, 우려\n   - 필요한 처리: 위험 요소 분석, 주의사항 추출\n\n8. **UNCLEAR (불분명)**\n   - 설명: 의도를 명확히 파악하기 어려운 질문\n   - 예시: "이거 좀 봐주세요", "어떻게 해야 할까요?", "도와주세요"\n   - 처리: 추가 질문으로 의도 명확화 필요\n\n9. **IRRELEVANT (무관)**\n   - 설명: 부동산과 전혀 관련 없는 질문\n   - 예시: "날씨 어때?", "저녁 뭐 먹지?", "주식 추천해줘"\n   - 처리: 부동산 관련 질문을 유도\n\n## 복합 질문 예시와 분석 (CoT 적용):\n\n### 예시 1: "강남구 아파트 시세 알려주고 전세자금대출 가능한지도 확인해줘"\n**CoT 분석**:\n1. 구조: 두 개의 요청 ("시세" + "대출")\n2. 유형: 정보 확인형 (둘 다)\n3. 복잡도: 중 (두 가지 독립적 조회)\n4. 필요 처리: 검색 + 계산/분석\n\n**결론**:\n- 주 의도: MARKET_INQUIRY (시세 조회가 먼저 필요)\n- 부가 의도: LOAN_CONSULT (대출 확인)\n- 분해: ["강남구 아파트 시세 조회", "전세자금대출 가능 여부 확인"]\n\n### 예시 2: "이 계약서 검토해서 위험한 부분 있는지 알려주고 수정 제안도 해줘"\n**CoT 분석**:\n1. 구조: 검토 + 위험 평가 + 수정안\n2. 유형: 평가/판단형 + 해결책 요청형\n3. 복잡도: 고 (3단계 처리)\n4. 필요 처리: 검토 + 분석 + 문서 생성\n\n**결론**:\n- 주 의도: CONTRACT_REVIEW (계약서 검토)\n- 부가 의도: RISK_ANALYSIS (위험 분석)\n- 분해: ["계약서 전체 검토", "위험 요소 식별", "수정사항 제안"]\n\n### 예시 3: "집주인이 짜증나, 10년 살았는데 전세금 3억을 10억으로 올려달래. 법적으로 해결방법 알려줘"\n**CoT 분석**:\n1. 구조: 상황 설명 (10년 거주, 3억→10억) + 해결책 요청\n2. 유형: 해결책 요청형 (단순 정보 X)\n3. 복잡도: 고 (구체적 상황 + 수치 비교 + 법률 + 대응방안)\n4. 필요 처리: 법률 검색 + 상황 분석 + 해결책 제시\n\n**결론**:\n- 주 의도: COMPREHENSIVE (복잡한 상황에 대한 종합 해결)\n- 부가 의도: LEGAL_CONSULT, RISK_ANALYSIS\n- 분해: ["전세금 인상 한도 법률 조회", "3억→10억 인상의 타당성 분석", "구체적 대응 방안 제시"]\n- **이유**: "법적으로"라는 키워드가 있지만, 단순 법률 확인이 아니라 구체적 상황에 대한 해결책을 요구하므로 COMPREHENSIVE\n\n### 예시 4: "전세금 인상률 상한이 얼마야?"\n**CoT 분석**:\n1. 구조: 단순 사실 확인\n2. 유형: 정보 확인형\n3. 복잡도: 저 (단일 개념)\n4. 필요 처리: 검색만\n\n**결론**:\n- 주 의도: LEGAL_CONSULT (법률 정보 조회)\n- 부가 의도: 없음\n- 분해: 필요 없음\n\n## 응답 형식 (JSON 형식으로 응답):\n\n```json\n{\n    "intent": "LEGAL_CONSULT",\n    "confidence": 0.9,\n    "keywords": ["전세금", "인상", "제한"],\n    "sub_intents": [],\n    "is_compound": false,\n    "decomposed_tasks": [],\n    "entities": {\n        "location": "강남구",\n        "price": "5억",\n        "contract_type": "전세",\n        "date": "2024년",\n        "area": "84㎡",\n        "action_verbs": ["확인", "검토"]\n    },\n    "reasoning": "전세금 인상에 대한 법률 질문이므로 LEGAL_CONSULT로 분류"\n}\n```\n\n응답 규칙:\n- intent: 위 9개 카테고리 중 하나 (대문자_언더스코어 형식)\n- confidence: 0.0~1.0 (0.8 이상이면 매우 확실, 0.5 미만이면 불확실)\n- keywords: 추출된 주요 키워드 목록\n- sub_intents: 복합 질문일 경우 부가적인 의도들\n- is_compound: 복합 질문 여부 (true/false)\n- decomposed_tasks: 복합 질문을 분해한 개별 작업들\n- entities: 추출된 엔티티 정보\n- reasoning: **반드시 CoT 5단계를 거쳐 분석한 과정을 포함** (구조 파악 → 유형 판단 → 복잡도 평가 → 필요 처리 → 최종 검증)\n\n## reasoning 작성 예시:\n"1단계(구조): 상황 설명(10년 거주, 3억→10억) + 해결책 요청 포함.\n2단계(유형): 해결책 요청형 - 단순 정보가 아닌 대응방안 필요.\n3단계(복잡도): 고 - 구체적 수치 비교와 복잡한 상황.\n4단계(처리): 법률 검색 + 상황 분석 + 해결책 제시 필요.\n5단계(검증): LEGAL_CONSULT만으로는 불충분, 종합적 분석 필요 → COMPREHENSIVE 선택"\n\n## 판단 가이드:\n- 여러 의도가 섞여있다면, 가장 주된 의도를 intent에, 나머지를 sub_intents에 기록\n- "그리고", "또한", "함께", "같이" 등의 연결어가 있으면 복합 질문일 가능성 높음\n- 법률 관련 키워드가 있으면 LEGAL_CONSULT 우선\n- 가격/시세 언급이 명확하면 MARKET_INQUIRY\n- 계약서라는 단어와 함께 "작성/만들기"가 있으면 CONTRACT_CREATION\n- 계약서라는 단어와 함께 "검토/확인"이 있으면 CONTRACT_REVIEW\n- 불확실하면 confidence를 낮게 설정하고 UNCLEAR 선택\n- 복합 질문은 is_compound를 true로 설정하고 개별 작업으로 분해\n\n분석할 질문: 임대차보호법 내용 찾고 적용 가능 여부 판단해줘'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 16:01:15,473 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 16:01:15,473 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 16:01:15,473 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 16:01:15,473 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 16:01:15,473 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 16:01:15,474 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 16:01:20,118 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 07:01:20 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'4422'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'4451'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9952'), (b'x-ratelimit-remaining-tokens', b'197239'), (b'x-ratelimit-reset-requests', b'6m49.336s'), (b'x-ratelimit-reset-tokens', b'828ms'), (b'x-request-id', b'req_543dcac0654a4ad5b3554f1ff2bd6478'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b0bf399813091-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 16:01:20,118 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 16:01:20,119 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 16:01:20,119 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 16:01:20,119 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 16:01:20,119 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 16:01:20,120 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 07:01:20 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '4422', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '4451', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9952', 'x-ratelimit-remaining-tokens': '197239', 'x-ratelimit-reset-requests': '6m49.336s', 'x-ratelimit-reset-tokens': '828ms', 'x-request-id': 'req_543dcac0654a4ad5b3554f1ff2bd6478', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b0bf399813091-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 16:01:20,120 - openai._base_client - DEBUG - request_id: req_543dcac0654a4ad5b3554f1ff2bd6478
2025-10-05 16:01:20,120 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: intent_analysis | Model: gpt-4o-mini-2024-07-18 | Tokens: 3426 (prompt: 3184, completion: 242)
2025-10-05 16:01:20,120 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM Intent Analysis Result: {'intent': 'COMPREHENSIVE', 'confidence': 0.85, 'keywords': ['임대차보호법', '적용', '가능 여부'], 'sub_intents': ['LEGAL_CONSULT'], 'is_compound': True, 'decomposed_tasks': ['임대차보호법 내용 검색', '적용 가능 여부 판단'], 'entities': {'law': '임대차보호법', 'action_verbs': ['찾고', '판단']}, 'reasoning': '1단계(구조): 임대차보호법 내용 요청 + 적용 가능 여부 판단 포함. 2단계(유형): 해결책 요청형 - 법률 정보 확인과 적용 가능성 분석 필요. 3단계(복잡도): 중 - 법률 내용과 적용 여부를 동시에 고려해야 함. 4단계(처리): 법률 내용 검색 + 적용 가능성 분석 필요. 5단계(검증): 단순 법률 확인이 아닌 적용 가능성도 요구하므로 COMPREHENSIVE 선택.'}
2025-10-05 16:01:20,120 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-e7622297-4a01-4166-959e-0d8421b90611', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 Agent 선택 전문가입니다.\n사용자의 요청에 가장 적합한 Agent/Team을 선택하는 것이 목표입니다.\n\n## 현재 상황\n\n**사용자 질문:** 임대차보호법 내용 찾고 적용 가능 여부 판단해줘\n**분석된 의도:** 종합분석\n**추출된 키워드:** [\'임대차보호법\', \'적용\', \'가능 여부\']\n\n## 사용 가능한 Agent/Team 정보\n\n{\'search_team\': {\'name\': \'search_team\', \'capabilities\': \'법률 검색, 부동산 시세 조회, 대출 상품 검색\', \'tools\': [\'legal_search\', \'market_data\', \'loan_data\'], \'use_cases\': [\'법률 상담\', \'시세 조회\', \'대출 정보\']}, \'analysis_team\': {\'name\': \'analysis_team\', \'capabilities\': \'데이터 분석, 리스크 평가, 인사이트 생성, 추천\', \'tools\': [\'data_analyzer\', \'risk_evaluator\'], \'use_cases\': [\'시장 분석\', \'리스크 평가\', \'투자 분석\']}, \'document_team\': {\'name\': \'document_team\', \'capabilities\': \'계약서 작성, 문서 생성, 문서 검토\', \'tools\': [\'document_generator\', \'contract_reviewer\'], \'use_cases\': [\'계약서 작성\', \'문서 검토\']}}\n\n## Agent 역할 및 상세 가이드\n\n### 1. search_team (검색 팀)\n- **주요 기능**: 정보 검색 및 데이터 수집\n- **전문 분야**:\n  * 법률 정보 검색 (전세법, 임대차보호법, 부동산 관련 법규)\n  * 부동산 시세 조회 (매매가, 전세가, 월세, 실거래가)\n  * 대출 상품 정보 검색 (금리, 한도, 조건)\n  * 지역 정보 및 인프라 조회\n- **도구**: legal_search, market_data, loan_data\n- **적합한 작업**: 정보 조회, 데이터 수집, 법률 확인, 시세 파악\n- **예시**:\n  * "전세금 5% 인상 가능한가요?"\n  * "강남구 아파트 전세 시세"\n  * "전세자금대출 한도 얼마?"\n\n### 2. analysis_team (분석 팀)\n- **주요 기능**: 데이터 분석 및 평가\n- **전문 분야**:\n  * 시장 동향 분석 (상승률, 하락률, 추세)\n  * 리스크 평가 (계약, 투자 위험도)\n  * 투자 수익률 계산 (ROI, 월세 수익률)\n  * 대출 한도 및 조건 분석 (LTV, DTI, DSR)\n  * 비교 분석 (지역별, 상품별)\n- **도구**: data_analyzer, risk_evaluator, calculator\n- **적합한 작업**: 데이터 분석, 리스크 평가, 계산, 비교, 예측\n- **의존성**: 보통 search_team의 데이터가 필요\n- **예시**:\n  * "이 지역 투자 가치 분석해줘"\n  * "계약 리스크 평가해줘"\n  * "대출 가능 금액 계산해줘"\n\n### 3. document_team (문서 팀)\n- **주요 기능**: 문서 생성 및 관리\n- **전문 분야**:\n  * 계약서 작성 (임대차, 매매, 전세)\n  * 문서 템플릿 관리\n  * 특약사항 생성\n  * 계약서 수정안 작성\n  * 법률 문서 검토\n- **도구**: document_generator, contract_template, contract_reviewer\n- **적합한 작업**: 문서 작성, 계약서 생성, 문서 수정, 검토\n- **예시**:\n  * "임대차계약서 작성해줘"\n  * "특약사항 추가해줘"\n  * "계약서 수정안 만들어줘"\n\n## Chain-of-Thought Agent 선택 프로세스\n\n다음 단계를 **순서대로** 따라 최적의 Agent 조합을 선택하세요:\n\n### 1단계: 질문 요구사항 파악\n- 단순 정보 조회인가? → search_team만 필요\n- 판단/평가가 필요한가? → search + analysis 필요\n- 해결책 제시가 필요한가? → search + analysis 필요\n- 문서 생성이 필요한가? → document_team 추가\n\n### 2단계: 작업 복잡도 판단\n- **단순** (검색만): "~이 뭐야?", "~알려줘" → search_team\n- **중간** (검색+판단): "~괜찮아?", "~적절해?" → search + analysis\n- **복잡** (종합 해결): 구체적 상황 + "어떻게 해야 해?" → search + analysis\n\n### 3단계: 의존성 분석\n- 독립적 작업: 단일 팀으로 처리 가능\n- 순차적 의존: 이전 결과 필요 → 여러 팀 순서대로\n- 병렬 가능: 동시 조회 가능 → coordination: "parallel"\n\n### 4단계: 최종 검증\n- 선택한 팀들로 질문에 완전히 답변 가능한가?\n- 불필요한 팀이 포함되지 않았는가?\n- 순서가 논리적인가? (데이터 흐름 고려)\n\n### 중요 원칙:\n- **법률 키워드만으로 판단하지 말 것**: "법적으로 어떻게 해야 해?" = 법률 검색 + 분석 필요\n- **상황 설명 + 해결책 요청** = 반드시 analysis_team 포함\n- **구체적 수치 비교** (3억→10억 같은) = analysis_team 필요\n\n## 의도별 Agent 매핑 가이드 (기본 가이드 - CoT로 조정 가능)\n\n| 의도 (Intent) | 기본 조합 | 상황별 조정 |\n|--------------|-----------|-------------|\n| LEGAL_CONSULT | ["search_team"] | 해결책 요청시 → + analysis_team |\n| MARKET_INQUIRY | ["search_team"] | 비교/평가시 → + analysis_team |\n| LOAN_CONSULT | ["search_team", "analysis_team"] | 계산 필수 |\n| CONTRACT_CREATION | ["document_team"] | 검토 후 작성 → search + document |\n| CONTRACT_REVIEW | ["search_team", "analysis_team"] | 법률 검토 + 리스크 분석 |\n| COMPREHENSIVE | ["search_team", "analysis_team"] | **항상 분석 포함** |\n| RISK_ANALYSIS | ["analysis_team"] | 법률 근거 필요시 → search + analysis |\n| UNCLEAR | ["search_team", "analysis_team"] | 포괄적 대응 |\n\n**중요**: 위 매핑은 **기본 가이드**일 뿐입니다.\n실제 질문의 내용(CoT 분석 결과)에 따라 조정하세요!\n\n## 복합 질문 처리 예시 (CoT 적용)\n\n### 예시 1: 순차적 처리\n질문: "강남구 시세 확인하고 투자 가치 분석해줘"\n**CoT 분석**:\n1. 요구사항: 시세 조회 + 투자 가치 평가\n2. 복잡도: 중간 (검색 + 분석)\n3. 의존성: 시세 데이터 → 투자 분석 (순차)\n4. 검증: search만으로는 "투자 가치 평가" 불가능\n\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "1단계: 시세 조회+투자 평가 필요. 2단계: 중간 복잡도. 3단계: 순차 의존. 4단계: search로 시세 수집 후 analysis로 투자 가치 평가 필요",\n    "coordination": "sequential"\n}\n```\n\n### 예시 2: 단순 정보 조회\n질문: "전세금 인상률 한도가 얼마야?"\n**CoT 분석**:\n1. 요구사항: 단순 사실 확인\n2. 복잡도: 낮음 (정보 확인형)\n3. 의존성: 없음\n4. 검증: search_team만으로 충분\n\n```json\n{\n    "selected_agents": ["search_team"],\n    "reasoning": "1단계: 단순 정보 조회. 2단계: 저복잡도. 3단계: 독립적. 4단계: 법률 검색만으로 답변 가능",\n    "coordination": "single"\n}\n```\n\n### 예시 3: 해결책 요청 (핵심 예시!)\n질문: "집주인이 전세금 3억을 10억으로 올려달래. 법적으로 어떻게 해야 해?"\n의도: COMPREHENSIVE\n**CoT 분석**:\n1. 요구사항: 상황 설명 + 해결책 요청\n2. 복잡도: 높음 (구체적 상황 + 수치 비교)\n3. 의존성: 법률 확인 → 상황 분석 → 해결책 제시\n4. 검증: "법적으로"만 보고 search만 선택하면 불충분! 해결책 제시 필요\n\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "1단계: 법률 + 상황 분석 + 해결책 필요. 2단계: 고복잡도(3억→10억 비정상). 3단계: 순차(법률 확인 후 타당성 분석). 4단계: \'어떻게 해야\' = 단순 법률 조회 아님, 분석 필수",\n    "coordination": "sequential",\n    "confidence": 0.95\n}\n```\n\n## 응답 형식 (JSON)\n\n```json\n{\n    "selected_agents": ["선택된 agent/team 목록"],\n    "reasoning": "선택 이유를 구체적으로 설명. 각 Agent의 역할과 처리 순서 포함",\n    "coordination": "single/sequential/parallel/pipeline",\n    "dependencies": {"agent2": ["agent1"]},\n    "estimated_time": 30,\n    "confidence": 0.9\n}\n```\n\n## 선택 가이드라인\n\n1. **최소 Agent 원칙**: 가능한 적은 수의 Agent로 처리\n2. **전문성 우선**: 해당 작업에 가장 전문적인 Agent 선택\n3. **효율성 고려**: 병렬 처리 가능한 경우 명시\n4. **의존성 관리**: 데이터 흐름을 고려한 순서 지정\n5. **폴백 전략**: 불확실한 경우 ["search_team", "analysis_team"] 조합\n\n## 주의사항\n\n- selected_agents는 반드시 배열 형태\n- Agent 이름은 정확히: "search_team", "analysis_team", "document_team"\n- 최소 1개, 최대 3개 선택\n- 순서는 실행 우선순위 (앞에 있을수록 먼저 실행)\n- reasoning은 상세하고 논리적으로 작성\n- coordination 필드로 실행 방식 명시\n- 복합 질문의 경우 의존성 관계 명확히 표시'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 16:01:20,120 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 16:01:20,121 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 16:01:20,121 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 16:01:20,121 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 16:01:20,121 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 16:01:20,121 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 16:01:25,326 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 07:01:25 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'5010'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'5026'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9953'), (b'x-ratelimit-remaining-tokens', b'197882'), (b'x-ratelimit-reset-requests', b'6m45.014s'), (b'x-ratelimit-reset-tokens', b'635ms'), (b'x-request-id', b'req_2f731eca47c44eae8f4d61f6acd66072'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b0c109a8e3091-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 16:01:25,327 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 16:01:25,327 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 16:01:25,333 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 16:01:25,333 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 16:01:25,333 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 16:01:25,333 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 07:01:25 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '5010', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '5026', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9953', 'x-ratelimit-remaining-tokens': '197882', 'x-ratelimit-reset-requests': '6m45.014s', 'x-ratelimit-reset-tokens': '635ms', 'x-request-id': 'req_2f731eca47c44eae8f4d61f6acd66072', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b0c109a8e3091-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 16:01:25,333 - openai._base_client - DEBUG - request_id: req_2f731eca47c44eae8f4d61f6acd66072
2025-10-05 16:01:25,335 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: agent_selection | Model: gpt-4o-mini-2024-07-18 | Tokens: 2533 (prompt: 2364, completion: 169)
2025-10-05 16:01:25,335 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM agent selection reasoning: 1단계: 임대차보호법에 대한 정보 검색과 적용 가능 여부 판단이 필요. 2단계: 법률 정보 검색 후, 해당 법률이 사용자의 상황에 어떻게 적용될 수 있는지 분석해야 하므로 중간 복잡도. 3단계: 법률 정보 검색 후 분석이 필요하므로 순차적 의존 관계. 4단계: 단순 법률 조회로는 '적용 가능 여부'를 판단할 수 없으므로 분석 팀이 필요.
2025-10-05 16:01:25,335 - app.service_agent.cognitive_agents.planning_agent - INFO - ✅ Primary LLM selected agents: ['search_team', 'analysis_team']
2025-10-05 16:01:25,335 - app.service_agent.cognitive_agents.planning_agent - INFO - Intent analyzed: 종합분석 (confidence: 0.85)
2025-10-05 16:01:25,335 - app.service_agent.cognitive_agents.query_decomposer - INFO - Decomposing query: 임대차보호법 내용 찾고 적용 가능 여부 판단해줘...
2025-10-05 16:01:25,335 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-872adc43-aa8f-4d3a-9ae0-d47664b43a19', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 질문 분해 전문가입니다.\n복잡한 사용자 질문을 독립적으로 처리 가능한 작업 단위로 분해하는 것이 목표입니다.\n\n## Chain-of-Thought 분해 프로세스:\n\n### 1단계: 복합 질문 여부 판단\n- 단순 정보 조회만 필요한가? → is_compound: false\n- **다음 중 하나라도 해당하면 is_compound: true**:\n  * "그리고", "그 다음", "한 후" 같은 연결어로 여러 요청 연결\n  * 명시적으로 2개 이상의 작업 요청 (예: "시세 확인하고 대출 계산해줘")\n  * 상황 설명 + 해결책 요청 (예: "3억→10억 올려달래. 어떻게 해야 해?")\n  * 해결책을 위해 여러 단계 처리 필요 (검색 → 분석 → 제안)\n\n### 2단계: 필요 작업 식별\n- 정보 수집이 필요한가? → search 작업\n- 평가/판단이 필요한가? → analysis 작업\n- 문서 생성이 필요한가? → generation 작업\n- **해결책 요청**인가? → search + analysis (최소 2개)\n\n### 3단계: 작업 순서 결정\n- 독립적 작업: 병렬 가능\n- 이전 결과 필요: 순차 실행 (depends_on 설정)\n\n## 중요 원칙:\n1. 각 작업은 하나의 명확한 목표를 가져야 합니다\n2. 작업 간 의존성을 명확히 파악해야 합니다\n3. 병렬 처리 가능한 작업은 구분해야 합니다\n4. **주의**: "어떻게 해야", "방법 알려줘" 같은 해결책 요청은 복합 질문!\n\n## 작업 유형 (type):\n- search: 정보 검색 (법률, 시세, 대출 정보 등)\n- analysis: 데이터 분석 (리스크 평가, 시장 분석 등)\n- generation: 문서 생성 (계약서 작성 등)\n- review: 검토/평가 (계약서 검토, 조건 확인 등)\n- calculation: 계산/산출 (대출 한도, 세금 등)\n- comparison: 비교 분석 (여러 옵션 비교)\n\n## 담당 팀 (agent):\n- search_team: 법률, 시세, 대출 정보 검색\n- analysis_team: 데이터 분석, 리스크 평가, 계산\n- document_team: 문서 생성, 계약서 작성\n\n## 학습 예시:\n\n### 예시 1: 복합 질문 (순차적)\n질문: "강남구 아파트 시세 확인하고 대출 가능 금액 계산해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "강남구 아파트 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "대출 가능 금액 계산",\n            "type": "calculation",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "required_data": {"price": "task_0.result.price"},\n            "estimated_time": 15\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "시세 정보가 있어야 대출 금액 계산이 가능하므로 순차 실행"\n}\n```\n\n### 예시 2: 복합 질문 (병렬 가능)\n질문: "이 지역 전세 시세와 매매 시세 모두 알려주고 비교 분석해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "전세 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "매매 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "전세/매매 시세 비교 분석",\n            "type": "comparison",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0", "task_1"],\n            "required_data": {\n                "lease_price": "task_0.result",\n                "sale_price": "task_1.result"\n            },\n            "estimated_time": 25\n        }\n    ],\n    "execution_mode": "mixed",\n    "parallel_groups": [["task_0", "task_1"], ["task_2"]],\n    "reasoning": "시세 조회는 독립적이므로 병렬 처리, 비교는 두 결과 필요"\n}\n```\n\n### 예시 3: 복합 질문 (3단계 이상)\n질문: "이 계약서 검토해서 위험한 부분 찾고 수정안 만들어서 최종 계약서 작성해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "계약서 내용 전체 검토",\n            "type": "review",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 30\n        },\n        {\n            "description": "위험 요소 및 문제점 분석",\n            "type": "analysis",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "estimated_time": 25\n        },\n        {\n            "description": "수정안 제안 생성",\n            "type": "generation",\n            "agent": "document_team",\n            "priority": 3,\n            "depends_on": ["task_1"],\n            "estimated_time": 20\n        },\n        {\n            "description": "최종 계약서 작성",\n            "type": "generation",\n            "agent": "document_team",\n            "priority": 4,\n            "depends_on": ["task_2"],\n            "estimated_time": 30\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "각 단계가 이전 결과에 의존하므로 순차 실행 필요"\n}\n```\n\n### 예시 4: 단순 질문 (분해 불필요)\n질문: "전세금 인상률 상한이 얼마야?"\n분해:\n```json\n{\n    "is_compound": false,\n    "sub_tasks": [\n        {\n            "description": "전세금 인상률 상한 법률 정보 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 15\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "단일 정보 조회 요청으로 분해 불필요"\n}\n```\n\n### 예시 5: 조건부 실행\n질문: "이 물건 시세 확인하고 적정가면 대출 상담도 받고 싶어"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "물건 시세 조회 및 적정성 평가",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 25\n        },\n        {\n            "description": "대출 상담 정보 제공",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "optional": true,\n            "context": {"condition": "if_reasonable_price"},\n            "estimated_time": 20\n        }\n    ],\n    "execution_mode": "conditional",\n    "reasoning": "시세 확인 결과에 따라 대출 상담 진행 여부 결정"\n}\n```\n\n### 예시 6: 상황 설명 + 해결책 요청 (핵심 패턴!)\n질문: "집주인이 전세금 3억을 10억으로 올려달래. 법적으로 어떻게 해야 해?"\n**CoT 분석**:\n1. 질문 분석: 상황 설명 + 해결책 요청\n2. 연결어: 없지만, "어떻게 해야" = 해결책 요청\n3. 의존성: 법률 확인 → 상황 분석 → 대응 방안\n4. 복합 여부: **YES** (해결책을 위해 여러 단계 필요)\n\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "전세금 인상 한도 관련 법률 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "3억→10억 인상의 법적 타당성 및 적정성 분석",\n            "type": "analysis",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "required_data": {"legal_limit": "task_0.result", "current": 300000000, "requested": 1000000000},\n            "estimated_time": 25\n        },\n        {\n            "description": "구체적 대응 방안 및 해결책 제시",\n            "type": "analysis",\n            "agent": "analysis_team",\n            "priority": 3,\n            "depends_on": ["task_1"],\n            "estimated_time": 20\n        }\n    ],\n    "execution_mode": "sequential",\n    "confidence": 0.95,\n    "reasoning": "상황 설명+해결책 요청 패턴. \'어떻게 해야\'는 단순 정보 조회가 아닌 종합 해결책 필요. 법률 조회 → 상황 분석 → 해결책 제시 3단계 순차 처리"\n}\n```\n\n## Chain-of-Thought 프로세스:\n\n1. **질문 분석**: 어떤 정보나 작업을 요구하는가?\n2. **연결어 확인**: "그리고", "또한", "해서", "한 후" 등이 있는가?\n3. **의존성 파악**: 어떤 작업이 다른 작업의 결과를 필요로 하는가?\n4. **병렬성 판단**: 독립적으로 실행 가능한 작업이 있는가?\n5. **최적화**: 불필요한 분해는 없는가?\n\n## 응답 형식 (JSON):\n\n{\n    "is_compound": true/false,\n    "sub_tasks": [\n        {\n            "description": "작업 설명",\n            "type": "작업 유형",\n            "agent": "담당 팀",\n            "priority": 우선순위 (1이 가장 높음),\n            "depends_on": ["선행 작업 ID 리스트"],\n            "required_data": {"필요한 데이터 매핑"},\n            "estimated_time": 예상 소요 시간(초),\n            "optional": true/false,\n            "context": {"추가 컨텍스트"}\n        }\n    ],\n    "execution_mode": "sequential/parallel/mixed/conditional",\n    "parallel_groups": [["병렬 실행 가능한 작업 ID 그룹"]],\n    "confidence": 0.0-1.0,\n    "reasoning": "분해 결정의 이유와 근거"\n}\n\n## 분해 가이드라인:\n\n1. **분해가 필요한 경우**:\n   - 여러 종류의 정보를 요청하는 경우\n   - 순차적 처리가 필요한 경우 (A의 결과로 B 수행)\n   - 서로 다른 팀의 전문성이 필요한 경우\n\n2. **분해가 불필요한 경우**:\n   - 단일 정보 조회\n   - 단순한 질문-답변\n   - 하나의 팀에서 완전히 처리 가능한 경우\n\n3. **병렬 처리 기준**:\n   - 서로 독립적인 정보 조회\n   - 의존성이 없는 분석 작업\n   - 동시에 진행해도 충돌하지 않는 작업\n\n4. **우선순위 설정**:\n   - 의존성이 없는 작업: priority 1\n   - 1차 의존 작업: priority 2\n   - 2차 의존 작업: priority 3\n   - 이런 식으로 증가\n\n현재 의도: 종합분석\n추출된 엔티티: {\'law\': \'임대차보호법\', \'action_verbs\': [\'찾고\', \'판단\']}\n\n분석할 질문: 임대차보호법 내용 찾고 적용 가능 여부 판단해줘'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 16:01:25,335 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 16:01:25,335 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 16:01:25,335 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 16:01:25,335 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 16:01:25,335 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 16:01:25,337 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 16:01:28,373 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 07:01:28 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'2765'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'2790'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9951'), (b'x-ratelimit-remaining-tokens', b'197317'), (b'x-ratelimit-reset-requests', b'6m56.729s'), (b'x-ratelimit-reset-tokens', b'804ms'), (b'x-request-id', b'req_896dd69fdfde4dccaea5908339fd0742'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b0c313daf3091-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 16:01:28,373 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 16:01:28,373 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 16:01:28,373 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 16:01:28,374 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 16:01:28,374 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 16:01:28,374 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 07:01:28 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '2765', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '2790', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9951', 'x-ratelimit-remaining-tokens': '197317', 'x-ratelimit-reset-requests': '6m56.729s', 'x-ratelimit-reset-tokens': '804ms', 'x-request-id': 'req_896dd69fdfde4dccaea5908339fd0742', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b0c313daf3091-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 16:01:28,374 - openai._base_client - DEBUG - request_id: req_896dd69fdfde4dccaea5908339fd0742
2025-10-05 16:01:28,374 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: query_decomposition | Model: gpt-4o-mini-2024-07-18 | Tokens: 2903 (prompt: 2717, completion: 186)
2025-10-05 16:01:28,374 - app.service_agent.cognitive_agents.query_decomposer - INFO - Successfully decomposed into 2 tasks
2025-10-05 16:01:28,374 - app.service_agent.cognitive_agents.planning_agent - INFO - Query decomposed into 2 tasks
2025-10-05 16:01:28,374 - app.service_agent.cognitive_agents.planning_agent - WARNING - Plan validation errors: ["Agent 'search_team' not found in registry", "Agent 'analysis_team' depends on missing 'task_0'", "Agent 'analysis_team' not found in registry"]
2025-10-05 16:01:28,374 - app.service_agent.cognitive_agents.planning_agent - INFO - Optimizing execution plan
2025-10-05 16:01:28,375 - app.service_agent.cognitive_agents.planning_agent - INFO - Comprehensive plan created: Intent: 종합분석 (confidence: 0.85) | Strategy: sequential | Agents: search_team, analysis_team | Estimated time: 45.0s
2025-10-05 16:01:28,375 - __main__ - INFO -   전략: sequential
2025-10-05 16:01:28,375 - __main__ - INFO -   단계 수: 2
2025-10-05 16:01:28,375 - __main__ - INFO - 
✓ 테스트 성공 (소요시간: 26.63초)
2025-10-05 16:01:28,375 - __main__ - INFO - 
================================================================================
2025-10-05 16:01:28,375 - __main__ - INFO - [30] 복합 질문 테스트: D010
2025-10-05 16:01:28,375 - __main__ - INFO - 질문: 용산구 매매 시세 조회하고 전세 전환 계산해줘
2025-10-05 16:01:28,375 - __main__ - INFO - ================================================================================
2025-10-05 16:01:28,375 - __main__ - INFO - 
[Step 1] Intent 분석...
2025-10-05 16:01:28,375 - app.service_agent.cognitive_agents.planning_agent - INFO - Analyzing intent for query: 용산구 매매 시세 조회하고 전세 전환 계산해줘...
2025-10-05 16:01:28,375 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-35298f7b-64bc-46ec-97d7-72e5eea67b57', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 의도 분석 전문가입니다.\n사용자의 질문을 정확히 이해하고, 어떤 종류의 도움이 필요한지 분류해야 합니다.\n\n## Chain-of-Thought 분석 프로세스\n\n질문을 분석할 때 다음 단계를 **순서대로** 따르세요:\n\n### 1단계: 질문 구조 파악\n- 단순 정보 요청인가? (예: "~이 뭐야?", "~알려줘")\n- 상황 설명이 포함되어 있는가? (배경, 현재 상태)\n- 구체적 수치나 데이터가 있는가? (금액, 비율, 기간 등)\n- 문제 해결을 요구하는가? (예: "어떻게 해야 해?", "방법 알려줘")\n\n### 2단계: 요청 유형 판단\n- **정보 확인형**: 사실, 개념, 규정 확인 → 검색만으로 충분\n- **평가/판단형**: "괜찮아?", "적절해?", "문제있어?" → 검색 + 분석 필요\n- **해결책 요청형**: "어떻게?", "방법?", "대처?" → 검색 + 분석 + 제안 필요\n- **비교/선택형**: "A vs B", "어느게 나아?" → 검색 + 분석(비교) 필요\n\n### 3단계: 복잡도 평가\n- **저**: 단일 개념/사실 확인 (예: "전세금 인상률 한도?")\n- **중**: 특정 상황 + 판단 (예: "3억을 5억으로 올려달래. 가능해?")\n- **고**: 복잡한 상황 + 여러 조건 + 해결책 (예: "10년 거주, 3억→10억 요구. 어떻게 해야 해?")\n\n### 4단계: 필요한 처리 결정\n- **검색만**: 정보 확인형 + 저복잡도\n- **검색+분석**: 평가/판단형 OR 중복잡도 OR 수치 비교 포함\n- **종합처리**: 해결책 요청형 OR 고복잡도 OR 여러 조건 동시 고려\n\n### 5단계: 최종 검증\n- 선택한 의도로 사용자 질문에 완전히 답변 가능한가?\n- 단순 정보 제공으로 끝나는가, 아니면 추가 분석/판단이 필요한가?\n- 상황 설명이 있으면서 "해결", "방법", "어떻게" 등이 있으면 → COMPREHENSIVE 고려\n\n## 중요: 복합 질문 처리\n복합적인 질문(여러 의도가 섞인 질문)의 경우, 가장 핵심적인 의도를 파악하되,\nsub_intents 필드에 부가적인 의도들도 함께 기록해주세요.\n\n**특히 주의**:\n- 법률 키워드가 있어도, "해결방법", "어떻게 해야" 같은 표현이 있으면 단순 LEGAL_CONSULT가 아닐 수 있음\n- 구체적 상황(금액, 기간 등) + 해결책 요구 = COMPREHENSIVE 또는 복합 의도로 분류\n\n## 분류 카테고리 설명:\n\n1. **LEGAL_CONSULT (법률상담)**\n   - 설명: 부동산 관련 법률, 권리, 의무에 대한 질문\n   - 예시:\n     * 단순: "전세금 5% 인상이 가능한가요?", "임대차계약 갱신 거부할 수 있나요?"\n     * 복합: "전세금 인상 가능한지 확인하고 법적 근거도 알려주세요"\n   - 키워드: 법, 전세, 임대, 보증금, 계약, 권리, 의무, 갱신, 임차인, 임대인, 법률, 규정, 조항\n   - 필요한 처리: 법률 데이터베이스 검색, 관련 법조항 찾기\n\n2. **MARKET_INQUIRY (시세조회)**\n   - 설명: 부동산 시장 가격, 시세, 거래 동향에 대한 질문\n   - 예시:\n     * 단순: "강남구 아파트 전세 시세 알려주세요", "서초동 매매가 얼마나 올랐나요?"\n     * 복합: "강남구 시세 확인하고 대출 가능 금액도 계산해줘"\n   - 키워드: 시세, 가격, 매매가, 전세가, 월세, 시장, 동향, 평균, 지역명, 상승률, 하락률\n   - 필요한 처리: 부동산 시세 데이터 조회, 지역별 가격 분석\n\n3. **LOAN_CONSULT (대출상담)**\n   - 설명: 주택담보대출, 전세자금대출 등 금융 관련 질문\n   - 예시:\n     * 단순: "전세자금대출 한도가 얼마인가요?", "LTV가 뭔가요?"\n     * 복합: "대출 한도 확인하고 금리 비교도 해주세요"\n   - 키워드: 대출, 금리, 한도, 조건, 상환, LTV, DTI, DSR, 담보, 금융, 은행\n   - 필요한 처리: 대출 상품 조회, 금리 정보 검색, 한도 계산\n\n4. **CONTRACT_CREATION (계약서작성)**\n   - 설명: 새로운 계약서나 문서를 작성해달라는 요청\n   - 예시:\n     * 단순: "임대차계약서 작성해주세요", "전세계약서 초안 만들어주세요"\n     * 복합: "계약서 작성하고 주의사항도 검토해주세요"\n   - 키워드: 작성, 만들, 생성, 초안, 계약서, 문서, 양식\n   - 필요한 처리: 문서 생성 에이전트 호출, 템플릿 기반 작성\n\n5. **CONTRACT_REVIEW (계약서검토)**\n   - 설명: 기존 계약서나 문서를 검토해달라는 요청\n   - 예시:\n     * 단순: "이 계약서 검토해주세요", "특약사항 문제없나요?"\n     * 복합: "계약서 검토하고 수정사항도 제안해주세요"\n   - 키워드: 검토, 확인, 점검, 리뷰, 분석해, 살펴봐, 체크\n   - 필요한 처리: 문서 분석, 위험 요소 식별, 개선사항 제안\n\n6. **COMPREHENSIVE (종합분석)**\n   - 설명: 여러 측면을 종합적으로 분석해달라는 요청, 또는 복잡한 상황에 대한 해결책 요청\n   - 예시:\n     * 단순: "이 물건 전체적으로 분석해주세요"\n     * 복합: "시세, 법률, 대출 모두 검토해서 종합 의견 주세요"\n     * 해결형: "10년 거주했는데 전세금 3억을 10억으로 올려달래. 어떻게 해야 해?"\n     * 상황+해결: "집주인이 계약 갱신 거부했어. 법적으로 어떻게 대응해야 할까?"\n   - 키워드: 종합, 전체, 모든, 전반적, 종합적, 평가, 분석, 어떻게, 방법, 해결, 대처\n   - 패턴: 구체적 상황 설명 + "어떻게/방법/해결" 요청\n   - 필요한 처리: 다중 데이터 소스 통합 분석, 상황 평가, 해결책 제시\n\n7. **RISK_ANALYSIS (리스크분석)**\n   - 설명: 위험 요소나 주의사항에 대한 질문\n   - 예시:\n     * 단순: "이 계약 위험한가요?", "주의할 점 알려주세요"\n     * 복합: "리스크 분석하고 대안도 제시해주세요"\n   - 키워드: 위험, 리스크, 주의, 문제점, 조심, 걱정, 우려\n   - 필요한 처리: 위험 요소 분석, 주의사항 추출\n\n8. **UNCLEAR (불분명)**\n   - 설명: 의도를 명확히 파악하기 어려운 질문\n   - 예시: "이거 좀 봐주세요", "어떻게 해야 할까요?", "도와주세요"\n   - 처리: 추가 질문으로 의도 명확화 필요\n\n9. **IRRELEVANT (무관)**\n   - 설명: 부동산과 전혀 관련 없는 질문\n   - 예시: "날씨 어때?", "저녁 뭐 먹지?", "주식 추천해줘"\n   - 처리: 부동산 관련 질문을 유도\n\n## 복합 질문 예시와 분석 (CoT 적용):\n\n### 예시 1: "강남구 아파트 시세 알려주고 전세자금대출 가능한지도 확인해줘"\n**CoT 분석**:\n1. 구조: 두 개의 요청 ("시세" + "대출")\n2. 유형: 정보 확인형 (둘 다)\n3. 복잡도: 중 (두 가지 독립적 조회)\n4. 필요 처리: 검색 + 계산/분석\n\n**결론**:\n- 주 의도: MARKET_INQUIRY (시세 조회가 먼저 필요)\n- 부가 의도: LOAN_CONSULT (대출 확인)\n- 분해: ["강남구 아파트 시세 조회", "전세자금대출 가능 여부 확인"]\n\n### 예시 2: "이 계약서 검토해서 위험한 부분 있는지 알려주고 수정 제안도 해줘"\n**CoT 분석**:\n1. 구조: 검토 + 위험 평가 + 수정안\n2. 유형: 평가/판단형 + 해결책 요청형\n3. 복잡도: 고 (3단계 처리)\n4. 필요 처리: 검토 + 분석 + 문서 생성\n\n**결론**:\n- 주 의도: CONTRACT_REVIEW (계약서 검토)\n- 부가 의도: RISK_ANALYSIS (위험 분석)\n- 분해: ["계약서 전체 검토", "위험 요소 식별", "수정사항 제안"]\n\n### 예시 3: "집주인이 짜증나, 10년 살았는데 전세금 3억을 10억으로 올려달래. 법적으로 해결방법 알려줘"\n**CoT 분석**:\n1. 구조: 상황 설명 (10년 거주, 3억→10억) + 해결책 요청\n2. 유형: 해결책 요청형 (단순 정보 X)\n3. 복잡도: 고 (구체적 상황 + 수치 비교 + 법률 + 대응방안)\n4. 필요 처리: 법률 검색 + 상황 분석 + 해결책 제시\n\n**결론**:\n- 주 의도: COMPREHENSIVE (복잡한 상황에 대한 종합 해결)\n- 부가 의도: LEGAL_CONSULT, RISK_ANALYSIS\n- 분해: ["전세금 인상 한도 법률 조회", "3억→10억 인상의 타당성 분석", "구체적 대응 방안 제시"]\n- **이유**: "법적으로"라는 키워드가 있지만, 단순 법률 확인이 아니라 구체적 상황에 대한 해결책을 요구하므로 COMPREHENSIVE\n\n### 예시 4: "전세금 인상률 상한이 얼마야?"\n**CoT 분석**:\n1. 구조: 단순 사실 확인\n2. 유형: 정보 확인형\n3. 복잡도: 저 (단일 개념)\n4. 필요 처리: 검색만\n\n**결론**:\n- 주 의도: LEGAL_CONSULT (법률 정보 조회)\n- 부가 의도: 없음\n- 분해: 필요 없음\n\n## 응답 형식 (JSON 형식으로 응답):\n\n```json\n{\n    "intent": "LEGAL_CONSULT",\n    "confidence": 0.9,\n    "keywords": ["전세금", "인상", "제한"],\n    "sub_intents": [],\n    "is_compound": false,\n    "decomposed_tasks": [],\n    "entities": {\n        "location": "강남구",\n        "price": "5억",\n        "contract_type": "전세",\n        "date": "2024년",\n        "area": "84㎡",\n        "action_verbs": ["확인", "검토"]\n    },\n    "reasoning": "전세금 인상에 대한 법률 질문이므로 LEGAL_CONSULT로 분류"\n}\n```\n\n응답 규칙:\n- intent: 위 9개 카테고리 중 하나 (대문자_언더스코어 형식)\n- confidence: 0.0~1.0 (0.8 이상이면 매우 확실, 0.5 미만이면 불확실)\n- keywords: 추출된 주요 키워드 목록\n- sub_intents: 복합 질문일 경우 부가적인 의도들\n- is_compound: 복합 질문 여부 (true/false)\n- decomposed_tasks: 복합 질문을 분해한 개별 작업들\n- entities: 추출된 엔티티 정보\n- reasoning: **반드시 CoT 5단계를 거쳐 분석한 과정을 포함** (구조 파악 → 유형 판단 → 복잡도 평가 → 필요 처리 → 최종 검증)\n\n## reasoning 작성 예시:\n"1단계(구조): 상황 설명(10년 거주, 3억→10억) + 해결책 요청 포함.\n2단계(유형): 해결책 요청형 - 단순 정보가 아닌 대응방안 필요.\n3단계(복잡도): 고 - 구체적 수치 비교와 복잡한 상황.\n4단계(처리): 법률 검색 + 상황 분석 + 해결책 제시 필요.\n5단계(검증): LEGAL_CONSULT만으로는 불충분, 종합적 분석 필요 → COMPREHENSIVE 선택"\n\n## 판단 가이드:\n- 여러 의도가 섞여있다면, 가장 주된 의도를 intent에, 나머지를 sub_intents에 기록\n- "그리고", "또한", "함께", "같이" 등의 연결어가 있으면 복합 질문일 가능성 높음\n- 법률 관련 키워드가 있으면 LEGAL_CONSULT 우선\n- 가격/시세 언급이 명확하면 MARKET_INQUIRY\n- 계약서라는 단어와 함께 "작성/만들기"가 있으면 CONTRACT_CREATION\n- 계약서라는 단어와 함께 "검토/확인"이 있으면 CONTRACT_REVIEW\n- 불확실하면 confidence를 낮게 설정하고 UNCLEAR 선택\n- 복합 질문은 is_compound를 true로 설정하고 개별 작업으로 분해\n\n분석할 질문: 용산구 매매 시세 조회하고 전세 전환 계산해줘'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 16:01:28,376 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 16:01:28,376 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 16:01:28,376 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 16:01:28,376 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 16:01:28,376 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 16:01:28,376 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 16:01:34,414 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 07:01:34 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'5744'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'5772'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9951'), (b'x-ratelimit-remaining-tokens', b'197240'), (b'x-ratelimit-reset-requests', b'7m2.343s'), (b'x-ratelimit-reset-tokens', b'828ms'), (b'x-request-id', b'req_0bb08f4a0f5b491aade383c198080860'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b0c443f7d3091-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 16:01:34,415 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 16:01:34,415 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 16:01:34,415 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 16:01:34,415 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 16:01:34,415 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 16:01:34,415 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 07:01:34 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '5744', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '5772', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9951', 'x-ratelimit-remaining-tokens': '197240', 'x-ratelimit-reset-requests': '7m2.343s', 'x-ratelimit-reset-tokens': '828ms', 'x-request-id': 'req_0bb08f4a0f5b491aade383c198080860', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b0c443f7d3091-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 16:01:34,415 - openai._base_client - DEBUG - request_id: req_0bb08f4a0f5b491aade383c198080860
2025-10-05 16:01:34,415 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: intent_analysis | Model: gpt-4o-mini-2024-07-18 | Tokens: 3433 (prompt: 3185, completion: 248)
2025-10-05 16:01:34,415 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM Intent Analysis Result: {'intent': 'COMPREHENSIVE', 'confidence': 0.85, 'keywords': ['용산구', '매매 시세', '전세 전환', '계산'], 'sub_intents': ['MARKET_INQUIRY', 'LOAN_CONSULT'], 'is_compound': True, 'decomposed_tasks': ['용산구 매매 시세 조회', '전세 전환 계산'], 'entities': {'location': '용산구', 'action_verbs': ['조회', '계산']}, 'reasoning': '1단계(구조): 두 개의 요청(매매 시세 조회 + 전세 전환 계산) 포함. 2단계(유형): 정보 확인형(시세) + 해결책 요청형(전세 전환 계산). 3단계(복잡도): 중 - 두 가지 독립적 조회가 필요. 4단계(처리): 검색 + 계산 필요. 5단계(검증): 두 가지 요청이 있으므로 COMPREHENSIVE로 분류.'}
2025-10-05 16:01:34,416 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-798cd6fb-f9b6-4b10-aa64-9e2beb7674c4', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 Agent 선택 전문가입니다.\n사용자의 요청에 가장 적합한 Agent/Team을 선택하는 것이 목표입니다.\n\n## 현재 상황\n\n**사용자 질문:** 용산구 매매 시세 조회하고 전세 전환 계산해줘\n**분석된 의도:** 종합분석\n**추출된 키워드:** [\'용산구\', \'매매 시세\', \'전세 전환\', \'계산\']\n\n## 사용 가능한 Agent/Team 정보\n\n{\'search_team\': {\'name\': \'search_team\', \'capabilities\': \'법률 검색, 부동산 시세 조회, 대출 상품 검색\', \'tools\': [\'legal_search\', \'market_data\', \'loan_data\'], \'use_cases\': [\'법률 상담\', \'시세 조회\', \'대출 정보\']}, \'analysis_team\': {\'name\': \'analysis_team\', \'capabilities\': \'데이터 분석, 리스크 평가, 인사이트 생성, 추천\', \'tools\': [\'data_analyzer\', \'risk_evaluator\'], \'use_cases\': [\'시장 분석\', \'리스크 평가\', \'투자 분석\']}, \'document_team\': {\'name\': \'document_team\', \'capabilities\': \'계약서 작성, 문서 생성, 문서 검토\', \'tools\': [\'document_generator\', \'contract_reviewer\'], \'use_cases\': [\'계약서 작성\', \'문서 검토\']}}\n\n## Agent 역할 및 상세 가이드\n\n### 1. search_team (검색 팀)\n- **주요 기능**: 정보 검색 및 데이터 수집\n- **전문 분야**:\n  * 법률 정보 검색 (전세법, 임대차보호법, 부동산 관련 법규)\n  * 부동산 시세 조회 (매매가, 전세가, 월세, 실거래가)\n  * 대출 상품 정보 검색 (금리, 한도, 조건)\n  * 지역 정보 및 인프라 조회\n- **도구**: legal_search, market_data, loan_data\n- **적합한 작업**: 정보 조회, 데이터 수집, 법률 확인, 시세 파악\n- **예시**:\n  * "전세금 5% 인상 가능한가요?"\n  * "강남구 아파트 전세 시세"\n  * "전세자금대출 한도 얼마?"\n\n### 2. analysis_team (분석 팀)\n- **주요 기능**: 데이터 분석 및 평가\n- **전문 분야**:\n  * 시장 동향 분석 (상승률, 하락률, 추세)\n  * 리스크 평가 (계약, 투자 위험도)\n  * 투자 수익률 계산 (ROI, 월세 수익률)\n  * 대출 한도 및 조건 분석 (LTV, DTI, DSR)\n  * 비교 분석 (지역별, 상품별)\n- **도구**: data_analyzer, risk_evaluator, calculator\n- **적합한 작업**: 데이터 분석, 리스크 평가, 계산, 비교, 예측\n- **의존성**: 보통 search_team의 데이터가 필요\n- **예시**:\n  * "이 지역 투자 가치 분석해줘"\n  * "계약 리스크 평가해줘"\n  * "대출 가능 금액 계산해줘"\n\n### 3. document_team (문서 팀)\n- **주요 기능**: 문서 생성 및 관리\n- **전문 분야**:\n  * 계약서 작성 (임대차, 매매, 전세)\n  * 문서 템플릿 관리\n  * 특약사항 생성\n  * 계약서 수정안 작성\n  * 법률 문서 검토\n- **도구**: document_generator, contract_template, contract_reviewer\n- **적합한 작업**: 문서 작성, 계약서 생성, 문서 수정, 검토\n- **예시**:\n  * "임대차계약서 작성해줘"\n  * "특약사항 추가해줘"\n  * "계약서 수정안 만들어줘"\n\n## Chain-of-Thought Agent 선택 프로세스\n\n다음 단계를 **순서대로** 따라 최적의 Agent 조합을 선택하세요:\n\n### 1단계: 질문 요구사항 파악\n- 단순 정보 조회인가? → search_team만 필요\n- 판단/평가가 필요한가? → search + analysis 필요\n- 해결책 제시가 필요한가? → search + analysis 필요\n- 문서 생성이 필요한가? → document_team 추가\n\n### 2단계: 작업 복잡도 판단\n- **단순** (검색만): "~이 뭐야?", "~알려줘" → search_team\n- **중간** (검색+판단): "~괜찮아?", "~적절해?" → search + analysis\n- **복잡** (종합 해결): 구체적 상황 + "어떻게 해야 해?" → search + analysis\n\n### 3단계: 의존성 분석\n- 독립적 작업: 단일 팀으로 처리 가능\n- 순차적 의존: 이전 결과 필요 → 여러 팀 순서대로\n- 병렬 가능: 동시 조회 가능 → coordination: "parallel"\n\n### 4단계: 최종 검증\n- 선택한 팀들로 질문에 완전히 답변 가능한가?\n- 불필요한 팀이 포함되지 않았는가?\n- 순서가 논리적인가? (데이터 흐름 고려)\n\n### 중요 원칙:\n- **법률 키워드만으로 판단하지 말 것**: "법적으로 어떻게 해야 해?" = 법률 검색 + 분석 필요\n- **상황 설명 + 해결책 요청** = 반드시 analysis_team 포함\n- **구체적 수치 비교** (3억→10억 같은) = analysis_team 필요\n\n## 의도별 Agent 매핑 가이드 (기본 가이드 - CoT로 조정 가능)\n\n| 의도 (Intent) | 기본 조합 | 상황별 조정 |\n|--------------|-----------|-------------|\n| LEGAL_CONSULT | ["search_team"] | 해결책 요청시 → + analysis_team |\n| MARKET_INQUIRY | ["search_team"] | 비교/평가시 → + analysis_team |\n| LOAN_CONSULT | ["search_team", "analysis_team"] | 계산 필수 |\n| CONTRACT_CREATION | ["document_team"] | 검토 후 작성 → search + document |\n| CONTRACT_REVIEW | ["search_team", "analysis_team"] | 법률 검토 + 리스크 분석 |\n| COMPREHENSIVE | ["search_team", "analysis_team"] | **항상 분석 포함** |\n| RISK_ANALYSIS | ["analysis_team"] | 법률 근거 필요시 → search + analysis |\n| UNCLEAR | ["search_team", "analysis_team"] | 포괄적 대응 |\n\n**중요**: 위 매핑은 **기본 가이드**일 뿐입니다.\n실제 질문의 내용(CoT 분석 결과)에 따라 조정하세요!\n\n## 복합 질문 처리 예시 (CoT 적용)\n\n### 예시 1: 순차적 처리\n질문: "강남구 시세 확인하고 투자 가치 분석해줘"\n**CoT 분석**:\n1. 요구사항: 시세 조회 + 투자 가치 평가\n2. 복잡도: 중간 (검색 + 분석)\n3. 의존성: 시세 데이터 → 투자 분석 (순차)\n4. 검증: search만으로는 "투자 가치 평가" 불가능\n\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "1단계: 시세 조회+투자 평가 필요. 2단계: 중간 복잡도. 3단계: 순차 의존. 4단계: search로 시세 수집 후 analysis로 투자 가치 평가 필요",\n    "coordination": "sequential"\n}\n```\n\n### 예시 2: 단순 정보 조회\n질문: "전세금 인상률 한도가 얼마야?"\n**CoT 분석**:\n1. 요구사항: 단순 사실 확인\n2. 복잡도: 낮음 (정보 확인형)\n3. 의존성: 없음\n4. 검증: search_team만으로 충분\n\n```json\n{\n    "selected_agents": ["search_team"],\n    "reasoning": "1단계: 단순 정보 조회. 2단계: 저복잡도. 3단계: 독립적. 4단계: 법률 검색만으로 답변 가능",\n    "coordination": "single"\n}\n```\n\n### 예시 3: 해결책 요청 (핵심 예시!)\n질문: "집주인이 전세금 3억을 10억으로 올려달래. 법적으로 어떻게 해야 해?"\n의도: COMPREHENSIVE\n**CoT 분석**:\n1. 요구사항: 상황 설명 + 해결책 요청\n2. 복잡도: 높음 (구체적 상황 + 수치 비교)\n3. 의존성: 법률 확인 → 상황 분석 → 해결책 제시\n4. 검증: "법적으로"만 보고 search만 선택하면 불충분! 해결책 제시 필요\n\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "1단계: 법률 + 상황 분석 + 해결책 필요. 2단계: 고복잡도(3억→10억 비정상). 3단계: 순차(법률 확인 후 타당성 분석). 4단계: \'어떻게 해야\' = 단순 법률 조회 아님, 분석 필수",\n    "coordination": "sequential",\n    "confidence": 0.95\n}\n```\n\n## 응답 형식 (JSON)\n\n```json\n{\n    "selected_agents": ["선택된 agent/team 목록"],\n    "reasoning": "선택 이유를 구체적으로 설명. 각 Agent의 역할과 처리 순서 포함",\n    "coordination": "single/sequential/parallel/pipeline",\n    "dependencies": {"agent2": ["agent1"]},\n    "estimated_time": 30,\n    "confidence": 0.9\n}\n```\n\n## 선택 가이드라인\n\n1. **최소 Agent 원칙**: 가능한 적은 수의 Agent로 처리\n2. **전문성 우선**: 해당 작업에 가장 전문적인 Agent 선택\n3. **효율성 고려**: 병렬 처리 가능한 경우 명시\n4. **의존성 관리**: 데이터 흐름을 고려한 순서 지정\n5. **폴백 전략**: 불확실한 경우 ["search_team", "analysis_team"] 조합\n\n## 주의사항\n\n- selected_agents는 반드시 배열 형태\n- Agent 이름은 정확히: "search_team", "analysis_team", "document_team"\n- 최소 1개, 최대 3개 선택\n- 순서는 실행 우선순위 (앞에 있을수록 먼저 실행)\n- reasoning은 상세하고 논리적으로 작성\n- coordination 필드로 실행 방식 명시\n- 복합 질문의 경우 의존성 관계 명확히 표시'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 16:01:34,416 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 16:01:34,416 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 16:01:34,417 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 16:01:34,417 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 16:01:34,417 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 16:01:34,417 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 16:01:39,227 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 07:01:39 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'4563'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'4579'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9950'), (b'x-ratelimit-remaining-tokens', b'197881'), (b'x-ratelimit-reset-requests', b'7m4.958s'), (b'x-ratelimit-reset-tokens', b'635ms'), (b'x-request-id', b'req_cb6481c402e943f3a6b56cbd396e8b1f'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b0c69feef3091-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 16:01:39,228 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 16:01:39,228 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 16:01:39,228 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 16:01:39,228 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 16:01:39,229 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 16:01:39,229 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 07:01:39 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '4563', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '4579', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9950', 'x-ratelimit-remaining-tokens': '197881', 'x-ratelimit-reset-requests': '7m4.958s', 'x-ratelimit-reset-tokens': '635ms', 'x-request-id': 'req_cb6481c402e943f3a6b56cbd396e8b1f', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b0c69feef3091-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 16:01:39,229 - openai._base_client - DEBUG - request_id: req_cb6481c402e943f3a6b56cbd396e8b1f
2025-10-05 16:01:39,229 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: agent_selection | Model: gpt-4o-mini-2024-07-18 | Tokens: 2557 (prompt: 2370, completion: 187)
2025-10-05 16:01:39,229 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM agent selection reasoning: 1단계: 용산구의 매매 시세 조회와 전세 전환 계산이 필요하므로, 시세 정보 검색과 데이터 분석이 모두 요구됨. 2단계: 중간 복잡도로, 시세 조회 후 전세 전환 계산이 필요함. 3단계: 시세 데이터를 먼저 수집한 후, 이를 바탕으로 전세 전환 계산을 수행해야 하므로 순차적 의존성이 있음. 4단계: 단순히 시세 조회만으로는 전세 전환 계산이 불가능하므로, 분석 팀이 필요함.
2025-10-05 16:01:39,229 - app.service_agent.cognitive_agents.planning_agent - INFO - ✅ Primary LLM selected agents: ['search_team', 'analysis_team']
2025-10-05 16:01:39,229 - __main__ - INFO -   의도: 종합분석
2025-10-05 16:01:39,229 - __main__ - INFO -   신뢰도: 0.85
2025-10-05 16:01:39,229 - __main__ - INFO -   추천 Agent: ['search_team', 'analysis_team']
2025-10-05 16:01:39,229 - __main__ - INFO - 
[Step 2] Query Decomposition...
2025-10-05 16:01:39,229 - app.service_agent.cognitive_agents.query_decomposer - INFO - Decomposing query: 용산구 매매 시세 조회하고 전세 전환 계산해줘...
2025-10-05 16:01:39,230 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-13c52863-aeed-4950-bbe9-199361d7fba8', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 질문 분해 전문가입니다.\n복잡한 사용자 질문을 독립적으로 처리 가능한 작업 단위로 분해하는 것이 목표입니다.\n\n## Chain-of-Thought 분해 프로세스:\n\n### 1단계: 복합 질문 여부 판단\n- 단순 정보 조회만 필요한가? → is_compound: false\n- **다음 중 하나라도 해당하면 is_compound: true**:\n  * "그리고", "그 다음", "한 후" 같은 연결어로 여러 요청 연결\n  * 명시적으로 2개 이상의 작업 요청 (예: "시세 확인하고 대출 계산해줘")\n  * 상황 설명 + 해결책 요청 (예: "3억→10억 올려달래. 어떻게 해야 해?")\n  * 해결책을 위해 여러 단계 처리 필요 (검색 → 분석 → 제안)\n\n### 2단계: 필요 작업 식별\n- 정보 수집이 필요한가? → search 작업\n- 평가/판단이 필요한가? → analysis 작업\n- 문서 생성이 필요한가? → generation 작업\n- **해결책 요청**인가? → search + analysis (최소 2개)\n\n### 3단계: 작업 순서 결정\n- 독립적 작업: 병렬 가능\n- 이전 결과 필요: 순차 실행 (depends_on 설정)\n\n## 중요 원칙:\n1. 각 작업은 하나의 명확한 목표를 가져야 합니다\n2. 작업 간 의존성을 명확히 파악해야 합니다\n3. 병렬 처리 가능한 작업은 구분해야 합니다\n4. **주의**: "어떻게 해야", "방법 알려줘" 같은 해결책 요청은 복합 질문!\n\n## 작업 유형 (type):\n- search: 정보 검색 (법률, 시세, 대출 정보 등)\n- analysis: 데이터 분석 (리스크 평가, 시장 분석 등)\n- generation: 문서 생성 (계약서 작성 등)\n- review: 검토/평가 (계약서 검토, 조건 확인 등)\n- calculation: 계산/산출 (대출 한도, 세금 등)\n- comparison: 비교 분석 (여러 옵션 비교)\n\n## 담당 팀 (agent):\n- search_team: 법률, 시세, 대출 정보 검색\n- analysis_team: 데이터 분석, 리스크 평가, 계산\n- document_team: 문서 생성, 계약서 작성\n\n## 학습 예시:\n\n### 예시 1: 복합 질문 (순차적)\n질문: "강남구 아파트 시세 확인하고 대출 가능 금액 계산해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "강남구 아파트 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "대출 가능 금액 계산",\n            "type": "calculation",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "required_data": {"price": "task_0.result.price"},\n            "estimated_time": 15\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "시세 정보가 있어야 대출 금액 계산이 가능하므로 순차 실행"\n}\n```\n\n### 예시 2: 복합 질문 (병렬 가능)\n질문: "이 지역 전세 시세와 매매 시세 모두 알려주고 비교 분석해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "전세 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "매매 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "전세/매매 시세 비교 분석",\n            "type": "comparison",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0", "task_1"],\n            "required_data": {\n                "lease_price": "task_0.result",\n                "sale_price": "task_1.result"\n            },\n            "estimated_time": 25\n        }\n    ],\n    "execution_mode": "mixed",\n    "parallel_groups": [["task_0", "task_1"], ["task_2"]],\n    "reasoning": "시세 조회는 독립적이므로 병렬 처리, 비교는 두 결과 필요"\n}\n```\n\n### 예시 3: 복합 질문 (3단계 이상)\n질문: "이 계약서 검토해서 위험한 부분 찾고 수정안 만들어서 최종 계약서 작성해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "계약서 내용 전체 검토",\n            "type": "review",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 30\n        },\n        {\n            "description": "위험 요소 및 문제점 분석",\n            "type": "analysis",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "estimated_time": 25\n        },\n        {\n            "description": "수정안 제안 생성",\n            "type": "generation",\n            "agent": "document_team",\n            "priority": 3,\n            "depends_on": ["task_1"],\n            "estimated_time": 20\n        },\n        {\n            "description": "최종 계약서 작성",\n            "type": "generation",\n            "agent": "document_team",\n            "priority": 4,\n            "depends_on": ["task_2"],\n            "estimated_time": 30\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "각 단계가 이전 결과에 의존하므로 순차 실행 필요"\n}\n```\n\n### 예시 4: 단순 질문 (분해 불필요)\n질문: "전세금 인상률 상한이 얼마야?"\n분해:\n```json\n{\n    "is_compound": false,\n    "sub_tasks": [\n        {\n            "description": "전세금 인상률 상한 법률 정보 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 15\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "단일 정보 조회 요청으로 분해 불필요"\n}\n```\n\n### 예시 5: 조건부 실행\n질문: "이 물건 시세 확인하고 적정가면 대출 상담도 받고 싶어"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "물건 시세 조회 및 적정성 평가",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 25\n        },\n        {\n            "description": "대출 상담 정보 제공",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "optional": true,\n            "context": {"condition": "if_reasonable_price"},\n            "estimated_time": 20\n        }\n    ],\n    "execution_mode": "conditional",\n    "reasoning": "시세 확인 결과에 따라 대출 상담 진행 여부 결정"\n}\n```\n\n### 예시 6: 상황 설명 + 해결책 요청 (핵심 패턴!)\n질문: "집주인이 전세금 3억을 10억으로 올려달래. 법적으로 어떻게 해야 해?"\n**CoT 분석**:\n1. 질문 분석: 상황 설명 + 해결책 요청\n2. 연결어: 없지만, "어떻게 해야" = 해결책 요청\n3. 의존성: 법률 확인 → 상황 분석 → 대응 방안\n4. 복합 여부: **YES** (해결책을 위해 여러 단계 필요)\n\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "전세금 인상 한도 관련 법률 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "3억→10억 인상의 법적 타당성 및 적정성 분석",\n            "type": "analysis",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "required_data": {"legal_limit": "task_0.result", "current": 300000000, "requested": 1000000000},\n            "estimated_time": 25\n        },\n        {\n            "description": "구체적 대응 방안 및 해결책 제시",\n            "type": "analysis",\n            "agent": "analysis_team",\n            "priority": 3,\n            "depends_on": ["task_1"],\n            "estimated_time": 20\n        }\n    ],\n    "execution_mode": "sequential",\n    "confidence": 0.95,\n    "reasoning": "상황 설명+해결책 요청 패턴. \'어떻게 해야\'는 단순 정보 조회가 아닌 종합 해결책 필요. 법률 조회 → 상황 분석 → 해결책 제시 3단계 순차 처리"\n}\n```\n\n## Chain-of-Thought 프로세스:\n\n1. **질문 분석**: 어떤 정보나 작업을 요구하는가?\n2. **연결어 확인**: "그리고", "또한", "해서", "한 후" 등이 있는가?\n3. **의존성 파악**: 어떤 작업이 다른 작업의 결과를 필요로 하는가?\n4. **병렬성 판단**: 독립적으로 실행 가능한 작업이 있는가?\n5. **최적화**: 불필요한 분해는 없는가?\n\n## 응답 형식 (JSON):\n\n{\n    "is_compound": true/false,\n    "sub_tasks": [\n        {\n            "description": "작업 설명",\n            "type": "작업 유형",\n            "agent": "담당 팀",\n            "priority": 우선순위 (1이 가장 높음),\n            "depends_on": ["선행 작업 ID 리스트"],\n            "required_data": {"필요한 데이터 매핑"},\n            "estimated_time": 예상 소요 시간(초),\n            "optional": true/false,\n            "context": {"추가 컨텍스트"}\n        }\n    ],\n    "execution_mode": "sequential/parallel/mixed/conditional",\n    "parallel_groups": [["병렬 실행 가능한 작업 ID 그룹"]],\n    "confidence": 0.0-1.0,\n    "reasoning": "분해 결정의 이유와 근거"\n}\n\n## 분해 가이드라인:\n\n1. **분해가 필요한 경우**:\n   - 여러 종류의 정보를 요청하는 경우\n   - 순차적 처리가 필요한 경우 (A의 결과로 B 수행)\n   - 서로 다른 팀의 전문성이 필요한 경우\n\n2. **분해가 불필요한 경우**:\n   - 단일 정보 조회\n   - 단순한 질문-답변\n   - 하나의 팀에서 완전히 처리 가능한 경우\n\n3. **병렬 처리 기준**:\n   - 서로 독립적인 정보 조회\n   - 의존성이 없는 분석 작업\n   - 동시에 진행해도 충돌하지 않는 작업\n\n4. **우선순위 설정**:\n   - 의존성이 없는 작업: priority 1\n   - 1차 의존 작업: priority 2\n   - 2차 의존 작업: priority 3\n   - 이런 식으로 증가\n\n현재 의도: 종합분석\n추출된 엔티티: None\n\n분석할 질문: 용산구 매매 시세 조회하고 전세 전환 계산해줘'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 16:01:39,230 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 16:01:39,231 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 16:01:39,231 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 16:01:39,231 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 16:01:39,231 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 16:01:39,231 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 16:01:42,756 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 07:01:42 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'3039'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'3068'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9950'), (b'x-ratelimit-remaining-tokens', b'197334'), (b'x-ratelimit-reset-requests', b'7m8.775s'), (b'x-ratelimit-reset-tokens', b'799ms'), (b'x-request-id', b'req_ed1abb1e6dde41b08992833fa33ab3e7'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b0c880e943091-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 16:01:42,756 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 16:01:42,757 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 16:01:42,757 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 16:01:42,757 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 16:01:42,757 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 16:01:42,757 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 07:01:42 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '3039', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '3068', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9950', 'x-ratelimit-remaining-tokens': '197334', 'x-ratelimit-reset-requests': '7m8.775s', 'x-ratelimit-reset-tokens': '799ms', 'x-request-id': 'req_ed1abb1e6dde41b08992833fa33ab3e7', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b0c880e943091-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 16:01:42,757 - openai._base_client - DEBUG - request_id: req_ed1abb1e6dde41b08992833fa33ab3e7
2025-10-05 16:01:42,758 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: query_decomposition | Model: gpt-4o-mini-2024-07-18 | Tokens: 2874 (prompt: 2695, completion: 179)
2025-10-05 16:01:42,758 - app.service_agent.cognitive_agents.query_decomposer - INFO - Successfully decomposed into 2 tasks
2025-10-05 16:01:42,758 - __main__ - INFO -   복합 질문: True
2025-10-05 16:01:42,758 - __main__ - INFO -   작업 수: 2
2025-10-05 16:01:42,758 - __main__ - INFO -   실행 모드: sequential
2025-10-05 16:01:42,758 - __main__ - INFO -     - task_0: 용산구 매매 시세 조회 (search_team)
2025-10-05 16:01:42,758 - __main__ - INFO -     - task_1: 전세 전환 계산 (analysis_team)
2025-10-05 16:01:42,758 - __main__ - INFO - 
[Step 3] Comprehensive Plan 생성...
2025-10-05 16:01:42,758 - app.service_agent.cognitive_agents.planning_agent - INFO - Creating comprehensive plan for query: 용산구 매매 시세 조회하고 전세 전환 계산해줘...
2025-10-05 16:01:42,758 - app.service_agent.cognitive_agents.planning_agent - INFO - Analyzing intent for query: 용산구 매매 시세 조회하고 전세 전환 계산해줘...
2025-10-05 16:01:42,758 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-107d722e-ab85-4720-9d62-c743b37523a6', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 의도 분석 전문가입니다.\n사용자의 질문을 정확히 이해하고, 어떤 종류의 도움이 필요한지 분류해야 합니다.\n\n## Chain-of-Thought 분석 프로세스\n\n질문을 분석할 때 다음 단계를 **순서대로** 따르세요:\n\n### 1단계: 질문 구조 파악\n- 단순 정보 요청인가? (예: "~이 뭐야?", "~알려줘")\n- 상황 설명이 포함되어 있는가? (배경, 현재 상태)\n- 구체적 수치나 데이터가 있는가? (금액, 비율, 기간 등)\n- 문제 해결을 요구하는가? (예: "어떻게 해야 해?", "방법 알려줘")\n\n### 2단계: 요청 유형 판단\n- **정보 확인형**: 사실, 개념, 규정 확인 → 검색만으로 충분\n- **평가/판단형**: "괜찮아?", "적절해?", "문제있어?" → 검색 + 분석 필요\n- **해결책 요청형**: "어떻게?", "방법?", "대처?" → 검색 + 분석 + 제안 필요\n- **비교/선택형**: "A vs B", "어느게 나아?" → 검색 + 분석(비교) 필요\n\n### 3단계: 복잡도 평가\n- **저**: 단일 개념/사실 확인 (예: "전세금 인상률 한도?")\n- **중**: 특정 상황 + 판단 (예: "3억을 5억으로 올려달래. 가능해?")\n- **고**: 복잡한 상황 + 여러 조건 + 해결책 (예: "10년 거주, 3억→10억 요구. 어떻게 해야 해?")\n\n### 4단계: 필요한 처리 결정\n- **검색만**: 정보 확인형 + 저복잡도\n- **검색+분석**: 평가/판단형 OR 중복잡도 OR 수치 비교 포함\n- **종합처리**: 해결책 요청형 OR 고복잡도 OR 여러 조건 동시 고려\n\n### 5단계: 최종 검증\n- 선택한 의도로 사용자 질문에 완전히 답변 가능한가?\n- 단순 정보 제공으로 끝나는가, 아니면 추가 분석/판단이 필요한가?\n- 상황 설명이 있으면서 "해결", "방법", "어떻게" 등이 있으면 → COMPREHENSIVE 고려\n\n## 중요: 복합 질문 처리\n복합적인 질문(여러 의도가 섞인 질문)의 경우, 가장 핵심적인 의도를 파악하되,\nsub_intents 필드에 부가적인 의도들도 함께 기록해주세요.\n\n**특히 주의**:\n- 법률 키워드가 있어도, "해결방법", "어떻게 해야" 같은 표현이 있으면 단순 LEGAL_CONSULT가 아닐 수 있음\n- 구체적 상황(금액, 기간 등) + 해결책 요구 = COMPREHENSIVE 또는 복합 의도로 분류\n\n## 분류 카테고리 설명:\n\n1. **LEGAL_CONSULT (법률상담)**\n   - 설명: 부동산 관련 법률, 권리, 의무에 대한 질문\n   - 예시:\n     * 단순: "전세금 5% 인상이 가능한가요?", "임대차계약 갱신 거부할 수 있나요?"\n     * 복합: "전세금 인상 가능한지 확인하고 법적 근거도 알려주세요"\n   - 키워드: 법, 전세, 임대, 보증금, 계약, 권리, 의무, 갱신, 임차인, 임대인, 법률, 규정, 조항\n   - 필요한 처리: 법률 데이터베이스 검색, 관련 법조항 찾기\n\n2. **MARKET_INQUIRY (시세조회)**\n   - 설명: 부동산 시장 가격, 시세, 거래 동향에 대한 질문\n   - 예시:\n     * 단순: "강남구 아파트 전세 시세 알려주세요", "서초동 매매가 얼마나 올랐나요?"\n     * 복합: "강남구 시세 확인하고 대출 가능 금액도 계산해줘"\n   - 키워드: 시세, 가격, 매매가, 전세가, 월세, 시장, 동향, 평균, 지역명, 상승률, 하락률\n   - 필요한 처리: 부동산 시세 데이터 조회, 지역별 가격 분석\n\n3. **LOAN_CONSULT (대출상담)**\n   - 설명: 주택담보대출, 전세자금대출 등 금융 관련 질문\n   - 예시:\n     * 단순: "전세자금대출 한도가 얼마인가요?", "LTV가 뭔가요?"\n     * 복합: "대출 한도 확인하고 금리 비교도 해주세요"\n   - 키워드: 대출, 금리, 한도, 조건, 상환, LTV, DTI, DSR, 담보, 금융, 은행\n   - 필요한 처리: 대출 상품 조회, 금리 정보 검색, 한도 계산\n\n4. **CONTRACT_CREATION (계약서작성)**\n   - 설명: 새로운 계약서나 문서를 작성해달라는 요청\n   - 예시:\n     * 단순: "임대차계약서 작성해주세요", "전세계약서 초안 만들어주세요"\n     * 복합: "계약서 작성하고 주의사항도 검토해주세요"\n   - 키워드: 작성, 만들, 생성, 초안, 계약서, 문서, 양식\n   - 필요한 처리: 문서 생성 에이전트 호출, 템플릿 기반 작성\n\n5. **CONTRACT_REVIEW (계약서검토)**\n   - 설명: 기존 계약서나 문서를 검토해달라는 요청\n   - 예시:\n     * 단순: "이 계약서 검토해주세요", "특약사항 문제없나요?"\n     * 복합: "계약서 검토하고 수정사항도 제안해주세요"\n   - 키워드: 검토, 확인, 점검, 리뷰, 분석해, 살펴봐, 체크\n   - 필요한 처리: 문서 분석, 위험 요소 식별, 개선사항 제안\n\n6. **COMPREHENSIVE (종합분석)**\n   - 설명: 여러 측면을 종합적으로 분석해달라는 요청, 또는 복잡한 상황에 대한 해결책 요청\n   - 예시:\n     * 단순: "이 물건 전체적으로 분석해주세요"\n     * 복합: "시세, 법률, 대출 모두 검토해서 종합 의견 주세요"\n     * 해결형: "10년 거주했는데 전세금 3억을 10억으로 올려달래. 어떻게 해야 해?"\n     * 상황+해결: "집주인이 계약 갱신 거부했어. 법적으로 어떻게 대응해야 할까?"\n   - 키워드: 종합, 전체, 모든, 전반적, 종합적, 평가, 분석, 어떻게, 방법, 해결, 대처\n   - 패턴: 구체적 상황 설명 + "어떻게/방법/해결" 요청\n   - 필요한 처리: 다중 데이터 소스 통합 분석, 상황 평가, 해결책 제시\n\n7. **RISK_ANALYSIS (리스크분석)**\n   - 설명: 위험 요소나 주의사항에 대한 질문\n   - 예시:\n     * 단순: "이 계약 위험한가요?", "주의할 점 알려주세요"\n     * 복합: "리스크 분석하고 대안도 제시해주세요"\n   - 키워드: 위험, 리스크, 주의, 문제점, 조심, 걱정, 우려\n   - 필요한 처리: 위험 요소 분석, 주의사항 추출\n\n8. **UNCLEAR (불분명)**\n   - 설명: 의도를 명확히 파악하기 어려운 질문\n   - 예시: "이거 좀 봐주세요", "어떻게 해야 할까요?", "도와주세요"\n   - 처리: 추가 질문으로 의도 명확화 필요\n\n9. **IRRELEVANT (무관)**\n   - 설명: 부동산과 전혀 관련 없는 질문\n   - 예시: "날씨 어때?", "저녁 뭐 먹지?", "주식 추천해줘"\n   - 처리: 부동산 관련 질문을 유도\n\n## 복합 질문 예시와 분석 (CoT 적용):\n\n### 예시 1: "강남구 아파트 시세 알려주고 전세자금대출 가능한지도 확인해줘"\n**CoT 분석**:\n1. 구조: 두 개의 요청 ("시세" + "대출")\n2. 유형: 정보 확인형 (둘 다)\n3. 복잡도: 중 (두 가지 독립적 조회)\n4. 필요 처리: 검색 + 계산/분석\n\n**결론**:\n- 주 의도: MARKET_INQUIRY (시세 조회가 먼저 필요)\n- 부가 의도: LOAN_CONSULT (대출 확인)\n- 분해: ["강남구 아파트 시세 조회", "전세자금대출 가능 여부 확인"]\n\n### 예시 2: "이 계약서 검토해서 위험한 부분 있는지 알려주고 수정 제안도 해줘"\n**CoT 분석**:\n1. 구조: 검토 + 위험 평가 + 수정안\n2. 유형: 평가/판단형 + 해결책 요청형\n3. 복잡도: 고 (3단계 처리)\n4. 필요 처리: 검토 + 분석 + 문서 생성\n\n**결론**:\n- 주 의도: CONTRACT_REVIEW (계약서 검토)\n- 부가 의도: RISK_ANALYSIS (위험 분석)\n- 분해: ["계약서 전체 검토", "위험 요소 식별", "수정사항 제안"]\n\n### 예시 3: "집주인이 짜증나, 10년 살았는데 전세금 3억을 10억으로 올려달래. 법적으로 해결방법 알려줘"\n**CoT 분석**:\n1. 구조: 상황 설명 (10년 거주, 3억→10억) + 해결책 요청\n2. 유형: 해결책 요청형 (단순 정보 X)\n3. 복잡도: 고 (구체적 상황 + 수치 비교 + 법률 + 대응방안)\n4. 필요 처리: 법률 검색 + 상황 분석 + 해결책 제시\n\n**결론**:\n- 주 의도: COMPREHENSIVE (복잡한 상황에 대한 종합 해결)\n- 부가 의도: LEGAL_CONSULT, RISK_ANALYSIS\n- 분해: ["전세금 인상 한도 법률 조회", "3억→10억 인상의 타당성 분석", "구체적 대응 방안 제시"]\n- **이유**: "법적으로"라는 키워드가 있지만, 단순 법률 확인이 아니라 구체적 상황에 대한 해결책을 요구하므로 COMPREHENSIVE\n\n### 예시 4: "전세금 인상률 상한이 얼마야?"\n**CoT 분석**:\n1. 구조: 단순 사실 확인\n2. 유형: 정보 확인형\n3. 복잡도: 저 (단일 개념)\n4. 필요 처리: 검색만\n\n**결론**:\n- 주 의도: LEGAL_CONSULT (법률 정보 조회)\n- 부가 의도: 없음\n- 분해: 필요 없음\n\n## 응답 형식 (JSON 형식으로 응답):\n\n```json\n{\n    "intent": "LEGAL_CONSULT",\n    "confidence": 0.9,\n    "keywords": ["전세금", "인상", "제한"],\n    "sub_intents": [],\n    "is_compound": false,\n    "decomposed_tasks": [],\n    "entities": {\n        "location": "강남구",\n        "price": "5억",\n        "contract_type": "전세",\n        "date": "2024년",\n        "area": "84㎡",\n        "action_verbs": ["확인", "검토"]\n    },\n    "reasoning": "전세금 인상에 대한 법률 질문이므로 LEGAL_CONSULT로 분류"\n}\n```\n\n응답 규칙:\n- intent: 위 9개 카테고리 중 하나 (대문자_언더스코어 형식)\n- confidence: 0.0~1.0 (0.8 이상이면 매우 확실, 0.5 미만이면 불확실)\n- keywords: 추출된 주요 키워드 목록\n- sub_intents: 복합 질문일 경우 부가적인 의도들\n- is_compound: 복합 질문 여부 (true/false)\n- decomposed_tasks: 복합 질문을 분해한 개별 작업들\n- entities: 추출된 엔티티 정보\n- reasoning: **반드시 CoT 5단계를 거쳐 분석한 과정을 포함** (구조 파악 → 유형 판단 → 복잡도 평가 → 필요 처리 → 최종 검증)\n\n## reasoning 작성 예시:\n"1단계(구조): 상황 설명(10년 거주, 3억→10억) + 해결책 요청 포함.\n2단계(유형): 해결책 요청형 - 단순 정보가 아닌 대응방안 필요.\n3단계(복잡도): 고 - 구체적 수치 비교와 복잡한 상황.\n4단계(처리): 법률 검색 + 상황 분석 + 해결책 제시 필요.\n5단계(검증): LEGAL_CONSULT만으로는 불충분, 종합적 분석 필요 → COMPREHENSIVE 선택"\n\n## 판단 가이드:\n- 여러 의도가 섞여있다면, 가장 주된 의도를 intent에, 나머지를 sub_intents에 기록\n- "그리고", "또한", "함께", "같이" 등의 연결어가 있으면 복합 질문일 가능성 높음\n- 법률 관련 키워드가 있으면 LEGAL_CONSULT 우선\n- 가격/시세 언급이 명확하면 MARKET_INQUIRY\n- 계약서라는 단어와 함께 "작성/만들기"가 있으면 CONTRACT_CREATION\n- 계약서라는 단어와 함께 "검토/확인"이 있으면 CONTRACT_REVIEW\n- 불확실하면 confidence를 낮게 설정하고 UNCLEAR 선택\n- 복합 질문은 is_compound를 true로 설정하고 개별 작업으로 분해\n\n분석할 질문: 용산구 매매 시세 조회하고 전세 전환 계산해줘'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 16:01:42,759 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 16:01:42,759 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 16:01:42,759 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 16:01:42,759 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 16:01:42,759 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 16:01:42,759 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 16:01:49,658 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 07:01:49 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'6698'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'6713'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9949'), (b'x-ratelimit-remaining-tokens', b'197240'), (b'x-ratelimit-reset-requests', b'7m14.211s'), (b'x-ratelimit-reset-tokens', b'828ms'), (b'x-request-id', b'req_dbafae321047455fbb37fc01d3388e6a'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b0c9e1c293091-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 16:01:49,658 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 16:01:49,658 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 16:01:49,659 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 16:01:49,659 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 16:01:49,659 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 16:01:49,659 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 07:01:49 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '6698', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '6713', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9949', 'x-ratelimit-remaining-tokens': '197240', 'x-ratelimit-reset-requests': '7m14.211s', 'x-ratelimit-reset-tokens': '828ms', 'x-request-id': 'req_dbafae321047455fbb37fc01d3388e6a', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b0c9e1c293091-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 16:01:49,659 - openai._base_client - DEBUG - request_id: req_dbafae321047455fbb37fc01d3388e6a
2025-10-05 16:01:49,660 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: intent_analysis | Model: gpt-4o-mini-2024-07-18 | Tokens: 3431 (prompt: 3185, completion: 246)
2025-10-05 16:01:49,660 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM Intent Analysis Result: {'intent': 'COMPREHENSIVE', 'confidence': 0.85, 'keywords': ['용산구', '매매 시세', '전세 전환', '계산'], 'sub_intents': ['MARKET_INQUIRY', 'LOAN_CONSULT'], 'is_compound': True, 'decomposed_tasks': ['용산구 매매 시세 조회', '전세 전환 계산'], 'entities': {'location': '용산구', 'action_verbs': ['조회', '계산']}, 'reasoning': '1단계(구조): 두 개의 요청(매매 시세 조회 + 전세 전환 계산) 포함. 2단계(유형): 정보 확인형 + 해결책 요청형. 3단계(복잡도): 중 - 두 가지 독립적 조회가 필요. 4단계(처리): 매매 시세 검색 + 전세 전환 계산 필요. 5단계(검증): 두 가지 요청이 있으므로 COMPREHENSIVE로 분류.'}
2025-10-05 16:01:49,660 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-daa0d985-3bd5-4d2a-86e4-aa895b3876ba', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 Agent 선택 전문가입니다.\n사용자의 요청에 가장 적합한 Agent/Team을 선택하는 것이 목표입니다.\n\n## 현재 상황\n\n**사용자 질문:** 용산구 매매 시세 조회하고 전세 전환 계산해줘\n**분석된 의도:** 종합분석\n**추출된 키워드:** [\'용산구\', \'매매 시세\', \'전세 전환\', \'계산\']\n\n## 사용 가능한 Agent/Team 정보\n\n{\'search_team\': {\'name\': \'search_team\', \'capabilities\': \'법률 검색, 부동산 시세 조회, 대출 상품 검색\', \'tools\': [\'legal_search\', \'market_data\', \'loan_data\'], \'use_cases\': [\'법률 상담\', \'시세 조회\', \'대출 정보\']}, \'analysis_team\': {\'name\': \'analysis_team\', \'capabilities\': \'데이터 분석, 리스크 평가, 인사이트 생성, 추천\', \'tools\': [\'data_analyzer\', \'risk_evaluator\'], \'use_cases\': [\'시장 분석\', \'리스크 평가\', \'투자 분석\']}, \'document_team\': {\'name\': \'document_team\', \'capabilities\': \'계약서 작성, 문서 생성, 문서 검토\', \'tools\': [\'document_generator\', \'contract_reviewer\'], \'use_cases\': [\'계약서 작성\', \'문서 검토\']}}\n\n## Agent 역할 및 상세 가이드\n\n### 1. search_team (검색 팀)\n- **주요 기능**: 정보 검색 및 데이터 수집\n- **전문 분야**:\n  * 법률 정보 검색 (전세법, 임대차보호법, 부동산 관련 법규)\n  * 부동산 시세 조회 (매매가, 전세가, 월세, 실거래가)\n  * 대출 상품 정보 검색 (금리, 한도, 조건)\n  * 지역 정보 및 인프라 조회\n- **도구**: legal_search, market_data, loan_data\n- **적합한 작업**: 정보 조회, 데이터 수집, 법률 확인, 시세 파악\n- **예시**:\n  * "전세금 5% 인상 가능한가요?"\n  * "강남구 아파트 전세 시세"\n  * "전세자금대출 한도 얼마?"\n\n### 2. analysis_team (분석 팀)\n- **주요 기능**: 데이터 분석 및 평가\n- **전문 분야**:\n  * 시장 동향 분석 (상승률, 하락률, 추세)\n  * 리스크 평가 (계약, 투자 위험도)\n  * 투자 수익률 계산 (ROI, 월세 수익률)\n  * 대출 한도 및 조건 분석 (LTV, DTI, DSR)\n  * 비교 분석 (지역별, 상품별)\n- **도구**: data_analyzer, risk_evaluator, calculator\n- **적합한 작업**: 데이터 분석, 리스크 평가, 계산, 비교, 예측\n- **의존성**: 보통 search_team의 데이터가 필요\n- **예시**:\n  * "이 지역 투자 가치 분석해줘"\n  * "계약 리스크 평가해줘"\n  * "대출 가능 금액 계산해줘"\n\n### 3. document_team (문서 팀)\n- **주요 기능**: 문서 생성 및 관리\n- **전문 분야**:\n  * 계약서 작성 (임대차, 매매, 전세)\n  * 문서 템플릿 관리\n  * 특약사항 생성\n  * 계약서 수정안 작성\n  * 법률 문서 검토\n- **도구**: document_generator, contract_template, contract_reviewer\n- **적합한 작업**: 문서 작성, 계약서 생성, 문서 수정, 검토\n- **예시**:\n  * "임대차계약서 작성해줘"\n  * "특약사항 추가해줘"\n  * "계약서 수정안 만들어줘"\n\n## Chain-of-Thought Agent 선택 프로세스\n\n다음 단계를 **순서대로** 따라 최적의 Agent 조합을 선택하세요:\n\n### 1단계: 질문 요구사항 파악\n- 단순 정보 조회인가? → search_team만 필요\n- 판단/평가가 필요한가? → search + analysis 필요\n- 해결책 제시가 필요한가? → search + analysis 필요\n- 문서 생성이 필요한가? → document_team 추가\n\n### 2단계: 작업 복잡도 판단\n- **단순** (검색만): "~이 뭐야?", "~알려줘" → search_team\n- **중간** (검색+판단): "~괜찮아?", "~적절해?" → search + analysis\n- **복잡** (종합 해결): 구체적 상황 + "어떻게 해야 해?" → search + analysis\n\n### 3단계: 의존성 분석\n- 독립적 작업: 단일 팀으로 처리 가능\n- 순차적 의존: 이전 결과 필요 → 여러 팀 순서대로\n- 병렬 가능: 동시 조회 가능 → coordination: "parallel"\n\n### 4단계: 최종 검증\n- 선택한 팀들로 질문에 완전히 답변 가능한가?\n- 불필요한 팀이 포함되지 않았는가?\n- 순서가 논리적인가? (데이터 흐름 고려)\n\n### 중요 원칙:\n- **법률 키워드만으로 판단하지 말 것**: "법적으로 어떻게 해야 해?" = 법률 검색 + 분석 필요\n- **상황 설명 + 해결책 요청** = 반드시 analysis_team 포함\n- **구체적 수치 비교** (3억→10억 같은) = analysis_team 필요\n\n## 의도별 Agent 매핑 가이드 (기본 가이드 - CoT로 조정 가능)\n\n| 의도 (Intent) | 기본 조합 | 상황별 조정 |\n|--------------|-----------|-------------|\n| LEGAL_CONSULT | ["search_team"] | 해결책 요청시 → + analysis_team |\n| MARKET_INQUIRY | ["search_team"] | 비교/평가시 → + analysis_team |\n| LOAN_CONSULT | ["search_team", "analysis_team"] | 계산 필수 |\n| CONTRACT_CREATION | ["document_team"] | 검토 후 작성 → search + document |\n| CONTRACT_REVIEW | ["search_team", "analysis_team"] | 법률 검토 + 리스크 분석 |\n| COMPREHENSIVE | ["search_team", "analysis_team"] | **항상 분석 포함** |\n| RISK_ANALYSIS | ["analysis_team"] | 법률 근거 필요시 → search + analysis |\n| UNCLEAR | ["search_team", "analysis_team"] | 포괄적 대응 |\n\n**중요**: 위 매핑은 **기본 가이드**일 뿐입니다.\n실제 질문의 내용(CoT 분석 결과)에 따라 조정하세요!\n\n## 복합 질문 처리 예시 (CoT 적용)\n\n### 예시 1: 순차적 처리\n질문: "강남구 시세 확인하고 투자 가치 분석해줘"\n**CoT 분석**:\n1. 요구사항: 시세 조회 + 투자 가치 평가\n2. 복잡도: 중간 (검색 + 분석)\n3. 의존성: 시세 데이터 → 투자 분석 (순차)\n4. 검증: search만으로는 "투자 가치 평가" 불가능\n\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "1단계: 시세 조회+투자 평가 필요. 2단계: 중간 복잡도. 3단계: 순차 의존. 4단계: search로 시세 수집 후 analysis로 투자 가치 평가 필요",\n    "coordination": "sequential"\n}\n```\n\n### 예시 2: 단순 정보 조회\n질문: "전세금 인상률 한도가 얼마야?"\n**CoT 분석**:\n1. 요구사항: 단순 사실 확인\n2. 복잡도: 낮음 (정보 확인형)\n3. 의존성: 없음\n4. 검증: search_team만으로 충분\n\n```json\n{\n    "selected_agents": ["search_team"],\n    "reasoning": "1단계: 단순 정보 조회. 2단계: 저복잡도. 3단계: 독립적. 4단계: 법률 검색만으로 답변 가능",\n    "coordination": "single"\n}\n```\n\n### 예시 3: 해결책 요청 (핵심 예시!)\n질문: "집주인이 전세금 3억을 10억으로 올려달래. 법적으로 어떻게 해야 해?"\n의도: COMPREHENSIVE\n**CoT 분석**:\n1. 요구사항: 상황 설명 + 해결책 요청\n2. 복잡도: 높음 (구체적 상황 + 수치 비교)\n3. 의존성: 법률 확인 → 상황 분석 → 해결책 제시\n4. 검증: "법적으로"만 보고 search만 선택하면 불충분! 해결책 제시 필요\n\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "1단계: 법률 + 상황 분석 + 해결책 필요. 2단계: 고복잡도(3억→10억 비정상). 3단계: 순차(법률 확인 후 타당성 분석). 4단계: \'어떻게 해야\' = 단순 법률 조회 아님, 분석 필수",\n    "coordination": "sequential",\n    "confidence": 0.95\n}\n```\n\n## 응답 형식 (JSON)\n\n```json\n{\n    "selected_agents": ["선택된 agent/team 목록"],\n    "reasoning": "선택 이유를 구체적으로 설명. 각 Agent의 역할과 처리 순서 포함",\n    "coordination": "single/sequential/parallel/pipeline",\n    "dependencies": {"agent2": ["agent1"]},\n    "estimated_time": 30,\n    "confidence": 0.9\n}\n```\n\n## 선택 가이드라인\n\n1. **최소 Agent 원칙**: 가능한 적은 수의 Agent로 처리\n2. **전문성 우선**: 해당 작업에 가장 전문적인 Agent 선택\n3. **효율성 고려**: 병렬 처리 가능한 경우 명시\n4. **의존성 관리**: 데이터 흐름을 고려한 순서 지정\n5. **폴백 전략**: 불확실한 경우 ["search_team", "analysis_team"] 조합\n\n## 주의사항\n\n- selected_agents는 반드시 배열 형태\n- Agent 이름은 정확히: "search_team", "analysis_team", "document_team"\n- 최소 1개, 최대 3개 선택\n- 순서는 실행 우선순위 (앞에 있을수록 먼저 실행)\n- reasoning은 상세하고 논리적으로 작성\n- coordination 필드로 실행 방식 명시\n- 복합 질문의 경우 의존성 관계 명확히 표시'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 16:01:49,661 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 16:01:49,661 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 16:01:49,661 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 16:01:49,661 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 16:01:49,661 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 16:01:49,661 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 16:01:53,682 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 07:01:53 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'3798'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'3812'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9949'), (b'x-ratelimit-remaining-tokens', b'197881'), (b'x-ratelimit-reset-requests', b'7m15.634s'), (b'x-ratelimit-reset-tokens', b'635ms'), (b'x-request-id', b'req_788b7fe289254d91afe87bb70c15d44b'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b0cc93b933091-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 16:01:53,682 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 16:01:53,682 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 16:01:53,683 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 16:01:53,683 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 16:01:53,683 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 16:01:53,683 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 07:01:53 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '3798', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '3812', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9949', 'x-ratelimit-remaining-tokens': '197881', 'x-ratelimit-reset-requests': '7m15.634s', 'x-ratelimit-reset-tokens': '635ms', 'x-request-id': 'req_788b7fe289254d91afe87bb70c15d44b', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b0cc93b933091-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 16:01:53,683 - openai._base_client - DEBUG - request_id: req_788b7fe289254d91afe87bb70c15d44b
2025-10-05 16:01:53,683 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: agent_selection | Model: gpt-4o-mini-2024-07-18 | Tokens: 2546 (prompt: 2370, completion: 176)
2025-10-05 16:01:53,683 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM agent selection reasoning: 1단계: 용산구의 매매 시세 조회와 전세 전환 계산이 필요하므로, 시세 정보 검색과 데이터 분석이 모두 요구됨. 2단계: 중간 복잡도 (정보 조회 + 계산). 3단계: 시세 데이터를 먼저 수집한 후, 이를 바탕으로 전세 전환 계산을 수행해야 하므로 순차적 의존성이 있음. 4단계: search_team으로 시세를 조회한 후, analysis_team으로 전세 전환 계산을 진행해야 함.
2025-10-05 16:01:53,683 - app.service_agent.cognitive_agents.planning_agent - INFO - ✅ Primary LLM selected agents: ['search_team', 'analysis_team']
2025-10-05 16:01:53,683 - app.service_agent.cognitive_agents.planning_agent - INFO - Intent analyzed: 종합분석 (confidence: 0.85)
2025-10-05 16:01:53,683 - app.service_agent.cognitive_agents.query_decomposer - INFO - Decomposing query: 용산구 매매 시세 조회하고 전세 전환 계산해줘...
2025-10-05 16:01:53,684 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-d4c5b47b-f555-4176-96f3-b15748524e55', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 질문 분해 전문가입니다.\n복잡한 사용자 질문을 독립적으로 처리 가능한 작업 단위로 분해하는 것이 목표입니다.\n\n## Chain-of-Thought 분해 프로세스:\n\n### 1단계: 복합 질문 여부 판단\n- 단순 정보 조회만 필요한가? → is_compound: false\n- **다음 중 하나라도 해당하면 is_compound: true**:\n  * "그리고", "그 다음", "한 후" 같은 연결어로 여러 요청 연결\n  * 명시적으로 2개 이상의 작업 요청 (예: "시세 확인하고 대출 계산해줘")\n  * 상황 설명 + 해결책 요청 (예: "3억→10억 올려달래. 어떻게 해야 해?")\n  * 해결책을 위해 여러 단계 처리 필요 (검색 → 분석 → 제안)\n\n### 2단계: 필요 작업 식별\n- 정보 수집이 필요한가? → search 작업\n- 평가/판단이 필요한가? → analysis 작업\n- 문서 생성이 필요한가? → generation 작업\n- **해결책 요청**인가? → search + analysis (최소 2개)\n\n### 3단계: 작업 순서 결정\n- 독립적 작업: 병렬 가능\n- 이전 결과 필요: 순차 실행 (depends_on 설정)\n\n## 중요 원칙:\n1. 각 작업은 하나의 명확한 목표를 가져야 합니다\n2. 작업 간 의존성을 명확히 파악해야 합니다\n3. 병렬 처리 가능한 작업은 구분해야 합니다\n4. **주의**: "어떻게 해야", "방법 알려줘" 같은 해결책 요청은 복합 질문!\n\n## 작업 유형 (type):\n- search: 정보 검색 (법률, 시세, 대출 정보 등)\n- analysis: 데이터 분석 (리스크 평가, 시장 분석 등)\n- generation: 문서 생성 (계약서 작성 등)\n- review: 검토/평가 (계약서 검토, 조건 확인 등)\n- calculation: 계산/산출 (대출 한도, 세금 등)\n- comparison: 비교 분석 (여러 옵션 비교)\n\n## 담당 팀 (agent):\n- search_team: 법률, 시세, 대출 정보 검색\n- analysis_team: 데이터 분석, 리스크 평가, 계산\n- document_team: 문서 생성, 계약서 작성\n\n## 학습 예시:\n\n### 예시 1: 복합 질문 (순차적)\n질문: "강남구 아파트 시세 확인하고 대출 가능 금액 계산해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "강남구 아파트 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "대출 가능 금액 계산",\n            "type": "calculation",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "required_data": {"price": "task_0.result.price"},\n            "estimated_time": 15\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "시세 정보가 있어야 대출 금액 계산이 가능하므로 순차 실행"\n}\n```\n\n### 예시 2: 복합 질문 (병렬 가능)\n질문: "이 지역 전세 시세와 매매 시세 모두 알려주고 비교 분석해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "전세 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "매매 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "전세/매매 시세 비교 분석",\n            "type": "comparison",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0", "task_1"],\n            "required_data": {\n                "lease_price": "task_0.result",\n                "sale_price": "task_1.result"\n            },\n            "estimated_time": 25\n        }\n    ],\n    "execution_mode": "mixed",\n    "parallel_groups": [["task_0", "task_1"], ["task_2"]],\n    "reasoning": "시세 조회는 독립적이므로 병렬 처리, 비교는 두 결과 필요"\n}\n```\n\n### 예시 3: 복합 질문 (3단계 이상)\n질문: "이 계약서 검토해서 위험한 부분 찾고 수정안 만들어서 최종 계약서 작성해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "계약서 내용 전체 검토",\n            "type": "review",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 30\n        },\n        {\n            "description": "위험 요소 및 문제점 분석",\n            "type": "analysis",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "estimated_time": 25\n        },\n        {\n            "description": "수정안 제안 생성",\n            "type": "generation",\n            "agent": "document_team",\n            "priority": 3,\n            "depends_on": ["task_1"],\n            "estimated_time": 20\n        },\n        {\n            "description": "최종 계약서 작성",\n            "type": "generation",\n            "agent": "document_team",\n            "priority": 4,\n            "depends_on": ["task_2"],\n            "estimated_time": 30\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "각 단계가 이전 결과에 의존하므로 순차 실행 필요"\n}\n```\n\n### 예시 4: 단순 질문 (분해 불필요)\n질문: "전세금 인상률 상한이 얼마야?"\n분해:\n```json\n{\n    "is_compound": false,\n    "sub_tasks": [\n        {\n            "description": "전세금 인상률 상한 법률 정보 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 15\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "단일 정보 조회 요청으로 분해 불필요"\n}\n```\n\n### 예시 5: 조건부 실행\n질문: "이 물건 시세 확인하고 적정가면 대출 상담도 받고 싶어"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "물건 시세 조회 및 적정성 평가",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 25\n        },\n        {\n            "description": "대출 상담 정보 제공",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "optional": true,\n            "context": {"condition": "if_reasonable_price"},\n            "estimated_time": 20\n        }\n    ],\n    "execution_mode": "conditional",\n    "reasoning": "시세 확인 결과에 따라 대출 상담 진행 여부 결정"\n}\n```\n\n### 예시 6: 상황 설명 + 해결책 요청 (핵심 패턴!)\n질문: "집주인이 전세금 3억을 10억으로 올려달래. 법적으로 어떻게 해야 해?"\n**CoT 분석**:\n1. 질문 분석: 상황 설명 + 해결책 요청\n2. 연결어: 없지만, "어떻게 해야" = 해결책 요청\n3. 의존성: 법률 확인 → 상황 분석 → 대응 방안\n4. 복합 여부: **YES** (해결책을 위해 여러 단계 필요)\n\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "전세금 인상 한도 관련 법률 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "3억→10억 인상의 법적 타당성 및 적정성 분석",\n            "type": "analysis",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "required_data": {"legal_limit": "task_0.result", "current": 300000000, "requested": 1000000000},\n            "estimated_time": 25\n        },\n        {\n            "description": "구체적 대응 방안 및 해결책 제시",\n            "type": "analysis",\n            "agent": "analysis_team",\n            "priority": 3,\n            "depends_on": ["task_1"],\n            "estimated_time": 20\n        }\n    ],\n    "execution_mode": "sequential",\n    "confidence": 0.95,\n    "reasoning": "상황 설명+해결책 요청 패턴. \'어떻게 해야\'는 단순 정보 조회가 아닌 종합 해결책 필요. 법률 조회 → 상황 분석 → 해결책 제시 3단계 순차 처리"\n}\n```\n\n## Chain-of-Thought 프로세스:\n\n1. **질문 분석**: 어떤 정보나 작업을 요구하는가?\n2. **연결어 확인**: "그리고", "또한", "해서", "한 후" 등이 있는가?\n3. **의존성 파악**: 어떤 작업이 다른 작업의 결과를 필요로 하는가?\n4. **병렬성 판단**: 독립적으로 실행 가능한 작업이 있는가?\n5. **최적화**: 불필요한 분해는 없는가?\n\n## 응답 형식 (JSON):\n\n{\n    "is_compound": true/false,\n    "sub_tasks": [\n        {\n            "description": "작업 설명",\n            "type": "작업 유형",\n            "agent": "담당 팀",\n            "priority": 우선순위 (1이 가장 높음),\n            "depends_on": ["선행 작업 ID 리스트"],\n            "required_data": {"필요한 데이터 매핑"},\n            "estimated_time": 예상 소요 시간(초),\n            "optional": true/false,\n            "context": {"추가 컨텍스트"}\n        }\n    ],\n    "execution_mode": "sequential/parallel/mixed/conditional",\n    "parallel_groups": [["병렬 실행 가능한 작업 ID 그룹"]],\n    "confidence": 0.0-1.0,\n    "reasoning": "분해 결정의 이유와 근거"\n}\n\n## 분해 가이드라인:\n\n1. **분해가 필요한 경우**:\n   - 여러 종류의 정보를 요청하는 경우\n   - 순차적 처리가 필요한 경우 (A의 결과로 B 수행)\n   - 서로 다른 팀의 전문성이 필요한 경우\n\n2. **분해가 불필요한 경우**:\n   - 단일 정보 조회\n   - 단순한 질문-답변\n   - 하나의 팀에서 완전히 처리 가능한 경우\n\n3. **병렬 처리 기준**:\n   - 서로 독립적인 정보 조회\n   - 의존성이 없는 분석 작업\n   - 동시에 진행해도 충돌하지 않는 작업\n\n4. **우선순위 설정**:\n   - 의존성이 없는 작업: priority 1\n   - 1차 의존 작업: priority 2\n   - 2차 의존 작업: priority 3\n   - 이런 식으로 증가\n\n현재 의도: 종합분석\n추출된 엔티티: {\'location\': \'용산구\', \'action_verbs\': [\'조회\', \'계산\']}\n\n분석할 질문: 용산구 매매 시세 조회하고 전세 전환 계산해줘'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 16:01:53,685 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 16:01:53,685 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 16:01:53,685 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 16:01:53,685 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 16:01:53,685 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 16:01:53,686 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 16:01:56,376 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 07:01:56 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'2428'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'2449'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9949'), (b'x-ratelimit-remaining-tokens', b'197319'), (b'x-ratelimit-reset-requests', b'7m20.234s'), (b'x-ratelimit-reset-tokens', b'804ms'), (b'x-request-id', b'req_e043a34b18af4d51ac7d24f839d4a489'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b0ce2680c3091-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 16:01:56,377 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 16:01:56,377 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 16:01:56,377 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 16:01:56,377 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 16:01:56,377 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 16:01:56,377 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 07:01:56 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '2428', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '2449', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9949', 'x-ratelimit-remaining-tokens': '197319', 'x-ratelimit-reset-requests': '7m20.234s', 'x-ratelimit-reset-tokens': '804ms', 'x-request-id': 'req_e043a34b18af4d51ac7d24f839d4a489', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b0ce2680c3091-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 16:01:56,377 - openai._base_client - DEBUG - request_id: req_e043a34b18af4d51ac7d24f839d4a489
2025-10-05 16:01:56,378 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: query_decomposition | Model: gpt-4o-mini-2024-07-18 | Tokens: 2893 (prompt: 2714, completion: 179)
2025-10-05 16:01:56,378 - app.service_agent.cognitive_agents.query_decomposer - INFO - Successfully decomposed into 2 tasks
2025-10-05 16:01:56,378 - app.service_agent.cognitive_agents.planning_agent - INFO - Query decomposed into 2 tasks
2025-10-05 16:01:56,378 - app.service_agent.cognitive_agents.planning_agent - WARNING - Plan validation errors: ["Agent 'search_team' not found in registry", "Agent 'analysis_team' depends on missing 'task_0'", "Agent 'analysis_team' not found in registry"]
2025-10-05 16:01:56,378 - app.service_agent.cognitive_agents.planning_agent - INFO - Optimizing execution plan
2025-10-05 16:01:56,378 - app.service_agent.cognitive_agents.planning_agent - INFO - Comprehensive plan created: Intent: 종합분석 (confidence: 0.85) | Strategy: sequential | Agents: search_team, analysis_team | Estimated time: 35.0s
2025-10-05 16:01:56,378 - __main__ - INFO -   전략: sequential
2025-10-05 16:01:56,378 - __main__ - INFO -   단계 수: 2
2025-10-05 16:01:56,378 - __main__ - INFO - 
✓ 테스트 성공 (소요시간: 28.00초)
2025-10-05 16:01:56,380 - __main__ - INFO - 
결과 저장: C:\kdy\Projects\holmesnyangz\beta_v001\backend\app\service_agent\reports\phase1_test_results.json
2025-10-05 16:01:56,381 - __main__ - INFO - 
================================================================================
2025-10-05 16:01:56,381 - __main__ - INFO - [31] 복합 질문 테스트: D011
2025-10-05 16:01:56,381 - __main__ - INFO - 질문: 주택담보대출 조건 확인하고 한도 계산해줘
2025-10-05 16:01:56,381 - __main__ - INFO - ================================================================================
2025-10-05 16:01:56,381 - __main__ - INFO - 
[Step 1] Intent 분석...
2025-10-05 16:01:56,381 - app.service_agent.cognitive_agents.planning_agent - INFO - Analyzing intent for query: 주택담보대출 조건 확인하고 한도 계산해줘...
2025-10-05 16:01:56,381 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-11cb9271-88f5-49a4-8999-b219a1180d8b', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 의도 분석 전문가입니다.\n사용자의 질문을 정확히 이해하고, 어떤 종류의 도움이 필요한지 분류해야 합니다.\n\n## Chain-of-Thought 분석 프로세스\n\n질문을 분석할 때 다음 단계를 **순서대로** 따르세요:\n\n### 1단계: 질문 구조 파악\n- 단순 정보 요청인가? (예: "~이 뭐야?", "~알려줘")\n- 상황 설명이 포함되어 있는가? (배경, 현재 상태)\n- 구체적 수치나 데이터가 있는가? (금액, 비율, 기간 등)\n- 문제 해결을 요구하는가? (예: "어떻게 해야 해?", "방법 알려줘")\n\n### 2단계: 요청 유형 판단\n- **정보 확인형**: 사실, 개념, 규정 확인 → 검색만으로 충분\n- **평가/판단형**: "괜찮아?", "적절해?", "문제있어?" → 검색 + 분석 필요\n- **해결책 요청형**: "어떻게?", "방법?", "대처?" → 검색 + 분석 + 제안 필요\n- **비교/선택형**: "A vs B", "어느게 나아?" → 검색 + 분석(비교) 필요\n\n### 3단계: 복잡도 평가\n- **저**: 단일 개념/사실 확인 (예: "전세금 인상률 한도?")\n- **중**: 특정 상황 + 판단 (예: "3억을 5억으로 올려달래. 가능해?")\n- **고**: 복잡한 상황 + 여러 조건 + 해결책 (예: "10년 거주, 3억→10억 요구. 어떻게 해야 해?")\n\n### 4단계: 필요한 처리 결정\n- **검색만**: 정보 확인형 + 저복잡도\n- **검색+분석**: 평가/판단형 OR 중복잡도 OR 수치 비교 포함\n- **종합처리**: 해결책 요청형 OR 고복잡도 OR 여러 조건 동시 고려\n\n### 5단계: 최종 검증\n- 선택한 의도로 사용자 질문에 완전히 답변 가능한가?\n- 단순 정보 제공으로 끝나는가, 아니면 추가 분석/판단이 필요한가?\n- 상황 설명이 있으면서 "해결", "방법", "어떻게" 등이 있으면 → COMPREHENSIVE 고려\n\n## 중요: 복합 질문 처리\n복합적인 질문(여러 의도가 섞인 질문)의 경우, 가장 핵심적인 의도를 파악하되,\nsub_intents 필드에 부가적인 의도들도 함께 기록해주세요.\n\n**특히 주의**:\n- 법률 키워드가 있어도, "해결방법", "어떻게 해야" 같은 표현이 있으면 단순 LEGAL_CONSULT가 아닐 수 있음\n- 구체적 상황(금액, 기간 등) + 해결책 요구 = COMPREHENSIVE 또는 복합 의도로 분류\n\n## 분류 카테고리 설명:\n\n1. **LEGAL_CONSULT (법률상담)**\n   - 설명: 부동산 관련 법률, 권리, 의무에 대한 질문\n   - 예시:\n     * 단순: "전세금 5% 인상이 가능한가요?", "임대차계약 갱신 거부할 수 있나요?"\n     * 복합: "전세금 인상 가능한지 확인하고 법적 근거도 알려주세요"\n   - 키워드: 법, 전세, 임대, 보증금, 계약, 권리, 의무, 갱신, 임차인, 임대인, 법률, 규정, 조항\n   - 필요한 처리: 법률 데이터베이스 검색, 관련 법조항 찾기\n\n2. **MARKET_INQUIRY (시세조회)**\n   - 설명: 부동산 시장 가격, 시세, 거래 동향에 대한 질문\n   - 예시:\n     * 단순: "강남구 아파트 전세 시세 알려주세요", "서초동 매매가 얼마나 올랐나요?"\n     * 복합: "강남구 시세 확인하고 대출 가능 금액도 계산해줘"\n   - 키워드: 시세, 가격, 매매가, 전세가, 월세, 시장, 동향, 평균, 지역명, 상승률, 하락률\n   - 필요한 처리: 부동산 시세 데이터 조회, 지역별 가격 분석\n\n3. **LOAN_CONSULT (대출상담)**\n   - 설명: 주택담보대출, 전세자금대출 등 금융 관련 질문\n   - 예시:\n     * 단순: "전세자금대출 한도가 얼마인가요?", "LTV가 뭔가요?"\n     * 복합: "대출 한도 확인하고 금리 비교도 해주세요"\n   - 키워드: 대출, 금리, 한도, 조건, 상환, LTV, DTI, DSR, 담보, 금융, 은행\n   - 필요한 처리: 대출 상품 조회, 금리 정보 검색, 한도 계산\n\n4. **CONTRACT_CREATION (계약서작성)**\n   - 설명: 새로운 계약서나 문서를 작성해달라는 요청\n   - 예시:\n     * 단순: "임대차계약서 작성해주세요", "전세계약서 초안 만들어주세요"\n     * 복합: "계약서 작성하고 주의사항도 검토해주세요"\n   - 키워드: 작성, 만들, 생성, 초안, 계약서, 문서, 양식\n   - 필요한 처리: 문서 생성 에이전트 호출, 템플릿 기반 작성\n\n5. **CONTRACT_REVIEW (계약서검토)**\n   - 설명: 기존 계약서나 문서를 검토해달라는 요청\n   - 예시:\n     * 단순: "이 계약서 검토해주세요", "특약사항 문제없나요?"\n     * 복합: "계약서 검토하고 수정사항도 제안해주세요"\n   - 키워드: 검토, 확인, 점검, 리뷰, 분석해, 살펴봐, 체크\n   - 필요한 처리: 문서 분석, 위험 요소 식별, 개선사항 제안\n\n6. **COMPREHENSIVE (종합분석)**\n   - 설명: 여러 측면을 종합적으로 분석해달라는 요청, 또는 복잡한 상황에 대한 해결책 요청\n   - 예시:\n     * 단순: "이 물건 전체적으로 분석해주세요"\n     * 복합: "시세, 법률, 대출 모두 검토해서 종합 의견 주세요"\n     * 해결형: "10년 거주했는데 전세금 3억을 10억으로 올려달래. 어떻게 해야 해?"\n     * 상황+해결: "집주인이 계약 갱신 거부했어. 법적으로 어떻게 대응해야 할까?"\n   - 키워드: 종합, 전체, 모든, 전반적, 종합적, 평가, 분석, 어떻게, 방법, 해결, 대처\n   - 패턴: 구체적 상황 설명 + "어떻게/방법/해결" 요청\n   - 필요한 처리: 다중 데이터 소스 통합 분석, 상황 평가, 해결책 제시\n\n7. **RISK_ANALYSIS (리스크분석)**\n   - 설명: 위험 요소나 주의사항에 대한 질문\n   - 예시:\n     * 단순: "이 계약 위험한가요?", "주의할 점 알려주세요"\n     * 복합: "리스크 분석하고 대안도 제시해주세요"\n   - 키워드: 위험, 리스크, 주의, 문제점, 조심, 걱정, 우려\n   - 필요한 처리: 위험 요소 분석, 주의사항 추출\n\n8. **UNCLEAR (불분명)**\n   - 설명: 의도를 명확히 파악하기 어려운 질문\n   - 예시: "이거 좀 봐주세요", "어떻게 해야 할까요?", "도와주세요"\n   - 처리: 추가 질문으로 의도 명확화 필요\n\n9. **IRRELEVANT (무관)**\n   - 설명: 부동산과 전혀 관련 없는 질문\n   - 예시: "날씨 어때?", "저녁 뭐 먹지?", "주식 추천해줘"\n   - 처리: 부동산 관련 질문을 유도\n\n## 복합 질문 예시와 분석 (CoT 적용):\n\n### 예시 1: "강남구 아파트 시세 알려주고 전세자금대출 가능한지도 확인해줘"\n**CoT 분석**:\n1. 구조: 두 개의 요청 ("시세" + "대출")\n2. 유형: 정보 확인형 (둘 다)\n3. 복잡도: 중 (두 가지 독립적 조회)\n4. 필요 처리: 검색 + 계산/분석\n\n**결론**:\n- 주 의도: MARKET_INQUIRY (시세 조회가 먼저 필요)\n- 부가 의도: LOAN_CONSULT (대출 확인)\n- 분해: ["강남구 아파트 시세 조회", "전세자금대출 가능 여부 확인"]\n\n### 예시 2: "이 계약서 검토해서 위험한 부분 있는지 알려주고 수정 제안도 해줘"\n**CoT 분석**:\n1. 구조: 검토 + 위험 평가 + 수정안\n2. 유형: 평가/판단형 + 해결책 요청형\n3. 복잡도: 고 (3단계 처리)\n4. 필요 처리: 검토 + 분석 + 문서 생성\n\n**결론**:\n- 주 의도: CONTRACT_REVIEW (계약서 검토)\n- 부가 의도: RISK_ANALYSIS (위험 분석)\n- 분해: ["계약서 전체 검토", "위험 요소 식별", "수정사항 제안"]\n\n### 예시 3: "집주인이 짜증나, 10년 살았는데 전세금 3억을 10억으로 올려달래. 법적으로 해결방법 알려줘"\n**CoT 분석**:\n1. 구조: 상황 설명 (10년 거주, 3억→10억) + 해결책 요청\n2. 유형: 해결책 요청형 (단순 정보 X)\n3. 복잡도: 고 (구체적 상황 + 수치 비교 + 법률 + 대응방안)\n4. 필요 처리: 법률 검색 + 상황 분석 + 해결책 제시\n\n**결론**:\n- 주 의도: COMPREHENSIVE (복잡한 상황에 대한 종합 해결)\n- 부가 의도: LEGAL_CONSULT, RISK_ANALYSIS\n- 분해: ["전세금 인상 한도 법률 조회", "3억→10억 인상의 타당성 분석", "구체적 대응 방안 제시"]\n- **이유**: "법적으로"라는 키워드가 있지만, 단순 법률 확인이 아니라 구체적 상황에 대한 해결책을 요구하므로 COMPREHENSIVE\n\n### 예시 4: "전세금 인상률 상한이 얼마야?"\n**CoT 분석**:\n1. 구조: 단순 사실 확인\n2. 유형: 정보 확인형\n3. 복잡도: 저 (단일 개념)\n4. 필요 처리: 검색만\n\n**결론**:\n- 주 의도: LEGAL_CONSULT (법률 정보 조회)\n- 부가 의도: 없음\n- 분해: 필요 없음\n\n## 응답 형식 (JSON 형식으로 응답):\n\n```json\n{\n    "intent": "LEGAL_CONSULT",\n    "confidence": 0.9,\n    "keywords": ["전세금", "인상", "제한"],\n    "sub_intents": [],\n    "is_compound": false,\n    "decomposed_tasks": [],\n    "entities": {\n        "location": "강남구",\n        "price": "5억",\n        "contract_type": "전세",\n        "date": "2024년",\n        "area": "84㎡",\n        "action_verbs": ["확인", "검토"]\n    },\n    "reasoning": "전세금 인상에 대한 법률 질문이므로 LEGAL_CONSULT로 분류"\n}\n```\n\n응답 규칙:\n- intent: 위 9개 카테고리 중 하나 (대문자_언더스코어 형식)\n- confidence: 0.0~1.0 (0.8 이상이면 매우 확실, 0.5 미만이면 불확실)\n- keywords: 추출된 주요 키워드 목록\n- sub_intents: 복합 질문일 경우 부가적인 의도들\n- is_compound: 복합 질문 여부 (true/false)\n- decomposed_tasks: 복합 질문을 분해한 개별 작업들\n- entities: 추출된 엔티티 정보\n- reasoning: **반드시 CoT 5단계를 거쳐 분석한 과정을 포함** (구조 파악 → 유형 판단 → 복잡도 평가 → 필요 처리 → 최종 검증)\n\n## reasoning 작성 예시:\n"1단계(구조): 상황 설명(10년 거주, 3억→10억) + 해결책 요청 포함.\n2단계(유형): 해결책 요청형 - 단순 정보가 아닌 대응방안 필요.\n3단계(복잡도): 고 - 구체적 수치 비교와 복잡한 상황.\n4단계(처리): 법률 검색 + 상황 분석 + 해결책 제시 필요.\n5단계(검증): LEGAL_CONSULT만으로는 불충분, 종합적 분석 필요 → COMPREHENSIVE 선택"\n\n## 판단 가이드:\n- 여러 의도가 섞여있다면, 가장 주된 의도를 intent에, 나머지를 sub_intents에 기록\n- "그리고", "또한", "함께", "같이" 등의 연결어가 있으면 복합 질문일 가능성 높음\n- 법률 관련 키워드가 있으면 LEGAL_CONSULT 우선\n- 가격/시세 언급이 명확하면 MARKET_INQUIRY\n- 계약서라는 단어와 함께 "작성/만들기"가 있으면 CONTRACT_CREATION\n- 계약서라는 단어와 함께 "검토/확인"이 있으면 CONTRACT_REVIEW\n- 불확실하면 confidence를 낮게 설정하고 UNCLEAR 선택\n- 복합 질문은 is_compound를 true로 설정하고 개별 작업으로 분해\n\n분석할 질문: 주택담보대출 조건 확인하고 한도 계산해줘'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 16:01:56,381 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 16:01:56,382 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 16:01:56,382 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 16:01:56,382 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 16:01:56,382 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 16:01:56,382 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 16:02:01,244 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 07:02:01 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'4572'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'4585'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9948'), (b'x-ratelimit-remaining-tokens', b'197241'), (b'x-ratelimit-reset-requests', b'7m26.192s'), (b'x-ratelimit-reset-tokens', b'827ms'), (b'x-request-id', b'req_9ca3ac1c49804987890c1624766e65b3'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b0cf33c733091-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 16:02:01,244 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 16:02:01,244 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 16:02:01,245 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 16:02:01,245 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 16:02:01,245 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 16:02:01,245 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 07:02:01 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '4572', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '4585', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9948', 'x-ratelimit-remaining-tokens': '197241', 'x-ratelimit-reset-requests': '7m26.192s', 'x-ratelimit-reset-tokens': '827ms', 'x-request-id': 'req_9ca3ac1c49804987890c1624766e65b3', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b0cf33c733091-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 16:02:01,245 - openai._base_client - DEBUG - request_id: req_9ca3ac1c49804987890c1624766e65b3
2025-10-05 16:02:01,245 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: intent_analysis | Model: gpt-4o-mini-2024-07-18 | Tokens: 3397 (prompt: 3183, completion: 214)
2025-10-05 16:02:01,245 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM Intent Analysis Result: {'intent': 'LOAN_CONSULT', 'confidence': 0.9, 'keywords': ['주택담보대출', '조건', '한도', '계산'], 'sub_intents': [], 'is_compound': False, 'decomposed_tasks': [], 'entities': {'loan_type': '주택담보대출', 'action_verbs': ['확인', '계산']}, 'reasoning': '1단계(구조): 주택담보대출 조건 확인과 한도 계산 요청. 2단계(유형): 대출 조건과 한도에 대한 정보 요청으로 LOAN_CONSULT로 분류. 3단계(복잡도): 저 - 단일 개념 확인. 4단계(처리): 대출 조건 검색과 한도 계산 필요. 5단계(검증): 단순 정보 요청이므로 LOAN_CONSULT로 충분.'}
2025-10-05 16:02:01,246 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-c646e0ee-be64-4b76-a026-efcf5a6fbdee', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 Agent 선택 전문가입니다.\n사용자의 요청에 가장 적합한 Agent/Team을 선택하는 것이 목표입니다.\n\n## 현재 상황\n\n**사용자 질문:** 주택담보대출 조건 확인하고 한도 계산해줘\n**분석된 의도:** 대출상담\n**추출된 키워드:** [\'주택담보대출\', \'조건\', \'한도\', \'계산\']\n\n## 사용 가능한 Agent/Team 정보\n\n{\'search_team\': {\'name\': \'search_team\', \'capabilities\': \'법률 검색, 부동산 시세 조회, 대출 상품 검색\', \'tools\': [\'legal_search\', \'market_data\', \'loan_data\'], \'use_cases\': [\'법률 상담\', \'시세 조회\', \'대출 정보\']}, \'analysis_team\': {\'name\': \'analysis_team\', \'capabilities\': \'데이터 분석, 리스크 평가, 인사이트 생성, 추천\', \'tools\': [\'data_analyzer\', \'risk_evaluator\'], \'use_cases\': [\'시장 분석\', \'리스크 평가\', \'투자 분석\']}, \'document_team\': {\'name\': \'document_team\', \'capabilities\': \'계약서 작성, 문서 생성, 문서 검토\', \'tools\': [\'document_generator\', \'contract_reviewer\'], \'use_cases\': [\'계약서 작성\', \'문서 검토\']}}\n\n## Agent 역할 및 상세 가이드\n\n### 1. search_team (검색 팀)\n- **주요 기능**: 정보 검색 및 데이터 수집\n- **전문 분야**:\n  * 법률 정보 검색 (전세법, 임대차보호법, 부동산 관련 법규)\n  * 부동산 시세 조회 (매매가, 전세가, 월세, 실거래가)\n  * 대출 상품 정보 검색 (금리, 한도, 조건)\n  * 지역 정보 및 인프라 조회\n- **도구**: legal_search, market_data, loan_data\n- **적합한 작업**: 정보 조회, 데이터 수집, 법률 확인, 시세 파악\n- **예시**:\n  * "전세금 5% 인상 가능한가요?"\n  * "강남구 아파트 전세 시세"\n  * "전세자금대출 한도 얼마?"\n\n### 2. analysis_team (분석 팀)\n- **주요 기능**: 데이터 분석 및 평가\n- **전문 분야**:\n  * 시장 동향 분석 (상승률, 하락률, 추세)\n  * 리스크 평가 (계약, 투자 위험도)\n  * 투자 수익률 계산 (ROI, 월세 수익률)\n  * 대출 한도 및 조건 분석 (LTV, DTI, DSR)\n  * 비교 분석 (지역별, 상품별)\n- **도구**: data_analyzer, risk_evaluator, calculator\n- **적합한 작업**: 데이터 분석, 리스크 평가, 계산, 비교, 예측\n- **의존성**: 보통 search_team의 데이터가 필요\n- **예시**:\n  * "이 지역 투자 가치 분석해줘"\n  * "계약 리스크 평가해줘"\n  * "대출 가능 금액 계산해줘"\n\n### 3. document_team (문서 팀)\n- **주요 기능**: 문서 생성 및 관리\n- **전문 분야**:\n  * 계약서 작성 (임대차, 매매, 전세)\n  * 문서 템플릿 관리\n  * 특약사항 생성\n  * 계약서 수정안 작성\n  * 법률 문서 검토\n- **도구**: document_generator, contract_template, contract_reviewer\n- **적합한 작업**: 문서 작성, 계약서 생성, 문서 수정, 검토\n- **예시**:\n  * "임대차계약서 작성해줘"\n  * "특약사항 추가해줘"\n  * "계약서 수정안 만들어줘"\n\n## Chain-of-Thought Agent 선택 프로세스\n\n다음 단계를 **순서대로** 따라 최적의 Agent 조합을 선택하세요:\n\n### 1단계: 질문 요구사항 파악\n- 단순 정보 조회인가? → search_team만 필요\n- 판단/평가가 필요한가? → search + analysis 필요\n- 해결책 제시가 필요한가? → search + analysis 필요\n- 문서 생성이 필요한가? → document_team 추가\n\n### 2단계: 작업 복잡도 판단\n- **단순** (검색만): "~이 뭐야?", "~알려줘" → search_team\n- **중간** (검색+판단): "~괜찮아?", "~적절해?" → search + analysis\n- **복잡** (종합 해결): 구체적 상황 + "어떻게 해야 해?" → search + analysis\n\n### 3단계: 의존성 분석\n- 독립적 작업: 단일 팀으로 처리 가능\n- 순차적 의존: 이전 결과 필요 → 여러 팀 순서대로\n- 병렬 가능: 동시 조회 가능 → coordination: "parallel"\n\n### 4단계: 최종 검증\n- 선택한 팀들로 질문에 완전히 답변 가능한가?\n- 불필요한 팀이 포함되지 않았는가?\n- 순서가 논리적인가? (데이터 흐름 고려)\n\n### 중요 원칙:\n- **법률 키워드만으로 판단하지 말 것**: "법적으로 어떻게 해야 해?" = 법률 검색 + 분석 필요\n- **상황 설명 + 해결책 요청** = 반드시 analysis_team 포함\n- **구체적 수치 비교** (3억→10억 같은) = analysis_team 필요\n\n## 의도별 Agent 매핑 가이드 (기본 가이드 - CoT로 조정 가능)\n\n| 의도 (Intent) | 기본 조합 | 상황별 조정 |\n|--------------|-----------|-------------|\n| LEGAL_CONSULT | ["search_team"] | 해결책 요청시 → + analysis_team |\n| MARKET_INQUIRY | ["search_team"] | 비교/평가시 → + analysis_team |\n| LOAN_CONSULT | ["search_team", "analysis_team"] | 계산 필수 |\n| CONTRACT_CREATION | ["document_team"] | 검토 후 작성 → search + document |\n| CONTRACT_REVIEW | ["search_team", "analysis_team"] | 법률 검토 + 리스크 분석 |\n| COMPREHENSIVE | ["search_team", "analysis_team"] | **항상 분석 포함** |\n| RISK_ANALYSIS | ["analysis_team"] | 법률 근거 필요시 → search + analysis |\n| UNCLEAR | ["search_team", "analysis_team"] | 포괄적 대응 |\n\n**중요**: 위 매핑은 **기본 가이드**일 뿐입니다.\n실제 질문의 내용(CoT 분석 결과)에 따라 조정하세요!\n\n## 복합 질문 처리 예시 (CoT 적용)\n\n### 예시 1: 순차적 처리\n질문: "강남구 시세 확인하고 투자 가치 분석해줘"\n**CoT 분석**:\n1. 요구사항: 시세 조회 + 투자 가치 평가\n2. 복잡도: 중간 (검색 + 분석)\n3. 의존성: 시세 데이터 → 투자 분석 (순차)\n4. 검증: search만으로는 "투자 가치 평가" 불가능\n\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "1단계: 시세 조회+투자 평가 필요. 2단계: 중간 복잡도. 3단계: 순차 의존. 4단계: search로 시세 수집 후 analysis로 투자 가치 평가 필요",\n    "coordination": "sequential"\n}\n```\n\n### 예시 2: 단순 정보 조회\n질문: "전세금 인상률 한도가 얼마야?"\n**CoT 분석**:\n1. 요구사항: 단순 사실 확인\n2. 복잡도: 낮음 (정보 확인형)\n3. 의존성: 없음\n4. 검증: search_team만으로 충분\n\n```json\n{\n    "selected_agents": ["search_team"],\n    "reasoning": "1단계: 단순 정보 조회. 2단계: 저복잡도. 3단계: 독립적. 4단계: 법률 검색만으로 답변 가능",\n    "coordination": "single"\n}\n```\n\n### 예시 3: 해결책 요청 (핵심 예시!)\n질문: "집주인이 전세금 3억을 10억으로 올려달래. 법적으로 어떻게 해야 해?"\n의도: COMPREHENSIVE\n**CoT 분석**:\n1. 요구사항: 상황 설명 + 해결책 요청\n2. 복잡도: 높음 (구체적 상황 + 수치 비교)\n3. 의존성: 법률 확인 → 상황 분석 → 해결책 제시\n4. 검증: "법적으로"만 보고 search만 선택하면 불충분! 해결책 제시 필요\n\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "1단계: 법률 + 상황 분석 + 해결책 필요. 2단계: 고복잡도(3억→10억 비정상). 3단계: 순차(법률 확인 후 타당성 분석). 4단계: \'어떻게 해야\' = 단순 법률 조회 아님, 분석 필수",\n    "coordination": "sequential",\n    "confidence": 0.95\n}\n```\n\n## 응답 형식 (JSON)\n\n```json\n{\n    "selected_agents": ["선택된 agent/team 목록"],\n    "reasoning": "선택 이유를 구체적으로 설명. 각 Agent의 역할과 처리 순서 포함",\n    "coordination": "single/sequential/parallel/pipeline",\n    "dependencies": {"agent2": ["agent1"]},\n    "estimated_time": 30,\n    "confidence": 0.9\n}\n```\n\n## 선택 가이드라인\n\n1. **최소 Agent 원칙**: 가능한 적은 수의 Agent로 처리\n2. **전문성 우선**: 해당 작업에 가장 전문적인 Agent 선택\n3. **효율성 고려**: 병렬 처리 가능한 경우 명시\n4. **의존성 관리**: 데이터 흐름을 고려한 순서 지정\n5. **폴백 전략**: 불확실한 경우 ["search_team", "analysis_team"] 조합\n\n## 주의사항\n\n- selected_agents는 반드시 배열 형태\n- Agent 이름은 정확히: "search_team", "analysis_team", "document_team"\n- 최소 1개, 최대 3개 선택\n- 순서는 실행 우선순위 (앞에 있을수록 먼저 실행)\n- reasoning은 상세하고 논리적으로 작성\n- coordination 필드로 실행 방식 명시\n- 복합 질문의 경우 의존성 관계 명확히 표시'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 16:02:01,246 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 16:02:01,246 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 16:02:01,246 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 16:02:01,246 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 16:02:01,246 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 16:02:01,246 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 16:02:05,586 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 07:02:05 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'3774'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'4130'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9947'), (b'x-ratelimit-remaining-tokens', b'197883'), (b'x-ratelimit-reset-requests', b'7m29.957s'), (b'x-ratelimit-reset-tokens', b'635ms'), (b'x-request-id', b'req_45b4296c609747e1afd32a06cec21f65'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b0d11ad813091-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 16:02:05,587 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 16:02:05,587 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 16:02:05,587 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 16:02:05,587 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 16:02:05,587 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 16:02:05,588 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 07:02:05 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '3774', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '4130', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9947', 'x-ratelimit-remaining-tokens': '197883', 'x-ratelimit-reset-requests': '7m29.957s', 'x-ratelimit-reset-tokens': '635ms', 'x-request-id': 'req_45b4296c609747e1afd32a06cec21f65', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b0d11ad813091-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 16:02:05,588 - openai._base_client - DEBUG - request_id: req_45b4296c609747e1afd32a06cec21f65
2025-10-05 16:02:05,588 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: agent_selection | Model: gpt-4o-mini-2024-07-18 | Tokens: 2531 (prompt: 2366, completion: 165)
2025-10-05 16:02:05,588 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM agent selection reasoning: 1단계: 주택담보대출 조건 확인과 한도 계산이 필요하므로, 대출 상품 정보 검색과 데이터 분석이 필요합니다. 2단계: 중간 복잡도 (검색 + 분석). 3단계: 대출 조건을 확인한 후 한도를 계산해야 하므로 순차적 의존성이 있습니다. 4단계: search_team이 대출 조건을 조회한 후, analysis_team이 그 데이터를 바탕으로 한도를 계산할 수 있습니다.
2025-10-05 16:02:05,588 - app.service_agent.cognitive_agents.planning_agent - INFO - ✅ Primary LLM selected agents: ['search_team', 'analysis_team']
2025-10-05 16:02:05,588 - __main__ - INFO -   의도: 대출상담
2025-10-05 16:02:05,588 - __main__ - INFO -   신뢰도: 0.90
2025-10-05 16:02:05,588 - __main__ - INFO -   추천 Agent: ['search_team', 'analysis_team']
2025-10-05 16:02:05,588 - __main__ - INFO - 
[Step 2] Query Decomposition...
2025-10-05 16:02:05,588 - app.service_agent.cognitive_agents.query_decomposer - INFO - Decomposing query: 주택담보대출 조건 확인하고 한도 계산해줘...
2025-10-05 16:02:05,589 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-bd20090a-a4cc-4d42-898c-a163e63eb421', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 질문 분해 전문가입니다.\n복잡한 사용자 질문을 독립적으로 처리 가능한 작업 단위로 분해하는 것이 목표입니다.\n\n## Chain-of-Thought 분해 프로세스:\n\n### 1단계: 복합 질문 여부 판단\n- 단순 정보 조회만 필요한가? → is_compound: false\n- **다음 중 하나라도 해당하면 is_compound: true**:\n  * "그리고", "그 다음", "한 후" 같은 연결어로 여러 요청 연결\n  * 명시적으로 2개 이상의 작업 요청 (예: "시세 확인하고 대출 계산해줘")\n  * 상황 설명 + 해결책 요청 (예: "3억→10억 올려달래. 어떻게 해야 해?")\n  * 해결책을 위해 여러 단계 처리 필요 (검색 → 분석 → 제안)\n\n### 2단계: 필요 작업 식별\n- 정보 수집이 필요한가? → search 작업\n- 평가/판단이 필요한가? → analysis 작업\n- 문서 생성이 필요한가? → generation 작업\n- **해결책 요청**인가? → search + analysis (최소 2개)\n\n### 3단계: 작업 순서 결정\n- 독립적 작업: 병렬 가능\n- 이전 결과 필요: 순차 실행 (depends_on 설정)\n\n## 중요 원칙:\n1. 각 작업은 하나의 명확한 목표를 가져야 합니다\n2. 작업 간 의존성을 명확히 파악해야 합니다\n3. 병렬 처리 가능한 작업은 구분해야 합니다\n4. **주의**: "어떻게 해야", "방법 알려줘" 같은 해결책 요청은 복합 질문!\n\n## 작업 유형 (type):\n- search: 정보 검색 (법률, 시세, 대출 정보 등)\n- analysis: 데이터 분석 (리스크 평가, 시장 분석 등)\n- generation: 문서 생성 (계약서 작성 등)\n- review: 검토/평가 (계약서 검토, 조건 확인 등)\n- calculation: 계산/산출 (대출 한도, 세금 등)\n- comparison: 비교 분석 (여러 옵션 비교)\n\n## 담당 팀 (agent):\n- search_team: 법률, 시세, 대출 정보 검색\n- analysis_team: 데이터 분석, 리스크 평가, 계산\n- document_team: 문서 생성, 계약서 작성\n\n## 학습 예시:\n\n### 예시 1: 복합 질문 (순차적)\n질문: "강남구 아파트 시세 확인하고 대출 가능 금액 계산해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "강남구 아파트 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "대출 가능 금액 계산",\n            "type": "calculation",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "required_data": {"price": "task_0.result.price"},\n            "estimated_time": 15\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "시세 정보가 있어야 대출 금액 계산이 가능하므로 순차 실행"\n}\n```\n\n### 예시 2: 복합 질문 (병렬 가능)\n질문: "이 지역 전세 시세와 매매 시세 모두 알려주고 비교 분석해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "전세 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "매매 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "전세/매매 시세 비교 분석",\n            "type": "comparison",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0", "task_1"],\n            "required_data": {\n                "lease_price": "task_0.result",\n                "sale_price": "task_1.result"\n            },\n            "estimated_time": 25\n        }\n    ],\n    "execution_mode": "mixed",\n    "parallel_groups": [["task_0", "task_1"], ["task_2"]],\n    "reasoning": "시세 조회는 독립적이므로 병렬 처리, 비교는 두 결과 필요"\n}\n```\n\n### 예시 3: 복합 질문 (3단계 이상)\n질문: "이 계약서 검토해서 위험한 부분 찾고 수정안 만들어서 최종 계약서 작성해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "계약서 내용 전체 검토",\n            "type": "review",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 30\n        },\n        {\n            "description": "위험 요소 및 문제점 분석",\n            "type": "analysis",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "estimated_time": 25\n        },\n        {\n            "description": "수정안 제안 생성",\n            "type": "generation",\n            "agent": "document_team",\n            "priority": 3,\n            "depends_on": ["task_1"],\n            "estimated_time": 20\n        },\n        {\n            "description": "최종 계약서 작성",\n            "type": "generation",\n            "agent": "document_team",\n            "priority": 4,\n            "depends_on": ["task_2"],\n            "estimated_time": 30\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "각 단계가 이전 결과에 의존하므로 순차 실행 필요"\n}\n```\n\n### 예시 4: 단순 질문 (분해 불필요)\n질문: "전세금 인상률 상한이 얼마야?"\n분해:\n```json\n{\n    "is_compound": false,\n    "sub_tasks": [\n        {\n            "description": "전세금 인상률 상한 법률 정보 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 15\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "단일 정보 조회 요청으로 분해 불필요"\n}\n```\n\n### 예시 5: 조건부 실행\n질문: "이 물건 시세 확인하고 적정가면 대출 상담도 받고 싶어"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "물건 시세 조회 및 적정성 평가",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 25\n        },\n        {\n            "description": "대출 상담 정보 제공",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "optional": true,\n            "context": {"condition": "if_reasonable_price"},\n            "estimated_time": 20\n        }\n    ],\n    "execution_mode": "conditional",\n    "reasoning": "시세 확인 결과에 따라 대출 상담 진행 여부 결정"\n}\n```\n\n### 예시 6: 상황 설명 + 해결책 요청 (핵심 패턴!)\n질문: "집주인이 전세금 3억을 10억으로 올려달래. 법적으로 어떻게 해야 해?"\n**CoT 분석**:\n1. 질문 분석: 상황 설명 + 해결책 요청\n2. 연결어: 없지만, "어떻게 해야" = 해결책 요청\n3. 의존성: 법률 확인 → 상황 분석 → 대응 방안\n4. 복합 여부: **YES** (해결책을 위해 여러 단계 필요)\n\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "전세금 인상 한도 관련 법률 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "3억→10억 인상의 법적 타당성 및 적정성 분석",\n            "type": "analysis",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "required_data": {"legal_limit": "task_0.result", "current": 300000000, "requested": 1000000000},\n            "estimated_time": 25\n        },\n        {\n            "description": "구체적 대응 방안 및 해결책 제시",\n            "type": "analysis",\n            "agent": "analysis_team",\n            "priority": 3,\n            "depends_on": ["task_1"],\n            "estimated_time": 20\n        }\n    ],\n    "execution_mode": "sequential",\n    "confidence": 0.95,\n    "reasoning": "상황 설명+해결책 요청 패턴. \'어떻게 해야\'는 단순 정보 조회가 아닌 종합 해결책 필요. 법률 조회 → 상황 분석 → 해결책 제시 3단계 순차 처리"\n}\n```\n\n## Chain-of-Thought 프로세스:\n\n1. **질문 분석**: 어떤 정보나 작업을 요구하는가?\n2. **연결어 확인**: "그리고", "또한", "해서", "한 후" 등이 있는가?\n3. **의존성 파악**: 어떤 작업이 다른 작업의 결과를 필요로 하는가?\n4. **병렬성 판단**: 독립적으로 실행 가능한 작업이 있는가?\n5. **최적화**: 불필요한 분해는 없는가?\n\n## 응답 형식 (JSON):\n\n{\n    "is_compound": true/false,\n    "sub_tasks": [\n        {\n            "description": "작업 설명",\n            "type": "작업 유형",\n            "agent": "담당 팀",\n            "priority": 우선순위 (1이 가장 높음),\n            "depends_on": ["선행 작업 ID 리스트"],\n            "required_data": {"필요한 데이터 매핑"},\n            "estimated_time": 예상 소요 시간(초),\n            "optional": true/false,\n            "context": {"추가 컨텍스트"}\n        }\n    ],\n    "execution_mode": "sequential/parallel/mixed/conditional",\n    "parallel_groups": [["병렬 실행 가능한 작업 ID 그룹"]],\n    "confidence": 0.0-1.0,\n    "reasoning": "분해 결정의 이유와 근거"\n}\n\n## 분해 가이드라인:\n\n1. **분해가 필요한 경우**:\n   - 여러 종류의 정보를 요청하는 경우\n   - 순차적 처리가 필요한 경우 (A의 결과로 B 수행)\n   - 서로 다른 팀의 전문성이 필요한 경우\n\n2. **분해가 불필요한 경우**:\n   - 단일 정보 조회\n   - 단순한 질문-답변\n   - 하나의 팀에서 완전히 처리 가능한 경우\n\n3. **병렬 처리 기준**:\n   - 서로 독립적인 정보 조회\n   - 의존성이 없는 분석 작업\n   - 동시에 진행해도 충돌하지 않는 작업\n\n4. **우선순위 설정**:\n   - 의존성이 없는 작업: priority 1\n   - 1차 의존 작업: priority 2\n   - 2차 의존 작업: priority 3\n   - 이런 식으로 증가\n\n현재 의도: 대출상담\n추출된 엔티티: None\n\n분석할 질문: 주택담보대출 조건 확인하고 한도 계산해줘'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 16:02:05,589 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 16:02:05,589 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 16:02:05,589 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 16:02:05,589 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 16:02:05,590 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 16:02:05,590 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 16:02:08,207 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 07:02:08 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'2339'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'2382'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9947'), (b'x-ratelimit-remaining-tokens', b'197335'), (b'x-ratelimit-reset-requests', b'7m34.255s'), (b'x-ratelimit-reset-tokens', b'799ms'), (b'x-request-id', b'req_a01e238202c94693b82d061bac10ff30'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b0d2ccb243091-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 16:02:08,207 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 16:02:08,207 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 16:02:08,208 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 16:02:08,208 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 16:02:08,208 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 16:02:08,208 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 07:02:08 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '2339', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '2382', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9947', 'x-ratelimit-remaining-tokens': '197335', 'x-ratelimit-reset-requests': '7m34.255s', 'x-ratelimit-reset-tokens': '799ms', 'x-request-id': 'req_a01e238202c94693b82d061bac10ff30', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b0d2ccb243091-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 16:02:08,208 - openai._base_client - DEBUG - request_id: req_a01e238202c94693b82d061bac10ff30
2025-10-05 16:02:08,208 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: query_decomposition | Model: gpt-4o-mini-2024-07-18 | Tokens: 2873 (prompt: 2693, completion: 180)
2025-10-05 16:02:08,208 - app.service_agent.cognitive_agents.query_decomposer - INFO - Successfully decomposed into 2 tasks
2025-10-05 16:02:08,208 - __main__ - INFO -   복합 질문: True
2025-10-05 16:02:08,209 - __main__ - INFO -   작업 수: 2
2025-10-05 16:02:08,209 - __main__ - INFO -   실행 모드: sequential
2025-10-05 16:02:08,209 - __main__ - INFO -     - task_0: 주택담보대출 조건 조회 (search_team)
2025-10-05 16:02:08,209 - __main__ - INFO -     - task_1: 대출 한도 계산 (analysis_team)
2025-10-05 16:02:08,209 - __main__ - INFO - 
[Step 3] Comprehensive Plan 생성...
2025-10-05 16:02:08,209 - app.service_agent.cognitive_agents.planning_agent - INFO - Creating comprehensive plan for query: 주택담보대출 조건 확인하고 한도 계산해줘...
2025-10-05 16:02:08,209 - app.service_agent.cognitive_agents.planning_agent - INFO - Analyzing intent for query: 주택담보대출 조건 확인하고 한도 계산해줘...
2025-10-05 16:02:08,209 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-87946419-df54-48ae-b8ef-53c1ef1823f8', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 의도 분석 전문가입니다.\n사용자의 질문을 정확히 이해하고, 어떤 종류의 도움이 필요한지 분류해야 합니다.\n\n## Chain-of-Thought 분석 프로세스\n\n질문을 분석할 때 다음 단계를 **순서대로** 따르세요:\n\n### 1단계: 질문 구조 파악\n- 단순 정보 요청인가? (예: "~이 뭐야?", "~알려줘")\n- 상황 설명이 포함되어 있는가? (배경, 현재 상태)\n- 구체적 수치나 데이터가 있는가? (금액, 비율, 기간 등)\n- 문제 해결을 요구하는가? (예: "어떻게 해야 해?", "방법 알려줘")\n\n### 2단계: 요청 유형 판단\n- **정보 확인형**: 사실, 개념, 규정 확인 → 검색만으로 충분\n- **평가/판단형**: "괜찮아?", "적절해?", "문제있어?" → 검색 + 분석 필요\n- **해결책 요청형**: "어떻게?", "방법?", "대처?" → 검색 + 분석 + 제안 필요\n- **비교/선택형**: "A vs B", "어느게 나아?" → 검색 + 분석(비교) 필요\n\n### 3단계: 복잡도 평가\n- **저**: 단일 개념/사실 확인 (예: "전세금 인상률 한도?")\n- **중**: 특정 상황 + 판단 (예: "3억을 5억으로 올려달래. 가능해?")\n- **고**: 복잡한 상황 + 여러 조건 + 해결책 (예: "10년 거주, 3억→10억 요구. 어떻게 해야 해?")\n\n### 4단계: 필요한 처리 결정\n- **검색만**: 정보 확인형 + 저복잡도\n- **검색+분석**: 평가/판단형 OR 중복잡도 OR 수치 비교 포함\n- **종합처리**: 해결책 요청형 OR 고복잡도 OR 여러 조건 동시 고려\n\n### 5단계: 최종 검증\n- 선택한 의도로 사용자 질문에 완전히 답변 가능한가?\n- 단순 정보 제공으로 끝나는가, 아니면 추가 분석/판단이 필요한가?\n- 상황 설명이 있으면서 "해결", "방법", "어떻게" 등이 있으면 → COMPREHENSIVE 고려\n\n## 중요: 복합 질문 처리\n복합적인 질문(여러 의도가 섞인 질문)의 경우, 가장 핵심적인 의도를 파악하되,\nsub_intents 필드에 부가적인 의도들도 함께 기록해주세요.\n\n**특히 주의**:\n- 법률 키워드가 있어도, "해결방법", "어떻게 해야" 같은 표현이 있으면 단순 LEGAL_CONSULT가 아닐 수 있음\n- 구체적 상황(금액, 기간 등) + 해결책 요구 = COMPREHENSIVE 또는 복합 의도로 분류\n\n## 분류 카테고리 설명:\n\n1. **LEGAL_CONSULT (법률상담)**\n   - 설명: 부동산 관련 법률, 권리, 의무에 대한 질문\n   - 예시:\n     * 단순: "전세금 5% 인상이 가능한가요?", "임대차계약 갱신 거부할 수 있나요?"\n     * 복합: "전세금 인상 가능한지 확인하고 법적 근거도 알려주세요"\n   - 키워드: 법, 전세, 임대, 보증금, 계약, 권리, 의무, 갱신, 임차인, 임대인, 법률, 규정, 조항\n   - 필요한 처리: 법률 데이터베이스 검색, 관련 법조항 찾기\n\n2. **MARKET_INQUIRY (시세조회)**\n   - 설명: 부동산 시장 가격, 시세, 거래 동향에 대한 질문\n   - 예시:\n     * 단순: "강남구 아파트 전세 시세 알려주세요", "서초동 매매가 얼마나 올랐나요?"\n     * 복합: "강남구 시세 확인하고 대출 가능 금액도 계산해줘"\n   - 키워드: 시세, 가격, 매매가, 전세가, 월세, 시장, 동향, 평균, 지역명, 상승률, 하락률\n   - 필요한 처리: 부동산 시세 데이터 조회, 지역별 가격 분석\n\n3. **LOAN_CONSULT (대출상담)**\n   - 설명: 주택담보대출, 전세자금대출 등 금융 관련 질문\n   - 예시:\n     * 단순: "전세자금대출 한도가 얼마인가요?", "LTV가 뭔가요?"\n     * 복합: "대출 한도 확인하고 금리 비교도 해주세요"\n   - 키워드: 대출, 금리, 한도, 조건, 상환, LTV, DTI, DSR, 담보, 금융, 은행\n   - 필요한 처리: 대출 상품 조회, 금리 정보 검색, 한도 계산\n\n4. **CONTRACT_CREATION (계약서작성)**\n   - 설명: 새로운 계약서나 문서를 작성해달라는 요청\n   - 예시:\n     * 단순: "임대차계약서 작성해주세요", "전세계약서 초안 만들어주세요"\n     * 복합: "계약서 작성하고 주의사항도 검토해주세요"\n   - 키워드: 작성, 만들, 생성, 초안, 계약서, 문서, 양식\n   - 필요한 처리: 문서 생성 에이전트 호출, 템플릿 기반 작성\n\n5. **CONTRACT_REVIEW (계약서검토)**\n   - 설명: 기존 계약서나 문서를 검토해달라는 요청\n   - 예시:\n     * 단순: "이 계약서 검토해주세요", "특약사항 문제없나요?"\n     * 복합: "계약서 검토하고 수정사항도 제안해주세요"\n   - 키워드: 검토, 확인, 점검, 리뷰, 분석해, 살펴봐, 체크\n   - 필요한 처리: 문서 분석, 위험 요소 식별, 개선사항 제안\n\n6. **COMPREHENSIVE (종합분석)**\n   - 설명: 여러 측면을 종합적으로 분석해달라는 요청, 또는 복잡한 상황에 대한 해결책 요청\n   - 예시:\n     * 단순: "이 물건 전체적으로 분석해주세요"\n     * 복합: "시세, 법률, 대출 모두 검토해서 종합 의견 주세요"\n     * 해결형: "10년 거주했는데 전세금 3억을 10억으로 올려달래. 어떻게 해야 해?"\n     * 상황+해결: "집주인이 계약 갱신 거부했어. 법적으로 어떻게 대응해야 할까?"\n   - 키워드: 종합, 전체, 모든, 전반적, 종합적, 평가, 분석, 어떻게, 방법, 해결, 대처\n   - 패턴: 구체적 상황 설명 + "어떻게/방법/해결" 요청\n   - 필요한 처리: 다중 데이터 소스 통합 분석, 상황 평가, 해결책 제시\n\n7. **RISK_ANALYSIS (리스크분석)**\n   - 설명: 위험 요소나 주의사항에 대한 질문\n   - 예시:\n     * 단순: "이 계약 위험한가요?", "주의할 점 알려주세요"\n     * 복합: "리스크 분석하고 대안도 제시해주세요"\n   - 키워드: 위험, 리스크, 주의, 문제점, 조심, 걱정, 우려\n   - 필요한 처리: 위험 요소 분석, 주의사항 추출\n\n8. **UNCLEAR (불분명)**\n   - 설명: 의도를 명확히 파악하기 어려운 질문\n   - 예시: "이거 좀 봐주세요", "어떻게 해야 할까요?", "도와주세요"\n   - 처리: 추가 질문으로 의도 명확화 필요\n\n9. **IRRELEVANT (무관)**\n   - 설명: 부동산과 전혀 관련 없는 질문\n   - 예시: "날씨 어때?", "저녁 뭐 먹지?", "주식 추천해줘"\n   - 처리: 부동산 관련 질문을 유도\n\n## 복합 질문 예시와 분석 (CoT 적용):\n\n### 예시 1: "강남구 아파트 시세 알려주고 전세자금대출 가능한지도 확인해줘"\n**CoT 분석**:\n1. 구조: 두 개의 요청 ("시세" + "대출")\n2. 유형: 정보 확인형 (둘 다)\n3. 복잡도: 중 (두 가지 독립적 조회)\n4. 필요 처리: 검색 + 계산/분석\n\n**결론**:\n- 주 의도: MARKET_INQUIRY (시세 조회가 먼저 필요)\n- 부가 의도: LOAN_CONSULT (대출 확인)\n- 분해: ["강남구 아파트 시세 조회", "전세자금대출 가능 여부 확인"]\n\n### 예시 2: "이 계약서 검토해서 위험한 부분 있는지 알려주고 수정 제안도 해줘"\n**CoT 분석**:\n1. 구조: 검토 + 위험 평가 + 수정안\n2. 유형: 평가/판단형 + 해결책 요청형\n3. 복잡도: 고 (3단계 처리)\n4. 필요 처리: 검토 + 분석 + 문서 생성\n\n**결론**:\n- 주 의도: CONTRACT_REVIEW (계약서 검토)\n- 부가 의도: RISK_ANALYSIS (위험 분석)\n- 분해: ["계약서 전체 검토", "위험 요소 식별", "수정사항 제안"]\n\n### 예시 3: "집주인이 짜증나, 10년 살았는데 전세금 3억을 10억으로 올려달래. 법적으로 해결방법 알려줘"\n**CoT 분석**:\n1. 구조: 상황 설명 (10년 거주, 3억→10억) + 해결책 요청\n2. 유형: 해결책 요청형 (단순 정보 X)\n3. 복잡도: 고 (구체적 상황 + 수치 비교 + 법률 + 대응방안)\n4. 필요 처리: 법률 검색 + 상황 분석 + 해결책 제시\n\n**결론**:\n- 주 의도: COMPREHENSIVE (복잡한 상황에 대한 종합 해결)\n- 부가 의도: LEGAL_CONSULT, RISK_ANALYSIS\n- 분해: ["전세금 인상 한도 법률 조회", "3억→10억 인상의 타당성 분석", "구체적 대응 방안 제시"]\n- **이유**: "법적으로"라는 키워드가 있지만, 단순 법률 확인이 아니라 구체적 상황에 대한 해결책을 요구하므로 COMPREHENSIVE\n\n### 예시 4: "전세금 인상률 상한이 얼마야?"\n**CoT 분석**:\n1. 구조: 단순 사실 확인\n2. 유형: 정보 확인형\n3. 복잡도: 저 (단일 개념)\n4. 필요 처리: 검색만\n\n**결론**:\n- 주 의도: LEGAL_CONSULT (법률 정보 조회)\n- 부가 의도: 없음\n- 분해: 필요 없음\n\n## 응답 형식 (JSON 형식으로 응답):\n\n```json\n{\n    "intent": "LEGAL_CONSULT",\n    "confidence": 0.9,\n    "keywords": ["전세금", "인상", "제한"],\n    "sub_intents": [],\n    "is_compound": false,\n    "decomposed_tasks": [],\n    "entities": {\n        "location": "강남구",\n        "price": "5억",\n        "contract_type": "전세",\n        "date": "2024년",\n        "area": "84㎡",\n        "action_verbs": ["확인", "검토"]\n    },\n    "reasoning": "전세금 인상에 대한 법률 질문이므로 LEGAL_CONSULT로 분류"\n}\n```\n\n응답 규칙:\n- intent: 위 9개 카테고리 중 하나 (대문자_언더스코어 형식)\n- confidence: 0.0~1.0 (0.8 이상이면 매우 확실, 0.5 미만이면 불확실)\n- keywords: 추출된 주요 키워드 목록\n- sub_intents: 복합 질문일 경우 부가적인 의도들\n- is_compound: 복합 질문 여부 (true/false)\n- decomposed_tasks: 복합 질문을 분해한 개별 작업들\n- entities: 추출된 엔티티 정보\n- reasoning: **반드시 CoT 5단계를 거쳐 분석한 과정을 포함** (구조 파악 → 유형 판단 → 복잡도 평가 → 필요 처리 → 최종 검증)\n\n## reasoning 작성 예시:\n"1단계(구조): 상황 설명(10년 거주, 3억→10억) + 해결책 요청 포함.\n2단계(유형): 해결책 요청형 - 단순 정보가 아닌 대응방안 필요.\n3단계(복잡도): 고 - 구체적 수치 비교와 복잡한 상황.\n4단계(처리): 법률 검색 + 상황 분석 + 해결책 제시 필요.\n5단계(검증): LEGAL_CONSULT만으로는 불충분, 종합적 분석 필요 → COMPREHENSIVE 선택"\n\n## 판단 가이드:\n- 여러 의도가 섞여있다면, 가장 주된 의도를 intent에, 나머지를 sub_intents에 기록\n- "그리고", "또한", "함께", "같이" 등의 연결어가 있으면 복합 질문일 가능성 높음\n- 법률 관련 키워드가 있으면 LEGAL_CONSULT 우선\n- 가격/시세 언급이 명확하면 MARKET_INQUIRY\n- 계약서라는 단어와 함께 "작성/만들기"가 있으면 CONTRACT_CREATION\n- 계약서라는 단어와 함께 "검토/확인"이 있으면 CONTRACT_REVIEW\n- 불확실하면 confidence를 낮게 설정하고 UNCLEAR 선택\n- 복합 질문은 is_compound를 true로 설정하고 개별 작업으로 분해\n\n분석할 질문: 주택담보대출 조건 확인하고 한도 계산해줘'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 16:02:08,210 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 16:02:08,210 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 16:02:08,210 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 16:02:08,210 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 16:02:08,211 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 16:02:08,211 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 16:02:13,122 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 07:02:13 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'4663'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'4684'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9946'), (b'x-ratelimit-remaining-tokens', b'197241'), (b'x-ratelimit-reset-requests', b'7m40.602s'), (b'x-ratelimit-reset-tokens', b'827ms'), (b'x-request-id', b'req_49cc2967977945a09a7cf01271a055de'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b0d3d2e553091-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 16:02:13,122 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 16:02:13,122 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 16:02:13,122 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 16:02:13,122 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 16:02:13,122 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 16:02:13,122 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 07:02:13 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '4663', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '4684', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9946', 'x-ratelimit-remaining-tokens': '197241', 'x-ratelimit-reset-requests': '7m40.602s', 'x-ratelimit-reset-tokens': '827ms', 'x-request-id': 'req_49cc2967977945a09a7cf01271a055de', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b0d3d2e553091-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 16:02:13,122 - openai._base_client - DEBUG - request_id: req_49cc2967977945a09a7cf01271a055de
2025-10-05 16:02:13,122 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: intent_analysis | Model: gpt-4o-mini-2024-07-18 | Tokens: 3397 (prompt: 3183, completion: 214)
2025-10-05 16:02:13,122 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM Intent Analysis Result: {'intent': 'LOAN_CONSULT', 'confidence': 0.9, 'keywords': ['주택담보대출', '조건', '한도', '계산'], 'sub_intents': [], 'is_compound': False, 'decomposed_tasks': [], 'entities': {'loan_type': '주택담보대출', 'action_verbs': ['확인', '계산']}, 'reasoning': '1단계(구조): 주택담보대출 조건 확인 + 한도 계산 요청. 2단계(유형): 대출 조건과 한도에 대한 정보 요청으로 LOAN_CONSULT로 분류. 3단계(복잡도): 저 - 단일 개념 확인. 4단계(처리): 대출 조건 검색 및 한도 계산 필요. 5단계(검증): 단순 정보 요청이므로 LOAN_CONSULT로 충분.'}
2025-10-05 16:02:13,124 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-67be775c-c7e9-4c2b-b56d-41a3159a043f', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 Agent 선택 전문가입니다.\n사용자의 요청에 가장 적합한 Agent/Team을 선택하는 것이 목표입니다.\n\n## 현재 상황\n\n**사용자 질문:** 주택담보대출 조건 확인하고 한도 계산해줘\n**분석된 의도:** 대출상담\n**추출된 키워드:** [\'주택담보대출\', \'조건\', \'한도\', \'계산\']\n\n## 사용 가능한 Agent/Team 정보\n\n{\'search_team\': {\'name\': \'search_team\', \'capabilities\': \'법률 검색, 부동산 시세 조회, 대출 상품 검색\', \'tools\': [\'legal_search\', \'market_data\', \'loan_data\'], \'use_cases\': [\'법률 상담\', \'시세 조회\', \'대출 정보\']}, \'analysis_team\': {\'name\': \'analysis_team\', \'capabilities\': \'데이터 분석, 리스크 평가, 인사이트 생성, 추천\', \'tools\': [\'data_analyzer\', \'risk_evaluator\'], \'use_cases\': [\'시장 분석\', \'리스크 평가\', \'투자 분석\']}, \'document_team\': {\'name\': \'document_team\', \'capabilities\': \'계약서 작성, 문서 생성, 문서 검토\', \'tools\': [\'document_generator\', \'contract_reviewer\'], \'use_cases\': [\'계약서 작성\', \'문서 검토\']}}\n\n## Agent 역할 및 상세 가이드\n\n### 1. search_team (검색 팀)\n- **주요 기능**: 정보 검색 및 데이터 수집\n- **전문 분야**:\n  * 법률 정보 검색 (전세법, 임대차보호법, 부동산 관련 법규)\n  * 부동산 시세 조회 (매매가, 전세가, 월세, 실거래가)\n  * 대출 상품 정보 검색 (금리, 한도, 조건)\n  * 지역 정보 및 인프라 조회\n- **도구**: legal_search, market_data, loan_data\n- **적합한 작업**: 정보 조회, 데이터 수집, 법률 확인, 시세 파악\n- **예시**:\n  * "전세금 5% 인상 가능한가요?"\n  * "강남구 아파트 전세 시세"\n  * "전세자금대출 한도 얼마?"\n\n### 2. analysis_team (분석 팀)\n- **주요 기능**: 데이터 분석 및 평가\n- **전문 분야**:\n  * 시장 동향 분석 (상승률, 하락률, 추세)\n  * 리스크 평가 (계약, 투자 위험도)\n  * 투자 수익률 계산 (ROI, 월세 수익률)\n  * 대출 한도 및 조건 분석 (LTV, DTI, DSR)\n  * 비교 분석 (지역별, 상품별)\n- **도구**: data_analyzer, risk_evaluator, calculator\n- **적합한 작업**: 데이터 분석, 리스크 평가, 계산, 비교, 예측\n- **의존성**: 보통 search_team의 데이터가 필요\n- **예시**:\n  * "이 지역 투자 가치 분석해줘"\n  * "계약 리스크 평가해줘"\n  * "대출 가능 금액 계산해줘"\n\n### 3. document_team (문서 팀)\n- **주요 기능**: 문서 생성 및 관리\n- **전문 분야**:\n  * 계약서 작성 (임대차, 매매, 전세)\n  * 문서 템플릿 관리\n  * 특약사항 생성\n  * 계약서 수정안 작성\n  * 법률 문서 검토\n- **도구**: document_generator, contract_template, contract_reviewer\n- **적합한 작업**: 문서 작성, 계약서 생성, 문서 수정, 검토\n- **예시**:\n  * "임대차계약서 작성해줘"\n  * "특약사항 추가해줘"\n  * "계약서 수정안 만들어줘"\n\n## Chain-of-Thought Agent 선택 프로세스\n\n다음 단계를 **순서대로** 따라 최적의 Agent 조합을 선택하세요:\n\n### 1단계: 질문 요구사항 파악\n- 단순 정보 조회인가? → search_team만 필요\n- 판단/평가가 필요한가? → search + analysis 필요\n- 해결책 제시가 필요한가? → search + analysis 필요\n- 문서 생성이 필요한가? → document_team 추가\n\n### 2단계: 작업 복잡도 판단\n- **단순** (검색만): "~이 뭐야?", "~알려줘" → search_team\n- **중간** (검색+판단): "~괜찮아?", "~적절해?" → search + analysis\n- **복잡** (종합 해결): 구체적 상황 + "어떻게 해야 해?" → search + analysis\n\n### 3단계: 의존성 분석\n- 독립적 작업: 단일 팀으로 처리 가능\n- 순차적 의존: 이전 결과 필요 → 여러 팀 순서대로\n- 병렬 가능: 동시 조회 가능 → coordination: "parallel"\n\n### 4단계: 최종 검증\n- 선택한 팀들로 질문에 완전히 답변 가능한가?\n- 불필요한 팀이 포함되지 않았는가?\n- 순서가 논리적인가? (데이터 흐름 고려)\n\n### 중요 원칙:\n- **법률 키워드만으로 판단하지 말 것**: "법적으로 어떻게 해야 해?" = 법률 검색 + 분석 필요\n- **상황 설명 + 해결책 요청** = 반드시 analysis_team 포함\n- **구체적 수치 비교** (3억→10억 같은) = analysis_team 필요\n\n## 의도별 Agent 매핑 가이드 (기본 가이드 - CoT로 조정 가능)\n\n| 의도 (Intent) | 기본 조합 | 상황별 조정 |\n|--------------|-----------|-------------|\n| LEGAL_CONSULT | ["search_team"] | 해결책 요청시 → + analysis_team |\n| MARKET_INQUIRY | ["search_team"] | 비교/평가시 → + analysis_team |\n| LOAN_CONSULT | ["search_team", "analysis_team"] | 계산 필수 |\n| CONTRACT_CREATION | ["document_team"] | 검토 후 작성 → search + document |\n| CONTRACT_REVIEW | ["search_team", "analysis_team"] | 법률 검토 + 리스크 분석 |\n| COMPREHENSIVE | ["search_team", "analysis_team"] | **항상 분석 포함** |\n| RISK_ANALYSIS | ["analysis_team"] | 법률 근거 필요시 → search + analysis |\n| UNCLEAR | ["search_team", "analysis_team"] | 포괄적 대응 |\n\n**중요**: 위 매핑은 **기본 가이드**일 뿐입니다.\n실제 질문의 내용(CoT 분석 결과)에 따라 조정하세요!\n\n## 복합 질문 처리 예시 (CoT 적용)\n\n### 예시 1: 순차적 처리\n질문: "강남구 시세 확인하고 투자 가치 분석해줘"\n**CoT 분석**:\n1. 요구사항: 시세 조회 + 투자 가치 평가\n2. 복잡도: 중간 (검색 + 분석)\n3. 의존성: 시세 데이터 → 투자 분석 (순차)\n4. 검증: search만으로는 "투자 가치 평가" 불가능\n\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "1단계: 시세 조회+투자 평가 필요. 2단계: 중간 복잡도. 3단계: 순차 의존. 4단계: search로 시세 수집 후 analysis로 투자 가치 평가 필요",\n    "coordination": "sequential"\n}\n```\n\n### 예시 2: 단순 정보 조회\n질문: "전세금 인상률 한도가 얼마야?"\n**CoT 분석**:\n1. 요구사항: 단순 사실 확인\n2. 복잡도: 낮음 (정보 확인형)\n3. 의존성: 없음\n4. 검증: search_team만으로 충분\n\n```json\n{\n    "selected_agents": ["search_team"],\n    "reasoning": "1단계: 단순 정보 조회. 2단계: 저복잡도. 3단계: 독립적. 4단계: 법률 검색만으로 답변 가능",\n    "coordination": "single"\n}\n```\n\n### 예시 3: 해결책 요청 (핵심 예시!)\n질문: "집주인이 전세금 3억을 10억으로 올려달래. 법적으로 어떻게 해야 해?"\n의도: COMPREHENSIVE\n**CoT 분석**:\n1. 요구사항: 상황 설명 + 해결책 요청\n2. 복잡도: 높음 (구체적 상황 + 수치 비교)\n3. 의존성: 법률 확인 → 상황 분석 → 해결책 제시\n4. 검증: "법적으로"만 보고 search만 선택하면 불충분! 해결책 제시 필요\n\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "1단계: 법률 + 상황 분석 + 해결책 필요. 2단계: 고복잡도(3억→10억 비정상). 3단계: 순차(법률 확인 후 타당성 분석). 4단계: \'어떻게 해야\' = 단순 법률 조회 아님, 분석 필수",\n    "coordination": "sequential",\n    "confidence": 0.95\n}\n```\n\n## 응답 형식 (JSON)\n\n```json\n{\n    "selected_agents": ["선택된 agent/team 목록"],\n    "reasoning": "선택 이유를 구체적으로 설명. 각 Agent의 역할과 처리 순서 포함",\n    "coordination": "single/sequential/parallel/pipeline",\n    "dependencies": {"agent2": ["agent1"]},\n    "estimated_time": 30,\n    "confidence": 0.9\n}\n```\n\n## 선택 가이드라인\n\n1. **최소 Agent 원칙**: 가능한 적은 수의 Agent로 처리\n2. **전문성 우선**: 해당 작업에 가장 전문적인 Agent 선택\n3. **효율성 고려**: 병렬 처리 가능한 경우 명시\n4. **의존성 관리**: 데이터 흐름을 고려한 순서 지정\n5. **폴백 전략**: 불확실한 경우 ["search_team", "analysis_team"] 조합\n\n## 주의사항\n\n- selected_agents는 반드시 배열 형태\n- Agent 이름은 정확히: "search_team", "analysis_team", "document_team"\n- 최소 1개, 최대 3개 선택\n- 순서는 실행 우선순위 (앞에 있을수록 먼저 실행)\n- reasoning은 상세하고 논리적으로 작성\n- coordination 필드로 실행 방식 명시\n- 복합 질문의 경우 의존성 관계 명확히 표시'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 16:02:13,124 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 16:02:13,124 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 16:02:13,124 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 16:02:13,124 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 16:02:13,124 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 16:02:13,124 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 16:02:17,224 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 07:02:17 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'3859'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'3891'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9946'), (b'x-ratelimit-remaining-tokens', b'197883'), (b'x-ratelimit-reset-requests', b'7m43.985s'), (b'x-ratelimit-reset-tokens', b'635ms'), (b'x-request-id', b'req_4b06a908ab29476fabae5758483193d2'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b0d5be8263091-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 16:02:17,225 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 16:02:17,225 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 16:02:17,237 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 16:02:17,237 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 16:02:17,237 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 16:02:17,237 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 07:02:17 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '3859', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '3891', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9946', 'x-ratelimit-remaining-tokens': '197883', 'x-ratelimit-reset-requests': '7m43.985s', 'x-ratelimit-reset-tokens': '635ms', 'x-request-id': 'req_4b06a908ab29476fabae5758483193d2', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b0d5be8263091-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 16:02:17,237 - openai._base_client - DEBUG - request_id: req_4b06a908ab29476fabae5758483193d2
2025-10-05 16:02:17,237 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: agent_selection | Model: gpt-4o-mini-2024-07-18 | Tokens: 2544 (prompt: 2366, completion: 178)
2025-10-05 16:02:17,237 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM agent selection reasoning: 1단계: 주택담보대출 조건 확인과 한도 계산이 필요하므로 대출 정보 검색과 데이터 분석이 필요합니다. 2단계: 중간 복잡도로, 대출 조건을 확인한 후 한도를 계산해야 합니다. 3단계: 대출 조건을 검색한 후 그 데이터를 바탕으로 한도 계산을 진행해야 하므로 순차적 의존성이 있습니다. 4단계: 단순 검색만으로는 한도 계산이 불가능하므로, search_team과 analysis_team이 모두 필요합니다.
2025-10-05 16:02:17,237 - app.service_agent.cognitive_agents.planning_agent - INFO - ✅ Primary LLM selected agents: ['search_team', 'analysis_team']
2025-10-05 16:02:17,238 - app.service_agent.cognitive_agents.planning_agent - INFO - Intent analyzed: 대출상담 (confidence: 0.90)
2025-10-05 16:02:17,238 - app.service_agent.cognitive_agents.query_decomposer - INFO - Decomposing query: 주택담보대출 조건 확인하고 한도 계산해줘...
2025-10-05 16:02:17,238 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-010f2225-2ed4-491a-a194-b0d22b8e74e5', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 질문 분해 전문가입니다.\n복잡한 사용자 질문을 독립적으로 처리 가능한 작업 단위로 분해하는 것이 목표입니다.\n\n## Chain-of-Thought 분해 프로세스:\n\n### 1단계: 복합 질문 여부 판단\n- 단순 정보 조회만 필요한가? → is_compound: false\n- **다음 중 하나라도 해당하면 is_compound: true**:\n  * "그리고", "그 다음", "한 후" 같은 연결어로 여러 요청 연결\n  * 명시적으로 2개 이상의 작업 요청 (예: "시세 확인하고 대출 계산해줘")\n  * 상황 설명 + 해결책 요청 (예: "3억→10억 올려달래. 어떻게 해야 해?")\n  * 해결책을 위해 여러 단계 처리 필요 (검색 → 분석 → 제안)\n\n### 2단계: 필요 작업 식별\n- 정보 수집이 필요한가? → search 작업\n- 평가/판단이 필요한가? → analysis 작업\n- 문서 생성이 필요한가? → generation 작업\n- **해결책 요청**인가? → search + analysis (최소 2개)\n\n### 3단계: 작업 순서 결정\n- 독립적 작업: 병렬 가능\n- 이전 결과 필요: 순차 실행 (depends_on 설정)\n\n## 중요 원칙:\n1. 각 작업은 하나의 명확한 목표를 가져야 합니다\n2. 작업 간 의존성을 명확히 파악해야 합니다\n3. 병렬 처리 가능한 작업은 구분해야 합니다\n4. **주의**: "어떻게 해야", "방법 알려줘" 같은 해결책 요청은 복합 질문!\n\n## 작업 유형 (type):\n- search: 정보 검색 (법률, 시세, 대출 정보 등)\n- analysis: 데이터 분석 (리스크 평가, 시장 분석 등)\n- generation: 문서 생성 (계약서 작성 등)\n- review: 검토/평가 (계약서 검토, 조건 확인 등)\n- calculation: 계산/산출 (대출 한도, 세금 등)\n- comparison: 비교 분석 (여러 옵션 비교)\n\n## 담당 팀 (agent):\n- search_team: 법률, 시세, 대출 정보 검색\n- analysis_team: 데이터 분석, 리스크 평가, 계산\n- document_team: 문서 생성, 계약서 작성\n\n## 학습 예시:\n\n### 예시 1: 복합 질문 (순차적)\n질문: "강남구 아파트 시세 확인하고 대출 가능 금액 계산해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "강남구 아파트 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "대출 가능 금액 계산",\n            "type": "calculation",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "required_data": {"price": "task_0.result.price"},\n            "estimated_time": 15\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "시세 정보가 있어야 대출 금액 계산이 가능하므로 순차 실행"\n}\n```\n\n### 예시 2: 복합 질문 (병렬 가능)\n질문: "이 지역 전세 시세와 매매 시세 모두 알려주고 비교 분석해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "전세 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "매매 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "전세/매매 시세 비교 분석",\n            "type": "comparison",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0", "task_1"],\n            "required_data": {\n                "lease_price": "task_0.result",\n                "sale_price": "task_1.result"\n            },\n            "estimated_time": 25\n        }\n    ],\n    "execution_mode": "mixed",\n    "parallel_groups": [["task_0", "task_1"], ["task_2"]],\n    "reasoning": "시세 조회는 독립적이므로 병렬 처리, 비교는 두 결과 필요"\n}\n```\n\n### 예시 3: 복합 질문 (3단계 이상)\n질문: "이 계약서 검토해서 위험한 부분 찾고 수정안 만들어서 최종 계약서 작성해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "계약서 내용 전체 검토",\n            "type": "review",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 30\n        },\n        {\n            "description": "위험 요소 및 문제점 분석",\n            "type": "analysis",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "estimated_time": 25\n        },\n        {\n            "description": "수정안 제안 생성",\n            "type": "generation",\n            "agent": "document_team",\n            "priority": 3,\n            "depends_on": ["task_1"],\n            "estimated_time": 20\n        },\n        {\n            "description": "최종 계약서 작성",\n            "type": "generation",\n            "agent": "document_team",\n            "priority": 4,\n            "depends_on": ["task_2"],\n            "estimated_time": 30\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "각 단계가 이전 결과에 의존하므로 순차 실행 필요"\n}\n```\n\n### 예시 4: 단순 질문 (분해 불필요)\n질문: "전세금 인상률 상한이 얼마야?"\n분해:\n```json\n{\n    "is_compound": false,\n    "sub_tasks": [\n        {\n            "description": "전세금 인상률 상한 법률 정보 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 15\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "단일 정보 조회 요청으로 분해 불필요"\n}\n```\n\n### 예시 5: 조건부 실행\n질문: "이 물건 시세 확인하고 적정가면 대출 상담도 받고 싶어"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "물건 시세 조회 및 적정성 평가",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 25\n        },\n        {\n            "description": "대출 상담 정보 제공",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "optional": true,\n            "context": {"condition": "if_reasonable_price"},\n            "estimated_time": 20\n        }\n    ],\n    "execution_mode": "conditional",\n    "reasoning": "시세 확인 결과에 따라 대출 상담 진행 여부 결정"\n}\n```\n\n### 예시 6: 상황 설명 + 해결책 요청 (핵심 패턴!)\n질문: "집주인이 전세금 3억을 10억으로 올려달래. 법적으로 어떻게 해야 해?"\n**CoT 분석**:\n1. 질문 분석: 상황 설명 + 해결책 요청\n2. 연결어: 없지만, "어떻게 해야" = 해결책 요청\n3. 의존성: 법률 확인 → 상황 분석 → 대응 방안\n4. 복합 여부: **YES** (해결책을 위해 여러 단계 필요)\n\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "전세금 인상 한도 관련 법률 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "3억→10억 인상의 법적 타당성 및 적정성 분석",\n            "type": "analysis",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "required_data": {"legal_limit": "task_0.result", "current": 300000000, "requested": 1000000000},\n            "estimated_time": 25\n        },\n        {\n            "description": "구체적 대응 방안 및 해결책 제시",\n            "type": "analysis",\n            "agent": "analysis_team",\n            "priority": 3,\n            "depends_on": ["task_1"],\n            "estimated_time": 20\n        }\n    ],\n    "execution_mode": "sequential",\n    "confidence": 0.95,\n    "reasoning": "상황 설명+해결책 요청 패턴. \'어떻게 해야\'는 단순 정보 조회가 아닌 종합 해결책 필요. 법률 조회 → 상황 분석 → 해결책 제시 3단계 순차 처리"\n}\n```\n\n## Chain-of-Thought 프로세스:\n\n1. **질문 분석**: 어떤 정보나 작업을 요구하는가?\n2. **연결어 확인**: "그리고", "또한", "해서", "한 후" 등이 있는가?\n3. **의존성 파악**: 어떤 작업이 다른 작업의 결과를 필요로 하는가?\n4. **병렬성 판단**: 독립적으로 실행 가능한 작업이 있는가?\n5. **최적화**: 불필요한 분해는 없는가?\n\n## 응답 형식 (JSON):\n\n{\n    "is_compound": true/false,\n    "sub_tasks": [\n        {\n            "description": "작업 설명",\n            "type": "작업 유형",\n            "agent": "담당 팀",\n            "priority": 우선순위 (1이 가장 높음),\n            "depends_on": ["선행 작업 ID 리스트"],\n            "required_data": {"필요한 데이터 매핑"},\n            "estimated_time": 예상 소요 시간(초),\n            "optional": true/false,\n            "context": {"추가 컨텍스트"}\n        }\n    ],\n    "execution_mode": "sequential/parallel/mixed/conditional",\n    "parallel_groups": [["병렬 실행 가능한 작업 ID 그룹"]],\n    "confidence": 0.0-1.0,\n    "reasoning": "분해 결정의 이유와 근거"\n}\n\n## 분해 가이드라인:\n\n1. **분해가 필요한 경우**:\n   - 여러 종류의 정보를 요청하는 경우\n   - 순차적 처리가 필요한 경우 (A의 결과로 B 수행)\n   - 서로 다른 팀의 전문성이 필요한 경우\n\n2. **분해가 불필요한 경우**:\n   - 단일 정보 조회\n   - 단순한 질문-답변\n   - 하나의 팀에서 완전히 처리 가능한 경우\n\n3. **병렬 처리 기준**:\n   - 서로 독립적인 정보 조회\n   - 의존성이 없는 분석 작업\n   - 동시에 진행해도 충돌하지 않는 작업\n\n4. **우선순위 설정**:\n   - 의존성이 없는 작업: priority 1\n   - 1차 의존 작업: priority 2\n   - 2차 의존 작업: priority 3\n   - 이런 식으로 증가\n\n현재 의도: 대출상담\n추출된 엔티티: {\'loan_type\': \'주택담보대출\', \'action_verbs\': [\'확인\', \'계산\']}\n\n분석할 질문: 주택담보대출 조건 확인하고 한도 계산해줘'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 16:02:17,238 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 16:02:17,238 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 16:02:17,239 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 16:02:17,239 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 16:02:17,239 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 16:02:17,239 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 16:02:20,701 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 07:02:20 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'3256'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'3279'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9945'), (b'x-ratelimit-remaining-tokens', b'197318'), (b'x-ratelimit-reset-requests', b'7m48.853s'), (b'x-ratelimit-reset-tokens', b'804ms'), (b'x-request-id', b'req_c0edd17a6d244455938f02a6e92c4ac7'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b0d759bc63091-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 16:02:20,702 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 16:02:20,702 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 16:02:20,703 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 16:02:20,703 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 16:02:20,703 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 16:02:20,703 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 07:02:20 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '3256', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '3279', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9945', 'x-ratelimit-remaining-tokens': '197318', 'x-ratelimit-reset-requests': '7m48.853s', 'x-ratelimit-reset-tokens': '804ms', 'x-request-id': 'req_c0edd17a6d244455938f02a6e92c4ac7', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b0d759bc63091-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 16:02:20,703 - openai._base_client - DEBUG - request_id: req_c0edd17a6d244455938f02a6e92c4ac7
2025-10-05 16:02:20,703 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: query_decomposition | Model: gpt-4o-mini-2024-07-18 | Tokens: 2901 (prompt: 2717, completion: 184)
2025-10-05 16:02:20,703 - app.service_agent.cognitive_agents.query_decomposer - INFO - Successfully decomposed into 2 tasks
2025-10-05 16:02:20,703 - app.service_agent.cognitive_agents.planning_agent - INFO - Query decomposed into 2 tasks
2025-10-05 16:02:20,704 - app.service_agent.cognitive_agents.planning_agent - WARNING - Plan validation errors: ["Agent 'search_team' not found in registry", "Agent 'analysis_team' depends on missing 'task_0'", "Agent 'analysis_team' not found in registry"]
2025-10-05 16:02:20,704 - app.service_agent.cognitive_agents.planning_agent - INFO - Optimizing execution plan
2025-10-05 16:02:20,704 - app.service_agent.cognitive_agents.planning_agent - INFO - Comprehensive plan created: Intent: 대출상담 (confidence: 0.90) | Strategy: sequential | Agents: search_team, analysis_team | Estimated time: 35.0s
2025-10-05 16:02:20,704 - __main__ - INFO -   전략: sequential
2025-10-05 16:02:20,704 - __main__ - INFO -   단계 수: 2
2025-10-05 16:02:20,704 - __main__ - INFO - 
✓ 테스트 성공 (소요시간: 24.32초)
2025-10-05 16:02:20,704 - __main__ - INFO - 
================================================================================
2025-10-05 16:02:20,704 - __main__ - INFO - [32] 복합 질문 테스트: D012
2025-10-05 16:02:20,704 - __main__ - INFO - 질문: 계약 갱신 청구권 확인하고 행사 방법 알려줘
2025-10-05 16:02:20,704 - __main__ - INFO - ================================================================================
2025-10-05 16:02:20,704 - __main__ - INFO - 
[Step 1] Intent 분석...
2025-10-05 16:02:20,704 - app.service_agent.cognitive_agents.planning_agent - INFO - Analyzing intent for query: 계약 갱신 청구권 확인하고 행사 방법 알려줘...
2025-10-05 16:02:20,704 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-11867d08-06d9-4794-8a75-0bcbf6dac724', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 의도 분석 전문가입니다.\n사용자의 질문을 정확히 이해하고, 어떤 종류의 도움이 필요한지 분류해야 합니다.\n\n## Chain-of-Thought 분석 프로세스\n\n질문을 분석할 때 다음 단계를 **순서대로** 따르세요:\n\n### 1단계: 질문 구조 파악\n- 단순 정보 요청인가? (예: "~이 뭐야?", "~알려줘")\n- 상황 설명이 포함되어 있는가? (배경, 현재 상태)\n- 구체적 수치나 데이터가 있는가? (금액, 비율, 기간 등)\n- 문제 해결을 요구하는가? (예: "어떻게 해야 해?", "방법 알려줘")\n\n### 2단계: 요청 유형 판단\n- **정보 확인형**: 사실, 개념, 규정 확인 → 검색만으로 충분\n- **평가/판단형**: "괜찮아?", "적절해?", "문제있어?" → 검색 + 분석 필요\n- **해결책 요청형**: "어떻게?", "방법?", "대처?" → 검색 + 분석 + 제안 필요\n- **비교/선택형**: "A vs B", "어느게 나아?" → 검색 + 분석(비교) 필요\n\n### 3단계: 복잡도 평가\n- **저**: 단일 개념/사실 확인 (예: "전세금 인상률 한도?")\n- **중**: 특정 상황 + 판단 (예: "3억을 5억으로 올려달래. 가능해?")\n- **고**: 복잡한 상황 + 여러 조건 + 해결책 (예: "10년 거주, 3억→10억 요구. 어떻게 해야 해?")\n\n### 4단계: 필요한 처리 결정\n- **검색만**: 정보 확인형 + 저복잡도\n- **검색+분석**: 평가/판단형 OR 중복잡도 OR 수치 비교 포함\n- **종합처리**: 해결책 요청형 OR 고복잡도 OR 여러 조건 동시 고려\n\n### 5단계: 최종 검증\n- 선택한 의도로 사용자 질문에 완전히 답변 가능한가?\n- 단순 정보 제공으로 끝나는가, 아니면 추가 분석/판단이 필요한가?\n- 상황 설명이 있으면서 "해결", "방법", "어떻게" 등이 있으면 → COMPREHENSIVE 고려\n\n## 중요: 복합 질문 처리\n복합적인 질문(여러 의도가 섞인 질문)의 경우, 가장 핵심적인 의도를 파악하되,\nsub_intents 필드에 부가적인 의도들도 함께 기록해주세요.\n\n**특히 주의**:\n- 법률 키워드가 있어도, "해결방법", "어떻게 해야" 같은 표현이 있으면 단순 LEGAL_CONSULT가 아닐 수 있음\n- 구체적 상황(금액, 기간 등) + 해결책 요구 = COMPREHENSIVE 또는 복합 의도로 분류\n\n## 분류 카테고리 설명:\n\n1. **LEGAL_CONSULT (법률상담)**\n   - 설명: 부동산 관련 법률, 권리, 의무에 대한 질문\n   - 예시:\n     * 단순: "전세금 5% 인상이 가능한가요?", "임대차계약 갱신 거부할 수 있나요?"\n     * 복합: "전세금 인상 가능한지 확인하고 법적 근거도 알려주세요"\n   - 키워드: 법, 전세, 임대, 보증금, 계약, 권리, 의무, 갱신, 임차인, 임대인, 법률, 규정, 조항\n   - 필요한 처리: 법률 데이터베이스 검색, 관련 법조항 찾기\n\n2. **MARKET_INQUIRY (시세조회)**\n   - 설명: 부동산 시장 가격, 시세, 거래 동향에 대한 질문\n   - 예시:\n     * 단순: "강남구 아파트 전세 시세 알려주세요", "서초동 매매가 얼마나 올랐나요?"\n     * 복합: "강남구 시세 확인하고 대출 가능 금액도 계산해줘"\n   - 키워드: 시세, 가격, 매매가, 전세가, 월세, 시장, 동향, 평균, 지역명, 상승률, 하락률\n   - 필요한 처리: 부동산 시세 데이터 조회, 지역별 가격 분석\n\n3. **LOAN_CONSULT (대출상담)**\n   - 설명: 주택담보대출, 전세자금대출 등 금융 관련 질문\n   - 예시:\n     * 단순: "전세자금대출 한도가 얼마인가요?", "LTV가 뭔가요?"\n     * 복합: "대출 한도 확인하고 금리 비교도 해주세요"\n   - 키워드: 대출, 금리, 한도, 조건, 상환, LTV, DTI, DSR, 담보, 금융, 은행\n   - 필요한 처리: 대출 상품 조회, 금리 정보 검색, 한도 계산\n\n4. **CONTRACT_CREATION (계약서작성)**\n   - 설명: 새로운 계약서나 문서를 작성해달라는 요청\n   - 예시:\n     * 단순: "임대차계약서 작성해주세요", "전세계약서 초안 만들어주세요"\n     * 복합: "계약서 작성하고 주의사항도 검토해주세요"\n   - 키워드: 작성, 만들, 생성, 초안, 계약서, 문서, 양식\n   - 필요한 처리: 문서 생성 에이전트 호출, 템플릿 기반 작성\n\n5. **CONTRACT_REVIEW (계약서검토)**\n   - 설명: 기존 계약서나 문서를 검토해달라는 요청\n   - 예시:\n     * 단순: "이 계약서 검토해주세요", "특약사항 문제없나요?"\n     * 복합: "계약서 검토하고 수정사항도 제안해주세요"\n   - 키워드: 검토, 확인, 점검, 리뷰, 분석해, 살펴봐, 체크\n   - 필요한 처리: 문서 분석, 위험 요소 식별, 개선사항 제안\n\n6. **COMPREHENSIVE (종합분석)**\n   - 설명: 여러 측면을 종합적으로 분석해달라는 요청, 또는 복잡한 상황에 대한 해결책 요청\n   - 예시:\n     * 단순: "이 물건 전체적으로 분석해주세요"\n     * 복합: "시세, 법률, 대출 모두 검토해서 종합 의견 주세요"\n     * 해결형: "10년 거주했는데 전세금 3억을 10억으로 올려달래. 어떻게 해야 해?"\n     * 상황+해결: "집주인이 계약 갱신 거부했어. 법적으로 어떻게 대응해야 할까?"\n   - 키워드: 종합, 전체, 모든, 전반적, 종합적, 평가, 분석, 어떻게, 방법, 해결, 대처\n   - 패턴: 구체적 상황 설명 + "어떻게/방법/해결" 요청\n   - 필요한 처리: 다중 데이터 소스 통합 분석, 상황 평가, 해결책 제시\n\n7. **RISK_ANALYSIS (리스크분석)**\n   - 설명: 위험 요소나 주의사항에 대한 질문\n   - 예시:\n     * 단순: "이 계약 위험한가요?", "주의할 점 알려주세요"\n     * 복합: "리스크 분석하고 대안도 제시해주세요"\n   - 키워드: 위험, 리스크, 주의, 문제점, 조심, 걱정, 우려\n   - 필요한 처리: 위험 요소 분석, 주의사항 추출\n\n8. **UNCLEAR (불분명)**\n   - 설명: 의도를 명확히 파악하기 어려운 질문\n   - 예시: "이거 좀 봐주세요", "어떻게 해야 할까요?", "도와주세요"\n   - 처리: 추가 질문으로 의도 명확화 필요\n\n9. **IRRELEVANT (무관)**\n   - 설명: 부동산과 전혀 관련 없는 질문\n   - 예시: "날씨 어때?", "저녁 뭐 먹지?", "주식 추천해줘"\n   - 처리: 부동산 관련 질문을 유도\n\n## 복합 질문 예시와 분석 (CoT 적용):\n\n### 예시 1: "강남구 아파트 시세 알려주고 전세자금대출 가능한지도 확인해줘"\n**CoT 분석**:\n1. 구조: 두 개의 요청 ("시세" + "대출")\n2. 유형: 정보 확인형 (둘 다)\n3. 복잡도: 중 (두 가지 독립적 조회)\n4. 필요 처리: 검색 + 계산/분석\n\n**결론**:\n- 주 의도: MARKET_INQUIRY (시세 조회가 먼저 필요)\n- 부가 의도: LOAN_CONSULT (대출 확인)\n- 분해: ["강남구 아파트 시세 조회", "전세자금대출 가능 여부 확인"]\n\n### 예시 2: "이 계약서 검토해서 위험한 부분 있는지 알려주고 수정 제안도 해줘"\n**CoT 분석**:\n1. 구조: 검토 + 위험 평가 + 수정안\n2. 유형: 평가/판단형 + 해결책 요청형\n3. 복잡도: 고 (3단계 처리)\n4. 필요 처리: 검토 + 분석 + 문서 생성\n\n**결론**:\n- 주 의도: CONTRACT_REVIEW (계약서 검토)\n- 부가 의도: RISK_ANALYSIS (위험 분석)\n- 분해: ["계약서 전체 검토", "위험 요소 식별", "수정사항 제안"]\n\n### 예시 3: "집주인이 짜증나, 10년 살았는데 전세금 3억을 10억으로 올려달래. 법적으로 해결방법 알려줘"\n**CoT 분석**:\n1. 구조: 상황 설명 (10년 거주, 3억→10억) + 해결책 요청\n2. 유형: 해결책 요청형 (단순 정보 X)\n3. 복잡도: 고 (구체적 상황 + 수치 비교 + 법률 + 대응방안)\n4. 필요 처리: 법률 검색 + 상황 분석 + 해결책 제시\n\n**결론**:\n- 주 의도: COMPREHENSIVE (복잡한 상황에 대한 종합 해결)\n- 부가 의도: LEGAL_CONSULT, RISK_ANALYSIS\n- 분해: ["전세금 인상 한도 법률 조회", "3억→10억 인상의 타당성 분석", "구체적 대응 방안 제시"]\n- **이유**: "법적으로"라는 키워드가 있지만, 단순 법률 확인이 아니라 구체적 상황에 대한 해결책을 요구하므로 COMPREHENSIVE\n\n### 예시 4: "전세금 인상률 상한이 얼마야?"\n**CoT 분석**:\n1. 구조: 단순 사실 확인\n2. 유형: 정보 확인형\n3. 복잡도: 저 (단일 개념)\n4. 필요 처리: 검색만\n\n**결론**:\n- 주 의도: LEGAL_CONSULT (법률 정보 조회)\n- 부가 의도: 없음\n- 분해: 필요 없음\n\n## 응답 형식 (JSON 형식으로 응답):\n\n```json\n{\n    "intent": "LEGAL_CONSULT",\n    "confidence": 0.9,\n    "keywords": ["전세금", "인상", "제한"],\n    "sub_intents": [],\n    "is_compound": false,\n    "decomposed_tasks": [],\n    "entities": {\n        "location": "강남구",\n        "price": "5억",\n        "contract_type": "전세",\n        "date": "2024년",\n        "area": "84㎡",\n        "action_verbs": ["확인", "검토"]\n    },\n    "reasoning": "전세금 인상에 대한 법률 질문이므로 LEGAL_CONSULT로 분류"\n}\n```\n\n응답 규칙:\n- intent: 위 9개 카테고리 중 하나 (대문자_언더스코어 형식)\n- confidence: 0.0~1.0 (0.8 이상이면 매우 확실, 0.5 미만이면 불확실)\n- keywords: 추출된 주요 키워드 목록\n- sub_intents: 복합 질문일 경우 부가적인 의도들\n- is_compound: 복합 질문 여부 (true/false)\n- decomposed_tasks: 복합 질문을 분해한 개별 작업들\n- entities: 추출된 엔티티 정보\n- reasoning: **반드시 CoT 5단계를 거쳐 분석한 과정을 포함** (구조 파악 → 유형 판단 → 복잡도 평가 → 필요 처리 → 최종 검증)\n\n## reasoning 작성 예시:\n"1단계(구조): 상황 설명(10년 거주, 3억→10억) + 해결책 요청 포함.\n2단계(유형): 해결책 요청형 - 단순 정보가 아닌 대응방안 필요.\n3단계(복잡도): 고 - 구체적 수치 비교와 복잡한 상황.\n4단계(처리): 법률 검색 + 상황 분석 + 해결책 제시 필요.\n5단계(검증): LEGAL_CONSULT만으로는 불충분, 종합적 분석 필요 → COMPREHENSIVE 선택"\n\n## 판단 가이드:\n- 여러 의도가 섞여있다면, 가장 주된 의도를 intent에, 나머지를 sub_intents에 기록\n- "그리고", "또한", "함께", "같이" 등의 연결어가 있으면 복합 질문일 가능성 높음\n- 법률 관련 키워드가 있으면 LEGAL_CONSULT 우선\n- 가격/시세 언급이 명확하면 MARKET_INQUIRY\n- 계약서라는 단어와 함께 "작성/만들기"가 있으면 CONTRACT_CREATION\n- 계약서라는 단어와 함께 "검토/확인"이 있으면 CONTRACT_REVIEW\n- 불확실하면 confidence를 낮게 설정하고 UNCLEAR 선택\n- 복합 질문은 is_compound를 true로 설정하고 개별 작업으로 분해\n\n분석할 질문: 계약 갱신 청구권 확인하고 행사 방법 알려줘'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 16:02:20,705 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 16:02:20,705 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 16:02:20,705 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 16:02:20,705 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 16:02:20,705 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 16:02:20,705 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 16:02:25,907 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 07:02:25 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'4993'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'5011'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9945'), (b'x-ratelimit-remaining-tokens', b'197241'), (b'x-ratelimit-reset-requests', b'7m53.706s'), (b'x-ratelimit-reset-tokens', b'827ms'), (b'x-request-id', b'req_bd2dcdbd836b4b088746b4c13df05af2'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b0d8b4ab83091-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 16:02:25,908 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 16:02:25,908 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 16:02:25,915 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 16:02:25,915 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 16:02:25,915 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 16:02:25,915 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 07:02:25 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '4993', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '5011', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9945', 'x-ratelimit-remaining-tokens': '197241', 'x-ratelimit-reset-requests': '7m53.706s', 'x-ratelimit-reset-tokens': '827ms', 'x-request-id': 'req_bd2dcdbd836b4b088746b4c13df05af2', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b0d8b4ab83091-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 16:02:25,916 - openai._base_client - DEBUG - request_id: req_bd2dcdbd836b4b088746b4c13df05af2
2025-10-05 16:02:25,916 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: intent_analysis | Model: gpt-4o-mini-2024-07-18 | Tokens: 3447 (prompt: 3182, completion: 265)
2025-10-05 16:02:25,916 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM Intent Analysis Result: {'intent': 'COMPREHENSIVE', 'confidence': 0.85, 'keywords': ['계약', '갱신', '청구권', '행사', '방법'], 'sub_intents': ['LEGAL_CONSULT'], 'is_compound': True, 'decomposed_tasks': ['계약 갱신 청구권 확인', '갱신 청구권 행사 방법 안내'], 'entities': {'contract_type': '임대차계약', 'action_verbs': ['확인', '행사', '알려줘']}, 'reasoning': '1단계(구조): 계약 갱신 청구권 확인 + 행사 방법 요청 포함. 2단계(유형): 해결책 요청형 - 단순 정보가 아닌 구체적인 방법 필요. 3단계(복잡도): 중 - 법률적 요소와 구체적 방법이 결합된 요청. 4단계(처리): 법률 정보 검색 + 행사 방법 안내 필요. 5단계(검증): LEGAL_CONSULT만으로는 부족, 종합적 분석 필요 → COMPREHENSIVE 선택.'}
2025-10-05 16:02:25,916 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-41186e0e-33cc-47a9-8841-01a439dcea8b', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 Agent 선택 전문가입니다.\n사용자의 요청에 가장 적합한 Agent/Team을 선택하는 것이 목표입니다.\n\n## 현재 상황\n\n**사용자 질문:** 계약 갱신 청구권 확인하고 행사 방법 알려줘\n**분석된 의도:** 종합분석\n**추출된 키워드:** [\'계약\', \'갱신\', \'청구권\', \'행사\', \'방법\']\n\n## 사용 가능한 Agent/Team 정보\n\n{\'search_team\': {\'name\': \'search_team\', \'capabilities\': \'법률 검색, 부동산 시세 조회, 대출 상품 검색\', \'tools\': [\'legal_search\', \'market_data\', \'loan_data\'], \'use_cases\': [\'법률 상담\', \'시세 조회\', \'대출 정보\']}, \'analysis_team\': {\'name\': \'analysis_team\', \'capabilities\': \'데이터 분석, 리스크 평가, 인사이트 생성, 추천\', \'tools\': [\'data_analyzer\', \'risk_evaluator\'], \'use_cases\': [\'시장 분석\', \'리스크 평가\', \'투자 분석\']}, \'document_team\': {\'name\': \'document_team\', \'capabilities\': \'계약서 작성, 문서 생성, 문서 검토\', \'tools\': [\'document_generator\', \'contract_reviewer\'], \'use_cases\': [\'계약서 작성\', \'문서 검토\']}}\n\n## Agent 역할 및 상세 가이드\n\n### 1. search_team (검색 팀)\n- **주요 기능**: 정보 검색 및 데이터 수집\n- **전문 분야**:\n  * 법률 정보 검색 (전세법, 임대차보호법, 부동산 관련 법규)\n  * 부동산 시세 조회 (매매가, 전세가, 월세, 실거래가)\n  * 대출 상품 정보 검색 (금리, 한도, 조건)\n  * 지역 정보 및 인프라 조회\n- **도구**: legal_search, market_data, loan_data\n- **적합한 작업**: 정보 조회, 데이터 수집, 법률 확인, 시세 파악\n- **예시**:\n  * "전세금 5% 인상 가능한가요?"\n  * "강남구 아파트 전세 시세"\n  * "전세자금대출 한도 얼마?"\n\n### 2. analysis_team (분석 팀)\n- **주요 기능**: 데이터 분석 및 평가\n- **전문 분야**:\n  * 시장 동향 분석 (상승률, 하락률, 추세)\n  * 리스크 평가 (계약, 투자 위험도)\n  * 투자 수익률 계산 (ROI, 월세 수익률)\n  * 대출 한도 및 조건 분석 (LTV, DTI, DSR)\n  * 비교 분석 (지역별, 상품별)\n- **도구**: data_analyzer, risk_evaluator, calculator\n- **적합한 작업**: 데이터 분석, 리스크 평가, 계산, 비교, 예측\n- **의존성**: 보통 search_team의 데이터가 필요\n- **예시**:\n  * "이 지역 투자 가치 분석해줘"\n  * "계약 리스크 평가해줘"\n  * "대출 가능 금액 계산해줘"\n\n### 3. document_team (문서 팀)\n- **주요 기능**: 문서 생성 및 관리\n- **전문 분야**:\n  * 계약서 작성 (임대차, 매매, 전세)\n  * 문서 템플릿 관리\n  * 특약사항 생성\n  * 계약서 수정안 작성\n  * 법률 문서 검토\n- **도구**: document_generator, contract_template, contract_reviewer\n- **적합한 작업**: 문서 작성, 계약서 생성, 문서 수정, 검토\n- **예시**:\n  * "임대차계약서 작성해줘"\n  * "특약사항 추가해줘"\n  * "계약서 수정안 만들어줘"\n\n## Chain-of-Thought Agent 선택 프로세스\n\n다음 단계를 **순서대로** 따라 최적의 Agent 조합을 선택하세요:\n\n### 1단계: 질문 요구사항 파악\n- 단순 정보 조회인가? → search_team만 필요\n- 판단/평가가 필요한가? → search + analysis 필요\n- 해결책 제시가 필요한가? → search + analysis 필요\n- 문서 생성이 필요한가? → document_team 추가\n\n### 2단계: 작업 복잡도 판단\n- **단순** (검색만): "~이 뭐야?", "~알려줘" → search_team\n- **중간** (검색+판단): "~괜찮아?", "~적절해?" → search + analysis\n- **복잡** (종합 해결): 구체적 상황 + "어떻게 해야 해?" → search + analysis\n\n### 3단계: 의존성 분석\n- 독립적 작업: 단일 팀으로 처리 가능\n- 순차적 의존: 이전 결과 필요 → 여러 팀 순서대로\n- 병렬 가능: 동시 조회 가능 → coordination: "parallel"\n\n### 4단계: 최종 검증\n- 선택한 팀들로 질문에 완전히 답변 가능한가?\n- 불필요한 팀이 포함되지 않았는가?\n- 순서가 논리적인가? (데이터 흐름 고려)\n\n### 중요 원칙:\n- **법률 키워드만으로 판단하지 말 것**: "법적으로 어떻게 해야 해?" = 법률 검색 + 분석 필요\n- **상황 설명 + 해결책 요청** = 반드시 analysis_team 포함\n- **구체적 수치 비교** (3억→10억 같은) = analysis_team 필요\n\n## 의도별 Agent 매핑 가이드 (기본 가이드 - CoT로 조정 가능)\n\n| 의도 (Intent) | 기본 조합 | 상황별 조정 |\n|--------------|-----------|-------------|\n| LEGAL_CONSULT | ["search_team"] | 해결책 요청시 → + analysis_team |\n| MARKET_INQUIRY | ["search_team"] | 비교/평가시 → + analysis_team |\n| LOAN_CONSULT | ["search_team", "analysis_team"] | 계산 필수 |\n| CONTRACT_CREATION | ["document_team"] | 검토 후 작성 → search + document |\n| CONTRACT_REVIEW | ["search_team", "analysis_team"] | 법률 검토 + 리스크 분석 |\n| COMPREHENSIVE | ["search_team", "analysis_team"] | **항상 분석 포함** |\n| RISK_ANALYSIS | ["analysis_team"] | 법률 근거 필요시 → search + analysis |\n| UNCLEAR | ["search_team", "analysis_team"] | 포괄적 대응 |\n\n**중요**: 위 매핑은 **기본 가이드**일 뿐입니다.\n실제 질문의 내용(CoT 분석 결과)에 따라 조정하세요!\n\n## 복합 질문 처리 예시 (CoT 적용)\n\n### 예시 1: 순차적 처리\n질문: "강남구 시세 확인하고 투자 가치 분석해줘"\n**CoT 분석**:\n1. 요구사항: 시세 조회 + 투자 가치 평가\n2. 복잡도: 중간 (검색 + 분석)\n3. 의존성: 시세 데이터 → 투자 분석 (순차)\n4. 검증: search만으로는 "투자 가치 평가" 불가능\n\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "1단계: 시세 조회+투자 평가 필요. 2단계: 중간 복잡도. 3단계: 순차 의존. 4단계: search로 시세 수집 후 analysis로 투자 가치 평가 필요",\n    "coordination": "sequential"\n}\n```\n\n### 예시 2: 단순 정보 조회\n질문: "전세금 인상률 한도가 얼마야?"\n**CoT 분석**:\n1. 요구사항: 단순 사실 확인\n2. 복잡도: 낮음 (정보 확인형)\n3. 의존성: 없음\n4. 검증: search_team만으로 충분\n\n```json\n{\n    "selected_agents": ["search_team"],\n    "reasoning": "1단계: 단순 정보 조회. 2단계: 저복잡도. 3단계: 독립적. 4단계: 법률 검색만으로 답변 가능",\n    "coordination": "single"\n}\n```\n\n### 예시 3: 해결책 요청 (핵심 예시!)\n질문: "집주인이 전세금 3억을 10억으로 올려달래. 법적으로 어떻게 해야 해?"\n의도: COMPREHENSIVE\n**CoT 분석**:\n1. 요구사항: 상황 설명 + 해결책 요청\n2. 복잡도: 높음 (구체적 상황 + 수치 비교)\n3. 의존성: 법률 확인 → 상황 분석 → 해결책 제시\n4. 검증: "법적으로"만 보고 search만 선택하면 불충분! 해결책 제시 필요\n\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "1단계: 법률 + 상황 분석 + 해결책 필요. 2단계: 고복잡도(3억→10억 비정상). 3단계: 순차(법률 확인 후 타당성 분석). 4단계: \'어떻게 해야\' = 단순 법률 조회 아님, 분석 필수",\n    "coordination": "sequential",\n    "confidence": 0.95\n}\n```\n\n## 응답 형식 (JSON)\n\n```json\n{\n    "selected_agents": ["선택된 agent/team 목록"],\n    "reasoning": "선택 이유를 구체적으로 설명. 각 Agent의 역할과 처리 순서 포함",\n    "coordination": "single/sequential/parallel/pipeline",\n    "dependencies": {"agent2": ["agent1"]},\n    "estimated_time": 30,\n    "confidence": 0.9\n}\n```\n\n## 선택 가이드라인\n\n1. **최소 Agent 원칙**: 가능한 적은 수의 Agent로 처리\n2. **전문성 우선**: 해당 작업에 가장 전문적인 Agent 선택\n3. **효율성 고려**: 병렬 처리 가능한 경우 명시\n4. **의존성 관리**: 데이터 흐름을 고려한 순서 지정\n5. **폴백 전략**: 불확실한 경우 ["search_team", "analysis_team"] 조합\n\n## 주의사항\n\n- selected_agents는 반드시 배열 형태\n- Agent 이름은 정확히: "search_team", "analysis_team", "document_team"\n- 최소 1개, 최대 3개 선택\n- 순서는 실행 우선순위 (앞에 있을수록 먼저 실행)\n- reasoning은 상세하고 논리적으로 작성\n- coordination 필드로 실행 방식 명시\n- 복합 질문의 경우 의존성 관계 명확히 표시'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 16:02:25,918 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 16:02:25,918 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 16:02:25,918 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 16:02:25,918 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 16:02:25,918 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 16:02:25,918 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 16:02:29,801 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 07:02:29 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'3637'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'3675'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9944'), (b'x-ratelimit-remaining-tokens', b'197883'), (b'x-ratelimit-reset-requests', b'7m57.113s'), (b'x-ratelimit-reset-tokens', b'635ms'), (b'x-request-id', b'req_912b9afb730d4a5ebc4f90eba3101009'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b0dabddab3091-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 16:02:29,802 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 16:02:29,802 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 16:02:29,813 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 16:02:29,814 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 16:02:29,814 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 16:02:29,814 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 07:02:29 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '3637', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '3675', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9944', 'x-ratelimit-remaining-tokens': '197883', 'x-ratelimit-reset-requests': '7m57.113s', 'x-ratelimit-reset-tokens': '635ms', 'x-request-id': 'req_912b9afb730d4a5ebc4f90eba3101009', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b0dabddab3091-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 16:02:29,814 - openai._base_client - DEBUG - request_id: req_912b9afb730d4a5ebc4f90eba3101009
2025-10-05 16:02:29,814 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: agent_selection | Model: gpt-4o-mini-2024-07-18 | Tokens: 2534 (prompt: 2367, completion: 167)
2025-10-05 16:02:29,814 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM agent selection reasoning: 1단계: 계약 갱신 청구권 확인과 행사 방법에 대한 정보가 필요. 2단계: 법률 정보 검색이 필요하므로 search_team이 필요하고, 행사 방법에 대한 분석이 필요하므로 analysis_team도 필요. 3단계: 법률 확인 후 행사 방법을 분석해야 하므로 순차적 의존성이 존재. 4단계: 단순 법률 조회로는 충분하지 않으며, 분석이 필수적이므로 두 팀 모두 필요.
2025-10-05 16:02:29,814 - app.service_agent.cognitive_agents.planning_agent - INFO - ✅ Primary LLM selected agents: ['search_team', 'analysis_team']
2025-10-05 16:02:29,814 - __main__ - INFO -   의도: 종합분석
2025-10-05 16:02:29,814 - __main__ - INFO -   신뢰도: 0.85
2025-10-05 16:02:29,814 - __main__ - INFO -   추천 Agent: ['search_team', 'analysis_team']
2025-10-05 16:02:29,814 - __main__ - INFO - 
[Step 2] Query Decomposition...
2025-10-05 16:02:29,814 - app.service_agent.cognitive_agents.query_decomposer - INFO - Decomposing query: 계약 갱신 청구권 확인하고 행사 방법 알려줘...
2025-10-05 16:02:29,815 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-7a5b98e3-99c1-4c74-910b-82a8b0642626', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 질문 분해 전문가입니다.\n복잡한 사용자 질문을 독립적으로 처리 가능한 작업 단위로 분해하는 것이 목표입니다.\n\n## Chain-of-Thought 분해 프로세스:\n\n### 1단계: 복합 질문 여부 판단\n- 단순 정보 조회만 필요한가? → is_compound: false\n- **다음 중 하나라도 해당하면 is_compound: true**:\n  * "그리고", "그 다음", "한 후" 같은 연결어로 여러 요청 연결\n  * 명시적으로 2개 이상의 작업 요청 (예: "시세 확인하고 대출 계산해줘")\n  * 상황 설명 + 해결책 요청 (예: "3억→10억 올려달래. 어떻게 해야 해?")\n  * 해결책을 위해 여러 단계 처리 필요 (검색 → 분석 → 제안)\n\n### 2단계: 필요 작업 식별\n- 정보 수집이 필요한가? → search 작업\n- 평가/판단이 필요한가? → analysis 작업\n- 문서 생성이 필요한가? → generation 작업\n- **해결책 요청**인가? → search + analysis (최소 2개)\n\n### 3단계: 작업 순서 결정\n- 독립적 작업: 병렬 가능\n- 이전 결과 필요: 순차 실행 (depends_on 설정)\n\n## 중요 원칙:\n1. 각 작업은 하나의 명확한 목표를 가져야 합니다\n2. 작업 간 의존성을 명확히 파악해야 합니다\n3. 병렬 처리 가능한 작업은 구분해야 합니다\n4. **주의**: "어떻게 해야", "방법 알려줘" 같은 해결책 요청은 복합 질문!\n\n## 작업 유형 (type):\n- search: 정보 검색 (법률, 시세, 대출 정보 등)\n- analysis: 데이터 분석 (리스크 평가, 시장 분석 등)\n- generation: 문서 생성 (계약서 작성 등)\n- review: 검토/평가 (계약서 검토, 조건 확인 등)\n- calculation: 계산/산출 (대출 한도, 세금 등)\n- comparison: 비교 분석 (여러 옵션 비교)\n\n## 담당 팀 (agent):\n- search_team: 법률, 시세, 대출 정보 검색\n- analysis_team: 데이터 분석, 리스크 평가, 계산\n- document_team: 문서 생성, 계약서 작성\n\n## 학습 예시:\n\n### 예시 1: 복합 질문 (순차적)\n질문: "강남구 아파트 시세 확인하고 대출 가능 금액 계산해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "강남구 아파트 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "대출 가능 금액 계산",\n            "type": "calculation",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "required_data": {"price": "task_0.result.price"},\n            "estimated_time": 15\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "시세 정보가 있어야 대출 금액 계산이 가능하므로 순차 실행"\n}\n```\n\n### 예시 2: 복합 질문 (병렬 가능)\n질문: "이 지역 전세 시세와 매매 시세 모두 알려주고 비교 분석해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "전세 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "매매 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "전세/매매 시세 비교 분석",\n            "type": "comparison",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0", "task_1"],\n            "required_data": {\n                "lease_price": "task_0.result",\n                "sale_price": "task_1.result"\n            },\n            "estimated_time": 25\n        }\n    ],\n    "execution_mode": "mixed",\n    "parallel_groups": [["task_0", "task_1"], ["task_2"]],\n    "reasoning": "시세 조회는 독립적이므로 병렬 처리, 비교는 두 결과 필요"\n}\n```\n\n### 예시 3: 복합 질문 (3단계 이상)\n질문: "이 계약서 검토해서 위험한 부분 찾고 수정안 만들어서 최종 계약서 작성해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "계약서 내용 전체 검토",\n            "type": "review",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 30\n        },\n        {\n            "description": "위험 요소 및 문제점 분석",\n            "type": "analysis",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "estimated_time": 25\n        },\n        {\n            "description": "수정안 제안 생성",\n            "type": "generation",\n            "agent": "document_team",\n            "priority": 3,\n            "depends_on": ["task_1"],\n            "estimated_time": 20\n        },\n        {\n            "description": "최종 계약서 작성",\n            "type": "generation",\n            "agent": "document_team",\n            "priority": 4,\n            "depends_on": ["task_2"],\n            "estimated_time": 30\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "각 단계가 이전 결과에 의존하므로 순차 실행 필요"\n}\n```\n\n### 예시 4: 단순 질문 (분해 불필요)\n질문: "전세금 인상률 상한이 얼마야?"\n분해:\n```json\n{\n    "is_compound": false,\n    "sub_tasks": [\n        {\n            "description": "전세금 인상률 상한 법률 정보 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 15\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "단일 정보 조회 요청으로 분해 불필요"\n}\n```\n\n### 예시 5: 조건부 실행\n질문: "이 물건 시세 확인하고 적정가면 대출 상담도 받고 싶어"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "물건 시세 조회 및 적정성 평가",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 25\n        },\n        {\n            "description": "대출 상담 정보 제공",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "optional": true,\n            "context": {"condition": "if_reasonable_price"},\n            "estimated_time": 20\n        }\n    ],\n    "execution_mode": "conditional",\n    "reasoning": "시세 확인 결과에 따라 대출 상담 진행 여부 결정"\n}\n```\n\n### 예시 6: 상황 설명 + 해결책 요청 (핵심 패턴!)\n질문: "집주인이 전세금 3억을 10억으로 올려달래. 법적으로 어떻게 해야 해?"\n**CoT 분석**:\n1. 질문 분석: 상황 설명 + 해결책 요청\n2. 연결어: 없지만, "어떻게 해야" = 해결책 요청\n3. 의존성: 법률 확인 → 상황 분석 → 대응 방안\n4. 복합 여부: **YES** (해결책을 위해 여러 단계 필요)\n\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "전세금 인상 한도 관련 법률 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "3억→10억 인상의 법적 타당성 및 적정성 분석",\n            "type": "analysis",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "required_data": {"legal_limit": "task_0.result", "current": 300000000, "requested": 1000000000},\n            "estimated_time": 25\n        },\n        {\n            "description": "구체적 대응 방안 및 해결책 제시",\n            "type": "analysis",\n            "agent": "analysis_team",\n            "priority": 3,\n            "depends_on": ["task_1"],\n            "estimated_time": 20\n        }\n    ],\n    "execution_mode": "sequential",\n    "confidence": 0.95,\n    "reasoning": "상황 설명+해결책 요청 패턴. \'어떻게 해야\'는 단순 정보 조회가 아닌 종합 해결책 필요. 법률 조회 → 상황 분석 → 해결책 제시 3단계 순차 처리"\n}\n```\n\n## Chain-of-Thought 프로세스:\n\n1. **질문 분석**: 어떤 정보나 작업을 요구하는가?\n2. **연결어 확인**: "그리고", "또한", "해서", "한 후" 등이 있는가?\n3. **의존성 파악**: 어떤 작업이 다른 작업의 결과를 필요로 하는가?\n4. **병렬성 판단**: 독립적으로 실행 가능한 작업이 있는가?\n5. **최적화**: 불필요한 분해는 없는가?\n\n## 응답 형식 (JSON):\n\n{\n    "is_compound": true/false,\n    "sub_tasks": [\n        {\n            "description": "작업 설명",\n            "type": "작업 유형",\n            "agent": "담당 팀",\n            "priority": 우선순위 (1이 가장 높음),\n            "depends_on": ["선행 작업 ID 리스트"],\n            "required_data": {"필요한 데이터 매핑"},\n            "estimated_time": 예상 소요 시간(초),\n            "optional": true/false,\n            "context": {"추가 컨텍스트"}\n        }\n    ],\n    "execution_mode": "sequential/parallel/mixed/conditional",\n    "parallel_groups": [["병렬 실행 가능한 작업 ID 그룹"]],\n    "confidence": 0.0-1.0,\n    "reasoning": "분해 결정의 이유와 근거"\n}\n\n## 분해 가이드라인:\n\n1. **분해가 필요한 경우**:\n   - 여러 종류의 정보를 요청하는 경우\n   - 순차적 처리가 필요한 경우 (A의 결과로 B 수행)\n   - 서로 다른 팀의 전문성이 필요한 경우\n\n2. **분해가 불필요한 경우**:\n   - 단일 정보 조회\n   - 단순한 질문-답변\n   - 하나의 팀에서 완전히 처리 가능한 경우\n\n3. **병렬 처리 기준**:\n   - 서로 독립적인 정보 조회\n   - 의존성이 없는 분석 작업\n   - 동시에 진행해도 충돌하지 않는 작업\n\n4. **우선순위 설정**:\n   - 의존성이 없는 작업: priority 1\n   - 1차 의존 작업: priority 2\n   - 2차 의존 작업: priority 3\n   - 이런 식으로 증가\n\n현재 의도: 종합분석\n추출된 엔티티: None\n\n분석할 질문: 계약 갱신 청구권 확인하고 행사 방법 알려줘'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 16:02:29,815 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 16:02:29,815 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 16:02:29,816 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 16:02:29,816 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 16:02:29,816 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 16:02:29,816 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 16:02:33,335 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 07:02:33 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'3280'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'3320'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9944'), (b'x-ratelimit-remaining-tokens', b'197335'), (b'x-ratelimit-reset-requests', b'8m1.862s'), (b'x-ratelimit-reset-tokens', b'799ms'), (b'x-request-id', b'req_58051d2de2704b71bc326297b8be2d9d'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b0dc43a2c3091-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 16:02:33,335 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 16:02:33,335 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 16:02:33,352 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 16:02:33,353 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 16:02:33,353 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 16:02:33,353 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 07:02:33 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '3280', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '3320', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9944', 'x-ratelimit-remaining-tokens': '197335', 'x-ratelimit-reset-requests': '8m1.862s', 'x-ratelimit-reset-tokens': '799ms', 'x-request-id': 'req_58051d2de2704b71bc326297b8be2d9d', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b0dc43a2c3091-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 16:02:33,353 - openai._base_client - DEBUG - request_id: req_58051d2de2704b71bc326297b8be2d9d
2025-10-05 16:02:33,353 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: query_decomposition | Model: gpt-4o-mini-2024-07-18 | Tokens: 2889 (prompt: 2692, completion: 197)
2025-10-05 16:02:33,353 - app.service_agent.cognitive_agents.query_decomposer - INFO - Successfully decomposed into 2 tasks
2025-10-05 16:02:33,353 - __main__ - INFO -   복합 질문: True
2025-10-05 16:02:33,353 - __main__ - INFO -   작업 수: 2
2025-10-05 16:02:33,354 - __main__ - INFO -   실행 모드: sequential
2025-10-05 16:02:33,354 - __main__ - INFO -     - task_0: 계약 갱신 청구권 관련 법률 정보 조회 (search_team)
2025-10-05 16:02:33,354 - __main__ - INFO -     - task_1: 계약 갱신 청구권 행사 방법 분석 (analysis_team)
2025-10-05 16:02:33,354 - __main__ - INFO - 
[Step 3] Comprehensive Plan 생성...
2025-10-05 16:02:33,354 - app.service_agent.cognitive_agents.planning_agent - INFO - Creating comprehensive plan for query: 계약 갱신 청구권 확인하고 행사 방법 알려줘...
2025-10-05 16:02:33,354 - app.service_agent.cognitive_agents.planning_agent - INFO - Analyzing intent for query: 계약 갱신 청구권 확인하고 행사 방법 알려줘...
2025-10-05 16:02:33,354 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-f495a6f8-f133-42b6-8333-f658675dfe60', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 의도 분석 전문가입니다.\n사용자의 질문을 정확히 이해하고, 어떤 종류의 도움이 필요한지 분류해야 합니다.\n\n## Chain-of-Thought 분석 프로세스\n\n질문을 분석할 때 다음 단계를 **순서대로** 따르세요:\n\n### 1단계: 질문 구조 파악\n- 단순 정보 요청인가? (예: "~이 뭐야?", "~알려줘")\n- 상황 설명이 포함되어 있는가? (배경, 현재 상태)\n- 구체적 수치나 데이터가 있는가? (금액, 비율, 기간 등)\n- 문제 해결을 요구하는가? (예: "어떻게 해야 해?", "방법 알려줘")\n\n### 2단계: 요청 유형 판단\n- **정보 확인형**: 사실, 개념, 규정 확인 → 검색만으로 충분\n- **평가/판단형**: "괜찮아?", "적절해?", "문제있어?" → 검색 + 분석 필요\n- **해결책 요청형**: "어떻게?", "방법?", "대처?" → 검색 + 분석 + 제안 필요\n- **비교/선택형**: "A vs B", "어느게 나아?" → 검색 + 분석(비교) 필요\n\n### 3단계: 복잡도 평가\n- **저**: 단일 개념/사실 확인 (예: "전세금 인상률 한도?")\n- **중**: 특정 상황 + 판단 (예: "3억을 5억으로 올려달래. 가능해?")\n- **고**: 복잡한 상황 + 여러 조건 + 해결책 (예: "10년 거주, 3억→10억 요구. 어떻게 해야 해?")\n\n### 4단계: 필요한 처리 결정\n- **검색만**: 정보 확인형 + 저복잡도\n- **검색+분석**: 평가/판단형 OR 중복잡도 OR 수치 비교 포함\n- **종합처리**: 해결책 요청형 OR 고복잡도 OR 여러 조건 동시 고려\n\n### 5단계: 최종 검증\n- 선택한 의도로 사용자 질문에 완전히 답변 가능한가?\n- 단순 정보 제공으로 끝나는가, 아니면 추가 분석/판단이 필요한가?\n- 상황 설명이 있으면서 "해결", "방법", "어떻게" 등이 있으면 → COMPREHENSIVE 고려\n\n## 중요: 복합 질문 처리\n복합적인 질문(여러 의도가 섞인 질문)의 경우, 가장 핵심적인 의도를 파악하되,\nsub_intents 필드에 부가적인 의도들도 함께 기록해주세요.\n\n**특히 주의**:\n- 법률 키워드가 있어도, "해결방법", "어떻게 해야" 같은 표현이 있으면 단순 LEGAL_CONSULT가 아닐 수 있음\n- 구체적 상황(금액, 기간 등) + 해결책 요구 = COMPREHENSIVE 또는 복합 의도로 분류\n\n## 분류 카테고리 설명:\n\n1. **LEGAL_CONSULT (법률상담)**\n   - 설명: 부동산 관련 법률, 권리, 의무에 대한 질문\n   - 예시:\n     * 단순: "전세금 5% 인상이 가능한가요?", "임대차계약 갱신 거부할 수 있나요?"\n     * 복합: "전세금 인상 가능한지 확인하고 법적 근거도 알려주세요"\n   - 키워드: 법, 전세, 임대, 보증금, 계약, 권리, 의무, 갱신, 임차인, 임대인, 법률, 규정, 조항\n   - 필요한 처리: 법률 데이터베이스 검색, 관련 법조항 찾기\n\n2. **MARKET_INQUIRY (시세조회)**\n   - 설명: 부동산 시장 가격, 시세, 거래 동향에 대한 질문\n   - 예시:\n     * 단순: "강남구 아파트 전세 시세 알려주세요", "서초동 매매가 얼마나 올랐나요?"\n     * 복합: "강남구 시세 확인하고 대출 가능 금액도 계산해줘"\n   - 키워드: 시세, 가격, 매매가, 전세가, 월세, 시장, 동향, 평균, 지역명, 상승률, 하락률\n   - 필요한 처리: 부동산 시세 데이터 조회, 지역별 가격 분석\n\n3. **LOAN_CONSULT (대출상담)**\n   - 설명: 주택담보대출, 전세자금대출 등 금융 관련 질문\n   - 예시:\n     * 단순: "전세자금대출 한도가 얼마인가요?", "LTV가 뭔가요?"\n     * 복합: "대출 한도 확인하고 금리 비교도 해주세요"\n   - 키워드: 대출, 금리, 한도, 조건, 상환, LTV, DTI, DSR, 담보, 금융, 은행\n   - 필요한 처리: 대출 상품 조회, 금리 정보 검색, 한도 계산\n\n4. **CONTRACT_CREATION (계약서작성)**\n   - 설명: 새로운 계약서나 문서를 작성해달라는 요청\n   - 예시:\n     * 단순: "임대차계약서 작성해주세요", "전세계약서 초안 만들어주세요"\n     * 복합: "계약서 작성하고 주의사항도 검토해주세요"\n   - 키워드: 작성, 만들, 생성, 초안, 계약서, 문서, 양식\n   - 필요한 처리: 문서 생성 에이전트 호출, 템플릿 기반 작성\n\n5. **CONTRACT_REVIEW (계약서검토)**\n   - 설명: 기존 계약서나 문서를 검토해달라는 요청\n   - 예시:\n     * 단순: "이 계약서 검토해주세요", "특약사항 문제없나요?"\n     * 복합: "계약서 검토하고 수정사항도 제안해주세요"\n   - 키워드: 검토, 확인, 점검, 리뷰, 분석해, 살펴봐, 체크\n   - 필요한 처리: 문서 분석, 위험 요소 식별, 개선사항 제안\n\n6. **COMPREHENSIVE (종합분석)**\n   - 설명: 여러 측면을 종합적으로 분석해달라는 요청, 또는 복잡한 상황에 대한 해결책 요청\n   - 예시:\n     * 단순: "이 물건 전체적으로 분석해주세요"\n     * 복합: "시세, 법률, 대출 모두 검토해서 종합 의견 주세요"\n     * 해결형: "10년 거주했는데 전세금 3억을 10억으로 올려달래. 어떻게 해야 해?"\n     * 상황+해결: "집주인이 계약 갱신 거부했어. 법적으로 어떻게 대응해야 할까?"\n   - 키워드: 종합, 전체, 모든, 전반적, 종합적, 평가, 분석, 어떻게, 방법, 해결, 대처\n   - 패턴: 구체적 상황 설명 + "어떻게/방법/해결" 요청\n   - 필요한 처리: 다중 데이터 소스 통합 분석, 상황 평가, 해결책 제시\n\n7. **RISK_ANALYSIS (리스크분석)**\n   - 설명: 위험 요소나 주의사항에 대한 질문\n   - 예시:\n     * 단순: "이 계약 위험한가요?", "주의할 점 알려주세요"\n     * 복합: "리스크 분석하고 대안도 제시해주세요"\n   - 키워드: 위험, 리스크, 주의, 문제점, 조심, 걱정, 우려\n   - 필요한 처리: 위험 요소 분석, 주의사항 추출\n\n8. **UNCLEAR (불분명)**\n   - 설명: 의도를 명확히 파악하기 어려운 질문\n   - 예시: "이거 좀 봐주세요", "어떻게 해야 할까요?", "도와주세요"\n   - 처리: 추가 질문으로 의도 명확화 필요\n\n9. **IRRELEVANT (무관)**\n   - 설명: 부동산과 전혀 관련 없는 질문\n   - 예시: "날씨 어때?", "저녁 뭐 먹지?", "주식 추천해줘"\n   - 처리: 부동산 관련 질문을 유도\n\n## 복합 질문 예시와 분석 (CoT 적용):\n\n### 예시 1: "강남구 아파트 시세 알려주고 전세자금대출 가능한지도 확인해줘"\n**CoT 분석**:\n1. 구조: 두 개의 요청 ("시세" + "대출")\n2. 유형: 정보 확인형 (둘 다)\n3. 복잡도: 중 (두 가지 독립적 조회)\n4. 필요 처리: 검색 + 계산/분석\n\n**결론**:\n- 주 의도: MARKET_INQUIRY (시세 조회가 먼저 필요)\n- 부가 의도: LOAN_CONSULT (대출 확인)\n- 분해: ["강남구 아파트 시세 조회", "전세자금대출 가능 여부 확인"]\n\n### 예시 2: "이 계약서 검토해서 위험한 부분 있는지 알려주고 수정 제안도 해줘"\n**CoT 분석**:\n1. 구조: 검토 + 위험 평가 + 수정안\n2. 유형: 평가/판단형 + 해결책 요청형\n3. 복잡도: 고 (3단계 처리)\n4. 필요 처리: 검토 + 분석 + 문서 생성\n\n**결론**:\n- 주 의도: CONTRACT_REVIEW (계약서 검토)\n- 부가 의도: RISK_ANALYSIS (위험 분석)\n- 분해: ["계약서 전체 검토", "위험 요소 식별", "수정사항 제안"]\n\n### 예시 3: "집주인이 짜증나, 10년 살았는데 전세금 3억을 10억으로 올려달래. 법적으로 해결방법 알려줘"\n**CoT 분석**:\n1. 구조: 상황 설명 (10년 거주, 3억→10억) + 해결책 요청\n2. 유형: 해결책 요청형 (단순 정보 X)\n3. 복잡도: 고 (구체적 상황 + 수치 비교 + 법률 + 대응방안)\n4. 필요 처리: 법률 검색 + 상황 분석 + 해결책 제시\n\n**결론**:\n- 주 의도: COMPREHENSIVE (복잡한 상황에 대한 종합 해결)\n- 부가 의도: LEGAL_CONSULT, RISK_ANALYSIS\n- 분해: ["전세금 인상 한도 법률 조회", "3억→10억 인상의 타당성 분석", "구체적 대응 방안 제시"]\n- **이유**: "법적으로"라는 키워드가 있지만, 단순 법률 확인이 아니라 구체적 상황에 대한 해결책을 요구하므로 COMPREHENSIVE\n\n### 예시 4: "전세금 인상률 상한이 얼마야?"\n**CoT 분석**:\n1. 구조: 단순 사실 확인\n2. 유형: 정보 확인형\n3. 복잡도: 저 (단일 개념)\n4. 필요 처리: 검색만\n\n**결론**:\n- 주 의도: LEGAL_CONSULT (법률 정보 조회)\n- 부가 의도: 없음\n- 분해: 필요 없음\n\n## 응답 형식 (JSON 형식으로 응답):\n\n```json\n{\n    "intent": "LEGAL_CONSULT",\n    "confidence": 0.9,\n    "keywords": ["전세금", "인상", "제한"],\n    "sub_intents": [],\n    "is_compound": false,\n    "decomposed_tasks": [],\n    "entities": {\n        "location": "강남구",\n        "price": "5억",\n        "contract_type": "전세",\n        "date": "2024년",\n        "area": "84㎡",\n        "action_verbs": ["확인", "검토"]\n    },\n    "reasoning": "전세금 인상에 대한 법률 질문이므로 LEGAL_CONSULT로 분류"\n}\n```\n\n응답 규칙:\n- intent: 위 9개 카테고리 중 하나 (대문자_언더스코어 형식)\n- confidence: 0.0~1.0 (0.8 이상이면 매우 확실, 0.5 미만이면 불확실)\n- keywords: 추출된 주요 키워드 목록\n- sub_intents: 복합 질문일 경우 부가적인 의도들\n- is_compound: 복합 질문 여부 (true/false)\n- decomposed_tasks: 복합 질문을 분해한 개별 작업들\n- entities: 추출된 엔티티 정보\n- reasoning: **반드시 CoT 5단계를 거쳐 분석한 과정을 포함** (구조 파악 → 유형 판단 → 복잡도 평가 → 필요 처리 → 최종 검증)\n\n## reasoning 작성 예시:\n"1단계(구조): 상황 설명(10년 거주, 3억→10억) + 해결책 요청 포함.\n2단계(유형): 해결책 요청형 - 단순 정보가 아닌 대응방안 필요.\n3단계(복잡도): 고 - 구체적 수치 비교와 복잡한 상황.\n4단계(처리): 법률 검색 + 상황 분석 + 해결책 제시 필요.\n5단계(검증): LEGAL_CONSULT만으로는 불충분, 종합적 분석 필요 → COMPREHENSIVE 선택"\n\n## 판단 가이드:\n- 여러 의도가 섞여있다면, 가장 주된 의도를 intent에, 나머지를 sub_intents에 기록\n- "그리고", "또한", "함께", "같이" 등의 연결어가 있으면 복합 질문일 가능성 높음\n- 법률 관련 키워드가 있으면 LEGAL_CONSULT 우선\n- 가격/시세 언급이 명확하면 MARKET_INQUIRY\n- 계약서라는 단어와 함께 "작성/만들기"가 있으면 CONTRACT_CREATION\n- 계약서라는 단어와 함께 "검토/확인"이 있으면 CONTRACT_REVIEW\n- 불확실하면 confidence를 낮게 설정하고 UNCLEAR 선택\n- 복합 질문은 is_compound를 true로 설정하고 개별 작업으로 분해\n\n분석할 질문: 계약 갱신 청구권 확인하고 행사 방법 알려줘'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 16:02:33,354 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 16:02:33,354 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 16:02:33,355 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 16:02:33,355 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 16:02:33,355 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 16:02:33,355 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 16:02:40,258 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 07:02:40 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'6650'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'6672'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9943'), (b'x-ratelimit-remaining-tokens', b'197241'), (b'x-ratelimit-reset-requests', b'8m6.968s'), (b'x-ratelimit-reset-tokens', b'827ms'), (b'x-request-id', b'req_72be7ae96e104f8797dcd8369daca94d'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b0dda4c433091-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 16:02:40,258 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 16:02:40,258 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 16:02:40,259 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 16:02:40,259 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 16:02:40,259 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 16:02:40,259 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 07:02:40 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '6650', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '6672', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9943', 'x-ratelimit-remaining-tokens': '197241', 'x-ratelimit-reset-requests': '8m6.968s', 'x-ratelimit-reset-tokens': '827ms', 'x-request-id': 'req_72be7ae96e104f8797dcd8369daca94d', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b0dda4c433091-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 16:02:40,259 - openai._base_client - DEBUG - request_id: req_72be7ae96e104f8797dcd8369daca94d
2025-10-05 16:02:40,260 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: intent_analysis | Model: gpt-4o-mini-2024-07-18 | Tokens: 3431 (prompt: 3182, completion: 249)
2025-10-05 16:02:40,260 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM Intent Analysis Result: {'intent': 'COMPREHENSIVE', 'confidence': 0.85, 'keywords': ['계약', '갱신', '청구권', '행사', '방법'], 'sub_intents': ['LEGAL_CONSULT'], 'is_compound': True, 'decomposed_tasks': ['계약 갱신 청구권 확인', '행사 방법 안내'], 'entities': {'contract_type': '임대차계약', 'action_verbs': ['확인', '행사']}, 'reasoning': '1단계(구조): 계약 갱신 청구권 확인 + 행사 방법 요청 포함. 2단계(유형): 해결책 요청형 - 단순 정보가 아닌 구체적인 방법 필요. 3단계(복잡도): 중 - 법률적 확인과 구체적 방법 안내 필요. 4단계(처리): 법률 정보 검색 + 행사 방법 안내 필요. 5단계(검증): LEGAL_CONSULT만으로는 불충분, 종합적 분석 필요 → COMPREHENSIVE 선택'}
2025-10-05 16:02:40,260 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-28bcd0b7-2661-4324-8a17-23222473278a', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 Agent 선택 전문가입니다.\n사용자의 요청에 가장 적합한 Agent/Team을 선택하는 것이 목표입니다.\n\n## 현재 상황\n\n**사용자 질문:** 계약 갱신 청구권 확인하고 행사 방법 알려줘\n**분석된 의도:** 종합분석\n**추출된 키워드:** [\'계약\', \'갱신\', \'청구권\', \'행사\', \'방법\']\n\n## 사용 가능한 Agent/Team 정보\n\n{\'search_team\': {\'name\': \'search_team\', \'capabilities\': \'법률 검색, 부동산 시세 조회, 대출 상품 검색\', \'tools\': [\'legal_search\', \'market_data\', \'loan_data\'], \'use_cases\': [\'법률 상담\', \'시세 조회\', \'대출 정보\']}, \'analysis_team\': {\'name\': \'analysis_team\', \'capabilities\': \'데이터 분석, 리스크 평가, 인사이트 생성, 추천\', \'tools\': [\'data_analyzer\', \'risk_evaluator\'], \'use_cases\': [\'시장 분석\', \'리스크 평가\', \'투자 분석\']}, \'document_team\': {\'name\': \'document_team\', \'capabilities\': \'계약서 작성, 문서 생성, 문서 검토\', \'tools\': [\'document_generator\', \'contract_reviewer\'], \'use_cases\': [\'계약서 작성\', \'문서 검토\']}}\n\n## Agent 역할 및 상세 가이드\n\n### 1. search_team (검색 팀)\n- **주요 기능**: 정보 검색 및 데이터 수집\n- **전문 분야**:\n  * 법률 정보 검색 (전세법, 임대차보호법, 부동산 관련 법규)\n  * 부동산 시세 조회 (매매가, 전세가, 월세, 실거래가)\n  * 대출 상품 정보 검색 (금리, 한도, 조건)\n  * 지역 정보 및 인프라 조회\n- **도구**: legal_search, market_data, loan_data\n- **적합한 작업**: 정보 조회, 데이터 수집, 법률 확인, 시세 파악\n- **예시**:\n  * "전세금 5% 인상 가능한가요?"\n  * "강남구 아파트 전세 시세"\n  * "전세자금대출 한도 얼마?"\n\n### 2. analysis_team (분석 팀)\n- **주요 기능**: 데이터 분석 및 평가\n- **전문 분야**:\n  * 시장 동향 분석 (상승률, 하락률, 추세)\n  * 리스크 평가 (계약, 투자 위험도)\n  * 투자 수익률 계산 (ROI, 월세 수익률)\n  * 대출 한도 및 조건 분석 (LTV, DTI, DSR)\n  * 비교 분석 (지역별, 상품별)\n- **도구**: data_analyzer, risk_evaluator, calculator\n- **적합한 작업**: 데이터 분석, 리스크 평가, 계산, 비교, 예측\n- **의존성**: 보통 search_team의 데이터가 필요\n- **예시**:\n  * "이 지역 투자 가치 분석해줘"\n  * "계약 리스크 평가해줘"\n  * "대출 가능 금액 계산해줘"\n\n### 3. document_team (문서 팀)\n- **주요 기능**: 문서 생성 및 관리\n- **전문 분야**:\n  * 계약서 작성 (임대차, 매매, 전세)\n  * 문서 템플릿 관리\n  * 특약사항 생성\n  * 계약서 수정안 작성\n  * 법률 문서 검토\n- **도구**: document_generator, contract_template, contract_reviewer\n- **적합한 작업**: 문서 작성, 계약서 생성, 문서 수정, 검토\n- **예시**:\n  * "임대차계약서 작성해줘"\n  * "특약사항 추가해줘"\n  * "계약서 수정안 만들어줘"\n\n## Chain-of-Thought Agent 선택 프로세스\n\n다음 단계를 **순서대로** 따라 최적의 Agent 조합을 선택하세요:\n\n### 1단계: 질문 요구사항 파악\n- 단순 정보 조회인가? → search_team만 필요\n- 판단/평가가 필요한가? → search + analysis 필요\n- 해결책 제시가 필요한가? → search + analysis 필요\n- 문서 생성이 필요한가? → document_team 추가\n\n### 2단계: 작업 복잡도 판단\n- **단순** (검색만): "~이 뭐야?", "~알려줘" → search_team\n- **중간** (검색+판단): "~괜찮아?", "~적절해?" → search + analysis\n- **복잡** (종합 해결): 구체적 상황 + "어떻게 해야 해?" → search + analysis\n\n### 3단계: 의존성 분석\n- 독립적 작업: 단일 팀으로 처리 가능\n- 순차적 의존: 이전 결과 필요 → 여러 팀 순서대로\n- 병렬 가능: 동시 조회 가능 → coordination: "parallel"\n\n### 4단계: 최종 검증\n- 선택한 팀들로 질문에 완전히 답변 가능한가?\n- 불필요한 팀이 포함되지 않았는가?\n- 순서가 논리적인가? (데이터 흐름 고려)\n\n### 중요 원칙:\n- **법률 키워드만으로 판단하지 말 것**: "법적으로 어떻게 해야 해?" = 법률 검색 + 분석 필요\n- **상황 설명 + 해결책 요청** = 반드시 analysis_team 포함\n- **구체적 수치 비교** (3억→10억 같은) = analysis_team 필요\n\n## 의도별 Agent 매핑 가이드 (기본 가이드 - CoT로 조정 가능)\n\n| 의도 (Intent) | 기본 조합 | 상황별 조정 |\n|--------------|-----------|-------------|\n| LEGAL_CONSULT | ["search_team"] | 해결책 요청시 → + analysis_team |\n| MARKET_INQUIRY | ["search_team"] | 비교/평가시 → + analysis_team |\n| LOAN_CONSULT | ["search_team", "analysis_team"] | 계산 필수 |\n| CONTRACT_CREATION | ["document_team"] | 검토 후 작성 → search + document |\n| CONTRACT_REVIEW | ["search_team", "analysis_team"] | 법률 검토 + 리스크 분석 |\n| COMPREHENSIVE | ["search_team", "analysis_team"] | **항상 분석 포함** |\n| RISK_ANALYSIS | ["analysis_team"] | 법률 근거 필요시 → search + analysis |\n| UNCLEAR | ["search_team", "analysis_team"] | 포괄적 대응 |\n\n**중요**: 위 매핑은 **기본 가이드**일 뿐입니다.\n실제 질문의 내용(CoT 분석 결과)에 따라 조정하세요!\n\n## 복합 질문 처리 예시 (CoT 적용)\n\n### 예시 1: 순차적 처리\n질문: "강남구 시세 확인하고 투자 가치 분석해줘"\n**CoT 분석**:\n1. 요구사항: 시세 조회 + 투자 가치 평가\n2. 복잡도: 중간 (검색 + 분석)\n3. 의존성: 시세 데이터 → 투자 분석 (순차)\n4. 검증: search만으로는 "투자 가치 평가" 불가능\n\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "1단계: 시세 조회+투자 평가 필요. 2단계: 중간 복잡도. 3단계: 순차 의존. 4단계: search로 시세 수집 후 analysis로 투자 가치 평가 필요",\n    "coordination": "sequential"\n}\n```\n\n### 예시 2: 단순 정보 조회\n질문: "전세금 인상률 한도가 얼마야?"\n**CoT 분석**:\n1. 요구사항: 단순 사실 확인\n2. 복잡도: 낮음 (정보 확인형)\n3. 의존성: 없음\n4. 검증: search_team만으로 충분\n\n```json\n{\n    "selected_agents": ["search_team"],\n    "reasoning": "1단계: 단순 정보 조회. 2단계: 저복잡도. 3단계: 독립적. 4단계: 법률 검색만으로 답변 가능",\n    "coordination": "single"\n}\n```\n\n### 예시 3: 해결책 요청 (핵심 예시!)\n질문: "집주인이 전세금 3억을 10억으로 올려달래. 법적으로 어떻게 해야 해?"\n의도: COMPREHENSIVE\n**CoT 분석**:\n1. 요구사항: 상황 설명 + 해결책 요청\n2. 복잡도: 높음 (구체적 상황 + 수치 비교)\n3. 의존성: 법률 확인 → 상황 분석 → 해결책 제시\n4. 검증: "법적으로"만 보고 search만 선택하면 불충분! 해결책 제시 필요\n\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "1단계: 법률 + 상황 분석 + 해결책 필요. 2단계: 고복잡도(3억→10억 비정상). 3단계: 순차(법률 확인 후 타당성 분석). 4단계: \'어떻게 해야\' = 단순 법률 조회 아님, 분석 필수",\n    "coordination": "sequential",\n    "confidence": 0.95\n}\n```\n\n## 응답 형식 (JSON)\n\n```json\n{\n    "selected_agents": ["선택된 agent/team 목록"],\n    "reasoning": "선택 이유를 구체적으로 설명. 각 Agent의 역할과 처리 순서 포함",\n    "coordination": "single/sequential/parallel/pipeline",\n    "dependencies": {"agent2": ["agent1"]},\n    "estimated_time": 30,\n    "confidence": 0.9\n}\n```\n\n## 선택 가이드라인\n\n1. **최소 Agent 원칙**: 가능한 적은 수의 Agent로 처리\n2. **전문성 우선**: 해당 작업에 가장 전문적인 Agent 선택\n3. **효율성 고려**: 병렬 처리 가능한 경우 명시\n4. **의존성 관리**: 데이터 흐름을 고려한 순서 지정\n5. **폴백 전략**: 불확실한 경우 ["search_team", "analysis_team"] 조합\n\n## 주의사항\n\n- selected_agents는 반드시 배열 형태\n- Agent 이름은 정확히: "search_team", "analysis_team", "document_team"\n- 최소 1개, 최대 3개 선택\n- 순서는 실행 우선순위 (앞에 있을수록 먼저 실행)\n- reasoning은 상세하고 논리적으로 작성\n- coordination 필드로 실행 방식 명시\n- 복합 질문의 경우 의존성 관계 명확히 표시'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 16:02:40,261 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 16:02:40,261 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 16:02:40,262 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 16:02:40,262 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 16:02:40,262 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 16:02:40,262 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 16:02:44,211 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 07:02:44 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'3732'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'3753'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9943'), (b'x-ratelimit-remaining-tokens', b'197883'), (b'x-ratelimit-reset-requests', b'8m8.703s'), (b'x-ratelimit-reset-tokens', b'635ms'), (b'x-request-id', b'req_7bae14d053b24c91baed173e40e0385b'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b0e057c353091-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 16:02:44,211 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 16:02:44,211 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 16:02:44,216 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 16:02:44,216 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 16:02:44,216 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 16:02:44,216 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 07:02:44 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '3732', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '3753', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9943', 'x-ratelimit-remaining-tokens': '197883', 'x-ratelimit-reset-requests': '8m8.703s', 'x-ratelimit-reset-tokens': '635ms', 'x-request-id': 'req_7bae14d053b24c91baed173e40e0385b', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b0e057c353091-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 16:02:44,217 - openai._base_client - DEBUG - request_id: req_7bae14d053b24c91baed173e40e0385b
2025-10-05 16:02:44,217 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: agent_selection | Model: gpt-4o-mini-2024-07-18 | Tokens: 2549 (prompt: 2367, completion: 182)
2025-10-05 16:02:44,217 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM agent selection reasoning: 1단계: 계약 갱신 청구권 확인과 행사 방법에 대한 정보가 필요하므로 법률 검색이 필요하고, 이를 바탕으로 상황 분석과 해결책 제시가 필요하다. 2단계: 복잡한 질문으로, 법률 정보 확인 후 그에 대한 분석이 필요하다. 3단계: 법률 정보 검색 후 분석이 필요하므로 순차적 의존성이 있다. 4단계: 단순 법률 조회로는 해결책을 제시할 수 없으므로 분석 팀이 반드시 포함되어야 한다.
2025-10-05 16:02:44,217 - app.service_agent.cognitive_agents.planning_agent - INFO - ✅ Primary LLM selected agents: ['search_team', 'analysis_team']
2025-10-05 16:02:44,217 - app.service_agent.cognitive_agents.planning_agent - INFO - Intent analyzed: 종합분석 (confidence: 0.85)
2025-10-05 16:02:44,217 - app.service_agent.cognitive_agents.query_decomposer - INFO - Decomposing query: 계약 갱신 청구권 확인하고 행사 방법 알려줘...
2025-10-05 16:02:44,217 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-c39c185b-86e8-4936-85e9-7ef37c37033f', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 질문 분해 전문가입니다.\n복잡한 사용자 질문을 독립적으로 처리 가능한 작업 단위로 분해하는 것이 목표입니다.\n\n## Chain-of-Thought 분해 프로세스:\n\n### 1단계: 복합 질문 여부 판단\n- 단순 정보 조회만 필요한가? → is_compound: false\n- **다음 중 하나라도 해당하면 is_compound: true**:\n  * "그리고", "그 다음", "한 후" 같은 연결어로 여러 요청 연결\n  * 명시적으로 2개 이상의 작업 요청 (예: "시세 확인하고 대출 계산해줘")\n  * 상황 설명 + 해결책 요청 (예: "3억→10억 올려달래. 어떻게 해야 해?")\n  * 해결책을 위해 여러 단계 처리 필요 (검색 → 분석 → 제안)\n\n### 2단계: 필요 작업 식별\n- 정보 수집이 필요한가? → search 작업\n- 평가/판단이 필요한가? → analysis 작업\n- 문서 생성이 필요한가? → generation 작업\n- **해결책 요청**인가? → search + analysis (최소 2개)\n\n### 3단계: 작업 순서 결정\n- 독립적 작업: 병렬 가능\n- 이전 결과 필요: 순차 실행 (depends_on 설정)\n\n## 중요 원칙:\n1. 각 작업은 하나의 명확한 목표를 가져야 합니다\n2. 작업 간 의존성을 명확히 파악해야 합니다\n3. 병렬 처리 가능한 작업은 구분해야 합니다\n4. **주의**: "어떻게 해야", "방법 알려줘" 같은 해결책 요청은 복합 질문!\n\n## 작업 유형 (type):\n- search: 정보 검색 (법률, 시세, 대출 정보 등)\n- analysis: 데이터 분석 (리스크 평가, 시장 분석 등)\n- generation: 문서 생성 (계약서 작성 등)\n- review: 검토/평가 (계약서 검토, 조건 확인 등)\n- calculation: 계산/산출 (대출 한도, 세금 등)\n- comparison: 비교 분석 (여러 옵션 비교)\n\n## 담당 팀 (agent):\n- search_team: 법률, 시세, 대출 정보 검색\n- analysis_team: 데이터 분석, 리스크 평가, 계산\n- document_team: 문서 생성, 계약서 작성\n\n## 학습 예시:\n\n### 예시 1: 복합 질문 (순차적)\n질문: "강남구 아파트 시세 확인하고 대출 가능 금액 계산해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "강남구 아파트 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "대출 가능 금액 계산",\n            "type": "calculation",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "required_data": {"price": "task_0.result.price"},\n            "estimated_time": 15\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "시세 정보가 있어야 대출 금액 계산이 가능하므로 순차 실행"\n}\n```\n\n### 예시 2: 복합 질문 (병렬 가능)\n질문: "이 지역 전세 시세와 매매 시세 모두 알려주고 비교 분석해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "전세 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "매매 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "전세/매매 시세 비교 분석",\n            "type": "comparison",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0", "task_1"],\n            "required_data": {\n                "lease_price": "task_0.result",\n                "sale_price": "task_1.result"\n            },\n            "estimated_time": 25\n        }\n    ],\n    "execution_mode": "mixed",\n    "parallel_groups": [["task_0", "task_1"], ["task_2"]],\n    "reasoning": "시세 조회는 독립적이므로 병렬 처리, 비교는 두 결과 필요"\n}\n```\n\n### 예시 3: 복합 질문 (3단계 이상)\n질문: "이 계약서 검토해서 위험한 부분 찾고 수정안 만들어서 최종 계약서 작성해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "계약서 내용 전체 검토",\n            "type": "review",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 30\n        },\n        {\n            "description": "위험 요소 및 문제점 분석",\n            "type": "analysis",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "estimated_time": 25\n        },\n        {\n            "description": "수정안 제안 생성",\n            "type": "generation",\n            "agent": "document_team",\n            "priority": 3,\n            "depends_on": ["task_1"],\n            "estimated_time": 20\n        },\n        {\n            "description": "최종 계약서 작성",\n            "type": "generation",\n            "agent": "document_team",\n            "priority": 4,\n            "depends_on": ["task_2"],\n            "estimated_time": 30\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "각 단계가 이전 결과에 의존하므로 순차 실행 필요"\n}\n```\n\n### 예시 4: 단순 질문 (분해 불필요)\n질문: "전세금 인상률 상한이 얼마야?"\n분해:\n```json\n{\n    "is_compound": false,\n    "sub_tasks": [\n        {\n            "description": "전세금 인상률 상한 법률 정보 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 15\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "단일 정보 조회 요청으로 분해 불필요"\n}\n```\n\n### 예시 5: 조건부 실행\n질문: "이 물건 시세 확인하고 적정가면 대출 상담도 받고 싶어"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "물건 시세 조회 및 적정성 평가",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 25\n        },\n        {\n            "description": "대출 상담 정보 제공",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "optional": true,\n            "context": {"condition": "if_reasonable_price"},\n            "estimated_time": 20\n        }\n    ],\n    "execution_mode": "conditional",\n    "reasoning": "시세 확인 결과에 따라 대출 상담 진행 여부 결정"\n}\n```\n\n### 예시 6: 상황 설명 + 해결책 요청 (핵심 패턴!)\n질문: "집주인이 전세금 3억을 10억으로 올려달래. 법적으로 어떻게 해야 해?"\n**CoT 분석**:\n1. 질문 분석: 상황 설명 + 해결책 요청\n2. 연결어: 없지만, "어떻게 해야" = 해결책 요청\n3. 의존성: 법률 확인 → 상황 분석 → 대응 방안\n4. 복합 여부: **YES** (해결책을 위해 여러 단계 필요)\n\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "전세금 인상 한도 관련 법률 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "3억→10억 인상의 법적 타당성 및 적정성 분석",\n            "type": "analysis",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "required_data": {"legal_limit": "task_0.result", "current": 300000000, "requested": 1000000000},\n            "estimated_time": 25\n        },\n        {\n            "description": "구체적 대응 방안 및 해결책 제시",\n            "type": "analysis",\n            "agent": "analysis_team",\n            "priority": 3,\n            "depends_on": ["task_1"],\n            "estimated_time": 20\n        }\n    ],\n    "execution_mode": "sequential",\n    "confidence": 0.95,\n    "reasoning": "상황 설명+해결책 요청 패턴. \'어떻게 해야\'는 단순 정보 조회가 아닌 종합 해결책 필요. 법률 조회 → 상황 분석 → 해결책 제시 3단계 순차 처리"\n}\n```\n\n## Chain-of-Thought 프로세스:\n\n1. **질문 분석**: 어떤 정보나 작업을 요구하는가?\n2. **연결어 확인**: "그리고", "또한", "해서", "한 후" 등이 있는가?\n3. **의존성 파악**: 어떤 작업이 다른 작업의 결과를 필요로 하는가?\n4. **병렬성 판단**: 독립적으로 실행 가능한 작업이 있는가?\n5. **최적화**: 불필요한 분해는 없는가?\n\n## 응답 형식 (JSON):\n\n{\n    "is_compound": true/false,\n    "sub_tasks": [\n        {\n            "description": "작업 설명",\n            "type": "작업 유형",\n            "agent": "담당 팀",\n            "priority": 우선순위 (1이 가장 높음),\n            "depends_on": ["선행 작업 ID 리스트"],\n            "required_data": {"필요한 데이터 매핑"},\n            "estimated_time": 예상 소요 시간(초),\n            "optional": true/false,\n            "context": {"추가 컨텍스트"}\n        }\n    ],\n    "execution_mode": "sequential/parallel/mixed/conditional",\n    "parallel_groups": [["병렬 실행 가능한 작업 ID 그룹"]],\n    "confidence": 0.0-1.0,\n    "reasoning": "분해 결정의 이유와 근거"\n}\n\n## 분해 가이드라인:\n\n1. **분해가 필요한 경우**:\n   - 여러 종류의 정보를 요청하는 경우\n   - 순차적 처리가 필요한 경우 (A의 결과로 B 수행)\n   - 서로 다른 팀의 전문성이 필요한 경우\n\n2. **분해가 불필요한 경우**:\n   - 단일 정보 조회\n   - 단순한 질문-답변\n   - 하나의 팀에서 완전히 처리 가능한 경우\n\n3. **병렬 처리 기준**:\n   - 서로 독립적인 정보 조회\n   - 의존성이 없는 분석 작업\n   - 동시에 진행해도 충돌하지 않는 작업\n\n4. **우선순위 설정**:\n   - 의존성이 없는 작업: priority 1\n   - 1차 의존 작업: priority 2\n   - 2차 의존 작업: priority 3\n   - 이런 식으로 증가\n\n현재 의도: 종합분석\n추출된 엔티티: {\'contract_type\': \'임대차계약\', \'action_verbs\': [\'확인\', \'행사\']}\n\n분석할 질문: 계약 갱신 청구권 확인하고 행사 방법 알려줘'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 16:02:44,218 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 16:02:44,218 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 16:02:44,219 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 16:02:44,219 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 16:02:44,219 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 16:02:44,219 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 16:02:47,157 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 07:02:47 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'2729'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'2755'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9942'), (b'x-ratelimit-remaining-tokens', b'197317'), (b'x-ratelimit-reset-requests', b'8m13.702s'), (b'x-ratelimit-reset-tokens', b'804ms'), (b'x-request-id', b'req_d77e2380f8f247b6a9024fea8bc5e3ee'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b0e1e3f673091-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 16:02:47,157 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 16:02:47,157 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 16:02:47,161 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 16:02:47,161 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 16:02:47,161 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 16:02:47,161 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 07:02:47 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '2729', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '2755', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9942', 'x-ratelimit-remaining-tokens': '197317', 'x-ratelimit-reset-requests': '8m13.702s', 'x-ratelimit-reset-tokens': '804ms', 'x-request-id': 'req_d77e2380f8f247b6a9024fea8bc5e3ee', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b0e1e3f673091-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 16:02:47,161 - openai._base_client - DEBUG - request_id: req_d77e2380f8f247b6a9024fea8bc5e3ee
2025-10-05 16:02:47,162 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: query_decomposition | Model: gpt-4o-mini-2024-07-18 | Tokens: 2906 (prompt: 2715, completion: 191)
2025-10-05 16:02:47,162 - app.service_agent.cognitive_agents.query_decomposer - INFO - Successfully decomposed into 2 tasks
2025-10-05 16:02:47,162 - app.service_agent.cognitive_agents.planning_agent - INFO - Query decomposed into 2 tasks
2025-10-05 16:02:47,162 - app.service_agent.cognitive_agents.planning_agent - WARNING - Plan validation errors: ["Agent 'search_team' not found in registry", "Agent 'analysis_team' depends on missing 'task_0'", "Agent 'analysis_team' not found in registry"]
2025-10-05 16:02:47,162 - app.service_agent.cognitive_agents.planning_agent - INFO - Optimizing execution plan
2025-10-05 16:02:47,162 - app.service_agent.cognitive_agents.planning_agent - INFO - Comprehensive plan created: Intent: 종합분석 (confidence: 0.85) | Strategy: sequential | Agents: search_team, analysis_team | Estimated time: 45.0s
2025-10-05 16:02:47,162 - __main__ - INFO -   전략: sequential
2025-10-05 16:02:47,162 - __main__ - INFO -   단계 수: 2
2025-10-05 16:02:47,162 - __main__ - INFO - 
✓ 테스트 성공 (소요시간: 26.46초)
2025-10-05 16:02:47,162 - __main__ - INFO - 
================================================================================
2025-10-05 16:02:47,162 - __main__ - INFO - [33] 복합 질문 테스트: D013
2025-10-05 16:02:47,162 - __main__ - INFO - 질문: 강남 전세 시세 확인하고 월세 전환 비교해줘
2025-10-05 16:02:47,162 - __main__ - INFO - ================================================================================
2025-10-05 16:02:47,162 - __main__ - INFO - 
[Step 1] Intent 분석...
2025-10-05 16:02:47,162 - app.service_agent.cognitive_agents.planning_agent - INFO - Analyzing intent for query: 강남 전세 시세 확인하고 월세 전환 비교해줘...
2025-10-05 16:02:47,163 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-d091b7e0-308c-4147-9f9b-089b4f3f813e', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 의도 분석 전문가입니다.\n사용자의 질문을 정확히 이해하고, 어떤 종류의 도움이 필요한지 분류해야 합니다.\n\n## Chain-of-Thought 분석 프로세스\n\n질문을 분석할 때 다음 단계를 **순서대로** 따르세요:\n\n### 1단계: 질문 구조 파악\n- 단순 정보 요청인가? (예: "~이 뭐야?", "~알려줘")\n- 상황 설명이 포함되어 있는가? (배경, 현재 상태)\n- 구체적 수치나 데이터가 있는가? (금액, 비율, 기간 등)\n- 문제 해결을 요구하는가? (예: "어떻게 해야 해?", "방법 알려줘")\n\n### 2단계: 요청 유형 판단\n- **정보 확인형**: 사실, 개념, 규정 확인 → 검색만으로 충분\n- **평가/판단형**: "괜찮아?", "적절해?", "문제있어?" → 검색 + 분석 필요\n- **해결책 요청형**: "어떻게?", "방법?", "대처?" → 검색 + 분석 + 제안 필요\n- **비교/선택형**: "A vs B", "어느게 나아?" → 검색 + 분석(비교) 필요\n\n### 3단계: 복잡도 평가\n- **저**: 단일 개념/사실 확인 (예: "전세금 인상률 한도?")\n- **중**: 특정 상황 + 판단 (예: "3억을 5억으로 올려달래. 가능해?")\n- **고**: 복잡한 상황 + 여러 조건 + 해결책 (예: "10년 거주, 3억→10억 요구. 어떻게 해야 해?")\n\n### 4단계: 필요한 처리 결정\n- **검색만**: 정보 확인형 + 저복잡도\n- **검색+분석**: 평가/판단형 OR 중복잡도 OR 수치 비교 포함\n- **종합처리**: 해결책 요청형 OR 고복잡도 OR 여러 조건 동시 고려\n\n### 5단계: 최종 검증\n- 선택한 의도로 사용자 질문에 완전히 답변 가능한가?\n- 단순 정보 제공으로 끝나는가, 아니면 추가 분석/판단이 필요한가?\n- 상황 설명이 있으면서 "해결", "방법", "어떻게" 등이 있으면 → COMPREHENSIVE 고려\n\n## 중요: 복합 질문 처리\n복합적인 질문(여러 의도가 섞인 질문)의 경우, 가장 핵심적인 의도를 파악하되,\nsub_intents 필드에 부가적인 의도들도 함께 기록해주세요.\n\n**특히 주의**:\n- 법률 키워드가 있어도, "해결방법", "어떻게 해야" 같은 표현이 있으면 단순 LEGAL_CONSULT가 아닐 수 있음\n- 구체적 상황(금액, 기간 등) + 해결책 요구 = COMPREHENSIVE 또는 복합 의도로 분류\n\n## 분류 카테고리 설명:\n\n1. **LEGAL_CONSULT (법률상담)**\n   - 설명: 부동산 관련 법률, 권리, 의무에 대한 질문\n   - 예시:\n     * 단순: "전세금 5% 인상이 가능한가요?", "임대차계약 갱신 거부할 수 있나요?"\n     * 복합: "전세금 인상 가능한지 확인하고 법적 근거도 알려주세요"\n   - 키워드: 법, 전세, 임대, 보증금, 계약, 권리, 의무, 갱신, 임차인, 임대인, 법률, 규정, 조항\n   - 필요한 처리: 법률 데이터베이스 검색, 관련 법조항 찾기\n\n2. **MARKET_INQUIRY (시세조회)**\n   - 설명: 부동산 시장 가격, 시세, 거래 동향에 대한 질문\n   - 예시:\n     * 단순: "강남구 아파트 전세 시세 알려주세요", "서초동 매매가 얼마나 올랐나요?"\n     * 복합: "강남구 시세 확인하고 대출 가능 금액도 계산해줘"\n   - 키워드: 시세, 가격, 매매가, 전세가, 월세, 시장, 동향, 평균, 지역명, 상승률, 하락률\n   - 필요한 처리: 부동산 시세 데이터 조회, 지역별 가격 분석\n\n3. **LOAN_CONSULT (대출상담)**\n   - 설명: 주택담보대출, 전세자금대출 등 금융 관련 질문\n   - 예시:\n     * 단순: "전세자금대출 한도가 얼마인가요?", "LTV가 뭔가요?"\n     * 복합: "대출 한도 확인하고 금리 비교도 해주세요"\n   - 키워드: 대출, 금리, 한도, 조건, 상환, LTV, DTI, DSR, 담보, 금융, 은행\n   - 필요한 처리: 대출 상품 조회, 금리 정보 검색, 한도 계산\n\n4. **CONTRACT_CREATION (계약서작성)**\n   - 설명: 새로운 계약서나 문서를 작성해달라는 요청\n   - 예시:\n     * 단순: "임대차계약서 작성해주세요", "전세계약서 초안 만들어주세요"\n     * 복합: "계약서 작성하고 주의사항도 검토해주세요"\n   - 키워드: 작성, 만들, 생성, 초안, 계약서, 문서, 양식\n   - 필요한 처리: 문서 생성 에이전트 호출, 템플릿 기반 작성\n\n5. **CONTRACT_REVIEW (계약서검토)**\n   - 설명: 기존 계약서나 문서를 검토해달라는 요청\n   - 예시:\n     * 단순: "이 계약서 검토해주세요", "특약사항 문제없나요?"\n     * 복합: "계약서 검토하고 수정사항도 제안해주세요"\n   - 키워드: 검토, 확인, 점검, 리뷰, 분석해, 살펴봐, 체크\n   - 필요한 처리: 문서 분석, 위험 요소 식별, 개선사항 제안\n\n6. **COMPREHENSIVE (종합분석)**\n   - 설명: 여러 측면을 종합적으로 분석해달라는 요청, 또는 복잡한 상황에 대한 해결책 요청\n   - 예시:\n     * 단순: "이 물건 전체적으로 분석해주세요"\n     * 복합: "시세, 법률, 대출 모두 검토해서 종합 의견 주세요"\n     * 해결형: "10년 거주했는데 전세금 3억을 10억으로 올려달래. 어떻게 해야 해?"\n     * 상황+해결: "집주인이 계약 갱신 거부했어. 법적으로 어떻게 대응해야 할까?"\n   - 키워드: 종합, 전체, 모든, 전반적, 종합적, 평가, 분석, 어떻게, 방법, 해결, 대처\n   - 패턴: 구체적 상황 설명 + "어떻게/방법/해결" 요청\n   - 필요한 처리: 다중 데이터 소스 통합 분석, 상황 평가, 해결책 제시\n\n7. **RISK_ANALYSIS (리스크분석)**\n   - 설명: 위험 요소나 주의사항에 대한 질문\n   - 예시:\n     * 단순: "이 계약 위험한가요?", "주의할 점 알려주세요"\n     * 복합: "리스크 분석하고 대안도 제시해주세요"\n   - 키워드: 위험, 리스크, 주의, 문제점, 조심, 걱정, 우려\n   - 필요한 처리: 위험 요소 분석, 주의사항 추출\n\n8. **UNCLEAR (불분명)**\n   - 설명: 의도를 명확히 파악하기 어려운 질문\n   - 예시: "이거 좀 봐주세요", "어떻게 해야 할까요?", "도와주세요"\n   - 처리: 추가 질문으로 의도 명확화 필요\n\n9. **IRRELEVANT (무관)**\n   - 설명: 부동산과 전혀 관련 없는 질문\n   - 예시: "날씨 어때?", "저녁 뭐 먹지?", "주식 추천해줘"\n   - 처리: 부동산 관련 질문을 유도\n\n## 복합 질문 예시와 분석 (CoT 적용):\n\n### 예시 1: "강남구 아파트 시세 알려주고 전세자금대출 가능한지도 확인해줘"\n**CoT 분석**:\n1. 구조: 두 개의 요청 ("시세" + "대출")\n2. 유형: 정보 확인형 (둘 다)\n3. 복잡도: 중 (두 가지 독립적 조회)\n4. 필요 처리: 검색 + 계산/분석\n\n**결론**:\n- 주 의도: MARKET_INQUIRY (시세 조회가 먼저 필요)\n- 부가 의도: LOAN_CONSULT (대출 확인)\n- 분해: ["강남구 아파트 시세 조회", "전세자금대출 가능 여부 확인"]\n\n### 예시 2: "이 계약서 검토해서 위험한 부분 있는지 알려주고 수정 제안도 해줘"\n**CoT 분석**:\n1. 구조: 검토 + 위험 평가 + 수정안\n2. 유형: 평가/판단형 + 해결책 요청형\n3. 복잡도: 고 (3단계 처리)\n4. 필요 처리: 검토 + 분석 + 문서 생성\n\n**결론**:\n- 주 의도: CONTRACT_REVIEW (계약서 검토)\n- 부가 의도: RISK_ANALYSIS (위험 분석)\n- 분해: ["계약서 전체 검토", "위험 요소 식별", "수정사항 제안"]\n\n### 예시 3: "집주인이 짜증나, 10년 살았는데 전세금 3억을 10억으로 올려달래. 법적으로 해결방법 알려줘"\n**CoT 분석**:\n1. 구조: 상황 설명 (10년 거주, 3억→10억) + 해결책 요청\n2. 유형: 해결책 요청형 (단순 정보 X)\n3. 복잡도: 고 (구체적 상황 + 수치 비교 + 법률 + 대응방안)\n4. 필요 처리: 법률 검색 + 상황 분석 + 해결책 제시\n\n**결론**:\n- 주 의도: COMPREHENSIVE (복잡한 상황에 대한 종합 해결)\n- 부가 의도: LEGAL_CONSULT, RISK_ANALYSIS\n- 분해: ["전세금 인상 한도 법률 조회", "3억→10억 인상의 타당성 분석", "구체적 대응 방안 제시"]\n- **이유**: "법적으로"라는 키워드가 있지만, 단순 법률 확인이 아니라 구체적 상황에 대한 해결책을 요구하므로 COMPREHENSIVE\n\n### 예시 4: "전세금 인상률 상한이 얼마야?"\n**CoT 분석**:\n1. 구조: 단순 사실 확인\n2. 유형: 정보 확인형\n3. 복잡도: 저 (단일 개념)\n4. 필요 처리: 검색만\n\n**결론**:\n- 주 의도: LEGAL_CONSULT (법률 정보 조회)\n- 부가 의도: 없음\n- 분해: 필요 없음\n\n## 응답 형식 (JSON 형식으로 응답):\n\n```json\n{\n    "intent": "LEGAL_CONSULT",\n    "confidence": 0.9,\n    "keywords": ["전세금", "인상", "제한"],\n    "sub_intents": [],\n    "is_compound": false,\n    "decomposed_tasks": [],\n    "entities": {\n        "location": "강남구",\n        "price": "5억",\n        "contract_type": "전세",\n        "date": "2024년",\n        "area": "84㎡",\n        "action_verbs": ["확인", "검토"]\n    },\n    "reasoning": "전세금 인상에 대한 법률 질문이므로 LEGAL_CONSULT로 분류"\n}\n```\n\n응답 규칙:\n- intent: 위 9개 카테고리 중 하나 (대문자_언더스코어 형식)\n- confidence: 0.0~1.0 (0.8 이상이면 매우 확실, 0.5 미만이면 불확실)\n- keywords: 추출된 주요 키워드 목록\n- sub_intents: 복합 질문일 경우 부가적인 의도들\n- is_compound: 복합 질문 여부 (true/false)\n- decomposed_tasks: 복합 질문을 분해한 개별 작업들\n- entities: 추출된 엔티티 정보\n- reasoning: **반드시 CoT 5단계를 거쳐 분석한 과정을 포함** (구조 파악 → 유형 판단 → 복잡도 평가 → 필요 처리 → 최종 검증)\n\n## reasoning 작성 예시:\n"1단계(구조): 상황 설명(10년 거주, 3억→10억) + 해결책 요청 포함.\n2단계(유형): 해결책 요청형 - 단순 정보가 아닌 대응방안 필요.\n3단계(복잡도): 고 - 구체적 수치 비교와 복잡한 상황.\n4단계(처리): 법률 검색 + 상황 분석 + 해결책 제시 필요.\n5단계(검증): LEGAL_CONSULT만으로는 불충분, 종합적 분석 필요 → COMPREHENSIVE 선택"\n\n## 판단 가이드:\n- 여러 의도가 섞여있다면, 가장 주된 의도를 intent에, 나머지를 sub_intents에 기록\n- "그리고", "또한", "함께", "같이" 등의 연결어가 있으면 복합 질문일 가능성 높음\n- 법률 관련 키워드가 있으면 LEGAL_CONSULT 우선\n- 가격/시세 언급이 명확하면 MARKET_INQUIRY\n- 계약서라는 단어와 함께 "작성/만들기"가 있으면 CONTRACT_CREATION\n- 계약서라는 단어와 함께 "검토/확인"이 있으면 CONTRACT_REVIEW\n- 불확실하면 confidence를 낮게 설정하고 UNCLEAR 선택\n- 복합 질문은 is_compound를 true로 설정하고 개별 작업으로 분해\n\n분석할 질문: 강남 전세 시세 확인하고 월세 전환 비교해줘'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 16:02:47,163 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 16:02:47,163 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 16:02:47,163 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 16:02:47,163 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 16:02:47,164 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 16:02:47,164 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 16:02:52,618 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 07:02:52 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'5245'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'5263'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9942'), (b'x-ratelimit-remaining-tokens', b'197241'), (b'x-ratelimit-reset-requests', b'8m19.084s'), (b'x-ratelimit-reset-tokens', b'827ms'), (b'x-request-id', b'req_becf5d1cb3b742ca8daed61d714f29d4'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b0e3099b73091-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 16:02:52,618 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 16:02:52,618 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 16:02:52,624 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 16:02:52,624 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 16:02:52,624 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 16:02:52,624 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 07:02:52 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '5245', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '5263', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9942', 'x-ratelimit-remaining-tokens': '197241', 'x-ratelimit-reset-requests': '8m19.084s', 'x-ratelimit-reset-tokens': '827ms', 'x-request-id': 'req_becf5d1cb3b742ca8daed61d714f29d4', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b0e3099b73091-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 16:02:52,624 - openai._base_client - DEBUG - request_id: req_becf5d1cb3b742ca8daed61d714f29d4
2025-10-05 16:02:52,625 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: intent_analysis | Model: gpt-4o-mini-2024-07-18 | Tokens: 3450 (prompt: 3184, completion: 266)
2025-10-05 16:02:52,625 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM Intent Analysis Result: {'intent': 'MARKET_INQUIRY', 'confidence': 0.85, 'keywords': ['강남', '전세', '시세', '월세', '전환', '비교'], 'sub_intents': ['MARKET_INQUIRY'], 'is_compound': True, 'decomposed_tasks': ['강남 전세 시세 확인', '강남 월세 시세 확인', '전세와 월세 비교'], 'entities': {'location': '강남', 'contract_type': '전세', 'action_verbs': ['확인', '비교']}, 'reasoning': '1단계(구조): 두 개의 요청(전세 시세 확인 + 월세 전환 비교) 포함. 2단계(유형): 정보 확인형 - 시세 조회와 비교 요청. 3단계(복잡도): 중 - 두 가지 독립적 조회 필요. 4단계(처리): 시세 데이터 조회 및 비교 분석 필요. 5단계(검증): 두 가지 요청이 명확하므로 MARKET_INQUIRY로 분류하고, 복합 질문으로 처리.'}
2025-10-05 16:02:52,626 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-c11cd580-2f6e-4e5e-a77b-207f67de8774', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 Agent 선택 전문가입니다.\n사용자의 요청에 가장 적합한 Agent/Team을 선택하는 것이 목표입니다.\n\n## 현재 상황\n\n**사용자 질문:** 강남 전세 시세 확인하고 월세 전환 비교해줘\n**분석된 의도:** 시세조회\n**추출된 키워드:** [\'강남\', \'전세\', \'시세\', \'월세\', \'전환\', \'비교\']\n\n## 사용 가능한 Agent/Team 정보\n\n{\'search_team\': {\'name\': \'search_team\', \'capabilities\': \'법률 검색, 부동산 시세 조회, 대출 상품 검색\', \'tools\': [\'legal_search\', \'market_data\', \'loan_data\'], \'use_cases\': [\'법률 상담\', \'시세 조회\', \'대출 정보\']}, \'analysis_team\': {\'name\': \'analysis_team\', \'capabilities\': \'데이터 분석, 리스크 평가, 인사이트 생성, 추천\', \'tools\': [\'data_analyzer\', \'risk_evaluator\'], \'use_cases\': [\'시장 분석\', \'리스크 평가\', \'투자 분석\']}, \'document_team\': {\'name\': \'document_team\', \'capabilities\': \'계약서 작성, 문서 생성, 문서 검토\', \'tools\': [\'document_generator\', \'contract_reviewer\'], \'use_cases\': [\'계약서 작성\', \'문서 검토\']}}\n\n## Agent 역할 및 상세 가이드\n\n### 1. search_team (검색 팀)\n- **주요 기능**: 정보 검색 및 데이터 수집\n- **전문 분야**:\n  * 법률 정보 검색 (전세법, 임대차보호법, 부동산 관련 법규)\n  * 부동산 시세 조회 (매매가, 전세가, 월세, 실거래가)\n  * 대출 상품 정보 검색 (금리, 한도, 조건)\n  * 지역 정보 및 인프라 조회\n- **도구**: legal_search, market_data, loan_data\n- **적합한 작업**: 정보 조회, 데이터 수집, 법률 확인, 시세 파악\n- **예시**:\n  * "전세금 5% 인상 가능한가요?"\n  * "강남구 아파트 전세 시세"\n  * "전세자금대출 한도 얼마?"\n\n### 2. analysis_team (분석 팀)\n- **주요 기능**: 데이터 분석 및 평가\n- **전문 분야**:\n  * 시장 동향 분석 (상승률, 하락률, 추세)\n  * 리스크 평가 (계약, 투자 위험도)\n  * 투자 수익률 계산 (ROI, 월세 수익률)\n  * 대출 한도 및 조건 분석 (LTV, DTI, DSR)\n  * 비교 분석 (지역별, 상품별)\n- **도구**: data_analyzer, risk_evaluator, calculator\n- **적합한 작업**: 데이터 분석, 리스크 평가, 계산, 비교, 예측\n- **의존성**: 보통 search_team의 데이터가 필요\n- **예시**:\n  * "이 지역 투자 가치 분석해줘"\n  * "계약 리스크 평가해줘"\n  * "대출 가능 금액 계산해줘"\n\n### 3. document_team (문서 팀)\n- **주요 기능**: 문서 생성 및 관리\n- **전문 분야**:\n  * 계약서 작성 (임대차, 매매, 전세)\n  * 문서 템플릿 관리\n  * 특약사항 생성\n  * 계약서 수정안 작성\n  * 법률 문서 검토\n- **도구**: document_generator, contract_template, contract_reviewer\n- **적합한 작업**: 문서 작성, 계약서 생성, 문서 수정, 검토\n- **예시**:\n  * "임대차계약서 작성해줘"\n  * "특약사항 추가해줘"\n  * "계약서 수정안 만들어줘"\n\n## Chain-of-Thought Agent 선택 프로세스\n\n다음 단계를 **순서대로** 따라 최적의 Agent 조합을 선택하세요:\n\n### 1단계: 질문 요구사항 파악\n- 단순 정보 조회인가? → search_team만 필요\n- 판단/평가가 필요한가? → search + analysis 필요\n- 해결책 제시가 필요한가? → search + analysis 필요\n- 문서 생성이 필요한가? → document_team 추가\n\n### 2단계: 작업 복잡도 판단\n- **단순** (검색만): "~이 뭐야?", "~알려줘" → search_team\n- **중간** (검색+판단): "~괜찮아?", "~적절해?" → search + analysis\n- **복잡** (종합 해결): 구체적 상황 + "어떻게 해야 해?" → search + analysis\n\n### 3단계: 의존성 분석\n- 독립적 작업: 단일 팀으로 처리 가능\n- 순차적 의존: 이전 결과 필요 → 여러 팀 순서대로\n- 병렬 가능: 동시 조회 가능 → coordination: "parallel"\n\n### 4단계: 최종 검증\n- 선택한 팀들로 질문에 완전히 답변 가능한가?\n- 불필요한 팀이 포함되지 않았는가?\n- 순서가 논리적인가? (데이터 흐름 고려)\n\n### 중요 원칙:\n- **법률 키워드만으로 판단하지 말 것**: "법적으로 어떻게 해야 해?" = 법률 검색 + 분석 필요\n- **상황 설명 + 해결책 요청** = 반드시 analysis_team 포함\n- **구체적 수치 비교** (3억→10억 같은) = analysis_team 필요\n\n## 의도별 Agent 매핑 가이드 (기본 가이드 - CoT로 조정 가능)\n\n| 의도 (Intent) | 기본 조합 | 상황별 조정 |\n|--------------|-----------|-------------|\n| LEGAL_CONSULT | ["search_team"] | 해결책 요청시 → + analysis_team |\n| MARKET_INQUIRY | ["search_team"] | 비교/평가시 → + analysis_team |\n| LOAN_CONSULT | ["search_team", "analysis_team"] | 계산 필수 |\n| CONTRACT_CREATION | ["document_team"] | 검토 후 작성 → search + document |\n| CONTRACT_REVIEW | ["search_team", "analysis_team"] | 법률 검토 + 리스크 분석 |\n| COMPREHENSIVE | ["search_team", "analysis_team"] | **항상 분석 포함** |\n| RISK_ANALYSIS | ["analysis_team"] | 법률 근거 필요시 → search + analysis |\n| UNCLEAR | ["search_team", "analysis_team"] | 포괄적 대응 |\n\n**중요**: 위 매핑은 **기본 가이드**일 뿐입니다.\n실제 질문의 내용(CoT 분석 결과)에 따라 조정하세요!\n\n## 복합 질문 처리 예시 (CoT 적용)\n\n### 예시 1: 순차적 처리\n질문: "강남구 시세 확인하고 투자 가치 분석해줘"\n**CoT 분석**:\n1. 요구사항: 시세 조회 + 투자 가치 평가\n2. 복잡도: 중간 (검색 + 분석)\n3. 의존성: 시세 데이터 → 투자 분석 (순차)\n4. 검증: search만으로는 "투자 가치 평가" 불가능\n\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "1단계: 시세 조회+투자 평가 필요. 2단계: 중간 복잡도. 3단계: 순차 의존. 4단계: search로 시세 수집 후 analysis로 투자 가치 평가 필요",\n    "coordination": "sequential"\n}\n```\n\n### 예시 2: 단순 정보 조회\n질문: "전세금 인상률 한도가 얼마야?"\n**CoT 분석**:\n1. 요구사항: 단순 사실 확인\n2. 복잡도: 낮음 (정보 확인형)\n3. 의존성: 없음\n4. 검증: search_team만으로 충분\n\n```json\n{\n    "selected_agents": ["search_team"],\n    "reasoning": "1단계: 단순 정보 조회. 2단계: 저복잡도. 3단계: 독립적. 4단계: 법률 검색만으로 답변 가능",\n    "coordination": "single"\n}\n```\n\n### 예시 3: 해결책 요청 (핵심 예시!)\n질문: "집주인이 전세금 3억을 10억으로 올려달래. 법적으로 어떻게 해야 해?"\n의도: COMPREHENSIVE\n**CoT 분석**:\n1. 요구사항: 상황 설명 + 해결책 요청\n2. 복잡도: 높음 (구체적 상황 + 수치 비교)\n3. 의존성: 법률 확인 → 상황 분석 → 해결책 제시\n4. 검증: "법적으로"만 보고 search만 선택하면 불충분! 해결책 제시 필요\n\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "1단계: 법률 + 상황 분석 + 해결책 필요. 2단계: 고복잡도(3억→10억 비정상). 3단계: 순차(법률 확인 후 타당성 분석). 4단계: \'어떻게 해야\' = 단순 법률 조회 아님, 분석 필수",\n    "coordination": "sequential",\n    "confidence": 0.95\n}\n```\n\n## 응답 형식 (JSON)\n\n```json\n{\n    "selected_agents": ["선택된 agent/team 목록"],\n    "reasoning": "선택 이유를 구체적으로 설명. 각 Agent의 역할과 처리 순서 포함",\n    "coordination": "single/sequential/parallel/pipeline",\n    "dependencies": {"agent2": ["agent1"]},\n    "estimated_time": 30,\n    "confidence": 0.9\n}\n```\n\n## 선택 가이드라인\n\n1. **최소 Agent 원칙**: 가능한 적은 수의 Agent로 처리\n2. **전문성 우선**: 해당 작업에 가장 전문적인 Agent 선택\n3. **효율성 고려**: 병렬 처리 가능한 경우 명시\n4. **의존성 관리**: 데이터 흐름을 고려한 순서 지정\n5. **폴백 전략**: 불확실한 경우 ["search_team", "analysis_team"] 조합\n\n## 주의사항\n\n- selected_agents는 반드시 배열 형태\n- Agent 이름은 정확히: "search_team", "analysis_team", "document_team"\n- 최소 1개, 최대 3개 선택\n- 순서는 실행 우선순위 (앞에 있을수록 먼저 실행)\n- reasoning은 상세하고 논리적으로 작성\n- coordination 필드로 실행 방식 명시\n- 복합 질문의 경우 의존성 관계 명확히 표시'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 16:02:52,627 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 16:02:52,627 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 16:02:52,627 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 16:02:52,627 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 16:02:52,628 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 16:02:52,628 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 16:02:58,644 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 07:02:58 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'5811'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'5833'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9941'), (b'x-ratelimit-remaining-tokens', b'197881'), (b'x-ratelimit-reset-requests', b'8m22.582s'), (b'x-ratelimit-reset-tokens', b'635ms'), (b'x-request-id', b'req_f54bc930a2544d3fba715360fe18e5f9'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b0e52cedc3091-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 16:02:58,644 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 16:02:58,644 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 16:02:58,647 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 16:02:58,647 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 16:02:58,647 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 16:02:58,647 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 07:02:58 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '5811', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '5833', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9941', 'x-ratelimit-remaining-tokens': '197881', 'x-ratelimit-reset-requests': '8m22.582s', 'x-ratelimit-reset-tokens': '635ms', 'x-request-id': 'req_f54bc930a2544d3fba715360fe18e5f9', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b0e52cedc3091-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 16:02:58,647 - openai._base_client - DEBUG - request_id: req_f54bc930a2544d3fba715360fe18e5f9
2025-10-05 16:02:58,647 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: agent_selection | Model: gpt-4o-mini-2024-07-18 | Tokens: 2568 (prompt: 2371, completion: 197)
2025-10-05 16:02:58,647 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM agent selection reasoning: 1단계: 사용자는 강남의 전세 시세를 확인하고 월세 전환을 비교하고자 하므로, 시세 조회와 비교 분석이 필요합니다. 2단계: 이는 중간 복잡도로, 단순 정보 조회가 아닌 시세 데이터와 그에 따른 분석이 요구됩니다. 3단계: 시세 데이터가 필요하므로 search_team이 먼저 실행되고, 그 결과를 바탕으로 analysis_team이 월세 전환 비교를 수행해야 합니다. 4단계: search_team이 시세를 조회한 후, analysis_team이 그 데이터를 기반으로 월세 전환을 비교할 수 있습니다.
2025-10-05 16:02:58,648 - app.service_agent.cognitive_agents.planning_agent - INFO - ✅ Primary LLM selected agents: ['search_team', 'analysis_team']
2025-10-05 16:02:58,648 - __main__ - INFO -   의도: 시세조회
2025-10-05 16:02:58,648 - __main__ - INFO -   신뢰도: 0.85
2025-10-05 16:02:58,648 - __main__ - INFO -   추천 Agent: ['search_team', 'analysis_team']
2025-10-05 16:02:58,648 - __main__ - INFO - 
[Step 2] Query Decomposition...
2025-10-05 16:02:58,648 - app.service_agent.cognitive_agents.query_decomposer - INFO - Decomposing query: 강남 전세 시세 확인하고 월세 전환 비교해줘...
2025-10-05 16:02:58,648 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-94a4ee49-1a52-4084-8791-4baf2b01b432', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 질문 분해 전문가입니다.\n복잡한 사용자 질문을 독립적으로 처리 가능한 작업 단위로 분해하는 것이 목표입니다.\n\n## Chain-of-Thought 분해 프로세스:\n\n### 1단계: 복합 질문 여부 판단\n- 단순 정보 조회만 필요한가? → is_compound: false\n- **다음 중 하나라도 해당하면 is_compound: true**:\n  * "그리고", "그 다음", "한 후" 같은 연결어로 여러 요청 연결\n  * 명시적으로 2개 이상의 작업 요청 (예: "시세 확인하고 대출 계산해줘")\n  * 상황 설명 + 해결책 요청 (예: "3억→10억 올려달래. 어떻게 해야 해?")\n  * 해결책을 위해 여러 단계 처리 필요 (검색 → 분석 → 제안)\n\n### 2단계: 필요 작업 식별\n- 정보 수집이 필요한가? → search 작업\n- 평가/판단이 필요한가? → analysis 작업\n- 문서 생성이 필요한가? → generation 작업\n- **해결책 요청**인가? → search + analysis (최소 2개)\n\n### 3단계: 작업 순서 결정\n- 독립적 작업: 병렬 가능\n- 이전 결과 필요: 순차 실행 (depends_on 설정)\n\n## 중요 원칙:\n1. 각 작업은 하나의 명확한 목표를 가져야 합니다\n2. 작업 간 의존성을 명확히 파악해야 합니다\n3. 병렬 처리 가능한 작업은 구분해야 합니다\n4. **주의**: "어떻게 해야", "방법 알려줘" 같은 해결책 요청은 복합 질문!\n\n## 작업 유형 (type):\n- search: 정보 검색 (법률, 시세, 대출 정보 등)\n- analysis: 데이터 분석 (리스크 평가, 시장 분석 등)\n- generation: 문서 생성 (계약서 작성 등)\n- review: 검토/평가 (계약서 검토, 조건 확인 등)\n- calculation: 계산/산출 (대출 한도, 세금 등)\n- comparison: 비교 분석 (여러 옵션 비교)\n\n## 담당 팀 (agent):\n- search_team: 법률, 시세, 대출 정보 검색\n- analysis_team: 데이터 분석, 리스크 평가, 계산\n- document_team: 문서 생성, 계약서 작성\n\n## 학습 예시:\n\n### 예시 1: 복합 질문 (순차적)\n질문: "강남구 아파트 시세 확인하고 대출 가능 금액 계산해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "강남구 아파트 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "대출 가능 금액 계산",\n            "type": "calculation",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "required_data": {"price": "task_0.result.price"},\n            "estimated_time": 15\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "시세 정보가 있어야 대출 금액 계산이 가능하므로 순차 실행"\n}\n```\n\n### 예시 2: 복합 질문 (병렬 가능)\n질문: "이 지역 전세 시세와 매매 시세 모두 알려주고 비교 분석해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "전세 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "매매 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "전세/매매 시세 비교 분석",\n            "type": "comparison",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0", "task_1"],\n            "required_data": {\n                "lease_price": "task_0.result",\n                "sale_price": "task_1.result"\n            },\n            "estimated_time": 25\n        }\n    ],\n    "execution_mode": "mixed",\n    "parallel_groups": [["task_0", "task_1"], ["task_2"]],\n    "reasoning": "시세 조회는 독립적이므로 병렬 처리, 비교는 두 결과 필요"\n}\n```\n\n### 예시 3: 복합 질문 (3단계 이상)\n질문: "이 계약서 검토해서 위험한 부분 찾고 수정안 만들어서 최종 계약서 작성해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "계약서 내용 전체 검토",\n            "type": "review",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 30\n        },\n        {\n            "description": "위험 요소 및 문제점 분석",\n            "type": "analysis",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "estimated_time": 25\n        },\n        {\n            "description": "수정안 제안 생성",\n            "type": "generation",\n            "agent": "document_team",\n            "priority": 3,\n            "depends_on": ["task_1"],\n            "estimated_time": 20\n        },\n        {\n            "description": "최종 계약서 작성",\n            "type": "generation",\n            "agent": "document_team",\n            "priority": 4,\n            "depends_on": ["task_2"],\n            "estimated_time": 30\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "각 단계가 이전 결과에 의존하므로 순차 실행 필요"\n}\n```\n\n### 예시 4: 단순 질문 (분해 불필요)\n질문: "전세금 인상률 상한이 얼마야?"\n분해:\n```json\n{\n    "is_compound": false,\n    "sub_tasks": [\n        {\n            "description": "전세금 인상률 상한 법률 정보 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 15\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "단일 정보 조회 요청으로 분해 불필요"\n}\n```\n\n### 예시 5: 조건부 실행\n질문: "이 물건 시세 확인하고 적정가면 대출 상담도 받고 싶어"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "물건 시세 조회 및 적정성 평가",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 25\n        },\n        {\n            "description": "대출 상담 정보 제공",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "optional": true,\n            "context": {"condition": "if_reasonable_price"},\n            "estimated_time": 20\n        }\n    ],\n    "execution_mode": "conditional",\n    "reasoning": "시세 확인 결과에 따라 대출 상담 진행 여부 결정"\n}\n```\n\n### 예시 6: 상황 설명 + 해결책 요청 (핵심 패턴!)\n질문: "집주인이 전세금 3억을 10억으로 올려달래. 법적으로 어떻게 해야 해?"\n**CoT 분석**:\n1. 질문 분석: 상황 설명 + 해결책 요청\n2. 연결어: 없지만, "어떻게 해야" = 해결책 요청\n3. 의존성: 법률 확인 → 상황 분석 → 대응 방안\n4. 복합 여부: **YES** (해결책을 위해 여러 단계 필요)\n\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "전세금 인상 한도 관련 법률 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "3억→10억 인상의 법적 타당성 및 적정성 분석",\n            "type": "analysis",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "required_data": {"legal_limit": "task_0.result", "current": 300000000, "requested": 1000000000},\n            "estimated_time": 25\n        },\n        {\n            "description": "구체적 대응 방안 및 해결책 제시",\n            "type": "analysis",\n            "agent": "analysis_team",\n            "priority": 3,\n            "depends_on": ["task_1"],\n            "estimated_time": 20\n        }\n    ],\n    "execution_mode": "sequential",\n    "confidence": 0.95,\n    "reasoning": "상황 설명+해결책 요청 패턴. \'어떻게 해야\'는 단순 정보 조회가 아닌 종합 해결책 필요. 법률 조회 → 상황 분석 → 해결책 제시 3단계 순차 처리"\n}\n```\n\n## Chain-of-Thought 프로세스:\n\n1. **질문 분석**: 어떤 정보나 작업을 요구하는가?\n2. **연결어 확인**: "그리고", "또한", "해서", "한 후" 등이 있는가?\n3. **의존성 파악**: 어떤 작업이 다른 작업의 결과를 필요로 하는가?\n4. **병렬성 판단**: 독립적으로 실행 가능한 작업이 있는가?\n5. **최적화**: 불필요한 분해는 없는가?\n\n## 응답 형식 (JSON):\n\n{\n    "is_compound": true/false,\n    "sub_tasks": [\n        {\n            "description": "작업 설명",\n            "type": "작업 유형",\n            "agent": "담당 팀",\n            "priority": 우선순위 (1이 가장 높음),\n            "depends_on": ["선행 작업 ID 리스트"],\n            "required_data": {"필요한 데이터 매핑"},\n            "estimated_time": 예상 소요 시간(초),\n            "optional": true/false,\n            "context": {"추가 컨텍스트"}\n        }\n    ],\n    "execution_mode": "sequential/parallel/mixed/conditional",\n    "parallel_groups": [["병렬 실행 가능한 작업 ID 그룹"]],\n    "confidence": 0.0-1.0,\n    "reasoning": "분해 결정의 이유와 근거"\n}\n\n## 분해 가이드라인:\n\n1. **분해가 필요한 경우**:\n   - 여러 종류의 정보를 요청하는 경우\n   - 순차적 처리가 필요한 경우 (A의 결과로 B 수행)\n   - 서로 다른 팀의 전문성이 필요한 경우\n\n2. **분해가 불필요한 경우**:\n   - 단일 정보 조회\n   - 단순한 질문-답변\n   - 하나의 팀에서 완전히 처리 가능한 경우\n\n3. **병렬 처리 기준**:\n   - 서로 독립적인 정보 조회\n   - 의존성이 없는 분석 작업\n   - 동시에 진행해도 충돌하지 않는 작업\n\n4. **우선순위 설정**:\n   - 의존성이 없는 작업: priority 1\n   - 1차 의존 작업: priority 2\n   - 2차 의존 작업: priority 3\n   - 이런 식으로 증가\n\n현재 의도: 시세조회\n추출된 엔티티: None\n\n분석할 질문: 강남 전세 시세 확인하고 월세 전환 비교해줘'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 16:02:58,648 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 16:02:58,649 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 16:02:58,649 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 16:02:58,649 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 16:02:58,649 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 16:02:58,649 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 16:03:01,723 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 07:03:01 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'2850'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'2882'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9941'), (b'x-ratelimit-remaining-tokens', b'197335'), (b'x-ratelimit-reset-requests', b'8m24.878s'), (b'x-ratelimit-reset-tokens', b'799ms'), (b'x-request-id', b'req_97218abec5054a6d8cff2d1f589b4317'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b0e7868c43091-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 16:03:01,723 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 16:03:01,723 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 16:03:01,730 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 16:03:01,730 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 16:03:01,730 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 16:03:01,730 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 07:03:01 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '2850', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '2882', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9941', 'x-ratelimit-remaining-tokens': '197335', 'x-ratelimit-reset-requests': '8m24.878s', 'x-ratelimit-reset-tokens': '799ms', 'x-request-id': 'req_97218abec5054a6d8cff2d1f589b4317', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b0e7868c43091-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 16:03:01,730 - openai._base_client - DEBUG - request_id: req_97218abec5054a6d8cff2d1f589b4317
2025-10-05 16:03:01,730 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: query_decomposition | Model: gpt-4o-mini-2024-07-18 | Tokens: 2886 (prompt: 2693, completion: 193)
2025-10-05 16:03:01,731 - app.service_agent.cognitive_agents.query_decomposer - INFO - Successfully decomposed into 2 tasks
2025-10-05 16:03:01,731 - __main__ - INFO -   복합 질문: True
2025-10-05 16:03:01,731 - __main__ - INFO -   작업 수: 2
2025-10-05 16:03:01,731 - __main__ - INFO -   실행 모드: sequential
2025-10-05 16:03:01,731 - __main__ - INFO -     - task_0: 강남 전세 시세 조회 (search_team)
2025-10-05 16:03:01,731 - __main__ - INFO -     - task_1: 강남 전세 시세를 기반으로 월세 전환 비교 분석 (analysis_team)
2025-10-05 16:03:01,731 - __main__ - INFO - 
[Step 3] Comprehensive Plan 생성...
2025-10-05 16:03:01,731 - app.service_agent.cognitive_agents.planning_agent - INFO - Creating comprehensive plan for query: 강남 전세 시세 확인하고 월세 전환 비교해줘...
2025-10-05 16:03:01,731 - app.service_agent.cognitive_agents.planning_agent - INFO - Analyzing intent for query: 강남 전세 시세 확인하고 월세 전환 비교해줘...
2025-10-05 16:03:01,731 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-741eca67-d143-44e5-839d-987a6eb5615f', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 의도 분석 전문가입니다.\n사용자의 질문을 정확히 이해하고, 어떤 종류의 도움이 필요한지 분류해야 합니다.\n\n## Chain-of-Thought 분석 프로세스\n\n질문을 분석할 때 다음 단계를 **순서대로** 따르세요:\n\n### 1단계: 질문 구조 파악\n- 단순 정보 요청인가? (예: "~이 뭐야?", "~알려줘")\n- 상황 설명이 포함되어 있는가? (배경, 현재 상태)\n- 구체적 수치나 데이터가 있는가? (금액, 비율, 기간 등)\n- 문제 해결을 요구하는가? (예: "어떻게 해야 해?", "방법 알려줘")\n\n### 2단계: 요청 유형 판단\n- **정보 확인형**: 사실, 개념, 규정 확인 → 검색만으로 충분\n- **평가/판단형**: "괜찮아?", "적절해?", "문제있어?" → 검색 + 분석 필요\n- **해결책 요청형**: "어떻게?", "방법?", "대처?" → 검색 + 분석 + 제안 필요\n- **비교/선택형**: "A vs B", "어느게 나아?" → 검색 + 분석(비교) 필요\n\n### 3단계: 복잡도 평가\n- **저**: 단일 개념/사실 확인 (예: "전세금 인상률 한도?")\n- **중**: 특정 상황 + 판단 (예: "3억을 5억으로 올려달래. 가능해?")\n- **고**: 복잡한 상황 + 여러 조건 + 해결책 (예: "10년 거주, 3억→10억 요구. 어떻게 해야 해?")\n\n### 4단계: 필요한 처리 결정\n- **검색만**: 정보 확인형 + 저복잡도\n- **검색+분석**: 평가/판단형 OR 중복잡도 OR 수치 비교 포함\n- **종합처리**: 해결책 요청형 OR 고복잡도 OR 여러 조건 동시 고려\n\n### 5단계: 최종 검증\n- 선택한 의도로 사용자 질문에 완전히 답변 가능한가?\n- 단순 정보 제공으로 끝나는가, 아니면 추가 분석/판단이 필요한가?\n- 상황 설명이 있으면서 "해결", "방법", "어떻게" 등이 있으면 → COMPREHENSIVE 고려\n\n## 중요: 복합 질문 처리\n복합적인 질문(여러 의도가 섞인 질문)의 경우, 가장 핵심적인 의도를 파악하되,\nsub_intents 필드에 부가적인 의도들도 함께 기록해주세요.\n\n**특히 주의**:\n- 법률 키워드가 있어도, "해결방법", "어떻게 해야" 같은 표현이 있으면 단순 LEGAL_CONSULT가 아닐 수 있음\n- 구체적 상황(금액, 기간 등) + 해결책 요구 = COMPREHENSIVE 또는 복합 의도로 분류\n\n## 분류 카테고리 설명:\n\n1. **LEGAL_CONSULT (법률상담)**\n   - 설명: 부동산 관련 법률, 권리, 의무에 대한 질문\n   - 예시:\n     * 단순: "전세금 5% 인상이 가능한가요?", "임대차계약 갱신 거부할 수 있나요?"\n     * 복합: "전세금 인상 가능한지 확인하고 법적 근거도 알려주세요"\n   - 키워드: 법, 전세, 임대, 보증금, 계약, 권리, 의무, 갱신, 임차인, 임대인, 법률, 규정, 조항\n   - 필요한 처리: 법률 데이터베이스 검색, 관련 법조항 찾기\n\n2. **MARKET_INQUIRY (시세조회)**\n   - 설명: 부동산 시장 가격, 시세, 거래 동향에 대한 질문\n   - 예시:\n     * 단순: "강남구 아파트 전세 시세 알려주세요", "서초동 매매가 얼마나 올랐나요?"\n     * 복합: "강남구 시세 확인하고 대출 가능 금액도 계산해줘"\n   - 키워드: 시세, 가격, 매매가, 전세가, 월세, 시장, 동향, 평균, 지역명, 상승률, 하락률\n   - 필요한 처리: 부동산 시세 데이터 조회, 지역별 가격 분석\n\n3. **LOAN_CONSULT (대출상담)**\n   - 설명: 주택담보대출, 전세자금대출 등 금융 관련 질문\n   - 예시:\n     * 단순: "전세자금대출 한도가 얼마인가요?", "LTV가 뭔가요?"\n     * 복합: "대출 한도 확인하고 금리 비교도 해주세요"\n   - 키워드: 대출, 금리, 한도, 조건, 상환, LTV, DTI, DSR, 담보, 금융, 은행\n   - 필요한 처리: 대출 상품 조회, 금리 정보 검색, 한도 계산\n\n4. **CONTRACT_CREATION (계약서작성)**\n   - 설명: 새로운 계약서나 문서를 작성해달라는 요청\n   - 예시:\n     * 단순: "임대차계약서 작성해주세요", "전세계약서 초안 만들어주세요"\n     * 복합: "계약서 작성하고 주의사항도 검토해주세요"\n   - 키워드: 작성, 만들, 생성, 초안, 계약서, 문서, 양식\n   - 필요한 처리: 문서 생성 에이전트 호출, 템플릿 기반 작성\n\n5. **CONTRACT_REVIEW (계약서검토)**\n   - 설명: 기존 계약서나 문서를 검토해달라는 요청\n   - 예시:\n     * 단순: "이 계약서 검토해주세요", "특약사항 문제없나요?"\n     * 복합: "계약서 검토하고 수정사항도 제안해주세요"\n   - 키워드: 검토, 확인, 점검, 리뷰, 분석해, 살펴봐, 체크\n   - 필요한 처리: 문서 분석, 위험 요소 식별, 개선사항 제안\n\n6. **COMPREHENSIVE (종합분석)**\n   - 설명: 여러 측면을 종합적으로 분석해달라는 요청, 또는 복잡한 상황에 대한 해결책 요청\n   - 예시:\n     * 단순: "이 물건 전체적으로 분석해주세요"\n     * 복합: "시세, 법률, 대출 모두 검토해서 종합 의견 주세요"\n     * 해결형: "10년 거주했는데 전세금 3억을 10억으로 올려달래. 어떻게 해야 해?"\n     * 상황+해결: "집주인이 계약 갱신 거부했어. 법적으로 어떻게 대응해야 할까?"\n   - 키워드: 종합, 전체, 모든, 전반적, 종합적, 평가, 분석, 어떻게, 방법, 해결, 대처\n   - 패턴: 구체적 상황 설명 + "어떻게/방법/해결" 요청\n   - 필요한 처리: 다중 데이터 소스 통합 분석, 상황 평가, 해결책 제시\n\n7. **RISK_ANALYSIS (리스크분석)**\n   - 설명: 위험 요소나 주의사항에 대한 질문\n   - 예시:\n     * 단순: "이 계약 위험한가요?", "주의할 점 알려주세요"\n     * 복합: "리스크 분석하고 대안도 제시해주세요"\n   - 키워드: 위험, 리스크, 주의, 문제점, 조심, 걱정, 우려\n   - 필요한 처리: 위험 요소 분석, 주의사항 추출\n\n8. **UNCLEAR (불분명)**\n   - 설명: 의도를 명확히 파악하기 어려운 질문\n   - 예시: "이거 좀 봐주세요", "어떻게 해야 할까요?", "도와주세요"\n   - 처리: 추가 질문으로 의도 명확화 필요\n\n9. **IRRELEVANT (무관)**\n   - 설명: 부동산과 전혀 관련 없는 질문\n   - 예시: "날씨 어때?", "저녁 뭐 먹지?", "주식 추천해줘"\n   - 처리: 부동산 관련 질문을 유도\n\n## 복합 질문 예시와 분석 (CoT 적용):\n\n### 예시 1: "강남구 아파트 시세 알려주고 전세자금대출 가능한지도 확인해줘"\n**CoT 분석**:\n1. 구조: 두 개의 요청 ("시세" + "대출")\n2. 유형: 정보 확인형 (둘 다)\n3. 복잡도: 중 (두 가지 독립적 조회)\n4. 필요 처리: 검색 + 계산/분석\n\n**결론**:\n- 주 의도: MARKET_INQUIRY (시세 조회가 먼저 필요)\n- 부가 의도: LOAN_CONSULT (대출 확인)\n- 분해: ["강남구 아파트 시세 조회", "전세자금대출 가능 여부 확인"]\n\n### 예시 2: "이 계약서 검토해서 위험한 부분 있는지 알려주고 수정 제안도 해줘"\n**CoT 분석**:\n1. 구조: 검토 + 위험 평가 + 수정안\n2. 유형: 평가/판단형 + 해결책 요청형\n3. 복잡도: 고 (3단계 처리)\n4. 필요 처리: 검토 + 분석 + 문서 생성\n\n**결론**:\n- 주 의도: CONTRACT_REVIEW (계약서 검토)\n- 부가 의도: RISK_ANALYSIS (위험 분석)\n- 분해: ["계약서 전체 검토", "위험 요소 식별", "수정사항 제안"]\n\n### 예시 3: "집주인이 짜증나, 10년 살았는데 전세금 3억을 10억으로 올려달래. 법적으로 해결방법 알려줘"\n**CoT 분석**:\n1. 구조: 상황 설명 (10년 거주, 3억→10억) + 해결책 요청\n2. 유형: 해결책 요청형 (단순 정보 X)\n3. 복잡도: 고 (구체적 상황 + 수치 비교 + 법률 + 대응방안)\n4. 필요 처리: 법률 검색 + 상황 분석 + 해결책 제시\n\n**결론**:\n- 주 의도: COMPREHENSIVE (복잡한 상황에 대한 종합 해결)\n- 부가 의도: LEGAL_CONSULT, RISK_ANALYSIS\n- 분해: ["전세금 인상 한도 법률 조회", "3억→10억 인상의 타당성 분석", "구체적 대응 방안 제시"]\n- **이유**: "법적으로"라는 키워드가 있지만, 단순 법률 확인이 아니라 구체적 상황에 대한 해결책을 요구하므로 COMPREHENSIVE\n\n### 예시 4: "전세금 인상률 상한이 얼마야?"\n**CoT 분석**:\n1. 구조: 단순 사실 확인\n2. 유형: 정보 확인형\n3. 복잡도: 저 (단일 개념)\n4. 필요 처리: 검색만\n\n**결론**:\n- 주 의도: LEGAL_CONSULT (법률 정보 조회)\n- 부가 의도: 없음\n- 분해: 필요 없음\n\n## 응답 형식 (JSON 형식으로 응답):\n\n```json\n{\n    "intent": "LEGAL_CONSULT",\n    "confidence": 0.9,\n    "keywords": ["전세금", "인상", "제한"],\n    "sub_intents": [],\n    "is_compound": false,\n    "decomposed_tasks": [],\n    "entities": {\n        "location": "강남구",\n        "price": "5억",\n        "contract_type": "전세",\n        "date": "2024년",\n        "area": "84㎡",\n        "action_verbs": ["확인", "검토"]\n    },\n    "reasoning": "전세금 인상에 대한 법률 질문이므로 LEGAL_CONSULT로 분류"\n}\n```\n\n응답 규칙:\n- intent: 위 9개 카테고리 중 하나 (대문자_언더스코어 형식)\n- confidence: 0.0~1.0 (0.8 이상이면 매우 확실, 0.5 미만이면 불확실)\n- keywords: 추출된 주요 키워드 목록\n- sub_intents: 복합 질문일 경우 부가적인 의도들\n- is_compound: 복합 질문 여부 (true/false)\n- decomposed_tasks: 복합 질문을 분해한 개별 작업들\n- entities: 추출된 엔티티 정보\n- reasoning: **반드시 CoT 5단계를 거쳐 분석한 과정을 포함** (구조 파악 → 유형 판단 → 복잡도 평가 → 필요 처리 → 최종 검증)\n\n## reasoning 작성 예시:\n"1단계(구조): 상황 설명(10년 거주, 3억→10억) + 해결책 요청 포함.\n2단계(유형): 해결책 요청형 - 단순 정보가 아닌 대응방안 필요.\n3단계(복잡도): 고 - 구체적 수치 비교와 복잡한 상황.\n4단계(처리): 법률 검색 + 상황 분석 + 해결책 제시 필요.\n5단계(검증): LEGAL_CONSULT만으로는 불충분, 종합적 분석 필요 → COMPREHENSIVE 선택"\n\n## 판단 가이드:\n- 여러 의도가 섞여있다면, 가장 주된 의도를 intent에, 나머지를 sub_intents에 기록\n- "그리고", "또한", "함께", "같이" 등의 연결어가 있으면 복합 질문일 가능성 높음\n- 법률 관련 키워드가 있으면 LEGAL_CONSULT 우선\n- 가격/시세 언급이 명확하면 MARKET_INQUIRY\n- 계약서라는 단어와 함께 "작성/만들기"가 있으면 CONTRACT_CREATION\n- 계약서라는 단어와 함께 "검토/확인"이 있으면 CONTRACT_REVIEW\n- 불확실하면 confidence를 낮게 설정하고 UNCLEAR 선택\n- 복합 질문은 is_compound를 true로 설정하고 개별 작업으로 분해\n\n분석할 질문: 강남 전세 시세 확인하고 월세 전환 비교해줘'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 16:03:01,732 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 16:03:01,733 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 16:03:01,733 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 16:03:01,733 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 16:03:01,733 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 16:03:01,733 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 16:03:06,734 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 07:03:06 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'4553'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'4581'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9940'), (b'x-ratelimit-remaining-tokens', b'197241'), (b'x-ratelimit-reset-requests', b'8m30.424s'), (b'x-ratelimit-reset-tokens', b'827ms'), (b'x-request-id', b'req_2984567056114813a76875e7577c5e80'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b0e8bae103091-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 16:03:06,734 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 16:03:06,734 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 16:03:06,735 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 16:03:06,735 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 16:03:06,735 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 16:03:06,735 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 07:03:06 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '4553', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '4581', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9940', 'x-ratelimit-remaining-tokens': '197241', 'x-ratelimit-reset-requests': '8m30.424s', 'x-ratelimit-reset-tokens': '827ms', 'x-request-id': 'req_2984567056114813a76875e7577c5e80', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b0e8bae103091-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 16:03:06,735 - openai._base_client - DEBUG - request_id: req_2984567056114813a76875e7577c5e80
2025-10-05 16:03:06,735 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: intent_analysis | Model: gpt-4o-mini-2024-07-18 | Tokens: 3443 (prompt: 3184, completion: 259)
2025-10-05 16:03:06,735 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM Intent Analysis Result: {'intent': 'COMPREHENSIVE', 'confidence': 0.85, 'keywords': ['강남', '전세', '시세', '월세', '비교'], 'sub_intents': ['MARKET_INQUIRY', 'MARKET_INQUIRY'], 'is_compound': True, 'decomposed_tasks': ['강남 전세 시세 확인', '강남 월세 시세 확인', '전세와 월세 비교'], 'entities': {'location': '강남', 'contract_type': '전세', 'action_verbs': ['확인', '비교']}, 'reasoning': '1단계(구조): 강남 전세 시세 확인 요청 + 월세 전환 비교 요청 포함. 2단계(유형): 두 가지 정보 요청이므로 각각 MARKET_INQUIRY로 분류. 3단계(복잡도): 중 - 두 가지 독립적 조회가 필요. 4단계(처리): 각각의 시세 조회 후 비교 분석 필요. 5단계(검증): 두 가지 요청이 있으므로 COMPREHENSIVE로 분류.'}
2025-10-05 16:03:06,736 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-4d682156-d76c-49d5-aa96-d1cdc2c1d606', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 Agent 선택 전문가입니다.\n사용자의 요청에 가장 적합한 Agent/Team을 선택하는 것이 목표입니다.\n\n## 현재 상황\n\n**사용자 질문:** 강남 전세 시세 확인하고 월세 전환 비교해줘\n**분석된 의도:** 종합분석\n**추출된 키워드:** [\'강남\', \'전세\', \'시세\', \'월세\', \'비교\']\n\n## 사용 가능한 Agent/Team 정보\n\n{\'search_team\': {\'name\': \'search_team\', \'capabilities\': \'법률 검색, 부동산 시세 조회, 대출 상품 검색\', \'tools\': [\'legal_search\', \'market_data\', \'loan_data\'], \'use_cases\': [\'법률 상담\', \'시세 조회\', \'대출 정보\']}, \'analysis_team\': {\'name\': \'analysis_team\', \'capabilities\': \'데이터 분석, 리스크 평가, 인사이트 생성, 추천\', \'tools\': [\'data_analyzer\', \'risk_evaluator\'], \'use_cases\': [\'시장 분석\', \'리스크 평가\', \'투자 분석\']}, \'document_team\': {\'name\': \'document_team\', \'capabilities\': \'계약서 작성, 문서 생성, 문서 검토\', \'tools\': [\'document_generator\', \'contract_reviewer\'], \'use_cases\': [\'계약서 작성\', \'문서 검토\']}}\n\n## Agent 역할 및 상세 가이드\n\n### 1. search_team (검색 팀)\n- **주요 기능**: 정보 검색 및 데이터 수집\n- **전문 분야**:\n  * 법률 정보 검색 (전세법, 임대차보호법, 부동산 관련 법규)\n  * 부동산 시세 조회 (매매가, 전세가, 월세, 실거래가)\n  * 대출 상품 정보 검색 (금리, 한도, 조건)\n  * 지역 정보 및 인프라 조회\n- **도구**: legal_search, market_data, loan_data\n- **적합한 작업**: 정보 조회, 데이터 수집, 법률 확인, 시세 파악\n- **예시**:\n  * "전세금 5% 인상 가능한가요?"\n  * "강남구 아파트 전세 시세"\n  * "전세자금대출 한도 얼마?"\n\n### 2. analysis_team (분석 팀)\n- **주요 기능**: 데이터 분석 및 평가\n- **전문 분야**:\n  * 시장 동향 분석 (상승률, 하락률, 추세)\n  * 리스크 평가 (계약, 투자 위험도)\n  * 투자 수익률 계산 (ROI, 월세 수익률)\n  * 대출 한도 및 조건 분석 (LTV, DTI, DSR)\n  * 비교 분석 (지역별, 상품별)\n- **도구**: data_analyzer, risk_evaluator, calculator\n- **적합한 작업**: 데이터 분석, 리스크 평가, 계산, 비교, 예측\n- **의존성**: 보통 search_team의 데이터가 필요\n- **예시**:\n  * "이 지역 투자 가치 분석해줘"\n  * "계약 리스크 평가해줘"\n  * "대출 가능 금액 계산해줘"\n\n### 3. document_team (문서 팀)\n- **주요 기능**: 문서 생성 및 관리\n- **전문 분야**:\n  * 계약서 작성 (임대차, 매매, 전세)\n  * 문서 템플릿 관리\n  * 특약사항 생성\n  * 계약서 수정안 작성\n  * 법률 문서 검토\n- **도구**: document_generator, contract_template, contract_reviewer\n- **적합한 작업**: 문서 작성, 계약서 생성, 문서 수정, 검토\n- **예시**:\n  * "임대차계약서 작성해줘"\n  * "특약사항 추가해줘"\n  * "계약서 수정안 만들어줘"\n\n## Chain-of-Thought Agent 선택 프로세스\n\n다음 단계를 **순서대로** 따라 최적의 Agent 조합을 선택하세요:\n\n### 1단계: 질문 요구사항 파악\n- 단순 정보 조회인가? → search_team만 필요\n- 판단/평가가 필요한가? → search + analysis 필요\n- 해결책 제시가 필요한가? → search + analysis 필요\n- 문서 생성이 필요한가? → document_team 추가\n\n### 2단계: 작업 복잡도 판단\n- **단순** (검색만): "~이 뭐야?", "~알려줘" → search_team\n- **중간** (검색+판단): "~괜찮아?", "~적절해?" → search + analysis\n- **복잡** (종합 해결): 구체적 상황 + "어떻게 해야 해?" → search + analysis\n\n### 3단계: 의존성 분석\n- 독립적 작업: 단일 팀으로 처리 가능\n- 순차적 의존: 이전 결과 필요 → 여러 팀 순서대로\n- 병렬 가능: 동시 조회 가능 → coordination: "parallel"\n\n### 4단계: 최종 검증\n- 선택한 팀들로 질문에 완전히 답변 가능한가?\n- 불필요한 팀이 포함되지 않았는가?\n- 순서가 논리적인가? (데이터 흐름 고려)\n\n### 중요 원칙:\n- **법률 키워드만으로 판단하지 말 것**: "법적으로 어떻게 해야 해?" = 법률 검색 + 분석 필요\n- **상황 설명 + 해결책 요청** = 반드시 analysis_team 포함\n- **구체적 수치 비교** (3억→10억 같은) = analysis_team 필요\n\n## 의도별 Agent 매핑 가이드 (기본 가이드 - CoT로 조정 가능)\n\n| 의도 (Intent) | 기본 조합 | 상황별 조정 |\n|--------------|-----------|-------------|\n| LEGAL_CONSULT | ["search_team"] | 해결책 요청시 → + analysis_team |\n| MARKET_INQUIRY | ["search_team"] | 비교/평가시 → + analysis_team |\n| LOAN_CONSULT | ["search_team", "analysis_team"] | 계산 필수 |\n| CONTRACT_CREATION | ["document_team"] | 검토 후 작성 → search + document |\n| CONTRACT_REVIEW | ["search_team", "analysis_team"] | 법률 검토 + 리스크 분석 |\n| COMPREHENSIVE | ["search_team", "analysis_team"] | **항상 분석 포함** |\n| RISK_ANALYSIS | ["analysis_team"] | 법률 근거 필요시 → search + analysis |\n| UNCLEAR | ["search_team", "analysis_team"] | 포괄적 대응 |\n\n**중요**: 위 매핑은 **기본 가이드**일 뿐입니다.\n실제 질문의 내용(CoT 분석 결과)에 따라 조정하세요!\n\n## 복합 질문 처리 예시 (CoT 적용)\n\n### 예시 1: 순차적 처리\n질문: "강남구 시세 확인하고 투자 가치 분석해줘"\n**CoT 분석**:\n1. 요구사항: 시세 조회 + 투자 가치 평가\n2. 복잡도: 중간 (검색 + 분석)\n3. 의존성: 시세 데이터 → 투자 분석 (순차)\n4. 검증: search만으로는 "투자 가치 평가" 불가능\n\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "1단계: 시세 조회+투자 평가 필요. 2단계: 중간 복잡도. 3단계: 순차 의존. 4단계: search로 시세 수집 후 analysis로 투자 가치 평가 필요",\n    "coordination": "sequential"\n}\n```\n\n### 예시 2: 단순 정보 조회\n질문: "전세금 인상률 한도가 얼마야?"\n**CoT 분석**:\n1. 요구사항: 단순 사실 확인\n2. 복잡도: 낮음 (정보 확인형)\n3. 의존성: 없음\n4. 검증: search_team만으로 충분\n\n```json\n{\n    "selected_agents": ["search_team"],\n    "reasoning": "1단계: 단순 정보 조회. 2단계: 저복잡도. 3단계: 독립적. 4단계: 법률 검색만으로 답변 가능",\n    "coordination": "single"\n}\n```\n\n### 예시 3: 해결책 요청 (핵심 예시!)\n질문: "집주인이 전세금 3억을 10억으로 올려달래. 법적으로 어떻게 해야 해?"\n의도: COMPREHENSIVE\n**CoT 분석**:\n1. 요구사항: 상황 설명 + 해결책 요청\n2. 복잡도: 높음 (구체적 상황 + 수치 비교)\n3. 의존성: 법률 확인 → 상황 분석 → 해결책 제시\n4. 검증: "법적으로"만 보고 search만 선택하면 불충분! 해결책 제시 필요\n\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "1단계: 법률 + 상황 분석 + 해결책 필요. 2단계: 고복잡도(3억→10억 비정상). 3단계: 순차(법률 확인 후 타당성 분석). 4단계: \'어떻게 해야\' = 단순 법률 조회 아님, 분석 필수",\n    "coordination": "sequential",\n    "confidence": 0.95\n}\n```\n\n## 응답 형식 (JSON)\n\n```json\n{\n    "selected_agents": ["선택된 agent/team 목록"],\n    "reasoning": "선택 이유를 구체적으로 설명. 각 Agent의 역할과 처리 순서 포함",\n    "coordination": "single/sequential/parallel/pipeline",\n    "dependencies": {"agent2": ["agent1"]},\n    "estimated_time": 30,\n    "confidence": 0.9\n}\n```\n\n## 선택 가이드라인\n\n1. **최소 Agent 원칙**: 가능한 적은 수의 Agent로 처리\n2. **전문성 우선**: 해당 작업에 가장 전문적인 Agent 선택\n3. **효율성 고려**: 병렬 처리 가능한 경우 명시\n4. **의존성 관리**: 데이터 흐름을 고려한 순서 지정\n5. **폴백 전략**: 불확실한 경우 ["search_team", "analysis_team"] 조합\n\n## 주의사항\n\n- selected_agents는 반드시 배열 형태\n- Agent 이름은 정확히: "search_team", "analysis_team", "document_team"\n- 최소 1개, 최대 3개 선택\n- 순서는 실행 우선순위 (앞에 있을수록 먼저 실행)\n- reasoning은 상세하고 논리적으로 작성\n- coordination 필드로 실행 방식 명시\n- 복합 질문의 경우 의존성 관계 명확히 표시'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 16:03:06,736 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 16:03:06,736 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 16:03:06,737 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 16:03:06,737 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 16:03:06,737 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 16:03:06,737 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 16:03:13,085 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 07:03:13 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'6139'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'6160'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9941'), (b'x-ratelimit-remaining-tokens', b'197883'), (b'x-ratelimit-reset-requests', b'8m25.435s'), (b'x-ratelimit-reset-tokens', b'635ms'), (b'x-request-id', b'req_c3809a3226d64146b010b48ba2b12ff5'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b0eaaf92c3091-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 16:03:13,086 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 16:03:13,086 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 16:03:13,089 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 16:03:13,089 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 16:03:13,089 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 16:03:13,089 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 07:03:13 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '6139', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '6160', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9941', 'x-ratelimit-remaining-tokens': '197883', 'x-ratelimit-reset-requests': '8m25.435s', 'x-ratelimit-reset-tokens': '635ms', 'x-request-id': 'req_c3809a3226d64146b010b48ba2b12ff5', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b0eaaf92c3091-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 16:03:13,089 - openai._base_client - DEBUG - request_id: req_c3809a3226d64146b010b48ba2b12ff5
2025-10-05 16:03:13,090 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: agent_selection | Model: gpt-4o-mini-2024-07-18 | Tokens: 2556 (prompt: 2368, completion: 188)
2025-10-05 16:03:13,090 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM agent selection reasoning: 1단계: 강남 전세 시세 확인과 월세 전환 비교가 필요하므로, 시세 조회(search_team)와 비교 분석(analysis_team)이 필요합니다. 2단계: 중간 복잡도로, 시세 데이터를 수집한 후 이를 바탕으로 월세 전환에 대한 분석이 필요합니다. 3단계: 시세 조회 후 분석이 이루어져야 하므로 순차적 의존성이 있습니다. 4단계: 단순 시세 조회만으로는 월세 전환 비교를 할 수 없으므로, 두 팀이 모두 필요합니다.
2025-10-05 16:03:13,090 - app.service_agent.cognitive_agents.planning_agent - INFO - ✅ Primary LLM selected agents: ['search_team', 'analysis_team']
2025-10-05 16:03:13,090 - app.service_agent.cognitive_agents.planning_agent - INFO - Intent analyzed: 종합분석 (confidence: 0.85)
2025-10-05 16:03:13,090 - app.service_agent.cognitive_agents.query_decomposer - INFO - Decomposing query: 강남 전세 시세 확인하고 월세 전환 비교해줘...
2025-10-05 16:03:13,090 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-142abe86-0bd3-43c8-9b01-aedb7c6a7e1a', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 질문 분해 전문가입니다.\n복잡한 사용자 질문을 독립적으로 처리 가능한 작업 단위로 분해하는 것이 목표입니다.\n\n## Chain-of-Thought 분해 프로세스:\n\n### 1단계: 복합 질문 여부 판단\n- 단순 정보 조회만 필요한가? → is_compound: false\n- **다음 중 하나라도 해당하면 is_compound: true**:\n  * "그리고", "그 다음", "한 후" 같은 연결어로 여러 요청 연결\n  * 명시적으로 2개 이상의 작업 요청 (예: "시세 확인하고 대출 계산해줘")\n  * 상황 설명 + 해결책 요청 (예: "3억→10억 올려달래. 어떻게 해야 해?")\n  * 해결책을 위해 여러 단계 처리 필요 (검색 → 분석 → 제안)\n\n### 2단계: 필요 작업 식별\n- 정보 수집이 필요한가? → search 작업\n- 평가/판단이 필요한가? → analysis 작업\n- 문서 생성이 필요한가? → generation 작업\n- **해결책 요청**인가? → search + analysis (최소 2개)\n\n### 3단계: 작업 순서 결정\n- 독립적 작업: 병렬 가능\n- 이전 결과 필요: 순차 실행 (depends_on 설정)\n\n## 중요 원칙:\n1. 각 작업은 하나의 명확한 목표를 가져야 합니다\n2. 작업 간 의존성을 명확히 파악해야 합니다\n3. 병렬 처리 가능한 작업은 구분해야 합니다\n4. **주의**: "어떻게 해야", "방법 알려줘" 같은 해결책 요청은 복합 질문!\n\n## 작업 유형 (type):\n- search: 정보 검색 (법률, 시세, 대출 정보 등)\n- analysis: 데이터 분석 (리스크 평가, 시장 분석 등)\n- generation: 문서 생성 (계약서 작성 등)\n- review: 검토/평가 (계약서 검토, 조건 확인 등)\n- calculation: 계산/산출 (대출 한도, 세금 등)\n- comparison: 비교 분석 (여러 옵션 비교)\n\n## 담당 팀 (agent):\n- search_team: 법률, 시세, 대출 정보 검색\n- analysis_team: 데이터 분석, 리스크 평가, 계산\n- document_team: 문서 생성, 계약서 작성\n\n## 학습 예시:\n\n### 예시 1: 복합 질문 (순차적)\n질문: "강남구 아파트 시세 확인하고 대출 가능 금액 계산해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "강남구 아파트 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "대출 가능 금액 계산",\n            "type": "calculation",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "required_data": {"price": "task_0.result.price"},\n            "estimated_time": 15\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "시세 정보가 있어야 대출 금액 계산이 가능하므로 순차 실행"\n}\n```\n\n### 예시 2: 복합 질문 (병렬 가능)\n질문: "이 지역 전세 시세와 매매 시세 모두 알려주고 비교 분석해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "전세 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "매매 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "전세/매매 시세 비교 분석",\n            "type": "comparison",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0", "task_1"],\n            "required_data": {\n                "lease_price": "task_0.result",\n                "sale_price": "task_1.result"\n            },\n            "estimated_time": 25\n        }\n    ],\n    "execution_mode": "mixed",\n    "parallel_groups": [["task_0", "task_1"], ["task_2"]],\n    "reasoning": "시세 조회는 독립적이므로 병렬 처리, 비교는 두 결과 필요"\n}\n```\n\n### 예시 3: 복합 질문 (3단계 이상)\n질문: "이 계약서 검토해서 위험한 부분 찾고 수정안 만들어서 최종 계약서 작성해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "계약서 내용 전체 검토",\n            "type": "review",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 30\n        },\n        {\n            "description": "위험 요소 및 문제점 분석",\n            "type": "analysis",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "estimated_time": 25\n        },\n        {\n            "description": "수정안 제안 생성",\n            "type": "generation",\n            "agent": "document_team",\n            "priority": 3,\n            "depends_on": ["task_1"],\n            "estimated_time": 20\n        },\n        {\n            "description": "최종 계약서 작성",\n            "type": "generation",\n            "agent": "document_team",\n            "priority": 4,\n            "depends_on": ["task_2"],\n            "estimated_time": 30\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "각 단계가 이전 결과에 의존하므로 순차 실행 필요"\n}\n```\n\n### 예시 4: 단순 질문 (분해 불필요)\n질문: "전세금 인상률 상한이 얼마야?"\n분해:\n```json\n{\n    "is_compound": false,\n    "sub_tasks": [\n        {\n            "description": "전세금 인상률 상한 법률 정보 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 15\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "단일 정보 조회 요청으로 분해 불필요"\n}\n```\n\n### 예시 5: 조건부 실행\n질문: "이 물건 시세 확인하고 적정가면 대출 상담도 받고 싶어"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "물건 시세 조회 및 적정성 평가",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 25\n        },\n        {\n            "description": "대출 상담 정보 제공",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "optional": true,\n            "context": {"condition": "if_reasonable_price"},\n            "estimated_time": 20\n        }\n    ],\n    "execution_mode": "conditional",\n    "reasoning": "시세 확인 결과에 따라 대출 상담 진행 여부 결정"\n}\n```\n\n### 예시 6: 상황 설명 + 해결책 요청 (핵심 패턴!)\n질문: "집주인이 전세금 3억을 10억으로 올려달래. 법적으로 어떻게 해야 해?"\n**CoT 분석**:\n1. 질문 분석: 상황 설명 + 해결책 요청\n2. 연결어: 없지만, "어떻게 해야" = 해결책 요청\n3. 의존성: 법률 확인 → 상황 분석 → 대응 방안\n4. 복합 여부: **YES** (해결책을 위해 여러 단계 필요)\n\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "전세금 인상 한도 관련 법률 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "3억→10억 인상의 법적 타당성 및 적정성 분석",\n            "type": "analysis",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "required_data": {"legal_limit": "task_0.result", "current": 300000000, "requested": 1000000000},\n            "estimated_time": 25\n        },\n        {\n            "description": "구체적 대응 방안 및 해결책 제시",\n            "type": "analysis",\n            "agent": "analysis_team",\n            "priority": 3,\n            "depends_on": ["task_1"],\n            "estimated_time": 20\n        }\n    ],\n    "execution_mode": "sequential",\n    "confidence": 0.95,\n    "reasoning": "상황 설명+해결책 요청 패턴. \'어떻게 해야\'는 단순 정보 조회가 아닌 종합 해결책 필요. 법률 조회 → 상황 분석 → 해결책 제시 3단계 순차 처리"\n}\n```\n\n## Chain-of-Thought 프로세스:\n\n1. **질문 분석**: 어떤 정보나 작업을 요구하는가?\n2. **연결어 확인**: "그리고", "또한", "해서", "한 후" 등이 있는가?\n3. **의존성 파악**: 어떤 작업이 다른 작업의 결과를 필요로 하는가?\n4. **병렬성 판단**: 독립적으로 실행 가능한 작업이 있는가?\n5. **최적화**: 불필요한 분해는 없는가?\n\n## 응답 형식 (JSON):\n\n{\n    "is_compound": true/false,\n    "sub_tasks": [\n        {\n            "description": "작업 설명",\n            "type": "작업 유형",\n            "agent": "담당 팀",\n            "priority": 우선순위 (1이 가장 높음),\n            "depends_on": ["선행 작업 ID 리스트"],\n            "required_data": {"필요한 데이터 매핑"},\n            "estimated_time": 예상 소요 시간(초),\n            "optional": true/false,\n            "context": {"추가 컨텍스트"}\n        }\n    ],\n    "execution_mode": "sequential/parallel/mixed/conditional",\n    "parallel_groups": [["병렬 실행 가능한 작업 ID 그룹"]],\n    "confidence": 0.0-1.0,\n    "reasoning": "분해 결정의 이유와 근거"\n}\n\n## 분해 가이드라인:\n\n1. **분해가 필요한 경우**:\n   - 여러 종류의 정보를 요청하는 경우\n   - 순차적 처리가 필요한 경우 (A의 결과로 B 수행)\n   - 서로 다른 팀의 전문성이 필요한 경우\n\n2. **분해가 불필요한 경우**:\n   - 단일 정보 조회\n   - 단순한 질문-답변\n   - 하나의 팀에서 완전히 처리 가능한 경우\n\n3. **병렬 처리 기준**:\n   - 서로 독립적인 정보 조회\n   - 의존성이 없는 분석 작업\n   - 동시에 진행해도 충돌하지 않는 작업\n\n4. **우선순위 설정**:\n   - 의존성이 없는 작업: priority 1\n   - 1차 의존 작업: priority 2\n   - 2차 의존 작업: priority 3\n   - 이런 식으로 증가\n\n현재 의도: 종합분석\n추출된 엔티티: {\'location\': \'강남\', \'contract_type\': \'전세\', \'action_verbs\': [\'확인\', \'비교\']}\n\n분석할 질문: 강남 전세 시세 확인하고 월세 전환 비교해줘'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 16:03:13,091 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 16:03:13,091 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 16:03:13,091 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 16:03:13,091 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 16:03:13,091 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 16:03:13,091 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 16:03:17,347 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 07:03:17 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'4030'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'4053'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9940'), (b'x-ratelimit-remaining-tokens', b'197313'), (b'x-ratelimit-reset-requests', b'8m36.345s'), (b'x-ratelimit-reset-tokens', b'805ms'), (b'x-request-id', b'req_0ded66a64bf244bf913e796d6b8d23a0'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b0ed2ad403091-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 16:03:17,347 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 16:03:17,347 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 16:03:17,350 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 16:03:17,350 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 16:03:17,350 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 16:03:17,350 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 07:03:17 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '4030', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '4053', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9940', 'x-ratelimit-remaining-tokens': '197313', 'x-ratelimit-reset-requests': '8m36.345s', 'x-ratelimit-reset-tokens': '805ms', 'x-request-id': 'req_0ded66a64bf244bf913e796d6b8d23a0', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b0ed2ad403091-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 16:03:17,351 - openai._base_client - DEBUG - request_id: req_0ded66a64bf244bf913e796d6b8d23a0
2025-10-05 16:03:17,351 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: query_decomposition | Model: gpt-4o-mini-2024-07-18 | Tokens: 3003 (prompt: 2721, completion: 282)
2025-10-05 16:03:17,351 - app.service_agent.cognitive_agents.query_decomposer - INFO - Successfully decomposed into 3 tasks
2025-10-05 16:03:17,351 - app.service_agent.cognitive_agents.planning_agent - INFO - Query decomposed into 3 tasks
2025-10-05 16:03:17,351 - app.service_agent.cognitive_agents.planning_agent - WARNING - Plan validation errors: ["Agent 'search_team' not found in registry", "Agent 'search_team' not found in registry", "Agent 'analysis_team' depends on missing 'task_0'", "Agent 'analysis_team' depends on missing 'task_1'", "Agent 'analysis_team' not found in registry"]
2025-10-05 16:03:17,351 - app.service_agent.cognitive_agents.planning_agent - INFO - Optimizing execution plan
2025-10-05 16:03:17,351 - app.service_agent.cognitive_agents.planning_agent - INFO - Comprehensive plan created: Intent: 종합분석 (confidence: 0.85) | Strategy: sequential | Agents: search_team, search_team, analysis_team | Estimated time: 45.0s
2025-10-05 16:03:17,351 - __main__ - INFO -   전략: sequential
2025-10-05 16:03:17,351 - __main__ - INFO -   단계 수: 3
2025-10-05 16:03:17,351 - __main__ - INFO - 
✓ 테스트 성공 (소요시간: 30.19초)
2025-10-05 16:03:17,351 - __main__ - INFO - 
================================================================================
2025-10-05 16:03:17,351 - __main__ - INFO - [34] 복합 질문 테스트: D014
2025-10-05 16:03:17,351 - __main__ - INFO - 질문: 보증금 반환 절차 알려주고 법적 보호 방법도 설명해줘
2025-10-05 16:03:17,351 - __main__ - INFO - ================================================================================
2025-10-05 16:03:17,351 - __main__ - INFO - 
[Step 1] Intent 분석...
2025-10-05 16:03:17,351 - app.service_agent.cognitive_agents.planning_agent - INFO - Analyzing intent for query: 보증금 반환 절차 알려주고 법적 보호 방법도 설명해줘...
2025-10-05 16:03:17,352 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-32fc4f5f-e993-4b05-8091-274ac16af21e', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 의도 분석 전문가입니다.\n사용자의 질문을 정확히 이해하고, 어떤 종류의 도움이 필요한지 분류해야 합니다.\n\n## Chain-of-Thought 분석 프로세스\n\n질문을 분석할 때 다음 단계를 **순서대로** 따르세요:\n\n### 1단계: 질문 구조 파악\n- 단순 정보 요청인가? (예: "~이 뭐야?", "~알려줘")\n- 상황 설명이 포함되어 있는가? (배경, 현재 상태)\n- 구체적 수치나 데이터가 있는가? (금액, 비율, 기간 등)\n- 문제 해결을 요구하는가? (예: "어떻게 해야 해?", "방법 알려줘")\n\n### 2단계: 요청 유형 판단\n- **정보 확인형**: 사실, 개념, 규정 확인 → 검색만으로 충분\n- **평가/판단형**: "괜찮아?", "적절해?", "문제있어?" → 검색 + 분석 필요\n- **해결책 요청형**: "어떻게?", "방법?", "대처?" → 검색 + 분석 + 제안 필요\n- **비교/선택형**: "A vs B", "어느게 나아?" → 검색 + 분석(비교) 필요\n\n### 3단계: 복잡도 평가\n- **저**: 단일 개념/사실 확인 (예: "전세금 인상률 한도?")\n- **중**: 특정 상황 + 판단 (예: "3억을 5억으로 올려달래. 가능해?")\n- **고**: 복잡한 상황 + 여러 조건 + 해결책 (예: "10년 거주, 3억→10억 요구. 어떻게 해야 해?")\n\n### 4단계: 필요한 처리 결정\n- **검색만**: 정보 확인형 + 저복잡도\n- **검색+분석**: 평가/판단형 OR 중복잡도 OR 수치 비교 포함\n- **종합처리**: 해결책 요청형 OR 고복잡도 OR 여러 조건 동시 고려\n\n### 5단계: 최종 검증\n- 선택한 의도로 사용자 질문에 완전히 답변 가능한가?\n- 단순 정보 제공으로 끝나는가, 아니면 추가 분석/판단이 필요한가?\n- 상황 설명이 있으면서 "해결", "방법", "어떻게" 등이 있으면 → COMPREHENSIVE 고려\n\n## 중요: 복합 질문 처리\n복합적인 질문(여러 의도가 섞인 질문)의 경우, 가장 핵심적인 의도를 파악하되,\nsub_intents 필드에 부가적인 의도들도 함께 기록해주세요.\n\n**특히 주의**:\n- 법률 키워드가 있어도, "해결방법", "어떻게 해야" 같은 표현이 있으면 단순 LEGAL_CONSULT가 아닐 수 있음\n- 구체적 상황(금액, 기간 등) + 해결책 요구 = COMPREHENSIVE 또는 복합 의도로 분류\n\n## 분류 카테고리 설명:\n\n1. **LEGAL_CONSULT (법률상담)**\n   - 설명: 부동산 관련 법률, 권리, 의무에 대한 질문\n   - 예시:\n     * 단순: "전세금 5% 인상이 가능한가요?", "임대차계약 갱신 거부할 수 있나요?"\n     * 복합: "전세금 인상 가능한지 확인하고 법적 근거도 알려주세요"\n   - 키워드: 법, 전세, 임대, 보증금, 계약, 권리, 의무, 갱신, 임차인, 임대인, 법률, 규정, 조항\n   - 필요한 처리: 법률 데이터베이스 검색, 관련 법조항 찾기\n\n2. **MARKET_INQUIRY (시세조회)**\n   - 설명: 부동산 시장 가격, 시세, 거래 동향에 대한 질문\n   - 예시:\n     * 단순: "강남구 아파트 전세 시세 알려주세요", "서초동 매매가 얼마나 올랐나요?"\n     * 복합: "강남구 시세 확인하고 대출 가능 금액도 계산해줘"\n   - 키워드: 시세, 가격, 매매가, 전세가, 월세, 시장, 동향, 평균, 지역명, 상승률, 하락률\n   - 필요한 처리: 부동산 시세 데이터 조회, 지역별 가격 분석\n\n3. **LOAN_CONSULT (대출상담)**\n   - 설명: 주택담보대출, 전세자금대출 등 금융 관련 질문\n   - 예시:\n     * 단순: "전세자금대출 한도가 얼마인가요?", "LTV가 뭔가요?"\n     * 복합: "대출 한도 확인하고 금리 비교도 해주세요"\n   - 키워드: 대출, 금리, 한도, 조건, 상환, LTV, DTI, DSR, 담보, 금융, 은행\n   - 필요한 처리: 대출 상품 조회, 금리 정보 검색, 한도 계산\n\n4. **CONTRACT_CREATION (계약서작성)**\n   - 설명: 새로운 계약서나 문서를 작성해달라는 요청\n   - 예시:\n     * 단순: "임대차계약서 작성해주세요", "전세계약서 초안 만들어주세요"\n     * 복합: "계약서 작성하고 주의사항도 검토해주세요"\n   - 키워드: 작성, 만들, 생성, 초안, 계약서, 문서, 양식\n   - 필요한 처리: 문서 생성 에이전트 호출, 템플릿 기반 작성\n\n5. **CONTRACT_REVIEW (계약서검토)**\n   - 설명: 기존 계약서나 문서를 검토해달라는 요청\n   - 예시:\n     * 단순: "이 계약서 검토해주세요", "특약사항 문제없나요?"\n     * 복합: "계약서 검토하고 수정사항도 제안해주세요"\n   - 키워드: 검토, 확인, 점검, 리뷰, 분석해, 살펴봐, 체크\n   - 필요한 처리: 문서 분석, 위험 요소 식별, 개선사항 제안\n\n6. **COMPREHENSIVE (종합분석)**\n   - 설명: 여러 측면을 종합적으로 분석해달라는 요청, 또는 복잡한 상황에 대한 해결책 요청\n   - 예시:\n     * 단순: "이 물건 전체적으로 분석해주세요"\n     * 복합: "시세, 법률, 대출 모두 검토해서 종합 의견 주세요"\n     * 해결형: "10년 거주했는데 전세금 3억을 10억으로 올려달래. 어떻게 해야 해?"\n     * 상황+해결: "집주인이 계약 갱신 거부했어. 법적으로 어떻게 대응해야 할까?"\n   - 키워드: 종합, 전체, 모든, 전반적, 종합적, 평가, 분석, 어떻게, 방법, 해결, 대처\n   - 패턴: 구체적 상황 설명 + "어떻게/방법/해결" 요청\n   - 필요한 처리: 다중 데이터 소스 통합 분석, 상황 평가, 해결책 제시\n\n7. **RISK_ANALYSIS (리스크분석)**\n   - 설명: 위험 요소나 주의사항에 대한 질문\n   - 예시:\n     * 단순: "이 계약 위험한가요?", "주의할 점 알려주세요"\n     * 복합: "리스크 분석하고 대안도 제시해주세요"\n   - 키워드: 위험, 리스크, 주의, 문제점, 조심, 걱정, 우려\n   - 필요한 처리: 위험 요소 분석, 주의사항 추출\n\n8. **UNCLEAR (불분명)**\n   - 설명: 의도를 명확히 파악하기 어려운 질문\n   - 예시: "이거 좀 봐주세요", "어떻게 해야 할까요?", "도와주세요"\n   - 처리: 추가 질문으로 의도 명확화 필요\n\n9. **IRRELEVANT (무관)**\n   - 설명: 부동산과 전혀 관련 없는 질문\n   - 예시: "날씨 어때?", "저녁 뭐 먹지?", "주식 추천해줘"\n   - 처리: 부동산 관련 질문을 유도\n\n## 복합 질문 예시와 분석 (CoT 적용):\n\n### 예시 1: "강남구 아파트 시세 알려주고 전세자금대출 가능한지도 확인해줘"\n**CoT 분석**:\n1. 구조: 두 개의 요청 ("시세" + "대출")\n2. 유형: 정보 확인형 (둘 다)\n3. 복잡도: 중 (두 가지 독립적 조회)\n4. 필요 처리: 검색 + 계산/분석\n\n**결론**:\n- 주 의도: MARKET_INQUIRY (시세 조회가 먼저 필요)\n- 부가 의도: LOAN_CONSULT (대출 확인)\n- 분해: ["강남구 아파트 시세 조회", "전세자금대출 가능 여부 확인"]\n\n### 예시 2: "이 계약서 검토해서 위험한 부분 있는지 알려주고 수정 제안도 해줘"\n**CoT 분석**:\n1. 구조: 검토 + 위험 평가 + 수정안\n2. 유형: 평가/판단형 + 해결책 요청형\n3. 복잡도: 고 (3단계 처리)\n4. 필요 처리: 검토 + 분석 + 문서 생성\n\n**결론**:\n- 주 의도: CONTRACT_REVIEW (계약서 검토)\n- 부가 의도: RISK_ANALYSIS (위험 분석)\n- 분해: ["계약서 전체 검토", "위험 요소 식별", "수정사항 제안"]\n\n### 예시 3: "집주인이 짜증나, 10년 살았는데 전세금 3억을 10억으로 올려달래. 법적으로 해결방법 알려줘"\n**CoT 분석**:\n1. 구조: 상황 설명 (10년 거주, 3억→10억) + 해결책 요청\n2. 유형: 해결책 요청형 (단순 정보 X)\n3. 복잡도: 고 (구체적 상황 + 수치 비교 + 법률 + 대응방안)\n4. 필요 처리: 법률 검색 + 상황 분석 + 해결책 제시\n\n**결론**:\n- 주 의도: COMPREHENSIVE (복잡한 상황에 대한 종합 해결)\n- 부가 의도: LEGAL_CONSULT, RISK_ANALYSIS\n- 분해: ["전세금 인상 한도 법률 조회", "3억→10억 인상의 타당성 분석", "구체적 대응 방안 제시"]\n- **이유**: "법적으로"라는 키워드가 있지만, 단순 법률 확인이 아니라 구체적 상황에 대한 해결책을 요구하므로 COMPREHENSIVE\n\n### 예시 4: "전세금 인상률 상한이 얼마야?"\n**CoT 분석**:\n1. 구조: 단순 사실 확인\n2. 유형: 정보 확인형\n3. 복잡도: 저 (단일 개념)\n4. 필요 처리: 검색만\n\n**결론**:\n- 주 의도: LEGAL_CONSULT (법률 정보 조회)\n- 부가 의도: 없음\n- 분해: 필요 없음\n\n## 응답 형식 (JSON 형식으로 응답):\n\n```json\n{\n    "intent": "LEGAL_CONSULT",\n    "confidence": 0.9,\n    "keywords": ["전세금", "인상", "제한"],\n    "sub_intents": [],\n    "is_compound": false,\n    "decomposed_tasks": [],\n    "entities": {\n        "location": "강남구",\n        "price": "5억",\n        "contract_type": "전세",\n        "date": "2024년",\n        "area": "84㎡",\n        "action_verbs": ["확인", "검토"]\n    },\n    "reasoning": "전세금 인상에 대한 법률 질문이므로 LEGAL_CONSULT로 분류"\n}\n```\n\n응답 규칙:\n- intent: 위 9개 카테고리 중 하나 (대문자_언더스코어 형식)\n- confidence: 0.0~1.0 (0.8 이상이면 매우 확실, 0.5 미만이면 불확실)\n- keywords: 추출된 주요 키워드 목록\n- sub_intents: 복합 질문일 경우 부가적인 의도들\n- is_compound: 복합 질문 여부 (true/false)\n- decomposed_tasks: 복합 질문을 분해한 개별 작업들\n- entities: 추출된 엔티티 정보\n- reasoning: **반드시 CoT 5단계를 거쳐 분석한 과정을 포함** (구조 파악 → 유형 판단 → 복잡도 평가 → 필요 처리 → 최종 검증)\n\n## reasoning 작성 예시:\n"1단계(구조): 상황 설명(10년 거주, 3억→10억) + 해결책 요청 포함.\n2단계(유형): 해결책 요청형 - 단순 정보가 아닌 대응방안 필요.\n3단계(복잡도): 고 - 구체적 수치 비교와 복잡한 상황.\n4단계(처리): 법률 검색 + 상황 분석 + 해결책 제시 필요.\n5단계(검증): LEGAL_CONSULT만으로는 불충분, 종합적 분석 필요 → COMPREHENSIVE 선택"\n\n## 판단 가이드:\n- 여러 의도가 섞여있다면, 가장 주된 의도를 intent에, 나머지를 sub_intents에 기록\n- "그리고", "또한", "함께", "같이" 등의 연결어가 있으면 복합 질문일 가능성 높음\n- 법률 관련 키워드가 있으면 LEGAL_CONSULT 우선\n- 가격/시세 언급이 명확하면 MARKET_INQUIRY\n- 계약서라는 단어와 함께 "작성/만들기"가 있으면 CONTRACT_CREATION\n- 계약서라는 단어와 함께 "검토/확인"이 있으면 CONTRACT_REVIEW\n- 불확실하면 confidence를 낮게 설정하고 UNCLEAR 선택\n- 복합 질문은 is_compound를 true로 설정하고 개별 작업으로 분해\n\n분석할 질문: 보증금 반환 절차 알려주고 법적 보호 방법도 설명해줘'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 16:03:17,352 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 16:03:17,352 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 16:03:17,353 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 16:03:17,353 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 16:03:17,353 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 16:03:17,353 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 16:03:22,059 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 07:03:22 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'4496'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'4511'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9939'), (b'x-ratelimit-remaining-tokens', b'197237'), (b'x-ratelimit-reset-requests', b'8m40.734s'), (b'x-ratelimit-reset-tokens', b'828ms'), (b'x-request-id', b'req_21f4a779a9824a0fb35d5a88d9df8423'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b0eed4aeb3091-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 16:03:22,059 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 16:03:22,059 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 16:03:22,062 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 16:03:22,062 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 16:03:22,062 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 16:03:22,062 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 07:03:22 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '4496', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '4511', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9939', 'x-ratelimit-remaining-tokens': '197237', 'x-ratelimit-reset-requests': '8m40.734s', 'x-ratelimit-reset-tokens': '828ms', 'x-request-id': 'req_21f4a779a9824a0fb35d5a88d9df8423', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b0eed4aeb3091-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 16:03:22,062 - openai._base_client - DEBUG - request_id: req_21f4a779a9824a0fb35d5a88d9df8423
2025-10-05 16:03:22,062 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: intent_analysis | Model: gpt-4o-mini-2024-07-18 | Tokens: 3437 (prompt: 3186, completion: 251)
2025-10-05 16:03:22,062 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM Intent Analysis Result: {'intent': 'COMPREHENSIVE', 'confidence': 0.85, 'keywords': ['보증금', '반환', '법적', '보호', '절차'], 'sub_intents': ['LEGAL_CONSULT'], 'is_compound': True, 'decomposed_tasks': ['보증금 반환 절차 설명', '법적 보호 방법 설명'], 'entities': {'action_verbs': ['알려주고', '설명해줘']}, 'reasoning': '1단계(구조): 보증금 반환 절차와 법적 보호 방법 요청 포함. 2단계(유형): 해결책 요청형 - 단순 정보가 아닌 구체적인 절차와 방법 필요. 3단계(복잡도): 중 - 두 가지 독립적 요청이지만 관련성이 높음. 4단계(처리): 보증금 반환 절차와 법적 보호 방법에 대한 정보 검색 및 분석 필요. 5단계(검증): 두 가지 요청이 서로 연결되어 있으므로 COMPREHENSIVE로 분류.'}
2025-10-05 16:03:22,063 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-588ad937-7e6f-41e7-a1fa-7dfee17ca1c2', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 Agent 선택 전문가입니다.\n사용자의 요청에 가장 적합한 Agent/Team을 선택하는 것이 목표입니다.\n\n## 현재 상황\n\n**사용자 질문:** 보증금 반환 절차 알려주고 법적 보호 방법도 설명해줘\n**분석된 의도:** 종합분석\n**추출된 키워드:** [\'보증금\', \'반환\', \'법적\', \'보호\', \'절차\']\n\n## 사용 가능한 Agent/Team 정보\n\n{\'search_team\': {\'name\': \'search_team\', \'capabilities\': \'법률 검색, 부동산 시세 조회, 대출 상품 검색\', \'tools\': [\'legal_search\', \'market_data\', \'loan_data\'], \'use_cases\': [\'법률 상담\', \'시세 조회\', \'대출 정보\']}, \'analysis_team\': {\'name\': \'analysis_team\', \'capabilities\': \'데이터 분석, 리스크 평가, 인사이트 생성, 추천\', \'tools\': [\'data_analyzer\', \'risk_evaluator\'], \'use_cases\': [\'시장 분석\', \'리스크 평가\', \'투자 분석\']}, \'document_team\': {\'name\': \'document_team\', \'capabilities\': \'계약서 작성, 문서 생성, 문서 검토\', \'tools\': [\'document_generator\', \'contract_reviewer\'], \'use_cases\': [\'계약서 작성\', \'문서 검토\']}}\n\n## Agent 역할 및 상세 가이드\n\n### 1. search_team (검색 팀)\n- **주요 기능**: 정보 검색 및 데이터 수집\n- **전문 분야**:\n  * 법률 정보 검색 (전세법, 임대차보호법, 부동산 관련 법규)\n  * 부동산 시세 조회 (매매가, 전세가, 월세, 실거래가)\n  * 대출 상품 정보 검색 (금리, 한도, 조건)\n  * 지역 정보 및 인프라 조회\n- **도구**: legal_search, market_data, loan_data\n- **적합한 작업**: 정보 조회, 데이터 수집, 법률 확인, 시세 파악\n- **예시**:\n  * "전세금 5% 인상 가능한가요?"\n  * "강남구 아파트 전세 시세"\n  * "전세자금대출 한도 얼마?"\n\n### 2. analysis_team (분석 팀)\n- **주요 기능**: 데이터 분석 및 평가\n- **전문 분야**:\n  * 시장 동향 분석 (상승률, 하락률, 추세)\n  * 리스크 평가 (계약, 투자 위험도)\n  * 투자 수익률 계산 (ROI, 월세 수익률)\n  * 대출 한도 및 조건 분석 (LTV, DTI, DSR)\n  * 비교 분석 (지역별, 상품별)\n- **도구**: data_analyzer, risk_evaluator, calculator\n- **적합한 작업**: 데이터 분석, 리스크 평가, 계산, 비교, 예측\n- **의존성**: 보통 search_team의 데이터가 필요\n- **예시**:\n  * "이 지역 투자 가치 분석해줘"\n  * "계약 리스크 평가해줘"\n  * "대출 가능 금액 계산해줘"\n\n### 3. document_team (문서 팀)\n- **주요 기능**: 문서 생성 및 관리\n- **전문 분야**:\n  * 계약서 작성 (임대차, 매매, 전세)\n  * 문서 템플릿 관리\n  * 특약사항 생성\n  * 계약서 수정안 작성\n  * 법률 문서 검토\n- **도구**: document_generator, contract_template, contract_reviewer\n- **적합한 작업**: 문서 작성, 계약서 생성, 문서 수정, 검토\n- **예시**:\n  * "임대차계약서 작성해줘"\n  * "특약사항 추가해줘"\n  * "계약서 수정안 만들어줘"\n\n## Chain-of-Thought Agent 선택 프로세스\n\n다음 단계를 **순서대로** 따라 최적의 Agent 조합을 선택하세요:\n\n### 1단계: 질문 요구사항 파악\n- 단순 정보 조회인가? → search_team만 필요\n- 판단/평가가 필요한가? → search + analysis 필요\n- 해결책 제시가 필요한가? → search + analysis 필요\n- 문서 생성이 필요한가? → document_team 추가\n\n### 2단계: 작업 복잡도 판단\n- **단순** (검색만): "~이 뭐야?", "~알려줘" → search_team\n- **중간** (검색+판단): "~괜찮아?", "~적절해?" → search + analysis\n- **복잡** (종합 해결): 구체적 상황 + "어떻게 해야 해?" → search + analysis\n\n### 3단계: 의존성 분석\n- 독립적 작업: 단일 팀으로 처리 가능\n- 순차적 의존: 이전 결과 필요 → 여러 팀 순서대로\n- 병렬 가능: 동시 조회 가능 → coordination: "parallel"\n\n### 4단계: 최종 검증\n- 선택한 팀들로 질문에 완전히 답변 가능한가?\n- 불필요한 팀이 포함되지 않았는가?\n- 순서가 논리적인가? (데이터 흐름 고려)\n\n### 중요 원칙:\n- **법률 키워드만으로 판단하지 말 것**: "법적으로 어떻게 해야 해?" = 법률 검색 + 분석 필요\n- **상황 설명 + 해결책 요청** = 반드시 analysis_team 포함\n- **구체적 수치 비교** (3억→10억 같은) = analysis_team 필요\n\n## 의도별 Agent 매핑 가이드 (기본 가이드 - CoT로 조정 가능)\n\n| 의도 (Intent) | 기본 조합 | 상황별 조정 |\n|--------------|-----------|-------------|\n| LEGAL_CONSULT | ["search_team"] | 해결책 요청시 → + analysis_team |\n| MARKET_INQUIRY | ["search_team"] | 비교/평가시 → + analysis_team |\n| LOAN_CONSULT | ["search_team", "analysis_team"] | 계산 필수 |\n| CONTRACT_CREATION | ["document_team"] | 검토 후 작성 → search + document |\n| CONTRACT_REVIEW | ["search_team", "analysis_team"] | 법률 검토 + 리스크 분석 |\n| COMPREHENSIVE | ["search_team", "analysis_team"] | **항상 분석 포함** |\n| RISK_ANALYSIS | ["analysis_team"] | 법률 근거 필요시 → search + analysis |\n| UNCLEAR | ["search_team", "analysis_team"] | 포괄적 대응 |\n\n**중요**: 위 매핑은 **기본 가이드**일 뿐입니다.\n실제 질문의 내용(CoT 분석 결과)에 따라 조정하세요!\n\n## 복합 질문 처리 예시 (CoT 적용)\n\n### 예시 1: 순차적 처리\n질문: "강남구 시세 확인하고 투자 가치 분석해줘"\n**CoT 분석**:\n1. 요구사항: 시세 조회 + 투자 가치 평가\n2. 복잡도: 중간 (검색 + 분석)\n3. 의존성: 시세 데이터 → 투자 분석 (순차)\n4. 검증: search만으로는 "투자 가치 평가" 불가능\n\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "1단계: 시세 조회+투자 평가 필요. 2단계: 중간 복잡도. 3단계: 순차 의존. 4단계: search로 시세 수집 후 analysis로 투자 가치 평가 필요",\n    "coordination": "sequential"\n}\n```\n\n### 예시 2: 단순 정보 조회\n질문: "전세금 인상률 한도가 얼마야?"\n**CoT 분석**:\n1. 요구사항: 단순 사실 확인\n2. 복잡도: 낮음 (정보 확인형)\n3. 의존성: 없음\n4. 검증: search_team만으로 충분\n\n```json\n{\n    "selected_agents": ["search_team"],\n    "reasoning": "1단계: 단순 정보 조회. 2단계: 저복잡도. 3단계: 독립적. 4단계: 법률 검색만으로 답변 가능",\n    "coordination": "single"\n}\n```\n\n### 예시 3: 해결책 요청 (핵심 예시!)\n질문: "집주인이 전세금 3억을 10억으로 올려달래. 법적으로 어떻게 해야 해?"\n의도: COMPREHENSIVE\n**CoT 분석**:\n1. 요구사항: 상황 설명 + 해결책 요청\n2. 복잡도: 높음 (구체적 상황 + 수치 비교)\n3. 의존성: 법률 확인 → 상황 분석 → 해결책 제시\n4. 검증: "법적으로"만 보고 search만 선택하면 불충분! 해결책 제시 필요\n\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "1단계: 법률 + 상황 분석 + 해결책 필요. 2단계: 고복잡도(3억→10억 비정상). 3단계: 순차(법률 확인 후 타당성 분석). 4단계: \'어떻게 해야\' = 단순 법률 조회 아님, 분석 필수",\n    "coordination": "sequential",\n    "confidence": 0.95\n}\n```\n\n## 응답 형식 (JSON)\n\n```json\n{\n    "selected_agents": ["선택된 agent/team 목록"],\n    "reasoning": "선택 이유를 구체적으로 설명. 각 Agent의 역할과 처리 순서 포함",\n    "coordination": "single/sequential/parallel/pipeline",\n    "dependencies": {"agent2": ["agent1"]},\n    "estimated_time": 30,\n    "confidence": 0.9\n}\n```\n\n## 선택 가이드라인\n\n1. **최소 Agent 원칙**: 가능한 적은 수의 Agent로 처리\n2. **전문성 우선**: 해당 작업에 가장 전문적인 Agent 선택\n3. **효율성 고려**: 병렬 처리 가능한 경우 명시\n4. **의존성 관리**: 데이터 흐름을 고려한 순서 지정\n5. **폴백 전략**: 불확실한 경우 ["search_team", "analysis_team"] 조합\n\n## 주의사항\n\n- selected_agents는 반드시 배열 형태\n- Agent 이름은 정확히: "search_team", "analysis_team", "document_team"\n- 최소 1개, 최대 3개 선택\n- 순서는 실행 우선순위 (앞에 있을수록 먼저 실행)\n- reasoning은 상세하고 논리적으로 작성\n- coordination 필드로 실행 방식 명시\n- 복합 질문의 경우 의존성 관계 명확히 표시'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 16:03:22,063 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 16:03:22,063 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 16:03:22,064 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 16:03:22,064 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 16:03:22,064 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 16:03:22,064 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 16:03:26,922 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 07:03:26 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'4640'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'4673'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9939'), (b'x-ratelimit-remaining-tokens', b'197879'), (b'x-ratelimit-reset-requests', b'8m44.668s'), (b'x-ratelimit-reset-tokens', b'636ms'), (b'x-request-id', b'req_22ffcae487b94104b61fab412052e7e2'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b0f0abb443091-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 16:03:26,922 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 16:03:26,922 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 16:03:26,931 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 16:03:26,931 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 16:03:26,931 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 16:03:26,931 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 07:03:26 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '4640', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '4673', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9939', 'x-ratelimit-remaining-tokens': '197879', 'x-ratelimit-reset-requests': '8m44.668s', 'x-ratelimit-reset-tokens': '636ms', 'x-request-id': 'req_22ffcae487b94104b61fab412052e7e2', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b0f0abb443091-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 16:03:26,931 - openai._base_client - DEBUG - request_id: req_22ffcae487b94104b61fab412052e7e2
2025-10-05 16:03:26,932 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: agent_selection | Model: gpt-4o-mini-2024-07-18 | Tokens: 2560 (prompt: 2371, completion: 189)
2025-10-05 16:03:26,932 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM agent selection reasoning: 1단계: 사용자는 보증금 반환 절차와 법적 보호 방법을 요청하고 있습니다. 이는 단순 정보 조회가 아니라 법률적 조언과 상황 분석이 필요한 복합적인 질문입니다. 2단계: 복잡도는 높으며, 법률 정보 검색 후 그에 대한 분석이 필요합니다. 3단계: 법률 정보를 검색한 후, 그 정보를 바탕으로 법적 보호 방법에 대한 분석이 필요하므로 순차적으로 진행해야 합니다. 4단계: 단순 법률 조회로는 충분하지 않으며, 분석이 필수적입니다.
2025-10-05 16:03:26,932 - app.service_agent.cognitive_agents.planning_agent - INFO - ✅ Primary LLM selected agents: ['search_team', 'analysis_team']
2025-10-05 16:03:26,932 - __main__ - INFO -   의도: 종합분석
2025-10-05 16:03:26,932 - __main__ - INFO -   신뢰도: 0.85
2025-10-05 16:03:26,932 - __main__ - INFO -   추천 Agent: ['search_team', 'analysis_team']
2025-10-05 16:03:26,932 - __main__ - INFO - 
[Step 2] Query Decomposition...
2025-10-05 16:03:26,932 - app.service_agent.cognitive_agents.query_decomposer - INFO - Decomposing query: 보증금 반환 절차 알려주고 법적 보호 방법도 설명해줘...
2025-10-05 16:03:26,932 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-b598624a-6f8a-41bb-b45c-d0625d71abef', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 질문 분해 전문가입니다.\n복잡한 사용자 질문을 독립적으로 처리 가능한 작업 단위로 분해하는 것이 목표입니다.\n\n## Chain-of-Thought 분해 프로세스:\n\n### 1단계: 복합 질문 여부 판단\n- 단순 정보 조회만 필요한가? → is_compound: false\n- **다음 중 하나라도 해당하면 is_compound: true**:\n  * "그리고", "그 다음", "한 후" 같은 연결어로 여러 요청 연결\n  * 명시적으로 2개 이상의 작업 요청 (예: "시세 확인하고 대출 계산해줘")\n  * 상황 설명 + 해결책 요청 (예: "3억→10억 올려달래. 어떻게 해야 해?")\n  * 해결책을 위해 여러 단계 처리 필요 (검색 → 분석 → 제안)\n\n### 2단계: 필요 작업 식별\n- 정보 수집이 필요한가? → search 작업\n- 평가/판단이 필요한가? → analysis 작업\n- 문서 생성이 필요한가? → generation 작업\n- **해결책 요청**인가? → search + analysis (최소 2개)\n\n### 3단계: 작업 순서 결정\n- 독립적 작업: 병렬 가능\n- 이전 결과 필요: 순차 실행 (depends_on 설정)\n\n## 중요 원칙:\n1. 각 작업은 하나의 명확한 목표를 가져야 합니다\n2. 작업 간 의존성을 명확히 파악해야 합니다\n3. 병렬 처리 가능한 작업은 구분해야 합니다\n4. **주의**: "어떻게 해야", "방법 알려줘" 같은 해결책 요청은 복합 질문!\n\n## 작업 유형 (type):\n- search: 정보 검색 (법률, 시세, 대출 정보 등)\n- analysis: 데이터 분석 (리스크 평가, 시장 분석 등)\n- generation: 문서 생성 (계약서 작성 등)\n- review: 검토/평가 (계약서 검토, 조건 확인 등)\n- calculation: 계산/산출 (대출 한도, 세금 등)\n- comparison: 비교 분석 (여러 옵션 비교)\n\n## 담당 팀 (agent):\n- search_team: 법률, 시세, 대출 정보 검색\n- analysis_team: 데이터 분석, 리스크 평가, 계산\n- document_team: 문서 생성, 계약서 작성\n\n## 학습 예시:\n\n### 예시 1: 복합 질문 (순차적)\n질문: "강남구 아파트 시세 확인하고 대출 가능 금액 계산해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "강남구 아파트 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "대출 가능 금액 계산",\n            "type": "calculation",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "required_data": {"price": "task_0.result.price"},\n            "estimated_time": 15\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "시세 정보가 있어야 대출 금액 계산이 가능하므로 순차 실행"\n}\n```\n\n### 예시 2: 복합 질문 (병렬 가능)\n질문: "이 지역 전세 시세와 매매 시세 모두 알려주고 비교 분석해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "전세 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "매매 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "전세/매매 시세 비교 분석",\n            "type": "comparison",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0", "task_1"],\n            "required_data": {\n                "lease_price": "task_0.result",\n                "sale_price": "task_1.result"\n            },\n            "estimated_time": 25\n        }\n    ],\n    "execution_mode": "mixed",\n    "parallel_groups": [["task_0", "task_1"], ["task_2"]],\n    "reasoning": "시세 조회는 독립적이므로 병렬 처리, 비교는 두 결과 필요"\n}\n```\n\n### 예시 3: 복합 질문 (3단계 이상)\n질문: "이 계약서 검토해서 위험한 부분 찾고 수정안 만들어서 최종 계약서 작성해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "계약서 내용 전체 검토",\n            "type": "review",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 30\n        },\n        {\n            "description": "위험 요소 및 문제점 분석",\n            "type": "analysis",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "estimated_time": 25\n        },\n        {\n            "description": "수정안 제안 생성",\n            "type": "generation",\n            "agent": "document_team",\n            "priority": 3,\n            "depends_on": ["task_1"],\n            "estimated_time": 20\n        },\n        {\n            "description": "최종 계약서 작성",\n            "type": "generation",\n            "agent": "document_team",\n            "priority": 4,\n            "depends_on": ["task_2"],\n            "estimated_time": 30\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "각 단계가 이전 결과에 의존하므로 순차 실행 필요"\n}\n```\n\n### 예시 4: 단순 질문 (분해 불필요)\n질문: "전세금 인상률 상한이 얼마야?"\n분해:\n```json\n{\n    "is_compound": false,\n    "sub_tasks": [\n        {\n            "description": "전세금 인상률 상한 법률 정보 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 15\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "단일 정보 조회 요청으로 분해 불필요"\n}\n```\n\n### 예시 5: 조건부 실행\n질문: "이 물건 시세 확인하고 적정가면 대출 상담도 받고 싶어"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "물건 시세 조회 및 적정성 평가",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 25\n        },\n        {\n            "description": "대출 상담 정보 제공",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "optional": true,\n            "context": {"condition": "if_reasonable_price"},\n            "estimated_time": 20\n        }\n    ],\n    "execution_mode": "conditional",\n    "reasoning": "시세 확인 결과에 따라 대출 상담 진행 여부 결정"\n}\n```\n\n### 예시 6: 상황 설명 + 해결책 요청 (핵심 패턴!)\n질문: "집주인이 전세금 3억을 10억으로 올려달래. 법적으로 어떻게 해야 해?"\n**CoT 분석**:\n1. 질문 분석: 상황 설명 + 해결책 요청\n2. 연결어: 없지만, "어떻게 해야" = 해결책 요청\n3. 의존성: 법률 확인 → 상황 분석 → 대응 방안\n4. 복합 여부: **YES** (해결책을 위해 여러 단계 필요)\n\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "전세금 인상 한도 관련 법률 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "3억→10억 인상의 법적 타당성 및 적정성 분석",\n            "type": "analysis",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "required_data": {"legal_limit": "task_0.result", "current": 300000000, "requested": 1000000000},\n            "estimated_time": 25\n        },\n        {\n            "description": "구체적 대응 방안 및 해결책 제시",\n            "type": "analysis",\n            "agent": "analysis_team",\n            "priority": 3,\n            "depends_on": ["task_1"],\n            "estimated_time": 20\n        }\n    ],\n    "execution_mode": "sequential",\n    "confidence": 0.95,\n    "reasoning": "상황 설명+해결책 요청 패턴. \'어떻게 해야\'는 단순 정보 조회가 아닌 종합 해결책 필요. 법률 조회 → 상황 분석 → 해결책 제시 3단계 순차 처리"\n}\n```\n\n## Chain-of-Thought 프로세스:\n\n1. **질문 분석**: 어떤 정보나 작업을 요구하는가?\n2. **연결어 확인**: "그리고", "또한", "해서", "한 후" 등이 있는가?\n3. **의존성 파악**: 어떤 작업이 다른 작업의 결과를 필요로 하는가?\n4. **병렬성 판단**: 독립적으로 실행 가능한 작업이 있는가?\n5. **최적화**: 불필요한 분해는 없는가?\n\n## 응답 형식 (JSON):\n\n{\n    "is_compound": true/false,\n    "sub_tasks": [\n        {\n            "description": "작업 설명",\n            "type": "작업 유형",\n            "agent": "담당 팀",\n            "priority": 우선순위 (1이 가장 높음),\n            "depends_on": ["선행 작업 ID 리스트"],\n            "required_data": {"필요한 데이터 매핑"},\n            "estimated_time": 예상 소요 시간(초),\n            "optional": true/false,\n            "context": {"추가 컨텍스트"}\n        }\n    ],\n    "execution_mode": "sequential/parallel/mixed/conditional",\n    "parallel_groups": [["병렬 실행 가능한 작업 ID 그룹"]],\n    "confidence": 0.0-1.0,\n    "reasoning": "분해 결정의 이유와 근거"\n}\n\n## 분해 가이드라인:\n\n1. **분해가 필요한 경우**:\n   - 여러 종류의 정보를 요청하는 경우\n   - 순차적 처리가 필요한 경우 (A의 결과로 B 수행)\n   - 서로 다른 팀의 전문성이 필요한 경우\n\n2. **분해가 불필요한 경우**:\n   - 단일 정보 조회\n   - 단순한 질문-답변\n   - 하나의 팀에서 완전히 처리 가능한 경우\n\n3. **병렬 처리 기준**:\n   - 서로 독립적인 정보 조회\n   - 의존성이 없는 분석 작업\n   - 동시에 진행해도 충돌하지 않는 작업\n\n4. **우선순위 설정**:\n   - 의존성이 없는 작업: priority 1\n   - 1차 의존 작업: priority 2\n   - 2차 의존 작업: priority 3\n   - 이런 식으로 증가\n\n현재 의도: 종합분석\n추출된 엔티티: None\n\n분석할 질문: 보증금 반환 절차 알려주고 법적 보호 방법도 설명해줘'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 16:03:26,933 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 16:03:26,933 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 16:03:26,933 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 16:03:26,933 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 16:03:26,933 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 16:03:26,933 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 16:03:30,036 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 07:03:30 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'2880'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'2905'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9938'), (b'x-ratelimit-remaining-tokens', b'197331'), (b'x-ratelimit-reset-requests', b'8m48.428s'), (b'x-ratelimit-reset-tokens', b'800ms'), (b'x-request-id', b'req_f987306445a348d6a74eac619a7f1482'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b0f292a563091-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 16:03:30,036 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 16:03:30,036 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 16:03:30,040 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 16:03:30,040 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 16:03:30,040 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 16:03:30,040 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 07:03:30 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '2880', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '2905', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9938', 'x-ratelimit-remaining-tokens': '197331', 'x-ratelimit-reset-requests': '8m48.428s', 'x-ratelimit-reset-tokens': '800ms', 'x-request-id': 'req_f987306445a348d6a74eac619a7f1482', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b0f292a563091-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 16:03:30,040 - openai._base_client - DEBUG - request_id: req_f987306445a348d6a74eac619a7f1482
2025-10-05 16:03:30,041 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: query_decomposition | Model: gpt-4o-mini-2024-07-18 | Tokens: 2886 (prompt: 2696, completion: 190)
2025-10-05 16:03:30,041 - app.service_agent.cognitive_agents.query_decomposer - INFO - Successfully decomposed into 2 tasks
2025-10-05 16:03:30,041 - __main__ - INFO -   복합 질문: True
2025-10-05 16:03:30,041 - __main__ - INFO -   작업 수: 2
2025-10-05 16:03:30,041 - __main__ - INFO -   실행 모드: sequential
2025-10-05 16:03:30,041 - __main__ - INFO -     - task_0: 보증금 반환 절차에 대한 정보 조회 (search_team)
2025-10-05 16:03:30,041 - __main__ - INFO -     - task_1: 보증금 반환 시 법적 보호 방법 분석 (analysis_team)
2025-10-05 16:03:30,041 - __main__ - INFO - 
[Step 3] Comprehensive Plan 생성...
2025-10-05 16:03:30,041 - app.service_agent.cognitive_agents.planning_agent - INFO - Creating comprehensive plan for query: 보증금 반환 절차 알려주고 법적 보호 방법도 설명해줘...
2025-10-05 16:03:30,041 - app.service_agent.cognitive_agents.planning_agent - INFO - Analyzing intent for query: 보증금 반환 절차 알려주고 법적 보호 방법도 설명해줘...
2025-10-05 16:03:30,042 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-c1e22eab-8e5b-4813-9b4a-918286fe770d', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 의도 분석 전문가입니다.\n사용자의 질문을 정확히 이해하고, 어떤 종류의 도움이 필요한지 분류해야 합니다.\n\n## Chain-of-Thought 분석 프로세스\n\n질문을 분석할 때 다음 단계를 **순서대로** 따르세요:\n\n### 1단계: 질문 구조 파악\n- 단순 정보 요청인가? (예: "~이 뭐야?", "~알려줘")\n- 상황 설명이 포함되어 있는가? (배경, 현재 상태)\n- 구체적 수치나 데이터가 있는가? (금액, 비율, 기간 등)\n- 문제 해결을 요구하는가? (예: "어떻게 해야 해?", "방법 알려줘")\n\n### 2단계: 요청 유형 판단\n- **정보 확인형**: 사실, 개념, 규정 확인 → 검색만으로 충분\n- **평가/판단형**: "괜찮아?", "적절해?", "문제있어?" → 검색 + 분석 필요\n- **해결책 요청형**: "어떻게?", "방법?", "대처?" → 검색 + 분석 + 제안 필요\n- **비교/선택형**: "A vs B", "어느게 나아?" → 검색 + 분석(비교) 필요\n\n### 3단계: 복잡도 평가\n- **저**: 단일 개념/사실 확인 (예: "전세금 인상률 한도?")\n- **중**: 특정 상황 + 판단 (예: "3억을 5억으로 올려달래. 가능해?")\n- **고**: 복잡한 상황 + 여러 조건 + 해결책 (예: "10년 거주, 3억→10억 요구. 어떻게 해야 해?")\n\n### 4단계: 필요한 처리 결정\n- **검색만**: 정보 확인형 + 저복잡도\n- **검색+분석**: 평가/판단형 OR 중복잡도 OR 수치 비교 포함\n- **종합처리**: 해결책 요청형 OR 고복잡도 OR 여러 조건 동시 고려\n\n### 5단계: 최종 검증\n- 선택한 의도로 사용자 질문에 완전히 답변 가능한가?\n- 단순 정보 제공으로 끝나는가, 아니면 추가 분석/판단이 필요한가?\n- 상황 설명이 있으면서 "해결", "방법", "어떻게" 등이 있으면 → COMPREHENSIVE 고려\n\n## 중요: 복합 질문 처리\n복합적인 질문(여러 의도가 섞인 질문)의 경우, 가장 핵심적인 의도를 파악하되,\nsub_intents 필드에 부가적인 의도들도 함께 기록해주세요.\n\n**특히 주의**:\n- 법률 키워드가 있어도, "해결방법", "어떻게 해야" 같은 표현이 있으면 단순 LEGAL_CONSULT가 아닐 수 있음\n- 구체적 상황(금액, 기간 등) + 해결책 요구 = COMPREHENSIVE 또는 복합 의도로 분류\n\n## 분류 카테고리 설명:\n\n1. **LEGAL_CONSULT (법률상담)**\n   - 설명: 부동산 관련 법률, 권리, 의무에 대한 질문\n   - 예시:\n     * 단순: "전세금 5% 인상이 가능한가요?", "임대차계약 갱신 거부할 수 있나요?"\n     * 복합: "전세금 인상 가능한지 확인하고 법적 근거도 알려주세요"\n   - 키워드: 법, 전세, 임대, 보증금, 계약, 권리, 의무, 갱신, 임차인, 임대인, 법률, 규정, 조항\n   - 필요한 처리: 법률 데이터베이스 검색, 관련 법조항 찾기\n\n2. **MARKET_INQUIRY (시세조회)**\n   - 설명: 부동산 시장 가격, 시세, 거래 동향에 대한 질문\n   - 예시:\n     * 단순: "강남구 아파트 전세 시세 알려주세요", "서초동 매매가 얼마나 올랐나요?"\n     * 복합: "강남구 시세 확인하고 대출 가능 금액도 계산해줘"\n   - 키워드: 시세, 가격, 매매가, 전세가, 월세, 시장, 동향, 평균, 지역명, 상승률, 하락률\n   - 필요한 처리: 부동산 시세 데이터 조회, 지역별 가격 분석\n\n3. **LOAN_CONSULT (대출상담)**\n   - 설명: 주택담보대출, 전세자금대출 등 금융 관련 질문\n   - 예시:\n     * 단순: "전세자금대출 한도가 얼마인가요?", "LTV가 뭔가요?"\n     * 복합: "대출 한도 확인하고 금리 비교도 해주세요"\n   - 키워드: 대출, 금리, 한도, 조건, 상환, LTV, DTI, DSR, 담보, 금융, 은행\n   - 필요한 처리: 대출 상품 조회, 금리 정보 검색, 한도 계산\n\n4. **CONTRACT_CREATION (계약서작성)**\n   - 설명: 새로운 계약서나 문서를 작성해달라는 요청\n   - 예시:\n     * 단순: "임대차계약서 작성해주세요", "전세계약서 초안 만들어주세요"\n     * 복합: "계약서 작성하고 주의사항도 검토해주세요"\n   - 키워드: 작성, 만들, 생성, 초안, 계약서, 문서, 양식\n   - 필요한 처리: 문서 생성 에이전트 호출, 템플릿 기반 작성\n\n5. **CONTRACT_REVIEW (계약서검토)**\n   - 설명: 기존 계약서나 문서를 검토해달라는 요청\n   - 예시:\n     * 단순: "이 계약서 검토해주세요", "특약사항 문제없나요?"\n     * 복합: "계약서 검토하고 수정사항도 제안해주세요"\n   - 키워드: 검토, 확인, 점검, 리뷰, 분석해, 살펴봐, 체크\n   - 필요한 처리: 문서 분석, 위험 요소 식별, 개선사항 제안\n\n6. **COMPREHENSIVE (종합분석)**\n   - 설명: 여러 측면을 종합적으로 분석해달라는 요청, 또는 복잡한 상황에 대한 해결책 요청\n   - 예시:\n     * 단순: "이 물건 전체적으로 분석해주세요"\n     * 복합: "시세, 법률, 대출 모두 검토해서 종합 의견 주세요"\n     * 해결형: "10년 거주했는데 전세금 3억을 10억으로 올려달래. 어떻게 해야 해?"\n     * 상황+해결: "집주인이 계약 갱신 거부했어. 법적으로 어떻게 대응해야 할까?"\n   - 키워드: 종합, 전체, 모든, 전반적, 종합적, 평가, 분석, 어떻게, 방법, 해결, 대처\n   - 패턴: 구체적 상황 설명 + "어떻게/방법/해결" 요청\n   - 필요한 처리: 다중 데이터 소스 통합 분석, 상황 평가, 해결책 제시\n\n7. **RISK_ANALYSIS (리스크분석)**\n   - 설명: 위험 요소나 주의사항에 대한 질문\n   - 예시:\n     * 단순: "이 계약 위험한가요?", "주의할 점 알려주세요"\n     * 복합: "리스크 분석하고 대안도 제시해주세요"\n   - 키워드: 위험, 리스크, 주의, 문제점, 조심, 걱정, 우려\n   - 필요한 처리: 위험 요소 분석, 주의사항 추출\n\n8. **UNCLEAR (불분명)**\n   - 설명: 의도를 명확히 파악하기 어려운 질문\n   - 예시: "이거 좀 봐주세요", "어떻게 해야 할까요?", "도와주세요"\n   - 처리: 추가 질문으로 의도 명확화 필요\n\n9. **IRRELEVANT (무관)**\n   - 설명: 부동산과 전혀 관련 없는 질문\n   - 예시: "날씨 어때?", "저녁 뭐 먹지?", "주식 추천해줘"\n   - 처리: 부동산 관련 질문을 유도\n\n## 복합 질문 예시와 분석 (CoT 적용):\n\n### 예시 1: "강남구 아파트 시세 알려주고 전세자금대출 가능한지도 확인해줘"\n**CoT 분석**:\n1. 구조: 두 개의 요청 ("시세" + "대출")\n2. 유형: 정보 확인형 (둘 다)\n3. 복잡도: 중 (두 가지 독립적 조회)\n4. 필요 처리: 검색 + 계산/분석\n\n**결론**:\n- 주 의도: MARKET_INQUIRY (시세 조회가 먼저 필요)\n- 부가 의도: LOAN_CONSULT (대출 확인)\n- 분해: ["강남구 아파트 시세 조회", "전세자금대출 가능 여부 확인"]\n\n### 예시 2: "이 계약서 검토해서 위험한 부분 있는지 알려주고 수정 제안도 해줘"\n**CoT 분석**:\n1. 구조: 검토 + 위험 평가 + 수정안\n2. 유형: 평가/판단형 + 해결책 요청형\n3. 복잡도: 고 (3단계 처리)\n4. 필요 처리: 검토 + 분석 + 문서 생성\n\n**결론**:\n- 주 의도: CONTRACT_REVIEW (계약서 검토)\n- 부가 의도: RISK_ANALYSIS (위험 분석)\n- 분해: ["계약서 전체 검토", "위험 요소 식별", "수정사항 제안"]\n\n### 예시 3: "집주인이 짜증나, 10년 살았는데 전세금 3억을 10억으로 올려달래. 법적으로 해결방법 알려줘"\n**CoT 분석**:\n1. 구조: 상황 설명 (10년 거주, 3억→10억) + 해결책 요청\n2. 유형: 해결책 요청형 (단순 정보 X)\n3. 복잡도: 고 (구체적 상황 + 수치 비교 + 법률 + 대응방안)\n4. 필요 처리: 법률 검색 + 상황 분석 + 해결책 제시\n\n**결론**:\n- 주 의도: COMPREHENSIVE (복잡한 상황에 대한 종합 해결)\n- 부가 의도: LEGAL_CONSULT, RISK_ANALYSIS\n- 분해: ["전세금 인상 한도 법률 조회", "3억→10억 인상의 타당성 분석", "구체적 대응 방안 제시"]\n- **이유**: "법적으로"라는 키워드가 있지만, 단순 법률 확인이 아니라 구체적 상황에 대한 해결책을 요구하므로 COMPREHENSIVE\n\n### 예시 4: "전세금 인상률 상한이 얼마야?"\n**CoT 분석**:\n1. 구조: 단순 사실 확인\n2. 유형: 정보 확인형\n3. 복잡도: 저 (단일 개념)\n4. 필요 처리: 검색만\n\n**결론**:\n- 주 의도: LEGAL_CONSULT (법률 정보 조회)\n- 부가 의도: 없음\n- 분해: 필요 없음\n\n## 응답 형식 (JSON 형식으로 응답):\n\n```json\n{\n    "intent": "LEGAL_CONSULT",\n    "confidence": 0.9,\n    "keywords": ["전세금", "인상", "제한"],\n    "sub_intents": [],\n    "is_compound": false,\n    "decomposed_tasks": [],\n    "entities": {\n        "location": "강남구",\n        "price": "5억",\n        "contract_type": "전세",\n        "date": "2024년",\n        "area": "84㎡",\n        "action_verbs": ["확인", "검토"]\n    },\n    "reasoning": "전세금 인상에 대한 법률 질문이므로 LEGAL_CONSULT로 분류"\n}\n```\n\n응답 규칙:\n- intent: 위 9개 카테고리 중 하나 (대문자_언더스코어 형식)\n- confidence: 0.0~1.0 (0.8 이상이면 매우 확실, 0.5 미만이면 불확실)\n- keywords: 추출된 주요 키워드 목록\n- sub_intents: 복합 질문일 경우 부가적인 의도들\n- is_compound: 복합 질문 여부 (true/false)\n- decomposed_tasks: 복합 질문을 분해한 개별 작업들\n- entities: 추출된 엔티티 정보\n- reasoning: **반드시 CoT 5단계를 거쳐 분석한 과정을 포함** (구조 파악 → 유형 판단 → 복잡도 평가 → 필요 처리 → 최종 검증)\n\n## reasoning 작성 예시:\n"1단계(구조): 상황 설명(10년 거주, 3억→10억) + 해결책 요청 포함.\n2단계(유형): 해결책 요청형 - 단순 정보가 아닌 대응방안 필요.\n3단계(복잡도): 고 - 구체적 수치 비교와 복잡한 상황.\n4단계(처리): 법률 검색 + 상황 분석 + 해결책 제시 필요.\n5단계(검증): LEGAL_CONSULT만으로는 불충분, 종합적 분석 필요 → COMPREHENSIVE 선택"\n\n## 판단 가이드:\n- 여러 의도가 섞여있다면, 가장 주된 의도를 intent에, 나머지를 sub_intents에 기록\n- "그리고", "또한", "함께", "같이" 등의 연결어가 있으면 복합 질문일 가능성 높음\n- 법률 관련 키워드가 있으면 LEGAL_CONSULT 우선\n- 가격/시세 언급이 명확하면 MARKET_INQUIRY\n- 계약서라는 단어와 함께 "작성/만들기"가 있으면 CONTRACT_CREATION\n- 계약서라는 단어와 함께 "검토/확인"이 있으면 CONTRACT_REVIEW\n- 불확실하면 confidence를 낮게 설정하고 UNCLEAR 선택\n- 복합 질문은 is_compound를 true로 설정하고 개별 작업으로 분해\n\n분석할 질문: 보증금 반환 절차 알려주고 법적 보호 방법도 설명해줘'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 16:03:30,042 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 16:03:30,043 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 16:03:30,043 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 16:03:30,043 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 16:03:30,043 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 16:03:30,043 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 16:03:34,485 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 07:03:34 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'4239'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'4261'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9938'), (b'x-ratelimit-remaining-tokens', b'197237'), (b'x-ratelimit-reset-requests', b'8m53.972s'), (b'x-ratelimit-reset-tokens', b'828ms'), (b'x-request-id', b'req_a7fd4f3b481e4d5a9187144e611ffab4'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b0f3c9f083091-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 16:03:34,485 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 16:03:34,485 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 16:03:34,505 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 16:03:34,505 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 16:03:34,506 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 16:03:34,506 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 07:03:34 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '4239', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '4261', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9938', 'x-ratelimit-remaining-tokens': '197237', 'x-ratelimit-reset-requests': '8m53.972s', 'x-ratelimit-reset-tokens': '828ms', 'x-request-id': 'req_a7fd4f3b481e4d5a9187144e611ffab4', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b0f3c9f083091-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 16:03:34,506 - openai._base_client - DEBUG - request_id: req_a7fd4f3b481e4d5a9187144e611ffab4
2025-10-05 16:03:34,506 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: intent_analysis | Model: gpt-4o-mini-2024-07-18 | Tokens: 3444 (prompt: 3186, completion: 258)
2025-10-05 16:03:34,506 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM Intent Analysis Result: {'intent': 'COMPREHENSIVE', 'confidence': 0.85, 'keywords': ['보증금', '반환', '법적', '보호', '절차'], 'sub_intents': ['LEGAL_CONSULT'], 'is_compound': True, 'decomposed_tasks': ['보증금 반환 절차 설명', '법적 보호 방법 설명'], 'entities': {'action_verbs': ['알려주고', '설명해줘']}, 'reasoning': '1단계(구조): 보증금 반환 절차와 법적 보호 방법에 대한 요청 포함. 2단계(유형): 해결책 요청형 - 단순 정보가 아닌 구체적인 절차와 법적 보호 방안 필요. 3단계(복잡도): 중 - 두 가지 독립적 요청이지만 서로 관련된 주제. 4단계(처리): 보증금 반환 절차에 대한 정보 검색과 법적 보호 방법에 대한 분석 필요. 5단계(검증): 두 가지 요청이 모두 포함되어 있어 COMPREHENSIVE로 분류.'}
2025-10-05 16:03:34,506 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-10af1f59-3bfa-4132-9a28-72cf5b022a8b', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 Agent 선택 전문가입니다.\n사용자의 요청에 가장 적합한 Agent/Team을 선택하는 것이 목표입니다.\n\n## 현재 상황\n\n**사용자 질문:** 보증금 반환 절차 알려주고 법적 보호 방법도 설명해줘\n**분석된 의도:** 종합분석\n**추출된 키워드:** [\'보증금\', \'반환\', \'법적\', \'보호\', \'절차\']\n\n## 사용 가능한 Agent/Team 정보\n\n{\'search_team\': {\'name\': \'search_team\', \'capabilities\': \'법률 검색, 부동산 시세 조회, 대출 상품 검색\', \'tools\': [\'legal_search\', \'market_data\', \'loan_data\'], \'use_cases\': [\'법률 상담\', \'시세 조회\', \'대출 정보\']}, \'analysis_team\': {\'name\': \'analysis_team\', \'capabilities\': \'데이터 분석, 리스크 평가, 인사이트 생성, 추천\', \'tools\': [\'data_analyzer\', \'risk_evaluator\'], \'use_cases\': [\'시장 분석\', \'리스크 평가\', \'투자 분석\']}, \'document_team\': {\'name\': \'document_team\', \'capabilities\': \'계약서 작성, 문서 생성, 문서 검토\', \'tools\': [\'document_generator\', \'contract_reviewer\'], \'use_cases\': [\'계약서 작성\', \'문서 검토\']}}\n\n## Agent 역할 및 상세 가이드\n\n### 1. search_team (검색 팀)\n- **주요 기능**: 정보 검색 및 데이터 수집\n- **전문 분야**:\n  * 법률 정보 검색 (전세법, 임대차보호법, 부동산 관련 법규)\n  * 부동산 시세 조회 (매매가, 전세가, 월세, 실거래가)\n  * 대출 상품 정보 검색 (금리, 한도, 조건)\n  * 지역 정보 및 인프라 조회\n- **도구**: legal_search, market_data, loan_data\n- **적합한 작업**: 정보 조회, 데이터 수집, 법률 확인, 시세 파악\n- **예시**:\n  * "전세금 5% 인상 가능한가요?"\n  * "강남구 아파트 전세 시세"\n  * "전세자금대출 한도 얼마?"\n\n### 2. analysis_team (분석 팀)\n- **주요 기능**: 데이터 분석 및 평가\n- **전문 분야**:\n  * 시장 동향 분석 (상승률, 하락률, 추세)\n  * 리스크 평가 (계약, 투자 위험도)\n  * 투자 수익률 계산 (ROI, 월세 수익률)\n  * 대출 한도 및 조건 분석 (LTV, DTI, DSR)\n  * 비교 분석 (지역별, 상품별)\n- **도구**: data_analyzer, risk_evaluator, calculator\n- **적합한 작업**: 데이터 분석, 리스크 평가, 계산, 비교, 예측\n- **의존성**: 보통 search_team의 데이터가 필요\n- **예시**:\n  * "이 지역 투자 가치 분석해줘"\n  * "계약 리스크 평가해줘"\n  * "대출 가능 금액 계산해줘"\n\n### 3. document_team (문서 팀)\n- **주요 기능**: 문서 생성 및 관리\n- **전문 분야**:\n  * 계약서 작성 (임대차, 매매, 전세)\n  * 문서 템플릿 관리\n  * 특약사항 생성\n  * 계약서 수정안 작성\n  * 법률 문서 검토\n- **도구**: document_generator, contract_template, contract_reviewer\n- **적합한 작업**: 문서 작성, 계약서 생성, 문서 수정, 검토\n- **예시**:\n  * "임대차계약서 작성해줘"\n  * "특약사항 추가해줘"\n  * "계약서 수정안 만들어줘"\n\n## Chain-of-Thought Agent 선택 프로세스\n\n다음 단계를 **순서대로** 따라 최적의 Agent 조합을 선택하세요:\n\n### 1단계: 질문 요구사항 파악\n- 단순 정보 조회인가? → search_team만 필요\n- 판단/평가가 필요한가? → search + analysis 필요\n- 해결책 제시가 필요한가? → search + analysis 필요\n- 문서 생성이 필요한가? → document_team 추가\n\n### 2단계: 작업 복잡도 판단\n- **단순** (검색만): "~이 뭐야?", "~알려줘" → search_team\n- **중간** (검색+판단): "~괜찮아?", "~적절해?" → search + analysis\n- **복잡** (종합 해결): 구체적 상황 + "어떻게 해야 해?" → search + analysis\n\n### 3단계: 의존성 분석\n- 독립적 작업: 단일 팀으로 처리 가능\n- 순차적 의존: 이전 결과 필요 → 여러 팀 순서대로\n- 병렬 가능: 동시 조회 가능 → coordination: "parallel"\n\n### 4단계: 최종 검증\n- 선택한 팀들로 질문에 완전히 답변 가능한가?\n- 불필요한 팀이 포함되지 않았는가?\n- 순서가 논리적인가? (데이터 흐름 고려)\n\n### 중요 원칙:\n- **법률 키워드만으로 판단하지 말 것**: "법적으로 어떻게 해야 해?" = 법률 검색 + 분석 필요\n- **상황 설명 + 해결책 요청** = 반드시 analysis_team 포함\n- **구체적 수치 비교** (3억→10억 같은) = analysis_team 필요\n\n## 의도별 Agent 매핑 가이드 (기본 가이드 - CoT로 조정 가능)\n\n| 의도 (Intent) | 기본 조합 | 상황별 조정 |\n|--------------|-----------|-------------|\n| LEGAL_CONSULT | ["search_team"] | 해결책 요청시 → + analysis_team |\n| MARKET_INQUIRY | ["search_team"] | 비교/평가시 → + analysis_team |\n| LOAN_CONSULT | ["search_team", "analysis_team"] | 계산 필수 |\n| CONTRACT_CREATION | ["document_team"] | 검토 후 작성 → search + document |\n| CONTRACT_REVIEW | ["search_team", "analysis_team"] | 법률 검토 + 리스크 분석 |\n| COMPREHENSIVE | ["search_team", "analysis_team"] | **항상 분석 포함** |\n| RISK_ANALYSIS | ["analysis_team"] | 법률 근거 필요시 → search + analysis |\n| UNCLEAR | ["search_team", "analysis_team"] | 포괄적 대응 |\n\n**중요**: 위 매핑은 **기본 가이드**일 뿐입니다.\n실제 질문의 내용(CoT 분석 결과)에 따라 조정하세요!\n\n## 복합 질문 처리 예시 (CoT 적용)\n\n### 예시 1: 순차적 처리\n질문: "강남구 시세 확인하고 투자 가치 분석해줘"\n**CoT 분석**:\n1. 요구사항: 시세 조회 + 투자 가치 평가\n2. 복잡도: 중간 (검색 + 분석)\n3. 의존성: 시세 데이터 → 투자 분석 (순차)\n4. 검증: search만으로는 "투자 가치 평가" 불가능\n\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "1단계: 시세 조회+투자 평가 필요. 2단계: 중간 복잡도. 3단계: 순차 의존. 4단계: search로 시세 수집 후 analysis로 투자 가치 평가 필요",\n    "coordination": "sequential"\n}\n```\n\n### 예시 2: 단순 정보 조회\n질문: "전세금 인상률 한도가 얼마야?"\n**CoT 분석**:\n1. 요구사항: 단순 사실 확인\n2. 복잡도: 낮음 (정보 확인형)\n3. 의존성: 없음\n4. 검증: search_team만으로 충분\n\n```json\n{\n    "selected_agents": ["search_team"],\n    "reasoning": "1단계: 단순 정보 조회. 2단계: 저복잡도. 3단계: 독립적. 4단계: 법률 검색만으로 답변 가능",\n    "coordination": "single"\n}\n```\n\n### 예시 3: 해결책 요청 (핵심 예시!)\n질문: "집주인이 전세금 3억을 10억으로 올려달래. 법적으로 어떻게 해야 해?"\n의도: COMPREHENSIVE\n**CoT 분석**:\n1. 요구사항: 상황 설명 + 해결책 요청\n2. 복잡도: 높음 (구체적 상황 + 수치 비교)\n3. 의존성: 법률 확인 → 상황 분석 → 해결책 제시\n4. 검증: "법적으로"만 보고 search만 선택하면 불충분! 해결책 제시 필요\n\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "1단계: 법률 + 상황 분석 + 해결책 필요. 2단계: 고복잡도(3억→10억 비정상). 3단계: 순차(법률 확인 후 타당성 분석). 4단계: \'어떻게 해야\' = 단순 법률 조회 아님, 분석 필수",\n    "coordination": "sequential",\n    "confidence": 0.95\n}\n```\n\n## 응답 형식 (JSON)\n\n```json\n{\n    "selected_agents": ["선택된 agent/team 목록"],\n    "reasoning": "선택 이유를 구체적으로 설명. 각 Agent의 역할과 처리 순서 포함",\n    "coordination": "single/sequential/parallel/pipeline",\n    "dependencies": {"agent2": ["agent1"]},\n    "estimated_time": 30,\n    "confidence": 0.9\n}\n```\n\n## 선택 가이드라인\n\n1. **최소 Agent 원칙**: 가능한 적은 수의 Agent로 처리\n2. **전문성 우선**: 해당 작업에 가장 전문적인 Agent 선택\n3. **효율성 고려**: 병렬 처리 가능한 경우 명시\n4. **의존성 관리**: 데이터 흐름을 고려한 순서 지정\n5. **폴백 전략**: 불확실한 경우 ["search_team", "analysis_team"] 조합\n\n## 주의사항\n\n- selected_agents는 반드시 배열 형태\n- Agent 이름은 정확히: "search_team", "analysis_team", "document_team"\n- 최소 1개, 최대 3개 선택\n- 순서는 실행 우선순위 (앞에 있을수록 먼저 실행)\n- reasoning은 상세하고 논리적으로 작성\n- coordination 필드로 실행 방식 명시\n- 복합 질문의 경우 의존성 관계 명확히 표시'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 16:03:34,507 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 16:03:34,507 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 16:03:34,507 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 16:03:34,507 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 16:03:34,507 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 16:03:34,508 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 16:03:38,618 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 07:03:38 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'3900'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'3921'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9937'), (b'x-ratelimit-remaining-tokens', b'197879'), (b'x-ratelimit-reset-requests', b'8m58.144s'), (b'x-ratelimit-reset-tokens', b'636ms'), (b'x-request-id', b'req_2dec3c2587304c1d90ac7638f013fd9a'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b0f588d533091-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 16:03:38,618 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 16:03:38,618 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 16:03:38,620 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 16:03:38,620 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 16:03:38,620 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 16:03:38,621 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 07:03:38 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '3900', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '3921', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9937', 'x-ratelimit-remaining-tokens': '197879', 'x-ratelimit-reset-requests': '8m58.144s', 'x-ratelimit-reset-tokens': '636ms', 'x-request-id': 'req_2dec3c2587304c1d90ac7638f013fd9a', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b0f588d533091-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 16:03:38,621 - openai._base_client - DEBUG - request_id: req_2dec3c2587304c1d90ac7638f013fd9a
2025-10-05 16:03:38,621 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: agent_selection | Model: gpt-4o-mini-2024-07-18 | Tokens: 2569 (prompt: 2371, completion: 198)
2025-10-05 16:03:38,621 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM agent selection reasoning: 1단계: 사용자는 보증금 반환 절차와 법적 보호 방법을 요청하고 있습니다. 이는 단순한 정보 조회가 아니라 법률적 조언과 상황 분석이 필요합니다. 2단계: 복잡도가 높습니다. 보증금 반환 절차에 대한 법률 정보 검색이 필요하고, 그에 따른 법적 보호 방법을 분석해야 합니다. 3단계: 법률 정보 검색 후, 그 정보를 바탕으로 법적 보호 방법을 분석해야 하므로 순차적 의존성이 있습니다. 4단계: 단순 법률 조회로는 충분하지 않으며, 분석이 필수적입니다.
2025-10-05 16:03:38,621 - app.service_agent.cognitive_agents.planning_agent - INFO - ✅ Primary LLM selected agents: ['search_team', 'analysis_team']
2025-10-05 16:03:38,621 - app.service_agent.cognitive_agents.planning_agent - INFO - Intent analyzed: 종합분석 (confidence: 0.85)
2025-10-05 16:03:38,621 - app.service_agent.cognitive_agents.query_decomposer - INFO - Decomposing query: 보증금 반환 절차 알려주고 법적 보호 방법도 설명해줘...
2025-10-05 16:03:38,623 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-0acde3f6-0441-4eec-b460-66ca2ffc92a9', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 질문 분해 전문가입니다.\n복잡한 사용자 질문을 독립적으로 처리 가능한 작업 단위로 분해하는 것이 목표입니다.\n\n## Chain-of-Thought 분해 프로세스:\n\n### 1단계: 복합 질문 여부 판단\n- 단순 정보 조회만 필요한가? → is_compound: false\n- **다음 중 하나라도 해당하면 is_compound: true**:\n  * "그리고", "그 다음", "한 후" 같은 연결어로 여러 요청 연결\n  * 명시적으로 2개 이상의 작업 요청 (예: "시세 확인하고 대출 계산해줘")\n  * 상황 설명 + 해결책 요청 (예: "3억→10억 올려달래. 어떻게 해야 해?")\n  * 해결책을 위해 여러 단계 처리 필요 (검색 → 분석 → 제안)\n\n### 2단계: 필요 작업 식별\n- 정보 수집이 필요한가? → search 작업\n- 평가/판단이 필요한가? → analysis 작업\n- 문서 생성이 필요한가? → generation 작업\n- **해결책 요청**인가? → search + analysis (최소 2개)\n\n### 3단계: 작업 순서 결정\n- 독립적 작업: 병렬 가능\n- 이전 결과 필요: 순차 실행 (depends_on 설정)\n\n## 중요 원칙:\n1. 각 작업은 하나의 명확한 목표를 가져야 합니다\n2. 작업 간 의존성을 명확히 파악해야 합니다\n3. 병렬 처리 가능한 작업은 구분해야 합니다\n4. **주의**: "어떻게 해야", "방법 알려줘" 같은 해결책 요청은 복합 질문!\n\n## 작업 유형 (type):\n- search: 정보 검색 (법률, 시세, 대출 정보 등)\n- analysis: 데이터 분석 (리스크 평가, 시장 분석 등)\n- generation: 문서 생성 (계약서 작성 등)\n- review: 검토/평가 (계약서 검토, 조건 확인 등)\n- calculation: 계산/산출 (대출 한도, 세금 등)\n- comparison: 비교 분석 (여러 옵션 비교)\n\n## 담당 팀 (agent):\n- search_team: 법률, 시세, 대출 정보 검색\n- analysis_team: 데이터 분석, 리스크 평가, 계산\n- document_team: 문서 생성, 계약서 작성\n\n## 학습 예시:\n\n### 예시 1: 복합 질문 (순차적)\n질문: "강남구 아파트 시세 확인하고 대출 가능 금액 계산해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "강남구 아파트 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "대출 가능 금액 계산",\n            "type": "calculation",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "required_data": {"price": "task_0.result.price"},\n            "estimated_time": 15\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "시세 정보가 있어야 대출 금액 계산이 가능하므로 순차 실행"\n}\n```\n\n### 예시 2: 복합 질문 (병렬 가능)\n질문: "이 지역 전세 시세와 매매 시세 모두 알려주고 비교 분석해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "전세 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "매매 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "전세/매매 시세 비교 분석",\n            "type": "comparison",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0", "task_1"],\n            "required_data": {\n                "lease_price": "task_0.result",\n                "sale_price": "task_1.result"\n            },\n            "estimated_time": 25\n        }\n    ],\n    "execution_mode": "mixed",\n    "parallel_groups": [["task_0", "task_1"], ["task_2"]],\n    "reasoning": "시세 조회는 독립적이므로 병렬 처리, 비교는 두 결과 필요"\n}\n```\n\n### 예시 3: 복합 질문 (3단계 이상)\n질문: "이 계약서 검토해서 위험한 부분 찾고 수정안 만들어서 최종 계약서 작성해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "계약서 내용 전체 검토",\n            "type": "review",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 30\n        },\n        {\n            "description": "위험 요소 및 문제점 분석",\n            "type": "analysis",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "estimated_time": 25\n        },\n        {\n            "description": "수정안 제안 생성",\n            "type": "generation",\n            "agent": "document_team",\n            "priority": 3,\n            "depends_on": ["task_1"],\n            "estimated_time": 20\n        },\n        {\n            "description": "최종 계약서 작성",\n            "type": "generation",\n            "agent": "document_team",\n            "priority": 4,\n            "depends_on": ["task_2"],\n            "estimated_time": 30\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "각 단계가 이전 결과에 의존하므로 순차 실행 필요"\n}\n```\n\n### 예시 4: 단순 질문 (분해 불필요)\n질문: "전세금 인상률 상한이 얼마야?"\n분해:\n```json\n{\n    "is_compound": false,\n    "sub_tasks": [\n        {\n            "description": "전세금 인상률 상한 법률 정보 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 15\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "단일 정보 조회 요청으로 분해 불필요"\n}\n```\n\n### 예시 5: 조건부 실행\n질문: "이 물건 시세 확인하고 적정가면 대출 상담도 받고 싶어"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "물건 시세 조회 및 적정성 평가",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 25\n        },\n        {\n            "description": "대출 상담 정보 제공",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "optional": true,\n            "context": {"condition": "if_reasonable_price"},\n            "estimated_time": 20\n        }\n    ],\n    "execution_mode": "conditional",\n    "reasoning": "시세 확인 결과에 따라 대출 상담 진행 여부 결정"\n}\n```\n\n### 예시 6: 상황 설명 + 해결책 요청 (핵심 패턴!)\n질문: "집주인이 전세금 3억을 10억으로 올려달래. 법적으로 어떻게 해야 해?"\n**CoT 분석**:\n1. 질문 분석: 상황 설명 + 해결책 요청\n2. 연결어: 없지만, "어떻게 해야" = 해결책 요청\n3. 의존성: 법률 확인 → 상황 분석 → 대응 방안\n4. 복합 여부: **YES** (해결책을 위해 여러 단계 필요)\n\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "전세금 인상 한도 관련 법률 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "3억→10억 인상의 법적 타당성 및 적정성 분석",\n            "type": "analysis",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "required_data": {"legal_limit": "task_0.result", "current": 300000000, "requested": 1000000000},\n            "estimated_time": 25\n        },\n        {\n            "description": "구체적 대응 방안 및 해결책 제시",\n            "type": "analysis",\n            "agent": "analysis_team",\n            "priority": 3,\n            "depends_on": ["task_1"],\n            "estimated_time": 20\n        }\n    ],\n    "execution_mode": "sequential",\n    "confidence": 0.95,\n    "reasoning": "상황 설명+해결책 요청 패턴. \'어떻게 해야\'는 단순 정보 조회가 아닌 종합 해결책 필요. 법률 조회 → 상황 분석 → 해결책 제시 3단계 순차 처리"\n}\n```\n\n## Chain-of-Thought 프로세스:\n\n1. **질문 분석**: 어떤 정보나 작업을 요구하는가?\n2. **연결어 확인**: "그리고", "또한", "해서", "한 후" 등이 있는가?\n3. **의존성 파악**: 어떤 작업이 다른 작업의 결과를 필요로 하는가?\n4. **병렬성 판단**: 독립적으로 실행 가능한 작업이 있는가?\n5. **최적화**: 불필요한 분해는 없는가?\n\n## 응답 형식 (JSON):\n\n{\n    "is_compound": true/false,\n    "sub_tasks": [\n        {\n            "description": "작업 설명",\n            "type": "작업 유형",\n            "agent": "담당 팀",\n            "priority": 우선순위 (1이 가장 높음),\n            "depends_on": ["선행 작업 ID 리스트"],\n            "required_data": {"필요한 데이터 매핑"},\n            "estimated_time": 예상 소요 시간(초),\n            "optional": true/false,\n            "context": {"추가 컨텍스트"}\n        }\n    ],\n    "execution_mode": "sequential/parallel/mixed/conditional",\n    "parallel_groups": [["병렬 실행 가능한 작업 ID 그룹"]],\n    "confidence": 0.0-1.0,\n    "reasoning": "분해 결정의 이유와 근거"\n}\n\n## 분해 가이드라인:\n\n1. **분해가 필요한 경우**:\n   - 여러 종류의 정보를 요청하는 경우\n   - 순차적 처리가 필요한 경우 (A의 결과로 B 수행)\n   - 서로 다른 팀의 전문성이 필요한 경우\n\n2. **분해가 불필요한 경우**:\n   - 단일 정보 조회\n   - 단순한 질문-답변\n   - 하나의 팀에서 완전히 처리 가능한 경우\n\n3. **병렬 처리 기준**:\n   - 서로 독립적인 정보 조회\n   - 의존성이 없는 분석 작업\n   - 동시에 진행해도 충돌하지 않는 작업\n\n4. **우선순위 설정**:\n   - 의존성이 없는 작업: priority 1\n   - 1차 의존 작업: priority 2\n   - 2차 의존 작업: priority 3\n   - 이런 식으로 증가\n\n현재 의도: 종합분석\n추출된 엔티티: {\'action_verbs\': [\'알려주고\', \'설명해줘\']}\n\n분석할 질문: 보증금 반환 절차 알려주고 법적 보호 방법도 설명해줘'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 16:03:38,623 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 16:03:38,623 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 16:03:38,623 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 16:03:38,623 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 16:03:38,623 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 16:03:38,623 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 16:03:41,673 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 07:03:41 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'2850'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'2866'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9937'), (b'x-ratelimit-remaining-tokens', b'197320'), (b'x-ratelimit-reset-requests', b'9m2.987s'), (b'x-ratelimit-reset-tokens', b'804ms'), (b'x-request-id', b'req_b63984d1d24242479d964c0eba72367a'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b0f7239ce3091-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 16:03:41,673 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 16:03:41,673 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 16:03:41,681 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 16:03:41,681 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 16:03:41,681 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 16:03:41,682 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 07:03:41 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '2850', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '2866', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9937', 'x-ratelimit-remaining-tokens': '197320', 'x-ratelimit-reset-requests': '9m2.987s', 'x-ratelimit-reset-tokens': '804ms', 'x-request-id': 'req_b63984d1d24242479d964c0eba72367a', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b0f7239ce3091-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 16:03:41,682 - openai._base_client - DEBUG - request_id: req_b63984d1d24242479d964c0eba72367a
2025-10-05 16:03:41,682 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: query_decomposition | Model: gpt-4o-mini-2024-07-18 | Tokens: 2904 (prompt: 2712, completion: 192)
2025-10-05 16:03:41,682 - app.service_agent.cognitive_agents.query_decomposer - INFO - Successfully decomposed into 2 tasks
2025-10-05 16:03:41,682 - app.service_agent.cognitive_agents.planning_agent - INFO - Query decomposed into 2 tasks
2025-10-05 16:03:41,682 - app.service_agent.cognitive_agents.planning_agent - WARNING - Plan validation errors: ["Agent 'search_team' not found in registry", "Agent 'analysis_team' depends on missing 'task_0'", "Agent 'analysis_team' not found in registry"]
2025-10-05 16:03:41,682 - app.service_agent.cognitive_agents.planning_agent - INFO - Optimizing execution plan
2025-10-05 16:03:41,682 - app.service_agent.cognitive_agents.planning_agent - INFO - Comprehensive plan created: Intent: 종합분석 (confidence: 0.85) | Strategy: sequential | Agents: search_team, analysis_team | Estimated time: 45.0s
2025-10-05 16:03:41,682 - __main__ - INFO -   전략: sequential
2025-10-05 16:03:41,682 - __main__ - INFO -   단계 수: 2
2025-10-05 16:03:41,682 - __main__ - INFO - 
✓ 테스트 성공 (소요시간: 24.33초)
2025-10-05 16:03:41,682 - __main__ - INFO - 
================================================================================
2025-10-05 16:03:41,682 - __main__ - INFO - [35] 복합 질문 테스트: D015
2025-10-05 16:03:41,682 - __main__ - INFO - 질문: 서초 아파트 가격 조회하고 상승률 분석해줘
2025-10-05 16:03:41,682 - __main__ - INFO - ================================================================================
2025-10-05 16:03:41,682 - __main__ - INFO - 
[Step 1] Intent 분석...
2025-10-05 16:03:41,682 - app.service_agent.cognitive_agents.planning_agent - INFO - Analyzing intent for query: 서초 아파트 가격 조회하고 상승률 분석해줘...
2025-10-05 16:03:41,683 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-a3046ce3-1d4f-4357-971e-8fba6a2b8889', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 의도 분석 전문가입니다.\n사용자의 질문을 정확히 이해하고, 어떤 종류의 도움이 필요한지 분류해야 합니다.\n\n## Chain-of-Thought 분석 프로세스\n\n질문을 분석할 때 다음 단계를 **순서대로** 따르세요:\n\n### 1단계: 질문 구조 파악\n- 단순 정보 요청인가? (예: "~이 뭐야?", "~알려줘")\n- 상황 설명이 포함되어 있는가? (배경, 현재 상태)\n- 구체적 수치나 데이터가 있는가? (금액, 비율, 기간 등)\n- 문제 해결을 요구하는가? (예: "어떻게 해야 해?", "방법 알려줘")\n\n### 2단계: 요청 유형 판단\n- **정보 확인형**: 사실, 개념, 규정 확인 → 검색만으로 충분\n- **평가/판단형**: "괜찮아?", "적절해?", "문제있어?" → 검색 + 분석 필요\n- **해결책 요청형**: "어떻게?", "방법?", "대처?" → 검색 + 분석 + 제안 필요\n- **비교/선택형**: "A vs B", "어느게 나아?" → 검색 + 분석(비교) 필요\n\n### 3단계: 복잡도 평가\n- **저**: 단일 개념/사실 확인 (예: "전세금 인상률 한도?")\n- **중**: 특정 상황 + 판단 (예: "3억을 5억으로 올려달래. 가능해?")\n- **고**: 복잡한 상황 + 여러 조건 + 해결책 (예: "10년 거주, 3억→10억 요구. 어떻게 해야 해?")\n\n### 4단계: 필요한 처리 결정\n- **검색만**: 정보 확인형 + 저복잡도\n- **검색+분석**: 평가/판단형 OR 중복잡도 OR 수치 비교 포함\n- **종합처리**: 해결책 요청형 OR 고복잡도 OR 여러 조건 동시 고려\n\n### 5단계: 최종 검증\n- 선택한 의도로 사용자 질문에 완전히 답변 가능한가?\n- 단순 정보 제공으로 끝나는가, 아니면 추가 분석/판단이 필요한가?\n- 상황 설명이 있으면서 "해결", "방법", "어떻게" 등이 있으면 → COMPREHENSIVE 고려\n\n## 중요: 복합 질문 처리\n복합적인 질문(여러 의도가 섞인 질문)의 경우, 가장 핵심적인 의도를 파악하되,\nsub_intents 필드에 부가적인 의도들도 함께 기록해주세요.\n\n**특히 주의**:\n- 법률 키워드가 있어도, "해결방법", "어떻게 해야" 같은 표현이 있으면 단순 LEGAL_CONSULT가 아닐 수 있음\n- 구체적 상황(금액, 기간 등) + 해결책 요구 = COMPREHENSIVE 또는 복합 의도로 분류\n\n## 분류 카테고리 설명:\n\n1. **LEGAL_CONSULT (법률상담)**\n   - 설명: 부동산 관련 법률, 권리, 의무에 대한 질문\n   - 예시:\n     * 단순: "전세금 5% 인상이 가능한가요?", "임대차계약 갱신 거부할 수 있나요?"\n     * 복합: "전세금 인상 가능한지 확인하고 법적 근거도 알려주세요"\n   - 키워드: 법, 전세, 임대, 보증금, 계약, 권리, 의무, 갱신, 임차인, 임대인, 법률, 규정, 조항\n   - 필요한 처리: 법률 데이터베이스 검색, 관련 법조항 찾기\n\n2. **MARKET_INQUIRY (시세조회)**\n   - 설명: 부동산 시장 가격, 시세, 거래 동향에 대한 질문\n   - 예시:\n     * 단순: "강남구 아파트 전세 시세 알려주세요", "서초동 매매가 얼마나 올랐나요?"\n     * 복합: "강남구 시세 확인하고 대출 가능 금액도 계산해줘"\n   - 키워드: 시세, 가격, 매매가, 전세가, 월세, 시장, 동향, 평균, 지역명, 상승률, 하락률\n   - 필요한 처리: 부동산 시세 데이터 조회, 지역별 가격 분석\n\n3. **LOAN_CONSULT (대출상담)**\n   - 설명: 주택담보대출, 전세자금대출 등 금융 관련 질문\n   - 예시:\n     * 단순: "전세자금대출 한도가 얼마인가요?", "LTV가 뭔가요?"\n     * 복합: "대출 한도 확인하고 금리 비교도 해주세요"\n   - 키워드: 대출, 금리, 한도, 조건, 상환, LTV, DTI, DSR, 담보, 금융, 은행\n   - 필요한 처리: 대출 상품 조회, 금리 정보 검색, 한도 계산\n\n4. **CONTRACT_CREATION (계약서작성)**\n   - 설명: 새로운 계약서나 문서를 작성해달라는 요청\n   - 예시:\n     * 단순: "임대차계약서 작성해주세요", "전세계약서 초안 만들어주세요"\n     * 복합: "계약서 작성하고 주의사항도 검토해주세요"\n   - 키워드: 작성, 만들, 생성, 초안, 계약서, 문서, 양식\n   - 필요한 처리: 문서 생성 에이전트 호출, 템플릿 기반 작성\n\n5. **CONTRACT_REVIEW (계약서검토)**\n   - 설명: 기존 계약서나 문서를 검토해달라는 요청\n   - 예시:\n     * 단순: "이 계약서 검토해주세요", "특약사항 문제없나요?"\n     * 복합: "계약서 검토하고 수정사항도 제안해주세요"\n   - 키워드: 검토, 확인, 점검, 리뷰, 분석해, 살펴봐, 체크\n   - 필요한 처리: 문서 분석, 위험 요소 식별, 개선사항 제안\n\n6. **COMPREHENSIVE (종합분석)**\n   - 설명: 여러 측면을 종합적으로 분석해달라는 요청, 또는 복잡한 상황에 대한 해결책 요청\n   - 예시:\n     * 단순: "이 물건 전체적으로 분석해주세요"\n     * 복합: "시세, 법률, 대출 모두 검토해서 종합 의견 주세요"\n     * 해결형: "10년 거주했는데 전세금 3억을 10억으로 올려달래. 어떻게 해야 해?"\n     * 상황+해결: "집주인이 계약 갱신 거부했어. 법적으로 어떻게 대응해야 할까?"\n   - 키워드: 종합, 전체, 모든, 전반적, 종합적, 평가, 분석, 어떻게, 방법, 해결, 대처\n   - 패턴: 구체적 상황 설명 + "어떻게/방법/해결" 요청\n   - 필요한 처리: 다중 데이터 소스 통합 분석, 상황 평가, 해결책 제시\n\n7. **RISK_ANALYSIS (리스크분석)**\n   - 설명: 위험 요소나 주의사항에 대한 질문\n   - 예시:\n     * 단순: "이 계약 위험한가요?", "주의할 점 알려주세요"\n     * 복합: "리스크 분석하고 대안도 제시해주세요"\n   - 키워드: 위험, 리스크, 주의, 문제점, 조심, 걱정, 우려\n   - 필요한 처리: 위험 요소 분석, 주의사항 추출\n\n8. **UNCLEAR (불분명)**\n   - 설명: 의도를 명확히 파악하기 어려운 질문\n   - 예시: "이거 좀 봐주세요", "어떻게 해야 할까요?", "도와주세요"\n   - 처리: 추가 질문으로 의도 명확화 필요\n\n9. **IRRELEVANT (무관)**\n   - 설명: 부동산과 전혀 관련 없는 질문\n   - 예시: "날씨 어때?", "저녁 뭐 먹지?", "주식 추천해줘"\n   - 처리: 부동산 관련 질문을 유도\n\n## 복합 질문 예시와 분석 (CoT 적용):\n\n### 예시 1: "강남구 아파트 시세 알려주고 전세자금대출 가능한지도 확인해줘"\n**CoT 분석**:\n1. 구조: 두 개의 요청 ("시세" + "대출")\n2. 유형: 정보 확인형 (둘 다)\n3. 복잡도: 중 (두 가지 독립적 조회)\n4. 필요 처리: 검색 + 계산/분석\n\n**결론**:\n- 주 의도: MARKET_INQUIRY (시세 조회가 먼저 필요)\n- 부가 의도: LOAN_CONSULT (대출 확인)\n- 분해: ["강남구 아파트 시세 조회", "전세자금대출 가능 여부 확인"]\n\n### 예시 2: "이 계약서 검토해서 위험한 부분 있는지 알려주고 수정 제안도 해줘"\n**CoT 분석**:\n1. 구조: 검토 + 위험 평가 + 수정안\n2. 유형: 평가/판단형 + 해결책 요청형\n3. 복잡도: 고 (3단계 처리)\n4. 필요 처리: 검토 + 분석 + 문서 생성\n\n**결론**:\n- 주 의도: CONTRACT_REVIEW (계약서 검토)\n- 부가 의도: RISK_ANALYSIS (위험 분석)\n- 분해: ["계약서 전체 검토", "위험 요소 식별", "수정사항 제안"]\n\n### 예시 3: "집주인이 짜증나, 10년 살았는데 전세금 3억을 10억으로 올려달래. 법적으로 해결방법 알려줘"\n**CoT 분석**:\n1. 구조: 상황 설명 (10년 거주, 3억→10억) + 해결책 요청\n2. 유형: 해결책 요청형 (단순 정보 X)\n3. 복잡도: 고 (구체적 상황 + 수치 비교 + 법률 + 대응방안)\n4. 필요 처리: 법률 검색 + 상황 분석 + 해결책 제시\n\n**결론**:\n- 주 의도: COMPREHENSIVE (복잡한 상황에 대한 종합 해결)\n- 부가 의도: LEGAL_CONSULT, RISK_ANALYSIS\n- 분해: ["전세금 인상 한도 법률 조회", "3억→10억 인상의 타당성 분석", "구체적 대응 방안 제시"]\n- **이유**: "법적으로"라는 키워드가 있지만, 단순 법률 확인이 아니라 구체적 상황에 대한 해결책을 요구하므로 COMPREHENSIVE\n\n### 예시 4: "전세금 인상률 상한이 얼마야?"\n**CoT 분석**:\n1. 구조: 단순 사실 확인\n2. 유형: 정보 확인형\n3. 복잡도: 저 (단일 개념)\n4. 필요 처리: 검색만\n\n**결론**:\n- 주 의도: LEGAL_CONSULT (법률 정보 조회)\n- 부가 의도: 없음\n- 분해: 필요 없음\n\n## 응답 형식 (JSON 형식으로 응답):\n\n```json\n{\n    "intent": "LEGAL_CONSULT",\n    "confidence": 0.9,\n    "keywords": ["전세금", "인상", "제한"],\n    "sub_intents": [],\n    "is_compound": false,\n    "decomposed_tasks": [],\n    "entities": {\n        "location": "강남구",\n        "price": "5억",\n        "contract_type": "전세",\n        "date": "2024년",\n        "area": "84㎡",\n        "action_verbs": ["확인", "검토"]\n    },\n    "reasoning": "전세금 인상에 대한 법률 질문이므로 LEGAL_CONSULT로 분류"\n}\n```\n\n응답 규칙:\n- intent: 위 9개 카테고리 중 하나 (대문자_언더스코어 형식)\n- confidence: 0.0~1.0 (0.8 이상이면 매우 확실, 0.5 미만이면 불확실)\n- keywords: 추출된 주요 키워드 목록\n- sub_intents: 복합 질문일 경우 부가적인 의도들\n- is_compound: 복합 질문 여부 (true/false)\n- decomposed_tasks: 복합 질문을 분해한 개별 작업들\n- entities: 추출된 엔티티 정보\n- reasoning: **반드시 CoT 5단계를 거쳐 분석한 과정을 포함** (구조 파악 → 유형 판단 → 복잡도 평가 → 필요 처리 → 최종 검증)\n\n## reasoning 작성 예시:\n"1단계(구조): 상황 설명(10년 거주, 3억→10억) + 해결책 요청 포함.\n2단계(유형): 해결책 요청형 - 단순 정보가 아닌 대응방안 필요.\n3단계(복잡도): 고 - 구체적 수치 비교와 복잡한 상황.\n4단계(처리): 법률 검색 + 상황 분석 + 해결책 제시 필요.\n5단계(검증): LEGAL_CONSULT만으로는 불충분, 종합적 분석 필요 → COMPREHENSIVE 선택"\n\n## 판단 가이드:\n- 여러 의도가 섞여있다면, 가장 주된 의도를 intent에, 나머지를 sub_intents에 기록\n- "그리고", "또한", "함께", "같이" 등의 연결어가 있으면 복합 질문일 가능성 높음\n- 법률 관련 키워드가 있으면 LEGAL_CONSULT 우선\n- 가격/시세 언급이 명확하면 MARKET_INQUIRY\n- 계약서라는 단어와 함께 "작성/만들기"가 있으면 CONTRACT_CREATION\n- 계약서라는 단어와 함께 "검토/확인"이 있으면 CONTRACT_REVIEW\n- 불확실하면 confidence를 낮게 설정하고 UNCLEAR 선택\n- 복합 질문은 is_compound를 true로 설정하고 개별 작업으로 분해\n\n분석할 질문: 서초 아파트 가격 조회하고 상승률 분석해줘'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 16:03:41,684 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 16:03:41,684 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 16:03:41,684 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 16:03:41,684 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 16:03:41,684 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 16:03:41,684 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 16:03:45,560 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 07:03:45 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'3657'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'3686'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9936'), (b'x-ratelimit-remaining-tokens', b'197241'), (b'x-ratelimit-reset-requests', b'9m8.242s'), (b'x-ratelimit-reset-tokens', b'827ms'), (b'x-request-id', b'req_6af40f578d894785830f4831a0118a50'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b0f855c983091-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 16:03:45,561 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 16:03:45,561 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 16:03:45,569 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 16:03:45,570 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 16:03:45,570 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 16:03:45,570 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 07:03:45 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '3657', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '3686', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9936', 'x-ratelimit-remaining-tokens': '197241', 'x-ratelimit-reset-requests': '9m8.242s', 'x-ratelimit-reset-tokens': '827ms', 'x-request-id': 'req_6af40f578d894785830f4831a0118a50', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b0f855c983091-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 16:03:45,570 - openai._base_client - DEBUG - request_id: req_6af40f578d894785830f4831a0118a50
2025-10-05 16:03:45,570 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: intent_analysis | Model: gpt-4o-mini-2024-07-18 | Tokens: 3399 (prompt: 3181, completion: 218)
2025-10-05 16:03:45,570 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM Intent Analysis Result: {'intent': 'MARKET_INQUIRY', 'confidence': 0.9, 'keywords': ['서초', '아파트', '가격', '상승률', '조회', '분석'], 'sub_intents': [], 'is_compound': False, 'decomposed_tasks': [], 'entities': {'location': '서초', 'property_type': '아파트', 'action_verbs': ['조회', '분석']}, 'reasoning': '1단계(구조): 단순 정보 요청으로 가격 조회와 상승률 분석 포함. 2단계(유형): 정보 확인형 - 가격과 상승률에 대한 사실 확인 필요. 3단계(복잡도): 중 - 두 가지 독립적 조회가 필요. 4단계(처리): 가격 데이터 조회와 상승률 분석 필요. 5단계(검증): 단순 정보 제공으로 충분하므로 MARKET_INQUIRY로 분류.'}
2025-10-05 16:03:45,570 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-987f691e-6ed2-4b6b-bf5a-1f9ada455344', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 Agent 선택 전문가입니다.\n사용자의 요청에 가장 적합한 Agent/Team을 선택하는 것이 목표입니다.\n\n## 현재 상황\n\n**사용자 질문:** 서초 아파트 가격 조회하고 상승률 분석해줘\n**분석된 의도:** 시세조회\n**추출된 키워드:** [\'서초\', \'아파트\', \'가격\', \'상승률\', \'조회\', \'분석\']\n\n## 사용 가능한 Agent/Team 정보\n\n{\'search_team\': {\'name\': \'search_team\', \'capabilities\': \'법률 검색, 부동산 시세 조회, 대출 상품 검색\', \'tools\': [\'legal_search\', \'market_data\', \'loan_data\'], \'use_cases\': [\'법률 상담\', \'시세 조회\', \'대출 정보\']}, \'analysis_team\': {\'name\': \'analysis_team\', \'capabilities\': \'데이터 분석, 리스크 평가, 인사이트 생성, 추천\', \'tools\': [\'data_analyzer\', \'risk_evaluator\'], \'use_cases\': [\'시장 분석\', \'리스크 평가\', \'투자 분석\']}, \'document_team\': {\'name\': \'document_team\', \'capabilities\': \'계약서 작성, 문서 생성, 문서 검토\', \'tools\': [\'document_generator\', \'contract_reviewer\'], \'use_cases\': [\'계약서 작성\', \'문서 검토\']}}\n\n## Agent 역할 및 상세 가이드\n\n### 1. search_team (검색 팀)\n- **주요 기능**: 정보 검색 및 데이터 수집\n- **전문 분야**:\n  * 법률 정보 검색 (전세법, 임대차보호법, 부동산 관련 법규)\n  * 부동산 시세 조회 (매매가, 전세가, 월세, 실거래가)\n  * 대출 상품 정보 검색 (금리, 한도, 조건)\n  * 지역 정보 및 인프라 조회\n- **도구**: legal_search, market_data, loan_data\n- **적합한 작업**: 정보 조회, 데이터 수집, 법률 확인, 시세 파악\n- **예시**:\n  * "전세금 5% 인상 가능한가요?"\n  * "강남구 아파트 전세 시세"\n  * "전세자금대출 한도 얼마?"\n\n### 2. analysis_team (분석 팀)\n- **주요 기능**: 데이터 분석 및 평가\n- **전문 분야**:\n  * 시장 동향 분석 (상승률, 하락률, 추세)\n  * 리스크 평가 (계약, 투자 위험도)\n  * 투자 수익률 계산 (ROI, 월세 수익률)\n  * 대출 한도 및 조건 분석 (LTV, DTI, DSR)\n  * 비교 분석 (지역별, 상품별)\n- **도구**: data_analyzer, risk_evaluator, calculator\n- **적합한 작업**: 데이터 분석, 리스크 평가, 계산, 비교, 예측\n- **의존성**: 보통 search_team의 데이터가 필요\n- **예시**:\n  * "이 지역 투자 가치 분석해줘"\n  * "계약 리스크 평가해줘"\n  * "대출 가능 금액 계산해줘"\n\n### 3. document_team (문서 팀)\n- **주요 기능**: 문서 생성 및 관리\n- **전문 분야**:\n  * 계약서 작성 (임대차, 매매, 전세)\n  * 문서 템플릿 관리\n  * 특약사항 생성\n  * 계약서 수정안 작성\n  * 법률 문서 검토\n- **도구**: document_generator, contract_template, contract_reviewer\n- **적합한 작업**: 문서 작성, 계약서 생성, 문서 수정, 검토\n- **예시**:\n  * "임대차계약서 작성해줘"\n  * "특약사항 추가해줘"\n  * "계약서 수정안 만들어줘"\n\n## Chain-of-Thought Agent 선택 프로세스\n\n다음 단계를 **순서대로** 따라 최적의 Agent 조합을 선택하세요:\n\n### 1단계: 질문 요구사항 파악\n- 단순 정보 조회인가? → search_team만 필요\n- 판단/평가가 필요한가? → search + analysis 필요\n- 해결책 제시가 필요한가? → search + analysis 필요\n- 문서 생성이 필요한가? → document_team 추가\n\n### 2단계: 작업 복잡도 판단\n- **단순** (검색만): "~이 뭐야?", "~알려줘" → search_team\n- **중간** (검색+판단): "~괜찮아?", "~적절해?" → search + analysis\n- **복잡** (종합 해결): 구체적 상황 + "어떻게 해야 해?" → search + analysis\n\n### 3단계: 의존성 분석\n- 독립적 작업: 단일 팀으로 처리 가능\n- 순차적 의존: 이전 결과 필요 → 여러 팀 순서대로\n- 병렬 가능: 동시 조회 가능 → coordination: "parallel"\n\n### 4단계: 최종 검증\n- 선택한 팀들로 질문에 완전히 답변 가능한가?\n- 불필요한 팀이 포함되지 않았는가?\n- 순서가 논리적인가? (데이터 흐름 고려)\n\n### 중요 원칙:\n- **법률 키워드만으로 판단하지 말 것**: "법적으로 어떻게 해야 해?" = 법률 검색 + 분석 필요\n- **상황 설명 + 해결책 요청** = 반드시 analysis_team 포함\n- **구체적 수치 비교** (3억→10억 같은) = analysis_team 필요\n\n## 의도별 Agent 매핑 가이드 (기본 가이드 - CoT로 조정 가능)\n\n| 의도 (Intent) | 기본 조합 | 상황별 조정 |\n|--------------|-----------|-------------|\n| LEGAL_CONSULT | ["search_team"] | 해결책 요청시 → + analysis_team |\n| MARKET_INQUIRY | ["search_team"] | 비교/평가시 → + analysis_team |\n| LOAN_CONSULT | ["search_team", "analysis_team"] | 계산 필수 |\n| CONTRACT_CREATION | ["document_team"] | 검토 후 작성 → search + document |\n| CONTRACT_REVIEW | ["search_team", "analysis_team"] | 법률 검토 + 리스크 분석 |\n| COMPREHENSIVE | ["search_team", "analysis_team"] | **항상 분석 포함** |\n| RISK_ANALYSIS | ["analysis_team"] | 법률 근거 필요시 → search + analysis |\n| UNCLEAR | ["search_team", "analysis_team"] | 포괄적 대응 |\n\n**중요**: 위 매핑은 **기본 가이드**일 뿐입니다.\n실제 질문의 내용(CoT 분석 결과)에 따라 조정하세요!\n\n## 복합 질문 처리 예시 (CoT 적용)\n\n### 예시 1: 순차적 처리\n질문: "강남구 시세 확인하고 투자 가치 분석해줘"\n**CoT 분석**:\n1. 요구사항: 시세 조회 + 투자 가치 평가\n2. 복잡도: 중간 (검색 + 분석)\n3. 의존성: 시세 데이터 → 투자 분석 (순차)\n4. 검증: search만으로는 "투자 가치 평가" 불가능\n\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "1단계: 시세 조회+투자 평가 필요. 2단계: 중간 복잡도. 3단계: 순차 의존. 4단계: search로 시세 수집 후 analysis로 투자 가치 평가 필요",\n    "coordination": "sequential"\n}\n```\n\n### 예시 2: 단순 정보 조회\n질문: "전세금 인상률 한도가 얼마야?"\n**CoT 분석**:\n1. 요구사항: 단순 사실 확인\n2. 복잡도: 낮음 (정보 확인형)\n3. 의존성: 없음\n4. 검증: search_team만으로 충분\n\n```json\n{\n    "selected_agents": ["search_team"],\n    "reasoning": "1단계: 단순 정보 조회. 2단계: 저복잡도. 3단계: 독립적. 4단계: 법률 검색만으로 답변 가능",\n    "coordination": "single"\n}\n```\n\n### 예시 3: 해결책 요청 (핵심 예시!)\n질문: "집주인이 전세금 3억을 10억으로 올려달래. 법적으로 어떻게 해야 해?"\n의도: COMPREHENSIVE\n**CoT 분석**:\n1. 요구사항: 상황 설명 + 해결책 요청\n2. 복잡도: 높음 (구체적 상황 + 수치 비교)\n3. 의존성: 법률 확인 → 상황 분석 → 해결책 제시\n4. 검증: "법적으로"만 보고 search만 선택하면 불충분! 해결책 제시 필요\n\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "1단계: 법률 + 상황 분석 + 해결책 필요. 2단계: 고복잡도(3억→10억 비정상). 3단계: 순차(법률 확인 후 타당성 분석). 4단계: \'어떻게 해야\' = 단순 법률 조회 아님, 분석 필수",\n    "coordination": "sequential",\n    "confidence": 0.95\n}\n```\n\n## 응답 형식 (JSON)\n\n```json\n{\n    "selected_agents": ["선택된 agent/team 목록"],\n    "reasoning": "선택 이유를 구체적으로 설명. 각 Agent의 역할과 처리 순서 포함",\n    "coordination": "single/sequential/parallel/pipeline",\n    "dependencies": {"agent2": ["agent1"]},\n    "estimated_time": 30,\n    "confidence": 0.9\n}\n```\n\n## 선택 가이드라인\n\n1. **최소 Agent 원칙**: 가능한 적은 수의 Agent로 처리\n2. **전문성 우선**: 해당 작업에 가장 전문적인 Agent 선택\n3. **효율성 고려**: 병렬 처리 가능한 경우 명시\n4. **의존성 관리**: 데이터 흐름을 고려한 순서 지정\n5. **폴백 전략**: 불확실한 경우 ["search_team", "analysis_team"] 조합\n\n## 주의사항\n\n- selected_agents는 반드시 배열 형태\n- Agent 이름은 정확히: "search_team", "analysis_team", "document_team"\n- 최소 1개, 최대 3개 선택\n- 순서는 실행 우선순위 (앞에 있을수록 먼저 실행)\n- reasoning은 상세하고 논리적으로 작성\n- coordination 필드로 실행 방식 명시\n- 복합 질문의 경우 의존성 관계 명확히 표시'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 16:03:45,571 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 16:03:45,571 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 16:03:45,571 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 16:03:45,571 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 16:03:45,571 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 16:03:45,571 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 16:03:49,822 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 07:03:49 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'4036'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'4059'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9935'), (b'x-ratelimit-remaining-tokens', b'197880'), (b'x-ratelimit-reset-requests', b'9m12.996s'), (b'x-ratelimit-reset-tokens', b'636ms'), (b'x-request-id', b'req_23e7d2274b9544aeb5961f2d43e13735'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b0f9dad353091-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 16:03:49,822 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 16:03:49,822 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 16:03:49,831 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 16:03:49,831 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 16:03:49,831 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 16:03:49,831 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 07:03:49 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '4036', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '4059', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9935', 'x-ratelimit-remaining-tokens': '197880', 'x-ratelimit-reset-requests': '9m12.996s', 'x-ratelimit-reset-tokens': '636ms', 'x-request-id': 'req_23e7d2274b9544aeb5961f2d43e13735', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b0f9dad353091-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 16:03:49,831 - openai._base_client - DEBUG - request_id: req_23e7d2274b9544aeb5961f2d43e13735
2025-10-05 16:03:49,832 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: agent_selection | Model: gpt-4o-mini-2024-07-18 | Tokens: 2556 (prompt: 2367, completion: 189)
2025-10-05 16:03:49,832 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM agent selection reasoning: 1단계: 사용자는 서초 아파트의 가격 조회와 상승률 분석을 요청했습니다. 이는 단순한 정보 조회가 아니라, 시세 데이터 수집 후 그 데이터를 기반으로 상승률을 분석해야 하므로 search_team과 analysis_team이 필요합니다. 2단계: 중간 복잡도로, 시세 조회 후 분석이 필요합니다. 3단계: 시세 데이터가 분석에 필요하므로 순차적으로 진행해야 합니다. 4단계: search_team이 시세를 조회한 후, analysis_team이 상승률을 분석하는 구조로, 두 팀 모두 필요합니다.
2025-10-05 16:03:49,832 - app.service_agent.cognitive_agents.planning_agent - INFO - ✅ Primary LLM selected agents: ['search_team', 'analysis_team']
2025-10-05 16:03:49,832 - __main__ - INFO -   의도: 시세조회
2025-10-05 16:03:49,832 - __main__ - INFO -   신뢰도: 0.90
2025-10-05 16:03:49,832 - __main__ - INFO -   추천 Agent: ['search_team', 'analysis_team']
2025-10-05 16:03:49,832 - __main__ - INFO - 
[Step 2] Query Decomposition...
2025-10-05 16:03:49,832 - app.service_agent.cognitive_agents.query_decomposer - INFO - Decomposing query: 서초 아파트 가격 조회하고 상승률 분석해줘...
2025-10-05 16:03:49,832 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-3078cf36-cd6f-4f45-85da-82b2a4182d40', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 질문 분해 전문가입니다.\n복잡한 사용자 질문을 독립적으로 처리 가능한 작업 단위로 분해하는 것이 목표입니다.\n\n## Chain-of-Thought 분해 프로세스:\n\n### 1단계: 복합 질문 여부 판단\n- 단순 정보 조회만 필요한가? → is_compound: false\n- **다음 중 하나라도 해당하면 is_compound: true**:\n  * "그리고", "그 다음", "한 후" 같은 연결어로 여러 요청 연결\n  * 명시적으로 2개 이상의 작업 요청 (예: "시세 확인하고 대출 계산해줘")\n  * 상황 설명 + 해결책 요청 (예: "3억→10억 올려달래. 어떻게 해야 해?")\n  * 해결책을 위해 여러 단계 처리 필요 (검색 → 분석 → 제안)\n\n### 2단계: 필요 작업 식별\n- 정보 수집이 필요한가? → search 작업\n- 평가/판단이 필요한가? → analysis 작업\n- 문서 생성이 필요한가? → generation 작업\n- **해결책 요청**인가? → search + analysis (최소 2개)\n\n### 3단계: 작업 순서 결정\n- 독립적 작업: 병렬 가능\n- 이전 결과 필요: 순차 실행 (depends_on 설정)\n\n## 중요 원칙:\n1. 각 작업은 하나의 명확한 목표를 가져야 합니다\n2. 작업 간 의존성을 명확히 파악해야 합니다\n3. 병렬 처리 가능한 작업은 구분해야 합니다\n4. **주의**: "어떻게 해야", "방법 알려줘" 같은 해결책 요청은 복합 질문!\n\n## 작업 유형 (type):\n- search: 정보 검색 (법률, 시세, 대출 정보 등)\n- analysis: 데이터 분석 (리스크 평가, 시장 분석 등)\n- generation: 문서 생성 (계약서 작성 등)\n- review: 검토/평가 (계약서 검토, 조건 확인 등)\n- calculation: 계산/산출 (대출 한도, 세금 등)\n- comparison: 비교 분석 (여러 옵션 비교)\n\n## 담당 팀 (agent):\n- search_team: 법률, 시세, 대출 정보 검색\n- analysis_team: 데이터 분석, 리스크 평가, 계산\n- document_team: 문서 생성, 계약서 작성\n\n## 학습 예시:\n\n### 예시 1: 복합 질문 (순차적)\n질문: "강남구 아파트 시세 확인하고 대출 가능 금액 계산해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "강남구 아파트 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "대출 가능 금액 계산",\n            "type": "calculation",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "required_data": {"price": "task_0.result.price"},\n            "estimated_time": 15\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "시세 정보가 있어야 대출 금액 계산이 가능하므로 순차 실행"\n}\n```\n\n### 예시 2: 복합 질문 (병렬 가능)\n질문: "이 지역 전세 시세와 매매 시세 모두 알려주고 비교 분석해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "전세 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "매매 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "전세/매매 시세 비교 분석",\n            "type": "comparison",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0", "task_1"],\n            "required_data": {\n                "lease_price": "task_0.result",\n                "sale_price": "task_1.result"\n            },\n            "estimated_time": 25\n        }\n    ],\n    "execution_mode": "mixed",\n    "parallel_groups": [["task_0", "task_1"], ["task_2"]],\n    "reasoning": "시세 조회는 독립적이므로 병렬 처리, 비교는 두 결과 필요"\n}\n```\n\n### 예시 3: 복합 질문 (3단계 이상)\n질문: "이 계약서 검토해서 위험한 부분 찾고 수정안 만들어서 최종 계약서 작성해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "계약서 내용 전체 검토",\n            "type": "review",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 30\n        },\n        {\n            "description": "위험 요소 및 문제점 분석",\n            "type": "analysis",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "estimated_time": 25\n        },\n        {\n            "description": "수정안 제안 생성",\n            "type": "generation",\n            "agent": "document_team",\n            "priority": 3,\n            "depends_on": ["task_1"],\n            "estimated_time": 20\n        },\n        {\n            "description": "최종 계약서 작성",\n            "type": "generation",\n            "agent": "document_team",\n            "priority": 4,\n            "depends_on": ["task_2"],\n            "estimated_time": 30\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "각 단계가 이전 결과에 의존하므로 순차 실행 필요"\n}\n```\n\n### 예시 4: 단순 질문 (분해 불필요)\n질문: "전세금 인상률 상한이 얼마야?"\n분해:\n```json\n{\n    "is_compound": false,\n    "sub_tasks": [\n        {\n            "description": "전세금 인상률 상한 법률 정보 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 15\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "단일 정보 조회 요청으로 분해 불필요"\n}\n```\n\n### 예시 5: 조건부 실행\n질문: "이 물건 시세 확인하고 적정가면 대출 상담도 받고 싶어"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "물건 시세 조회 및 적정성 평가",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 25\n        },\n        {\n            "description": "대출 상담 정보 제공",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "optional": true,\n            "context": {"condition": "if_reasonable_price"},\n            "estimated_time": 20\n        }\n    ],\n    "execution_mode": "conditional",\n    "reasoning": "시세 확인 결과에 따라 대출 상담 진행 여부 결정"\n}\n```\n\n### 예시 6: 상황 설명 + 해결책 요청 (핵심 패턴!)\n질문: "집주인이 전세금 3억을 10억으로 올려달래. 법적으로 어떻게 해야 해?"\n**CoT 분석**:\n1. 질문 분석: 상황 설명 + 해결책 요청\n2. 연결어: 없지만, "어떻게 해야" = 해결책 요청\n3. 의존성: 법률 확인 → 상황 분석 → 대응 방안\n4. 복합 여부: **YES** (해결책을 위해 여러 단계 필요)\n\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "전세금 인상 한도 관련 법률 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "3억→10억 인상의 법적 타당성 및 적정성 분석",\n            "type": "analysis",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "required_data": {"legal_limit": "task_0.result", "current": 300000000, "requested": 1000000000},\n            "estimated_time": 25\n        },\n        {\n            "description": "구체적 대응 방안 및 해결책 제시",\n            "type": "analysis",\n            "agent": "analysis_team",\n            "priority": 3,\n            "depends_on": ["task_1"],\n            "estimated_time": 20\n        }\n    ],\n    "execution_mode": "sequential",\n    "confidence": 0.95,\n    "reasoning": "상황 설명+해결책 요청 패턴. \'어떻게 해야\'는 단순 정보 조회가 아닌 종합 해결책 필요. 법률 조회 → 상황 분석 → 해결책 제시 3단계 순차 처리"\n}\n```\n\n## Chain-of-Thought 프로세스:\n\n1. **질문 분석**: 어떤 정보나 작업을 요구하는가?\n2. **연결어 확인**: "그리고", "또한", "해서", "한 후" 등이 있는가?\n3. **의존성 파악**: 어떤 작업이 다른 작업의 결과를 필요로 하는가?\n4. **병렬성 판단**: 독립적으로 실행 가능한 작업이 있는가?\n5. **최적화**: 불필요한 분해는 없는가?\n\n## 응답 형식 (JSON):\n\n{\n    "is_compound": true/false,\n    "sub_tasks": [\n        {\n            "description": "작업 설명",\n            "type": "작업 유형",\n            "agent": "담당 팀",\n            "priority": 우선순위 (1이 가장 높음),\n            "depends_on": ["선행 작업 ID 리스트"],\n            "required_data": {"필요한 데이터 매핑"},\n            "estimated_time": 예상 소요 시간(초),\n            "optional": true/false,\n            "context": {"추가 컨텍스트"}\n        }\n    ],\n    "execution_mode": "sequential/parallel/mixed/conditional",\n    "parallel_groups": [["병렬 실행 가능한 작업 ID 그룹"]],\n    "confidence": 0.0-1.0,\n    "reasoning": "분해 결정의 이유와 근거"\n}\n\n## 분해 가이드라인:\n\n1. **분해가 필요한 경우**:\n   - 여러 종류의 정보를 요청하는 경우\n   - 순차적 처리가 필요한 경우 (A의 결과로 B 수행)\n   - 서로 다른 팀의 전문성이 필요한 경우\n\n2. **분해가 불필요한 경우**:\n   - 단일 정보 조회\n   - 단순한 질문-답변\n   - 하나의 팀에서 완전히 처리 가능한 경우\n\n3. **병렬 처리 기준**:\n   - 서로 독립적인 정보 조회\n   - 의존성이 없는 분석 작업\n   - 동시에 진행해도 충돌하지 않는 작업\n\n4. **우선순위 설정**:\n   - 의존성이 없는 작업: priority 1\n   - 1차 의존 작업: priority 2\n   - 2차 의존 작업: priority 3\n   - 이런 식으로 증가\n\n현재 의도: 시세조회\n추출된 엔티티: None\n\n분석할 질문: 서초 아파트 가격 조회하고 상승률 분석해줘'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 16:03:49,833 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 16:03:49,833 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 16:03:49,833 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 16:03:49,834 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 16:03:49,834 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 16:03:49,834 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 16:03:53,093 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 07:03:53 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'2460'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'3074'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9935'), (b'x-ratelimit-remaining-tokens', b'197335'), (b'x-ratelimit-reset-requests', b'9m17.695s'), (b'x-ratelimit-reset-tokens', b'799ms'), (b'x-request-id', b'req_95aca9e153f84387aed84451392ddc56'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b0fb848f43091-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 16:03:53,093 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 16:03:53,093 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 16:03:53,110 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 16:03:53,110 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 16:03:53,110 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 16:03:53,110 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 07:03:53 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '2460', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '3074', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9935', 'x-ratelimit-remaining-tokens': '197335', 'x-ratelimit-reset-requests': '9m17.695s', 'x-ratelimit-reset-tokens': '799ms', 'x-request-id': 'req_95aca9e153f84387aed84451392ddc56', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b0fb848f43091-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 16:03:53,111 - openai._base_client - DEBUG - request_id: req_95aca9e153f84387aed84451392ddc56
2025-10-05 16:03:53,111 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: query_decomposition | Model: gpt-4o-mini-2024-07-18 | Tokens: 2864 (prompt: 2690, completion: 174)
2025-10-05 16:03:53,111 - app.service_agent.cognitive_agents.query_decomposer - INFO - Successfully decomposed into 2 tasks
2025-10-05 16:03:53,111 - __main__ - INFO -   복합 질문: True
2025-10-05 16:03:53,111 - __main__ - INFO -   작업 수: 2
2025-10-05 16:03:53,111 - __main__ - INFO -   실행 모드: sequential
2025-10-05 16:03:53,111 - __main__ - INFO -     - task_0: 서초 아파트 시세 조회 (search_team)
2025-10-05 16:03:53,111 - __main__ - INFO -     - task_1: 서초 아파트 상승률 분석 (analysis_team)
2025-10-05 16:03:53,111 - __main__ - INFO - 
[Step 3] Comprehensive Plan 생성...
2025-10-05 16:03:53,111 - app.service_agent.cognitive_agents.planning_agent - INFO - Creating comprehensive plan for query: 서초 아파트 가격 조회하고 상승률 분석해줘...
2025-10-05 16:03:53,111 - app.service_agent.cognitive_agents.planning_agent - INFO - Analyzing intent for query: 서초 아파트 가격 조회하고 상승률 분석해줘...
2025-10-05 16:03:53,112 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-bdf32f48-cfb3-4b15-a1d6-503a60cc8bf3', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 의도 분석 전문가입니다.\n사용자의 질문을 정확히 이해하고, 어떤 종류의 도움이 필요한지 분류해야 합니다.\n\n## Chain-of-Thought 분석 프로세스\n\n질문을 분석할 때 다음 단계를 **순서대로** 따르세요:\n\n### 1단계: 질문 구조 파악\n- 단순 정보 요청인가? (예: "~이 뭐야?", "~알려줘")\n- 상황 설명이 포함되어 있는가? (배경, 현재 상태)\n- 구체적 수치나 데이터가 있는가? (금액, 비율, 기간 등)\n- 문제 해결을 요구하는가? (예: "어떻게 해야 해?", "방법 알려줘")\n\n### 2단계: 요청 유형 판단\n- **정보 확인형**: 사실, 개념, 규정 확인 → 검색만으로 충분\n- **평가/판단형**: "괜찮아?", "적절해?", "문제있어?" → 검색 + 분석 필요\n- **해결책 요청형**: "어떻게?", "방법?", "대처?" → 검색 + 분석 + 제안 필요\n- **비교/선택형**: "A vs B", "어느게 나아?" → 검색 + 분석(비교) 필요\n\n### 3단계: 복잡도 평가\n- **저**: 단일 개념/사실 확인 (예: "전세금 인상률 한도?")\n- **중**: 특정 상황 + 판단 (예: "3억을 5억으로 올려달래. 가능해?")\n- **고**: 복잡한 상황 + 여러 조건 + 해결책 (예: "10년 거주, 3억→10억 요구. 어떻게 해야 해?")\n\n### 4단계: 필요한 처리 결정\n- **검색만**: 정보 확인형 + 저복잡도\n- **검색+분석**: 평가/판단형 OR 중복잡도 OR 수치 비교 포함\n- **종합처리**: 해결책 요청형 OR 고복잡도 OR 여러 조건 동시 고려\n\n### 5단계: 최종 검증\n- 선택한 의도로 사용자 질문에 완전히 답변 가능한가?\n- 단순 정보 제공으로 끝나는가, 아니면 추가 분석/판단이 필요한가?\n- 상황 설명이 있으면서 "해결", "방법", "어떻게" 등이 있으면 → COMPREHENSIVE 고려\n\n## 중요: 복합 질문 처리\n복합적인 질문(여러 의도가 섞인 질문)의 경우, 가장 핵심적인 의도를 파악하되,\nsub_intents 필드에 부가적인 의도들도 함께 기록해주세요.\n\n**특히 주의**:\n- 법률 키워드가 있어도, "해결방법", "어떻게 해야" 같은 표현이 있으면 단순 LEGAL_CONSULT가 아닐 수 있음\n- 구체적 상황(금액, 기간 등) + 해결책 요구 = COMPREHENSIVE 또는 복합 의도로 분류\n\n## 분류 카테고리 설명:\n\n1. **LEGAL_CONSULT (법률상담)**\n   - 설명: 부동산 관련 법률, 권리, 의무에 대한 질문\n   - 예시:\n     * 단순: "전세금 5% 인상이 가능한가요?", "임대차계약 갱신 거부할 수 있나요?"\n     * 복합: "전세금 인상 가능한지 확인하고 법적 근거도 알려주세요"\n   - 키워드: 법, 전세, 임대, 보증금, 계약, 권리, 의무, 갱신, 임차인, 임대인, 법률, 규정, 조항\n   - 필요한 처리: 법률 데이터베이스 검색, 관련 법조항 찾기\n\n2. **MARKET_INQUIRY (시세조회)**\n   - 설명: 부동산 시장 가격, 시세, 거래 동향에 대한 질문\n   - 예시:\n     * 단순: "강남구 아파트 전세 시세 알려주세요", "서초동 매매가 얼마나 올랐나요?"\n     * 복합: "강남구 시세 확인하고 대출 가능 금액도 계산해줘"\n   - 키워드: 시세, 가격, 매매가, 전세가, 월세, 시장, 동향, 평균, 지역명, 상승률, 하락률\n   - 필요한 처리: 부동산 시세 데이터 조회, 지역별 가격 분석\n\n3. **LOAN_CONSULT (대출상담)**\n   - 설명: 주택담보대출, 전세자금대출 등 금융 관련 질문\n   - 예시:\n     * 단순: "전세자금대출 한도가 얼마인가요?", "LTV가 뭔가요?"\n     * 복합: "대출 한도 확인하고 금리 비교도 해주세요"\n   - 키워드: 대출, 금리, 한도, 조건, 상환, LTV, DTI, DSR, 담보, 금융, 은행\n   - 필요한 처리: 대출 상품 조회, 금리 정보 검색, 한도 계산\n\n4. **CONTRACT_CREATION (계약서작성)**\n   - 설명: 새로운 계약서나 문서를 작성해달라는 요청\n   - 예시:\n     * 단순: "임대차계약서 작성해주세요", "전세계약서 초안 만들어주세요"\n     * 복합: "계약서 작성하고 주의사항도 검토해주세요"\n   - 키워드: 작성, 만들, 생성, 초안, 계약서, 문서, 양식\n   - 필요한 처리: 문서 생성 에이전트 호출, 템플릿 기반 작성\n\n5. **CONTRACT_REVIEW (계약서검토)**\n   - 설명: 기존 계약서나 문서를 검토해달라는 요청\n   - 예시:\n     * 단순: "이 계약서 검토해주세요", "특약사항 문제없나요?"\n     * 복합: "계약서 검토하고 수정사항도 제안해주세요"\n   - 키워드: 검토, 확인, 점검, 리뷰, 분석해, 살펴봐, 체크\n   - 필요한 처리: 문서 분석, 위험 요소 식별, 개선사항 제안\n\n6. **COMPREHENSIVE (종합분석)**\n   - 설명: 여러 측면을 종합적으로 분석해달라는 요청, 또는 복잡한 상황에 대한 해결책 요청\n   - 예시:\n     * 단순: "이 물건 전체적으로 분석해주세요"\n     * 복합: "시세, 법률, 대출 모두 검토해서 종합 의견 주세요"\n     * 해결형: "10년 거주했는데 전세금 3억을 10억으로 올려달래. 어떻게 해야 해?"\n     * 상황+해결: "집주인이 계약 갱신 거부했어. 법적으로 어떻게 대응해야 할까?"\n   - 키워드: 종합, 전체, 모든, 전반적, 종합적, 평가, 분석, 어떻게, 방법, 해결, 대처\n   - 패턴: 구체적 상황 설명 + "어떻게/방법/해결" 요청\n   - 필요한 처리: 다중 데이터 소스 통합 분석, 상황 평가, 해결책 제시\n\n7. **RISK_ANALYSIS (리스크분석)**\n   - 설명: 위험 요소나 주의사항에 대한 질문\n   - 예시:\n     * 단순: "이 계약 위험한가요?", "주의할 점 알려주세요"\n     * 복합: "리스크 분석하고 대안도 제시해주세요"\n   - 키워드: 위험, 리스크, 주의, 문제점, 조심, 걱정, 우려\n   - 필요한 처리: 위험 요소 분석, 주의사항 추출\n\n8. **UNCLEAR (불분명)**\n   - 설명: 의도를 명확히 파악하기 어려운 질문\n   - 예시: "이거 좀 봐주세요", "어떻게 해야 할까요?", "도와주세요"\n   - 처리: 추가 질문으로 의도 명확화 필요\n\n9. **IRRELEVANT (무관)**\n   - 설명: 부동산과 전혀 관련 없는 질문\n   - 예시: "날씨 어때?", "저녁 뭐 먹지?", "주식 추천해줘"\n   - 처리: 부동산 관련 질문을 유도\n\n## 복합 질문 예시와 분석 (CoT 적용):\n\n### 예시 1: "강남구 아파트 시세 알려주고 전세자금대출 가능한지도 확인해줘"\n**CoT 분석**:\n1. 구조: 두 개의 요청 ("시세" + "대출")\n2. 유형: 정보 확인형 (둘 다)\n3. 복잡도: 중 (두 가지 독립적 조회)\n4. 필요 처리: 검색 + 계산/분석\n\n**결론**:\n- 주 의도: MARKET_INQUIRY (시세 조회가 먼저 필요)\n- 부가 의도: LOAN_CONSULT (대출 확인)\n- 분해: ["강남구 아파트 시세 조회", "전세자금대출 가능 여부 확인"]\n\n### 예시 2: "이 계약서 검토해서 위험한 부분 있는지 알려주고 수정 제안도 해줘"\n**CoT 분석**:\n1. 구조: 검토 + 위험 평가 + 수정안\n2. 유형: 평가/판단형 + 해결책 요청형\n3. 복잡도: 고 (3단계 처리)\n4. 필요 처리: 검토 + 분석 + 문서 생성\n\n**결론**:\n- 주 의도: CONTRACT_REVIEW (계약서 검토)\n- 부가 의도: RISK_ANALYSIS (위험 분석)\n- 분해: ["계약서 전체 검토", "위험 요소 식별", "수정사항 제안"]\n\n### 예시 3: "집주인이 짜증나, 10년 살았는데 전세금 3억을 10억으로 올려달래. 법적으로 해결방법 알려줘"\n**CoT 분석**:\n1. 구조: 상황 설명 (10년 거주, 3억→10억) + 해결책 요청\n2. 유형: 해결책 요청형 (단순 정보 X)\n3. 복잡도: 고 (구체적 상황 + 수치 비교 + 법률 + 대응방안)\n4. 필요 처리: 법률 검색 + 상황 분석 + 해결책 제시\n\n**결론**:\n- 주 의도: COMPREHENSIVE (복잡한 상황에 대한 종합 해결)\n- 부가 의도: LEGAL_CONSULT, RISK_ANALYSIS\n- 분해: ["전세금 인상 한도 법률 조회", "3억→10억 인상의 타당성 분석", "구체적 대응 방안 제시"]\n- **이유**: "법적으로"라는 키워드가 있지만, 단순 법률 확인이 아니라 구체적 상황에 대한 해결책을 요구하므로 COMPREHENSIVE\n\n### 예시 4: "전세금 인상률 상한이 얼마야?"\n**CoT 분석**:\n1. 구조: 단순 사실 확인\n2. 유형: 정보 확인형\n3. 복잡도: 저 (단일 개념)\n4. 필요 처리: 검색만\n\n**결론**:\n- 주 의도: LEGAL_CONSULT (법률 정보 조회)\n- 부가 의도: 없음\n- 분해: 필요 없음\n\n## 응답 형식 (JSON 형식으로 응답):\n\n```json\n{\n    "intent": "LEGAL_CONSULT",\n    "confidence": 0.9,\n    "keywords": ["전세금", "인상", "제한"],\n    "sub_intents": [],\n    "is_compound": false,\n    "decomposed_tasks": [],\n    "entities": {\n        "location": "강남구",\n        "price": "5억",\n        "contract_type": "전세",\n        "date": "2024년",\n        "area": "84㎡",\n        "action_verbs": ["확인", "검토"]\n    },\n    "reasoning": "전세금 인상에 대한 법률 질문이므로 LEGAL_CONSULT로 분류"\n}\n```\n\n응답 규칙:\n- intent: 위 9개 카테고리 중 하나 (대문자_언더스코어 형식)\n- confidence: 0.0~1.0 (0.8 이상이면 매우 확실, 0.5 미만이면 불확실)\n- keywords: 추출된 주요 키워드 목록\n- sub_intents: 복합 질문일 경우 부가적인 의도들\n- is_compound: 복합 질문 여부 (true/false)\n- decomposed_tasks: 복합 질문을 분해한 개별 작업들\n- entities: 추출된 엔티티 정보\n- reasoning: **반드시 CoT 5단계를 거쳐 분석한 과정을 포함** (구조 파악 → 유형 판단 → 복잡도 평가 → 필요 처리 → 최종 검증)\n\n## reasoning 작성 예시:\n"1단계(구조): 상황 설명(10년 거주, 3억→10억) + 해결책 요청 포함.\n2단계(유형): 해결책 요청형 - 단순 정보가 아닌 대응방안 필요.\n3단계(복잡도): 고 - 구체적 수치 비교와 복잡한 상황.\n4단계(처리): 법률 검색 + 상황 분석 + 해결책 제시 필요.\n5단계(검증): LEGAL_CONSULT만으로는 불충분, 종합적 분석 필요 → COMPREHENSIVE 선택"\n\n## 판단 가이드:\n- 여러 의도가 섞여있다면, 가장 주된 의도를 intent에, 나머지를 sub_intents에 기록\n- "그리고", "또한", "함께", "같이" 등의 연결어가 있으면 복합 질문일 가능성 높음\n- 법률 관련 키워드가 있으면 LEGAL_CONSULT 우선\n- 가격/시세 언급이 명확하면 MARKET_INQUIRY\n- 계약서라는 단어와 함께 "작성/만들기"가 있으면 CONTRACT_CREATION\n- 계약서라는 단어와 함께 "검토/확인"이 있으면 CONTRACT_REVIEW\n- 불확실하면 confidence를 낮게 설정하고 UNCLEAR 선택\n- 복합 질문은 is_compound를 true로 설정하고 개별 작업으로 분해\n\n분석할 질문: 서초 아파트 가격 조회하고 상승률 분석해줘'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 16:03:53,112 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 16:03:53,112 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 16:03:53,113 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 16:03:53,113 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 16:03:53,113 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 16:03:53,113 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 16:03:58,083 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 07:03:58 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'4759'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'4782'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9934'), (b'x-ratelimit-remaining-tokens', b'197241'), (b'x-ratelimit-reset-requests', b'9m22.737s'), (b'x-ratelimit-reset-tokens', b'827ms'), (b'x-request-id', b'req_bc39bc2942714d0ba4c2e64dd6a6dd8f'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b0fcccf9f3091-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 16:03:58,083 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 16:03:58,083 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 16:03:58,103 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 16:03:58,103 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 16:03:58,103 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 16:03:58,103 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 07:03:58 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '4759', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '4782', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9934', 'x-ratelimit-remaining-tokens': '197241', 'x-ratelimit-reset-requests': '9m22.737s', 'x-ratelimit-reset-tokens': '827ms', 'x-request-id': 'req_bc39bc2942714d0ba4c2e64dd6a6dd8f', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b0fcccf9f3091-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 16:03:58,103 - openai._base_client - DEBUG - request_id: req_bc39bc2942714d0ba4c2e64dd6a6dd8f
2025-10-05 16:03:58,104 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: intent_analysis | Model: gpt-4o-mini-2024-07-18 | Tokens: 3422 (prompt: 3181, completion: 241)
2025-10-05 16:03:58,104 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM Intent Analysis Result: {'intent': 'MARKET_INQUIRY', 'confidence': 0.85, 'keywords': ['서초', '아파트', '가격', '상승률', '조회', '분석'], 'sub_intents': [], 'is_compound': True, 'decomposed_tasks': ['서초 아파트 가격 조회', '서초 아파트 상승률 분석'], 'entities': {'location': '서초', 'property_type': '아파트', 'action_verbs': ['조회', '분석']}, 'reasoning': '1단계(구조): 두 개의 요청(가격 조회 + 상승률 분석) 포함. 2단계(유형): 정보 확인형 - 가격과 상승률에 대한 정보 요청. 3단계(복잡도): 중 - 두 가지 독립적 조회 필요. 4단계(처리): 검색 + 분석 필요. 5단계(검증): 두 가지 요청 모두 MARKET_INQUIRY에 해당하므로 주 의도는 MARKET_INQUIRY로 설정.'}
2025-10-05 16:03:58,104 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-c9e66f47-bda3-4976-9072-34883d771e4c', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 Agent 선택 전문가입니다.\n사용자의 요청에 가장 적합한 Agent/Team을 선택하는 것이 목표입니다.\n\n## 현재 상황\n\n**사용자 질문:** 서초 아파트 가격 조회하고 상승률 분석해줘\n**분석된 의도:** 시세조회\n**추출된 키워드:** [\'서초\', \'아파트\', \'가격\', \'상승률\', \'조회\', \'분석\']\n\n## 사용 가능한 Agent/Team 정보\n\n{\'search_team\': {\'name\': \'search_team\', \'capabilities\': \'법률 검색, 부동산 시세 조회, 대출 상품 검색\', \'tools\': [\'legal_search\', \'market_data\', \'loan_data\'], \'use_cases\': [\'법률 상담\', \'시세 조회\', \'대출 정보\']}, \'analysis_team\': {\'name\': \'analysis_team\', \'capabilities\': \'데이터 분석, 리스크 평가, 인사이트 생성, 추천\', \'tools\': [\'data_analyzer\', \'risk_evaluator\'], \'use_cases\': [\'시장 분석\', \'리스크 평가\', \'투자 분석\']}, \'document_team\': {\'name\': \'document_team\', \'capabilities\': \'계약서 작성, 문서 생성, 문서 검토\', \'tools\': [\'document_generator\', \'contract_reviewer\'], \'use_cases\': [\'계약서 작성\', \'문서 검토\']}}\n\n## Agent 역할 및 상세 가이드\n\n### 1. search_team (검색 팀)\n- **주요 기능**: 정보 검색 및 데이터 수집\n- **전문 분야**:\n  * 법률 정보 검색 (전세법, 임대차보호법, 부동산 관련 법규)\n  * 부동산 시세 조회 (매매가, 전세가, 월세, 실거래가)\n  * 대출 상품 정보 검색 (금리, 한도, 조건)\n  * 지역 정보 및 인프라 조회\n- **도구**: legal_search, market_data, loan_data\n- **적합한 작업**: 정보 조회, 데이터 수집, 법률 확인, 시세 파악\n- **예시**:\n  * "전세금 5% 인상 가능한가요?"\n  * "강남구 아파트 전세 시세"\n  * "전세자금대출 한도 얼마?"\n\n### 2. analysis_team (분석 팀)\n- **주요 기능**: 데이터 분석 및 평가\n- **전문 분야**:\n  * 시장 동향 분석 (상승률, 하락률, 추세)\n  * 리스크 평가 (계약, 투자 위험도)\n  * 투자 수익률 계산 (ROI, 월세 수익률)\n  * 대출 한도 및 조건 분석 (LTV, DTI, DSR)\n  * 비교 분석 (지역별, 상품별)\n- **도구**: data_analyzer, risk_evaluator, calculator\n- **적합한 작업**: 데이터 분석, 리스크 평가, 계산, 비교, 예측\n- **의존성**: 보통 search_team의 데이터가 필요\n- **예시**:\n  * "이 지역 투자 가치 분석해줘"\n  * "계약 리스크 평가해줘"\n  * "대출 가능 금액 계산해줘"\n\n### 3. document_team (문서 팀)\n- **주요 기능**: 문서 생성 및 관리\n- **전문 분야**:\n  * 계약서 작성 (임대차, 매매, 전세)\n  * 문서 템플릿 관리\n  * 특약사항 생성\n  * 계약서 수정안 작성\n  * 법률 문서 검토\n- **도구**: document_generator, contract_template, contract_reviewer\n- **적합한 작업**: 문서 작성, 계약서 생성, 문서 수정, 검토\n- **예시**:\n  * "임대차계약서 작성해줘"\n  * "특약사항 추가해줘"\n  * "계약서 수정안 만들어줘"\n\n## Chain-of-Thought Agent 선택 프로세스\n\n다음 단계를 **순서대로** 따라 최적의 Agent 조합을 선택하세요:\n\n### 1단계: 질문 요구사항 파악\n- 단순 정보 조회인가? → search_team만 필요\n- 판단/평가가 필요한가? → search + analysis 필요\n- 해결책 제시가 필요한가? → search + analysis 필요\n- 문서 생성이 필요한가? → document_team 추가\n\n### 2단계: 작업 복잡도 판단\n- **단순** (검색만): "~이 뭐야?", "~알려줘" → search_team\n- **중간** (검색+판단): "~괜찮아?", "~적절해?" → search + analysis\n- **복잡** (종합 해결): 구체적 상황 + "어떻게 해야 해?" → search + analysis\n\n### 3단계: 의존성 분석\n- 독립적 작업: 단일 팀으로 처리 가능\n- 순차적 의존: 이전 결과 필요 → 여러 팀 순서대로\n- 병렬 가능: 동시 조회 가능 → coordination: "parallel"\n\n### 4단계: 최종 검증\n- 선택한 팀들로 질문에 완전히 답변 가능한가?\n- 불필요한 팀이 포함되지 않았는가?\n- 순서가 논리적인가? (데이터 흐름 고려)\n\n### 중요 원칙:\n- **법률 키워드만으로 판단하지 말 것**: "법적으로 어떻게 해야 해?" = 법률 검색 + 분석 필요\n- **상황 설명 + 해결책 요청** = 반드시 analysis_team 포함\n- **구체적 수치 비교** (3억→10억 같은) = analysis_team 필요\n\n## 의도별 Agent 매핑 가이드 (기본 가이드 - CoT로 조정 가능)\n\n| 의도 (Intent) | 기본 조합 | 상황별 조정 |\n|--------------|-----------|-------------|\n| LEGAL_CONSULT | ["search_team"] | 해결책 요청시 → + analysis_team |\n| MARKET_INQUIRY | ["search_team"] | 비교/평가시 → + analysis_team |\n| LOAN_CONSULT | ["search_team", "analysis_team"] | 계산 필수 |\n| CONTRACT_CREATION | ["document_team"] | 검토 후 작성 → search + document |\n| CONTRACT_REVIEW | ["search_team", "analysis_team"] | 법률 검토 + 리스크 분석 |\n| COMPREHENSIVE | ["search_team", "analysis_team"] | **항상 분석 포함** |\n| RISK_ANALYSIS | ["analysis_team"] | 법률 근거 필요시 → search + analysis |\n| UNCLEAR | ["search_team", "analysis_team"] | 포괄적 대응 |\n\n**중요**: 위 매핑은 **기본 가이드**일 뿐입니다.\n실제 질문의 내용(CoT 분석 결과)에 따라 조정하세요!\n\n## 복합 질문 처리 예시 (CoT 적용)\n\n### 예시 1: 순차적 처리\n질문: "강남구 시세 확인하고 투자 가치 분석해줘"\n**CoT 분석**:\n1. 요구사항: 시세 조회 + 투자 가치 평가\n2. 복잡도: 중간 (검색 + 분석)\n3. 의존성: 시세 데이터 → 투자 분석 (순차)\n4. 검증: search만으로는 "투자 가치 평가" 불가능\n\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "1단계: 시세 조회+투자 평가 필요. 2단계: 중간 복잡도. 3단계: 순차 의존. 4단계: search로 시세 수집 후 analysis로 투자 가치 평가 필요",\n    "coordination": "sequential"\n}\n```\n\n### 예시 2: 단순 정보 조회\n질문: "전세금 인상률 한도가 얼마야?"\n**CoT 분석**:\n1. 요구사항: 단순 사실 확인\n2. 복잡도: 낮음 (정보 확인형)\n3. 의존성: 없음\n4. 검증: search_team만으로 충분\n\n```json\n{\n    "selected_agents": ["search_team"],\n    "reasoning": "1단계: 단순 정보 조회. 2단계: 저복잡도. 3단계: 독립적. 4단계: 법률 검색만으로 답변 가능",\n    "coordination": "single"\n}\n```\n\n### 예시 3: 해결책 요청 (핵심 예시!)\n질문: "집주인이 전세금 3억을 10억으로 올려달래. 법적으로 어떻게 해야 해?"\n의도: COMPREHENSIVE\n**CoT 분석**:\n1. 요구사항: 상황 설명 + 해결책 요청\n2. 복잡도: 높음 (구체적 상황 + 수치 비교)\n3. 의존성: 법률 확인 → 상황 분석 → 해결책 제시\n4. 검증: "법적으로"만 보고 search만 선택하면 불충분! 해결책 제시 필요\n\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "1단계: 법률 + 상황 분석 + 해결책 필요. 2단계: 고복잡도(3억→10억 비정상). 3단계: 순차(법률 확인 후 타당성 분석). 4단계: \'어떻게 해야\' = 단순 법률 조회 아님, 분석 필수",\n    "coordination": "sequential",\n    "confidence": 0.95\n}\n```\n\n## 응답 형식 (JSON)\n\n```json\n{\n    "selected_agents": ["선택된 agent/team 목록"],\n    "reasoning": "선택 이유를 구체적으로 설명. 각 Agent의 역할과 처리 순서 포함",\n    "coordination": "single/sequential/parallel/pipeline",\n    "dependencies": {"agent2": ["agent1"]},\n    "estimated_time": 30,\n    "confidence": 0.9\n}\n```\n\n## 선택 가이드라인\n\n1. **최소 Agent 원칙**: 가능한 적은 수의 Agent로 처리\n2. **전문성 우선**: 해당 작업에 가장 전문적인 Agent 선택\n3. **효율성 고려**: 병렬 처리 가능한 경우 명시\n4. **의존성 관리**: 데이터 흐름을 고려한 순서 지정\n5. **폴백 전략**: 불확실한 경우 ["search_team", "analysis_team"] 조합\n\n## 주의사항\n\n- selected_agents는 반드시 배열 형태\n- Agent 이름은 정확히: "search_team", "analysis_team", "document_team"\n- 최소 1개, 최대 3개 선택\n- 순서는 실행 우선순위 (앞에 있을수록 먼저 실행)\n- reasoning은 상세하고 논리적으로 작성\n- coordination 필드로 실행 방식 명시\n- 복합 질문의 경우 의존성 관계 명확히 표시'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 16:03:58,104 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 16:03:58,105 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 16:03:58,105 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 16:03:58,105 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 16:03:58,105 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 16:03:58,105 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 16:04:03,427 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 07:04:03 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'5103'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'5135'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9934'), (b'x-ratelimit-remaining-tokens', b'197880'), (b'x-ratelimit-reset-requests', b'9m26.387s'), (b'x-ratelimit-reset-tokens', b'636ms'), (b'x-request-id', b'req_77043f5f5dea421eb6bc2200984e5972'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b0febfe3a3091-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 16:04:03,427 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 16:04:03,427 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 16:04:03,434 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 16:04:03,434 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 16:04:03,434 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 16:04:03,434 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 07:04:03 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '5103', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '5135', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9934', 'x-ratelimit-remaining-tokens': '197880', 'x-ratelimit-reset-requests': '9m26.387s', 'x-ratelimit-reset-tokens': '636ms', 'x-request-id': 'req_77043f5f5dea421eb6bc2200984e5972', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b0febfe3a3091-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 16:04:03,434 - openai._base_client - DEBUG - request_id: req_77043f5f5dea421eb6bc2200984e5972
2025-10-05 16:04:03,435 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: agent_selection | Model: gpt-4o-mini-2024-07-18 | Tokens: 2563 (prompt: 2367, completion: 196)
2025-10-05 16:04:03,435 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM agent selection reasoning: 1단계: 사용자는 서초 아파트의 가격 조회와 상승률 분석을 요청했습니다. 이는 단순한 정보 조회가 아니라, 가격 데이터 수집 후 상승률을 분석해야 하므로 search_team과 analysis_team이 필요합니다. 2단계: 중간 복잡도로, 시세 조회 후 분석이 필요합니다. 3단계: 시세 데이터가 필요하므로 search_team이 먼저 실행되고, 그 결과를 바탕으로 analysis_team이 상승률을 분석해야 합니다. 4단계: search_team이 시세를 조회한 후, analysis_team이 상승률을 분석하는 순서로 진행해야 합니다.
2025-10-05 16:04:03,435 - app.service_agent.cognitive_agents.planning_agent - INFO - ✅ Primary LLM selected agents: ['search_team', 'analysis_team']
2025-10-05 16:04:03,435 - app.service_agent.cognitive_agents.planning_agent - INFO - Intent analyzed: 시세조회 (confidence: 0.85)
2025-10-05 16:04:03,435 - app.service_agent.cognitive_agents.query_decomposer - INFO - Decomposing query: 서초 아파트 가격 조회하고 상승률 분석해줘...
2025-10-05 16:04:03,435 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-4c6e158c-01ac-438b-b91f-f57b25d123f9', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 질문 분해 전문가입니다.\n복잡한 사용자 질문을 독립적으로 처리 가능한 작업 단위로 분해하는 것이 목표입니다.\n\n## Chain-of-Thought 분해 프로세스:\n\n### 1단계: 복합 질문 여부 판단\n- 단순 정보 조회만 필요한가? → is_compound: false\n- **다음 중 하나라도 해당하면 is_compound: true**:\n  * "그리고", "그 다음", "한 후" 같은 연결어로 여러 요청 연결\n  * 명시적으로 2개 이상의 작업 요청 (예: "시세 확인하고 대출 계산해줘")\n  * 상황 설명 + 해결책 요청 (예: "3억→10억 올려달래. 어떻게 해야 해?")\n  * 해결책을 위해 여러 단계 처리 필요 (검색 → 분석 → 제안)\n\n### 2단계: 필요 작업 식별\n- 정보 수집이 필요한가? → search 작업\n- 평가/판단이 필요한가? → analysis 작업\n- 문서 생성이 필요한가? → generation 작업\n- **해결책 요청**인가? → search + analysis (최소 2개)\n\n### 3단계: 작업 순서 결정\n- 독립적 작업: 병렬 가능\n- 이전 결과 필요: 순차 실행 (depends_on 설정)\n\n## 중요 원칙:\n1. 각 작업은 하나의 명확한 목표를 가져야 합니다\n2. 작업 간 의존성을 명확히 파악해야 합니다\n3. 병렬 처리 가능한 작업은 구분해야 합니다\n4. **주의**: "어떻게 해야", "방법 알려줘" 같은 해결책 요청은 복합 질문!\n\n## 작업 유형 (type):\n- search: 정보 검색 (법률, 시세, 대출 정보 등)\n- analysis: 데이터 분석 (리스크 평가, 시장 분석 등)\n- generation: 문서 생성 (계약서 작성 등)\n- review: 검토/평가 (계약서 검토, 조건 확인 등)\n- calculation: 계산/산출 (대출 한도, 세금 등)\n- comparison: 비교 분석 (여러 옵션 비교)\n\n## 담당 팀 (agent):\n- search_team: 법률, 시세, 대출 정보 검색\n- analysis_team: 데이터 분석, 리스크 평가, 계산\n- document_team: 문서 생성, 계약서 작성\n\n## 학습 예시:\n\n### 예시 1: 복합 질문 (순차적)\n질문: "강남구 아파트 시세 확인하고 대출 가능 금액 계산해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "강남구 아파트 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "대출 가능 금액 계산",\n            "type": "calculation",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "required_data": {"price": "task_0.result.price"},\n            "estimated_time": 15\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "시세 정보가 있어야 대출 금액 계산이 가능하므로 순차 실행"\n}\n```\n\n### 예시 2: 복합 질문 (병렬 가능)\n질문: "이 지역 전세 시세와 매매 시세 모두 알려주고 비교 분석해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "전세 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "매매 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "전세/매매 시세 비교 분석",\n            "type": "comparison",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0", "task_1"],\n            "required_data": {\n                "lease_price": "task_0.result",\n                "sale_price": "task_1.result"\n            },\n            "estimated_time": 25\n        }\n    ],\n    "execution_mode": "mixed",\n    "parallel_groups": [["task_0", "task_1"], ["task_2"]],\n    "reasoning": "시세 조회는 독립적이므로 병렬 처리, 비교는 두 결과 필요"\n}\n```\n\n### 예시 3: 복합 질문 (3단계 이상)\n질문: "이 계약서 검토해서 위험한 부분 찾고 수정안 만들어서 최종 계약서 작성해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "계약서 내용 전체 검토",\n            "type": "review",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 30\n        },\n        {\n            "description": "위험 요소 및 문제점 분석",\n            "type": "analysis",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "estimated_time": 25\n        },\n        {\n            "description": "수정안 제안 생성",\n            "type": "generation",\n            "agent": "document_team",\n            "priority": 3,\n            "depends_on": ["task_1"],\n            "estimated_time": 20\n        },\n        {\n            "description": "최종 계약서 작성",\n            "type": "generation",\n            "agent": "document_team",\n            "priority": 4,\n            "depends_on": ["task_2"],\n            "estimated_time": 30\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "각 단계가 이전 결과에 의존하므로 순차 실행 필요"\n}\n```\n\n### 예시 4: 단순 질문 (분해 불필요)\n질문: "전세금 인상률 상한이 얼마야?"\n분해:\n```json\n{\n    "is_compound": false,\n    "sub_tasks": [\n        {\n            "description": "전세금 인상률 상한 법률 정보 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 15\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "단일 정보 조회 요청으로 분해 불필요"\n}\n```\n\n### 예시 5: 조건부 실행\n질문: "이 물건 시세 확인하고 적정가면 대출 상담도 받고 싶어"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "물건 시세 조회 및 적정성 평가",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 25\n        },\n        {\n            "description": "대출 상담 정보 제공",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "optional": true,\n            "context": {"condition": "if_reasonable_price"},\n            "estimated_time": 20\n        }\n    ],\n    "execution_mode": "conditional",\n    "reasoning": "시세 확인 결과에 따라 대출 상담 진행 여부 결정"\n}\n```\n\n### 예시 6: 상황 설명 + 해결책 요청 (핵심 패턴!)\n질문: "집주인이 전세금 3억을 10억으로 올려달래. 법적으로 어떻게 해야 해?"\n**CoT 분석**:\n1. 질문 분석: 상황 설명 + 해결책 요청\n2. 연결어: 없지만, "어떻게 해야" = 해결책 요청\n3. 의존성: 법률 확인 → 상황 분석 → 대응 방안\n4. 복합 여부: **YES** (해결책을 위해 여러 단계 필요)\n\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "전세금 인상 한도 관련 법률 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "3억→10억 인상의 법적 타당성 및 적정성 분석",\n            "type": "analysis",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "required_data": {"legal_limit": "task_0.result", "current": 300000000, "requested": 1000000000},\n            "estimated_time": 25\n        },\n        {\n            "description": "구체적 대응 방안 및 해결책 제시",\n            "type": "analysis",\n            "agent": "analysis_team",\n            "priority": 3,\n            "depends_on": ["task_1"],\n            "estimated_time": 20\n        }\n    ],\n    "execution_mode": "sequential",\n    "confidence": 0.95,\n    "reasoning": "상황 설명+해결책 요청 패턴. \'어떻게 해야\'는 단순 정보 조회가 아닌 종합 해결책 필요. 법률 조회 → 상황 분석 → 해결책 제시 3단계 순차 처리"\n}\n```\n\n## Chain-of-Thought 프로세스:\n\n1. **질문 분석**: 어떤 정보나 작업을 요구하는가?\n2. **연결어 확인**: "그리고", "또한", "해서", "한 후" 등이 있는가?\n3. **의존성 파악**: 어떤 작업이 다른 작업의 결과를 필요로 하는가?\n4. **병렬성 판단**: 독립적으로 실행 가능한 작업이 있는가?\n5. **최적화**: 불필요한 분해는 없는가?\n\n## 응답 형식 (JSON):\n\n{\n    "is_compound": true/false,\n    "sub_tasks": [\n        {\n            "description": "작업 설명",\n            "type": "작업 유형",\n            "agent": "담당 팀",\n            "priority": 우선순위 (1이 가장 높음),\n            "depends_on": ["선행 작업 ID 리스트"],\n            "required_data": {"필요한 데이터 매핑"},\n            "estimated_time": 예상 소요 시간(초),\n            "optional": true/false,\n            "context": {"추가 컨텍스트"}\n        }\n    ],\n    "execution_mode": "sequential/parallel/mixed/conditional",\n    "parallel_groups": [["병렬 실행 가능한 작업 ID 그룹"]],\n    "confidence": 0.0-1.0,\n    "reasoning": "분해 결정의 이유와 근거"\n}\n\n## 분해 가이드라인:\n\n1. **분해가 필요한 경우**:\n   - 여러 종류의 정보를 요청하는 경우\n   - 순차적 처리가 필요한 경우 (A의 결과로 B 수행)\n   - 서로 다른 팀의 전문성이 필요한 경우\n\n2. **분해가 불필요한 경우**:\n   - 단일 정보 조회\n   - 단순한 질문-답변\n   - 하나의 팀에서 완전히 처리 가능한 경우\n\n3. **병렬 처리 기준**:\n   - 서로 독립적인 정보 조회\n   - 의존성이 없는 분석 작업\n   - 동시에 진행해도 충돌하지 않는 작업\n\n4. **우선순위 설정**:\n   - 의존성이 없는 작업: priority 1\n   - 1차 의존 작업: priority 2\n   - 2차 의존 작업: priority 3\n   - 이런 식으로 증가\n\n현재 의도: 시세조회\n추출된 엔티티: {\'location\': \'서초\', \'property_type\': \'아파트\', \'action_verbs\': [\'조회\', \'분석\']}\n\n분석할 질문: 서초 아파트 가격 조회하고 상승률 분석해줘'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 16:04:03,436 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 16:04:03,436 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 16:04:03,436 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 16:04:03,436 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 16:04:03,436 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 16:04:03,436 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 16:04:06,155 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 07:04:06 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'2500'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'2526'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9934'), (b'x-ratelimit-remaining-tokens', b'197313'), (b'x-ratelimit-reset-requests', b'9m29.691s'), (b'x-ratelimit-reset-tokens', b'806ms'), (b'x-request-id', b'req_be6763c4bab847908ddeb4219c88a6bc'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b100d59b53091-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 16:04:06,156 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 16:04:06,156 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 16:04:06,184 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 16:04:06,184 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 16:04:06,184 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 16:04:06,184 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 07:04:06 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '2500', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '2526', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9934', 'x-ratelimit-remaining-tokens': '197313', 'x-ratelimit-reset-requests': '9m29.691s', 'x-ratelimit-reset-tokens': '806ms', 'x-request-id': 'req_be6763c4bab847908ddeb4219c88a6bc', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b100d59b53091-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 16:04:06,185 - openai._base_client - DEBUG - request_id: req_be6763c4bab847908ddeb4219c88a6bc
2025-10-05 16:04:06,185 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: query_decomposition | Model: gpt-4o-mini-2024-07-18 | Tokens: 2891 (prompt: 2716, completion: 175)
2025-10-05 16:04:06,185 - app.service_agent.cognitive_agents.query_decomposer - INFO - Successfully decomposed into 2 tasks
2025-10-05 16:04:06,185 - app.service_agent.cognitive_agents.planning_agent - INFO - Query decomposed into 2 tasks
2025-10-05 16:04:06,185 - app.service_agent.cognitive_agents.planning_agent - WARNING - Plan validation errors: ["Agent 'search_team' not found in registry", "Agent 'analysis_team' depends on missing 'task_0'", "Agent 'analysis_team' not found in registry"]
2025-10-05 16:04:06,185 - app.service_agent.cognitive_agents.planning_agent - INFO - Optimizing execution plan
2025-10-05 16:04:06,185 - app.service_agent.cognitive_agents.planning_agent - INFO - Comprehensive plan created: Intent: 시세조회 (confidence: 0.85) | Strategy: sequential | Agents: search_team, analysis_team | Estimated time: 45.0s
2025-10-05 16:04:06,185 - __main__ - INFO -   전략: sequential
2025-10-05 16:04:06,185 - __main__ - INFO -   단계 수: 2
2025-10-05 16:04:06,185 - __main__ - INFO - 
✓ 테스트 성공 (소요시간: 24.50초)
2025-10-05 16:04:06,188 - __main__ - INFO - 
결과 저장: C:\kdy\Projects\holmesnyangz\beta_v001\backend\app\service_agent\reports\phase1_test_results.json
2025-10-05 16:04:06,188 - __main__ - INFO - 
================================================================================
2025-10-05 16:04:06,189 - __main__ - INFO - [36] 복합 질문 테스트: D016
2025-10-05 16:04:06,189 - __main__ - INFO - 질문: 전세자금대출 상품 찾고 금리 비교해줘
2025-10-05 16:04:06,189 - __main__ - INFO - ================================================================================
2025-10-05 16:04:06,189 - __main__ - INFO - 
[Step 1] Intent 분석...
2025-10-05 16:04:06,189 - app.service_agent.cognitive_agents.planning_agent - INFO - Analyzing intent for query: 전세자금대출 상품 찾고 금리 비교해줘...
2025-10-05 16:04:06,189 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-3fd250a8-10fe-488c-b1e6-cb75ae6be822', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 의도 분석 전문가입니다.\n사용자의 질문을 정확히 이해하고, 어떤 종류의 도움이 필요한지 분류해야 합니다.\n\n## Chain-of-Thought 분석 프로세스\n\n질문을 분석할 때 다음 단계를 **순서대로** 따르세요:\n\n### 1단계: 질문 구조 파악\n- 단순 정보 요청인가? (예: "~이 뭐야?", "~알려줘")\n- 상황 설명이 포함되어 있는가? (배경, 현재 상태)\n- 구체적 수치나 데이터가 있는가? (금액, 비율, 기간 등)\n- 문제 해결을 요구하는가? (예: "어떻게 해야 해?", "방법 알려줘")\n\n### 2단계: 요청 유형 판단\n- **정보 확인형**: 사실, 개념, 규정 확인 → 검색만으로 충분\n- **평가/판단형**: "괜찮아?", "적절해?", "문제있어?" → 검색 + 분석 필요\n- **해결책 요청형**: "어떻게?", "방법?", "대처?" → 검색 + 분석 + 제안 필요\n- **비교/선택형**: "A vs B", "어느게 나아?" → 검색 + 분석(비교) 필요\n\n### 3단계: 복잡도 평가\n- **저**: 단일 개념/사실 확인 (예: "전세금 인상률 한도?")\n- **중**: 특정 상황 + 판단 (예: "3억을 5억으로 올려달래. 가능해?")\n- **고**: 복잡한 상황 + 여러 조건 + 해결책 (예: "10년 거주, 3억→10억 요구. 어떻게 해야 해?")\n\n### 4단계: 필요한 처리 결정\n- **검색만**: 정보 확인형 + 저복잡도\n- **검색+분석**: 평가/판단형 OR 중복잡도 OR 수치 비교 포함\n- **종합처리**: 해결책 요청형 OR 고복잡도 OR 여러 조건 동시 고려\n\n### 5단계: 최종 검증\n- 선택한 의도로 사용자 질문에 완전히 답변 가능한가?\n- 단순 정보 제공으로 끝나는가, 아니면 추가 분석/판단이 필요한가?\n- 상황 설명이 있으면서 "해결", "방법", "어떻게" 등이 있으면 → COMPREHENSIVE 고려\n\n## 중요: 복합 질문 처리\n복합적인 질문(여러 의도가 섞인 질문)의 경우, 가장 핵심적인 의도를 파악하되,\nsub_intents 필드에 부가적인 의도들도 함께 기록해주세요.\n\n**특히 주의**:\n- 법률 키워드가 있어도, "해결방법", "어떻게 해야" 같은 표현이 있으면 단순 LEGAL_CONSULT가 아닐 수 있음\n- 구체적 상황(금액, 기간 등) + 해결책 요구 = COMPREHENSIVE 또는 복합 의도로 분류\n\n## 분류 카테고리 설명:\n\n1. **LEGAL_CONSULT (법률상담)**\n   - 설명: 부동산 관련 법률, 권리, 의무에 대한 질문\n   - 예시:\n     * 단순: "전세금 5% 인상이 가능한가요?", "임대차계약 갱신 거부할 수 있나요?"\n     * 복합: "전세금 인상 가능한지 확인하고 법적 근거도 알려주세요"\n   - 키워드: 법, 전세, 임대, 보증금, 계약, 권리, 의무, 갱신, 임차인, 임대인, 법률, 규정, 조항\n   - 필요한 처리: 법률 데이터베이스 검색, 관련 법조항 찾기\n\n2. **MARKET_INQUIRY (시세조회)**\n   - 설명: 부동산 시장 가격, 시세, 거래 동향에 대한 질문\n   - 예시:\n     * 단순: "강남구 아파트 전세 시세 알려주세요", "서초동 매매가 얼마나 올랐나요?"\n     * 복합: "강남구 시세 확인하고 대출 가능 금액도 계산해줘"\n   - 키워드: 시세, 가격, 매매가, 전세가, 월세, 시장, 동향, 평균, 지역명, 상승률, 하락률\n   - 필요한 처리: 부동산 시세 데이터 조회, 지역별 가격 분석\n\n3. **LOAN_CONSULT (대출상담)**\n   - 설명: 주택담보대출, 전세자금대출 등 금융 관련 질문\n   - 예시:\n     * 단순: "전세자금대출 한도가 얼마인가요?", "LTV가 뭔가요?"\n     * 복합: "대출 한도 확인하고 금리 비교도 해주세요"\n   - 키워드: 대출, 금리, 한도, 조건, 상환, LTV, DTI, DSR, 담보, 금융, 은행\n   - 필요한 처리: 대출 상품 조회, 금리 정보 검색, 한도 계산\n\n4. **CONTRACT_CREATION (계약서작성)**\n   - 설명: 새로운 계약서나 문서를 작성해달라는 요청\n   - 예시:\n     * 단순: "임대차계약서 작성해주세요", "전세계약서 초안 만들어주세요"\n     * 복합: "계약서 작성하고 주의사항도 검토해주세요"\n   - 키워드: 작성, 만들, 생성, 초안, 계약서, 문서, 양식\n   - 필요한 처리: 문서 생성 에이전트 호출, 템플릿 기반 작성\n\n5. **CONTRACT_REVIEW (계약서검토)**\n   - 설명: 기존 계약서나 문서를 검토해달라는 요청\n   - 예시:\n     * 단순: "이 계약서 검토해주세요", "특약사항 문제없나요?"\n     * 복합: "계약서 검토하고 수정사항도 제안해주세요"\n   - 키워드: 검토, 확인, 점검, 리뷰, 분석해, 살펴봐, 체크\n   - 필요한 처리: 문서 분석, 위험 요소 식별, 개선사항 제안\n\n6. **COMPREHENSIVE (종합분석)**\n   - 설명: 여러 측면을 종합적으로 분석해달라는 요청, 또는 복잡한 상황에 대한 해결책 요청\n   - 예시:\n     * 단순: "이 물건 전체적으로 분석해주세요"\n     * 복합: "시세, 법률, 대출 모두 검토해서 종합 의견 주세요"\n     * 해결형: "10년 거주했는데 전세금 3억을 10억으로 올려달래. 어떻게 해야 해?"\n     * 상황+해결: "집주인이 계약 갱신 거부했어. 법적으로 어떻게 대응해야 할까?"\n   - 키워드: 종합, 전체, 모든, 전반적, 종합적, 평가, 분석, 어떻게, 방법, 해결, 대처\n   - 패턴: 구체적 상황 설명 + "어떻게/방법/해결" 요청\n   - 필요한 처리: 다중 데이터 소스 통합 분석, 상황 평가, 해결책 제시\n\n7. **RISK_ANALYSIS (리스크분석)**\n   - 설명: 위험 요소나 주의사항에 대한 질문\n   - 예시:\n     * 단순: "이 계약 위험한가요?", "주의할 점 알려주세요"\n     * 복합: "리스크 분석하고 대안도 제시해주세요"\n   - 키워드: 위험, 리스크, 주의, 문제점, 조심, 걱정, 우려\n   - 필요한 처리: 위험 요소 분석, 주의사항 추출\n\n8. **UNCLEAR (불분명)**\n   - 설명: 의도를 명확히 파악하기 어려운 질문\n   - 예시: "이거 좀 봐주세요", "어떻게 해야 할까요?", "도와주세요"\n   - 처리: 추가 질문으로 의도 명확화 필요\n\n9. **IRRELEVANT (무관)**\n   - 설명: 부동산과 전혀 관련 없는 질문\n   - 예시: "날씨 어때?", "저녁 뭐 먹지?", "주식 추천해줘"\n   - 처리: 부동산 관련 질문을 유도\n\n## 복합 질문 예시와 분석 (CoT 적용):\n\n### 예시 1: "강남구 아파트 시세 알려주고 전세자금대출 가능한지도 확인해줘"\n**CoT 분석**:\n1. 구조: 두 개의 요청 ("시세" + "대출")\n2. 유형: 정보 확인형 (둘 다)\n3. 복잡도: 중 (두 가지 독립적 조회)\n4. 필요 처리: 검색 + 계산/분석\n\n**결론**:\n- 주 의도: MARKET_INQUIRY (시세 조회가 먼저 필요)\n- 부가 의도: LOAN_CONSULT (대출 확인)\n- 분해: ["강남구 아파트 시세 조회", "전세자금대출 가능 여부 확인"]\n\n### 예시 2: "이 계약서 검토해서 위험한 부분 있는지 알려주고 수정 제안도 해줘"\n**CoT 분석**:\n1. 구조: 검토 + 위험 평가 + 수정안\n2. 유형: 평가/판단형 + 해결책 요청형\n3. 복잡도: 고 (3단계 처리)\n4. 필요 처리: 검토 + 분석 + 문서 생성\n\n**결론**:\n- 주 의도: CONTRACT_REVIEW (계약서 검토)\n- 부가 의도: RISK_ANALYSIS (위험 분석)\n- 분해: ["계약서 전체 검토", "위험 요소 식별", "수정사항 제안"]\n\n### 예시 3: "집주인이 짜증나, 10년 살았는데 전세금 3억을 10억으로 올려달래. 법적으로 해결방법 알려줘"\n**CoT 분석**:\n1. 구조: 상황 설명 (10년 거주, 3억→10억) + 해결책 요청\n2. 유형: 해결책 요청형 (단순 정보 X)\n3. 복잡도: 고 (구체적 상황 + 수치 비교 + 법률 + 대응방안)\n4. 필요 처리: 법률 검색 + 상황 분석 + 해결책 제시\n\n**결론**:\n- 주 의도: COMPREHENSIVE (복잡한 상황에 대한 종합 해결)\n- 부가 의도: LEGAL_CONSULT, RISK_ANALYSIS\n- 분해: ["전세금 인상 한도 법률 조회", "3억→10억 인상의 타당성 분석", "구체적 대응 방안 제시"]\n- **이유**: "법적으로"라는 키워드가 있지만, 단순 법률 확인이 아니라 구체적 상황에 대한 해결책을 요구하므로 COMPREHENSIVE\n\n### 예시 4: "전세금 인상률 상한이 얼마야?"\n**CoT 분석**:\n1. 구조: 단순 사실 확인\n2. 유형: 정보 확인형\n3. 복잡도: 저 (단일 개념)\n4. 필요 처리: 검색만\n\n**결론**:\n- 주 의도: LEGAL_CONSULT (법률 정보 조회)\n- 부가 의도: 없음\n- 분해: 필요 없음\n\n## 응답 형식 (JSON 형식으로 응답):\n\n```json\n{\n    "intent": "LEGAL_CONSULT",\n    "confidence": 0.9,\n    "keywords": ["전세금", "인상", "제한"],\n    "sub_intents": [],\n    "is_compound": false,\n    "decomposed_tasks": [],\n    "entities": {\n        "location": "강남구",\n        "price": "5억",\n        "contract_type": "전세",\n        "date": "2024년",\n        "area": "84㎡",\n        "action_verbs": ["확인", "검토"]\n    },\n    "reasoning": "전세금 인상에 대한 법률 질문이므로 LEGAL_CONSULT로 분류"\n}\n```\n\n응답 규칙:\n- intent: 위 9개 카테고리 중 하나 (대문자_언더스코어 형식)\n- confidence: 0.0~1.0 (0.8 이상이면 매우 확실, 0.5 미만이면 불확실)\n- keywords: 추출된 주요 키워드 목록\n- sub_intents: 복합 질문일 경우 부가적인 의도들\n- is_compound: 복합 질문 여부 (true/false)\n- decomposed_tasks: 복합 질문을 분해한 개별 작업들\n- entities: 추출된 엔티티 정보\n- reasoning: **반드시 CoT 5단계를 거쳐 분석한 과정을 포함** (구조 파악 → 유형 판단 → 복잡도 평가 → 필요 처리 → 최종 검증)\n\n## reasoning 작성 예시:\n"1단계(구조): 상황 설명(10년 거주, 3억→10억) + 해결책 요청 포함.\n2단계(유형): 해결책 요청형 - 단순 정보가 아닌 대응방안 필요.\n3단계(복잡도): 고 - 구체적 수치 비교와 복잡한 상황.\n4단계(처리): 법률 검색 + 상황 분석 + 해결책 제시 필요.\n5단계(검증): LEGAL_CONSULT만으로는 불충분, 종합적 분석 필요 → COMPREHENSIVE 선택"\n\n## 판단 가이드:\n- 여러 의도가 섞여있다면, 가장 주된 의도를 intent에, 나머지를 sub_intents에 기록\n- "그리고", "또한", "함께", "같이" 등의 연결어가 있으면 복합 질문일 가능성 높음\n- 법률 관련 키워드가 있으면 LEGAL_CONSULT 우선\n- 가격/시세 언급이 명확하면 MARKET_INQUIRY\n- 계약서라는 단어와 함께 "작성/만들기"가 있으면 CONTRACT_CREATION\n- 계약서라는 단어와 함께 "검토/확인"이 있으면 CONTRACT_REVIEW\n- 불확실하면 confidence를 낮게 설정하고 UNCLEAR 선택\n- 복합 질문은 is_compound를 true로 설정하고 개별 작업으로 분해\n\n분석할 질문: 전세자금대출 상품 찾고 금리 비교해줘'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 16:04:06,189 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 16:04:06,190 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 16:04:06,190 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 16:04:06,190 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 16:04:06,190 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 16:04:06,190 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 16:04:10,920 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 07:04:10 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'4528'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'4543'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9933'), (b'x-ratelimit-remaining-tokens', b'197243'), (b'x-ratelimit-reset-requests', b'9m35.583s'), (b'x-ratelimit-reset-tokens', b'827ms'), (b'x-request-id', b'req_068883768d41435392a6d670b03e631c'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b101e8bfc3091-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 16:04:10,920 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 16:04:10,920 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 16:04:10,924 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 16:04:10,924 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 16:04:10,924 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 16:04:10,924 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 07:04:10 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '4528', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '4543', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9933', 'x-ratelimit-remaining-tokens': '197243', 'x-ratelimit-reset-requests': '9m35.583s', 'x-ratelimit-reset-tokens': '827ms', 'x-request-id': 'req_068883768d41435392a6d670b03e631c', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b101e8bfc3091-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 16:04:10,924 - openai._base_client - DEBUG - request_id: req_068883768d41435392a6d670b03e631c
2025-10-05 16:04:10,925 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: intent_analysis | Model: gpt-4o-mini-2024-07-18 | Tokens: 3397 (prompt: 3183, completion: 214)
2025-10-05 16:04:10,925 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM Intent Analysis Result: {'intent': 'LOAN_CONSULT', 'confidence': 0.9, 'keywords': ['전세자금대출', '상품', '금리', '비교'], 'sub_intents': [], 'is_compound': False, 'decomposed_tasks': [], 'entities': {'loan_type': '전세자금대출', 'action_verbs': ['찾고', '비교']}, 'reasoning': '1단계(구조): 단순 정보 요청으로 전세자금대출 상품과 금리 비교 요청. 2단계(유형): 정보 확인형 - 대출 상품과 금리에 대한 정보 필요. 3단계(복잡도): 저 - 단일 개념 확인. 4단계(처리): 대출 상품과 금리 정보 검색만 필요. 5단계(검증): 단순 정보 요청이므로 LOAN_CONSULT로 분류.'}
2025-10-05 16:04:10,925 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-6f4231e4-4924-4ecb-a629-db250729b10b', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 Agent 선택 전문가입니다.\n사용자의 요청에 가장 적합한 Agent/Team을 선택하는 것이 목표입니다.\n\n## 현재 상황\n\n**사용자 질문:** 전세자금대출 상품 찾고 금리 비교해줘\n**분석된 의도:** 대출상담\n**추출된 키워드:** [\'전세자금대출\', \'상품\', \'금리\', \'비교\']\n\n## 사용 가능한 Agent/Team 정보\n\n{\'search_team\': {\'name\': \'search_team\', \'capabilities\': \'법률 검색, 부동산 시세 조회, 대출 상품 검색\', \'tools\': [\'legal_search\', \'market_data\', \'loan_data\'], \'use_cases\': [\'법률 상담\', \'시세 조회\', \'대출 정보\']}, \'analysis_team\': {\'name\': \'analysis_team\', \'capabilities\': \'데이터 분석, 리스크 평가, 인사이트 생성, 추천\', \'tools\': [\'data_analyzer\', \'risk_evaluator\'], \'use_cases\': [\'시장 분석\', \'리스크 평가\', \'투자 분석\']}, \'document_team\': {\'name\': \'document_team\', \'capabilities\': \'계약서 작성, 문서 생성, 문서 검토\', \'tools\': [\'document_generator\', \'contract_reviewer\'], \'use_cases\': [\'계약서 작성\', \'문서 검토\']}}\n\n## Agent 역할 및 상세 가이드\n\n### 1. search_team (검색 팀)\n- **주요 기능**: 정보 검색 및 데이터 수집\n- **전문 분야**:\n  * 법률 정보 검색 (전세법, 임대차보호법, 부동산 관련 법규)\n  * 부동산 시세 조회 (매매가, 전세가, 월세, 실거래가)\n  * 대출 상품 정보 검색 (금리, 한도, 조건)\n  * 지역 정보 및 인프라 조회\n- **도구**: legal_search, market_data, loan_data\n- **적합한 작업**: 정보 조회, 데이터 수집, 법률 확인, 시세 파악\n- **예시**:\n  * "전세금 5% 인상 가능한가요?"\n  * "강남구 아파트 전세 시세"\n  * "전세자금대출 한도 얼마?"\n\n### 2. analysis_team (분석 팀)\n- **주요 기능**: 데이터 분석 및 평가\n- **전문 분야**:\n  * 시장 동향 분석 (상승률, 하락률, 추세)\n  * 리스크 평가 (계약, 투자 위험도)\n  * 투자 수익률 계산 (ROI, 월세 수익률)\n  * 대출 한도 및 조건 분석 (LTV, DTI, DSR)\n  * 비교 분석 (지역별, 상품별)\n- **도구**: data_analyzer, risk_evaluator, calculator\n- **적합한 작업**: 데이터 분석, 리스크 평가, 계산, 비교, 예측\n- **의존성**: 보통 search_team의 데이터가 필요\n- **예시**:\n  * "이 지역 투자 가치 분석해줘"\n  * "계약 리스크 평가해줘"\n  * "대출 가능 금액 계산해줘"\n\n### 3. document_team (문서 팀)\n- **주요 기능**: 문서 생성 및 관리\n- **전문 분야**:\n  * 계약서 작성 (임대차, 매매, 전세)\n  * 문서 템플릿 관리\n  * 특약사항 생성\n  * 계약서 수정안 작성\n  * 법률 문서 검토\n- **도구**: document_generator, contract_template, contract_reviewer\n- **적합한 작업**: 문서 작성, 계약서 생성, 문서 수정, 검토\n- **예시**:\n  * "임대차계약서 작성해줘"\n  * "특약사항 추가해줘"\n  * "계약서 수정안 만들어줘"\n\n## Chain-of-Thought Agent 선택 프로세스\n\n다음 단계를 **순서대로** 따라 최적의 Agent 조합을 선택하세요:\n\n### 1단계: 질문 요구사항 파악\n- 단순 정보 조회인가? → search_team만 필요\n- 판단/평가가 필요한가? → search + analysis 필요\n- 해결책 제시가 필요한가? → search + analysis 필요\n- 문서 생성이 필요한가? → document_team 추가\n\n### 2단계: 작업 복잡도 판단\n- **단순** (검색만): "~이 뭐야?", "~알려줘" → search_team\n- **중간** (검색+판단): "~괜찮아?", "~적절해?" → search + analysis\n- **복잡** (종합 해결): 구체적 상황 + "어떻게 해야 해?" → search + analysis\n\n### 3단계: 의존성 분석\n- 독립적 작업: 단일 팀으로 처리 가능\n- 순차적 의존: 이전 결과 필요 → 여러 팀 순서대로\n- 병렬 가능: 동시 조회 가능 → coordination: "parallel"\n\n### 4단계: 최종 검증\n- 선택한 팀들로 질문에 완전히 답변 가능한가?\n- 불필요한 팀이 포함되지 않았는가?\n- 순서가 논리적인가? (데이터 흐름 고려)\n\n### 중요 원칙:\n- **법률 키워드만으로 판단하지 말 것**: "법적으로 어떻게 해야 해?" = 법률 검색 + 분석 필요\n- **상황 설명 + 해결책 요청** = 반드시 analysis_team 포함\n- **구체적 수치 비교** (3억→10억 같은) = analysis_team 필요\n\n## 의도별 Agent 매핑 가이드 (기본 가이드 - CoT로 조정 가능)\n\n| 의도 (Intent) | 기본 조합 | 상황별 조정 |\n|--------------|-----------|-------------|\n| LEGAL_CONSULT | ["search_team"] | 해결책 요청시 → + analysis_team |\n| MARKET_INQUIRY | ["search_team"] | 비교/평가시 → + analysis_team |\n| LOAN_CONSULT | ["search_team", "analysis_team"] | 계산 필수 |\n| CONTRACT_CREATION | ["document_team"] | 검토 후 작성 → search + document |\n| CONTRACT_REVIEW | ["search_team", "analysis_team"] | 법률 검토 + 리스크 분석 |\n| COMPREHENSIVE | ["search_team", "analysis_team"] | **항상 분석 포함** |\n| RISK_ANALYSIS | ["analysis_team"] | 법률 근거 필요시 → search + analysis |\n| UNCLEAR | ["search_team", "analysis_team"] | 포괄적 대응 |\n\n**중요**: 위 매핑은 **기본 가이드**일 뿐입니다.\n실제 질문의 내용(CoT 분석 결과)에 따라 조정하세요!\n\n## 복합 질문 처리 예시 (CoT 적용)\n\n### 예시 1: 순차적 처리\n질문: "강남구 시세 확인하고 투자 가치 분석해줘"\n**CoT 분석**:\n1. 요구사항: 시세 조회 + 투자 가치 평가\n2. 복잡도: 중간 (검색 + 분석)\n3. 의존성: 시세 데이터 → 투자 분석 (순차)\n4. 검증: search만으로는 "투자 가치 평가" 불가능\n\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "1단계: 시세 조회+투자 평가 필요. 2단계: 중간 복잡도. 3단계: 순차 의존. 4단계: search로 시세 수집 후 analysis로 투자 가치 평가 필요",\n    "coordination": "sequential"\n}\n```\n\n### 예시 2: 단순 정보 조회\n질문: "전세금 인상률 한도가 얼마야?"\n**CoT 분석**:\n1. 요구사항: 단순 사실 확인\n2. 복잡도: 낮음 (정보 확인형)\n3. 의존성: 없음\n4. 검증: search_team만으로 충분\n\n```json\n{\n    "selected_agents": ["search_team"],\n    "reasoning": "1단계: 단순 정보 조회. 2단계: 저복잡도. 3단계: 독립적. 4단계: 법률 검색만으로 답변 가능",\n    "coordination": "single"\n}\n```\n\n### 예시 3: 해결책 요청 (핵심 예시!)\n질문: "집주인이 전세금 3억을 10억으로 올려달래. 법적으로 어떻게 해야 해?"\n의도: COMPREHENSIVE\n**CoT 분석**:\n1. 요구사항: 상황 설명 + 해결책 요청\n2. 복잡도: 높음 (구체적 상황 + 수치 비교)\n3. 의존성: 법률 확인 → 상황 분석 → 해결책 제시\n4. 검증: "법적으로"만 보고 search만 선택하면 불충분! 해결책 제시 필요\n\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "1단계: 법률 + 상황 분석 + 해결책 필요. 2단계: 고복잡도(3억→10억 비정상). 3단계: 순차(법률 확인 후 타당성 분석). 4단계: \'어떻게 해야\' = 단순 법률 조회 아님, 분석 필수",\n    "coordination": "sequential",\n    "confidence": 0.95\n}\n```\n\n## 응답 형식 (JSON)\n\n```json\n{\n    "selected_agents": ["선택된 agent/team 목록"],\n    "reasoning": "선택 이유를 구체적으로 설명. 각 Agent의 역할과 처리 순서 포함",\n    "coordination": "single/sequential/parallel/pipeline",\n    "dependencies": {"agent2": ["agent1"]},\n    "estimated_time": 30,\n    "confidence": 0.9\n}\n```\n\n## 선택 가이드라인\n\n1. **최소 Agent 원칙**: 가능한 적은 수의 Agent로 처리\n2. **전문성 우선**: 해당 작업에 가장 전문적인 Agent 선택\n3. **효율성 고려**: 병렬 처리 가능한 경우 명시\n4. **의존성 관리**: 데이터 흐름을 고려한 순서 지정\n5. **폴백 전략**: 불확실한 경우 ["search_team", "analysis_team"] 조합\n\n## 주의사항\n\n- selected_agents는 반드시 배열 형태\n- Agent 이름은 정확히: "search_team", "analysis_team", "document_team"\n- 최소 1개, 최대 3개 선택\n- 순서는 실행 우선순위 (앞에 있을수록 먼저 실행)\n- reasoning은 상세하고 논리적으로 작성\n- coordination 필드로 실행 방식 명시\n- 복합 질문의 경우 의존성 관계 명확히 표시'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 16:04:10,926 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 16:04:10,926 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 16:04:10,926 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 16:04:10,926 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 16:04:10,926 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 16:04:10,926 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 16:04:15,277 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 07:04:15 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'4116'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'4145'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9932'), (b'x-ratelimit-remaining-tokens', b'197885'), (b'x-ratelimit-reset-requests', b'9m39.46s'), (b'x-ratelimit-reset-tokens', b'634ms'), (b'x-request-id', b'req_5af78c92bce2412d8ae207be1adae207'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b103c28203091-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 16:04:15,277 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 16:04:15,277 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 16:04:15,281 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 16:04:15,281 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 16:04:15,281 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 16:04:15,281 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 07:04:15 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '4116', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '4145', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9932', 'x-ratelimit-remaining-tokens': '197885', 'x-ratelimit-reset-requests': '9m39.46s', 'x-ratelimit-reset-tokens': '634ms', 'x-request-id': 'req_5af78c92bce2412d8ae207be1adae207', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b103c28203091-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 16:04:15,281 - openai._base_client - DEBUG - request_id: req_5af78c92bce2412d8ae207be1adae207
2025-10-05 16:04:15,282 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: agent_selection | Model: gpt-4o-mini-2024-07-18 | Tokens: 2517 (prompt: 2366, completion: 151)
2025-10-05 16:04:15,282 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM agent selection reasoning: 1단계: 전세자금대출 상품 검색과 금리 비교가 필요하므로 search_team이 필요합니다. 2단계: 금리 비교는 단순 정보 조회가 아닌 여러 상품을 비교해야 하므로 analysis_team이 필요합니다. 3단계: search_team이 대출 상품 정보를 수집한 후, analysis_team이 이를 바탕으로 금리를 비교하는 순차적 의존 관계가 있습니다.
2025-10-05 16:04:15,282 - app.service_agent.cognitive_agents.planning_agent - INFO - ✅ Primary LLM selected agents: ['search_team', 'analysis_team']
2025-10-05 16:04:15,282 - __main__ - INFO -   의도: 대출상담
2025-10-05 16:04:15,282 - __main__ - INFO -   신뢰도: 0.90
2025-10-05 16:04:15,282 - __main__ - INFO -   추천 Agent: ['search_team', 'analysis_team']
2025-10-05 16:04:15,282 - __main__ - INFO - 
[Step 2] Query Decomposition...
2025-10-05 16:04:15,282 - app.service_agent.cognitive_agents.query_decomposer - INFO - Decomposing query: 전세자금대출 상품 찾고 금리 비교해줘...
2025-10-05 16:04:15,283 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-c7ae0580-f836-439f-aca6-e1a0c91ef6e8', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 질문 분해 전문가입니다.\n복잡한 사용자 질문을 독립적으로 처리 가능한 작업 단위로 분해하는 것이 목표입니다.\n\n## Chain-of-Thought 분해 프로세스:\n\n### 1단계: 복합 질문 여부 판단\n- 단순 정보 조회만 필요한가? → is_compound: false\n- **다음 중 하나라도 해당하면 is_compound: true**:\n  * "그리고", "그 다음", "한 후" 같은 연결어로 여러 요청 연결\n  * 명시적으로 2개 이상의 작업 요청 (예: "시세 확인하고 대출 계산해줘")\n  * 상황 설명 + 해결책 요청 (예: "3억→10억 올려달래. 어떻게 해야 해?")\n  * 해결책을 위해 여러 단계 처리 필요 (검색 → 분석 → 제안)\n\n### 2단계: 필요 작업 식별\n- 정보 수집이 필요한가? → search 작업\n- 평가/판단이 필요한가? → analysis 작업\n- 문서 생성이 필요한가? → generation 작업\n- **해결책 요청**인가? → search + analysis (최소 2개)\n\n### 3단계: 작업 순서 결정\n- 독립적 작업: 병렬 가능\n- 이전 결과 필요: 순차 실행 (depends_on 설정)\n\n## 중요 원칙:\n1. 각 작업은 하나의 명확한 목표를 가져야 합니다\n2. 작업 간 의존성을 명확히 파악해야 합니다\n3. 병렬 처리 가능한 작업은 구분해야 합니다\n4. **주의**: "어떻게 해야", "방법 알려줘" 같은 해결책 요청은 복합 질문!\n\n## 작업 유형 (type):\n- search: 정보 검색 (법률, 시세, 대출 정보 등)\n- analysis: 데이터 분석 (리스크 평가, 시장 분석 등)\n- generation: 문서 생성 (계약서 작성 등)\n- review: 검토/평가 (계약서 검토, 조건 확인 등)\n- calculation: 계산/산출 (대출 한도, 세금 등)\n- comparison: 비교 분석 (여러 옵션 비교)\n\n## 담당 팀 (agent):\n- search_team: 법률, 시세, 대출 정보 검색\n- analysis_team: 데이터 분석, 리스크 평가, 계산\n- document_team: 문서 생성, 계약서 작성\n\n## 학습 예시:\n\n### 예시 1: 복합 질문 (순차적)\n질문: "강남구 아파트 시세 확인하고 대출 가능 금액 계산해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "강남구 아파트 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "대출 가능 금액 계산",\n            "type": "calculation",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "required_data": {"price": "task_0.result.price"},\n            "estimated_time": 15\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "시세 정보가 있어야 대출 금액 계산이 가능하므로 순차 실행"\n}\n```\n\n### 예시 2: 복합 질문 (병렬 가능)\n질문: "이 지역 전세 시세와 매매 시세 모두 알려주고 비교 분석해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "전세 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "매매 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "전세/매매 시세 비교 분석",\n            "type": "comparison",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0", "task_1"],\n            "required_data": {\n                "lease_price": "task_0.result",\n                "sale_price": "task_1.result"\n            },\n            "estimated_time": 25\n        }\n    ],\n    "execution_mode": "mixed",\n    "parallel_groups": [["task_0", "task_1"], ["task_2"]],\n    "reasoning": "시세 조회는 독립적이므로 병렬 처리, 비교는 두 결과 필요"\n}\n```\n\n### 예시 3: 복합 질문 (3단계 이상)\n질문: "이 계약서 검토해서 위험한 부분 찾고 수정안 만들어서 최종 계약서 작성해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "계약서 내용 전체 검토",\n            "type": "review",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 30\n        },\n        {\n            "description": "위험 요소 및 문제점 분석",\n            "type": "analysis",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "estimated_time": 25\n        },\n        {\n            "description": "수정안 제안 생성",\n            "type": "generation",\n            "agent": "document_team",\n            "priority": 3,\n            "depends_on": ["task_1"],\n            "estimated_time": 20\n        },\n        {\n            "description": "최종 계약서 작성",\n            "type": "generation",\n            "agent": "document_team",\n            "priority": 4,\n            "depends_on": ["task_2"],\n            "estimated_time": 30\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "각 단계가 이전 결과에 의존하므로 순차 실행 필요"\n}\n```\n\n### 예시 4: 단순 질문 (분해 불필요)\n질문: "전세금 인상률 상한이 얼마야?"\n분해:\n```json\n{\n    "is_compound": false,\n    "sub_tasks": [\n        {\n            "description": "전세금 인상률 상한 법률 정보 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 15\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "단일 정보 조회 요청으로 분해 불필요"\n}\n```\n\n### 예시 5: 조건부 실행\n질문: "이 물건 시세 확인하고 적정가면 대출 상담도 받고 싶어"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "물건 시세 조회 및 적정성 평가",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 25\n        },\n        {\n            "description": "대출 상담 정보 제공",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "optional": true,\n            "context": {"condition": "if_reasonable_price"},\n            "estimated_time": 20\n        }\n    ],\n    "execution_mode": "conditional",\n    "reasoning": "시세 확인 결과에 따라 대출 상담 진행 여부 결정"\n}\n```\n\n### 예시 6: 상황 설명 + 해결책 요청 (핵심 패턴!)\n질문: "집주인이 전세금 3억을 10억으로 올려달래. 법적으로 어떻게 해야 해?"\n**CoT 분석**:\n1. 질문 분석: 상황 설명 + 해결책 요청\n2. 연결어: 없지만, "어떻게 해야" = 해결책 요청\n3. 의존성: 법률 확인 → 상황 분석 → 대응 방안\n4. 복합 여부: **YES** (해결책을 위해 여러 단계 필요)\n\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "전세금 인상 한도 관련 법률 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "3억→10억 인상의 법적 타당성 및 적정성 분석",\n            "type": "analysis",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "required_data": {"legal_limit": "task_0.result", "current": 300000000, "requested": 1000000000},\n            "estimated_time": 25\n        },\n        {\n            "description": "구체적 대응 방안 및 해결책 제시",\n            "type": "analysis",\n            "agent": "analysis_team",\n            "priority": 3,\n            "depends_on": ["task_1"],\n            "estimated_time": 20\n        }\n    ],\n    "execution_mode": "sequential",\n    "confidence": 0.95,\n    "reasoning": "상황 설명+해결책 요청 패턴. \'어떻게 해야\'는 단순 정보 조회가 아닌 종합 해결책 필요. 법률 조회 → 상황 분석 → 해결책 제시 3단계 순차 처리"\n}\n```\n\n## Chain-of-Thought 프로세스:\n\n1. **질문 분석**: 어떤 정보나 작업을 요구하는가?\n2. **연결어 확인**: "그리고", "또한", "해서", "한 후" 등이 있는가?\n3. **의존성 파악**: 어떤 작업이 다른 작업의 결과를 필요로 하는가?\n4. **병렬성 판단**: 독립적으로 실행 가능한 작업이 있는가?\n5. **최적화**: 불필요한 분해는 없는가?\n\n## 응답 형식 (JSON):\n\n{\n    "is_compound": true/false,\n    "sub_tasks": [\n        {\n            "description": "작업 설명",\n            "type": "작업 유형",\n            "agent": "담당 팀",\n            "priority": 우선순위 (1이 가장 높음),\n            "depends_on": ["선행 작업 ID 리스트"],\n            "required_data": {"필요한 데이터 매핑"},\n            "estimated_time": 예상 소요 시간(초),\n            "optional": true/false,\n            "context": {"추가 컨텍스트"}\n        }\n    ],\n    "execution_mode": "sequential/parallel/mixed/conditional",\n    "parallel_groups": [["병렬 실행 가능한 작업 ID 그룹"]],\n    "confidence": 0.0-1.0,\n    "reasoning": "분해 결정의 이유와 근거"\n}\n\n## 분해 가이드라인:\n\n1. **분해가 필요한 경우**:\n   - 여러 종류의 정보를 요청하는 경우\n   - 순차적 처리가 필요한 경우 (A의 결과로 B 수행)\n   - 서로 다른 팀의 전문성이 필요한 경우\n\n2. **분해가 불필요한 경우**:\n   - 단일 정보 조회\n   - 단순한 질문-답변\n   - 하나의 팀에서 완전히 처리 가능한 경우\n\n3. **병렬 처리 기준**:\n   - 서로 독립적인 정보 조회\n   - 의존성이 없는 분석 작업\n   - 동시에 진행해도 충돌하지 않는 작업\n\n4. **우선순위 설정**:\n   - 의존성이 없는 작업: priority 1\n   - 1차 의존 작업: priority 2\n   - 2차 의존 작업: priority 3\n   - 이런 식으로 증가\n\n현재 의도: 대출상담\n추출된 엔티티: None\n\n분석할 질문: 전세자금대출 상품 찾고 금리 비교해줘'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 16:04:15,283 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 16:04:15,283 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 16:04:15,284 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 16:04:15,284 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 16:04:15,284 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 16:04:15,284 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 16:04:18,449 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 07:04:18 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'2939'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'2959'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9932'), (b'x-ratelimit-remaining-tokens', b'197337'), (b'x-ratelimit-reset-requests', b'9m43.752s'), (b'x-ratelimit-reset-tokens', b'798ms'), (b'x-request-id', b'req_082ba0f398f040c9938fa722be3b4622'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b10577e613091-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 16:04:18,449 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 16:04:18,449 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 16:04:18,457 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 16:04:18,458 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 16:04:18,458 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 16:04:18,458 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 07:04:18 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '2939', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '2959', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9932', 'x-ratelimit-remaining-tokens': '197337', 'x-ratelimit-reset-requests': '9m43.752s', 'x-ratelimit-reset-tokens': '798ms', 'x-request-id': 'req_082ba0f398f040c9938fa722be3b4622', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b10577e613091-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 16:04:18,458 - openai._base_client - DEBUG - request_id: req_082ba0f398f040c9938fa722be3b4622
2025-10-05 16:04:18,459 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: query_decomposition | Model: gpt-4o-mini-2024-07-18 | Tokens: 2883 (prompt: 2693, completion: 190)
2025-10-05 16:04:18,459 - app.service_agent.cognitive_agents.query_decomposer - INFO - Successfully decomposed into 2 tasks
2025-10-05 16:04:18,459 - __main__ - INFO -   복합 질문: True
2025-10-05 16:04:18,459 - __main__ - INFO -   작업 수: 2
2025-10-05 16:04:18,459 - __main__ - INFO -   실행 모드: sequential
2025-10-05 16:04:18,459 - __main__ - INFO -     - task_0: 전세자금대출 상품 정보 조회 (search_team)
2025-10-05 16:04:18,459 - __main__ - INFO -     - task_1: 대출 상품의 금리 비교 분석 (analysis_team)
2025-10-05 16:04:18,459 - __main__ - INFO - 
[Step 3] Comprehensive Plan 생성...
2025-10-05 16:04:18,459 - app.service_agent.cognitive_agents.planning_agent - INFO - Creating comprehensive plan for query: 전세자금대출 상품 찾고 금리 비교해줘...
2025-10-05 16:04:18,459 - app.service_agent.cognitive_agents.planning_agent - INFO - Analyzing intent for query: 전세자금대출 상품 찾고 금리 비교해줘...
2025-10-05 16:04:18,459 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-95a49ebc-287f-4e5a-a7ab-8322a5d8a93a', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 의도 분석 전문가입니다.\n사용자의 질문을 정확히 이해하고, 어떤 종류의 도움이 필요한지 분류해야 합니다.\n\n## Chain-of-Thought 분석 프로세스\n\n질문을 분석할 때 다음 단계를 **순서대로** 따르세요:\n\n### 1단계: 질문 구조 파악\n- 단순 정보 요청인가? (예: "~이 뭐야?", "~알려줘")\n- 상황 설명이 포함되어 있는가? (배경, 현재 상태)\n- 구체적 수치나 데이터가 있는가? (금액, 비율, 기간 등)\n- 문제 해결을 요구하는가? (예: "어떻게 해야 해?", "방법 알려줘")\n\n### 2단계: 요청 유형 판단\n- **정보 확인형**: 사실, 개념, 규정 확인 → 검색만으로 충분\n- **평가/판단형**: "괜찮아?", "적절해?", "문제있어?" → 검색 + 분석 필요\n- **해결책 요청형**: "어떻게?", "방법?", "대처?" → 검색 + 분석 + 제안 필요\n- **비교/선택형**: "A vs B", "어느게 나아?" → 검색 + 분석(비교) 필요\n\n### 3단계: 복잡도 평가\n- **저**: 단일 개념/사실 확인 (예: "전세금 인상률 한도?")\n- **중**: 특정 상황 + 판단 (예: "3억을 5억으로 올려달래. 가능해?")\n- **고**: 복잡한 상황 + 여러 조건 + 해결책 (예: "10년 거주, 3억→10억 요구. 어떻게 해야 해?")\n\n### 4단계: 필요한 처리 결정\n- **검색만**: 정보 확인형 + 저복잡도\n- **검색+분석**: 평가/판단형 OR 중복잡도 OR 수치 비교 포함\n- **종합처리**: 해결책 요청형 OR 고복잡도 OR 여러 조건 동시 고려\n\n### 5단계: 최종 검증\n- 선택한 의도로 사용자 질문에 완전히 답변 가능한가?\n- 단순 정보 제공으로 끝나는가, 아니면 추가 분석/판단이 필요한가?\n- 상황 설명이 있으면서 "해결", "방법", "어떻게" 등이 있으면 → COMPREHENSIVE 고려\n\n## 중요: 복합 질문 처리\n복합적인 질문(여러 의도가 섞인 질문)의 경우, 가장 핵심적인 의도를 파악하되,\nsub_intents 필드에 부가적인 의도들도 함께 기록해주세요.\n\n**특히 주의**:\n- 법률 키워드가 있어도, "해결방법", "어떻게 해야" 같은 표현이 있으면 단순 LEGAL_CONSULT가 아닐 수 있음\n- 구체적 상황(금액, 기간 등) + 해결책 요구 = COMPREHENSIVE 또는 복합 의도로 분류\n\n## 분류 카테고리 설명:\n\n1. **LEGAL_CONSULT (법률상담)**\n   - 설명: 부동산 관련 법률, 권리, 의무에 대한 질문\n   - 예시:\n     * 단순: "전세금 5% 인상이 가능한가요?", "임대차계약 갱신 거부할 수 있나요?"\n     * 복합: "전세금 인상 가능한지 확인하고 법적 근거도 알려주세요"\n   - 키워드: 법, 전세, 임대, 보증금, 계약, 권리, 의무, 갱신, 임차인, 임대인, 법률, 규정, 조항\n   - 필요한 처리: 법률 데이터베이스 검색, 관련 법조항 찾기\n\n2. **MARKET_INQUIRY (시세조회)**\n   - 설명: 부동산 시장 가격, 시세, 거래 동향에 대한 질문\n   - 예시:\n     * 단순: "강남구 아파트 전세 시세 알려주세요", "서초동 매매가 얼마나 올랐나요?"\n     * 복합: "강남구 시세 확인하고 대출 가능 금액도 계산해줘"\n   - 키워드: 시세, 가격, 매매가, 전세가, 월세, 시장, 동향, 평균, 지역명, 상승률, 하락률\n   - 필요한 처리: 부동산 시세 데이터 조회, 지역별 가격 분석\n\n3. **LOAN_CONSULT (대출상담)**\n   - 설명: 주택담보대출, 전세자금대출 등 금융 관련 질문\n   - 예시:\n     * 단순: "전세자금대출 한도가 얼마인가요?", "LTV가 뭔가요?"\n     * 복합: "대출 한도 확인하고 금리 비교도 해주세요"\n   - 키워드: 대출, 금리, 한도, 조건, 상환, LTV, DTI, DSR, 담보, 금융, 은행\n   - 필요한 처리: 대출 상품 조회, 금리 정보 검색, 한도 계산\n\n4. **CONTRACT_CREATION (계약서작성)**\n   - 설명: 새로운 계약서나 문서를 작성해달라는 요청\n   - 예시:\n     * 단순: "임대차계약서 작성해주세요", "전세계약서 초안 만들어주세요"\n     * 복합: "계약서 작성하고 주의사항도 검토해주세요"\n   - 키워드: 작성, 만들, 생성, 초안, 계약서, 문서, 양식\n   - 필요한 처리: 문서 생성 에이전트 호출, 템플릿 기반 작성\n\n5. **CONTRACT_REVIEW (계약서검토)**\n   - 설명: 기존 계약서나 문서를 검토해달라는 요청\n   - 예시:\n     * 단순: "이 계약서 검토해주세요", "특약사항 문제없나요?"\n     * 복합: "계약서 검토하고 수정사항도 제안해주세요"\n   - 키워드: 검토, 확인, 점검, 리뷰, 분석해, 살펴봐, 체크\n   - 필요한 처리: 문서 분석, 위험 요소 식별, 개선사항 제안\n\n6. **COMPREHENSIVE (종합분석)**\n   - 설명: 여러 측면을 종합적으로 분석해달라는 요청, 또는 복잡한 상황에 대한 해결책 요청\n   - 예시:\n     * 단순: "이 물건 전체적으로 분석해주세요"\n     * 복합: "시세, 법률, 대출 모두 검토해서 종합 의견 주세요"\n     * 해결형: "10년 거주했는데 전세금 3억을 10억으로 올려달래. 어떻게 해야 해?"\n     * 상황+해결: "집주인이 계약 갱신 거부했어. 법적으로 어떻게 대응해야 할까?"\n   - 키워드: 종합, 전체, 모든, 전반적, 종합적, 평가, 분석, 어떻게, 방법, 해결, 대처\n   - 패턴: 구체적 상황 설명 + "어떻게/방법/해결" 요청\n   - 필요한 처리: 다중 데이터 소스 통합 분석, 상황 평가, 해결책 제시\n\n7. **RISK_ANALYSIS (리스크분석)**\n   - 설명: 위험 요소나 주의사항에 대한 질문\n   - 예시:\n     * 단순: "이 계약 위험한가요?", "주의할 점 알려주세요"\n     * 복합: "리스크 분석하고 대안도 제시해주세요"\n   - 키워드: 위험, 리스크, 주의, 문제점, 조심, 걱정, 우려\n   - 필요한 처리: 위험 요소 분석, 주의사항 추출\n\n8. **UNCLEAR (불분명)**\n   - 설명: 의도를 명확히 파악하기 어려운 질문\n   - 예시: "이거 좀 봐주세요", "어떻게 해야 할까요?", "도와주세요"\n   - 처리: 추가 질문으로 의도 명확화 필요\n\n9. **IRRELEVANT (무관)**\n   - 설명: 부동산과 전혀 관련 없는 질문\n   - 예시: "날씨 어때?", "저녁 뭐 먹지?", "주식 추천해줘"\n   - 처리: 부동산 관련 질문을 유도\n\n## 복합 질문 예시와 분석 (CoT 적용):\n\n### 예시 1: "강남구 아파트 시세 알려주고 전세자금대출 가능한지도 확인해줘"\n**CoT 분석**:\n1. 구조: 두 개의 요청 ("시세" + "대출")\n2. 유형: 정보 확인형 (둘 다)\n3. 복잡도: 중 (두 가지 독립적 조회)\n4. 필요 처리: 검색 + 계산/분석\n\n**결론**:\n- 주 의도: MARKET_INQUIRY (시세 조회가 먼저 필요)\n- 부가 의도: LOAN_CONSULT (대출 확인)\n- 분해: ["강남구 아파트 시세 조회", "전세자금대출 가능 여부 확인"]\n\n### 예시 2: "이 계약서 검토해서 위험한 부분 있는지 알려주고 수정 제안도 해줘"\n**CoT 분석**:\n1. 구조: 검토 + 위험 평가 + 수정안\n2. 유형: 평가/판단형 + 해결책 요청형\n3. 복잡도: 고 (3단계 처리)\n4. 필요 처리: 검토 + 분석 + 문서 생성\n\n**결론**:\n- 주 의도: CONTRACT_REVIEW (계약서 검토)\n- 부가 의도: RISK_ANALYSIS (위험 분석)\n- 분해: ["계약서 전체 검토", "위험 요소 식별", "수정사항 제안"]\n\n### 예시 3: "집주인이 짜증나, 10년 살았는데 전세금 3억을 10억으로 올려달래. 법적으로 해결방법 알려줘"\n**CoT 분석**:\n1. 구조: 상황 설명 (10년 거주, 3억→10억) + 해결책 요청\n2. 유형: 해결책 요청형 (단순 정보 X)\n3. 복잡도: 고 (구체적 상황 + 수치 비교 + 법률 + 대응방안)\n4. 필요 처리: 법률 검색 + 상황 분석 + 해결책 제시\n\n**결론**:\n- 주 의도: COMPREHENSIVE (복잡한 상황에 대한 종합 해결)\n- 부가 의도: LEGAL_CONSULT, RISK_ANALYSIS\n- 분해: ["전세금 인상 한도 법률 조회", "3억→10억 인상의 타당성 분석", "구체적 대응 방안 제시"]\n- **이유**: "법적으로"라는 키워드가 있지만, 단순 법률 확인이 아니라 구체적 상황에 대한 해결책을 요구하므로 COMPREHENSIVE\n\n### 예시 4: "전세금 인상률 상한이 얼마야?"\n**CoT 분석**:\n1. 구조: 단순 사실 확인\n2. 유형: 정보 확인형\n3. 복잡도: 저 (단일 개념)\n4. 필요 처리: 검색만\n\n**결론**:\n- 주 의도: LEGAL_CONSULT (법률 정보 조회)\n- 부가 의도: 없음\n- 분해: 필요 없음\n\n## 응답 형식 (JSON 형식으로 응답):\n\n```json\n{\n    "intent": "LEGAL_CONSULT",\n    "confidence": 0.9,\n    "keywords": ["전세금", "인상", "제한"],\n    "sub_intents": [],\n    "is_compound": false,\n    "decomposed_tasks": [],\n    "entities": {\n        "location": "강남구",\n        "price": "5억",\n        "contract_type": "전세",\n        "date": "2024년",\n        "area": "84㎡",\n        "action_verbs": ["확인", "검토"]\n    },\n    "reasoning": "전세금 인상에 대한 법률 질문이므로 LEGAL_CONSULT로 분류"\n}\n```\n\n응답 규칙:\n- intent: 위 9개 카테고리 중 하나 (대문자_언더스코어 형식)\n- confidence: 0.0~1.0 (0.8 이상이면 매우 확실, 0.5 미만이면 불확실)\n- keywords: 추출된 주요 키워드 목록\n- sub_intents: 복합 질문일 경우 부가적인 의도들\n- is_compound: 복합 질문 여부 (true/false)\n- decomposed_tasks: 복합 질문을 분해한 개별 작업들\n- entities: 추출된 엔티티 정보\n- reasoning: **반드시 CoT 5단계를 거쳐 분석한 과정을 포함** (구조 파악 → 유형 판단 → 복잡도 평가 → 필요 처리 → 최종 검증)\n\n## reasoning 작성 예시:\n"1단계(구조): 상황 설명(10년 거주, 3억→10억) + 해결책 요청 포함.\n2단계(유형): 해결책 요청형 - 단순 정보가 아닌 대응방안 필요.\n3단계(복잡도): 고 - 구체적 수치 비교와 복잡한 상황.\n4단계(처리): 법률 검색 + 상황 분석 + 해결책 제시 필요.\n5단계(검증): LEGAL_CONSULT만으로는 불충분, 종합적 분석 필요 → COMPREHENSIVE 선택"\n\n## 판단 가이드:\n- 여러 의도가 섞여있다면, 가장 주된 의도를 intent에, 나머지를 sub_intents에 기록\n- "그리고", "또한", "함께", "같이" 등의 연결어가 있으면 복합 질문일 가능성 높음\n- 법률 관련 키워드가 있으면 LEGAL_CONSULT 우선\n- 가격/시세 언급이 명확하면 MARKET_INQUIRY\n- 계약서라는 단어와 함께 "작성/만들기"가 있으면 CONTRACT_CREATION\n- 계약서라는 단어와 함께 "검토/확인"이 있으면 CONTRACT_REVIEW\n- 불확실하면 confidence를 낮게 설정하고 UNCLEAR 선택\n- 복합 질문은 is_compound를 true로 설정하고 개별 작업으로 분해\n\n분석할 질문: 전세자금대출 상품 찾고 금리 비교해줘'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 16:04:18,460 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 16:04:18,460 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 16:04:18,460 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 16:04:18,460 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 16:04:18,460 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 16:04:18,460 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 16:04:23,892 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 07:04:23 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'5224'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'5243'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9931'), (b'x-ratelimit-remaining-tokens', b'197243'), (b'x-ratelimit-reset-requests', b'9m49.543s'), (b'x-ratelimit-reset-tokens', b'827ms'), (b'x-request-id', b'req_e3bd878b3b8841e9a1fbb30fe30ed506'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b106b3b3f3091-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 16:04:23,892 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 16:04:23,892 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 16:04:23,900 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 16:04:23,900 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 16:04:23,900 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 16:04:23,900 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 07:04:23 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '5224', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '5243', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9931', 'x-ratelimit-remaining-tokens': '197243', 'x-ratelimit-reset-requests': '9m49.543s', 'x-ratelimit-reset-tokens': '827ms', 'x-request-id': 'req_e3bd878b3b8841e9a1fbb30fe30ed506', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b106b3b3f3091-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 16:04:23,900 - openai._base_client - DEBUG - request_id: req_e3bd878b3b8841e9a1fbb30fe30ed506
2025-10-05 16:04:23,900 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: intent_analysis | Model: gpt-4o-mini-2024-07-18 | Tokens: 3400 (prompt: 3183, completion: 217)
2025-10-05 16:04:23,900 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM Intent Analysis Result: {'intent': 'LOAN_CONSULT', 'confidence': 0.9, 'keywords': ['전세자금대출', '상품', '금리', '비교'], 'sub_intents': [], 'is_compound': False, 'decomposed_tasks': [], 'entities': {'loan_type': '전세자금대출', 'action_verbs': ['찾다', '비교하다']}, 'reasoning': '1단계(구조): 단순 정보 요청으로 전세자금대출 상품과 금리 비교 요청. 2단계(유형): 정보 확인형 - 대출 상품과 금리에 대한 정보 확인 필요. 3단계(복잡도): 저 - 단일 개념 확인. 4단계(처리): 대출 상품과 금리 정보 검색 필요. 5단계(검증): 단순 정보 제공으로 충분하므로 LOAN_CONSULT로 분류.'}
2025-10-05 16:04:23,901 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-09949e31-1649-494a-a591-cb4b31dcd38b', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 Agent 선택 전문가입니다.\n사용자의 요청에 가장 적합한 Agent/Team을 선택하는 것이 목표입니다.\n\n## 현재 상황\n\n**사용자 질문:** 전세자금대출 상품 찾고 금리 비교해줘\n**분석된 의도:** 대출상담\n**추출된 키워드:** [\'전세자금대출\', \'상품\', \'금리\', \'비교\']\n\n## 사용 가능한 Agent/Team 정보\n\n{\'search_team\': {\'name\': \'search_team\', \'capabilities\': \'법률 검색, 부동산 시세 조회, 대출 상품 검색\', \'tools\': [\'legal_search\', \'market_data\', \'loan_data\'], \'use_cases\': [\'법률 상담\', \'시세 조회\', \'대출 정보\']}, \'analysis_team\': {\'name\': \'analysis_team\', \'capabilities\': \'데이터 분석, 리스크 평가, 인사이트 생성, 추천\', \'tools\': [\'data_analyzer\', \'risk_evaluator\'], \'use_cases\': [\'시장 분석\', \'리스크 평가\', \'투자 분석\']}, \'document_team\': {\'name\': \'document_team\', \'capabilities\': \'계약서 작성, 문서 생성, 문서 검토\', \'tools\': [\'document_generator\', \'contract_reviewer\'], \'use_cases\': [\'계약서 작성\', \'문서 검토\']}}\n\n## Agent 역할 및 상세 가이드\n\n### 1. search_team (검색 팀)\n- **주요 기능**: 정보 검색 및 데이터 수집\n- **전문 분야**:\n  * 법률 정보 검색 (전세법, 임대차보호법, 부동산 관련 법규)\n  * 부동산 시세 조회 (매매가, 전세가, 월세, 실거래가)\n  * 대출 상품 정보 검색 (금리, 한도, 조건)\n  * 지역 정보 및 인프라 조회\n- **도구**: legal_search, market_data, loan_data\n- **적합한 작업**: 정보 조회, 데이터 수집, 법률 확인, 시세 파악\n- **예시**:\n  * "전세금 5% 인상 가능한가요?"\n  * "강남구 아파트 전세 시세"\n  * "전세자금대출 한도 얼마?"\n\n### 2. analysis_team (분석 팀)\n- **주요 기능**: 데이터 분석 및 평가\n- **전문 분야**:\n  * 시장 동향 분석 (상승률, 하락률, 추세)\n  * 리스크 평가 (계약, 투자 위험도)\n  * 투자 수익률 계산 (ROI, 월세 수익률)\n  * 대출 한도 및 조건 분석 (LTV, DTI, DSR)\n  * 비교 분석 (지역별, 상품별)\n- **도구**: data_analyzer, risk_evaluator, calculator\n- **적합한 작업**: 데이터 분석, 리스크 평가, 계산, 비교, 예측\n- **의존성**: 보통 search_team의 데이터가 필요\n- **예시**:\n  * "이 지역 투자 가치 분석해줘"\n  * "계약 리스크 평가해줘"\n  * "대출 가능 금액 계산해줘"\n\n### 3. document_team (문서 팀)\n- **주요 기능**: 문서 생성 및 관리\n- **전문 분야**:\n  * 계약서 작성 (임대차, 매매, 전세)\n  * 문서 템플릿 관리\n  * 특약사항 생성\n  * 계약서 수정안 작성\n  * 법률 문서 검토\n- **도구**: document_generator, contract_template, contract_reviewer\n- **적합한 작업**: 문서 작성, 계약서 생성, 문서 수정, 검토\n- **예시**:\n  * "임대차계약서 작성해줘"\n  * "특약사항 추가해줘"\n  * "계약서 수정안 만들어줘"\n\n## Chain-of-Thought Agent 선택 프로세스\n\n다음 단계를 **순서대로** 따라 최적의 Agent 조합을 선택하세요:\n\n### 1단계: 질문 요구사항 파악\n- 단순 정보 조회인가? → search_team만 필요\n- 판단/평가가 필요한가? → search + analysis 필요\n- 해결책 제시가 필요한가? → search + analysis 필요\n- 문서 생성이 필요한가? → document_team 추가\n\n### 2단계: 작업 복잡도 판단\n- **단순** (검색만): "~이 뭐야?", "~알려줘" → search_team\n- **중간** (검색+판단): "~괜찮아?", "~적절해?" → search + analysis\n- **복잡** (종합 해결): 구체적 상황 + "어떻게 해야 해?" → search + analysis\n\n### 3단계: 의존성 분석\n- 독립적 작업: 단일 팀으로 처리 가능\n- 순차적 의존: 이전 결과 필요 → 여러 팀 순서대로\n- 병렬 가능: 동시 조회 가능 → coordination: "parallel"\n\n### 4단계: 최종 검증\n- 선택한 팀들로 질문에 완전히 답변 가능한가?\n- 불필요한 팀이 포함되지 않았는가?\n- 순서가 논리적인가? (데이터 흐름 고려)\n\n### 중요 원칙:\n- **법률 키워드만으로 판단하지 말 것**: "법적으로 어떻게 해야 해?" = 법률 검색 + 분석 필요\n- **상황 설명 + 해결책 요청** = 반드시 analysis_team 포함\n- **구체적 수치 비교** (3억→10억 같은) = analysis_team 필요\n\n## 의도별 Agent 매핑 가이드 (기본 가이드 - CoT로 조정 가능)\n\n| 의도 (Intent) | 기본 조합 | 상황별 조정 |\n|--------------|-----------|-------------|\n| LEGAL_CONSULT | ["search_team"] | 해결책 요청시 → + analysis_team |\n| MARKET_INQUIRY | ["search_team"] | 비교/평가시 → + analysis_team |\n| LOAN_CONSULT | ["search_team", "analysis_team"] | 계산 필수 |\n| CONTRACT_CREATION | ["document_team"] | 검토 후 작성 → search + document |\n| CONTRACT_REVIEW | ["search_team", "analysis_team"] | 법률 검토 + 리스크 분석 |\n| COMPREHENSIVE | ["search_team", "analysis_team"] | **항상 분석 포함** |\n| RISK_ANALYSIS | ["analysis_team"] | 법률 근거 필요시 → search + analysis |\n| UNCLEAR | ["search_team", "analysis_team"] | 포괄적 대응 |\n\n**중요**: 위 매핑은 **기본 가이드**일 뿐입니다.\n실제 질문의 내용(CoT 분석 결과)에 따라 조정하세요!\n\n## 복합 질문 처리 예시 (CoT 적용)\n\n### 예시 1: 순차적 처리\n질문: "강남구 시세 확인하고 투자 가치 분석해줘"\n**CoT 분석**:\n1. 요구사항: 시세 조회 + 투자 가치 평가\n2. 복잡도: 중간 (검색 + 분석)\n3. 의존성: 시세 데이터 → 투자 분석 (순차)\n4. 검증: search만으로는 "투자 가치 평가" 불가능\n\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "1단계: 시세 조회+투자 평가 필요. 2단계: 중간 복잡도. 3단계: 순차 의존. 4단계: search로 시세 수집 후 analysis로 투자 가치 평가 필요",\n    "coordination": "sequential"\n}\n```\n\n### 예시 2: 단순 정보 조회\n질문: "전세금 인상률 한도가 얼마야?"\n**CoT 분석**:\n1. 요구사항: 단순 사실 확인\n2. 복잡도: 낮음 (정보 확인형)\n3. 의존성: 없음\n4. 검증: search_team만으로 충분\n\n```json\n{\n    "selected_agents": ["search_team"],\n    "reasoning": "1단계: 단순 정보 조회. 2단계: 저복잡도. 3단계: 독립적. 4단계: 법률 검색만으로 답변 가능",\n    "coordination": "single"\n}\n```\n\n### 예시 3: 해결책 요청 (핵심 예시!)\n질문: "집주인이 전세금 3억을 10억으로 올려달래. 법적으로 어떻게 해야 해?"\n의도: COMPREHENSIVE\n**CoT 분석**:\n1. 요구사항: 상황 설명 + 해결책 요청\n2. 복잡도: 높음 (구체적 상황 + 수치 비교)\n3. 의존성: 법률 확인 → 상황 분석 → 해결책 제시\n4. 검증: "법적으로"만 보고 search만 선택하면 불충분! 해결책 제시 필요\n\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "1단계: 법률 + 상황 분석 + 해결책 필요. 2단계: 고복잡도(3억→10억 비정상). 3단계: 순차(법률 확인 후 타당성 분석). 4단계: \'어떻게 해야\' = 단순 법률 조회 아님, 분석 필수",\n    "coordination": "sequential",\n    "confidence": 0.95\n}\n```\n\n## 응답 형식 (JSON)\n\n```json\n{\n    "selected_agents": ["선택된 agent/team 목록"],\n    "reasoning": "선택 이유를 구체적으로 설명. 각 Agent의 역할과 처리 순서 포함",\n    "coordination": "single/sequential/parallel/pipeline",\n    "dependencies": {"agent2": ["agent1"]},\n    "estimated_time": 30,\n    "confidence": 0.9\n}\n```\n\n## 선택 가이드라인\n\n1. **최소 Agent 원칙**: 가능한 적은 수의 Agent로 처리\n2. **전문성 우선**: 해당 작업에 가장 전문적인 Agent 선택\n3. **효율성 고려**: 병렬 처리 가능한 경우 명시\n4. **의존성 관리**: 데이터 흐름을 고려한 순서 지정\n5. **폴백 전략**: 불확실한 경우 ["search_team", "analysis_team"] 조합\n\n## 주의사항\n\n- selected_agents는 반드시 배열 형태\n- Agent 이름은 정확히: "search_team", "analysis_team", "document_team"\n- 최소 1개, 최대 3개 선택\n- 순서는 실행 우선순위 (앞에 있을수록 먼저 실행)\n- reasoning은 상세하고 논리적으로 작성\n- coordination 필드로 실행 방식 명시\n- 복합 질문의 경우 의존성 관계 명확히 표시'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 16:04:23,901 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 16:04:23,901 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 16:04:23,902 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 16:04:23,902 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 16:04:23,902 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 16:04:23,902 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 16:04:28,245 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 07:04:28 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'4143'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'4162'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9931'), (b'x-ratelimit-remaining-tokens', b'197880'), (b'x-ratelimit-reset-requests', b'9m52.753s'), (b'x-ratelimit-reset-tokens', b'635ms'), (b'x-request-id', b'req_0236ff2667dc4395b5c588326a248dfe'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b108d3f4e3091-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 16:04:28,245 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 16:04:28,245 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 16:04:28,252 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 16:04:28,252 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 16:04:28,252 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 16:04:28,252 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 07:04:28 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '4143', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '4162', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9931', 'x-ratelimit-remaining-tokens': '197880', 'x-ratelimit-reset-requests': '9m52.753s', 'x-ratelimit-reset-tokens': '635ms', 'x-request-id': 'req_0236ff2667dc4395b5c588326a248dfe', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b108d3f4e3091-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 16:04:28,252 - openai._base_client - DEBUG - request_id: req_0236ff2667dc4395b5c588326a248dfe
2025-10-05 16:04:28,253 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: agent_selection | Model: gpt-4o-mini-2024-07-18 | Tokens: 2543 (prompt: 2366, completion: 177)
2025-10-05 16:04:28,253 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM agent selection reasoning: 1단계: 전세자금대출 상품 검색과 금리 비교가 필요. 2단계: 대출 상품 검색은 단순 정보 조회이지만, 금리 비교는 분석이 필요하므로 중간 복잡도로 판단. 3단계: 대출 상품 정보를 검색한 후, 그 정보를 바탕으로 금리를 비교해야 하므로 순차적 의존성이 존재. 4단계: search_team이 대출 상품 정보를 수집한 후, analysis_team이 그 정보를 분석하여 금리를 비교할 수 있도록 해야 함.
2025-10-05 16:04:28,253 - app.service_agent.cognitive_agents.planning_agent - INFO - ✅ Primary LLM selected agents: ['search_team', 'analysis_team']
2025-10-05 16:04:28,253 - app.service_agent.cognitive_agents.planning_agent - INFO - Intent analyzed: 대출상담 (confidence: 0.90)
2025-10-05 16:04:28,253 - app.service_agent.cognitive_agents.query_decomposer - INFO - Decomposing query: 전세자금대출 상품 찾고 금리 비교해줘...
2025-10-05 16:04:28,253 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-104fa259-ee31-4177-be12-9ae6ba634ea1', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 질문 분해 전문가입니다.\n복잡한 사용자 질문을 독립적으로 처리 가능한 작업 단위로 분해하는 것이 목표입니다.\n\n## Chain-of-Thought 분해 프로세스:\n\n### 1단계: 복합 질문 여부 판단\n- 단순 정보 조회만 필요한가? → is_compound: false\n- **다음 중 하나라도 해당하면 is_compound: true**:\n  * "그리고", "그 다음", "한 후" 같은 연결어로 여러 요청 연결\n  * 명시적으로 2개 이상의 작업 요청 (예: "시세 확인하고 대출 계산해줘")\n  * 상황 설명 + 해결책 요청 (예: "3억→10억 올려달래. 어떻게 해야 해?")\n  * 해결책을 위해 여러 단계 처리 필요 (검색 → 분석 → 제안)\n\n### 2단계: 필요 작업 식별\n- 정보 수집이 필요한가? → search 작업\n- 평가/판단이 필요한가? → analysis 작업\n- 문서 생성이 필요한가? → generation 작업\n- **해결책 요청**인가? → search + analysis (최소 2개)\n\n### 3단계: 작업 순서 결정\n- 독립적 작업: 병렬 가능\n- 이전 결과 필요: 순차 실행 (depends_on 설정)\n\n## 중요 원칙:\n1. 각 작업은 하나의 명확한 목표를 가져야 합니다\n2. 작업 간 의존성을 명확히 파악해야 합니다\n3. 병렬 처리 가능한 작업은 구분해야 합니다\n4. **주의**: "어떻게 해야", "방법 알려줘" 같은 해결책 요청은 복합 질문!\n\n## 작업 유형 (type):\n- search: 정보 검색 (법률, 시세, 대출 정보 등)\n- analysis: 데이터 분석 (리스크 평가, 시장 분석 등)\n- generation: 문서 생성 (계약서 작성 등)\n- review: 검토/평가 (계약서 검토, 조건 확인 등)\n- calculation: 계산/산출 (대출 한도, 세금 등)\n- comparison: 비교 분석 (여러 옵션 비교)\n\n## 담당 팀 (agent):\n- search_team: 법률, 시세, 대출 정보 검색\n- analysis_team: 데이터 분석, 리스크 평가, 계산\n- document_team: 문서 생성, 계약서 작성\n\n## 학습 예시:\n\n### 예시 1: 복합 질문 (순차적)\n질문: "강남구 아파트 시세 확인하고 대출 가능 금액 계산해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "강남구 아파트 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "대출 가능 금액 계산",\n            "type": "calculation",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "required_data": {"price": "task_0.result.price"},\n            "estimated_time": 15\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "시세 정보가 있어야 대출 금액 계산이 가능하므로 순차 실행"\n}\n```\n\n### 예시 2: 복합 질문 (병렬 가능)\n질문: "이 지역 전세 시세와 매매 시세 모두 알려주고 비교 분석해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "전세 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "매매 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "전세/매매 시세 비교 분석",\n            "type": "comparison",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0", "task_1"],\n            "required_data": {\n                "lease_price": "task_0.result",\n                "sale_price": "task_1.result"\n            },\n            "estimated_time": 25\n        }\n    ],\n    "execution_mode": "mixed",\n    "parallel_groups": [["task_0", "task_1"], ["task_2"]],\n    "reasoning": "시세 조회는 독립적이므로 병렬 처리, 비교는 두 결과 필요"\n}\n```\n\n### 예시 3: 복합 질문 (3단계 이상)\n질문: "이 계약서 검토해서 위험한 부분 찾고 수정안 만들어서 최종 계약서 작성해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "계약서 내용 전체 검토",\n            "type": "review",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 30\n        },\n        {\n            "description": "위험 요소 및 문제점 분석",\n            "type": "analysis",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "estimated_time": 25\n        },\n        {\n            "description": "수정안 제안 생성",\n            "type": "generation",\n            "agent": "document_team",\n            "priority": 3,\n            "depends_on": ["task_1"],\n            "estimated_time": 20\n        },\n        {\n            "description": "최종 계약서 작성",\n            "type": "generation",\n            "agent": "document_team",\n            "priority": 4,\n            "depends_on": ["task_2"],\n            "estimated_time": 30\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "각 단계가 이전 결과에 의존하므로 순차 실행 필요"\n}\n```\n\n### 예시 4: 단순 질문 (분해 불필요)\n질문: "전세금 인상률 상한이 얼마야?"\n분해:\n```json\n{\n    "is_compound": false,\n    "sub_tasks": [\n        {\n            "description": "전세금 인상률 상한 법률 정보 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 15\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "단일 정보 조회 요청으로 분해 불필요"\n}\n```\n\n### 예시 5: 조건부 실행\n질문: "이 물건 시세 확인하고 적정가면 대출 상담도 받고 싶어"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "물건 시세 조회 및 적정성 평가",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 25\n        },\n        {\n            "description": "대출 상담 정보 제공",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "optional": true,\n            "context": {"condition": "if_reasonable_price"},\n            "estimated_time": 20\n        }\n    ],\n    "execution_mode": "conditional",\n    "reasoning": "시세 확인 결과에 따라 대출 상담 진행 여부 결정"\n}\n```\n\n### 예시 6: 상황 설명 + 해결책 요청 (핵심 패턴!)\n질문: "집주인이 전세금 3억을 10억으로 올려달래. 법적으로 어떻게 해야 해?"\n**CoT 분석**:\n1. 질문 분석: 상황 설명 + 해결책 요청\n2. 연결어: 없지만, "어떻게 해야" = 해결책 요청\n3. 의존성: 법률 확인 → 상황 분석 → 대응 방안\n4. 복합 여부: **YES** (해결책을 위해 여러 단계 필요)\n\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "전세금 인상 한도 관련 법률 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "3억→10억 인상의 법적 타당성 및 적정성 분석",\n            "type": "analysis",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "required_data": {"legal_limit": "task_0.result", "current": 300000000, "requested": 1000000000},\n            "estimated_time": 25\n        },\n        {\n            "description": "구체적 대응 방안 및 해결책 제시",\n            "type": "analysis",\n            "agent": "analysis_team",\n            "priority": 3,\n            "depends_on": ["task_1"],\n            "estimated_time": 20\n        }\n    ],\n    "execution_mode": "sequential",\n    "confidence": 0.95,\n    "reasoning": "상황 설명+해결책 요청 패턴. \'어떻게 해야\'는 단순 정보 조회가 아닌 종합 해결책 필요. 법률 조회 → 상황 분석 → 해결책 제시 3단계 순차 처리"\n}\n```\n\n## Chain-of-Thought 프로세스:\n\n1. **질문 분석**: 어떤 정보나 작업을 요구하는가?\n2. **연결어 확인**: "그리고", "또한", "해서", "한 후" 등이 있는가?\n3. **의존성 파악**: 어떤 작업이 다른 작업의 결과를 필요로 하는가?\n4. **병렬성 판단**: 독립적으로 실행 가능한 작업이 있는가?\n5. **최적화**: 불필요한 분해는 없는가?\n\n## 응답 형식 (JSON):\n\n{\n    "is_compound": true/false,\n    "sub_tasks": [\n        {\n            "description": "작업 설명",\n            "type": "작업 유형",\n            "agent": "담당 팀",\n            "priority": 우선순위 (1이 가장 높음),\n            "depends_on": ["선행 작업 ID 리스트"],\n            "required_data": {"필요한 데이터 매핑"},\n            "estimated_time": 예상 소요 시간(초),\n            "optional": true/false,\n            "context": {"추가 컨텍스트"}\n        }\n    ],\n    "execution_mode": "sequential/parallel/mixed/conditional",\n    "parallel_groups": [["병렬 실행 가능한 작업 ID 그룹"]],\n    "confidence": 0.0-1.0,\n    "reasoning": "분해 결정의 이유와 근거"\n}\n\n## 분해 가이드라인:\n\n1. **분해가 필요한 경우**:\n   - 여러 종류의 정보를 요청하는 경우\n   - 순차적 처리가 필요한 경우 (A의 결과로 B 수행)\n   - 서로 다른 팀의 전문성이 필요한 경우\n\n2. **분해가 불필요한 경우**:\n   - 단일 정보 조회\n   - 단순한 질문-답변\n   - 하나의 팀에서 완전히 처리 가능한 경우\n\n3. **병렬 처리 기준**:\n   - 서로 독립적인 정보 조회\n   - 의존성이 없는 분석 작업\n   - 동시에 진행해도 충돌하지 않는 작업\n\n4. **우선순위 설정**:\n   - 의존성이 없는 작업: priority 1\n   - 1차 의존 작업: priority 2\n   - 2차 의존 작업: priority 3\n   - 이런 식으로 증가\n\n현재 의도: 대출상담\n추출된 엔티티: {\'loan_type\': \'전세자금대출\', \'action_verbs\': [\'찾다\', \'비교하다\']}\n\n분석할 질문: 전세자금대출 상품 찾고 금리 비교해줘'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 16:04:28,253 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 16:04:28,254 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 16:04:28,254 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 16:04:28,254 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 16:04:28,254 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 16:04:28,254 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 16:04:31,481 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 07:04:31 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'2946'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'3038'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9930'), (b'x-ratelimit-remaining-tokens', b'197318'), (b'x-ratelimit-reset-requests', b'9m56.715s'), (b'x-ratelimit-reset-tokens', b'804ms'), (b'x-request-id', b'req_b3aa39a4b310470088a544cb5e9b0328'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b10a86a323091-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 16:04:31,482 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 16:04:31,482 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 16:04:31,487 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 16:04:31,487 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 16:04:31,487 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 16:04:31,487 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 07:04:31 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '2946', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '3038', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9930', 'x-ratelimit-remaining-tokens': '197318', 'x-ratelimit-reset-requests': '9m56.715s', 'x-ratelimit-reset-tokens': '804ms', 'x-request-id': 'req_b3aa39a4b310470088a544cb5e9b0328', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b10a86a323091-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 16:04:31,487 - openai._base_client - DEBUG - request_id: req_b3aa39a4b310470088a544cb5e9b0328
2025-10-05 16:04:31,487 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: query_decomposition | Model: gpt-4o-mini-2024-07-18 | Tokens: 2905 (prompt: 2718, completion: 187)
2025-10-05 16:04:31,487 - app.service_agent.cognitive_agents.query_decomposer - INFO - Successfully decomposed into 2 tasks
2025-10-05 16:04:31,487 - app.service_agent.cognitive_agents.planning_agent - INFO - Query decomposed into 2 tasks
2025-10-05 16:04:31,488 - app.service_agent.cognitive_agents.planning_agent - WARNING - Plan validation errors: ["Agent 'search_team' not found in registry", "Agent 'analysis_team' depends on missing 'task_0'", "Agent 'analysis_team' not found in registry"]
2025-10-05 16:04:31,488 - app.service_agent.cognitive_agents.planning_agent - INFO - Optimizing execution plan
2025-10-05 16:04:31,488 - app.service_agent.cognitive_agents.planning_agent - INFO - Comprehensive plan created: Intent: 대출상담 (confidence: 0.90) | Strategy: sequential | Agents: search_team, analysis_team | Estimated time: 45.0s
2025-10-05 16:04:31,488 - __main__ - INFO -   전략: sequential
2025-10-05 16:04:31,488 - __main__ - INFO -   단계 수: 2
2025-10-05 16:04:31,488 - __main__ - INFO - 
✓ 테스트 성공 (소요시간: 25.30초)
2025-10-05 16:04:31,488 - __main__ - INFO - 
================================================================================
2025-10-05 16:04:31,488 - __main__ - INFO - [37] 복합 질문 테스트: D017
2025-10-05 16:04:31,488 - __main__ - INFO - 질문: 계약서 특약사항 검토하고 수정안 제시해줘
2025-10-05 16:04:31,488 - __main__ - INFO - ================================================================================
2025-10-05 16:04:31,488 - __main__ - INFO - 
[Step 1] Intent 분석...
2025-10-05 16:04:31,488 - app.service_agent.cognitive_agents.planning_agent - INFO - Analyzing intent for query: 계약서 특약사항 검토하고 수정안 제시해줘...
2025-10-05 16:04:31,488 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-1e279fed-71eb-4b66-8ea0-ed457d4261f1', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 의도 분석 전문가입니다.\n사용자의 질문을 정확히 이해하고, 어떤 종류의 도움이 필요한지 분류해야 합니다.\n\n## Chain-of-Thought 분석 프로세스\n\n질문을 분석할 때 다음 단계를 **순서대로** 따르세요:\n\n### 1단계: 질문 구조 파악\n- 단순 정보 요청인가? (예: "~이 뭐야?", "~알려줘")\n- 상황 설명이 포함되어 있는가? (배경, 현재 상태)\n- 구체적 수치나 데이터가 있는가? (금액, 비율, 기간 등)\n- 문제 해결을 요구하는가? (예: "어떻게 해야 해?", "방법 알려줘")\n\n### 2단계: 요청 유형 판단\n- **정보 확인형**: 사실, 개념, 규정 확인 → 검색만으로 충분\n- **평가/판단형**: "괜찮아?", "적절해?", "문제있어?" → 검색 + 분석 필요\n- **해결책 요청형**: "어떻게?", "방법?", "대처?" → 검색 + 분석 + 제안 필요\n- **비교/선택형**: "A vs B", "어느게 나아?" → 검색 + 분석(비교) 필요\n\n### 3단계: 복잡도 평가\n- **저**: 단일 개념/사실 확인 (예: "전세금 인상률 한도?")\n- **중**: 특정 상황 + 판단 (예: "3억을 5억으로 올려달래. 가능해?")\n- **고**: 복잡한 상황 + 여러 조건 + 해결책 (예: "10년 거주, 3억→10억 요구. 어떻게 해야 해?")\n\n### 4단계: 필요한 처리 결정\n- **검색만**: 정보 확인형 + 저복잡도\n- **검색+분석**: 평가/판단형 OR 중복잡도 OR 수치 비교 포함\n- **종합처리**: 해결책 요청형 OR 고복잡도 OR 여러 조건 동시 고려\n\n### 5단계: 최종 검증\n- 선택한 의도로 사용자 질문에 완전히 답변 가능한가?\n- 단순 정보 제공으로 끝나는가, 아니면 추가 분석/판단이 필요한가?\n- 상황 설명이 있으면서 "해결", "방법", "어떻게" 등이 있으면 → COMPREHENSIVE 고려\n\n## 중요: 복합 질문 처리\n복합적인 질문(여러 의도가 섞인 질문)의 경우, 가장 핵심적인 의도를 파악하되,\nsub_intents 필드에 부가적인 의도들도 함께 기록해주세요.\n\n**특히 주의**:\n- 법률 키워드가 있어도, "해결방법", "어떻게 해야" 같은 표현이 있으면 단순 LEGAL_CONSULT가 아닐 수 있음\n- 구체적 상황(금액, 기간 등) + 해결책 요구 = COMPREHENSIVE 또는 복합 의도로 분류\n\n## 분류 카테고리 설명:\n\n1. **LEGAL_CONSULT (법률상담)**\n   - 설명: 부동산 관련 법률, 권리, 의무에 대한 질문\n   - 예시:\n     * 단순: "전세금 5% 인상이 가능한가요?", "임대차계약 갱신 거부할 수 있나요?"\n     * 복합: "전세금 인상 가능한지 확인하고 법적 근거도 알려주세요"\n   - 키워드: 법, 전세, 임대, 보증금, 계약, 권리, 의무, 갱신, 임차인, 임대인, 법률, 규정, 조항\n   - 필요한 처리: 법률 데이터베이스 검색, 관련 법조항 찾기\n\n2. **MARKET_INQUIRY (시세조회)**\n   - 설명: 부동산 시장 가격, 시세, 거래 동향에 대한 질문\n   - 예시:\n     * 단순: "강남구 아파트 전세 시세 알려주세요", "서초동 매매가 얼마나 올랐나요?"\n     * 복합: "강남구 시세 확인하고 대출 가능 금액도 계산해줘"\n   - 키워드: 시세, 가격, 매매가, 전세가, 월세, 시장, 동향, 평균, 지역명, 상승률, 하락률\n   - 필요한 처리: 부동산 시세 데이터 조회, 지역별 가격 분석\n\n3. **LOAN_CONSULT (대출상담)**\n   - 설명: 주택담보대출, 전세자금대출 등 금융 관련 질문\n   - 예시:\n     * 단순: "전세자금대출 한도가 얼마인가요?", "LTV가 뭔가요?"\n     * 복합: "대출 한도 확인하고 금리 비교도 해주세요"\n   - 키워드: 대출, 금리, 한도, 조건, 상환, LTV, DTI, DSR, 담보, 금융, 은행\n   - 필요한 처리: 대출 상품 조회, 금리 정보 검색, 한도 계산\n\n4. **CONTRACT_CREATION (계약서작성)**\n   - 설명: 새로운 계약서나 문서를 작성해달라는 요청\n   - 예시:\n     * 단순: "임대차계약서 작성해주세요", "전세계약서 초안 만들어주세요"\n     * 복합: "계약서 작성하고 주의사항도 검토해주세요"\n   - 키워드: 작성, 만들, 생성, 초안, 계약서, 문서, 양식\n   - 필요한 처리: 문서 생성 에이전트 호출, 템플릿 기반 작성\n\n5. **CONTRACT_REVIEW (계약서검토)**\n   - 설명: 기존 계약서나 문서를 검토해달라는 요청\n   - 예시:\n     * 단순: "이 계약서 검토해주세요", "특약사항 문제없나요?"\n     * 복합: "계약서 검토하고 수정사항도 제안해주세요"\n   - 키워드: 검토, 확인, 점검, 리뷰, 분석해, 살펴봐, 체크\n   - 필요한 처리: 문서 분석, 위험 요소 식별, 개선사항 제안\n\n6. **COMPREHENSIVE (종합분석)**\n   - 설명: 여러 측면을 종합적으로 분석해달라는 요청, 또는 복잡한 상황에 대한 해결책 요청\n   - 예시:\n     * 단순: "이 물건 전체적으로 분석해주세요"\n     * 복합: "시세, 법률, 대출 모두 검토해서 종합 의견 주세요"\n     * 해결형: "10년 거주했는데 전세금 3억을 10억으로 올려달래. 어떻게 해야 해?"\n     * 상황+해결: "집주인이 계약 갱신 거부했어. 법적으로 어떻게 대응해야 할까?"\n   - 키워드: 종합, 전체, 모든, 전반적, 종합적, 평가, 분석, 어떻게, 방법, 해결, 대처\n   - 패턴: 구체적 상황 설명 + "어떻게/방법/해결" 요청\n   - 필요한 처리: 다중 데이터 소스 통합 분석, 상황 평가, 해결책 제시\n\n7. **RISK_ANALYSIS (리스크분석)**\n   - 설명: 위험 요소나 주의사항에 대한 질문\n   - 예시:\n     * 단순: "이 계약 위험한가요?", "주의할 점 알려주세요"\n     * 복합: "리스크 분석하고 대안도 제시해주세요"\n   - 키워드: 위험, 리스크, 주의, 문제점, 조심, 걱정, 우려\n   - 필요한 처리: 위험 요소 분석, 주의사항 추출\n\n8. **UNCLEAR (불분명)**\n   - 설명: 의도를 명확히 파악하기 어려운 질문\n   - 예시: "이거 좀 봐주세요", "어떻게 해야 할까요?", "도와주세요"\n   - 처리: 추가 질문으로 의도 명확화 필요\n\n9. **IRRELEVANT (무관)**\n   - 설명: 부동산과 전혀 관련 없는 질문\n   - 예시: "날씨 어때?", "저녁 뭐 먹지?", "주식 추천해줘"\n   - 처리: 부동산 관련 질문을 유도\n\n## 복합 질문 예시와 분석 (CoT 적용):\n\n### 예시 1: "강남구 아파트 시세 알려주고 전세자금대출 가능한지도 확인해줘"\n**CoT 분석**:\n1. 구조: 두 개의 요청 ("시세" + "대출")\n2. 유형: 정보 확인형 (둘 다)\n3. 복잡도: 중 (두 가지 독립적 조회)\n4. 필요 처리: 검색 + 계산/분석\n\n**결론**:\n- 주 의도: MARKET_INQUIRY (시세 조회가 먼저 필요)\n- 부가 의도: LOAN_CONSULT (대출 확인)\n- 분해: ["강남구 아파트 시세 조회", "전세자금대출 가능 여부 확인"]\n\n### 예시 2: "이 계약서 검토해서 위험한 부분 있는지 알려주고 수정 제안도 해줘"\n**CoT 분석**:\n1. 구조: 검토 + 위험 평가 + 수정안\n2. 유형: 평가/판단형 + 해결책 요청형\n3. 복잡도: 고 (3단계 처리)\n4. 필요 처리: 검토 + 분석 + 문서 생성\n\n**결론**:\n- 주 의도: CONTRACT_REVIEW (계약서 검토)\n- 부가 의도: RISK_ANALYSIS (위험 분석)\n- 분해: ["계약서 전체 검토", "위험 요소 식별", "수정사항 제안"]\n\n### 예시 3: "집주인이 짜증나, 10년 살았는데 전세금 3억을 10억으로 올려달래. 법적으로 해결방법 알려줘"\n**CoT 분석**:\n1. 구조: 상황 설명 (10년 거주, 3억→10억) + 해결책 요청\n2. 유형: 해결책 요청형 (단순 정보 X)\n3. 복잡도: 고 (구체적 상황 + 수치 비교 + 법률 + 대응방안)\n4. 필요 처리: 법률 검색 + 상황 분석 + 해결책 제시\n\n**결론**:\n- 주 의도: COMPREHENSIVE (복잡한 상황에 대한 종합 해결)\n- 부가 의도: LEGAL_CONSULT, RISK_ANALYSIS\n- 분해: ["전세금 인상 한도 법률 조회", "3억→10억 인상의 타당성 분석", "구체적 대응 방안 제시"]\n- **이유**: "법적으로"라는 키워드가 있지만, 단순 법률 확인이 아니라 구체적 상황에 대한 해결책을 요구하므로 COMPREHENSIVE\n\n### 예시 4: "전세금 인상률 상한이 얼마야?"\n**CoT 분석**:\n1. 구조: 단순 사실 확인\n2. 유형: 정보 확인형\n3. 복잡도: 저 (단일 개념)\n4. 필요 처리: 검색만\n\n**결론**:\n- 주 의도: LEGAL_CONSULT (법률 정보 조회)\n- 부가 의도: 없음\n- 분해: 필요 없음\n\n## 응답 형식 (JSON 형식으로 응답):\n\n```json\n{\n    "intent": "LEGAL_CONSULT",\n    "confidence": 0.9,\n    "keywords": ["전세금", "인상", "제한"],\n    "sub_intents": [],\n    "is_compound": false,\n    "decomposed_tasks": [],\n    "entities": {\n        "location": "강남구",\n        "price": "5억",\n        "contract_type": "전세",\n        "date": "2024년",\n        "area": "84㎡",\n        "action_verbs": ["확인", "검토"]\n    },\n    "reasoning": "전세금 인상에 대한 법률 질문이므로 LEGAL_CONSULT로 분류"\n}\n```\n\n응답 규칙:\n- intent: 위 9개 카테고리 중 하나 (대문자_언더스코어 형식)\n- confidence: 0.0~1.0 (0.8 이상이면 매우 확실, 0.5 미만이면 불확실)\n- keywords: 추출된 주요 키워드 목록\n- sub_intents: 복합 질문일 경우 부가적인 의도들\n- is_compound: 복합 질문 여부 (true/false)\n- decomposed_tasks: 복합 질문을 분해한 개별 작업들\n- entities: 추출된 엔티티 정보\n- reasoning: **반드시 CoT 5단계를 거쳐 분석한 과정을 포함** (구조 파악 → 유형 판단 → 복잡도 평가 → 필요 처리 → 최종 검증)\n\n## reasoning 작성 예시:\n"1단계(구조): 상황 설명(10년 거주, 3억→10억) + 해결책 요청 포함.\n2단계(유형): 해결책 요청형 - 단순 정보가 아닌 대응방안 필요.\n3단계(복잡도): 고 - 구체적 수치 비교와 복잡한 상황.\n4단계(처리): 법률 검색 + 상황 분석 + 해결책 제시 필요.\n5단계(검증): LEGAL_CONSULT만으로는 불충분, 종합적 분석 필요 → COMPREHENSIVE 선택"\n\n## 판단 가이드:\n- 여러 의도가 섞여있다면, 가장 주된 의도를 intent에, 나머지를 sub_intents에 기록\n- "그리고", "또한", "함께", "같이" 등의 연결어가 있으면 복합 질문일 가능성 높음\n- 법률 관련 키워드가 있으면 LEGAL_CONSULT 우선\n- 가격/시세 언급이 명확하면 MARKET_INQUIRY\n- 계약서라는 단어와 함께 "작성/만들기"가 있으면 CONTRACT_CREATION\n- 계약서라는 단어와 함께 "검토/확인"이 있으면 CONTRACT_REVIEW\n- 불확실하면 confidence를 낮게 설정하고 UNCLEAR 선택\n- 복합 질문은 is_compound를 true로 설정하고 개별 작업으로 분해\n\n분석할 질문: 계약서 특약사항 검토하고 수정안 제시해줘'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 16:04:31,489 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 16:04:31,489 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 16:04:31,489 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 16:04:31,489 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 16:04:31,489 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 16:04:31,489 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 16:04:39,155 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 07:04:39 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'7448'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'7474'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9930'), (b'x-ratelimit-remaining-tokens', b'197241'), (b'x-ratelimit-reset-requests', b'10m2.117s'), (b'x-ratelimit-reset-tokens', b'827ms'), (b'x-request-id', b'req_89e89eefd6df4baab9a1263542b12d1c'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b10bcae143091-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 16:04:39,155 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 16:04:39,155 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 16:04:39,158 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 16:04:39,158 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 16:04:39,158 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 16:04:39,158 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 07:04:39 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '7448', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '7474', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9930', 'x-ratelimit-remaining-tokens': '197241', 'x-ratelimit-reset-requests': '10m2.117s', 'x-ratelimit-reset-tokens': '827ms', 'x-request-id': 'req_89e89eefd6df4baab9a1263542b12d1c', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b10bcae143091-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 16:04:39,158 - openai._base_client - DEBUG - request_id: req_89e89eefd6df4baab9a1263542b12d1c
2025-10-05 16:04:39,158 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: intent_analysis | Model: gpt-4o-mini-2024-07-18 | Tokens: 3392 (prompt: 3183, completion: 209)
2025-10-05 16:04:39,158 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM Intent Analysis Result: {'intent': 'CONTRACT_REVIEW', 'confidence': 0.85, 'keywords': ['계약서', '특약사항', '검토', '수정안'], 'sub_intents': [], 'is_compound': False, 'decomposed_tasks': [], 'entities': {'contract_type': '계약서', 'action_verbs': ['검토', '제시']}, 'reasoning': '1단계(구조): 계약서의 특약사항 검토 및 수정안 제시 요청. 2단계(유형): 검토 및 수정 요청으로 평가/판단형. 3단계(복잡도): 중 - 계약서 검토와 수정 제안이 포함됨. 4단계(처리): 계약서 분석 및 수정사항 제안 필요. 5단계(검증): 계약서 검토 요청이므로 CONTRACT_REVIEW로 분류.'}
2025-10-05 16:04:39,159 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-c1f6d52e-5bd9-4cd2-830d-cc9650ebbbb8', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 Agent 선택 전문가입니다.\n사용자의 요청에 가장 적합한 Agent/Team을 선택하는 것이 목표입니다.\n\n## 현재 상황\n\n**사용자 질문:** 계약서 특약사항 검토하고 수정안 제시해줘\n**분석된 의도:** 계약서검토\n**추출된 키워드:** [\'계약서\', \'특약사항\', \'검토\', \'수정안\']\n\n## 사용 가능한 Agent/Team 정보\n\n{\'search_team\': {\'name\': \'search_team\', \'capabilities\': \'법률 검색, 부동산 시세 조회, 대출 상품 검색\', \'tools\': [\'legal_search\', \'market_data\', \'loan_data\'], \'use_cases\': [\'법률 상담\', \'시세 조회\', \'대출 정보\']}, \'analysis_team\': {\'name\': \'analysis_team\', \'capabilities\': \'데이터 분석, 리스크 평가, 인사이트 생성, 추천\', \'tools\': [\'data_analyzer\', \'risk_evaluator\'], \'use_cases\': [\'시장 분석\', \'리스크 평가\', \'투자 분석\']}, \'document_team\': {\'name\': \'document_team\', \'capabilities\': \'계약서 작성, 문서 생성, 문서 검토\', \'tools\': [\'document_generator\', \'contract_reviewer\'], \'use_cases\': [\'계약서 작성\', \'문서 검토\']}}\n\n## Agent 역할 및 상세 가이드\n\n### 1. search_team (검색 팀)\n- **주요 기능**: 정보 검색 및 데이터 수집\n- **전문 분야**:\n  * 법률 정보 검색 (전세법, 임대차보호법, 부동산 관련 법규)\n  * 부동산 시세 조회 (매매가, 전세가, 월세, 실거래가)\n  * 대출 상품 정보 검색 (금리, 한도, 조건)\n  * 지역 정보 및 인프라 조회\n- **도구**: legal_search, market_data, loan_data\n- **적합한 작업**: 정보 조회, 데이터 수집, 법률 확인, 시세 파악\n- **예시**:\n  * "전세금 5% 인상 가능한가요?"\n  * "강남구 아파트 전세 시세"\n  * "전세자금대출 한도 얼마?"\n\n### 2. analysis_team (분석 팀)\n- **주요 기능**: 데이터 분석 및 평가\n- **전문 분야**:\n  * 시장 동향 분석 (상승률, 하락률, 추세)\n  * 리스크 평가 (계약, 투자 위험도)\n  * 투자 수익률 계산 (ROI, 월세 수익률)\n  * 대출 한도 및 조건 분석 (LTV, DTI, DSR)\n  * 비교 분석 (지역별, 상품별)\n- **도구**: data_analyzer, risk_evaluator, calculator\n- **적합한 작업**: 데이터 분석, 리스크 평가, 계산, 비교, 예측\n- **의존성**: 보통 search_team의 데이터가 필요\n- **예시**:\n  * "이 지역 투자 가치 분석해줘"\n  * "계약 리스크 평가해줘"\n  * "대출 가능 금액 계산해줘"\n\n### 3. document_team (문서 팀)\n- **주요 기능**: 문서 생성 및 관리\n- **전문 분야**:\n  * 계약서 작성 (임대차, 매매, 전세)\n  * 문서 템플릿 관리\n  * 특약사항 생성\n  * 계약서 수정안 작성\n  * 법률 문서 검토\n- **도구**: document_generator, contract_template, contract_reviewer\n- **적합한 작업**: 문서 작성, 계약서 생성, 문서 수정, 검토\n- **예시**:\n  * "임대차계약서 작성해줘"\n  * "특약사항 추가해줘"\n  * "계약서 수정안 만들어줘"\n\n## Chain-of-Thought Agent 선택 프로세스\n\n다음 단계를 **순서대로** 따라 최적의 Agent 조합을 선택하세요:\n\n### 1단계: 질문 요구사항 파악\n- 단순 정보 조회인가? → search_team만 필요\n- 판단/평가가 필요한가? → search + analysis 필요\n- 해결책 제시가 필요한가? → search + analysis 필요\n- 문서 생성이 필요한가? → document_team 추가\n\n### 2단계: 작업 복잡도 판단\n- **단순** (검색만): "~이 뭐야?", "~알려줘" → search_team\n- **중간** (검색+판단): "~괜찮아?", "~적절해?" → search + analysis\n- **복잡** (종합 해결): 구체적 상황 + "어떻게 해야 해?" → search + analysis\n\n### 3단계: 의존성 분석\n- 독립적 작업: 단일 팀으로 처리 가능\n- 순차적 의존: 이전 결과 필요 → 여러 팀 순서대로\n- 병렬 가능: 동시 조회 가능 → coordination: "parallel"\n\n### 4단계: 최종 검증\n- 선택한 팀들로 질문에 완전히 답변 가능한가?\n- 불필요한 팀이 포함되지 않았는가?\n- 순서가 논리적인가? (데이터 흐름 고려)\n\n### 중요 원칙:\n- **법률 키워드만으로 판단하지 말 것**: "법적으로 어떻게 해야 해?" = 법률 검색 + 분석 필요\n- **상황 설명 + 해결책 요청** = 반드시 analysis_team 포함\n- **구체적 수치 비교** (3억→10억 같은) = analysis_team 필요\n\n## 의도별 Agent 매핑 가이드 (기본 가이드 - CoT로 조정 가능)\n\n| 의도 (Intent) | 기본 조합 | 상황별 조정 |\n|--------------|-----------|-------------|\n| LEGAL_CONSULT | ["search_team"] | 해결책 요청시 → + analysis_team |\n| MARKET_INQUIRY | ["search_team"] | 비교/평가시 → + analysis_team |\n| LOAN_CONSULT | ["search_team", "analysis_team"] | 계산 필수 |\n| CONTRACT_CREATION | ["document_team"] | 검토 후 작성 → search + document |\n| CONTRACT_REVIEW | ["search_team", "analysis_team"] | 법률 검토 + 리스크 분석 |\n| COMPREHENSIVE | ["search_team", "analysis_team"] | **항상 분석 포함** |\n| RISK_ANALYSIS | ["analysis_team"] | 법률 근거 필요시 → search + analysis |\n| UNCLEAR | ["search_team", "analysis_team"] | 포괄적 대응 |\n\n**중요**: 위 매핑은 **기본 가이드**일 뿐입니다.\n실제 질문의 내용(CoT 분석 결과)에 따라 조정하세요!\n\n## 복합 질문 처리 예시 (CoT 적용)\n\n### 예시 1: 순차적 처리\n질문: "강남구 시세 확인하고 투자 가치 분석해줘"\n**CoT 분석**:\n1. 요구사항: 시세 조회 + 투자 가치 평가\n2. 복잡도: 중간 (검색 + 분석)\n3. 의존성: 시세 데이터 → 투자 분석 (순차)\n4. 검증: search만으로는 "투자 가치 평가" 불가능\n\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "1단계: 시세 조회+투자 평가 필요. 2단계: 중간 복잡도. 3단계: 순차 의존. 4단계: search로 시세 수집 후 analysis로 투자 가치 평가 필요",\n    "coordination": "sequential"\n}\n```\n\n### 예시 2: 단순 정보 조회\n질문: "전세금 인상률 한도가 얼마야?"\n**CoT 분석**:\n1. 요구사항: 단순 사실 확인\n2. 복잡도: 낮음 (정보 확인형)\n3. 의존성: 없음\n4. 검증: search_team만으로 충분\n\n```json\n{\n    "selected_agents": ["search_team"],\n    "reasoning": "1단계: 단순 정보 조회. 2단계: 저복잡도. 3단계: 독립적. 4단계: 법률 검색만으로 답변 가능",\n    "coordination": "single"\n}\n```\n\n### 예시 3: 해결책 요청 (핵심 예시!)\n질문: "집주인이 전세금 3억을 10억으로 올려달래. 법적으로 어떻게 해야 해?"\n의도: COMPREHENSIVE\n**CoT 분석**:\n1. 요구사항: 상황 설명 + 해결책 요청\n2. 복잡도: 높음 (구체적 상황 + 수치 비교)\n3. 의존성: 법률 확인 → 상황 분석 → 해결책 제시\n4. 검증: "법적으로"만 보고 search만 선택하면 불충분! 해결책 제시 필요\n\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "1단계: 법률 + 상황 분석 + 해결책 필요. 2단계: 고복잡도(3억→10억 비정상). 3단계: 순차(법률 확인 후 타당성 분석). 4단계: \'어떻게 해야\' = 단순 법률 조회 아님, 분석 필수",\n    "coordination": "sequential",\n    "confidence": 0.95\n}\n```\n\n## 응답 형식 (JSON)\n\n```json\n{\n    "selected_agents": ["선택된 agent/team 목록"],\n    "reasoning": "선택 이유를 구체적으로 설명. 각 Agent의 역할과 처리 순서 포함",\n    "coordination": "single/sequential/parallel/pipeline",\n    "dependencies": {"agent2": ["agent1"]},\n    "estimated_time": 30,\n    "confidence": 0.9\n}\n```\n\n## 선택 가이드라인\n\n1. **최소 Agent 원칙**: 가능한 적은 수의 Agent로 처리\n2. **전문성 우선**: 해당 작업에 가장 전문적인 Agent 선택\n3. **효율성 고려**: 병렬 처리 가능한 경우 명시\n4. **의존성 관리**: 데이터 흐름을 고려한 순서 지정\n5. **폴백 전략**: 불확실한 경우 ["search_team", "analysis_team"] 조합\n\n## 주의사항\n\n- selected_agents는 반드시 배열 형태\n- Agent 이름은 정확히: "search_team", "analysis_team", "document_team"\n- 최소 1개, 최대 3개 선택\n- 순서는 실행 우선순위 (앞에 있을수록 먼저 실행)\n- reasoning은 상세하고 논리적으로 작성\n- coordination 필드로 실행 방식 명시\n- 복합 질문의 경우 의존성 관계 명확히 표시'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 16:04:39,159 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 16:04:39,159 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 16:04:39,160 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 16:04:39,160 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 16:04:39,160 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 16:04:39,160 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 16:04:41,453 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 07:04:41 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'2020'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'2093'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9930'), (b'x-ratelimit-remaining-tokens', b'197883'), (b'x-ratelimit-reset-requests', b'10m3.042s'), (b'x-ratelimit-reset-tokens', b'635ms'), (b'x-request-id', b'req_4885603903db45bbb9a7fa2d07b3a076'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b10ec9ea93091-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 16:04:41,454 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 16:04:41,454 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 16:04:41,480 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 16:04:41,481 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 16:04:41,481 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 16:04:41,481 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 07:04:41 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '2020', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '2093', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9930', 'x-ratelimit-remaining-tokens': '197883', 'x-ratelimit-reset-requests': '10m3.042s', 'x-ratelimit-reset-tokens': '635ms', 'x-request-id': 'req_4885603903db45bbb9a7fa2d07b3a076', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b10ec9ea93091-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 16:04:41,481 - openai._base_client - DEBUG - request_id: req_4885603903db45bbb9a7fa2d07b3a076
2025-10-05 16:04:41,481 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: agent_selection | Model: gpt-4o-mini-2024-07-18 | Tokens: 2552 (prompt: 2366, completion: 186)
2025-10-05 16:04:41,481 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM agent selection reasoning: 1단계: 계약서 특약사항 검토 및 수정안 제시가 필요하므로, 법률 정보 검색이 필요하고, 문서 검토 및 수정이 필요하다. 2단계: 중간 복잡도 (법률 검토 + 문서 수정). 3단계: search_team이 법률 정보를 수집한 후, document_team이 계약서의 특약사항을 검토하고 수정안을 제시해야 하므로 순차적 의존성이 있다. 4단계: 법률 정보 검색 후 문서 팀이 계약서 수정안을 작성할 수 있다.
2025-10-05 16:04:41,481 - app.service_agent.cognitive_agents.planning_agent - INFO - ✅ Primary LLM selected agents: ['search_team', 'document_team']
2025-10-05 16:04:41,481 - __main__ - INFO -   의도: 계약서검토
2025-10-05 16:04:41,482 - __main__ - INFO -   신뢰도: 0.85
2025-10-05 16:04:41,482 - __main__ - INFO -   추천 Agent: ['search_team', 'document_team']
2025-10-05 16:04:41,482 - __main__ - INFO - 
[Step 2] Query Decomposition...
2025-10-05 16:04:41,482 - app.service_agent.cognitive_agents.query_decomposer - INFO - Decomposing query: 계약서 특약사항 검토하고 수정안 제시해줘...
2025-10-05 16:04:41,482 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-643b36f8-5127-4fdb-8b0c-aff136479a88', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 질문 분해 전문가입니다.\n복잡한 사용자 질문을 독립적으로 처리 가능한 작업 단위로 분해하는 것이 목표입니다.\n\n## Chain-of-Thought 분해 프로세스:\n\n### 1단계: 복합 질문 여부 판단\n- 단순 정보 조회만 필요한가? → is_compound: false\n- **다음 중 하나라도 해당하면 is_compound: true**:\n  * "그리고", "그 다음", "한 후" 같은 연결어로 여러 요청 연결\n  * 명시적으로 2개 이상의 작업 요청 (예: "시세 확인하고 대출 계산해줘")\n  * 상황 설명 + 해결책 요청 (예: "3억→10억 올려달래. 어떻게 해야 해?")\n  * 해결책을 위해 여러 단계 처리 필요 (검색 → 분석 → 제안)\n\n### 2단계: 필요 작업 식별\n- 정보 수집이 필요한가? → search 작업\n- 평가/판단이 필요한가? → analysis 작업\n- 문서 생성이 필요한가? → generation 작업\n- **해결책 요청**인가? → search + analysis (최소 2개)\n\n### 3단계: 작업 순서 결정\n- 독립적 작업: 병렬 가능\n- 이전 결과 필요: 순차 실행 (depends_on 설정)\n\n## 중요 원칙:\n1. 각 작업은 하나의 명확한 목표를 가져야 합니다\n2. 작업 간 의존성을 명확히 파악해야 합니다\n3. 병렬 처리 가능한 작업은 구분해야 합니다\n4. **주의**: "어떻게 해야", "방법 알려줘" 같은 해결책 요청은 복합 질문!\n\n## 작업 유형 (type):\n- search: 정보 검색 (법률, 시세, 대출 정보 등)\n- analysis: 데이터 분석 (리스크 평가, 시장 분석 등)\n- generation: 문서 생성 (계약서 작성 등)\n- review: 검토/평가 (계약서 검토, 조건 확인 등)\n- calculation: 계산/산출 (대출 한도, 세금 등)\n- comparison: 비교 분석 (여러 옵션 비교)\n\n## 담당 팀 (agent):\n- search_team: 법률, 시세, 대출 정보 검색\n- analysis_team: 데이터 분석, 리스크 평가, 계산\n- document_team: 문서 생성, 계약서 작성\n\n## 학습 예시:\n\n### 예시 1: 복합 질문 (순차적)\n질문: "강남구 아파트 시세 확인하고 대출 가능 금액 계산해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "강남구 아파트 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "대출 가능 금액 계산",\n            "type": "calculation",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "required_data": {"price": "task_0.result.price"},\n            "estimated_time": 15\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "시세 정보가 있어야 대출 금액 계산이 가능하므로 순차 실행"\n}\n```\n\n### 예시 2: 복합 질문 (병렬 가능)\n질문: "이 지역 전세 시세와 매매 시세 모두 알려주고 비교 분석해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "전세 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "매매 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "전세/매매 시세 비교 분석",\n            "type": "comparison",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0", "task_1"],\n            "required_data": {\n                "lease_price": "task_0.result",\n                "sale_price": "task_1.result"\n            },\n            "estimated_time": 25\n        }\n    ],\n    "execution_mode": "mixed",\n    "parallel_groups": [["task_0", "task_1"], ["task_2"]],\n    "reasoning": "시세 조회는 독립적이므로 병렬 처리, 비교는 두 결과 필요"\n}\n```\n\n### 예시 3: 복합 질문 (3단계 이상)\n질문: "이 계약서 검토해서 위험한 부분 찾고 수정안 만들어서 최종 계약서 작성해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "계약서 내용 전체 검토",\n            "type": "review",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 30\n        },\n        {\n            "description": "위험 요소 및 문제점 분석",\n            "type": "analysis",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "estimated_time": 25\n        },\n        {\n            "description": "수정안 제안 생성",\n            "type": "generation",\n            "agent": "document_team",\n            "priority": 3,\n            "depends_on": ["task_1"],\n            "estimated_time": 20\n        },\n        {\n            "description": "최종 계약서 작성",\n            "type": "generation",\n            "agent": "document_team",\n            "priority": 4,\n            "depends_on": ["task_2"],\n            "estimated_time": 30\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "각 단계가 이전 결과에 의존하므로 순차 실행 필요"\n}\n```\n\n### 예시 4: 단순 질문 (분해 불필요)\n질문: "전세금 인상률 상한이 얼마야?"\n분해:\n```json\n{\n    "is_compound": false,\n    "sub_tasks": [\n        {\n            "description": "전세금 인상률 상한 법률 정보 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 15\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "단일 정보 조회 요청으로 분해 불필요"\n}\n```\n\n### 예시 5: 조건부 실행\n질문: "이 물건 시세 확인하고 적정가면 대출 상담도 받고 싶어"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "물건 시세 조회 및 적정성 평가",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 25\n        },\n        {\n            "description": "대출 상담 정보 제공",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "optional": true,\n            "context": {"condition": "if_reasonable_price"},\n            "estimated_time": 20\n        }\n    ],\n    "execution_mode": "conditional",\n    "reasoning": "시세 확인 결과에 따라 대출 상담 진행 여부 결정"\n}\n```\n\n### 예시 6: 상황 설명 + 해결책 요청 (핵심 패턴!)\n질문: "집주인이 전세금 3억을 10억으로 올려달래. 법적으로 어떻게 해야 해?"\n**CoT 분석**:\n1. 질문 분석: 상황 설명 + 해결책 요청\n2. 연결어: 없지만, "어떻게 해야" = 해결책 요청\n3. 의존성: 법률 확인 → 상황 분석 → 대응 방안\n4. 복합 여부: **YES** (해결책을 위해 여러 단계 필요)\n\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "전세금 인상 한도 관련 법률 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "3억→10억 인상의 법적 타당성 및 적정성 분석",\n            "type": "analysis",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "required_data": {"legal_limit": "task_0.result", "current": 300000000, "requested": 1000000000},\n            "estimated_time": 25\n        },\n        {\n            "description": "구체적 대응 방안 및 해결책 제시",\n            "type": "analysis",\n            "agent": "analysis_team",\n            "priority": 3,\n            "depends_on": ["task_1"],\n            "estimated_time": 20\n        }\n    ],\n    "execution_mode": "sequential",\n    "confidence": 0.95,\n    "reasoning": "상황 설명+해결책 요청 패턴. \'어떻게 해야\'는 단순 정보 조회가 아닌 종합 해결책 필요. 법률 조회 → 상황 분석 → 해결책 제시 3단계 순차 처리"\n}\n```\n\n## Chain-of-Thought 프로세스:\n\n1. **질문 분석**: 어떤 정보나 작업을 요구하는가?\n2. **연결어 확인**: "그리고", "또한", "해서", "한 후" 등이 있는가?\n3. **의존성 파악**: 어떤 작업이 다른 작업의 결과를 필요로 하는가?\n4. **병렬성 판단**: 독립적으로 실행 가능한 작업이 있는가?\n5. **최적화**: 불필요한 분해는 없는가?\n\n## 응답 형식 (JSON):\n\n{\n    "is_compound": true/false,\n    "sub_tasks": [\n        {\n            "description": "작업 설명",\n            "type": "작업 유형",\n            "agent": "담당 팀",\n            "priority": 우선순위 (1이 가장 높음),\n            "depends_on": ["선행 작업 ID 리스트"],\n            "required_data": {"필요한 데이터 매핑"},\n            "estimated_time": 예상 소요 시간(초),\n            "optional": true/false,\n            "context": {"추가 컨텍스트"}\n        }\n    ],\n    "execution_mode": "sequential/parallel/mixed/conditional",\n    "parallel_groups": [["병렬 실행 가능한 작업 ID 그룹"]],\n    "confidence": 0.0-1.0,\n    "reasoning": "분해 결정의 이유와 근거"\n}\n\n## 분해 가이드라인:\n\n1. **분해가 필요한 경우**:\n   - 여러 종류의 정보를 요청하는 경우\n   - 순차적 처리가 필요한 경우 (A의 결과로 B 수행)\n   - 서로 다른 팀의 전문성이 필요한 경우\n\n2. **분해가 불필요한 경우**:\n   - 단일 정보 조회\n   - 단순한 질문-답변\n   - 하나의 팀에서 완전히 처리 가능한 경우\n\n3. **병렬 처리 기준**:\n   - 서로 독립적인 정보 조회\n   - 의존성이 없는 분석 작업\n   - 동시에 진행해도 충돌하지 않는 작업\n\n4. **우선순위 설정**:\n   - 의존성이 없는 작업: priority 1\n   - 1차 의존 작업: priority 2\n   - 2차 의존 작업: priority 3\n   - 이런 식으로 증가\n\n현재 의도: 계약서검토\n추출된 엔티티: None\n\n분석할 질문: 계약서 특약사항 검토하고 수정안 제시해줘'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 16:04:41,483 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 16:04:41,483 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 16:04:41,483 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 16:04:41,483 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 16:04:41,484 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 16:04:41,484 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 16:04:44,372 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 07:04:44 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'2647'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'2691'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9929'), (b'x-ratelimit-remaining-tokens', b'197334'), (b'x-ratelimit-reset-requests', b'10m9.395s'), (b'x-ratelimit-reset-tokens', b'799ms'), (b'x-request-id', b'req_98a352fa61e94b82bcd9b202cb39e95d'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b10fb1d2c3091-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 16:04:44,372 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 16:04:44,372 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 16:04:44,386 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 16:04:44,387 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 16:04:44,387 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 16:04:44,387 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 07:04:44 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '2647', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '2691', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9929', 'x-ratelimit-remaining-tokens': '197334', 'x-ratelimit-reset-requests': '10m9.395s', 'x-ratelimit-reset-tokens': '799ms', 'x-request-id': 'req_98a352fa61e94b82bcd9b202cb39e95d', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b10fb1d2c3091-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 16:04:44,387 - openai._base_client - DEBUG - request_id: req_98a352fa61e94b82bcd9b202cb39e95d
2025-10-05 16:04:44,387 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: query_decomposition | Model: gpt-4o-mini-2024-07-18 | Tokens: 2858 (prompt: 2693, completion: 165)
2025-10-05 16:04:44,387 - app.service_agent.cognitive_agents.query_decomposer - INFO - Successfully decomposed into 2 tasks
2025-10-05 16:04:44,387 - __main__ - INFO -   복합 질문: True
2025-10-05 16:04:44,387 - __main__ - INFO -   작업 수: 2
2025-10-05 16:04:44,387 - __main__ - INFO -   실행 모드: sequential
2025-10-05 16:04:44,387 - __main__ - INFO -     - task_0: 계약서 특약사항 검토 (search_team)
2025-10-05 16:04:44,387 - __main__ - INFO -     - task_1: 수정안 제안 생성 (document_team)
2025-10-05 16:04:44,387 - __main__ - INFO - 
[Step 3] Comprehensive Plan 생성...
2025-10-05 16:04:44,387 - app.service_agent.cognitive_agents.planning_agent - INFO - Creating comprehensive plan for query: 계약서 특약사항 검토하고 수정안 제시해줘...
2025-10-05 16:04:44,387 - app.service_agent.cognitive_agents.planning_agent - INFO - Analyzing intent for query: 계약서 특약사항 검토하고 수정안 제시해줘...
2025-10-05 16:04:44,388 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-521dc81f-3496-44e2-96cd-1f461187f878', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 의도 분석 전문가입니다.\n사용자의 질문을 정확히 이해하고, 어떤 종류의 도움이 필요한지 분류해야 합니다.\n\n## Chain-of-Thought 분석 프로세스\n\n질문을 분석할 때 다음 단계를 **순서대로** 따르세요:\n\n### 1단계: 질문 구조 파악\n- 단순 정보 요청인가? (예: "~이 뭐야?", "~알려줘")\n- 상황 설명이 포함되어 있는가? (배경, 현재 상태)\n- 구체적 수치나 데이터가 있는가? (금액, 비율, 기간 등)\n- 문제 해결을 요구하는가? (예: "어떻게 해야 해?", "방법 알려줘")\n\n### 2단계: 요청 유형 판단\n- **정보 확인형**: 사실, 개념, 규정 확인 → 검색만으로 충분\n- **평가/판단형**: "괜찮아?", "적절해?", "문제있어?" → 검색 + 분석 필요\n- **해결책 요청형**: "어떻게?", "방법?", "대처?" → 검색 + 분석 + 제안 필요\n- **비교/선택형**: "A vs B", "어느게 나아?" → 검색 + 분석(비교) 필요\n\n### 3단계: 복잡도 평가\n- **저**: 단일 개념/사실 확인 (예: "전세금 인상률 한도?")\n- **중**: 특정 상황 + 판단 (예: "3억을 5억으로 올려달래. 가능해?")\n- **고**: 복잡한 상황 + 여러 조건 + 해결책 (예: "10년 거주, 3억→10억 요구. 어떻게 해야 해?")\n\n### 4단계: 필요한 처리 결정\n- **검색만**: 정보 확인형 + 저복잡도\n- **검색+분석**: 평가/판단형 OR 중복잡도 OR 수치 비교 포함\n- **종합처리**: 해결책 요청형 OR 고복잡도 OR 여러 조건 동시 고려\n\n### 5단계: 최종 검증\n- 선택한 의도로 사용자 질문에 완전히 답변 가능한가?\n- 단순 정보 제공으로 끝나는가, 아니면 추가 분석/판단이 필요한가?\n- 상황 설명이 있으면서 "해결", "방법", "어떻게" 등이 있으면 → COMPREHENSIVE 고려\n\n## 중요: 복합 질문 처리\n복합적인 질문(여러 의도가 섞인 질문)의 경우, 가장 핵심적인 의도를 파악하되,\nsub_intents 필드에 부가적인 의도들도 함께 기록해주세요.\n\n**특히 주의**:\n- 법률 키워드가 있어도, "해결방법", "어떻게 해야" 같은 표현이 있으면 단순 LEGAL_CONSULT가 아닐 수 있음\n- 구체적 상황(금액, 기간 등) + 해결책 요구 = COMPREHENSIVE 또는 복합 의도로 분류\n\n## 분류 카테고리 설명:\n\n1. **LEGAL_CONSULT (법률상담)**\n   - 설명: 부동산 관련 법률, 권리, 의무에 대한 질문\n   - 예시:\n     * 단순: "전세금 5% 인상이 가능한가요?", "임대차계약 갱신 거부할 수 있나요?"\n     * 복합: "전세금 인상 가능한지 확인하고 법적 근거도 알려주세요"\n   - 키워드: 법, 전세, 임대, 보증금, 계약, 권리, 의무, 갱신, 임차인, 임대인, 법률, 규정, 조항\n   - 필요한 처리: 법률 데이터베이스 검색, 관련 법조항 찾기\n\n2. **MARKET_INQUIRY (시세조회)**\n   - 설명: 부동산 시장 가격, 시세, 거래 동향에 대한 질문\n   - 예시:\n     * 단순: "강남구 아파트 전세 시세 알려주세요", "서초동 매매가 얼마나 올랐나요?"\n     * 복합: "강남구 시세 확인하고 대출 가능 금액도 계산해줘"\n   - 키워드: 시세, 가격, 매매가, 전세가, 월세, 시장, 동향, 평균, 지역명, 상승률, 하락률\n   - 필요한 처리: 부동산 시세 데이터 조회, 지역별 가격 분석\n\n3. **LOAN_CONSULT (대출상담)**\n   - 설명: 주택담보대출, 전세자금대출 등 금융 관련 질문\n   - 예시:\n     * 단순: "전세자금대출 한도가 얼마인가요?", "LTV가 뭔가요?"\n     * 복합: "대출 한도 확인하고 금리 비교도 해주세요"\n   - 키워드: 대출, 금리, 한도, 조건, 상환, LTV, DTI, DSR, 담보, 금융, 은행\n   - 필요한 처리: 대출 상품 조회, 금리 정보 검색, 한도 계산\n\n4. **CONTRACT_CREATION (계약서작성)**\n   - 설명: 새로운 계약서나 문서를 작성해달라는 요청\n   - 예시:\n     * 단순: "임대차계약서 작성해주세요", "전세계약서 초안 만들어주세요"\n     * 복합: "계약서 작성하고 주의사항도 검토해주세요"\n   - 키워드: 작성, 만들, 생성, 초안, 계약서, 문서, 양식\n   - 필요한 처리: 문서 생성 에이전트 호출, 템플릿 기반 작성\n\n5. **CONTRACT_REVIEW (계약서검토)**\n   - 설명: 기존 계약서나 문서를 검토해달라는 요청\n   - 예시:\n     * 단순: "이 계약서 검토해주세요", "특약사항 문제없나요?"\n     * 복합: "계약서 검토하고 수정사항도 제안해주세요"\n   - 키워드: 검토, 확인, 점검, 리뷰, 분석해, 살펴봐, 체크\n   - 필요한 처리: 문서 분석, 위험 요소 식별, 개선사항 제안\n\n6. **COMPREHENSIVE (종합분석)**\n   - 설명: 여러 측면을 종합적으로 분석해달라는 요청, 또는 복잡한 상황에 대한 해결책 요청\n   - 예시:\n     * 단순: "이 물건 전체적으로 분석해주세요"\n     * 복합: "시세, 법률, 대출 모두 검토해서 종합 의견 주세요"\n     * 해결형: "10년 거주했는데 전세금 3억을 10억으로 올려달래. 어떻게 해야 해?"\n     * 상황+해결: "집주인이 계약 갱신 거부했어. 법적으로 어떻게 대응해야 할까?"\n   - 키워드: 종합, 전체, 모든, 전반적, 종합적, 평가, 분석, 어떻게, 방법, 해결, 대처\n   - 패턴: 구체적 상황 설명 + "어떻게/방법/해결" 요청\n   - 필요한 처리: 다중 데이터 소스 통합 분석, 상황 평가, 해결책 제시\n\n7. **RISK_ANALYSIS (리스크분석)**\n   - 설명: 위험 요소나 주의사항에 대한 질문\n   - 예시:\n     * 단순: "이 계약 위험한가요?", "주의할 점 알려주세요"\n     * 복합: "리스크 분석하고 대안도 제시해주세요"\n   - 키워드: 위험, 리스크, 주의, 문제점, 조심, 걱정, 우려\n   - 필요한 처리: 위험 요소 분석, 주의사항 추출\n\n8. **UNCLEAR (불분명)**\n   - 설명: 의도를 명확히 파악하기 어려운 질문\n   - 예시: "이거 좀 봐주세요", "어떻게 해야 할까요?", "도와주세요"\n   - 처리: 추가 질문으로 의도 명확화 필요\n\n9. **IRRELEVANT (무관)**\n   - 설명: 부동산과 전혀 관련 없는 질문\n   - 예시: "날씨 어때?", "저녁 뭐 먹지?", "주식 추천해줘"\n   - 처리: 부동산 관련 질문을 유도\n\n## 복합 질문 예시와 분석 (CoT 적용):\n\n### 예시 1: "강남구 아파트 시세 알려주고 전세자금대출 가능한지도 확인해줘"\n**CoT 분석**:\n1. 구조: 두 개의 요청 ("시세" + "대출")\n2. 유형: 정보 확인형 (둘 다)\n3. 복잡도: 중 (두 가지 독립적 조회)\n4. 필요 처리: 검색 + 계산/분석\n\n**결론**:\n- 주 의도: MARKET_INQUIRY (시세 조회가 먼저 필요)\n- 부가 의도: LOAN_CONSULT (대출 확인)\n- 분해: ["강남구 아파트 시세 조회", "전세자금대출 가능 여부 확인"]\n\n### 예시 2: "이 계약서 검토해서 위험한 부분 있는지 알려주고 수정 제안도 해줘"\n**CoT 분석**:\n1. 구조: 검토 + 위험 평가 + 수정안\n2. 유형: 평가/판단형 + 해결책 요청형\n3. 복잡도: 고 (3단계 처리)\n4. 필요 처리: 검토 + 분석 + 문서 생성\n\n**결론**:\n- 주 의도: CONTRACT_REVIEW (계약서 검토)\n- 부가 의도: RISK_ANALYSIS (위험 분석)\n- 분해: ["계약서 전체 검토", "위험 요소 식별", "수정사항 제안"]\n\n### 예시 3: "집주인이 짜증나, 10년 살았는데 전세금 3억을 10억으로 올려달래. 법적으로 해결방법 알려줘"\n**CoT 분석**:\n1. 구조: 상황 설명 (10년 거주, 3억→10억) + 해결책 요청\n2. 유형: 해결책 요청형 (단순 정보 X)\n3. 복잡도: 고 (구체적 상황 + 수치 비교 + 법률 + 대응방안)\n4. 필요 처리: 법률 검색 + 상황 분석 + 해결책 제시\n\n**결론**:\n- 주 의도: COMPREHENSIVE (복잡한 상황에 대한 종합 해결)\n- 부가 의도: LEGAL_CONSULT, RISK_ANALYSIS\n- 분해: ["전세금 인상 한도 법률 조회", "3억→10억 인상의 타당성 분석", "구체적 대응 방안 제시"]\n- **이유**: "법적으로"라는 키워드가 있지만, 단순 법률 확인이 아니라 구체적 상황에 대한 해결책을 요구하므로 COMPREHENSIVE\n\n### 예시 4: "전세금 인상률 상한이 얼마야?"\n**CoT 분석**:\n1. 구조: 단순 사실 확인\n2. 유형: 정보 확인형\n3. 복잡도: 저 (단일 개념)\n4. 필요 처리: 검색만\n\n**결론**:\n- 주 의도: LEGAL_CONSULT (법률 정보 조회)\n- 부가 의도: 없음\n- 분해: 필요 없음\n\n## 응답 형식 (JSON 형식으로 응답):\n\n```json\n{\n    "intent": "LEGAL_CONSULT",\n    "confidence": 0.9,\n    "keywords": ["전세금", "인상", "제한"],\n    "sub_intents": [],\n    "is_compound": false,\n    "decomposed_tasks": [],\n    "entities": {\n        "location": "강남구",\n        "price": "5억",\n        "contract_type": "전세",\n        "date": "2024년",\n        "area": "84㎡",\n        "action_verbs": ["확인", "검토"]\n    },\n    "reasoning": "전세금 인상에 대한 법률 질문이므로 LEGAL_CONSULT로 분류"\n}\n```\n\n응답 규칙:\n- intent: 위 9개 카테고리 중 하나 (대문자_언더스코어 형식)\n- confidence: 0.0~1.0 (0.8 이상이면 매우 확실, 0.5 미만이면 불확실)\n- keywords: 추출된 주요 키워드 목록\n- sub_intents: 복합 질문일 경우 부가적인 의도들\n- is_compound: 복합 질문 여부 (true/false)\n- decomposed_tasks: 복합 질문을 분해한 개별 작업들\n- entities: 추출된 엔티티 정보\n- reasoning: **반드시 CoT 5단계를 거쳐 분석한 과정을 포함** (구조 파악 → 유형 판단 → 복잡도 평가 → 필요 처리 → 최종 검증)\n\n## reasoning 작성 예시:\n"1단계(구조): 상황 설명(10년 거주, 3억→10억) + 해결책 요청 포함.\n2단계(유형): 해결책 요청형 - 단순 정보가 아닌 대응방안 필요.\n3단계(복잡도): 고 - 구체적 수치 비교와 복잡한 상황.\n4단계(처리): 법률 검색 + 상황 분석 + 해결책 제시 필요.\n5단계(검증): LEGAL_CONSULT만으로는 불충분, 종합적 분석 필요 → COMPREHENSIVE 선택"\n\n## 판단 가이드:\n- 여러 의도가 섞여있다면, 가장 주된 의도를 intent에, 나머지를 sub_intents에 기록\n- "그리고", "또한", "함께", "같이" 등의 연결어가 있으면 복합 질문일 가능성 높음\n- 법률 관련 키워드가 있으면 LEGAL_CONSULT 우선\n- 가격/시세 언급이 명확하면 MARKET_INQUIRY\n- 계약서라는 단어와 함께 "작성/만들기"가 있으면 CONTRACT_CREATION\n- 계약서라는 단어와 함께 "검토/확인"이 있으면 CONTRACT_REVIEW\n- 불확실하면 confidence를 낮게 설정하고 UNCLEAR 선택\n- 복합 질문은 is_compound를 true로 설정하고 개별 작업으로 분해\n\n분석할 질문: 계약서 특약사항 검토하고 수정안 제시해줘'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 16:04:44,388 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 16:04:44,388 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 16:04:44,389 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 16:04:44,389 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 16:04:44,389 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 16:04:44,389 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 16:04:52,489 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 07:04:52 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'7861'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'7905'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9928'), (b'x-ratelimit-remaining-tokens', b'197241'), (b'x-ratelimit-reset-requests', b'10m15.132s'), (b'x-ratelimit-reset-tokens', b'827ms'), (b'x-request-id', b'req_b19c1e1abe154812b358f85bc2c58cb4'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b110d4e173091-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 16:04:52,489 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 16:04:52,489 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 16:04:52,505 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 16:04:52,505 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 16:04:52,505 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 16:04:52,505 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 07:04:52 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '7861', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '7905', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9928', 'x-ratelimit-remaining-tokens': '197241', 'x-ratelimit-reset-requests': '10m15.132s', 'x-ratelimit-reset-tokens': '827ms', 'x-request-id': 'req_b19c1e1abe154812b358f85bc2c58cb4', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b110d4e173091-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 16:04:52,505 - openai._base_client - DEBUG - request_id: req_b19c1e1abe154812b358f85bc2c58cb4
2025-10-05 16:04:52,506 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: intent_analysis | Model: gpt-4o-mini-2024-07-18 | Tokens: 3398 (prompt: 3183, completion: 215)
2025-10-05 16:04:52,506 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM Intent Analysis Result: {'intent': 'CONTRACT_REVIEW', 'confidence': 0.85, 'keywords': ['계약서', '특약사항', '검토', '수정안'], 'sub_intents': [], 'is_compound': False, 'decomposed_tasks': [], 'entities': {'contract_type': '계약서', 'action_verbs': ['검토', '제시']}, 'reasoning': '1단계(구조): 계약서의 특약사항 검토 및 수정 요청 포함. 2단계(유형): 검토 및 수정 제안 요청형 - 단순 정보가 아닌 분석과 제안 필요. 3단계(복잡도): 중 - 계약서 검토와 수정안 제시가 필요. 4단계(처리): 계약서 분석 및 수정사항 제안 필요. 5단계(검증): 계약서 검토 요청이므로 CONTRACT_REVIEW로 분류.'}
2025-10-05 16:04:52,506 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-c264b60d-ecaf-4f26-abec-ce485d206723', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 Agent 선택 전문가입니다.\n사용자의 요청에 가장 적합한 Agent/Team을 선택하는 것이 목표입니다.\n\n## 현재 상황\n\n**사용자 질문:** 계약서 특약사항 검토하고 수정안 제시해줘\n**분석된 의도:** 계약서검토\n**추출된 키워드:** [\'계약서\', \'특약사항\', \'검토\', \'수정안\']\n\n## 사용 가능한 Agent/Team 정보\n\n{\'search_team\': {\'name\': \'search_team\', \'capabilities\': \'법률 검색, 부동산 시세 조회, 대출 상품 검색\', \'tools\': [\'legal_search\', \'market_data\', \'loan_data\'], \'use_cases\': [\'법률 상담\', \'시세 조회\', \'대출 정보\']}, \'analysis_team\': {\'name\': \'analysis_team\', \'capabilities\': \'데이터 분석, 리스크 평가, 인사이트 생성, 추천\', \'tools\': [\'data_analyzer\', \'risk_evaluator\'], \'use_cases\': [\'시장 분석\', \'리스크 평가\', \'투자 분석\']}, \'document_team\': {\'name\': \'document_team\', \'capabilities\': \'계약서 작성, 문서 생성, 문서 검토\', \'tools\': [\'document_generator\', \'contract_reviewer\'], \'use_cases\': [\'계약서 작성\', \'문서 검토\']}}\n\n## Agent 역할 및 상세 가이드\n\n### 1. search_team (검색 팀)\n- **주요 기능**: 정보 검색 및 데이터 수집\n- **전문 분야**:\n  * 법률 정보 검색 (전세법, 임대차보호법, 부동산 관련 법규)\n  * 부동산 시세 조회 (매매가, 전세가, 월세, 실거래가)\n  * 대출 상품 정보 검색 (금리, 한도, 조건)\n  * 지역 정보 및 인프라 조회\n- **도구**: legal_search, market_data, loan_data\n- **적합한 작업**: 정보 조회, 데이터 수집, 법률 확인, 시세 파악\n- **예시**:\n  * "전세금 5% 인상 가능한가요?"\n  * "강남구 아파트 전세 시세"\n  * "전세자금대출 한도 얼마?"\n\n### 2. analysis_team (분석 팀)\n- **주요 기능**: 데이터 분석 및 평가\n- **전문 분야**:\n  * 시장 동향 분석 (상승률, 하락률, 추세)\n  * 리스크 평가 (계약, 투자 위험도)\n  * 투자 수익률 계산 (ROI, 월세 수익률)\n  * 대출 한도 및 조건 분석 (LTV, DTI, DSR)\n  * 비교 분석 (지역별, 상품별)\n- **도구**: data_analyzer, risk_evaluator, calculator\n- **적합한 작업**: 데이터 분석, 리스크 평가, 계산, 비교, 예측\n- **의존성**: 보통 search_team의 데이터가 필요\n- **예시**:\n  * "이 지역 투자 가치 분석해줘"\n  * "계약 리스크 평가해줘"\n  * "대출 가능 금액 계산해줘"\n\n### 3. document_team (문서 팀)\n- **주요 기능**: 문서 생성 및 관리\n- **전문 분야**:\n  * 계약서 작성 (임대차, 매매, 전세)\n  * 문서 템플릿 관리\n  * 특약사항 생성\n  * 계약서 수정안 작성\n  * 법률 문서 검토\n- **도구**: document_generator, contract_template, contract_reviewer\n- **적합한 작업**: 문서 작성, 계약서 생성, 문서 수정, 검토\n- **예시**:\n  * "임대차계약서 작성해줘"\n  * "특약사항 추가해줘"\n  * "계약서 수정안 만들어줘"\n\n## Chain-of-Thought Agent 선택 프로세스\n\n다음 단계를 **순서대로** 따라 최적의 Agent 조합을 선택하세요:\n\n### 1단계: 질문 요구사항 파악\n- 단순 정보 조회인가? → search_team만 필요\n- 판단/평가가 필요한가? → search + analysis 필요\n- 해결책 제시가 필요한가? → search + analysis 필요\n- 문서 생성이 필요한가? → document_team 추가\n\n### 2단계: 작업 복잡도 판단\n- **단순** (검색만): "~이 뭐야?", "~알려줘" → search_team\n- **중간** (검색+판단): "~괜찮아?", "~적절해?" → search + analysis\n- **복잡** (종합 해결): 구체적 상황 + "어떻게 해야 해?" → search + analysis\n\n### 3단계: 의존성 분석\n- 독립적 작업: 단일 팀으로 처리 가능\n- 순차적 의존: 이전 결과 필요 → 여러 팀 순서대로\n- 병렬 가능: 동시 조회 가능 → coordination: "parallel"\n\n### 4단계: 최종 검증\n- 선택한 팀들로 질문에 완전히 답변 가능한가?\n- 불필요한 팀이 포함되지 않았는가?\n- 순서가 논리적인가? (데이터 흐름 고려)\n\n### 중요 원칙:\n- **법률 키워드만으로 판단하지 말 것**: "법적으로 어떻게 해야 해?" = 법률 검색 + 분석 필요\n- **상황 설명 + 해결책 요청** = 반드시 analysis_team 포함\n- **구체적 수치 비교** (3억→10억 같은) = analysis_team 필요\n\n## 의도별 Agent 매핑 가이드 (기본 가이드 - CoT로 조정 가능)\n\n| 의도 (Intent) | 기본 조합 | 상황별 조정 |\n|--------------|-----------|-------------|\n| LEGAL_CONSULT | ["search_team"] | 해결책 요청시 → + analysis_team |\n| MARKET_INQUIRY | ["search_team"] | 비교/평가시 → + analysis_team |\n| LOAN_CONSULT | ["search_team", "analysis_team"] | 계산 필수 |\n| CONTRACT_CREATION | ["document_team"] | 검토 후 작성 → search + document |\n| CONTRACT_REVIEW | ["search_team", "analysis_team"] | 법률 검토 + 리스크 분석 |\n| COMPREHENSIVE | ["search_team", "analysis_team"] | **항상 분석 포함** |\n| RISK_ANALYSIS | ["analysis_team"] | 법률 근거 필요시 → search + analysis |\n| UNCLEAR | ["search_team", "analysis_team"] | 포괄적 대응 |\n\n**중요**: 위 매핑은 **기본 가이드**일 뿐입니다.\n실제 질문의 내용(CoT 분석 결과)에 따라 조정하세요!\n\n## 복합 질문 처리 예시 (CoT 적용)\n\n### 예시 1: 순차적 처리\n질문: "강남구 시세 확인하고 투자 가치 분석해줘"\n**CoT 분석**:\n1. 요구사항: 시세 조회 + 투자 가치 평가\n2. 복잡도: 중간 (검색 + 분석)\n3. 의존성: 시세 데이터 → 투자 분석 (순차)\n4. 검증: search만으로는 "투자 가치 평가" 불가능\n\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "1단계: 시세 조회+투자 평가 필요. 2단계: 중간 복잡도. 3단계: 순차 의존. 4단계: search로 시세 수집 후 analysis로 투자 가치 평가 필요",\n    "coordination": "sequential"\n}\n```\n\n### 예시 2: 단순 정보 조회\n질문: "전세금 인상률 한도가 얼마야?"\n**CoT 분석**:\n1. 요구사항: 단순 사실 확인\n2. 복잡도: 낮음 (정보 확인형)\n3. 의존성: 없음\n4. 검증: search_team만으로 충분\n\n```json\n{\n    "selected_agents": ["search_team"],\n    "reasoning": "1단계: 단순 정보 조회. 2단계: 저복잡도. 3단계: 독립적. 4단계: 법률 검색만으로 답변 가능",\n    "coordination": "single"\n}\n```\n\n### 예시 3: 해결책 요청 (핵심 예시!)\n질문: "집주인이 전세금 3억을 10억으로 올려달래. 법적으로 어떻게 해야 해?"\n의도: COMPREHENSIVE\n**CoT 분석**:\n1. 요구사항: 상황 설명 + 해결책 요청\n2. 복잡도: 높음 (구체적 상황 + 수치 비교)\n3. 의존성: 법률 확인 → 상황 분석 → 해결책 제시\n4. 검증: "법적으로"만 보고 search만 선택하면 불충분! 해결책 제시 필요\n\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "1단계: 법률 + 상황 분석 + 해결책 필요. 2단계: 고복잡도(3억→10억 비정상). 3단계: 순차(법률 확인 후 타당성 분석). 4단계: \'어떻게 해야\' = 단순 법률 조회 아님, 분석 필수",\n    "coordination": "sequential",\n    "confidence": 0.95\n}\n```\n\n## 응답 형식 (JSON)\n\n```json\n{\n    "selected_agents": ["선택된 agent/team 목록"],\n    "reasoning": "선택 이유를 구체적으로 설명. 각 Agent의 역할과 처리 순서 포함",\n    "coordination": "single/sequential/parallel/pipeline",\n    "dependencies": {"agent2": ["agent1"]},\n    "estimated_time": 30,\n    "confidence": 0.9\n}\n```\n\n## 선택 가이드라인\n\n1. **최소 Agent 원칙**: 가능한 적은 수의 Agent로 처리\n2. **전문성 우선**: 해당 작업에 가장 전문적인 Agent 선택\n3. **효율성 고려**: 병렬 처리 가능한 경우 명시\n4. **의존성 관리**: 데이터 흐름을 고려한 순서 지정\n5. **폴백 전략**: 불확실한 경우 ["search_team", "analysis_team"] 조합\n\n## 주의사항\n\n- selected_agents는 반드시 배열 형태\n- Agent 이름은 정확히: "search_team", "analysis_team", "document_team"\n- 최소 1개, 최대 3개 선택\n- 순서는 실행 우선순위 (앞에 있을수록 먼저 실행)\n- reasoning은 상세하고 논리적으로 작성\n- coordination 필드로 실행 방식 명시\n- 복합 질문의 경우 의존성 관계 명확히 표시'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 16:04:52,507 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 16:04:52,507 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 16:04:52,507 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 16:04:52,507 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 16:04:52,508 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 16:04:52,508 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 16:04:54,541 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 07:04:54 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'1787'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'1813'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9928'), (b'x-ratelimit-remaining-tokens', b'197882'), (b'x-ratelimit-reset-requests', b'10m15.631s'), (b'x-ratelimit-reset-tokens', b'635ms'), (b'x-request-id', b'req_12ac886a73a343d488710f88ae9a5214'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b11400f503091-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 16:04:54,542 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 16:04:54,542 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 16:04:54,549 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 16:04:54,549 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 16:04:54,549 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 16:04:54,549 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 07:04:54 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '1787', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '1813', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9928', 'x-ratelimit-remaining-tokens': '197882', 'x-ratelimit-reset-requests': '10m15.631s', 'x-ratelimit-reset-tokens': '635ms', 'x-request-id': 'req_12ac886a73a343d488710f88ae9a5214', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b11400f503091-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 16:04:54,550 - openai._base_client - DEBUG - request_id: req_12ac886a73a343d488710f88ae9a5214
2025-10-05 16:04:54,550 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: agent_selection | Model: gpt-4o-mini-2024-07-18 | Tokens: 2557 (prompt: 2366, completion: 191)
2025-10-05 16:04:54,550 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM agent selection reasoning: 1단계: 계약서의 특약사항을 검토하고 수정안을 제시하는 요청이므로, 법률 정보 검색이 필요하고, 문서 검토 및 수정이 필요하다. 2단계: 중간 복잡도로, 법률 정보 확인 후 문서 수정이 필요하다. 3단계: 법률 정보 검색 후 문서 팀이 계약서 수정안을 제시하는 순차적 의존 관계가 있다. 4단계: '검토하고 수정안 제시'라는 요청은 단순한 법률 조회로는 해결되지 않으므로, document_team이 필요하다.
2025-10-05 16:04:54,550 - app.service_agent.cognitive_agents.planning_agent - INFO - ✅ Primary LLM selected agents: ['search_team', 'document_team']
2025-10-05 16:04:54,550 - app.service_agent.cognitive_agents.planning_agent - INFO - Intent analyzed: 계약서검토 (confidence: 0.85)
2025-10-05 16:04:54,550 - app.service_agent.cognitive_agents.query_decomposer - INFO - Decomposing query: 계약서 특약사항 검토하고 수정안 제시해줘...
2025-10-05 16:04:54,551 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-58ae2dae-d8fe-4916-92d9-3dc107db328b', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 질문 분해 전문가입니다.\n복잡한 사용자 질문을 독립적으로 처리 가능한 작업 단위로 분해하는 것이 목표입니다.\n\n## Chain-of-Thought 분해 프로세스:\n\n### 1단계: 복합 질문 여부 판단\n- 단순 정보 조회만 필요한가? → is_compound: false\n- **다음 중 하나라도 해당하면 is_compound: true**:\n  * "그리고", "그 다음", "한 후" 같은 연결어로 여러 요청 연결\n  * 명시적으로 2개 이상의 작업 요청 (예: "시세 확인하고 대출 계산해줘")\n  * 상황 설명 + 해결책 요청 (예: "3억→10억 올려달래. 어떻게 해야 해?")\n  * 해결책을 위해 여러 단계 처리 필요 (검색 → 분석 → 제안)\n\n### 2단계: 필요 작업 식별\n- 정보 수집이 필요한가? → search 작업\n- 평가/판단이 필요한가? → analysis 작업\n- 문서 생성이 필요한가? → generation 작업\n- **해결책 요청**인가? → search + analysis (최소 2개)\n\n### 3단계: 작업 순서 결정\n- 독립적 작업: 병렬 가능\n- 이전 결과 필요: 순차 실행 (depends_on 설정)\n\n## 중요 원칙:\n1. 각 작업은 하나의 명확한 목표를 가져야 합니다\n2. 작업 간 의존성을 명확히 파악해야 합니다\n3. 병렬 처리 가능한 작업은 구분해야 합니다\n4. **주의**: "어떻게 해야", "방법 알려줘" 같은 해결책 요청은 복합 질문!\n\n## 작업 유형 (type):\n- search: 정보 검색 (법률, 시세, 대출 정보 등)\n- analysis: 데이터 분석 (리스크 평가, 시장 분석 등)\n- generation: 문서 생성 (계약서 작성 등)\n- review: 검토/평가 (계약서 검토, 조건 확인 등)\n- calculation: 계산/산출 (대출 한도, 세금 등)\n- comparison: 비교 분석 (여러 옵션 비교)\n\n## 담당 팀 (agent):\n- search_team: 법률, 시세, 대출 정보 검색\n- analysis_team: 데이터 분석, 리스크 평가, 계산\n- document_team: 문서 생성, 계약서 작성\n\n## 학습 예시:\n\n### 예시 1: 복합 질문 (순차적)\n질문: "강남구 아파트 시세 확인하고 대출 가능 금액 계산해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "강남구 아파트 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "대출 가능 금액 계산",\n            "type": "calculation",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "required_data": {"price": "task_0.result.price"},\n            "estimated_time": 15\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "시세 정보가 있어야 대출 금액 계산이 가능하므로 순차 실행"\n}\n```\n\n### 예시 2: 복합 질문 (병렬 가능)\n질문: "이 지역 전세 시세와 매매 시세 모두 알려주고 비교 분석해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "전세 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "매매 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "전세/매매 시세 비교 분석",\n            "type": "comparison",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0", "task_1"],\n            "required_data": {\n                "lease_price": "task_0.result",\n                "sale_price": "task_1.result"\n            },\n            "estimated_time": 25\n        }\n    ],\n    "execution_mode": "mixed",\n    "parallel_groups": [["task_0", "task_1"], ["task_2"]],\n    "reasoning": "시세 조회는 독립적이므로 병렬 처리, 비교는 두 결과 필요"\n}\n```\n\n### 예시 3: 복합 질문 (3단계 이상)\n질문: "이 계약서 검토해서 위험한 부분 찾고 수정안 만들어서 최종 계약서 작성해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "계약서 내용 전체 검토",\n            "type": "review",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 30\n        },\n        {\n            "description": "위험 요소 및 문제점 분석",\n            "type": "analysis",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "estimated_time": 25\n        },\n        {\n            "description": "수정안 제안 생성",\n            "type": "generation",\n            "agent": "document_team",\n            "priority": 3,\n            "depends_on": ["task_1"],\n            "estimated_time": 20\n        },\n        {\n            "description": "최종 계약서 작성",\n            "type": "generation",\n            "agent": "document_team",\n            "priority": 4,\n            "depends_on": ["task_2"],\n            "estimated_time": 30\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "각 단계가 이전 결과에 의존하므로 순차 실행 필요"\n}\n```\n\n### 예시 4: 단순 질문 (분해 불필요)\n질문: "전세금 인상률 상한이 얼마야?"\n분해:\n```json\n{\n    "is_compound": false,\n    "sub_tasks": [\n        {\n            "description": "전세금 인상률 상한 법률 정보 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 15\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "단일 정보 조회 요청으로 분해 불필요"\n}\n```\n\n### 예시 5: 조건부 실행\n질문: "이 물건 시세 확인하고 적정가면 대출 상담도 받고 싶어"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "물건 시세 조회 및 적정성 평가",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 25\n        },\n        {\n            "description": "대출 상담 정보 제공",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "optional": true,\n            "context": {"condition": "if_reasonable_price"},\n            "estimated_time": 20\n        }\n    ],\n    "execution_mode": "conditional",\n    "reasoning": "시세 확인 결과에 따라 대출 상담 진행 여부 결정"\n}\n```\n\n### 예시 6: 상황 설명 + 해결책 요청 (핵심 패턴!)\n질문: "집주인이 전세금 3억을 10억으로 올려달래. 법적으로 어떻게 해야 해?"\n**CoT 분석**:\n1. 질문 분석: 상황 설명 + 해결책 요청\n2. 연결어: 없지만, "어떻게 해야" = 해결책 요청\n3. 의존성: 법률 확인 → 상황 분석 → 대응 방안\n4. 복합 여부: **YES** (해결책을 위해 여러 단계 필요)\n\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "전세금 인상 한도 관련 법률 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "3억→10억 인상의 법적 타당성 및 적정성 분석",\n            "type": "analysis",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "required_data": {"legal_limit": "task_0.result", "current": 300000000, "requested": 1000000000},\n            "estimated_time": 25\n        },\n        {\n            "description": "구체적 대응 방안 및 해결책 제시",\n            "type": "analysis",\n            "agent": "analysis_team",\n            "priority": 3,\n            "depends_on": ["task_1"],\n            "estimated_time": 20\n        }\n    ],\n    "execution_mode": "sequential",\n    "confidence": 0.95,\n    "reasoning": "상황 설명+해결책 요청 패턴. \'어떻게 해야\'는 단순 정보 조회가 아닌 종합 해결책 필요. 법률 조회 → 상황 분석 → 해결책 제시 3단계 순차 처리"\n}\n```\n\n## Chain-of-Thought 프로세스:\n\n1. **질문 분석**: 어떤 정보나 작업을 요구하는가?\n2. **연결어 확인**: "그리고", "또한", "해서", "한 후" 등이 있는가?\n3. **의존성 파악**: 어떤 작업이 다른 작업의 결과를 필요로 하는가?\n4. **병렬성 판단**: 독립적으로 실행 가능한 작업이 있는가?\n5. **최적화**: 불필요한 분해는 없는가?\n\n## 응답 형식 (JSON):\n\n{\n    "is_compound": true/false,\n    "sub_tasks": [\n        {\n            "description": "작업 설명",\n            "type": "작업 유형",\n            "agent": "담당 팀",\n            "priority": 우선순위 (1이 가장 높음),\n            "depends_on": ["선행 작업 ID 리스트"],\n            "required_data": {"필요한 데이터 매핑"},\n            "estimated_time": 예상 소요 시간(초),\n            "optional": true/false,\n            "context": {"추가 컨텍스트"}\n        }\n    ],\n    "execution_mode": "sequential/parallel/mixed/conditional",\n    "parallel_groups": [["병렬 실행 가능한 작업 ID 그룹"]],\n    "confidence": 0.0-1.0,\n    "reasoning": "분해 결정의 이유와 근거"\n}\n\n## 분해 가이드라인:\n\n1. **분해가 필요한 경우**:\n   - 여러 종류의 정보를 요청하는 경우\n   - 순차적 처리가 필요한 경우 (A의 결과로 B 수행)\n   - 서로 다른 팀의 전문성이 필요한 경우\n\n2. **분해가 불필요한 경우**:\n   - 단일 정보 조회\n   - 단순한 질문-답변\n   - 하나의 팀에서 완전히 처리 가능한 경우\n\n3. **병렬 처리 기준**:\n   - 서로 독립적인 정보 조회\n   - 의존성이 없는 분석 작업\n   - 동시에 진행해도 충돌하지 않는 작업\n\n4. **우선순위 설정**:\n   - 의존성이 없는 작업: priority 1\n   - 1차 의존 작업: priority 2\n   - 2차 의존 작업: priority 3\n   - 이런 식으로 증가\n\n현재 의도: 계약서검토\n추출된 엔티티: {\'contract_type\': \'계약서\', \'action_verbs\': [\'검토\', \'제시\']}\n\n분석할 질문: 계약서 특약사항 검토하고 수정안 제시해줘'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 16:04:54,552 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 16:04:54,552 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 16:04:54,553 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 16:04:54,553 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 16:04:54,553 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 16:04:54,553 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 16:04:57,976 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 07:04:57 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'3199'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'3226'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9927'), (b'x-ratelimit-remaining-tokens', b'197318'), (b'x-ratelimit-reset-requests', b'10m22.263s'), (b'x-ratelimit-reset-tokens', b'804ms'), (b'x-request-id', b'req_22982b5edcba4f0a8aeea096e3e220d1'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b114ccb9b3091-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 16:04:57,976 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 16:04:57,976 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 16:04:57,977 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 16:04:57,977 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 16:04:57,977 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 16:04:57,977 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 07:04:57 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '3199', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '3226', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9927', 'x-ratelimit-remaining-tokens': '197318', 'x-ratelimit-reset-requests': '10m22.263s', 'x-ratelimit-reset-tokens': '804ms', 'x-request-id': 'req_22982b5edcba4f0a8aeea096e3e220d1', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b114ccb9b3091-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 16:04:57,977 - openai._base_client - DEBUG - request_id: req_22982b5edcba4f0a8aeea096e3e220d1
2025-10-05 16:04:57,977 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: query_decomposition | Model: gpt-4o-mini-2024-07-18 | Tokens: 2876 (prompt: 2714, completion: 162)
2025-10-05 16:04:57,977 - app.service_agent.cognitive_agents.query_decomposer - INFO - Successfully decomposed into 2 tasks
2025-10-05 16:04:57,977 - app.service_agent.cognitive_agents.planning_agent - INFO - Query decomposed into 2 tasks
2025-10-05 16:04:57,977 - app.service_agent.cognitive_agents.planning_agent - WARNING - Plan validation errors: ["Agent 'search_team' not found in registry", "Agent 'document_team' depends on missing 'task_0'", "Agent 'document_team' not found in registry"]
2025-10-05 16:04:57,977 - app.service_agent.cognitive_agents.planning_agent - INFO - Optimizing execution plan
2025-10-05 16:04:57,977 - app.service_agent.cognitive_agents.planning_agent - INFO - Comprehensive plan created: Intent: 계약서검토 (confidence: 0.85) | Strategy: sequential | Agents: search_team, document_team | Estimated time: 50.0s
2025-10-05 16:04:57,977 - __main__ - INFO -   전략: sequential
2025-10-05 16:04:57,977 - __main__ - INFO -   단계 수: 2
2025-10-05 16:04:57,977 - __main__ - INFO - 
✓ 테스트 성공 (소요시간: 26.49초)
2025-10-05 16:04:57,978 - __main__ - INFO - 
================================================================================
2025-10-05 16:04:57,978 - __main__ - INFO - [38] 복합 질문 테스트: D018
2025-10-05 16:04:57,978 - __main__ - INFO - 질문: 성동구 시세 알려주고 투자 수익률 계산해줘
2025-10-05 16:04:57,978 - __main__ - INFO - ================================================================================
2025-10-05 16:04:57,978 - __main__ - INFO - 
[Step 1] Intent 분석...
2025-10-05 16:04:57,978 - app.service_agent.cognitive_agents.planning_agent - INFO - Analyzing intent for query: 성동구 시세 알려주고 투자 수익률 계산해줘...
2025-10-05 16:04:57,978 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-2a94e910-1004-4829-aa9a-fe03664094d2', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 의도 분석 전문가입니다.\n사용자의 질문을 정확히 이해하고, 어떤 종류의 도움이 필요한지 분류해야 합니다.\n\n## Chain-of-Thought 분석 프로세스\n\n질문을 분석할 때 다음 단계를 **순서대로** 따르세요:\n\n### 1단계: 질문 구조 파악\n- 단순 정보 요청인가? (예: "~이 뭐야?", "~알려줘")\n- 상황 설명이 포함되어 있는가? (배경, 현재 상태)\n- 구체적 수치나 데이터가 있는가? (금액, 비율, 기간 등)\n- 문제 해결을 요구하는가? (예: "어떻게 해야 해?", "방법 알려줘")\n\n### 2단계: 요청 유형 판단\n- **정보 확인형**: 사실, 개념, 규정 확인 → 검색만으로 충분\n- **평가/판단형**: "괜찮아?", "적절해?", "문제있어?" → 검색 + 분석 필요\n- **해결책 요청형**: "어떻게?", "방법?", "대처?" → 검색 + 분석 + 제안 필요\n- **비교/선택형**: "A vs B", "어느게 나아?" → 검색 + 분석(비교) 필요\n\n### 3단계: 복잡도 평가\n- **저**: 단일 개념/사실 확인 (예: "전세금 인상률 한도?")\n- **중**: 특정 상황 + 판단 (예: "3억을 5억으로 올려달래. 가능해?")\n- **고**: 복잡한 상황 + 여러 조건 + 해결책 (예: "10년 거주, 3억→10억 요구. 어떻게 해야 해?")\n\n### 4단계: 필요한 처리 결정\n- **검색만**: 정보 확인형 + 저복잡도\n- **검색+분석**: 평가/판단형 OR 중복잡도 OR 수치 비교 포함\n- **종합처리**: 해결책 요청형 OR 고복잡도 OR 여러 조건 동시 고려\n\n### 5단계: 최종 검증\n- 선택한 의도로 사용자 질문에 완전히 답변 가능한가?\n- 단순 정보 제공으로 끝나는가, 아니면 추가 분석/판단이 필요한가?\n- 상황 설명이 있으면서 "해결", "방법", "어떻게" 등이 있으면 → COMPREHENSIVE 고려\n\n## 중요: 복합 질문 처리\n복합적인 질문(여러 의도가 섞인 질문)의 경우, 가장 핵심적인 의도를 파악하되,\nsub_intents 필드에 부가적인 의도들도 함께 기록해주세요.\n\n**특히 주의**:\n- 법률 키워드가 있어도, "해결방법", "어떻게 해야" 같은 표현이 있으면 단순 LEGAL_CONSULT가 아닐 수 있음\n- 구체적 상황(금액, 기간 등) + 해결책 요구 = COMPREHENSIVE 또는 복합 의도로 분류\n\n## 분류 카테고리 설명:\n\n1. **LEGAL_CONSULT (법률상담)**\n   - 설명: 부동산 관련 법률, 권리, 의무에 대한 질문\n   - 예시:\n     * 단순: "전세금 5% 인상이 가능한가요?", "임대차계약 갱신 거부할 수 있나요?"\n     * 복합: "전세금 인상 가능한지 확인하고 법적 근거도 알려주세요"\n   - 키워드: 법, 전세, 임대, 보증금, 계약, 권리, 의무, 갱신, 임차인, 임대인, 법률, 규정, 조항\n   - 필요한 처리: 법률 데이터베이스 검색, 관련 법조항 찾기\n\n2. **MARKET_INQUIRY (시세조회)**\n   - 설명: 부동산 시장 가격, 시세, 거래 동향에 대한 질문\n   - 예시:\n     * 단순: "강남구 아파트 전세 시세 알려주세요", "서초동 매매가 얼마나 올랐나요?"\n     * 복합: "강남구 시세 확인하고 대출 가능 금액도 계산해줘"\n   - 키워드: 시세, 가격, 매매가, 전세가, 월세, 시장, 동향, 평균, 지역명, 상승률, 하락률\n   - 필요한 처리: 부동산 시세 데이터 조회, 지역별 가격 분석\n\n3. **LOAN_CONSULT (대출상담)**\n   - 설명: 주택담보대출, 전세자금대출 등 금융 관련 질문\n   - 예시:\n     * 단순: "전세자금대출 한도가 얼마인가요?", "LTV가 뭔가요?"\n     * 복합: "대출 한도 확인하고 금리 비교도 해주세요"\n   - 키워드: 대출, 금리, 한도, 조건, 상환, LTV, DTI, DSR, 담보, 금융, 은행\n   - 필요한 처리: 대출 상품 조회, 금리 정보 검색, 한도 계산\n\n4. **CONTRACT_CREATION (계약서작성)**\n   - 설명: 새로운 계약서나 문서를 작성해달라는 요청\n   - 예시:\n     * 단순: "임대차계약서 작성해주세요", "전세계약서 초안 만들어주세요"\n     * 복합: "계약서 작성하고 주의사항도 검토해주세요"\n   - 키워드: 작성, 만들, 생성, 초안, 계약서, 문서, 양식\n   - 필요한 처리: 문서 생성 에이전트 호출, 템플릿 기반 작성\n\n5. **CONTRACT_REVIEW (계약서검토)**\n   - 설명: 기존 계약서나 문서를 검토해달라는 요청\n   - 예시:\n     * 단순: "이 계약서 검토해주세요", "특약사항 문제없나요?"\n     * 복합: "계약서 검토하고 수정사항도 제안해주세요"\n   - 키워드: 검토, 확인, 점검, 리뷰, 분석해, 살펴봐, 체크\n   - 필요한 처리: 문서 분석, 위험 요소 식별, 개선사항 제안\n\n6. **COMPREHENSIVE (종합분석)**\n   - 설명: 여러 측면을 종합적으로 분석해달라는 요청, 또는 복잡한 상황에 대한 해결책 요청\n   - 예시:\n     * 단순: "이 물건 전체적으로 분석해주세요"\n     * 복합: "시세, 법률, 대출 모두 검토해서 종합 의견 주세요"\n     * 해결형: "10년 거주했는데 전세금 3억을 10억으로 올려달래. 어떻게 해야 해?"\n     * 상황+해결: "집주인이 계약 갱신 거부했어. 법적으로 어떻게 대응해야 할까?"\n   - 키워드: 종합, 전체, 모든, 전반적, 종합적, 평가, 분석, 어떻게, 방법, 해결, 대처\n   - 패턴: 구체적 상황 설명 + "어떻게/방법/해결" 요청\n   - 필요한 처리: 다중 데이터 소스 통합 분석, 상황 평가, 해결책 제시\n\n7. **RISK_ANALYSIS (리스크분석)**\n   - 설명: 위험 요소나 주의사항에 대한 질문\n   - 예시:\n     * 단순: "이 계약 위험한가요?", "주의할 점 알려주세요"\n     * 복합: "리스크 분석하고 대안도 제시해주세요"\n   - 키워드: 위험, 리스크, 주의, 문제점, 조심, 걱정, 우려\n   - 필요한 처리: 위험 요소 분석, 주의사항 추출\n\n8. **UNCLEAR (불분명)**\n   - 설명: 의도를 명확히 파악하기 어려운 질문\n   - 예시: "이거 좀 봐주세요", "어떻게 해야 할까요?", "도와주세요"\n   - 처리: 추가 질문으로 의도 명확화 필요\n\n9. **IRRELEVANT (무관)**\n   - 설명: 부동산과 전혀 관련 없는 질문\n   - 예시: "날씨 어때?", "저녁 뭐 먹지?", "주식 추천해줘"\n   - 처리: 부동산 관련 질문을 유도\n\n## 복합 질문 예시와 분석 (CoT 적용):\n\n### 예시 1: "강남구 아파트 시세 알려주고 전세자금대출 가능한지도 확인해줘"\n**CoT 분석**:\n1. 구조: 두 개의 요청 ("시세" + "대출")\n2. 유형: 정보 확인형 (둘 다)\n3. 복잡도: 중 (두 가지 독립적 조회)\n4. 필요 처리: 검색 + 계산/분석\n\n**결론**:\n- 주 의도: MARKET_INQUIRY (시세 조회가 먼저 필요)\n- 부가 의도: LOAN_CONSULT (대출 확인)\n- 분해: ["강남구 아파트 시세 조회", "전세자금대출 가능 여부 확인"]\n\n### 예시 2: "이 계약서 검토해서 위험한 부분 있는지 알려주고 수정 제안도 해줘"\n**CoT 분석**:\n1. 구조: 검토 + 위험 평가 + 수정안\n2. 유형: 평가/판단형 + 해결책 요청형\n3. 복잡도: 고 (3단계 처리)\n4. 필요 처리: 검토 + 분석 + 문서 생성\n\n**결론**:\n- 주 의도: CONTRACT_REVIEW (계약서 검토)\n- 부가 의도: RISK_ANALYSIS (위험 분석)\n- 분해: ["계약서 전체 검토", "위험 요소 식별", "수정사항 제안"]\n\n### 예시 3: "집주인이 짜증나, 10년 살았는데 전세금 3억을 10억으로 올려달래. 법적으로 해결방법 알려줘"\n**CoT 분석**:\n1. 구조: 상황 설명 (10년 거주, 3억→10억) + 해결책 요청\n2. 유형: 해결책 요청형 (단순 정보 X)\n3. 복잡도: 고 (구체적 상황 + 수치 비교 + 법률 + 대응방안)\n4. 필요 처리: 법률 검색 + 상황 분석 + 해결책 제시\n\n**결론**:\n- 주 의도: COMPREHENSIVE (복잡한 상황에 대한 종합 해결)\n- 부가 의도: LEGAL_CONSULT, RISK_ANALYSIS\n- 분해: ["전세금 인상 한도 법률 조회", "3억→10억 인상의 타당성 분석", "구체적 대응 방안 제시"]\n- **이유**: "법적으로"라는 키워드가 있지만, 단순 법률 확인이 아니라 구체적 상황에 대한 해결책을 요구하므로 COMPREHENSIVE\n\n### 예시 4: "전세금 인상률 상한이 얼마야?"\n**CoT 분석**:\n1. 구조: 단순 사실 확인\n2. 유형: 정보 확인형\n3. 복잡도: 저 (단일 개념)\n4. 필요 처리: 검색만\n\n**결론**:\n- 주 의도: LEGAL_CONSULT (법률 정보 조회)\n- 부가 의도: 없음\n- 분해: 필요 없음\n\n## 응답 형식 (JSON 형식으로 응답):\n\n```json\n{\n    "intent": "LEGAL_CONSULT",\n    "confidence": 0.9,\n    "keywords": ["전세금", "인상", "제한"],\n    "sub_intents": [],\n    "is_compound": false,\n    "decomposed_tasks": [],\n    "entities": {\n        "location": "강남구",\n        "price": "5억",\n        "contract_type": "전세",\n        "date": "2024년",\n        "area": "84㎡",\n        "action_verbs": ["확인", "검토"]\n    },\n    "reasoning": "전세금 인상에 대한 법률 질문이므로 LEGAL_CONSULT로 분류"\n}\n```\n\n응답 규칙:\n- intent: 위 9개 카테고리 중 하나 (대문자_언더스코어 형식)\n- confidence: 0.0~1.0 (0.8 이상이면 매우 확실, 0.5 미만이면 불확실)\n- keywords: 추출된 주요 키워드 목록\n- sub_intents: 복합 질문일 경우 부가적인 의도들\n- is_compound: 복합 질문 여부 (true/false)\n- decomposed_tasks: 복합 질문을 분해한 개별 작업들\n- entities: 추출된 엔티티 정보\n- reasoning: **반드시 CoT 5단계를 거쳐 분석한 과정을 포함** (구조 파악 → 유형 판단 → 복잡도 평가 → 필요 처리 → 최종 검증)\n\n## reasoning 작성 예시:\n"1단계(구조): 상황 설명(10년 거주, 3억→10억) + 해결책 요청 포함.\n2단계(유형): 해결책 요청형 - 단순 정보가 아닌 대응방안 필요.\n3단계(복잡도): 고 - 구체적 수치 비교와 복잡한 상황.\n4단계(처리): 법률 검색 + 상황 분석 + 해결책 제시 필요.\n5단계(검증): LEGAL_CONSULT만으로는 불충분, 종합적 분석 필요 → COMPREHENSIVE 선택"\n\n## 판단 가이드:\n- 여러 의도가 섞여있다면, 가장 주된 의도를 intent에, 나머지를 sub_intents에 기록\n- "그리고", "또한", "함께", "같이" 등의 연결어가 있으면 복합 질문일 가능성 높음\n- 법률 관련 키워드가 있으면 LEGAL_CONSULT 우선\n- 가격/시세 언급이 명확하면 MARKET_INQUIRY\n- 계약서라는 단어와 함께 "작성/만들기"가 있으면 CONTRACT_CREATION\n- 계약서라는 단어와 함께 "검토/확인"이 있으면 CONTRACT_REVIEW\n- 불확실하면 confidence를 낮게 설정하고 UNCLEAR 선택\n- 복합 질문은 is_compound를 true로 설정하고 개별 작업으로 분해\n\n분석할 질문: 성동구 시세 알려주고 투자 수익률 계산해줘'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 16:04:57,979 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 16:04:57,979 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 16:04:57,979 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 16:04:57,979 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 16:04:57,979 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 16:04:57,979 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 16:05:02,863 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 07:05:02 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'4674'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'4698'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9927'), (b'x-ratelimit-remaining-tokens', b'197241'), (b'x-ratelimit-reset-requests', b'10m27.475s'), (b'x-ratelimit-reset-tokens', b'827ms'), (b'x-request-id', b'req_9d63acb29bcd4ddf9c22a1694f806238'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b116238383091-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 16:05:02,864 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 16:05:02,864 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 16:05:02,869 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 16:05:02,869 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 16:05:02,869 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 16:05:02,869 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 07:05:02 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '4674', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '4698', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9927', 'x-ratelimit-remaining-tokens': '197241', 'x-ratelimit-reset-requests': '10m27.475s', 'x-ratelimit-reset-tokens': '827ms', 'x-request-id': 'req_9d63acb29bcd4ddf9c22a1694f806238', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b116238383091-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 16:05:02,869 - openai._base_client - DEBUG - request_id: req_9d63acb29bcd4ddf9c22a1694f806238
2025-10-05 16:05:02,869 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: intent_analysis | Model: gpt-4o-mini-2024-07-18 | Tokens: 3441 (prompt: 3184, completion: 257)
2025-10-05 16:05:02,869 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM Intent Analysis Result: {'intent': 'MARKET_INQUIRY', 'confidence': 0.85, 'keywords': ['성동구', '시세', '투자', '수익률'], 'sub_intents': ['LOAN_CONSULT'], 'is_compound': True, 'decomposed_tasks': ['성동구 시세 조회', '투자 수익률 계산'], 'entities': {'location': '성동구', 'action_verbs': ['알려주고', '계산해줘']}, 'reasoning': '1단계(구조): 두 개의 요청(시세 조회 + 투자 수익률 계산) 포함. 2단계(유형): 정보 확인형(시세) + 해결책 요청형(수익률 계산). 3단계(복잡도): 중 - 두 가지 독립적 조회 필요. 4단계(처리): 시세 데이터 검색 + 수익률 계산 필요. 5단계(검증): 주 의도는 시세 조회이므로 MARKET_INQUIRY로 분류, 부가 의도로 투자 수익률 계산 포함.'}
2025-10-05 16:05:02,870 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-06650be7-81fc-4b8c-a111-9813990dbb42', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 Agent 선택 전문가입니다.\n사용자의 요청에 가장 적합한 Agent/Team을 선택하는 것이 목표입니다.\n\n## 현재 상황\n\n**사용자 질문:** 성동구 시세 알려주고 투자 수익률 계산해줘\n**분석된 의도:** 시세조회\n**추출된 키워드:** [\'성동구\', \'시세\', \'투자\', \'수익률\']\n\n## 사용 가능한 Agent/Team 정보\n\n{\'search_team\': {\'name\': \'search_team\', \'capabilities\': \'법률 검색, 부동산 시세 조회, 대출 상품 검색\', \'tools\': [\'legal_search\', \'market_data\', \'loan_data\'], \'use_cases\': [\'법률 상담\', \'시세 조회\', \'대출 정보\']}, \'analysis_team\': {\'name\': \'analysis_team\', \'capabilities\': \'데이터 분석, 리스크 평가, 인사이트 생성, 추천\', \'tools\': [\'data_analyzer\', \'risk_evaluator\'], \'use_cases\': [\'시장 분석\', \'리스크 평가\', \'투자 분석\']}, \'document_team\': {\'name\': \'document_team\', \'capabilities\': \'계약서 작성, 문서 생성, 문서 검토\', \'tools\': [\'document_generator\', \'contract_reviewer\'], \'use_cases\': [\'계약서 작성\', \'문서 검토\']}}\n\n## Agent 역할 및 상세 가이드\n\n### 1. search_team (검색 팀)\n- **주요 기능**: 정보 검색 및 데이터 수집\n- **전문 분야**:\n  * 법률 정보 검색 (전세법, 임대차보호법, 부동산 관련 법규)\n  * 부동산 시세 조회 (매매가, 전세가, 월세, 실거래가)\n  * 대출 상품 정보 검색 (금리, 한도, 조건)\n  * 지역 정보 및 인프라 조회\n- **도구**: legal_search, market_data, loan_data\n- **적합한 작업**: 정보 조회, 데이터 수집, 법률 확인, 시세 파악\n- **예시**:\n  * "전세금 5% 인상 가능한가요?"\n  * "강남구 아파트 전세 시세"\n  * "전세자금대출 한도 얼마?"\n\n### 2. analysis_team (분석 팀)\n- **주요 기능**: 데이터 분석 및 평가\n- **전문 분야**:\n  * 시장 동향 분석 (상승률, 하락률, 추세)\n  * 리스크 평가 (계약, 투자 위험도)\n  * 투자 수익률 계산 (ROI, 월세 수익률)\n  * 대출 한도 및 조건 분석 (LTV, DTI, DSR)\n  * 비교 분석 (지역별, 상품별)\n- **도구**: data_analyzer, risk_evaluator, calculator\n- **적합한 작업**: 데이터 분석, 리스크 평가, 계산, 비교, 예측\n- **의존성**: 보통 search_team의 데이터가 필요\n- **예시**:\n  * "이 지역 투자 가치 분석해줘"\n  * "계약 리스크 평가해줘"\n  * "대출 가능 금액 계산해줘"\n\n### 3. document_team (문서 팀)\n- **주요 기능**: 문서 생성 및 관리\n- **전문 분야**:\n  * 계약서 작성 (임대차, 매매, 전세)\n  * 문서 템플릿 관리\n  * 특약사항 생성\n  * 계약서 수정안 작성\n  * 법률 문서 검토\n- **도구**: document_generator, contract_template, contract_reviewer\n- **적합한 작업**: 문서 작성, 계약서 생성, 문서 수정, 검토\n- **예시**:\n  * "임대차계약서 작성해줘"\n  * "특약사항 추가해줘"\n  * "계약서 수정안 만들어줘"\n\n## Chain-of-Thought Agent 선택 프로세스\n\n다음 단계를 **순서대로** 따라 최적의 Agent 조합을 선택하세요:\n\n### 1단계: 질문 요구사항 파악\n- 단순 정보 조회인가? → search_team만 필요\n- 판단/평가가 필요한가? → search + analysis 필요\n- 해결책 제시가 필요한가? → search + analysis 필요\n- 문서 생성이 필요한가? → document_team 추가\n\n### 2단계: 작업 복잡도 판단\n- **단순** (검색만): "~이 뭐야?", "~알려줘" → search_team\n- **중간** (검색+판단): "~괜찮아?", "~적절해?" → search + analysis\n- **복잡** (종합 해결): 구체적 상황 + "어떻게 해야 해?" → search + analysis\n\n### 3단계: 의존성 분석\n- 독립적 작업: 단일 팀으로 처리 가능\n- 순차적 의존: 이전 결과 필요 → 여러 팀 순서대로\n- 병렬 가능: 동시 조회 가능 → coordination: "parallel"\n\n### 4단계: 최종 검증\n- 선택한 팀들로 질문에 완전히 답변 가능한가?\n- 불필요한 팀이 포함되지 않았는가?\n- 순서가 논리적인가? (데이터 흐름 고려)\n\n### 중요 원칙:\n- **법률 키워드만으로 판단하지 말 것**: "법적으로 어떻게 해야 해?" = 법률 검색 + 분석 필요\n- **상황 설명 + 해결책 요청** = 반드시 analysis_team 포함\n- **구체적 수치 비교** (3억→10억 같은) = analysis_team 필요\n\n## 의도별 Agent 매핑 가이드 (기본 가이드 - CoT로 조정 가능)\n\n| 의도 (Intent) | 기본 조합 | 상황별 조정 |\n|--------------|-----------|-------------|\n| LEGAL_CONSULT | ["search_team"] | 해결책 요청시 → + analysis_team |\n| MARKET_INQUIRY | ["search_team"] | 비교/평가시 → + analysis_team |\n| LOAN_CONSULT | ["search_team", "analysis_team"] | 계산 필수 |\n| CONTRACT_CREATION | ["document_team"] | 검토 후 작성 → search + document |\n| CONTRACT_REVIEW | ["search_team", "analysis_team"] | 법률 검토 + 리스크 분석 |\n| COMPREHENSIVE | ["search_team", "analysis_team"] | **항상 분석 포함** |\n| RISK_ANALYSIS | ["analysis_team"] | 법률 근거 필요시 → search + analysis |\n| UNCLEAR | ["search_team", "analysis_team"] | 포괄적 대응 |\n\n**중요**: 위 매핑은 **기본 가이드**일 뿐입니다.\n실제 질문의 내용(CoT 분석 결과)에 따라 조정하세요!\n\n## 복합 질문 처리 예시 (CoT 적용)\n\n### 예시 1: 순차적 처리\n질문: "강남구 시세 확인하고 투자 가치 분석해줘"\n**CoT 분석**:\n1. 요구사항: 시세 조회 + 투자 가치 평가\n2. 복잡도: 중간 (검색 + 분석)\n3. 의존성: 시세 데이터 → 투자 분석 (순차)\n4. 검증: search만으로는 "투자 가치 평가" 불가능\n\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "1단계: 시세 조회+투자 평가 필요. 2단계: 중간 복잡도. 3단계: 순차 의존. 4단계: search로 시세 수집 후 analysis로 투자 가치 평가 필요",\n    "coordination": "sequential"\n}\n```\n\n### 예시 2: 단순 정보 조회\n질문: "전세금 인상률 한도가 얼마야?"\n**CoT 분석**:\n1. 요구사항: 단순 사실 확인\n2. 복잡도: 낮음 (정보 확인형)\n3. 의존성: 없음\n4. 검증: search_team만으로 충분\n\n```json\n{\n    "selected_agents": ["search_team"],\n    "reasoning": "1단계: 단순 정보 조회. 2단계: 저복잡도. 3단계: 독립적. 4단계: 법률 검색만으로 답변 가능",\n    "coordination": "single"\n}\n```\n\n### 예시 3: 해결책 요청 (핵심 예시!)\n질문: "집주인이 전세금 3억을 10억으로 올려달래. 법적으로 어떻게 해야 해?"\n의도: COMPREHENSIVE\n**CoT 분석**:\n1. 요구사항: 상황 설명 + 해결책 요청\n2. 복잡도: 높음 (구체적 상황 + 수치 비교)\n3. 의존성: 법률 확인 → 상황 분석 → 해결책 제시\n4. 검증: "법적으로"만 보고 search만 선택하면 불충분! 해결책 제시 필요\n\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "1단계: 법률 + 상황 분석 + 해결책 필요. 2단계: 고복잡도(3억→10억 비정상). 3단계: 순차(법률 확인 후 타당성 분석). 4단계: \'어떻게 해야\' = 단순 법률 조회 아님, 분석 필수",\n    "coordination": "sequential",\n    "confidence": 0.95\n}\n```\n\n## 응답 형식 (JSON)\n\n```json\n{\n    "selected_agents": ["선택된 agent/team 목록"],\n    "reasoning": "선택 이유를 구체적으로 설명. 각 Agent의 역할과 처리 순서 포함",\n    "coordination": "single/sequential/parallel/pipeline",\n    "dependencies": {"agent2": ["agent1"]},\n    "estimated_time": 30,\n    "confidence": 0.9\n}\n```\n\n## 선택 가이드라인\n\n1. **최소 Agent 원칙**: 가능한 적은 수의 Agent로 처리\n2. **전문성 우선**: 해당 작업에 가장 전문적인 Agent 선택\n3. **효율성 고려**: 병렬 처리 가능한 경우 명시\n4. **의존성 관리**: 데이터 흐름을 고려한 순서 지정\n5. **폴백 전략**: 불확실한 경우 ["search_team", "analysis_team"] 조합\n\n## 주의사항\n\n- selected_agents는 반드시 배열 형태\n- Agent 이름은 정확히: "search_team", "analysis_team", "document_team"\n- 최소 1개, 최대 3개 선택\n- 순서는 실행 우선순위 (앞에 있을수록 먼저 실행)\n- reasoning은 상세하고 논리적으로 작성\n- coordination 필드로 실행 방식 명시\n- 복합 질문의 경우 의존성 관계 명확히 표시'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 16:05:02,870 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 16:05:02,871 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 16:05:02,871 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 16:05:02,871 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 16:05:02,871 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 16:05:02,871 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 16:05:06,456 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 07:05:06 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'3371'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'3395'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9926'), (b'x-ratelimit-remaining-tokens', b'197885'), (b'x-ratelimit-reset-requests', b'10m31.217s'), (b'x-ratelimit-reset-tokens', b'634ms'), (b'x-request-id', b'req_1b20541df64b4bc28dd65465f4b75b8d'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b1180cac73091-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 16:05:06,457 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 16:05:06,457 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 16:05:06,463 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 16:05:06,463 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 16:05:06,463 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 16:05:06,463 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 07:05:06 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '3371', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '3395', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9926', 'x-ratelimit-remaining-tokens': '197885', 'x-ratelimit-reset-requests': '10m31.217s', 'x-ratelimit-reset-tokens': '634ms', 'x-request-id': 'req_1b20541df64b4bc28dd65465f4b75b8d', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b1180cac73091-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 16:05:06,463 - openai._base_client - DEBUG - request_id: req_1b20541df64b4bc28dd65465f4b75b8d
2025-10-05 16:05:06,464 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: agent_selection | Model: gpt-4o-mini-2024-07-18 | Tokens: 2512 (prompt: 2365, completion: 147)
2025-10-05 16:05:06,464 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM agent selection reasoning: 1단계: 성동구 시세 조회와 투자 수익률 계산이 필요. 2단계: 중간 복잡도(시세 조회 후 수익률 분석 필요). 3단계: 시세 데이터가 필요하므로 순차적 의존성 존재. 4단계: search_team으로 시세를 조회한 후, analysis_team으로 투자 수익률을 계산해야 함.
2025-10-05 16:05:06,464 - app.service_agent.cognitive_agents.planning_agent - INFO - ✅ Primary LLM selected agents: ['search_team', 'analysis_team']
2025-10-05 16:05:06,464 - __main__ - INFO -   의도: 시세조회
2025-10-05 16:05:06,464 - __main__ - INFO -   신뢰도: 0.85
2025-10-05 16:05:06,464 - __main__ - INFO -   추천 Agent: ['search_team', 'analysis_team']
2025-10-05 16:05:06,464 - __main__ - INFO - 
[Step 2] Query Decomposition...
2025-10-05 16:05:06,464 - app.service_agent.cognitive_agents.query_decomposer - INFO - Decomposing query: 성동구 시세 알려주고 투자 수익률 계산해줘...
2025-10-05 16:05:06,465 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-94734f57-85d6-41e9-94b0-629a06f6f5ef', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 질문 분해 전문가입니다.\n복잡한 사용자 질문을 독립적으로 처리 가능한 작업 단위로 분해하는 것이 목표입니다.\n\n## Chain-of-Thought 분해 프로세스:\n\n### 1단계: 복합 질문 여부 판단\n- 단순 정보 조회만 필요한가? → is_compound: false\n- **다음 중 하나라도 해당하면 is_compound: true**:\n  * "그리고", "그 다음", "한 후" 같은 연결어로 여러 요청 연결\n  * 명시적으로 2개 이상의 작업 요청 (예: "시세 확인하고 대출 계산해줘")\n  * 상황 설명 + 해결책 요청 (예: "3억→10억 올려달래. 어떻게 해야 해?")\n  * 해결책을 위해 여러 단계 처리 필요 (검색 → 분석 → 제안)\n\n### 2단계: 필요 작업 식별\n- 정보 수집이 필요한가? → search 작업\n- 평가/판단이 필요한가? → analysis 작업\n- 문서 생성이 필요한가? → generation 작업\n- **해결책 요청**인가? → search + analysis (최소 2개)\n\n### 3단계: 작업 순서 결정\n- 독립적 작업: 병렬 가능\n- 이전 결과 필요: 순차 실행 (depends_on 설정)\n\n## 중요 원칙:\n1. 각 작업은 하나의 명확한 목표를 가져야 합니다\n2. 작업 간 의존성을 명확히 파악해야 합니다\n3. 병렬 처리 가능한 작업은 구분해야 합니다\n4. **주의**: "어떻게 해야", "방법 알려줘" 같은 해결책 요청은 복합 질문!\n\n## 작업 유형 (type):\n- search: 정보 검색 (법률, 시세, 대출 정보 등)\n- analysis: 데이터 분석 (리스크 평가, 시장 분석 등)\n- generation: 문서 생성 (계약서 작성 등)\n- review: 검토/평가 (계약서 검토, 조건 확인 등)\n- calculation: 계산/산출 (대출 한도, 세금 등)\n- comparison: 비교 분석 (여러 옵션 비교)\n\n## 담당 팀 (agent):\n- search_team: 법률, 시세, 대출 정보 검색\n- analysis_team: 데이터 분석, 리스크 평가, 계산\n- document_team: 문서 생성, 계약서 작성\n\n## 학습 예시:\n\n### 예시 1: 복합 질문 (순차적)\n질문: "강남구 아파트 시세 확인하고 대출 가능 금액 계산해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "강남구 아파트 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "대출 가능 금액 계산",\n            "type": "calculation",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "required_data": {"price": "task_0.result.price"},\n            "estimated_time": 15\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "시세 정보가 있어야 대출 금액 계산이 가능하므로 순차 실행"\n}\n```\n\n### 예시 2: 복합 질문 (병렬 가능)\n질문: "이 지역 전세 시세와 매매 시세 모두 알려주고 비교 분석해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "전세 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "매매 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "전세/매매 시세 비교 분석",\n            "type": "comparison",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0", "task_1"],\n            "required_data": {\n                "lease_price": "task_0.result",\n                "sale_price": "task_1.result"\n            },\n            "estimated_time": 25\n        }\n    ],\n    "execution_mode": "mixed",\n    "parallel_groups": [["task_0", "task_1"], ["task_2"]],\n    "reasoning": "시세 조회는 독립적이므로 병렬 처리, 비교는 두 결과 필요"\n}\n```\n\n### 예시 3: 복합 질문 (3단계 이상)\n질문: "이 계약서 검토해서 위험한 부분 찾고 수정안 만들어서 최종 계약서 작성해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "계약서 내용 전체 검토",\n            "type": "review",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 30\n        },\n        {\n            "description": "위험 요소 및 문제점 분석",\n            "type": "analysis",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "estimated_time": 25\n        },\n        {\n            "description": "수정안 제안 생성",\n            "type": "generation",\n            "agent": "document_team",\n            "priority": 3,\n            "depends_on": ["task_1"],\n            "estimated_time": 20\n        },\n        {\n            "description": "최종 계약서 작성",\n            "type": "generation",\n            "agent": "document_team",\n            "priority": 4,\n            "depends_on": ["task_2"],\n            "estimated_time": 30\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "각 단계가 이전 결과에 의존하므로 순차 실행 필요"\n}\n```\n\n### 예시 4: 단순 질문 (분해 불필요)\n질문: "전세금 인상률 상한이 얼마야?"\n분해:\n```json\n{\n    "is_compound": false,\n    "sub_tasks": [\n        {\n            "description": "전세금 인상률 상한 법률 정보 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 15\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "단일 정보 조회 요청으로 분해 불필요"\n}\n```\n\n### 예시 5: 조건부 실행\n질문: "이 물건 시세 확인하고 적정가면 대출 상담도 받고 싶어"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "물건 시세 조회 및 적정성 평가",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 25\n        },\n        {\n            "description": "대출 상담 정보 제공",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "optional": true,\n            "context": {"condition": "if_reasonable_price"},\n            "estimated_time": 20\n        }\n    ],\n    "execution_mode": "conditional",\n    "reasoning": "시세 확인 결과에 따라 대출 상담 진행 여부 결정"\n}\n```\n\n### 예시 6: 상황 설명 + 해결책 요청 (핵심 패턴!)\n질문: "집주인이 전세금 3억을 10억으로 올려달래. 법적으로 어떻게 해야 해?"\n**CoT 분석**:\n1. 질문 분석: 상황 설명 + 해결책 요청\n2. 연결어: 없지만, "어떻게 해야" = 해결책 요청\n3. 의존성: 법률 확인 → 상황 분석 → 대응 방안\n4. 복합 여부: **YES** (해결책을 위해 여러 단계 필요)\n\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "전세금 인상 한도 관련 법률 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "3억→10억 인상의 법적 타당성 및 적정성 분석",\n            "type": "analysis",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "required_data": {"legal_limit": "task_0.result", "current": 300000000, "requested": 1000000000},\n            "estimated_time": 25\n        },\n        {\n            "description": "구체적 대응 방안 및 해결책 제시",\n            "type": "analysis",\n            "agent": "analysis_team",\n            "priority": 3,\n            "depends_on": ["task_1"],\n            "estimated_time": 20\n        }\n    ],\n    "execution_mode": "sequential",\n    "confidence": 0.95,\n    "reasoning": "상황 설명+해결책 요청 패턴. \'어떻게 해야\'는 단순 정보 조회가 아닌 종합 해결책 필요. 법률 조회 → 상황 분석 → 해결책 제시 3단계 순차 처리"\n}\n```\n\n## Chain-of-Thought 프로세스:\n\n1. **질문 분석**: 어떤 정보나 작업을 요구하는가?\n2. **연결어 확인**: "그리고", "또한", "해서", "한 후" 등이 있는가?\n3. **의존성 파악**: 어떤 작업이 다른 작업의 결과를 필요로 하는가?\n4. **병렬성 판단**: 독립적으로 실행 가능한 작업이 있는가?\n5. **최적화**: 불필요한 분해는 없는가?\n\n## 응답 형식 (JSON):\n\n{\n    "is_compound": true/false,\n    "sub_tasks": [\n        {\n            "description": "작업 설명",\n            "type": "작업 유형",\n            "agent": "담당 팀",\n            "priority": 우선순위 (1이 가장 높음),\n            "depends_on": ["선행 작업 ID 리스트"],\n            "required_data": {"필요한 데이터 매핑"},\n            "estimated_time": 예상 소요 시간(초),\n            "optional": true/false,\n            "context": {"추가 컨텍스트"}\n        }\n    ],\n    "execution_mode": "sequential/parallel/mixed/conditional",\n    "parallel_groups": [["병렬 실행 가능한 작업 ID 그룹"]],\n    "confidence": 0.0-1.0,\n    "reasoning": "분해 결정의 이유와 근거"\n}\n\n## 분해 가이드라인:\n\n1. **분해가 필요한 경우**:\n   - 여러 종류의 정보를 요청하는 경우\n   - 순차적 처리가 필요한 경우 (A의 결과로 B 수행)\n   - 서로 다른 팀의 전문성이 필요한 경우\n\n2. **분해가 불필요한 경우**:\n   - 단일 정보 조회\n   - 단순한 질문-답변\n   - 하나의 팀에서 완전히 처리 가능한 경우\n\n3. **병렬 처리 기준**:\n   - 서로 독립적인 정보 조회\n   - 의존성이 없는 분석 작업\n   - 동시에 진행해도 충돌하지 않는 작업\n\n4. **우선순위 설정**:\n   - 의존성이 없는 작업: priority 1\n   - 1차 의존 작업: priority 2\n   - 2차 의존 작업: priority 3\n   - 이런 식으로 증가\n\n현재 의도: 시세조회\n추출된 엔티티: None\n\n분석할 질문: 성동구 시세 알려주고 투자 수익률 계산해줘'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 16:05:06,466 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 16:05:06,466 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 16:05:06,466 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 16:05:06,466 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 16:05:06,466 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 16:05:06,467 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 16:05:09,554 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 07:05:09 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'2878'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'2901'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9927'), (b'x-ratelimit-remaining-tokens', b'197335'), (b'x-ratelimit-reset-requests', b'10m27.632s'), (b'x-ratelimit-reset-tokens', b'799ms'), (b'x-request-id', b'req_a10f8844a738409cbc272ddc7d41d98d'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b119748f73091-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 16:05:09,554 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 16:05:09,554 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 16:05:09,555 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 16:05:09,555 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 16:05:09,555 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 16:05:09,555 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 07:05:09 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '2878', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '2901', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9927', 'x-ratelimit-remaining-tokens': '197335', 'x-ratelimit-reset-requests': '10m27.632s', 'x-ratelimit-reset-tokens': '799ms', 'x-request-id': 'req_a10f8844a738409cbc272ddc7d41d98d', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b119748f73091-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 16:05:09,555 - openai._base_client - DEBUG - request_id: req_a10f8844a738409cbc272ddc7d41d98d
2025-10-05 16:05:09,556 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: query_decomposition | Model: gpt-4o-mini-2024-07-18 | Tokens: 2871 (prompt: 2693, completion: 178)
2025-10-05 16:05:09,556 - app.service_agent.cognitive_agents.query_decomposer - INFO - Successfully decomposed into 2 tasks
2025-10-05 16:05:09,556 - __main__ - INFO -   복합 질문: True
2025-10-05 16:05:09,556 - __main__ - INFO -   작업 수: 2
2025-10-05 16:05:09,556 - __main__ - INFO -   실행 모드: sequential
2025-10-05 16:05:09,556 - __main__ - INFO -     - task_0: 성동구 아파트 시세 조회 (search_team)
2025-10-05 16:05:09,556 - __main__ - INFO -     - task_1: 투자 수익률 계산 (analysis_team)
2025-10-05 16:05:09,556 - __main__ - INFO - 
[Step 3] Comprehensive Plan 생성...
2025-10-05 16:05:09,556 - app.service_agent.cognitive_agents.planning_agent - INFO - Creating comprehensive plan for query: 성동구 시세 알려주고 투자 수익률 계산해줘...
2025-10-05 16:05:09,556 - app.service_agent.cognitive_agents.planning_agent - INFO - Analyzing intent for query: 성동구 시세 알려주고 투자 수익률 계산해줘...
2025-10-05 16:05:09,556 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-7d4f8370-6643-49fb-a145-f457a6675b7b', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 의도 분석 전문가입니다.\n사용자의 질문을 정확히 이해하고, 어떤 종류의 도움이 필요한지 분류해야 합니다.\n\n## Chain-of-Thought 분석 프로세스\n\n질문을 분석할 때 다음 단계를 **순서대로** 따르세요:\n\n### 1단계: 질문 구조 파악\n- 단순 정보 요청인가? (예: "~이 뭐야?", "~알려줘")\n- 상황 설명이 포함되어 있는가? (배경, 현재 상태)\n- 구체적 수치나 데이터가 있는가? (금액, 비율, 기간 등)\n- 문제 해결을 요구하는가? (예: "어떻게 해야 해?", "방법 알려줘")\n\n### 2단계: 요청 유형 판단\n- **정보 확인형**: 사실, 개념, 규정 확인 → 검색만으로 충분\n- **평가/판단형**: "괜찮아?", "적절해?", "문제있어?" → 검색 + 분석 필요\n- **해결책 요청형**: "어떻게?", "방법?", "대처?" → 검색 + 분석 + 제안 필요\n- **비교/선택형**: "A vs B", "어느게 나아?" → 검색 + 분석(비교) 필요\n\n### 3단계: 복잡도 평가\n- **저**: 단일 개념/사실 확인 (예: "전세금 인상률 한도?")\n- **중**: 특정 상황 + 판단 (예: "3억을 5억으로 올려달래. 가능해?")\n- **고**: 복잡한 상황 + 여러 조건 + 해결책 (예: "10년 거주, 3억→10억 요구. 어떻게 해야 해?")\n\n### 4단계: 필요한 처리 결정\n- **검색만**: 정보 확인형 + 저복잡도\n- **검색+분석**: 평가/판단형 OR 중복잡도 OR 수치 비교 포함\n- **종합처리**: 해결책 요청형 OR 고복잡도 OR 여러 조건 동시 고려\n\n### 5단계: 최종 검증\n- 선택한 의도로 사용자 질문에 완전히 답변 가능한가?\n- 단순 정보 제공으로 끝나는가, 아니면 추가 분석/판단이 필요한가?\n- 상황 설명이 있으면서 "해결", "방법", "어떻게" 등이 있으면 → COMPREHENSIVE 고려\n\n## 중요: 복합 질문 처리\n복합적인 질문(여러 의도가 섞인 질문)의 경우, 가장 핵심적인 의도를 파악하되,\nsub_intents 필드에 부가적인 의도들도 함께 기록해주세요.\n\n**특히 주의**:\n- 법률 키워드가 있어도, "해결방법", "어떻게 해야" 같은 표현이 있으면 단순 LEGAL_CONSULT가 아닐 수 있음\n- 구체적 상황(금액, 기간 등) + 해결책 요구 = COMPREHENSIVE 또는 복합 의도로 분류\n\n## 분류 카테고리 설명:\n\n1. **LEGAL_CONSULT (법률상담)**\n   - 설명: 부동산 관련 법률, 권리, 의무에 대한 질문\n   - 예시:\n     * 단순: "전세금 5% 인상이 가능한가요?", "임대차계약 갱신 거부할 수 있나요?"\n     * 복합: "전세금 인상 가능한지 확인하고 법적 근거도 알려주세요"\n   - 키워드: 법, 전세, 임대, 보증금, 계약, 권리, 의무, 갱신, 임차인, 임대인, 법률, 규정, 조항\n   - 필요한 처리: 법률 데이터베이스 검색, 관련 법조항 찾기\n\n2. **MARKET_INQUIRY (시세조회)**\n   - 설명: 부동산 시장 가격, 시세, 거래 동향에 대한 질문\n   - 예시:\n     * 단순: "강남구 아파트 전세 시세 알려주세요", "서초동 매매가 얼마나 올랐나요?"\n     * 복합: "강남구 시세 확인하고 대출 가능 금액도 계산해줘"\n   - 키워드: 시세, 가격, 매매가, 전세가, 월세, 시장, 동향, 평균, 지역명, 상승률, 하락률\n   - 필요한 처리: 부동산 시세 데이터 조회, 지역별 가격 분석\n\n3. **LOAN_CONSULT (대출상담)**\n   - 설명: 주택담보대출, 전세자금대출 등 금융 관련 질문\n   - 예시:\n     * 단순: "전세자금대출 한도가 얼마인가요?", "LTV가 뭔가요?"\n     * 복합: "대출 한도 확인하고 금리 비교도 해주세요"\n   - 키워드: 대출, 금리, 한도, 조건, 상환, LTV, DTI, DSR, 담보, 금융, 은행\n   - 필요한 처리: 대출 상품 조회, 금리 정보 검색, 한도 계산\n\n4. **CONTRACT_CREATION (계약서작성)**\n   - 설명: 새로운 계약서나 문서를 작성해달라는 요청\n   - 예시:\n     * 단순: "임대차계약서 작성해주세요", "전세계약서 초안 만들어주세요"\n     * 복합: "계약서 작성하고 주의사항도 검토해주세요"\n   - 키워드: 작성, 만들, 생성, 초안, 계약서, 문서, 양식\n   - 필요한 처리: 문서 생성 에이전트 호출, 템플릿 기반 작성\n\n5. **CONTRACT_REVIEW (계약서검토)**\n   - 설명: 기존 계약서나 문서를 검토해달라는 요청\n   - 예시:\n     * 단순: "이 계약서 검토해주세요", "특약사항 문제없나요?"\n     * 복합: "계약서 검토하고 수정사항도 제안해주세요"\n   - 키워드: 검토, 확인, 점검, 리뷰, 분석해, 살펴봐, 체크\n   - 필요한 처리: 문서 분석, 위험 요소 식별, 개선사항 제안\n\n6. **COMPREHENSIVE (종합분석)**\n   - 설명: 여러 측면을 종합적으로 분석해달라는 요청, 또는 복잡한 상황에 대한 해결책 요청\n   - 예시:\n     * 단순: "이 물건 전체적으로 분석해주세요"\n     * 복합: "시세, 법률, 대출 모두 검토해서 종합 의견 주세요"\n     * 해결형: "10년 거주했는데 전세금 3억을 10억으로 올려달래. 어떻게 해야 해?"\n     * 상황+해결: "집주인이 계약 갱신 거부했어. 법적으로 어떻게 대응해야 할까?"\n   - 키워드: 종합, 전체, 모든, 전반적, 종합적, 평가, 분석, 어떻게, 방법, 해결, 대처\n   - 패턴: 구체적 상황 설명 + "어떻게/방법/해결" 요청\n   - 필요한 처리: 다중 데이터 소스 통합 분석, 상황 평가, 해결책 제시\n\n7. **RISK_ANALYSIS (리스크분석)**\n   - 설명: 위험 요소나 주의사항에 대한 질문\n   - 예시:\n     * 단순: "이 계약 위험한가요?", "주의할 점 알려주세요"\n     * 복합: "리스크 분석하고 대안도 제시해주세요"\n   - 키워드: 위험, 리스크, 주의, 문제점, 조심, 걱정, 우려\n   - 필요한 처리: 위험 요소 분석, 주의사항 추출\n\n8. **UNCLEAR (불분명)**\n   - 설명: 의도를 명확히 파악하기 어려운 질문\n   - 예시: "이거 좀 봐주세요", "어떻게 해야 할까요?", "도와주세요"\n   - 처리: 추가 질문으로 의도 명확화 필요\n\n9. **IRRELEVANT (무관)**\n   - 설명: 부동산과 전혀 관련 없는 질문\n   - 예시: "날씨 어때?", "저녁 뭐 먹지?", "주식 추천해줘"\n   - 처리: 부동산 관련 질문을 유도\n\n## 복합 질문 예시와 분석 (CoT 적용):\n\n### 예시 1: "강남구 아파트 시세 알려주고 전세자금대출 가능한지도 확인해줘"\n**CoT 분석**:\n1. 구조: 두 개의 요청 ("시세" + "대출")\n2. 유형: 정보 확인형 (둘 다)\n3. 복잡도: 중 (두 가지 독립적 조회)\n4. 필요 처리: 검색 + 계산/분석\n\n**결론**:\n- 주 의도: MARKET_INQUIRY (시세 조회가 먼저 필요)\n- 부가 의도: LOAN_CONSULT (대출 확인)\n- 분해: ["강남구 아파트 시세 조회", "전세자금대출 가능 여부 확인"]\n\n### 예시 2: "이 계약서 검토해서 위험한 부분 있는지 알려주고 수정 제안도 해줘"\n**CoT 분석**:\n1. 구조: 검토 + 위험 평가 + 수정안\n2. 유형: 평가/판단형 + 해결책 요청형\n3. 복잡도: 고 (3단계 처리)\n4. 필요 처리: 검토 + 분석 + 문서 생성\n\n**결론**:\n- 주 의도: CONTRACT_REVIEW (계약서 검토)\n- 부가 의도: RISK_ANALYSIS (위험 분석)\n- 분해: ["계약서 전체 검토", "위험 요소 식별", "수정사항 제안"]\n\n### 예시 3: "집주인이 짜증나, 10년 살았는데 전세금 3억을 10억으로 올려달래. 법적으로 해결방법 알려줘"\n**CoT 분석**:\n1. 구조: 상황 설명 (10년 거주, 3억→10억) + 해결책 요청\n2. 유형: 해결책 요청형 (단순 정보 X)\n3. 복잡도: 고 (구체적 상황 + 수치 비교 + 법률 + 대응방안)\n4. 필요 처리: 법률 검색 + 상황 분석 + 해결책 제시\n\n**결론**:\n- 주 의도: COMPREHENSIVE (복잡한 상황에 대한 종합 해결)\n- 부가 의도: LEGAL_CONSULT, RISK_ANALYSIS\n- 분해: ["전세금 인상 한도 법률 조회", "3억→10억 인상의 타당성 분석", "구체적 대응 방안 제시"]\n- **이유**: "법적으로"라는 키워드가 있지만, 단순 법률 확인이 아니라 구체적 상황에 대한 해결책을 요구하므로 COMPREHENSIVE\n\n### 예시 4: "전세금 인상률 상한이 얼마야?"\n**CoT 분석**:\n1. 구조: 단순 사실 확인\n2. 유형: 정보 확인형\n3. 복잡도: 저 (단일 개념)\n4. 필요 처리: 검색만\n\n**결론**:\n- 주 의도: LEGAL_CONSULT (법률 정보 조회)\n- 부가 의도: 없음\n- 분해: 필요 없음\n\n## 응답 형식 (JSON 형식으로 응답):\n\n```json\n{\n    "intent": "LEGAL_CONSULT",\n    "confidence": 0.9,\n    "keywords": ["전세금", "인상", "제한"],\n    "sub_intents": [],\n    "is_compound": false,\n    "decomposed_tasks": [],\n    "entities": {\n        "location": "강남구",\n        "price": "5억",\n        "contract_type": "전세",\n        "date": "2024년",\n        "area": "84㎡",\n        "action_verbs": ["확인", "검토"]\n    },\n    "reasoning": "전세금 인상에 대한 법률 질문이므로 LEGAL_CONSULT로 분류"\n}\n```\n\n응답 규칙:\n- intent: 위 9개 카테고리 중 하나 (대문자_언더스코어 형식)\n- confidence: 0.0~1.0 (0.8 이상이면 매우 확실, 0.5 미만이면 불확실)\n- keywords: 추출된 주요 키워드 목록\n- sub_intents: 복합 질문일 경우 부가적인 의도들\n- is_compound: 복합 질문 여부 (true/false)\n- decomposed_tasks: 복합 질문을 분해한 개별 작업들\n- entities: 추출된 엔티티 정보\n- reasoning: **반드시 CoT 5단계를 거쳐 분석한 과정을 포함** (구조 파악 → 유형 판단 → 복잡도 평가 → 필요 처리 → 최종 검증)\n\n## reasoning 작성 예시:\n"1단계(구조): 상황 설명(10년 거주, 3억→10억) + 해결책 요청 포함.\n2단계(유형): 해결책 요청형 - 단순 정보가 아닌 대응방안 필요.\n3단계(복잡도): 고 - 구체적 수치 비교와 복잡한 상황.\n4단계(처리): 법률 검색 + 상황 분석 + 해결책 제시 필요.\n5단계(검증): LEGAL_CONSULT만으로는 불충분, 종합적 분석 필요 → COMPREHENSIVE 선택"\n\n## 판단 가이드:\n- 여러 의도가 섞여있다면, 가장 주된 의도를 intent에, 나머지를 sub_intents에 기록\n- "그리고", "또한", "함께", "같이" 등의 연결어가 있으면 복합 질문일 가능성 높음\n- 법률 관련 키워드가 있으면 LEGAL_CONSULT 우선\n- 가격/시세 언급이 명확하면 MARKET_INQUIRY\n- 계약서라는 단어와 함께 "작성/만들기"가 있으면 CONTRACT_CREATION\n- 계약서라는 단어와 함께 "검토/확인"이 있으면 CONTRACT_REVIEW\n- 불확실하면 confidence를 낮게 설정하고 UNCLEAR 선택\n- 복합 질문은 is_compound를 true로 설정하고 개별 작업으로 분해\n\n분석할 질문: 성동구 시세 알려주고 투자 수익률 계산해줘'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 16:05:09,557 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 16:05:09,557 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 16:05:09,557 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 16:05:09,557 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 16:05:09,558 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 16:05:09,558 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 16:05:14,612 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 07:05:14 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'4851'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'4872'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9926'), (b'x-ratelimit-remaining-tokens', b'197241'), (b'x-ratelimit-reset-requests', b'10m33.181s'), (b'x-ratelimit-reset-tokens', b'827ms'), (b'x-request-id', b'req_89d46ddc99f0441ea3f2c97f7d64f19a'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b11aa9be03091-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 16:05:14,612 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 16:05:14,612 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 16:05:14,618 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 16:05:14,618 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 16:05:14,618 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 16:05:14,618 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 07:05:14 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '4851', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '4872', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9926', 'x-ratelimit-remaining-tokens': '197241', 'x-ratelimit-reset-requests': '10m33.181s', 'x-ratelimit-reset-tokens': '827ms', 'x-request-id': 'req_89d46ddc99f0441ea3f2c97f7d64f19a', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b11aa9be03091-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 16:05:14,619 - openai._base_client - DEBUG - request_id: req_89d46ddc99f0441ea3f2c97f7d64f19a
2025-10-05 16:05:14,619 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: intent_analysis | Model: gpt-4o-mini-2024-07-18 | Tokens: 3436 (prompt: 3184, completion: 252)
2025-10-05 16:05:14,619 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM Intent Analysis Result: {'intent': 'MARKET_INQUIRY', 'confidence': 0.85, 'keywords': ['성동구', '시세', '투자', '수익률'], 'sub_intents': ['LOAN_CONSULT'], 'is_compound': True, 'decomposed_tasks': ['성동구 시세 조회', '투자 수익률 계산'], 'entities': {'location': '성동구', 'action_verbs': ['알려주고', '계산해줘']}, 'reasoning': '1단계(구조): 두 개의 요청(시세 조회 + 투자 수익률 계산) 포함. 2단계(유형): 정보 확인형(시세) + 해결책 요청형(수익률 계산). 3단계(복잡도): 중 - 두 가지 독립적 조회 필요. 4단계(처리): 시세 데이터 검색 + 수익률 계산 필요. 5단계(검증): 주 의도는 시세 조회이므로 MARKET_INQUIRY로 분류, 부가 의도로 투자 수익률 계산 포함.'}
2025-10-05 16:05:14,619 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-aa03614b-ee98-4664-8370-7e1549d4504a', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 Agent 선택 전문가입니다.\n사용자의 요청에 가장 적합한 Agent/Team을 선택하는 것이 목표입니다.\n\n## 현재 상황\n\n**사용자 질문:** 성동구 시세 알려주고 투자 수익률 계산해줘\n**분석된 의도:** 시세조회\n**추출된 키워드:** [\'성동구\', \'시세\', \'투자\', \'수익률\']\n\n## 사용 가능한 Agent/Team 정보\n\n{\'search_team\': {\'name\': \'search_team\', \'capabilities\': \'법률 검색, 부동산 시세 조회, 대출 상품 검색\', \'tools\': [\'legal_search\', \'market_data\', \'loan_data\'], \'use_cases\': [\'법률 상담\', \'시세 조회\', \'대출 정보\']}, \'analysis_team\': {\'name\': \'analysis_team\', \'capabilities\': \'데이터 분석, 리스크 평가, 인사이트 생성, 추천\', \'tools\': [\'data_analyzer\', \'risk_evaluator\'], \'use_cases\': [\'시장 분석\', \'리스크 평가\', \'투자 분석\']}, \'document_team\': {\'name\': \'document_team\', \'capabilities\': \'계약서 작성, 문서 생성, 문서 검토\', \'tools\': [\'document_generator\', \'contract_reviewer\'], \'use_cases\': [\'계약서 작성\', \'문서 검토\']}}\n\n## Agent 역할 및 상세 가이드\n\n### 1. search_team (검색 팀)\n- **주요 기능**: 정보 검색 및 데이터 수집\n- **전문 분야**:\n  * 법률 정보 검색 (전세법, 임대차보호법, 부동산 관련 법규)\n  * 부동산 시세 조회 (매매가, 전세가, 월세, 실거래가)\n  * 대출 상품 정보 검색 (금리, 한도, 조건)\n  * 지역 정보 및 인프라 조회\n- **도구**: legal_search, market_data, loan_data\n- **적합한 작업**: 정보 조회, 데이터 수집, 법률 확인, 시세 파악\n- **예시**:\n  * "전세금 5% 인상 가능한가요?"\n  * "강남구 아파트 전세 시세"\n  * "전세자금대출 한도 얼마?"\n\n### 2. analysis_team (분석 팀)\n- **주요 기능**: 데이터 분석 및 평가\n- **전문 분야**:\n  * 시장 동향 분석 (상승률, 하락률, 추세)\n  * 리스크 평가 (계약, 투자 위험도)\n  * 투자 수익률 계산 (ROI, 월세 수익률)\n  * 대출 한도 및 조건 분석 (LTV, DTI, DSR)\n  * 비교 분석 (지역별, 상품별)\n- **도구**: data_analyzer, risk_evaluator, calculator\n- **적합한 작업**: 데이터 분석, 리스크 평가, 계산, 비교, 예측\n- **의존성**: 보통 search_team의 데이터가 필요\n- **예시**:\n  * "이 지역 투자 가치 분석해줘"\n  * "계약 리스크 평가해줘"\n  * "대출 가능 금액 계산해줘"\n\n### 3. document_team (문서 팀)\n- **주요 기능**: 문서 생성 및 관리\n- **전문 분야**:\n  * 계약서 작성 (임대차, 매매, 전세)\n  * 문서 템플릿 관리\n  * 특약사항 생성\n  * 계약서 수정안 작성\n  * 법률 문서 검토\n- **도구**: document_generator, contract_template, contract_reviewer\n- **적합한 작업**: 문서 작성, 계약서 생성, 문서 수정, 검토\n- **예시**:\n  * "임대차계약서 작성해줘"\n  * "특약사항 추가해줘"\n  * "계약서 수정안 만들어줘"\n\n## Chain-of-Thought Agent 선택 프로세스\n\n다음 단계를 **순서대로** 따라 최적의 Agent 조합을 선택하세요:\n\n### 1단계: 질문 요구사항 파악\n- 단순 정보 조회인가? → search_team만 필요\n- 판단/평가가 필요한가? → search + analysis 필요\n- 해결책 제시가 필요한가? → search + analysis 필요\n- 문서 생성이 필요한가? → document_team 추가\n\n### 2단계: 작업 복잡도 판단\n- **단순** (검색만): "~이 뭐야?", "~알려줘" → search_team\n- **중간** (검색+판단): "~괜찮아?", "~적절해?" → search + analysis\n- **복잡** (종합 해결): 구체적 상황 + "어떻게 해야 해?" → search + analysis\n\n### 3단계: 의존성 분석\n- 독립적 작업: 단일 팀으로 처리 가능\n- 순차적 의존: 이전 결과 필요 → 여러 팀 순서대로\n- 병렬 가능: 동시 조회 가능 → coordination: "parallel"\n\n### 4단계: 최종 검증\n- 선택한 팀들로 질문에 완전히 답변 가능한가?\n- 불필요한 팀이 포함되지 않았는가?\n- 순서가 논리적인가? (데이터 흐름 고려)\n\n### 중요 원칙:\n- **법률 키워드만으로 판단하지 말 것**: "법적으로 어떻게 해야 해?" = 법률 검색 + 분석 필요\n- **상황 설명 + 해결책 요청** = 반드시 analysis_team 포함\n- **구체적 수치 비교** (3억→10억 같은) = analysis_team 필요\n\n## 의도별 Agent 매핑 가이드 (기본 가이드 - CoT로 조정 가능)\n\n| 의도 (Intent) | 기본 조합 | 상황별 조정 |\n|--------------|-----------|-------------|\n| LEGAL_CONSULT | ["search_team"] | 해결책 요청시 → + analysis_team |\n| MARKET_INQUIRY | ["search_team"] | 비교/평가시 → + analysis_team |\n| LOAN_CONSULT | ["search_team", "analysis_team"] | 계산 필수 |\n| CONTRACT_CREATION | ["document_team"] | 검토 후 작성 → search + document |\n| CONTRACT_REVIEW | ["search_team", "analysis_team"] | 법률 검토 + 리스크 분석 |\n| COMPREHENSIVE | ["search_team", "analysis_team"] | **항상 분석 포함** |\n| RISK_ANALYSIS | ["analysis_team"] | 법률 근거 필요시 → search + analysis |\n| UNCLEAR | ["search_team", "analysis_team"] | 포괄적 대응 |\n\n**중요**: 위 매핑은 **기본 가이드**일 뿐입니다.\n실제 질문의 내용(CoT 분석 결과)에 따라 조정하세요!\n\n## 복합 질문 처리 예시 (CoT 적용)\n\n### 예시 1: 순차적 처리\n질문: "강남구 시세 확인하고 투자 가치 분석해줘"\n**CoT 분석**:\n1. 요구사항: 시세 조회 + 투자 가치 평가\n2. 복잡도: 중간 (검색 + 분석)\n3. 의존성: 시세 데이터 → 투자 분석 (순차)\n4. 검증: search만으로는 "투자 가치 평가" 불가능\n\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "1단계: 시세 조회+투자 평가 필요. 2단계: 중간 복잡도. 3단계: 순차 의존. 4단계: search로 시세 수집 후 analysis로 투자 가치 평가 필요",\n    "coordination": "sequential"\n}\n```\n\n### 예시 2: 단순 정보 조회\n질문: "전세금 인상률 한도가 얼마야?"\n**CoT 분석**:\n1. 요구사항: 단순 사실 확인\n2. 복잡도: 낮음 (정보 확인형)\n3. 의존성: 없음\n4. 검증: search_team만으로 충분\n\n```json\n{\n    "selected_agents": ["search_team"],\n    "reasoning": "1단계: 단순 정보 조회. 2단계: 저복잡도. 3단계: 독립적. 4단계: 법률 검색만으로 답변 가능",\n    "coordination": "single"\n}\n```\n\n### 예시 3: 해결책 요청 (핵심 예시!)\n질문: "집주인이 전세금 3억을 10억으로 올려달래. 법적으로 어떻게 해야 해?"\n의도: COMPREHENSIVE\n**CoT 분석**:\n1. 요구사항: 상황 설명 + 해결책 요청\n2. 복잡도: 높음 (구체적 상황 + 수치 비교)\n3. 의존성: 법률 확인 → 상황 분석 → 해결책 제시\n4. 검증: "법적으로"만 보고 search만 선택하면 불충분! 해결책 제시 필요\n\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "1단계: 법률 + 상황 분석 + 해결책 필요. 2단계: 고복잡도(3억→10억 비정상). 3단계: 순차(법률 확인 후 타당성 분석). 4단계: \'어떻게 해야\' = 단순 법률 조회 아님, 분석 필수",\n    "coordination": "sequential",\n    "confidence": 0.95\n}\n```\n\n## 응답 형식 (JSON)\n\n```json\n{\n    "selected_agents": ["선택된 agent/team 목록"],\n    "reasoning": "선택 이유를 구체적으로 설명. 각 Agent의 역할과 처리 순서 포함",\n    "coordination": "single/sequential/parallel/pipeline",\n    "dependencies": {"agent2": ["agent1"]},\n    "estimated_time": 30,\n    "confidence": 0.9\n}\n```\n\n## 선택 가이드라인\n\n1. **최소 Agent 원칙**: 가능한 적은 수의 Agent로 처리\n2. **전문성 우선**: 해당 작업에 가장 전문적인 Agent 선택\n3. **효율성 고려**: 병렬 처리 가능한 경우 명시\n4. **의존성 관리**: 데이터 흐름을 고려한 순서 지정\n5. **폴백 전략**: 불확실한 경우 ["search_team", "analysis_team"] 조합\n\n## 주의사항\n\n- selected_agents는 반드시 배열 형태\n- Agent 이름은 정확히: "search_team", "analysis_team", "document_team"\n- 최소 1개, 최대 3개 선택\n- 순서는 실행 우선순위 (앞에 있을수록 먼저 실행)\n- reasoning은 상세하고 논리적으로 작성\n- coordination 필드로 실행 방식 명시\n- 복합 질문의 경우 의존성 관계 명확히 표시'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 16:05:14,620 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 16:05:14,620 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 16:05:14,620 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 16:05:14,620 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 16:05:14,621 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 16:05:14,621 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 16:05:19,320 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 07:05:19 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'4492'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'4518'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9925'), (b'x-ratelimit-remaining-tokens', b'197885'), (b'x-ratelimit-reset-requests', b'10m45.398s'), (b'x-ratelimit-reset-tokens', b'634ms'), (b'x-request-id', b'req_a2d35717edec41959b91ca411f544dbe'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b11ca39ee3091-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 16:05:19,321 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 16:05:19,321 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 16:05:19,331 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 16:05:19,331 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 16:05:19,331 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 16:05:19,332 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 07:05:19 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '4492', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '4518', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9925', 'x-ratelimit-remaining-tokens': '197885', 'x-ratelimit-reset-requests': '10m45.398s', 'x-ratelimit-reset-tokens': '634ms', 'x-request-id': 'req_a2d35717edec41959b91ca411f544dbe', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b11ca39ee3091-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 16:05:19,332 - openai._base_client - DEBUG - request_id: req_a2d35717edec41959b91ca411f544dbe
2025-10-05 16:05:19,333 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: agent_selection | Model: gpt-4o-mini-2024-07-18 | Tokens: 2542 (prompt: 2365, completion: 177)
2025-10-05 16:05:19,333 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM agent selection reasoning: 1단계: 성동구 시세 조회와 투자 수익률 계산이 필요하므로, 시세 정보를 수집하기 위해 search_team이 필요하고, 수집된 데이터를 바탕으로 투자 수익률을 계산하기 위해 analysis_team이 필요합니다. 2단계: 중간 복잡도 (검색 + 분석). 3단계: 시세 데이터가 필요하므로 순차적으로 진행해야 합니다. 4단계: search_team으로 시세를 조회한 후, analysis_team으로 투자 수익률을 계산할 수 있습니다.
2025-10-05 16:05:19,333 - app.service_agent.cognitive_agents.planning_agent - INFO - ✅ Primary LLM selected agents: ['search_team', 'analysis_team']
2025-10-05 16:05:19,333 - app.service_agent.cognitive_agents.planning_agent - INFO - Intent analyzed: 시세조회 (confidence: 0.85)
2025-10-05 16:05:19,333 - app.service_agent.cognitive_agents.query_decomposer - INFO - Decomposing query: 성동구 시세 알려주고 투자 수익률 계산해줘...
2025-10-05 16:05:19,333 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-a606dd79-05b9-48a1-b4dd-4f8dc33379aa', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 질문 분해 전문가입니다.\n복잡한 사용자 질문을 독립적으로 처리 가능한 작업 단위로 분해하는 것이 목표입니다.\n\n## Chain-of-Thought 분해 프로세스:\n\n### 1단계: 복합 질문 여부 판단\n- 단순 정보 조회만 필요한가? → is_compound: false\n- **다음 중 하나라도 해당하면 is_compound: true**:\n  * "그리고", "그 다음", "한 후" 같은 연결어로 여러 요청 연결\n  * 명시적으로 2개 이상의 작업 요청 (예: "시세 확인하고 대출 계산해줘")\n  * 상황 설명 + 해결책 요청 (예: "3억→10억 올려달래. 어떻게 해야 해?")\n  * 해결책을 위해 여러 단계 처리 필요 (검색 → 분석 → 제안)\n\n### 2단계: 필요 작업 식별\n- 정보 수집이 필요한가? → search 작업\n- 평가/판단이 필요한가? → analysis 작업\n- 문서 생성이 필요한가? → generation 작업\n- **해결책 요청**인가? → search + analysis (최소 2개)\n\n### 3단계: 작업 순서 결정\n- 독립적 작업: 병렬 가능\n- 이전 결과 필요: 순차 실행 (depends_on 설정)\n\n## 중요 원칙:\n1. 각 작업은 하나의 명확한 목표를 가져야 합니다\n2. 작업 간 의존성을 명확히 파악해야 합니다\n3. 병렬 처리 가능한 작업은 구분해야 합니다\n4. **주의**: "어떻게 해야", "방법 알려줘" 같은 해결책 요청은 복합 질문!\n\n## 작업 유형 (type):\n- search: 정보 검색 (법률, 시세, 대출 정보 등)\n- analysis: 데이터 분석 (리스크 평가, 시장 분석 등)\n- generation: 문서 생성 (계약서 작성 등)\n- review: 검토/평가 (계약서 검토, 조건 확인 등)\n- calculation: 계산/산출 (대출 한도, 세금 등)\n- comparison: 비교 분석 (여러 옵션 비교)\n\n## 담당 팀 (agent):\n- search_team: 법률, 시세, 대출 정보 검색\n- analysis_team: 데이터 분석, 리스크 평가, 계산\n- document_team: 문서 생성, 계약서 작성\n\n## 학습 예시:\n\n### 예시 1: 복합 질문 (순차적)\n질문: "강남구 아파트 시세 확인하고 대출 가능 금액 계산해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "강남구 아파트 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "대출 가능 금액 계산",\n            "type": "calculation",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "required_data": {"price": "task_0.result.price"},\n            "estimated_time": 15\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "시세 정보가 있어야 대출 금액 계산이 가능하므로 순차 실행"\n}\n```\n\n### 예시 2: 복합 질문 (병렬 가능)\n질문: "이 지역 전세 시세와 매매 시세 모두 알려주고 비교 분석해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "전세 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "매매 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "전세/매매 시세 비교 분석",\n            "type": "comparison",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0", "task_1"],\n            "required_data": {\n                "lease_price": "task_0.result",\n                "sale_price": "task_1.result"\n            },\n            "estimated_time": 25\n        }\n    ],\n    "execution_mode": "mixed",\n    "parallel_groups": [["task_0", "task_1"], ["task_2"]],\n    "reasoning": "시세 조회는 독립적이므로 병렬 처리, 비교는 두 결과 필요"\n}\n```\n\n### 예시 3: 복합 질문 (3단계 이상)\n질문: "이 계약서 검토해서 위험한 부분 찾고 수정안 만들어서 최종 계약서 작성해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "계약서 내용 전체 검토",\n            "type": "review",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 30\n        },\n        {\n            "description": "위험 요소 및 문제점 분석",\n            "type": "analysis",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "estimated_time": 25\n        },\n        {\n            "description": "수정안 제안 생성",\n            "type": "generation",\n            "agent": "document_team",\n            "priority": 3,\n            "depends_on": ["task_1"],\n            "estimated_time": 20\n        },\n        {\n            "description": "최종 계약서 작성",\n            "type": "generation",\n            "agent": "document_team",\n            "priority": 4,\n            "depends_on": ["task_2"],\n            "estimated_time": 30\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "각 단계가 이전 결과에 의존하므로 순차 실행 필요"\n}\n```\n\n### 예시 4: 단순 질문 (분해 불필요)\n질문: "전세금 인상률 상한이 얼마야?"\n분해:\n```json\n{\n    "is_compound": false,\n    "sub_tasks": [\n        {\n            "description": "전세금 인상률 상한 법률 정보 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 15\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "단일 정보 조회 요청으로 분해 불필요"\n}\n```\n\n### 예시 5: 조건부 실행\n질문: "이 물건 시세 확인하고 적정가면 대출 상담도 받고 싶어"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "물건 시세 조회 및 적정성 평가",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 25\n        },\n        {\n            "description": "대출 상담 정보 제공",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "optional": true,\n            "context": {"condition": "if_reasonable_price"},\n            "estimated_time": 20\n        }\n    ],\n    "execution_mode": "conditional",\n    "reasoning": "시세 확인 결과에 따라 대출 상담 진행 여부 결정"\n}\n```\n\n### 예시 6: 상황 설명 + 해결책 요청 (핵심 패턴!)\n질문: "집주인이 전세금 3억을 10억으로 올려달래. 법적으로 어떻게 해야 해?"\n**CoT 분석**:\n1. 질문 분석: 상황 설명 + 해결책 요청\n2. 연결어: 없지만, "어떻게 해야" = 해결책 요청\n3. 의존성: 법률 확인 → 상황 분석 → 대응 방안\n4. 복합 여부: **YES** (해결책을 위해 여러 단계 필요)\n\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "전세금 인상 한도 관련 법률 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "3억→10억 인상의 법적 타당성 및 적정성 분석",\n            "type": "analysis",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "required_data": {"legal_limit": "task_0.result", "current": 300000000, "requested": 1000000000},\n            "estimated_time": 25\n        },\n        {\n            "description": "구체적 대응 방안 및 해결책 제시",\n            "type": "analysis",\n            "agent": "analysis_team",\n            "priority": 3,\n            "depends_on": ["task_1"],\n            "estimated_time": 20\n        }\n    ],\n    "execution_mode": "sequential",\n    "confidence": 0.95,\n    "reasoning": "상황 설명+해결책 요청 패턴. \'어떻게 해야\'는 단순 정보 조회가 아닌 종합 해결책 필요. 법률 조회 → 상황 분석 → 해결책 제시 3단계 순차 처리"\n}\n```\n\n## Chain-of-Thought 프로세스:\n\n1. **질문 분석**: 어떤 정보나 작업을 요구하는가?\n2. **연결어 확인**: "그리고", "또한", "해서", "한 후" 등이 있는가?\n3. **의존성 파악**: 어떤 작업이 다른 작업의 결과를 필요로 하는가?\n4. **병렬성 판단**: 독립적으로 실행 가능한 작업이 있는가?\n5. **최적화**: 불필요한 분해는 없는가?\n\n## 응답 형식 (JSON):\n\n{\n    "is_compound": true/false,\n    "sub_tasks": [\n        {\n            "description": "작업 설명",\n            "type": "작업 유형",\n            "agent": "담당 팀",\n            "priority": 우선순위 (1이 가장 높음),\n            "depends_on": ["선행 작업 ID 리스트"],\n            "required_data": {"필요한 데이터 매핑"},\n            "estimated_time": 예상 소요 시간(초),\n            "optional": true/false,\n            "context": {"추가 컨텍스트"}\n        }\n    ],\n    "execution_mode": "sequential/parallel/mixed/conditional",\n    "parallel_groups": [["병렬 실행 가능한 작업 ID 그룹"]],\n    "confidence": 0.0-1.0,\n    "reasoning": "분해 결정의 이유와 근거"\n}\n\n## 분해 가이드라인:\n\n1. **분해가 필요한 경우**:\n   - 여러 종류의 정보를 요청하는 경우\n   - 순차적 처리가 필요한 경우 (A의 결과로 B 수행)\n   - 서로 다른 팀의 전문성이 필요한 경우\n\n2. **분해가 불필요한 경우**:\n   - 단일 정보 조회\n   - 단순한 질문-답변\n   - 하나의 팀에서 완전히 처리 가능한 경우\n\n3. **병렬 처리 기준**:\n   - 서로 독립적인 정보 조회\n   - 의존성이 없는 분석 작업\n   - 동시에 진행해도 충돌하지 않는 작업\n\n4. **우선순위 설정**:\n   - 의존성이 없는 작업: priority 1\n   - 1차 의존 작업: priority 2\n   - 2차 의존 작업: priority 3\n   - 이런 식으로 증가\n\n현재 의도: 시세조회\n추출된 엔티티: {\'location\': \'성동구\', \'action_verbs\': [\'알려주고\', \'계산해줘\']}\n\n분석할 질문: 성동구 시세 알려주고 투자 수익률 계산해줘'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 16:05:19,334 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 16:05:19,334 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 16:05:19,334 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 16:05:19,334 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 16:05:19,334 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 16:05:19,334 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 16:05:22,224 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 07:05:22 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'2682'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'2695'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9924'), (b'x-ratelimit-remaining-tokens', b'197317'), (b'x-ratelimit-reset-requests', b'10m49.314s'), (b'x-ratelimit-reset-tokens', b'804ms'), (b'x-request-id', b'req_84f8a8713fc04e649f33c9f86fcd2dd1'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b11e7ae2c3091-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 16:05:22,225 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 16:05:22,225 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 16:05:22,229 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 16:05:22,229 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 16:05:22,229 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 16:05:22,229 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 07:05:22 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '2682', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '2695', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9924', 'x-ratelimit-remaining-tokens': '197317', 'x-ratelimit-reset-requests': '10m49.314s', 'x-ratelimit-reset-tokens': '804ms', 'x-request-id': 'req_84f8a8713fc04e649f33c9f86fcd2dd1', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b11e7ae2c3091-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 16:05:22,229 - openai._base_client - DEBUG - request_id: req_84f8a8713fc04e649f33c9f86fcd2dd1
2025-10-05 16:05:22,229 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: query_decomposition | Model: gpt-4o-mini-2024-07-18 | Tokens: 2893 (prompt: 2717, completion: 176)
2025-10-05 16:05:22,229 - app.service_agent.cognitive_agents.query_decomposer - INFO - Successfully decomposed into 2 tasks
2025-10-05 16:05:22,229 - app.service_agent.cognitive_agents.planning_agent - INFO - Query decomposed into 2 tasks
2025-10-05 16:05:22,229 - app.service_agent.cognitive_agents.planning_agent - WARNING - Plan validation errors: ["Agent 'search_team' not found in registry", "Agent 'analysis_team' depends on missing 'task_0'", "Agent 'analysis_team' not found in registry"]
2025-10-05 16:05:22,230 - app.service_agent.cognitive_agents.planning_agent - INFO - Optimizing execution plan
2025-10-05 16:05:22,230 - app.service_agent.cognitive_agents.planning_agent - INFO - Comprehensive plan created: Intent: 시세조회 (confidence: 0.85) | Strategy: sequential | Agents: search_team, analysis_team | Estimated time: 35.0s
2025-10-05 16:05:22,230 - __main__ - INFO -   전략: sequential
2025-10-05 16:05:22,230 - __main__ - INFO -   단계 수: 2
2025-10-05 16:05:22,230 - __main__ - INFO - 
✓ 테스트 성공 (소요시간: 24.25초)
2025-10-05 16:05:22,230 - __main__ - INFO - 
================================================================================
2025-10-05 16:05:22,230 - __main__ - INFO - [39] 복합 질문 테스트: D019
2025-10-05 16:05:22,230 - __main__ - INFO - 질문: 임대차 계약 해지 조건 확인하고 위약금 계산해줘
2025-10-05 16:05:22,230 - __main__ - INFO - ================================================================================
2025-10-05 16:05:22,230 - __main__ - INFO - 
[Step 1] Intent 분석...
2025-10-05 16:05:22,230 - app.service_agent.cognitive_agents.planning_agent - INFO - Analyzing intent for query: 임대차 계약 해지 조건 확인하고 위약금 계산해줘...
2025-10-05 16:05:22,230 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-023433a6-2474-4724-891c-30d076d12456', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 의도 분석 전문가입니다.\n사용자의 질문을 정확히 이해하고, 어떤 종류의 도움이 필요한지 분류해야 합니다.\n\n## Chain-of-Thought 분석 프로세스\n\n질문을 분석할 때 다음 단계를 **순서대로** 따르세요:\n\n### 1단계: 질문 구조 파악\n- 단순 정보 요청인가? (예: "~이 뭐야?", "~알려줘")\n- 상황 설명이 포함되어 있는가? (배경, 현재 상태)\n- 구체적 수치나 데이터가 있는가? (금액, 비율, 기간 등)\n- 문제 해결을 요구하는가? (예: "어떻게 해야 해?", "방법 알려줘")\n\n### 2단계: 요청 유형 판단\n- **정보 확인형**: 사실, 개념, 규정 확인 → 검색만으로 충분\n- **평가/판단형**: "괜찮아?", "적절해?", "문제있어?" → 검색 + 분석 필요\n- **해결책 요청형**: "어떻게?", "방법?", "대처?" → 검색 + 분석 + 제안 필요\n- **비교/선택형**: "A vs B", "어느게 나아?" → 검색 + 분석(비교) 필요\n\n### 3단계: 복잡도 평가\n- **저**: 단일 개념/사실 확인 (예: "전세금 인상률 한도?")\n- **중**: 특정 상황 + 판단 (예: "3억을 5억으로 올려달래. 가능해?")\n- **고**: 복잡한 상황 + 여러 조건 + 해결책 (예: "10년 거주, 3억→10억 요구. 어떻게 해야 해?")\n\n### 4단계: 필요한 처리 결정\n- **검색만**: 정보 확인형 + 저복잡도\n- **검색+분석**: 평가/판단형 OR 중복잡도 OR 수치 비교 포함\n- **종합처리**: 해결책 요청형 OR 고복잡도 OR 여러 조건 동시 고려\n\n### 5단계: 최종 검증\n- 선택한 의도로 사용자 질문에 완전히 답변 가능한가?\n- 단순 정보 제공으로 끝나는가, 아니면 추가 분석/판단이 필요한가?\n- 상황 설명이 있으면서 "해결", "방법", "어떻게" 등이 있으면 → COMPREHENSIVE 고려\n\n## 중요: 복합 질문 처리\n복합적인 질문(여러 의도가 섞인 질문)의 경우, 가장 핵심적인 의도를 파악하되,\nsub_intents 필드에 부가적인 의도들도 함께 기록해주세요.\n\n**특히 주의**:\n- 법률 키워드가 있어도, "해결방법", "어떻게 해야" 같은 표현이 있으면 단순 LEGAL_CONSULT가 아닐 수 있음\n- 구체적 상황(금액, 기간 등) + 해결책 요구 = COMPREHENSIVE 또는 복합 의도로 분류\n\n## 분류 카테고리 설명:\n\n1. **LEGAL_CONSULT (법률상담)**\n   - 설명: 부동산 관련 법률, 권리, 의무에 대한 질문\n   - 예시:\n     * 단순: "전세금 5% 인상이 가능한가요?", "임대차계약 갱신 거부할 수 있나요?"\n     * 복합: "전세금 인상 가능한지 확인하고 법적 근거도 알려주세요"\n   - 키워드: 법, 전세, 임대, 보증금, 계약, 권리, 의무, 갱신, 임차인, 임대인, 법률, 규정, 조항\n   - 필요한 처리: 법률 데이터베이스 검색, 관련 법조항 찾기\n\n2. **MARKET_INQUIRY (시세조회)**\n   - 설명: 부동산 시장 가격, 시세, 거래 동향에 대한 질문\n   - 예시:\n     * 단순: "강남구 아파트 전세 시세 알려주세요", "서초동 매매가 얼마나 올랐나요?"\n     * 복합: "강남구 시세 확인하고 대출 가능 금액도 계산해줘"\n   - 키워드: 시세, 가격, 매매가, 전세가, 월세, 시장, 동향, 평균, 지역명, 상승률, 하락률\n   - 필요한 처리: 부동산 시세 데이터 조회, 지역별 가격 분석\n\n3. **LOAN_CONSULT (대출상담)**\n   - 설명: 주택담보대출, 전세자금대출 등 금융 관련 질문\n   - 예시:\n     * 단순: "전세자금대출 한도가 얼마인가요?", "LTV가 뭔가요?"\n     * 복합: "대출 한도 확인하고 금리 비교도 해주세요"\n   - 키워드: 대출, 금리, 한도, 조건, 상환, LTV, DTI, DSR, 담보, 금융, 은행\n   - 필요한 처리: 대출 상품 조회, 금리 정보 검색, 한도 계산\n\n4. **CONTRACT_CREATION (계약서작성)**\n   - 설명: 새로운 계약서나 문서를 작성해달라는 요청\n   - 예시:\n     * 단순: "임대차계약서 작성해주세요", "전세계약서 초안 만들어주세요"\n     * 복합: "계약서 작성하고 주의사항도 검토해주세요"\n   - 키워드: 작성, 만들, 생성, 초안, 계약서, 문서, 양식\n   - 필요한 처리: 문서 생성 에이전트 호출, 템플릿 기반 작성\n\n5. **CONTRACT_REVIEW (계약서검토)**\n   - 설명: 기존 계약서나 문서를 검토해달라는 요청\n   - 예시:\n     * 단순: "이 계약서 검토해주세요", "특약사항 문제없나요?"\n     * 복합: "계약서 검토하고 수정사항도 제안해주세요"\n   - 키워드: 검토, 확인, 점검, 리뷰, 분석해, 살펴봐, 체크\n   - 필요한 처리: 문서 분석, 위험 요소 식별, 개선사항 제안\n\n6. **COMPREHENSIVE (종합분석)**\n   - 설명: 여러 측면을 종합적으로 분석해달라는 요청, 또는 복잡한 상황에 대한 해결책 요청\n   - 예시:\n     * 단순: "이 물건 전체적으로 분석해주세요"\n     * 복합: "시세, 법률, 대출 모두 검토해서 종합 의견 주세요"\n     * 해결형: "10년 거주했는데 전세금 3억을 10억으로 올려달래. 어떻게 해야 해?"\n     * 상황+해결: "집주인이 계약 갱신 거부했어. 법적으로 어떻게 대응해야 할까?"\n   - 키워드: 종합, 전체, 모든, 전반적, 종합적, 평가, 분석, 어떻게, 방법, 해결, 대처\n   - 패턴: 구체적 상황 설명 + "어떻게/방법/해결" 요청\n   - 필요한 처리: 다중 데이터 소스 통합 분석, 상황 평가, 해결책 제시\n\n7. **RISK_ANALYSIS (리스크분석)**\n   - 설명: 위험 요소나 주의사항에 대한 질문\n   - 예시:\n     * 단순: "이 계약 위험한가요?", "주의할 점 알려주세요"\n     * 복합: "리스크 분석하고 대안도 제시해주세요"\n   - 키워드: 위험, 리스크, 주의, 문제점, 조심, 걱정, 우려\n   - 필요한 처리: 위험 요소 분석, 주의사항 추출\n\n8. **UNCLEAR (불분명)**\n   - 설명: 의도를 명확히 파악하기 어려운 질문\n   - 예시: "이거 좀 봐주세요", "어떻게 해야 할까요?", "도와주세요"\n   - 처리: 추가 질문으로 의도 명확화 필요\n\n9. **IRRELEVANT (무관)**\n   - 설명: 부동산과 전혀 관련 없는 질문\n   - 예시: "날씨 어때?", "저녁 뭐 먹지?", "주식 추천해줘"\n   - 처리: 부동산 관련 질문을 유도\n\n## 복합 질문 예시와 분석 (CoT 적용):\n\n### 예시 1: "강남구 아파트 시세 알려주고 전세자금대출 가능한지도 확인해줘"\n**CoT 분석**:\n1. 구조: 두 개의 요청 ("시세" + "대출")\n2. 유형: 정보 확인형 (둘 다)\n3. 복잡도: 중 (두 가지 독립적 조회)\n4. 필요 처리: 검색 + 계산/분석\n\n**결론**:\n- 주 의도: MARKET_INQUIRY (시세 조회가 먼저 필요)\n- 부가 의도: LOAN_CONSULT (대출 확인)\n- 분해: ["강남구 아파트 시세 조회", "전세자금대출 가능 여부 확인"]\n\n### 예시 2: "이 계약서 검토해서 위험한 부분 있는지 알려주고 수정 제안도 해줘"\n**CoT 분석**:\n1. 구조: 검토 + 위험 평가 + 수정안\n2. 유형: 평가/판단형 + 해결책 요청형\n3. 복잡도: 고 (3단계 처리)\n4. 필요 처리: 검토 + 분석 + 문서 생성\n\n**결론**:\n- 주 의도: CONTRACT_REVIEW (계약서 검토)\n- 부가 의도: RISK_ANALYSIS (위험 분석)\n- 분해: ["계약서 전체 검토", "위험 요소 식별", "수정사항 제안"]\n\n### 예시 3: "집주인이 짜증나, 10년 살았는데 전세금 3억을 10억으로 올려달래. 법적으로 해결방법 알려줘"\n**CoT 분석**:\n1. 구조: 상황 설명 (10년 거주, 3억→10억) + 해결책 요청\n2. 유형: 해결책 요청형 (단순 정보 X)\n3. 복잡도: 고 (구체적 상황 + 수치 비교 + 법률 + 대응방안)\n4. 필요 처리: 법률 검색 + 상황 분석 + 해결책 제시\n\n**결론**:\n- 주 의도: COMPREHENSIVE (복잡한 상황에 대한 종합 해결)\n- 부가 의도: LEGAL_CONSULT, RISK_ANALYSIS\n- 분해: ["전세금 인상 한도 법률 조회", "3억→10억 인상의 타당성 분석", "구체적 대응 방안 제시"]\n- **이유**: "법적으로"라는 키워드가 있지만, 단순 법률 확인이 아니라 구체적 상황에 대한 해결책을 요구하므로 COMPREHENSIVE\n\n### 예시 4: "전세금 인상률 상한이 얼마야?"\n**CoT 분석**:\n1. 구조: 단순 사실 확인\n2. 유형: 정보 확인형\n3. 복잡도: 저 (단일 개념)\n4. 필요 처리: 검색만\n\n**결론**:\n- 주 의도: LEGAL_CONSULT (법률 정보 조회)\n- 부가 의도: 없음\n- 분해: 필요 없음\n\n## 응답 형식 (JSON 형식으로 응답):\n\n```json\n{\n    "intent": "LEGAL_CONSULT",\n    "confidence": 0.9,\n    "keywords": ["전세금", "인상", "제한"],\n    "sub_intents": [],\n    "is_compound": false,\n    "decomposed_tasks": [],\n    "entities": {\n        "location": "강남구",\n        "price": "5억",\n        "contract_type": "전세",\n        "date": "2024년",\n        "area": "84㎡",\n        "action_verbs": ["확인", "검토"]\n    },\n    "reasoning": "전세금 인상에 대한 법률 질문이므로 LEGAL_CONSULT로 분류"\n}\n```\n\n응답 규칙:\n- intent: 위 9개 카테고리 중 하나 (대문자_언더스코어 형식)\n- confidence: 0.0~1.0 (0.8 이상이면 매우 확실, 0.5 미만이면 불확실)\n- keywords: 추출된 주요 키워드 목록\n- sub_intents: 복합 질문일 경우 부가적인 의도들\n- is_compound: 복합 질문 여부 (true/false)\n- decomposed_tasks: 복합 질문을 분해한 개별 작업들\n- entities: 추출된 엔티티 정보\n- reasoning: **반드시 CoT 5단계를 거쳐 분석한 과정을 포함** (구조 파악 → 유형 판단 → 복잡도 평가 → 필요 처리 → 최종 검증)\n\n## reasoning 작성 예시:\n"1단계(구조): 상황 설명(10년 거주, 3억→10억) + 해결책 요청 포함.\n2단계(유형): 해결책 요청형 - 단순 정보가 아닌 대응방안 필요.\n3단계(복잡도): 고 - 구체적 수치 비교와 복잡한 상황.\n4단계(처리): 법률 검색 + 상황 분석 + 해결책 제시 필요.\n5단계(검증): LEGAL_CONSULT만으로는 불충분, 종합적 분석 필요 → COMPREHENSIVE 선택"\n\n## 판단 가이드:\n- 여러 의도가 섞여있다면, 가장 주된 의도를 intent에, 나머지를 sub_intents에 기록\n- "그리고", "또한", "함께", "같이" 등의 연결어가 있으면 복합 질문일 가능성 높음\n- 법률 관련 키워드가 있으면 LEGAL_CONSULT 우선\n- 가격/시세 언급이 명확하면 MARKET_INQUIRY\n- 계약서라는 단어와 함께 "작성/만들기"가 있으면 CONTRACT_CREATION\n- 계약서라는 단어와 함께 "검토/확인"이 있으면 CONTRACT_REVIEW\n- 불확실하면 confidence를 낮게 설정하고 UNCLEAR 선택\n- 복합 질문은 is_compound를 true로 설정하고 개별 작업으로 분해\n\n분석할 질문: 임대차 계약 해지 조건 확인하고 위약금 계산해줘'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 16:05:22,231 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 16:05:22,231 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 16:05:22,231 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 16:05:22,231 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 16:05:22,231 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 16:05:22,231 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 16:05:27,806 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 07:05:27 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'5357'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'5384'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9924'), (b'x-ratelimit-remaining-tokens', b'197239'), (b'x-ratelimit-reset-requests', b'10m55.062s'), (b'x-ratelimit-reset-tokens', b'828ms'), (b'x-request-id', b'req_3183f69fd0284af885b73cda98fe5457'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b11f9c8073091-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 16:05:27,806 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 16:05:27,806 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 16:05:27,812 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 16:05:27,812 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 16:05:27,812 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 16:05:27,812 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 07:05:27 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '5357', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '5384', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9924', 'x-ratelimit-remaining-tokens': '197239', 'x-ratelimit-reset-requests': '10m55.062s', 'x-ratelimit-reset-tokens': '828ms', 'x-request-id': 'req_3183f69fd0284af885b73cda98fe5457', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b11f9c8073091-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 16:05:27,812 - openai._base_client - DEBUG - request_id: req_3183f69fd0284af885b73cda98fe5457
2025-10-05 16:05:27,812 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: intent_analysis | Model: gpt-4o-mini-2024-07-18 | Tokens: 3457 (prompt: 3184, completion: 273)
2025-10-05 16:05:27,812 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM Intent Analysis Result: {'intent': 'COMPREHENSIVE', 'confidence': 0.85, 'keywords': ['임대차', '계약', '해지', '위약금', '조건'], 'sub_intents': ['LEGAL_CONSULT', 'LOAN_CONSULT'], 'is_compound': True, 'decomposed_tasks': ['임대차 계약 해지 조건 확인', '위약금 계산'], 'entities': {'contract_type': '임대차 계약', 'action_verbs': ['확인', '계산']}, 'reasoning': '1단계(구조): 임대차 계약 해지 조건 확인 + 위약금 계산 요청 포함. 2단계(유형): 해결책 요청형 - 단순 정보가 아닌 구체적인 계산과 조건 확인 필요. 3단계(복잡도): 중 - 계약 해지 조건과 위약금 계산이 포함된 복합적인 요청. 4단계(처리): 계약 해지 조건 법률 검색 + 위약금 계산 필요. 5단계(검증): LEGAL_CONSULT와 LOAN_CONSULT가 모두 필요하므로 COMPREHENSIVE로 분류.'}
2025-10-05 16:05:27,813 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-62017d15-2b9c-4b85-af51-01807f9bacda', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 Agent 선택 전문가입니다.\n사용자의 요청에 가장 적합한 Agent/Team을 선택하는 것이 목표입니다.\n\n## 현재 상황\n\n**사용자 질문:** 임대차 계약 해지 조건 확인하고 위약금 계산해줘\n**분석된 의도:** 종합분석\n**추출된 키워드:** [\'임대차\', \'계약\', \'해지\', \'위약금\', \'조건\']\n\n## 사용 가능한 Agent/Team 정보\n\n{\'search_team\': {\'name\': \'search_team\', \'capabilities\': \'법률 검색, 부동산 시세 조회, 대출 상품 검색\', \'tools\': [\'legal_search\', \'market_data\', \'loan_data\'], \'use_cases\': [\'법률 상담\', \'시세 조회\', \'대출 정보\']}, \'analysis_team\': {\'name\': \'analysis_team\', \'capabilities\': \'데이터 분석, 리스크 평가, 인사이트 생성, 추천\', \'tools\': [\'data_analyzer\', \'risk_evaluator\'], \'use_cases\': [\'시장 분석\', \'리스크 평가\', \'투자 분석\']}, \'document_team\': {\'name\': \'document_team\', \'capabilities\': \'계약서 작성, 문서 생성, 문서 검토\', \'tools\': [\'document_generator\', \'contract_reviewer\'], \'use_cases\': [\'계약서 작성\', \'문서 검토\']}}\n\n## Agent 역할 및 상세 가이드\n\n### 1. search_team (검색 팀)\n- **주요 기능**: 정보 검색 및 데이터 수집\n- **전문 분야**:\n  * 법률 정보 검색 (전세법, 임대차보호법, 부동산 관련 법규)\n  * 부동산 시세 조회 (매매가, 전세가, 월세, 실거래가)\n  * 대출 상품 정보 검색 (금리, 한도, 조건)\n  * 지역 정보 및 인프라 조회\n- **도구**: legal_search, market_data, loan_data\n- **적합한 작업**: 정보 조회, 데이터 수집, 법률 확인, 시세 파악\n- **예시**:\n  * "전세금 5% 인상 가능한가요?"\n  * "강남구 아파트 전세 시세"\n  * "전세자금대출 한도 얼마?"\n\n### 2. analysis_team (분석 팀)\n- **주요 기능**: 데이터 분석 및 평가\n- **전문 분야**:\n  * 시장 동향 분석 (상승률, 하락률, 추세)\n  * 리스크 평가 (계약, 투자 위험도)\n  * 투자 수익률 계산 (ROI, 월세 수익률)\n  * 대출 한도 및 조건 분석 (LTV, DTI, DSR)\n  * 비교 분석 (지역별, 상품별)\n- **도구**: data_analyzer, risk_evaluator, calculator\n- **적합한 작업**: 데이터 분석, 리스크 평가, 계산, 비교, 예측\n- **의존성**: 보통 search_team의 데이터가 필요\n- **예시**:\n  * "이 지역 투자 가치 분석해줘"\n  * "계약 리스크 평가해줘"\n  * "대출 가능 금액 계산해줘"\n\n### 3. document_team (문서 팀)\n- **주요 기능**: 문서 생성 및 관리\n- **전문 분야**:\n  * 계약서 작성 (임대차, 매매, 전세)\n  * 문서 템플릿 관리\n  * 특약사항 생성\n  * 계약서 수정안 작성\n  * 법률 문서 검토\n- **도구**: document_generator, contract_template, contract_reviewer\n- **적합한 작업**: 문서 작성, 계약서 생성, 문서 수정, 검토\n- **예시**:\n  * "임대차계약서 작성해줘"\n  * "특약사항 추가해줘"\n  * "계약서 수정안 만들어줘"\n\n## Chain-of-Thought Agent 선택 프로세스\n\n다음 단계를 **순서대로** 따라 최적의 Agent 조합을 선택하세요:\n\n### 1단계: 질문 요구사항 파악\n- 단순 정보 조회인가? → search_team만 필요\n- 판단/평가가 필요한가? → search + analysis 필요\n- 해결책 제시가 필요한가? → search + analysis 필요\n- 문서 생성이 필요한가? → document_team 추가\n\n### 2단계: 작업 복잡도 판단\n- **단순** (검색만): "~이 뭐야?", "~알려줘" → search_team\n- **중간** (검색+판단): "~괜찮아?", "~적절해?" → search + analysis\n- **복잡** (종합 해결): 구체적 상황 + "어떻게 해야 해?" → search + analysis\n\n### 3단계: 의존성 분석\n- 독립적 작업: 단일 팀으로 처리 가능\n- 순차적 의존: 이전 결과 필요 → 여러 팀 순서대로\n- 병렬 가능: 동시 조회 가능 → coordination: "parallel"\n\n### 4단계: 최종 검증\n- 선택한 팀들로 질문에 완전히 답변 가능한가?\n- 불필요한 팀이 포함되지 않았는가?\n- 순서가 논리적인가? (데이터 흐름 고려)\n\n### 중요 원칙:\n- **법률 키워드만으로 판단하지 말 것**: "법적으로 어떻게 해야 해?" = 법률 검색 + 분석 필요\n- **상황 설명 + 해결책 요청** = 반드시 analysis_team 포함\n- **구체적 수치 비교** (3억→10억 같은) = analysis_team 필요\n\n## 의도별 Agent 매핑 가이드 (기본 가이드 - CoT로 조정 가능)\n\n| 의도 (Intent) | 기본 조합 | 상황별 조정 |\n|--------------|-----------|-------------|\n| LEGAL_CONSULT | ["search_team"] | 해결책 요청시 → + analysis_team |\n| MARKET_INQUIRY | ["search_team"] | 비교/평가시 → + analysis_team |\n| LOAN_CONSULT | ["search_team", "analysis_team"] | 계산 필수 |\n| CONTRACT_CREATION | ["document_team"] | 검토 후 작성 → search + document |\n| CONTRACT_REVIEW | ["search_team", "analysis_team"] | 법률 검토 + 리스크 분석 |\n| COMPREHENSIVE | ["search_team", "analysis_team"] | **항상 분석 포함** |\n| RISK_ANALYSIS | ["analysis_team"] | 법률 근거 필요시 → search + analysis |\n| UNCLEAR | ["search_team", "analysis_team"] | 포괄적 대응 |\n\n**중요**: 위 매핑은 **기본 가이드**일 뿐입니다.\n실제 질문의 내용(CoT 분석 결과)에 따라 조정하세요!\n\n## 복합 질문 처리 예시 (CoT 적용)\n\n### 예시 1: 순차적 처리\n질문: "강남구 시세 확인하고 투자 가치 분석해줘"\n**CoT 분석**:\n1. 요구사항: 시세 조회 + 투자 가치 평가\n2. 복잡도: 중간 (검색 + 분석)\n3. 의존성: 시세 데이터 → 투자 분석 (순차)\n4. 검증: search만으로는 "투자 가치 평가" 불가능\n\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "1단계: 시세 조회+투자 평가 필요. 2단계: 중간 복잡도. 3단계: 순차 의존. 4단계: search로 시세 수집 후 analysis로 투자 가치 평가 필요",\n    "coordination": "sequential"\n}\n```\n\n### 예시 2: 단순 정보 조회\n질문: "전세금 인상률 한도가 얼마야?"\n**CoT 분석**:\n1. 요구사항: 단순 사실 확인\n2. 복잡도: 낮음 (정보 확인형)\n3. 의존성: 없음\n4. 검증: search_team만으로 충분\n\n```json\n{\n    "selected_agents": ["search_team"],\n    "reasoning": "1단계: 단순 정보 조회. 2단계: 저복잡도. 3단계: 독립적. 4단계: 법률 검색만으로 답변 가능",\n    "coordination": "single"\n}\n```\n\n### 예시 3: 해결책 요청 (핵심 예시!)\n질문: "집주인이 전세금 3억을 10억으로 올려달래. 법적으로 어떻게 해야 해?"\n의도: COMPREHENSIVE\n**CoT 분석**:\n1. 요구사항: 상황 설명 + 해결책 요청\n2. 복잡도: 높음 (구체적 상황 + 수치 비교)\n3. 의존성: 법률 확인 → 상황 분석 → 해결책 제시\n4. 검증: "법적으로"만 보고 search만 선택하면 불충분! 해결책 제시 필요\n\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "1단계: 법률 + 상황 분석 + 해결책 필요. 2단계: 고복잡도(3억→10억 비정상). 3단계: 순차(법률 확인 후 타당성 분석). 4단계: \'어떻게 해야\' = 단순 법률 조회 아님, 분석 필수",\n    "coordination": "sequential",\n    "confidence": 0.95\n}\n```\n\n## 응답 형식 (JSON)\n\n```json\n{\n    "selected_agents": ["선택된 agent/team 목록"],\n    "reasoning": "선택 이유를 구체적으로 설명. 각 Agent의 역할과 처리 순서 포함",\n    "coordination": "single/sequential/parallel/pipeline",\n    "dependencies": {"agent2": ["agent1"]},\n    "estimated_time": 30,\n    "confidence": 0.9\n}\n```\n\n## 선택 가이드라인\n\n1. **최소 Agent 원칙**: 가능한 적은 수의 Agent로 처리\n2. **전문성 우선**: 해당 작업에 가장 전문적인 Agent 선택\n3. **효율성 고려**: 병렬 처리 가능한 경우 명시\n4. **의존성 관리**: 데이터 흐름을 고려한 순서 지정\n5. **폴백 전략**: 불확실한 경우 ["search_team", "analysis_team"] 조합\n\n## 주의사항\n\n- selected_agents는 반드시 배열 형태\n- Agent 이름은 정확히: "search_team", "analysis_team", "document_team"\n- 최소 1개, 최대 3개 선택\n- 순서는 실행 우선순위 (앞에 있을수록 먼저 실행)\n- reasoning은 상세하고 논리적으로 작성\n- coordination 필드로 실행 방식 명시\n- 복합 질문의 경우 의존성 관계 명확히 표시'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 16:05:27,813 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 16:05:27,813 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 16:05:27,814 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 16:05:27,814 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 16:05:27,814 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 16:05:27,814 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 16:05:34,522 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 07:05:34 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'6496'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'6521'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9923'), (b'x-ratelimit-remaining-tokens', b'197859'), (b'x-ratelimit-reset-requests', b'10m58.118s'), (b'x-ratelimit-reset-tokens', b'642ms'), (b'x-request-id', b'req_b661e4c8ad1c414391498777a3b3e208'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b121caad13091-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 16:05:34,523 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 16:05:34,523 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 16:05:34,532 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 16:05:34,532 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 16:05:34,532 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 16:05:34,532 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 07:05:34 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '6496', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '6521', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9923', 'x-ratelimit-remaining-tokens': '197859', 'x-ratelimit-reset-requests': '10m58.118s', 'x-ratelimit-reset-tokens': '642ms', 'x-request-id': 'req_b661e4c8ad1c414391498777a3b3e208', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b121caad13091-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 16:05:34,532 - openai._base_client - DEBUG - request_id: req_b661e4c8ad1c414391498777a3b3e208
2025-10-05 16:05:34,533 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: agent_selection | Model: gpt-4o-mini-2024-07-18 | Tokens: 2556 (prompt: 2369, completion: 187)
2025-10-05 16:05:34,533 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM agent selection reasoning: 1단계: 임대차 계약 해지 조건과 위약금 계산을 요청하였으므로 법률 정보 검색과 데이터 분석이 필요합니다. 2단계: 복잡한 질문으로, 법률적 조건 확인 후 위약금 계산이 필요하므로 중간 복잡도입니다. 3단계: 법률 정보를 검색한 후, 그 결과를 바탕으로 위약금을 분석해야 하므로 순차적 의존성이 있습니다. 4단계: 단순히 법률 검색만으로는 위약금 계산이 불가능하므로 분석 팀이 필요합니다.
2025-10-05 16:05:34,533 - app.service_agent.cognitive_agents.planning_agent - INFO - ✅ Primary LLM selected agents: ['search_team', 'analysis_team']
2025-10-05 16:05:34,533 - __main__ - INFO -   의도: 종합분석
2025-10-05 16:05:34,533 - __main__ - INFO -   신뢰도: 0.85
2025-10-05 16:05:34,533 - __main__ - INFO -   추천 Agent: ['search_team', 'analysis_team']
2025-10-05 16:05:34,533 - __main__ - INFO - 
[Step 2] Query Decomposition...
2025-10-05 16:05:34,533 - app.service_agent.cognitive_agents.query_decomposer - INFO - Decomposing query: 임대차 계약 해지 조건 확인하고 위약금 계산해줘...
2025-10-05 16:05:34,534 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-c9c3e17f-e004-4ac9-9f93-0f308e3b64fb', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 질문 분해 전문가입니다.\n복잡한 사용자 질문을 독립적으로 처리 가능한 작업 단위로 분해하는 것이 목표입니다.\n\n## Chain-of-Thought 분해 프로세스:\n\n### 1단계: 복합 질문 여부 판단\n- 단순 정보 조회만 필요한가? → is_compound: false\n- **다음 중 하나라도 해당하면 is_compound: true**:\n  * "그리고", "그 다음", "한 후" 같은 연결어로 여러 요청 연결\n  * 명시적으로 2개 이상의 작업 요청 (예: "시세 확인하고 대출 계산해줘")\n  * 상황 설명 + 해결책 요청 (예: "3억→10억 올려달래. 어떻게 해야 해?")\n  * 해결책을 위해 여러 단계 처리 필요 (검색 → 분석 → 제안)\n\n### 2단계: 필요 작업 식별\n- 정보 수집이 필요한가? → search 작업\n- 평가/판단이 필요한가? → analysis 작업\n- 문서 생성이 필요한가? → generation 작업\n- **해결책 요청**인가? → search + analysis (최소 2개)\n\n### 3단계: 작업 순서 결정\n- 독립적 작업: 병렬 가능\n- 이전 결과 필요: 순차 실행 (depends_on 설정)\n\n## 중요 원칙:\n1. 각 작업은 하나의 명확한 목표를 가져야 합니다\n2. 작업 간 의존성을 명확히 파악해야 합니다\n3. 병렬 처리 가능한 작업은 구분해야 합니다\n4. **주의**: "어떻게 해야", "방법 알려줘" 같은 해결책 요청은 복합 질문!\n\n## 작업 유형 (type):\n- search: 정보 검색 (법률, 시세, 대출 정보 등)\n- analysis: 데이터 분석 (리스크 평가, 시장 분석 등)\n- generation: 문서 생성 (계약서 작성 등)\n- review: 검토/평가 (계약서 검토, 조건 확인 등)\n- calculation: 계산/산출 (대출 한도, 세금 등)\n- comparison: 비교 분석 (여러 옵션 비교)\n\n## 담당 팀 (agent):\n- search_team: 법률, 시세, 대출 정보 검색\n- analysis_team: 데이터 분석, 리스크 평가, 계산\n- document_team: 문서 생성, 계약서 작성\n\n## 학습 예시:\n\n### 예시 1: 복합 질문 (순차적)\n질문: "강남구 아파트 시세 확인하고 대출 가능 금액 계산해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "강남구 아파트 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "대출 가능 금액 계산",\n            "type": "calculation",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "required_data": {"price": "task_0.result.price"},\n            "estimated_time": 15\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "시세 정보가 있어야 대출 금액 계산이 가능하므로 순차 실행"\n}\n```\n\n### 예시 2: 복합 질문 (병렬 가능)\n질문: "이 지역 전세 시세와 매매 시세 모두 알려주고 비교 분석해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "전세 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "매매 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "전세/매매 시세 비교 분석",\n            "type": "comparison",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0", "task_1"],\n            "required_data": {\n                "lease_price": "task_0.result",\n                "sale_price": "task_1.result"\n            },\n            "estimated_time": 25\n        }\n    ],\n    "execution_mode": "mixed",\n    "parallel_groups": [["task_0", "task_1"], ["task_2"]],\n    "reasoning": "시세 조회는 독립적이므로 병렬 처리, 비교는 두 결과 필요"\n}\n```\n\n### 예시 3: 복합 질문 (3단계 이상)\n질문: "이 계약서 검토해서 위험한 부분 찾고 수정안 만들어서 최종 계약서 작성해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "계약서 내용 전체 검토",\n            "type": "review",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 30\n        },\n        {\n            "description": "위험 요소 및 문제점 분석",\n            "type": "analysis",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "estimated_time": 25\n        },\n        {\n            "description": "수정안 제안 생성",\n            "type": "generation",\n            "agent": "document_team",\n            "priority": 3,\n            "depends_on": ["task_1"],\n            "estimated_time": 20\n        },\n        {\n            "description": "최종 계약서 작성",\n            "type": "generation",\n            "agent": "document_team",\n            "priority": 4,\n            "depends_on": ["task_2"],\n            "estimated_time": 30\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "각 단계가 이전 결과에 의존하므로 순차 실행 필요"\n}\n```\n\n### 예시 4: 단순 질문 (분해 불필요)\n질문: "전세금 인상률 상한이 얼마야?"\n분해:\n```json\n{\n    "is_compound": false,\n    "sub_tasks": [\n        {\n            "description": "전세금 인상률 상한 법률 정보 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 15\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "단일 정보 조회 요청으로 분해 불필요"\n}\n```\n\n### 예시 5: 조건부 실행\n질문: "이 물건 시세 확인하고 적정가면 대출 상담도 받고 싶어"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "물건 시세 조회 및 적정성 평가",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 25\n        },\n        {\n            "description": "대출 상담 정보 제공",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "optional": true,\n            "context": {"condition": "if_reasonable_price"},\n            "estimated_time": 20\n        }\n    ],\n    "execution_mode": "conditional",\n    "reasoning": "시세 확인 결과에 따라 대출 상담 진행 여부 결정"\n}\n```\n\n### 예시 6: 상황 설명 + 해결책 요청 (핵심 패턴!)\n질문: "집주인이 전세금 3억을 10억으로 올려달래. 법적으로 어떻게 해야 해?"\n**CoT 분석**:\n1. 질문 분석: 상황 설명 + 해결책 요청\n2. 연결어: 없지만, "어떻게 해야" = 해결책 요청\n3. 의존성: 법률 확인 → 상황 분석 → 대응 방안\n4. 복합 여부: **YES** (해결책을 위해 여러 단계 필요)\n\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "전세금 인상 한도 관련 법률 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "3억→10억 인상의 법적 타당성 및 적정성 분석",\n            "type": "analysis",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "required_data": {"legal_limit": "task_0.result", "current": 300000000, "requested": 1000000000},\n            "estimated_time": 25\n        },\n        {\n            "description": "구체적 대응 방안 및 해결책 제시",\n            "type": "analysis",\n            "agent": "analysis_team",\n            "priority": 3,\n            "depends_on": ["task_1"],\n            "estimated_time": 20\n        }\n    ],\n    "execution_mode": "sequential",\n    "confidence": 0.95,\n    "reasoning": "상황 설명+해결책 요청 패턴. \'어떻게 해야\'는 단순 정보 조회가 아닌 종합 해결책 필요. 법률 조회 → 상황 분석 → 해결책 제시 3단계 순차 처리"\n}\n```\n\n## Chain-of-Thought 프로세스:\n\n1. **질문 분석**: 어떤 정보나 작업을 요구하는가?\n2. **연결어 확인**: "그리고", "또한", "해서", "한 후" 등이 있는가?\n3. **의존성 파악**: 어떤 작업이 다른 작업의 결과를 필요로 하는가?\n4. **병렬성 판단**: 독립적으로 실행 가능한 작업이 있는가?\n5. **최적화**: 불필요한 분해는 없는가?\n\n## 응답 형식 (JSON):\n\n{\n    "is_compound": true/false,\n    "sub_tasks": [\n        {\n            "description": "작업 설명",\n            "type": "작업 유형",\n            "agent": "담당 팀",\n            "priority": 우선순위 (1이 가장 높음),\n            "depends_on": ["선행 작업 ID 리스트"],\n            "required_data": {"필요한 데이터 매핑"},\n            "estimated_time": 예상 소요 시간(초),\n            "optional": true/false,\n            "context": {"추가 컨텍스트"}\n        }\n    ],\n    "execution_mode": "sequential/parallel/mixed/conditional",\n    "parallel_groups": [["병렬 실행 가능한 작업 ID 그룹"]],\n    "confidence": 0.0-1.0,\n    "reasoning": "분해 결정의 이유와 근거"\n}\n\n## 분해 가이드라인:\n\n1. **분해가 필요한 경우**:\n   - 여러 종류의 정보를 요청하는 경우\n   - 순차적 처리가 필요한 경우 (A의 결과로 B 수행)\n   - 서로 다른 팀의 전문성이 필요한 경우\n\n2. **분해가 불필요한 경우**:\n   - 단일 정보 조회\n   - 단순한 질문-답변\n   - 하나의 팀에서 완전히 처리 가능한 경우\n\n3. **병렬 처리 기준**:\n   - 서로 독립적인 정보 조회\n   - 의존성이 없는 분석 작업\n   - 동시에 진행해도 충돌하지 않는 작업\n\n4. **우선순위 설정**:\n   - 의존성이 없는 작업: priority 1\n   - 1차 의존 작업: priority 2\n   - 2차 의존 작업: priority 3\n   - 이런 식으로 증가\n\n현재 의도: 종합분석\n추출된 엔티티: None\n\n분석할 질문: 임대차 계약 해지 조건 확인하고 위약금 계산해줘'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 16:05:34,534 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 16:05:34,534 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 16:05:34,534 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 16:05:34,534 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 16:05:34,535 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 16:05:34,535 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 16:05:38,191 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 07:05:38 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'3411'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'3441'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9923'), (b'x-ratelimit-remaining-tokens', b'197333'), (b'x-ratelimit-reset-requests', b'11m0.013s'), (b'x-ratelimit-reset-tokens', b'800ms'), (b'x-request-id', b'req_1fa2045722274bba86d07bc66874433b'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b1246aba13091-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 16:05:38,191 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 16:05:38,191 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 16:05:38,196 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 16:05:38,196 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 16:05:38,196 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 16:05:38,196 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 07:05:38 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '3411', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '3441', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9923', 'x-ratelimit-remaining-tokens': '197333', 'x-ratelimit-reset-requests': '11m0.013s', 'x-ratelimit-reset-tokens': '800ms', 'x-request-id': 'req_1fa2045722274bba86d07bc66874433b', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b1246aba13091-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 16:05:38,196 - openai._base_client - DEBUG - request_id: req_1fa2045722274bba86d07bc66874433b
2025-10-05 16:05:38,197 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: query_decomposition | Model: gpt-4o-mini-2024-07-18 | Tokens: 2877 (prompt: 2694, completion: 183)
2025-10-05 16:05:38,197 - app.service_agent.cognitive_agents.query_decomposer - INFO - Successfully decomposed into 2 tasks
2025-10-05 16:05:38,197 - __main__ - INFO -   복합 질문: True
2025-10-05 16:05:38,197 - __main__ - INFO -   작업 수: 2
2025-10-05 16:05:38,197 - __main__ - INFO -   실행 모드: sequential
2025-10-05 16:05:38,197 - __main__ - INFO -     - task_0: 임대차 계약 해지 조건 관련 법률 정보 조회 (search_team)
2025-10-05 16:05:38,197 - __main__ - INFO -     - task_1: 위약금 계산 (analysis_team)
2025-10-05 16:05:38,197 - __main__ - INFO - 
[Step 3] Comprehensive Plan 생성...
2025-10-05 16:05:38,197 - app.service_agent.cognitive_agents.planning_agent - INFO - Creating comprehensive plan for query: 임대차 계약 해지 조건 확인하고 위약금 계산해줘...
2025-10-05 16:05:38,197 - app.service_agent.cognitive_agents.planning_agent - INFO - Analyzing intent for query: 임대차 계약 해지 조건 확인하고 위약금 계산해줘...
2025-10-05 16:05:38,197 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-13239b39-da9f-43cd-a960-f80263b72522', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 의도 분석 전문가입니다.\n사용자의 질문을 정확히 이해하고, 어떤 종류의 도움이 필요한지 분류해야 합니다.\n\n## Chain-of-Thought 분석 프로세스\n\n질문을 분석할 때 다음 단계를 **순서대로** 따르세요:\n\n### 1단계: 질문 구조 파악\n- 단순 정보 요청인가? (예: "~이 뭐야?", "~알려줘")\n- 상황 설명이 포함되어 있는가? (배경, 현재 상태)\n- 구체적 수치나 데이터가 있는가? (금액, 비율, 기간 등)\n- 문제 해결을 요구하는가? (예: "어떻게 해야 해?", "방법 알려줘")\n\n### 2단계: 요청 유형 판단\n- **정보 확인형**: 사실, 개념, 규정 확인 → 검색만으로 충분\n- **평가/판단형**: "괜찮아?", "적절해?", "문제있어?" → 검색 + 분석 필요\n- **해결책 요청형**: "어떻게?", "방법?", "대처?" → 검색 + 분석 + 제안 필요\n- **비교/선택형**: "A vs B", "어느게 나아?" → 검색 + 분석(비교) 필요\n\n### 3단계: 복잡도 평가\n- **저**: 단일 개념/사실 확인 (예: "전세금 인상률 한도?")\n- **중**: 특정 상황 + 판단 (예: "3억을 5억으로 올려달래. 가능해?")\n- **고**: 복잡한 상황 + 여러 조건 + 해결책 (예: "10년 거주, 3억→10억 요구. 어떻게 해야 해?")\n\n### 4단계: 필요한 처리 결정\n- **검색만**: 정보 확인형 + 저복잡도\n- **검색+분석**: 평가/판단형 OR 중복잡도 OR 수치 비교 포함\n- **종합처리**: 해결책 요청형 OR 고복잡도 OR 여러 조건 동시 고려\n\n### 5단계: 최종 검증\n- 선택한 의도로 사용자 질문에 완전히 답변 가능한가?\n- 단순 정보 제공으로 끝나는가, 아니면 추가 분석/판단이 필요한가?\n- 상황 설명이 있으면서 "해결", "방법", "어떻게" 등이 있으면 → COMPREHENSIVE 고려\n\n## 중요: 복합 질문 처리\n복합적인 질문(여러 의도가 섞인 질문)의 경우, 가장 핵심적인 의도를 파악하되,\nsub_intents 필드에 부가적인 의도들도 함께 기록해주세요.\n\n**특히 주의**:\n- 법률 키워드가 있어도, "해결방법", "어떻게 해야" 같은 표현이 있으면 단순 LEGAL_CONSULT가 아닐 수 있음\n- 구체적 상황(금액, 기간 등) + 해결책 요구 = COMPREHENSIVE 또는 복합 의도로 분류\n\n## 분류 카테고리 설명:\n\n1. **LEGAL_CONSULT (법률상담)**\n   - 설명: 부동산 관련 법률, 권리, 의무에 대한 질문\n   - 예시:\n     * 단순: "전세금 5% 인상이 가능한가요?", "임대차계약 갱신 거부할 수 있나요?"\n     * 복합: "전세금 인상 가능한지 확인하고 법적 근거도 알려주세요"\n   - 키워드: 법, 전세, 임대, 보증금, 계약, 권리, 의무, 갱신, 임차인, 임대인, 법률, 규정, 조항\n   - 필요한 처리: 법률 데이터베이스 검색, 관련 법조항 찾기\n\n2. **MARKET_INQUIRY (시세조회)**\n   - 설명: 부동산 시장 가격, 시세, 거래 동향에 대한 질문\n   - 예시:\n     * 단순: "강남구 아파트 전세 시세 알려주세요", "서초동 매매가 얼마나 올랐나요?"\n     * 복합: "강남구 시세 확인하고 대출 가능 금액도 계산해줘"\n   - 키워드: 시세, 가격, 매매가, 전세가, 월세, 시장, 동향, 평균, 지역명, 상승률, 하락률\n   - 필요한 처리: 부동산 시세 데이터 조회, 지역별 가격 분석\n\n3. **LOAN_CONSULT (대출상담)**\n   - 설명: 주택담보대출, 전세자금대출 등 금융 관련 질문\n   - 예시:\n     * 단순: "전세자금대출 한도가 얼마인가요?", "LTV가 뭔가요?"\n     * 복합: "대출 한도 확인하고 금리 비교도 해주세요"\n   - 키워드: 대출, 금리, 한도, 조건, 상환, LTV, DTI, DSR, 담보, 금융, 은행\n   - 필요한 처리: 대출 상품 조회, 금리 정보 검색, 한도 계산\n\n4. **CONTRACT_CREATION (계약서작성)**\n   - 설명: 새로운 계약서나 문서를 작성해달라는 요청\n   - 예시:\n     * 단순: "임대차계약서 작성해주세요", "전세계약서 초안 만들어주세요"\n     * 복합: "계약서 작성하고 주의사항도 검토해주세요"\n   - 키워드: 작성, 만들, 생성, 초안, 계약서, 문서, 양식\n   - 필요한 처리: 문서 생성 에이전트 호출, 템플릿 기반 작성\n\n5. **CONTRACT_REVIEW (계약서검토)**\n   - 설명: 기존 계약서나 문서를 검토해달라는 요청\n   - 예시:\n     * 단순: "이 계약서 검토해주세요", "특약사항 문제없나요?"\n     * 복합: "계약서 검토하고 수정사항도 제안해주세요"\n   - 키워드: 검토, 확인, 점검, 리뷰, 분석해, 살펴봐, 체크\n   - 필요한 처리: 문서 분석, 위험 요소 식별, 개선사항 제안\n\n6. **COMPREHENSIVE (종합분석)**\n   - 설명: 여러 측면을 종합적으로 분석해달라는 요청, 또는 복잡한 상황에 대한 해결책 요청\n   - 예시:\n     * 단순: "이 물건 전체적으로 분석해주세요"\n     * 복합: "시세, 법률, 대출 모두 검토해서 종합 의견 주세요"\n     * 해결형: "10년 거주했는데 전세금 3억을 10억으로 올려달래. 어떻게 해야 해?"\n     * 상황+해결: "집주인이 계약 갱신 거부했어. 법적으로 어떻게 대응해야 할까?"\n   - 키워드: 종합, 전체, 모든, 전반적, 종합적, 평가, 분석, 어떻게, 방법, 해결, 대처\n   - 패턴: 구체적 상황 설명 + "어떻게/방법/해결" 요청\n   - 필요한 처리: 다중 데이터 소스 통합 분석, 상황 평가, 해결책 제시\n\n7. **RISK_ANALYSIS (리스크분석)**\n   - 설명: 위험 요소나 주의사항에 대한 질문\n   - 예시:\n     * 단순: "이 계약 위험한가요?", "주의할 점 알려주세요"\n     * 복합: "리스크 분석하고 대안도 제시해주세요"\n   - 키워드: 위험, 리스크, 주의, 문제점, 조심, 걱정, 우려\n   - 필요한 처리: 위험 요소 분석, 주의사항 추출\n\n8. **UNCLEAR (불분명)**\n   - 설명: 의도를 명확히 파악하기 어려운 질문\n   - 예시: "이거 좀 봐주세요", "어떻게 해야 할까요?", "도와주세요"\n   - 처리: 추가 질문으로 의도 명확화 필요\n\n9. **IRRELEVANT (무관)**\n   - 설명: 부동산과 전혀 관련 없는 질문\n   - 예시: "날씨 어때?", "저녁 뭐 먹지?", "주식 추천해줘"\n   - 처리: 부동산 관련 질문을 유도\n\n## 복합 질문 예시와 분석 (CoT 적용):\n\n### 예시 1: "강남구 아파트 시세 알려주고 전세자금대출 가능한지도 확인해줘"\n**CoT 분석**:\n1. 구조: 두 개의 요청 ("시세" + "대출")\n2. 유형: 정보 확인형 (둘 다)\n3. 복잡도: 중 (두 가지 독립적 조회)\n4. 필요 처리: 검색 + 계산/분석\n\n**결론**:\n- 주 의도: MARKET_INQUIRY (시세 조회가 먼저 필요)\n- 부가 의도: LOAN_CONSULT (대출 확인)\n- 분해: ["강남구 아파트 시세 조회", "전세자금대출 가능 여부 확인"]\n\n### 예시 2: "이 계약서 검토해서 위험한 부분 있는지 알려주고 수정 제안도 해줘"\n**CoT 분석**:\n1. 구조: 검토 + 위험 평가 + 수정안\n2. 유형: 평가/판단형 + 해결책 요청형\n3. 복잡도: 고 (3단계 처리)\n4. 필요 처리: 검토 + 분석 + 문서 생성\n\n**결론**:\n- 주 의도: CONTRACT_REVIEW (계약서 검토)\n- 부가 의도: RISK_ANALYSIS (위험 분석)\n- 분해: ["계약서 전체 검토", "위험 요소 식별", "수정사항 제안"]\n\n### 예시 3: "집주인이 짜증나, 10년 살았는데 전세금 3억을 10억으로 올려달래. 법적으로 해결방법 알려줘"\n**CoT 분석**:\n1. 구조: 상황 설명 (10년 거주, 3억→10억) + 해결책 요청\n2. 유형: 해결책 요청형 (단순 정보 X)\n3. 복잡도: 고 (구체적 상황 + 수치 비교 + 법률 + 대응방안)\n4. 필요 처리: 법률 검색 + 상황 분석 + 해결책 제시\n\n**결론**:\n- 주 의도: COMPREHENSIVE (복잡한 상황에 대한 종합 해결)\n- 부가 의도: LEGAL_CONSULT, RISK_ANALYSIS\n- 분해: ["전세금 인상 한도 법률 조회", "3억→10억 인상의 타당성 분석", "구체적 대응 방안 제시"]\n- **이유**: "법적으로"라는 키워드가 있지만, 단순 법률 확인이 아니라 구체적 상황에 대한 해결책을 요구하므로 COMPREHENSIVE\n\n### 예시 4: "전세금 인상률 상한이 얼마야?"\n**CoT 분석**:\n1. 구조: 단순 사실 확인\n2. 유형: 정보 확인형\n3. 복잡도: 저 (단일 개념)\n4. 필요 처리: 검색만\n\n**결론**:\n- 주 의도: LEGAL_CONSULT (법률 정보 조회)\n- 부가 의도: 없음\n- 분해: 필요 없음\n\n## 응답 형식 (JSON 형식으로 응답):\n\n```json\n{\n    "intent": "LEGAL_CONSULT",\n    "confidence": 0.9,\n    "keywords": ["전세금", "인상", "제한"],\n    "sub_intents": [],\n    "is_compound": false,\n    "decomposed_tasks": [],\n    "entities": {\n        "location": "강남구",\n        "price": "5억",\n        "contract_type": "전세",\n        "date": "2024년",\n        "area": "84㎡",\n        "action_verbs": ["확인", "검토"]\n    },\n    "reasoning": "전세금 인상에 대한 법률 질문이므로 LEGAL_CONSULT로 분류"\n}\n```\n\n응답 규칙:\n- intent: 위 9개 카테고리 중 하나 (대문자_언더스코어 형식)\n- confidence: 0.0~1.0 (0.8 이상이면 매우 확실, 0.5 미만이면 불확실)\n- keywords: 추출된 주요 키워드 목록\n- sub_intents: 복합 질문일 경우 부가적인 의도들\n- is_compound: 복합 질문 여부 (true/false)\n- decomposed_tasks: 복합 질문을 분해한 개별 작업들\n- entities: 추출된 엔티티 정보\n- reasoning: **반드시 CoT 5단계를 거쳐 분석한 과정을 포함** (구조 파악 → 유형 판단 → 복잡도 평가 → 필요 처리 → 최종 검증)\n\n## reasoning 작성 예시:\n"1단계(구조): 상황 설명(10년 거주, 3억→10억) + 해결책 요청 포함.\n2단계(유형): 해결책 요청형 - 단순 정보가 아닌 대응방안 필요.\n3단계(복잡도): 고 - 구체적 수치 비교와 복잡한 상황.\n4단계(처리): 법률 검색 + 상황 분석 + 해결책 제시 필요.\n5단계(검증): LEGAL_CONSULT만으로는 불충분, 종합적 분석 필요 → COMPREHENSIVE 선택"\n\n## 판단 가이드:\n- 여러 의도가 섞여있다면, 가장 주된 의도를 intent에, 나머지를 sub_intents에 기록\n- "그리고", "또한", "함께", "같이" 등의 연결어가 있으면 복합 질문일 가능성 높음\n- 법률 관련 키워드가 있으면 LEGAL_CONSULT 우선\n- 가격/시세 언급이 명확하면 MARKET_INQUIRY\n- 계약서라는 단어와 함께 "작성/만들기"가 있으면 CONTRACT_CREATION\n- 계약서라는 단어와 함께 "검토/확인"이 있으면 CONTRACT_REVIEW\n- 불확실하면 confidence를 낮게 설정하고 UNCLEAR 선택\n- 복합 질문은 is_compound를 true로 설정하고 개별 작업으로 분해\n\n분석할 질문: 임대차 계약 해지 조건 확인하고 위약금 계산해줘'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 16:05:38,198 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 16:05:38,198 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 16:05:38,198 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 16:05:38,198 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 16:05:38,199 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 16:05:38,199 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 16:05:45,903 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 07:05:45 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'7504'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'7527'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9922'), (b'x-ratelimit-remaining-tokens', b'197238'), (b'x-ratelimit-reset-requests', b'11m5.336s'), (b'x-ratelimit-reset-tokens', b'828ms'), (b'x-request-id', b'req_39273d287a3f4246ba6831e2bdda42d2'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b125d9a113091-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 16:05:45,903 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 16:05:45,903 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 16:05:45,906 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 16:05:45,906 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 16:05:45,907 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 16:05:45,907 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 07:05:45 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '7504', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '7527', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9922', 'x-ratelimit-remaining-tokens': '197238', 'x-ratelimit-reset-requests': '11m5.336s', 'x-ratelimit-reset-tokens': '828ms', 'x-request-id': 'req_39273d287a3f4246ba6831e2bdda42d2', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b125d9a113091-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 16:05:45,907 - openai._base_client - DEBUG - request_id: req_39273d287a3f4246ba6831e2bdda42d2
2025-10-05 16:05:45,907 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: intent_analysis | Model: gpt-4o-mini-2024-07-18 | Tokens: 3445 (prompt: 3184, completion: 261)
2025-10-05 16:05:45,907 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM Intent Analysis Result: {'intent': 'COMPREHENSIVE', 'confidence': 0.85, 'keywords': ['임대차', '계약', '해지', '위약금', '조건'], 'sub_intents': ['LEGAL_CONSULT', 'LOAN_CONSULT'], 'is_compound': True, 'decomposed_tasks': ['임대차 계약 해지 조건 확인', '위약금 계산'], 'entities': {'contract_type': '임대차', 'action_verbs': ['확인', '계산']}, 'reasoning': '1단계(구조): 임대차 계약 해지 조건과 위약금 계산 요청 포함. 2단계(유형): 해결책 요청형 - 단순 정보가 아닌 구체적인 조건과 계산 필요. 3단계(복잡도): 중 - 계약 해지 조건과 위약금 계산이라는 두 가지 작업 포함. 4단계(처리): 계약 해지 조건 확인과 위약금 계산을 위한 정보 검색 필요. 5단계(검증): 두 가지 작업이 포함되어 있어 COMPREHENSIVE로 분류.'}
2025-10-05 16:05:45,908 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-2de4fdad-41e7-4284-86d7-88bad48c24b6', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 Agent 선택 전문가입니다.\n사용자의 요청에 가장 적합한 Agent/Team을 선택하는 것이 목표입니다.\n\n## 현재 상황\n\n**사용자 질문:** 임대차 계약 해지 조건 확인하고 위약금 계산해줘\n**분석된 의도:** 종합분석\n**추출된 키워드:** [\'임대차\', \'계약\', \'해지\', \'위약금\', \'조건\']\n\n## 사용 가능한 Agent/Team 정보\n\n{\'search_team\': {\'name\': \'search_team\', \'capabilities\': \'법률 검색, 부동산 시세 조회, 대출 상품 검색\', \'tools\': [\'legal_search\', \'market_data\', \'loan_data\'], \'use_cases\': [\'법률 상담\', \'시세 조회\', \'대출 정보\']}, \'analysis_team\': {\'name\': \'analysis_team\', \'capabilities\': \'데이터 분석, 리스크 평가, 인사이트 생성, 추천\', \'tools\': [\'data_analyzer\', \'risk_evaluator\'], \'use_cases\': [\'시장 분석\', \'리스크 평가\', \'투자 분석\']}, \'document_team\': {\'name\': \'document_team\', \'capabilities\': \'계약서 작성, 문서 생성, 문서 검토\', \'tools\': [\'document_generator\', \'contract_reviewer\'], \'use_cases\': [\'계약서 작성\', \'문서 검토\']}}\n\n## Agent 역할 및 상세 가이드\n\n### 1. search_team (검색 팀)\n- **주요 기능**: 정보 검색 및 데이터 수집\n- **전문 분야**:\n  * 법률 정보 검색 (전세법, 임대차보호법, 부동산 관련 법규)\n  * 부동산 시세 조회 (매매가, 전세가, 월세, 실거래가)\n  * 대출 상품 정보 검색 (금리, 한도, 조건)\n  * 지역 정보 및 인프라 조회\n- **도구**: legal_search, market_data, loan_data\n- **적합한 작업**: 정보 조회, 데이터 수집, 법률 확인, 시세 파악\n- **예시**:\n  * "전세금 5% 인상 가능한가요?"\n  * "강남구 아파트 전세 시세"\n  * "전세자금대출 한도 얼마?"\n\n### 2. analysis_team (분석 팀)\n- **주요 기능**: 데이터 분석 및 평가\n- **전문 분야**:\n  * 시장 동향 분석 (상승률, 하락률, 추세)\n  * 리스크 평가 (계약, 투자 위험도)\n  * 투자 수익률 계산 (ROI, 월세 수익률)\n  * 대출 한도 및 조건 분석 (LTV, DTI, DSR)\n  * 비교 분석 (지역별, 상품별)\n- **도구**: data_analyzer, risk_evaluator, calculator\n- **적합한 작업**: 데이터 분석, 리스크 평가, 계산, 비교, 예측\n- **의존성**: 보통 search_team의 데이터가 필요\n- **예시**:\n  * "이 지역 투자 가치 분석해줘"\n  * "계약 리스크 평가해줘"\n  * "대출 가능 금액 계산해줘"\n\n### 3. document_team (문서 팀)\n- **주요 기능**: 문서 생성 및 관리\n- **전문 분야**:\n  * 계약서 작성 (임대차, 매매, 전세)\n  * 문서 템플릿 관리\n  * 특약사항 생성\n  * 계약서 수정안 작성\n  * 법률 문서 검토\n- **도구**: document_generator, contract_template, contract_reviewer\n- **적합한 작업**: 문서 작성, 계약서 생성, 문서 수정, 검토\n- **예시**:\n  * "임대차계약서 작성해줘"\n  * "특약사항 추가해줘"\n  * "계약서 수정안 만들어줘"\n\n## Chain-of-Thought Agent 선택 프로세스\n\n다음 단계를 **순서대로** 따라 최적의 Agent 조합을 선택하세요:\n\n### 1단계: 질문 요구사항 파악\n- 단순 정보 조회인가? → search_team만 필요\n- 판단/평가가 필요한가? → search + analysis 필요\n- 해결책 제시가 필요한가? → search + analysis 필요\n- 문서 생성이 필요한가? → document_team 추가\n\n### 2단계: 작업 복잡도 판단\n- **단순** (검색만): "~이 뭐야?", "~알려줘" → search_team\n- **중간** (검색+판단): "~괜찮아?", "~적절해?" → search + analysis\n- **복잡** (종합 해결): 구체적 상황 + "어떻게 해야 해?" → search + analysis\n\n### 3단계: 의존성 분석\n- 독립적 작업: 단일 팀으로 처리 가능\n- 순차적 의존: 이전 결과 필요 → 여러 팀 순서대로\n- 병렬 가능: 동시 조회 가능 → coordination: "parallel"\n\n### 4단계: 최종 검증\n- 선택한 팀들로 질문에 완전히 답변 가능한가?\n- 불필요한 팀이 포함되지 않았는가?\n- 순서가 논리적인가? (데이터 흐름 고려)\n\n### 중요 원칙:\n- **법률 키워드만으로 판단하지 말 것**: "법적으로 어떻게 해야 해?" = 법률 검색 + 분석 필요\n- **상황 설명 + 해결책 요청** = 반드시 analysis_team 포함\n- **구체적 수치 비교** (3억→10억 같은) = analysis_team 필요\n\n## 의도별 Agent 매핑 가이드 (기본 가이드 - CoT로 조정 가능)\n\n| 의도 (Intent) | 기본 조합 | 상황별 조정 |\n|--------------|-----------|-------------|\n| LEGAL_CONSULT | ["search_team"] | 해결책 요청시 → + analysis_team |\n| MARKET_INQUIRY | ["search_team"] | 비교/평가시 → + analysis_team |\n| LOAN_CONSULT | ["search_team", "analysis_team"] | 계산 필수 |\n| CONTRACT_CREATION | ["document_team"] | 검토 후 작성 → search + document |\n| CONTRACT_REVIEW | ["search_team", "analysis_team"] | 법률 검토 + 리스크 분석 |\n| COMPREHENSIVE | ["search_team", "analysis_team"] | **항상 분석 포함** |\n| RISK_ANALYSIS | ["analysis_team"] | 법률 근거 필요시 → search + analysis |\n| UNCLEAR | ["search_team", "analysis_team"] | 포괄적 대응 |\n\n**중요**: 위 매핑은 **기본 가이드**일 뿐입니다.\n실제 질문의 내용(CoT 분석 결과)에 따라 조정하세요!\n\n## 복합 질문 처리 예시 (CoT 적용)\n\n### 예시 1: 순차적 처리\n질문: "강남구 시세 확인하고 투자 가치 분석해줘"\n**CoT 분석**:\n1. 요구사항: 시세 조회 + 투자 가치 평가\n2. 복잡도: 중간 (검색 + 분석)\n3. 의존성: 시세 데이터 → 투자 분석 (순차)\n4. 검증: search만으로는 "투자 가치 평가" 불가능\n\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "1단계: 시세 조회+투자 평가 필요. 2단계: 중간 복잡도. 3단계: 순차 의존. 4단계: search로 시세 수집 후 analysis로 투자 가치 평가 필요",\n    "coordination": "sequential"\n}\n```\n\n### 예시 2: 단순 정보 조회\n질문: "전세금 인상률 한도가 얼마야?"\n**CoT 분석**:\n1. 요구사항: 단순 사실 확인\n2. 복잡도: 낮음 (정보 확인형)\n3. 의존성: 없음\n4. 검증: search_team만으로 충분\n\n```json\n{\n    "selected_agents": ["search_team"],\n    "reasoning": "1단계: 단순 정보 조회. 2단계: 저복잡도. 3단계: 독립적. 4단계: 법률 검색만으로 답변 가능",\n    "coordination": "single"\n}\n```\n\n### 예시 3: 해결책 요청 (핵심 예시!)\n질문: "집주인이 전세금 3억을 10억으로 올려달래. 법적으로 어떻게 해야 해?"\n의도: COMPREHENSIVE\n**CoT 분석**:\n1. 요구사항: 상황 설명 + 해결책 요청\n2. 복잡도: 높음 (구체적 상황 + 수치 비교)\n3. 의존성: 법률 확인 → 상황 분석 → 해결책 제시\n4. 검증: "법적으로"만 보고 search만 선택하면 불충분! 해결책 제시 필요\n\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "1단계: 법률 + 상황 분석 + 해결책 필요. 2단계: 고복잡도(3억→10억 비정상). 3단계: 순차(법률 확인 후 타당성 분석). 4단계: \'어떻게 해야\' = 단순 법률 조회 아님, 분석 필수",\n    "coordination": "sequential",\n    "confidence": 0.95\n}\n```\n\n## 응답 형식 (JSON)\n\n```json\n{\n    "selected_agents": ["선택된 agent/team 목록"],\n    "reasoning": "선택 이유를 구체적으로 설명. 각 Agent의 역할과 처리 순서 포함",\n    "coordination": "single/sequential/parallel/pipeline",\n    "dependencies": {"agent2": ["agent1"]},\n    "estimated_time": 30,\n    "confidence": 0.9\n}\n```\n\n## 선택 가이드라인\n\n1. **최소 Agent 원칙**: 가능한 적은 수의 Agent로 처리\n2. **전문성 우선**: 해당 작업에 가장 전문적인 Agent 선택\n3. **효율성 고려**: 병렬 처리 가능한 경우 명시\n4. **의존성 관리**: 데이터 흐름을 고려한 순서 지정\n5. **폴백 전략**: 불확실한 경우 ["search_team", "analysis_team"] 조합\n\n## 주의사항\n\n- selected_agents는 반드시 배열 형태\n- Agent 이름은 정확히: "search_team", "analysis_team", "document_team"\n- 최소 1개, 최대 3개 선택\n- 순서는 실행 우선순위 (앞에 있을수록 먼저 실행)\n- reasoning은 상세하고 논리적으로 작성\n- coordination 필드로 실행 방식 명시\n- 복합 질문의 경우 의존성 관계 명확히 표시'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 16:05:45,908 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 16:05:45,908 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 16:05:45,909 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 16:05:45,909 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 16:05:45,909 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 16:05:45,909 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 16:05:48,421 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 07:05:48 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'2219'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'2319'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9922'), (b'x-ratelimit-remaining-tokens', b'197880'), (b'x-ratelimit-reset-requests', b'11m5.938s'), (b'x-ratelimit-reset-tokens', b'636ms'), (b'x-request-id', b'req_efe62267abb74af3ad578c9087cbe7b0'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b128dcaf23091-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 16:05:48,421 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 16:05:48,421 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 16:05:48,427 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 16:05:48,427 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 16:05:48,427 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 16:05:48,428 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 07:05:48 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '2219', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '2319', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9922', 'x-ratelimit-remaining-tokens': '197880', 'x-ratelimit-reset-requests': '11m5.938s', 'x-ratelimit-reset-tokens': '636ms', 'x-request-id': 'req_efe62267abb74af3ad578c9087cbe7b0', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b128dcaf23091-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 16:05:48,428 - openai._base_client - DEBUG - request_id: req_efe62267abb74af3ad578c9087cbe7b0
2025-10-05 16:05:48,428 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: agent_selection | Model: gpt-4o-mini-2024-07-18 | Tokens: 2547 (prompt: 2369, completion: 178)
2025-10-05 16:05:48,428 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM agent selection reasoning: 1단계: 임대차 계약 해지 조건과 위약금 계산을 요청하는 복합적인 질문입니다. 2단계: 법률 정보 검색이 필요하고, 위약금 계산은 데이터 분석이 필요하므로 중간 복잡도로 판단했습니다. 3단계: 법률 정보를 먼저 확인한 후, 그 정보를 바탕으로 위약금을 분석해야 하므로 순차적 의존성이 있습니다. 4단계: 단순 법률 검색만으로는 위약금 계산이 불가능하므로 analysis_team이 필요합니다.
2025-10-05 16:05:48,428 - app.service_agent.cognitive_agents.planning_agent - INFO - ✅ Primary LLM selected agents: ['search_team', 'analysis_team']
2025-10-05 16:05:48,428 - app.service_agent.cognitive_agents.planning_agent - INFO - Intent analyzed: 종합분석 (confidence: 0.85)
2025-10-05 16:05:48,428 - app.service_agent.cognitive_agents.query_decomposer - INFO - Decomposing query: 임대차 계약 해지 조건 확인하고 위약금 계산해줘...
2025-10-05 16:05:48,428 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-e2d44ae1-05c2-49d3-85df-6561d363a9a2', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 질문 분해 전문가입니다.\n복잡한 사용자 질문을 독립적으로 처리 가능한 작업 단위로 분해하는 것이 목표입니다.\n\n## Chain-of-Thought 분해 프로세스:\n\n### 1단계: 복합 질문 여부 판단\n- 단순 정보 조회만 필요한가? → is_compound: false\n- **다음 중 하나라도 해당하면 is_compound: true**:\n  * "그리고", "그 다음", "한 후" 같은 연결어로 여러 요청 연결\n  * 명시적으로 2개 이상의 작업 요청 (예: "시세 확인하고 대출 계산해줘")\n  * 상황 설명 + 해결책 요청 (예: "3억→10억 올려달래. 어떻게 해야 해?")\n  * 해결책을 위해 여러 단계 처리 필요 (검색 → 분석 → 제안)\n\n### 2단계: 필요 작업 식별\n- 정보 수집이 필요한가? → search 작업\n- 평가/판단이 필요한가? → analysis 작업\n- 문서 생성이 필요한가? → generation 작업\n- **해결책 요청**인가? → search + analysis (최소 2개)\n\n### 3단계: 작업 순서 결정\n- 독립적 작업: 병렬 가능\n- 이전 결과 필요: 순차 실행 (depends_on 설정)\n\n## 중요 원칙:\n1. 각 작업은 하나의 명확한 목표를 가져야 합니다\n2. 작업 간 의존성을 명확히 파악해야 합니다\n3. 병렬 처리 가능한 작업은 구분해야 합니다\n4. **주의**: "어떻게 해야", "방법 알려줘" 같은 해결책 요청은 복합 질문!\n\n## 작업 유형 (type):\n- search: 정보 검색 (법률, 시세, 대출 정보 등)\n- analysis: 데이터 분석 (리스크 평가, 시장 분석 등)\n- generation: 문서 생성 (계약서 작성 등)\n- review: 검토/평가 (계약서 검토, 조건 확인 등)\n- calculation: 계산/산출 (대출 한도, 세금 등)\n- comparison: 비교 분석 (여러 옵션 비교)\n\n## 담당 팀 (agent):\n- search_team: 법률, 시세, 대출 정보 검색\n- analysis_team: 데이터 분석, 리스크 평가, 계산\n- document_team: 문서 생성, 계약서 작성\n\n## 학습 예시:\n\n### 예시 1: 복합 질문 (순차적)\n질문: "강남구 아파트 시세 확인하고 대출 가능 금액 계산해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "강남구 아파트 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "대출 가능 금액 계산",\n            "type": "calculation",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "required_data": {"price": "task_0.result.price"},\n            "estimated_time": 15\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "시세 정보가 있어야 대출 금액 계산이 가능하므로 순차 실행"\n}\n```\n\n### 예시 2: 복합 질문 (병렬 가능)\n질문: "이 지역 전세 시세와 매매 시세 모두 알려주고 비교 분석해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "전세 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "매매 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "전세/매매 시세 비교 분석",\n            "type": "comparison",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0", "task_1"],\n            "required_data": {\n                "lease_price": "task_0.result",\n                "sale_price": "task_1.result"\n            },\n            "estimated_time": 25\n        }\n    ],\n    "execution_mode": "mixed",\n    "parallel_groups": [["task_0", "task_1"], ["task_2"]],\n    "reasoning": "시세 조회는 독립적이므로 병렬 처리, 비교는 두 결과 필요"\n}\n```\n\n### 예시 3: 복합 질문 (3단계 이상)\n질문: "이 계약서 검토해서 위험한 부분 찾고 수정안 만들어서 최종 계약서 작성해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "계약서 내용 전체 검토",\n            "type": "review",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 30\n        },\n        {\n            "description": "위험 요소 및 문제점 분석",\n            "type": "analysis",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "estimated_time": 25\n        },\n        {\n            "description": "수정안 제안 생성",\n            "type": "generation",\n            "agent": "document_team",\n            "priority": 3,\n            "depends_on": ["task_1"],\n            "estimated_time": 20\n        },\n        {\n            "description": "최종 계약서 작성",\n            "type": "generation",\n            "agent": "document_team",\n            "priority": 4,\n            "depends_on": ["task_2"],\n            "estimated_time": 30\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "각 단계가 이전 결과에 의존하므로 순차 실행 필요"\n}\n```\n\n### 예시 4: 단순 질문 (분해 불필요)\n질문: "전세금 인상률 상한이 얼마야?"\n분해:\n```json\n{\n    "is_compound": false,\n    "sub_tasks": [\n        {\n            "description": "전세금 인상률 상한 법률 정보 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 15\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "단일 정보 조회 요청으로 분해 불필요"\n}\n```\n\n### 예시 5: 조건부 실행\n질문: "이 물건 시세 확인하고 적정가면 대출 상담도 받고 싶어"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "물건 시세 조회 및 적정성 평가",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 25\n        },\n        {\n            "description": "대출 상담 정보 제공",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "optional": true,\n            "context": {"condition": "if_reasonable_price"},\n            "estimated_time": 20\n        }\n    ],\n    "execution_mode": "conditional",\n    "reasoning": "시세 확인 결과에 따라 대출 상담 진행 여부 결정"\n}\n```\n\n### 예시 6: 상황 설명 + 해결책 요청 (핵심 패턴!)\n질문: "집주인이 전세금 3억을 10억으로 올려달래. 법적으로 어떻게 해야 해?"\n**CoT 분석**:\n1. 질문 분석: 상황 설명 + 해결책 요청\n2. 연결어: 없지만, "어떻게 해야" = 해결책 요청\n3. 의존성: 법률 확인 → 상황 분석 → 대응 방안\n4. 복합 여부: **YES** (해결책을 위해 여러 단계 필요)\n\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "전세금 인상 한도 관련 법률 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "3억→10억 인상의 법적 타당성 및 적정성 분석",\n            "type": "analysis",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "required_data": {"legal_limit": "task_0.result", "current": 300000000, "requested": 1000000000},\n            "estimated_time": 25\n        },\n        {\n            "description": "구체적 대응 방안 및 해결책 제시",\n            "type": "analysis",\n            "agent": "analysis_team",\n            "priority": 3,\n            "depends_on": ["task_1"],\n            "estimated_time": 20\n        }\n    ],\n    "execution_mode": "sequential",\n    "confidence": 0.95,\n    "reasoning": "상황 설명+해결책 요청 패턴. \'어떻게 해야\'는 단순 정보 조회가 아닌 종합 해결책 필요. 법률 조회 → 상황 분석 → 해결책 제시 3단계 순차 처리"\n}\n```\n\n## Chain-of-Thought 프로세스:\n\n1. **질문 분석**: 어떤 정보나 작업을 요구하는가?\n2. **연결어 확인**: "그리고", "또한", "해서", "한 후" 등이 있는가?\n3. **의존성 파악**: 어떤 작업이 다른 작업의 결과를 필요로 하는가?\n4. **병렬성 판단**: 독립적으로 실행 가능한 작업이 있는가?\n5. **최적화**: 불필요한 분해는 없는가?\n\n## 응답 형식 (JSON):\n\n{\n    "is_compound": true/false,\n    "sub_tasks": [\n        {\n            "description": "작업 설명",\n            "type": "작업 유형",\n            "agent": "담당 팀",\n            "priority": 우선순위 (1이 가장 높음),\n            "depends_on": ["선행 작업 ID 리스트"],\n            "required_data": {"필요한 데이터 매핑"},\n            "estimated_time": 예상 소요 시간(초),\n            "optional": true/false,\n            "context": {"추가 컨텍스트"}\n        }\n    ],\n    "execution_mode": "sequential/parallel/mixed/conditional",\n    "parallel_groups": [["병렬 실행 가능한 작업 ID 그룹"]],\n    "confidence": 0.0-1.0,\n    "reasoning": "분해 결정의 이유와 근거"\n}\n\n## 분해 가이드라인:\n\n1. **분해가 필요한 경우**:\n   - 여러 종류의 정보를 요청하는 경우\n   - 순차적 처리가 필요한 경우 (A의 결과로 B 수행)\n   - 서로 다른 팀의 전문성이 필요한 경우\n\n2. **분해가 불필요한 경우**:\n   - 단일 정보 조회\n   - 단순한 질문-답변\n   - 하나의 팀에서 완전히 처리 가능한 경우\n\n3. **병렬 처리 기준**:\n   - 서로 독립적인 정보 조회\n   - 의존성이 없는 분석 작업\n   - 동시에 진행해도 충돌하지 않는 작업\n\n4. **우선순위 설정**:\n   - 의존성이 없는 작업: priority 1\n   - 1차 의존 작업: priority 2\n   - 2차 의존 작업: priority 3\n   - 이런 식으로 증가\n\n현재 의도: 종합분석\n추출된 엔티티: {\'contract_type\': \'임대차\', \'action_verbs\': [\'확인\', \'계산\']}\n\n분석할 질문: 임대차 계약 해지 조건 확인하고 위약금 계산해줘'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 16:05:48,429 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 16:05:48,429 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 16:05:48,429 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 16:05:48,429 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 16:05:48,430 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 16:05:48,430 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 16:05:51,054 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 07:05:51 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'2412'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'2433'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9922'), (b'x-ratelimit-remaining-tokens', b'197317'), (b'x-ratelimit-reset-requests', b'11m12.062s'), (b'x-ratelimit-reset-tokens', b'804ms'), (b'x-request-id', b'req_ae1160c5a36b40b2ab6e2f641a284b54'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b129d8a793091-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 16:05:51,054 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 16:05:51,054 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 16:05:51,060 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 16:05:51,060 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 16:05:51,060 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 16:05:51,060 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 07:05:51 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '2412', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '2433', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9922', 'x-ratelimit-remaining-tokens': '197317', 'x-ratelimit-reset-requests': '11m12.062s', 'x-ratelimit-reset-tokens': '804ms', 'x-request-id': 'req_ae1160c5a36b40b2ab6e2f641a284b54', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b129d8a793091-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 16:05:51,060 - openai._base_client - DEBUG - request_id: req_ae1160c5a36b40b2ab6e2f641a284b54
2025-10-05 16:05:51,060 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: query_decomposition | Model: gpt-4o-mini-2024-07-18 | Tokens: 2892 (prompt: 2715, completion: 177)
2025-10-05 16:05:51,060 - app.service_agent.cognitive_agents.query_decomposer - INFO - Successfully decomposed into 2 tasks
2025-10-05 16:05:51,060 - app.service_agent.cognitive_agents.planning_agent - INFO - Query decomposed into 2 tasks
2025-10-05 16:05:51,061 - app.service_agent.cognitive_agents.planning_agent - WARNING - Plan validation errors: ["Agent 'search_team' not found in registry", "Agent 'analysis_team' depends on missing 'task_0'", "Agent 'analysis_team' not found in registry"]
2025-10-05 16:05:51,061 - app.service_agent.cognitive_agents.planning_agent - INFO - Optimizing execution plan
2025-10-05 16:05:51,061 - app.service_agent.cognitive_agents.planning_agent - INFO - Comprehensive plan created: Intent: 종합분석 (confidence: 0.85) | Strategy: sequential | Agents: search_team, analysis_team | Estimated time: 35.0s
2025-10-05 16:05:51,061 - __main__ - INFO -   전략: sequential
2025-10-05 16:05:51,061 - __main__ - INFO -   단계 수: 2
2025-10-05 16:05:51,061 - __main__ - INFO - 
✓ 테스트 성공 (소요시간: 28.83초)
2025-10-05 16:05:51,061 - __main__ - INFO - 
================================================================================
2025-10-05 16:05:51,061 - __main__ - INFO - [40] 복합 질문 테스트: D020
2025-10-05 16:05:51,061 - __main__ - INFO - 질문: LTV, DTI 규제 확인하고 대출 가능액 산정해줘
2025-10-05 16:05:51,061 - __main__ - INFO - ================================================================================
2025-10-05 16:05:51,061 - __main__ - INFO - 
[Step 1] Intent 분석...
2025-10-05 16:05:51,061 - app.service_agent.cognitive_agents.planning_agent - INFO - Analyzing intent for query: LTV, DTI 규제 확인하고 대출 가능액 산정해줘...
2025-10-05 16:05:51,061 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-794bf1f0-7011-4d84-a0c9-b33c556005ff', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 의도 분석 전문가입니다.\n사용자의 질문을 정확히 이해하고, 어떤 종류의 도움이 필요한지 분류해야 합니다.\n\n## Chain-of-Thought 분석 프로세스\n\n질문을 분석할 때 다음 단계를 **순서대로** 따르세요:\n\n### 1단계: 질문 구조 파악\n- 단순 정보 요청인가? (예: "~이 뭐야?", "~알려줘")\n- 상황 설명이 포함되어 있는가? (배경, 현재 상태)\n- 구체적 수치나 데이터가 있는가? (금액, 비율, 기간 등)\n- 문제 해결을 요구하는가? (예: "어떻게 해야 해?", "방법 알려줘")\n\n### 2단계: 요청 유형 판단\n- **정보 확인형**: 사실, 개념, 규정 확인 → 검색만으로 충분\n- **평가/판단형**: "괜찮아?", "적절해?", "문제있어?" → 검색 + 분석 필요\n- **해결책 요청형**: "어떻게?", "방법?", "대처?" → 검색 + 분석 + 제안 필요\n- **비교/선택형**: "A vs B", "어느게 나아?" → 검색 + 분석(비교) 필요\n\n### 3단계: 복잡도 평가\n- **저**: 단일 개념/사실 확인 (예: "전세금 인상률 한도?")\n- **중**: 특정 상황 + 판단 (예: "3억을 5억으로 올려달래. 가능해?")\n- **고**: 복잡한 상황 + 여러 조건 + 해결책 (예: "10년 거주, 3억→10억 요구. 어떻게 해야 해?")\n\n### 4단계: 필요한 처리 결정\n- **검색만**: 정보 확인형 + 저복잡도\n- **검색+분석**: 평가/판단형 OR 중복잡도 OR 수치 비교 포함\n- **종합처리**: 해결책 요청형 OR 고복잡도 OR 여러 조건 동시 고려\n\n### 5단계: 최종 검증\n- 선택한 의도로 사용자 질문에 완전히 답변 가능한가?\n- 단순 정보 제공으로 끝나는가, 아니면 추가 분석/판단이 필요한가?\n- 상황 설명이 있으면서 "해결", "방법", "어떻게" 등이 있으면 → COMPREHENSIVE 고려\n\n## 중요: 복합 질문 처리\n복합적인 질문(여러 의도가 섞인 질문)의 경우, 가장 핵심적인 의도를 파악하되,\nsub_intents 필드에 부가적인 의도들도 함께 기록해주세요.\n\n**특히 주의**:\n- 법률 키워드가 있어도, "해결방법", "어떻게 해야" 같은 표현이 있으면 단순 LEGAL_CONSULT가 아닐 수 있음\n- 구체적 상황(금액, 기간 등) + 해결책 요구 = COMPREHENSIVE 또는 복합 의도로 분류\n\n## 분류 카테고리 설명:\n\n1. **LEGAL_CONSULT (법률상담)**\n   - 설명: 부동산 관련 법률, 권리, 의무에 대한 질문\n   - 예시:\n     * 단순: "전세금 5% 인상이 가능한가요?", "임대차계약 갱신 거부할 수 있나요?"\n     * 복합: "전세금 인상 가능한지 확인하고 법적 근거도 알려주세요"\n   - 키워드: 법, 전세, 임대, 보증금, 계약, 권리, 의무, 갱신, 임차인, 임대인, 법률, 규정, 조항\n   - 필요한 처리: 법률 데이터베이스 검색, 관련 법조항 찾기\n\n2. **MARKET_INQUIRY (시세조회)**\n   - 설명: 부동산 시장 가격, 시세, 거래 동향에 대한 질문\n   - 예시:\n     * 단순: "강남구 아파트 전세 시세 알려주세요", "서초동 매매가 얼마나 올랐나요?"\n     * 복합: "강남구 시세 확인하고 대출 가능 금액도 계산해줘"\n   - 키워드: 시세, 가격, 매매가, 전세가, 월세, 시장, 동향, 평균, 지역명, 상승률, 하락률\n   - 필요한 처리: 부동산 시세 데이터 조회, 지역별 가격 분석\n\n3. **LOAN_CONSULT (대출상담)**\n   - 설명: 주택담보대출, 전세자금대출 등 금융 관련 질문\n   - 예시:\n     * 단순: "전세자금대출 한도가 얼마인가요?", "LTV가 뭔가요?"\n     * 복합: "대출 한도 확인하고 금리 비교도 해주세요"\n   - 키워드: 대출, 금리, 한도, 조건, 상환, LTV, DTI, DSR, 담보, 금융, 은행\n   - 필요한 처리: 대출 상품 조회, 금리 정보 검색, 한도 계산\n\n4. **CONTRACT_CREATION (계약서작성)**\n   - 설명: 새로운 계약서나 문서를 작성해달라는 요청\n   - 예시:\n     * 단순: "임대차계약서 작성해주세요", "전세계약서 초안 만들어주세요"\n     * 복합: "계약서 작성하고 주의사항도 검토해주세요"\n   - 키워드: 작성, 만들, 생성, 초안, 계약서, 문서, 양식\n   - 필요한 처리: 문서 생성 에이전트 호출, 템플릿 기반 작성\n\n5. **CONTRACT_REVIEW (계약서검토)**\n   - 설명: 기존 계약서나 문서를 검토해달라는 요청\n   - 예시:\n     * 단순: "이 계약서 검토해주세요", "특약사항 문제없나요?"\n     * 복합: "계약서 검토하고 수정사항도 제안해주세요"\n   - 키워드: 검토, 확인, 점검, 리뷰, 분석해, 살펴봐, 체크\n   - 필요한 처리: 문서 분석, 위험 요소 식별, 개선사항 제안\n\n6. **COMPREHENSIVE (종합분석)**\n   - 설명: 여러 측면을 종합적으로 분석해달라는 요청, 또는 복잡한 상황에 대한 해결책 요청\n   - 예시:\n     * 단순: "이 물건 전체적으로 분석해주세요"\n     * 복합: "시세, 법률, 대출 모두 검토해서 종합 의견 주세요"\n     * 해결형: "10년 거주했는데 전세금 3억을 10억으로 올려달래. 어떻게 해야 해?"\n     * 상황+해결: "집주인이 계약 갱신 거부했어. 법적으로 어떻게 대응해야 할까?"\n   - 키워드: 종합, 전체, 모든, 전반적, 종합적, 평가, 분석, 어떻게, 방법, 해결, 대처\n   - 패턴: 구체적 상황 설명 + "어떻게/방법/해결" 요청\n   - 필요한 처리: 다중 데이터 소스 통합 분석, 상황 평가, 해결책 제시\n\n7. **RISK_ANALYSIS (리스크분석)**\n   - 설명: 위험 요소나 주의사항에 대한 질문\n   - 예시:\n     * 단순: "이 계약 위험한가요?", "주의할 점 알려주세요"\n     * 복합: "리스크 분석하고 대안도 제시해주세요"\n   - 키워드: 위험, 리스크, 주의, 문제점, 조심, 걱정, 우려\n   - 필요한 처리: 위험 요소 분석, 주의사항 추출\n\n8. **UNCLEAR (불분명)**\n   - 설명: 의도를 명확히 파악하기 어려운 질문\n   - 예시: "이거 좀 봐주세요", "어떻게 해야 할까요?", "도와주세요"\n   - 처리: 추가 질문으로 의도 명확화 필요\n\n9. **IRRELEVANT (무관)**\n   - 설명: 부동산과 전혀 관련 없는 질문\n   - 예시: "날씨 어때?", "저녁 뭐 먹지?", "주식 추천해줘"\n   - 처리: 부동산 관련 질문을 유도\n\n## 복합 질문 예시와 분석 (CoT 적용):\n\n### 예시 1: "강남구 아파트 시세 알려주고 전세자금대출 가능한지도 확인해줘"\n**CoT 분석**:\n1. 구조: 두 개의 요청 ("시세" + "대출")\n2. 유형: 정보 확인형 (둘 다)\n3. 복잡도: 중 (두 가지 독립적 조회)\n4. 필요 처리: 검색 + 계산/분석\n\n**결론**:\n- 주 의도: MARKET_INQUIRY (시세 조회가 먼저 필요)\n- 부가 의도: LOAN_CONSULT (대출 확인)\n- 분해: ["강남구 아파트 시세 조회", "전세자금대출 가능 여부 확인"]\n\n### 예시 2: "이 계약서 검토해서 위험한 부분 있는지 알려주고 수정 제안도 해줘"\n**CoT 분석**:\n1. 구조: 검토 + 위험 평가 + 수정안\n2. 유형: 평가/판단형 + 해결책 요청형\n3. 복잡도: 고 (3단계 처리)\n4. 필요 처리: 검토 + 분석 + 문서 생성\n\n**결론**:\n- 주 의도: CONTRACT_REVIEW (계약서 검토)\n- 부가 의도: RISK_ANALYSIS (위험 분석)\n- 분해: ["계약서 전체 검토", "위험 요소 식별", "수정사항 제안"]\n\n### 예시 3: "집주인이 짜증나, 10년 살았는데 전세금 3억을 10억으로 올려달래. 법적으로 해결방법 알려줘"\n**CoT 분석**:\n1. 구조: 상황 설명 (10년 거주, 3억→10억) + 해결책 요청\n2. 유형: 해결책 요청형 (단순 정보 X)\n3. 복잡도: 고 (구체적 상황 + 수치 비교 + 법률 + 대응방안)\n4. 필요 처리: 법률 검색 + 상황 분석 + 해결책 제시\n\n**결론**:\n- 주 의도: COMPREHENSIVE (복잡한 상황에 대한 종합 해결)\n- 부가 의도: LEGAL_CONSULT, RISK_ANALYSIS\n- 분해: ["전세금 인상 한도 법률 조회", "3억→10억 인상의 타당성 분석", "구체적 대응 방안 제시"]\n- **이유**: "법적으로"라는 키워드가 있지만, 단순 법률 확인이 아니라 구체적 상황에 대한 해결책을 요구하므로 COMPREHENSIVE\n\n### 예시 4: "전세금 인상률 상한이 얼마야?"\n**CoT 분석**:\n1. 구조: 단순 사실 확인\n2. 유형: 정보 확인형\n3. 복잡도: 저 (단일 개념)\n4. 필요 처리: 검색만\n\n**결론**:\n- 주 의도: LEGAL_CONSULT (법률 정보 조회)\n- 부가 의도: 없음\n- 분해: 필요 없음\n\n## 응답 형식 (JSON 형식으로 응답):\n\n```json\n{\n    "intent": "LEGAL_CONSULT",\n    "confidence": 0.9,\n    "keywords": ["전세금", "인상", "제한"],\n    "sub_intents": [],\n    "is_compound": false,\n    "decomposed_tasks": [],\n    "entities": {\n        "location": "강남구",\n        "price": "5억",\n        "contract_type": "전세",\n        "date": "2024년",\n        "area": "84㎡",\n        "action_verbs": ["확인", "검토"]\n    },\n    "reasoning": "전세금 인상에 대한 법률 질문이므로 LEGAL_CONSULT로 분류"\n}\n```\n\n응답 규칙:\n- intent: 위 9개 카테고리 중 하나 (대문자_언더스코어 형식)\n- confidence: 0.0~1.0 (0.8 이상이면 매우 확실, 0.5 미만이면 불확실)\n- keywords: 추출된 주요 키워드 목록\n- sub_intents: 복합 질문일 경우 부가적인 의도들\n- is_compound: 복합 질문 여부 (true/false)\n- decomposed_tasks: 복합 질문을 분해한 개별 작업들\n- entities: 추출된 엔티티 정보\n- reasoning: **반드시 CoT 5단계를 거쳐 분석한 과정을 포함** (구조 파악 → 유형 판단 → 복잡도 평가 → 필요 처리 → 최종 검증)\n\n## reasoning 작성 예시:\n"1단계(구조): 상황 설명(10년 거주, 3억→10억) + 해결책 요청 포함.\n2단계(유형): 해결책 요청형 - 단순 정보가 아닌 대응방안 필요.\n3단계(복잡도): 고 - 구체적 수치 비교와 복잡한 상황.\n4단계(처리): 법률 검색 + 상황 분석 + 해결책 제시 필요.\n5단계(검증): LEGAL_CONSULT만으로는 불충분, 종합적 분석 필요 → COMPREHENSIVE 선택"\n\n## 판단 가이드:\n- 여러 의도가 섞여있다면, 가장 주된 의도를 intent에, 나머지를 sub_intents에 기록\n- "그리고", "또한", "함께", "같이" 등의 연결어가 있으면 복합 질문일 가능성 높음\n- 법률 관련 키워드가 있으면 LEGAL_CONSULT 우선\n- 가격/시세 언급이 명확하면 MARKET_INQUIRY\n- 계약서라는 단어와 함께 "작성/만들기"가 있으면 CONTRACT_CREATION\n- 계약서라는 단어와 함께 "검토/확인"이 있으면 CONTRACT_REVIEW\n- 불확실하면 confidence를 낮게 설정하고 UNCLEAR 선택\n- 복합 질문은 is_compound를 true로 설정하고 개별 작업으로 분해\n\n분석할 질문: LTV, DTI 규제 확인하고 대출 가능액 산정해줘'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 16:05:51,062 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 16:05:51,062 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 16:05:51,062 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 16:05:51,062 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 16:05:51,063 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 16:05:51,063 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 16:05:56,474 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 07:05:56 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'5194'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'5223'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9921'), (b'x-ratelimit-remaining-tokens', b'197241'), (b'x-ratelimit-reset-requests', b'11m18.068s'), (b'x-ratelimit-reset-tokens', b'827ms'), (b'x-request-id', b'req_ed99f611afd441f6982eef25df6f9cdf'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b12adfad33091-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 16:05:56,475 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 16:05:56,475 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 16:05:56,491 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 16:05:56,491 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 16:05:56,491 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 16:05:56,491 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 07:05:56 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '5194', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '5223', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9921', 'x-ratelimit-remaining-tokens': '197241', 'x-ratelimit-reset-requests': '11m18.068s', 'x-ratelimit-reset-tokens': '827ms', 'x-request-id': 'req_ed99f611afd441f6982eef25df6f9cdf', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b12adfad33091-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 16:05:56,491 - openai._base_client - DEBUG - request_id: req_ed99f611afd441f6982eef25df6f9cdf
2025-10-05 16:05:56,492 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: intent_analysis | Model: gpt-4o-mini-2024-07-18 | Tokens: 3443 (prompt: 3186, completion: 257)
2025-10-05 16:05:56,492 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM Intent Analysis Result: {'intent': 'LOAN_CONSULT', 'confidence': 0.85, 'keywords': ['LTV', 'DTI', '대출', '가능액', '규제'], 'sub_intents': [], 'is_compound': True, 'decomposed_tasks': ['LTV 규제 확인', 'DTI 규제 확인', '대출 가능액 산정'], 'entities': {'loan_type': '주택담보대출', 'action_verbs': ['확인', '산정']}, 'reasoning': '1단계(구조): LTV와 DTI 규제 확인 요청 + 대출 가능액 산정 요청 포함. 2단계(유형): 대출 관련 정보 확인 및 계산 요청. 3단계(복잡도): 중 - 두 가지 규제 확인과 대출 가능액 산정이 필요. 4단계(처리): LTV와 DTI 규제 검색 후 대출 가능액 계산 필요. 5단계(검증): 대출 관련 정보와 계산이 모두 포함되어 있어 LOAN_CONSULT로 분류.'}
2025-10-05 16:05:56,492 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-56585e02-4bd7-432f-8799-e0fa47c2c1aa', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 Agent 선택 전문가입니다.\n사용자의 요청에 가장 적합한 Agent/Team을 선택하는 것이 목표입니다.\n\n## 현재 상황\n\n**사용자 질문:** LTV, DTI 규제 확인하고 대출 가능액 산정해줘\n**분석된 의도:** 대출상담\n**추출된 키워드:** [\'LTV\', \'DTI\', \'대출\', \'가능액\', \'규제\']\n\n## 사용 가능한 Agent/Team 정보\n\n{\'search_team\': {\'name\': \'search_team\', \'capabilities\': \'법률 검색, 부동산 시세 조회, 대출 상품 검색\', \'tools\': [\'legal_search\', \'market_data\', \'loan_data\'], \'use_cases\': [\'법률 상담\', \'시세 조회\', \'대출 정보\']}, \'analysis_team\': {\'name\': \'analysis_team\', \'capabilities\': \'데이터 분석, 리스크 평가, 인사이트 생성, 추천\', \'tools\': [\'data_analyzer\', \'risk_evaluator\'], \'use_cases\': [\'시장 분석\', \'리스크 평가\', \'투자 분석\']}, \'document_team\': {\'name\': \'document_team\', \'capabilities\': \'계약서 작성, 문서 생성, 문서 검토\', \'tools\': [\'document_generator\', \'contract_reviewer\'], \'use_cases\': [\'계약서 작성\', \'문서 검토\']}}\n\n## Agent 역할 및 상세 가이드\n\n### 1. search_team (검색 팀)\n- **주요 기능**: 정보 검색 및 데이터 수집\n- **전문 분야**:\n  * 법률 정보 검색 (전세법, 임대차보호법, 부동산 관련 법규)\n  * 부동산 시세 조회 (매매가, 전세가, 월세, 실거래가)\n  * 대출 상품 정보 검색 (금리, 한도, 조건)\n  * 지역 정보 및 인프라 조회\n- **도구**: legal_search, market_data, loan_data\n- **적합한 작업**: 정보 조회, 데이터 수집, 법률 확인, 시세 파악\n- **예시**:\n  * "전세금 5% 인상 가능한가요?"\n  * "강남구 아파트 전세 시세"\n  * "전세자금대출 한도 얼마?"\n\n### 2. analysis_team (분석 팀)\n- **주요 기능**: 데이터 분석 및 평가\n- **전문 분야**:\n  * 시장 동향 분석 (상승률, 하락률, 추세)\n  * 리스크 평가 (계약, 투자 위험도)\n  * 투자 수익률 계산 (ROI, 월세 수익률)\n  * 대출 한도 및 조건 분석 (LTV, DTI, DSR)\n  * 비교 분석 (지역별, 상품별)\n- **도구**: data_analyzer, risk_evaluator, calculator\n- **적합한 작업**: 데이터 분석, 리스크 평가, 계산, 비교, 예측\n- **의존성**: 보통 search_team의 데이터가 필요\n- **예시**:\n  * "이 지역 투자 가치 분석해줘"\n  * "계약 리스크 평가해줘"\n  * "대출 가능 금액 계산해줘"\n\n### 3. document_team (문서 팀)\n- **주요 기능**: 문서 생성 및 관리\n- **전문 분야**:\n  * 계약서 작성 (임대차, 매매, 전세)\n  * 문서 템플릿 관리\n  * 특약사항 생성\n  * 계약서 수정안 작성\n  * 법률 문서 검토\n- **도구**: document_generator, contract_template, contract_reviewer\n- **적합한 작업**: 문서 작성, 계약서 생성, 문서 수정, 검토\n- **예시**:\n  * "임대차계약서 작성해줘"\n  * "특약사항 추가해줘"\n  * "계약서 수정안 만들어줘"\n\n## Chain-of-Thought Agent 선택 프로세스\n\n다음 단계를 **순서대로** 따라 최적의 Agent 조합을 선택하세요:\n\n### 1단계: 질문 요구사항 파악\n- 단순 정보 조회인가? → search_team만 필요\n- 판단/평가가 필요한가? → search + analysis 필요\n- 해결책 제시가 필요한가? → search + analysis 필요\n- 문서 생성이 필요한가? → document_team 추가\n\n### 2단계: 작업 복잡도 판단\n- **단순** (검색만): "~이 뭐야?", "~알려줘" → search_team\n- **중간** (검색+판단): "~괜찮아?", "~적절해?" → search + analysis\n- **복잡** (종합 해결): 구체적 상황 + "어떻게 해야 해?" → search + analysis\n\n### 3단계: 의존성 분석\n- 독립적 작업: 단일 팀으로 처리 가능\n- 순차적 의존: 이전 결과 필요 → 여러 팀 순서대로\n- 병렬 가능: 동시 조회 가능 → coordination: "parallel"\n\n### 4단계: 최종 검증\n- 선택한 팀들로 질문에 완전히 답변 가능한가?\n- 불필요한 팀이 포함되지 않았는가?\n- 순서가 논리적인가? (데이터 흐름 고려)\n\n### 중요 원칙:\n- **법률 키워드만으로 판단하지 말 것**: "법적으로 어떻게 해야 해?" = 법률 검색 + 분석 필요\n- **상황 설명 + 해결책 요청** = 반드시 analysis_team 포함\n- **구체적 수치 비교** (3억→10억 같은) = analysis_team 필요\n\n## 의도별 Agent 매핑 가이드 (기본 가이드 - CoT로 조정 가능)\n\n| 의도 (Intent) | 기본 조합 | 상황별 조정 |\n|--------------|-----------|-------------|\n| LEGAL_CONSULT | ["search_team"] | 해결책 요청시 → + analysis_team |\n| MARKET_INQUIRY | ["search_team"] | 비교/평가시 → + analysis_team |\n| LOAN_CONSULT | ["search_team", "analysis_team"] | 계산 필수 |\n| CONTRACT_CREATION | ["document_team"] | 검토 후 작성 → search + document |\n| CONTRACT_REVIEW | ["search_team", "analysis_team"] | 법률 검토 + 리스크 분석 |\n| COMPREHENSIVE | ["search_team", "analysis_team"] | **항상 분석 포함** |\n| RISK_ANALYSIS | ["analysis_team"] | 법률 근거 필요시 → search + analysis |\n| UNCLEAR | ["search_team", "analysis_team"] | 포괄적 대응 |\n\n**중요**: 위 매핑은 **기본 가이드**일 뿐입니다.\n실제 질문의 내용(CoT 분석 결과)에 따라 조정하세요!\n\n## 복합 질문 처리 예시 (CoT 적용)\n\n### 예시 1: 순차적 처리\n질문: "강남구 시세 확인하고 투자 가치 분석해줘"\n**CoT 분석**:\n1. 요구사항: 시세 조회 + 투자 가치 평가\n2. 복잡도: 중간 (검색 + 분석)\n3. 의존성: 시세 데이터 → 투자 분석 (순차)\n4. 검증: search만으로는 "투자 가치 평가" 불가능\n\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "1단계: 시세 조회+투자 평가 필요. 2단계: 중간 복잡도. 3단계: 순차 의존. 4단계: search로 시세 수집 후 analysis로 투자 가치 평가 필요",\n    "coordination": "sequential"\n}\n```\n\n### 예시 2: 단순 정보 조회\n질문: "전세금 인상률 한도가 얼마야?"\n**CoT 분석**:\n1. 요구사항: 단순 사실 확인\n2. 복잡도: 낮음 (정보 확인형)\n3. 의존성: 없음\n4. 검증: search_team만으로 충분\n\n```json\n{\n    "selected_agents": ["search_team"],\n    "reasoning": "1단계: 단순 정보 조회. 2단계: 저복잡도. 3단계: 독립적. 4단계: 법률 검색만으로 답변 가능",\n    "coordination": "single"\n}\n```\n\n### 예시 3: 해결책 요청 (핵심 예시!)\n질문: "집주인이 전세금 3억을 10억으로 올려달래. 법적으로 어떻게 해야 해?"\n의도: COMPREHENSIVE\n**CoT 분석**:\n1. 요구사항: 상황 설명 + 해결책 요청\n2. 복잡도: 높음 (구체적 상황 + 수치 비교)\n3. 의존성: 법률 확인 → 상황 분석 → 해결책 제시\n4. 검증: "법적으로"만 보고 search만 선택하면 불충분! 해결책 제시 필요\n\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "1단계: 법률 + 상황 분석 + 해결책 필요. 2단계: 고복잡도(3억→10억 비정상). 3단계: 순차(법률 확인 후 타당성 분석). 4단계: \'어떻게 해야\' = 단순 법률 조회 아님, 분석 필수",\n    "coordination": "sequential",\n    "confidence": 0.95\n}\n```\n\n## 응답 형식 (JSON)\n\n```json\n{\n    "selected_agents": ["선택된 agent/team 목록"],\n    "reasoning": "선택 이유를 구체적으로 설명. 각 Agent의 역할과 처리 순서 포함",\n    "coordination": "single/sequential/parallel/pipeline",\n    "dependencies": {"agent2": ["agent1"]},\n    "estimated_time": 30,\n    "confidence": 0.9\n}\n```\n\n## 선택 가이드라인\n\n1. **최소 Agent 원칙**: 가능한 적은 수의 Agent로 처리\n2. **전문성 우선**: 해당 작업에 가장 전문적인 Agent 선택\n3. **효율성 고려**: 병렬 처리 가능한 경우 명시\n4. **의존성 관리**: 데이터 흐름을 고려한 순서 지정\n5. **폴백 전략**: 불확실한 경우 ["search_team", "analysis_team"] 조합\n\n## 주의사항\n\n- selected_agents는 반드시 배열 형태\n- Agent 이름은 정확히: "search_team", "analysis_team", "document_team"\n- 최소 1개, 최대 3개 선택\n- 순서는 실행 우선순위 (앞에 있을수록 먼저 실행)\n- reasoning은 상세하고 논리적으로 작성\n- coordination 필드로 실행 방식 명시\n- 복합 질문의 경우 의존성 관계 명확히 표시'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 16:05:56,493 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 16:05:56,493 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 16:05:56,493 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 16:05:56,493 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 16:05:56,493 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 16:05:56,493 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 16:06:00,905 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 07:06:00 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'4093'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'4230'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9921'), (b'x-ratelimit-remaining-tokens', b'197885'), (b'x-ratelimit-reset-requests', b'11m21.482s'), (b'x-ratelimit-reset-tokens', b'634ms'), (b'x-request-id', b'req_0ba8c4452dab48868e186497d017210f'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b12cfea983091-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 16:06:00,905 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 16:06:00,905 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 16:06:00,911 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 16:06:00,911 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 16:06:00,911 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 16:06:00,911 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 07:06:00 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '4093', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '4230', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9921', 'x-ratelimit-remaining-tokens': '197885', 'x-ratelimit-reset-requests': '11m21.482s', 'x-ratelimit-reset-tokens': '634ms', 'x-request-id': 'req_0ba8c4452dab48868e186497d017210f', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b12cfea983091-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 16:06:00,911 - openai._base_client - DEBUG - request_id: req_0ba8c4452dab48868e186497d017210f
2025-10-05 16:06:00,911 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: agent_selection | Model: gpt-4o-mini-2024-07-18 | Tokens: 2562 (prompt: 2370, completion: 192)
2025-10-05 16:06:00,911 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM agent selection reasoning: 1단계: LTV와 DTI 규제를 확인하고 대출 가능액을 산정하는 요청이므로, 법률 정보 검색과 데이터 분석이 필요합니다. 2단계: 대출 상담은 중간 복잡도로, 검색과 분석이 모두 필요합니다. 3단계: LTV와 DTI 규제 정보를 검색한 후, 이를 바탕으로 대출 가능액을 분석해야 하므로 순차적 의존성이 있습니다. 4단계: 단순히 법률 정보만으로는 대출 가능액 산정이 불가능하므로, 분석 팀이 반드시 포함되어야 합니다.
2025-10-05 16:06:00,911 - app.service_agent.cognitive_agents.planning_agent - INFO - ✅ Primary LLM selected agents: ['search_team', 'analysis_team']
2025-10-05 16:06:00,912 - __main__ - INFO -   의도: 대출상담
2025-10-05 16:06:00,912 - __main__ - INFO -   신뢰도: 0.85
2025-10-05 16:06:00,912 - __main__ - INFO -   추천 Agent: ['search_team', 'analysis_team']
2025-10-05 16:06:00,912 - __main__ - INFO - 
[Step 2] Query Decomposition...
2025-10-05 16:06:00,912 - app.service_agent.cognitive_agents.query_decomposer - INFO - Decomposing query: LTV, DTI 규제 확인하고 대출 가능액 산정해줘...
2025-10-05 16:06:00,912 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-84a80a86-16ec-4cac-b6a0-dcf1182271f6', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 질문 분해 전문가입니다.\n복잡한 사용자 질문을 독립적으로 처리 가능한 작업 단위로 분해하는 것이 목표입니다.\n\n## Chain-of-Thought 분해 프로세스:\n\n### 1단계: 복합 질문 여부 판단\n- 단순 정보 조회만 필요한가? → is_compound: false\n- **다음 중 하나라도 해당하면 is_compound: true**:\n  * "그리고", "그 다음", "한 후" 같은 연결어로 여러 요청 연결\n  * 명시적으로 2개 이상의 작업 요청 (예: "시세 확인하고 대출 계산해줘")\n  * 상황 설명 + 해결책 요청 (예: "3억→10억 올려달래. 어떻게 해야 해?")\n  * 해결책을 위해 여러 단계 처리 필요 (검색 → 분석 → 제안)\n\n### 2단계: 필요 작업 식별\n- 정보 수집이 필요한가? → search 작업\n- 평가/판단이 필요한가? → analysis 작업\n- 문서 생성이 필요한가? → generation 작업\n- **해결책 요청**인가? → search + analysis (최소 2개)\n\n### 3단계: 작업 순서 결정\n- 독립적 작업: 병렬 가능\n- 이전 결과 필요: 순차 실행 (depends_on 설정)\n\n## 중요 원칙:\n1. 각 작업은 하나의 명확한 목표를 가져야 합니다\n2. 작업 간 의존성을 명확히 파악해야 합니다\n3. 병렬 처리 가능한 작업은 구분해야 합니다\n4. **주의**: "어떻게 해야", "방법 알려줘" 같은 해결책 요청은 복합 질문!\n\n## 작업 유형 (type):\n- search: 정보 검색 (법률, 시세, 대출 정보 등)\n- analysis: 데이터 분석 (리스크 평가, 시장 분석 등)\n- generation: 문서 생성 (계약서 작성 등)\n- review: 검토/평가 (계약서 검토, 조건 확인 등)\n- calculation: 계산/산출 (대출 한도, 세금 등)\n- comparison: 비교 분석 (여러 옵션 비교)\n\n## 담당 팀 (agent):\n- search_team: 법률, 시세, 대출 정보 검색\n- analysis_team: 데이터 분석, 리스크 평가, 계산\n- document_team: 문서 생성, 계약서 작성\n\n## 학습 예시:\n\n### 예시 1: 복합 질문 (순차적)\n질문: "강남구 아파트 시세 확인하고 대출 가능 금액 계산해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "강남구 아파트 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "대출 가능 금액 계산",\n            "type": "calculation",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "required_data": {"price": "task_0.result.price"},\n            "estimated_time": 15\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "시세 정보가 있어야 대출 금액 계산이 가능하므로 순차 실행"\n}\n```\n\n### 예시 2: 복합 질문 (병렬 가능)\n질문: "이 지역 전세 시세와 매매 시세 모두 알려주고 비교 분석해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "전세 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "매매 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "전세/매매 시세 비교 분석",\n            "type": "comparison",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0", "task_1"],\n            "required_data": {\n                "lease_price": "task_0.result",\n                "sale_price": "task_1.result"\n            },\n            "estimated_time": 25\n        }\n    ],\n    "execution_mode": "mixed",\n    "parallel_groups": [["task_0", "task_1"], ["task_2"]],\n    "reasoning": "시세 조회는 독립적이므로 병렬 처리, 비교는 두 결과 필요"\n}\n```\n\n### 예시 3: 복합 질문 (3단계 이상)\n질문: "이 계약서 검토해서 위험한 부분 찾고 수정안 만들어서 최종 계약서 작성해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "계약서 내용 전체 검토",\n            "type": "review",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 30\n        },\n        {\n            "description": "위험 요소 및 문제점 분석",\n            "type": "analysis",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "estimated_time": 25\n        },\n        {\n            "description": "수정안 제안 생성",\n            "type": "generation",\n            "agent": "document_team",\n            "priority": 3,\n            "depends_on": ["task_1"],\n            "estimated_time": 20\n        },\n        {\n            "description": "최종 계약서 작성",\n            "type": "generation",\n            "agent": "document_team",\n            "priority": 4,\n            "depends_on": ["task_2"],\n            "estimated_time": 30\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "각 단계가 이전 결과에 의존하므로 순차 실행 필요"\n}\n```\n\n### 예시 4: 단순 질문 (분해 불필요)\n질문: "전세금 인상률 상한이 얼마야?"\n분해:\n```json\n{\n    "is_compound": false,\n    "sub_tasks": [\n        {\n            "description": "전세금 인상률 상한 법률 정보 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 15\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "단일 정보 조회 요청으로 분해 불필요"\n}\n```\n\n### 예시 5: 조건부 실행\n질문: "이 물건 시세 확인하고 적정가면 대출 상담도 받고 싶어"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "물건 시세 조회 및 적정성 평가",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 25\n        },\n        {\n            "description": "대출 상담 정보 제공",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "optional": true,\n            "context": {"condition": "if_reasonable_price"},\n            "estimated_time": 20\n        }\n    ],\n    "execution_mode": "conditional",\n    "reasoning": "시세 확인 결과에 따라 대출 상담 진행 여부 결정"\n}\n```\n\n### 예시 6: 상황 설명 + 해결책 요청 (핵심 패턴!)\n질문: "집주인이 전세금 3억을 10억으로 올려달래. 법적으로 어떻게 해야 해?"\n**CoT 분석**:\n1. 질문 분석: 상황 설명 + 해결책 요청\n2. 연결어: 없지만, "어떻게 해야" = 해결책 요청\n3. 의존성: 법률 확인 → 상황 분석 → 대응 방안\n4. 복합 여부: **YES** (해결책을 위해 여러 단계 필요)\n\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "전세금 인상 한도 관련 법률 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "3억→10억 인상의 법적 타당성 및 적정성 분석",\n            "type": "analysis",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "required_data": {"legal_limit": "task_0.result", "current": 300000000, "requested": 1000000000},\n            "estimated_time": 25\n        },\n        {\n            "description": "구체적 대응 방안 및 해결책 제시",\n            "type": "analysis",\n            "agent": "analysis_team",\n            "priority": 3,\n            "depends_on": ["task_1"],\n            "estimated_time": 20\n        }\n    ],\n    "execution_mode": "sequential",\n    "confidence": 0.95,\n    "reasoning": "상황 설명+해결책 요청 패턴. \'어떻게 해야\'는 단순 정보 조회가 아닌 종합 해결책 필요. 법률 조회 → 상황 분석 → 해결책 제시 3단계 순차 처리"\n}\n```\n\n## Chain-of-Thought 프로세스:\n\n1. **질문 분석**: 어떤 정보나 작업을 요구하는가?\n2. **연결어 확인**: "그리고", "또한", "해서", "한 후" 등이 있는가?\n3. **의존성 파악**: 어떤 작업이 다른 작업의 결과를 필요로 하는가?\n4. **병렬성 판단**: 독립적으로 실행 가능한 작업이 있는가?\n5. **최적화**: 불필요한 분해는 없는가?\n\n## 응답 형식 (JSON):\n\n{\n    "is_compound": true/false,\n    "sub_tasks": [\n        {\n            "description": "작업 설명",\n            "type": "작업 유형",\n            "agent": "담당 팀",\n            "priority": 우선순위 (1이 가장 높음),\n            "depends_on": ["선행 작업 ID 리스트"],\n            "required_data": {"필요한 데이터 매핑"},\n            "estimated_time": 예상 소요 시간(초),\n            "optional": true/false,\n            "context": {"추가 컨텍스트"}\n        }\n    ],\n    "execution_mode": "sequential/parallel/mixed/conditional",\n    "parallel_groups": [["병렬 실행 가능한 작업 ID 그룹"]],\n    "confidence": 0.0-1.0,\n    "reasoning": "분해 결정의 이유와 근거"\n}\n\n## 분해 가이드라인:\n\n1. **분해가 필요한 경우**:\n   - 여러 종류의 정보를 요청하는 경우\n   - 순차적 처리가 필요한 경우 (A의 결과로 B 수행)\n   - 서로 다른 팀의 전문성이 필요한 경우\n\n2. **분해가 불필요한 경우**:\n   - 단일 정보 조회\n   - 단순한 질문-답변\n   - 하나의 팀에서 완전히 처리 가능한 경우\n\n3. **병렬 처리 기준**:\n   - 서로 독립적인 정보 조회\n   - 의존성이 없는 분석 작업\n   - 동시에 진행해도 충돌하지 않는 작업\n\n4. **우선순위 설정**:\n   - 의존성이 없는 작업: priority 1\n   - 1차 의존 작업: priority 2\n   - 2차 의존 작업: priority 3\n   - 이런 식으로 증가\n\n현재 의도: 대출상담\n추출된 엔티티: None\n\n분석할 질문: LTV, DTI 규제 확인하고 대출 가능액 산정해줘'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 16:06:00,913 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 16:06:00,913 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 16:06:00,913 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 16:06:00,913 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 16:06:00,913 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 16:06:00,913 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 16:06:05,259 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 07:06:05 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'4135'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'4160'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9920'), (b'x-ratelimit-remaining-tokens', b'197335'), (b'x-ratelimit-reset-requests', b'11m25.501s'), (b'x-ratelimit-reset-tokens', b'799ms'), (b'x-request-id', b'req_64ec11148ffc46f69b61a43f49f41e74'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b12eb8d373091-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 16:06:05,260 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 16:06:05,260 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 16:06:05,266 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 16:06:05,266 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 16:06:05,266 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 16:06:05,266 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 07:06:05 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '4135', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '4160', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9920', 'x-ratelimit-remaining-tokens': '197335', 'x-ratelimit-reset-requests': '11m25.501s', 'x-ratelimit-reset-tokens': '799ms', 'x-request-id': 'req_64ec11148ffc46f69b61a43f49f41e74', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b12eb8d373091-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 16:06:05,266 - openai._base_client - DEBUG - request_id: req_64ec11148ffc46f69b61a43f49f41e74
2025-10-05 16:06:05,267 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: query_decomposition | Model: gpt-4o-mini-2024-07-18 | Tokens: 2973 (prompt: 2696, completion: 277)
2025-10-05 16:06:05,267 - app.service_agent.cognitive_agents.query_decomposer - INFO - Successfully decomposed into 3 tasks
2025-10-05 16:06:05,267 - __main__ - INFO -   복합 질문: True
2025-10-05 16:06:05,267 - __main__ - INFO -   작업 수: 3
2025-10-05 16:06:05,267 - __main__ - INFO -   실행 모드: conditional
2025-10-05 16:06:05,267 - __main__ - INFO -     - task_0: LTV 규제 정보 조회 (search_team)
2025-10-05 16:06:05,267 - __main__ - INFO -     - task_1: DTI 규제 정보 조회 (search_team)
2025-10-05 16:06:05,267 - __main__ - INFO -     - task_2: 대출 가능액 산정 (analysis_team)
2025-10-05 16:06:05,267 - __main__ - INFO - 
[Step 3] Comprehensive Plan 생성...
2025-10-05 16:06:05,267 - app.service_agent.cognitive_agents.planning_agent - INFO - Creating comprehensive plan for query: LTV, DTI 규제 확인하고 대출 가능액 산정해줘...
2025-10-05 16:06:05,267 - app.service_agent.cognitive_agents.planning_agent - INFO - Analyzing intent for query: LTV, DTI 규제 확인하고 대출 가능액 산정해줘...
2025-10-05 16:06:05,267 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-2761e610-10f0-4e62-90ca-a18b50079dbd', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 의도 분석 전문가입니다.\n사용자의 질문을 정확히 이해하고, 어떤 종류의 도움이 필요한지 분류해야 합니다.\n\n## Chain-of-Thought 분석 프로세스\n\n질문을 분석할 때 다음 단계를 **순서대로** 따르세요:\n\n### 1단계: 질문 구조 파악\n- 단순 정보 요청인가? (예: "~이 뭐야?", "~알려줘")\n- 상황 설명이 포함되어 있는가? (배경, 현재 상태)\n- 구체적 수치나 데이터가 있는가? (금액, 비율, 기간 등)\n- 문제 해결을 요구하는가? (예: "어떻게 해야 해?", "방법 알려줘")\n\n### 2단계: 요청 유형 판단\n- **정보 확인형**: 사실, 개념, 규정 확인 → 검색만으로 충분\n- **평가/판단형**: "괜찮아?", "적절해?", "문제있어?" → 검색 + 분석 필요\n- **해결책 요청형**: "어떻게?", "방법?", "대처?" → 검색 + 분석 + 제안 필요\n- **비교/선택형**: "A vs B", "어느게 나아?" → 검색 + 분석(비교) 필요\n\n### 3단계: 복잡도 평가\n- **저**: 단일 개념/사실 확인 (예: "전세금 인상률 한도?")\n- **중**: 특정 상황 + 판단 (예: "3억을 5억으로 올려달래. 가능해?")\n- **고**: 복잡한 상황 + 여러 조건 + 해결책 (예: "10년 거주, 3억→10억 요구. 어떻게 해야 해?")\n\n### 4단계: 필요한 처리 결정\n- **검색만**: 정보 확인형 + 저복잡도\n- **검색+분석**: 평가/판단형 OR 중복잡도 OR 수치 비교 포함\n- **종합처리**: 해결책 요청형 OR 고복잡도 OR 여러 조건 동시 고려\n\n### 5단계: 최종 검증\n- 선택한 의도로 사용자 질문에 완전히 답변 가능한가?\n- 단순 정보 제공으로 끝나는가, 아니면 추가 분석/판단이 필요한가?\n- 상황 설명이 있으면서 "해결", "방법", "어떻게" 등이 있으면 → COMPREHENSIVE 고려\n\n## 중요: 복합 질문 처리\n복합적인 질문(여러 의도가 섞인 질문)의 경우, 가장 핵심적인 의도를 파악하되,\nsub_intents 필드에 부가적인 의도들도 함께 기록해주세요.\n\n**특히 주의**:\n- 법률 키워드가 있어도, "해결방법", "어떻게 해야" 같은 표현이 있으면 단순 LEGAL_CONSULT가 아닐 수 있음\n- 구체적 상황(금액, 기간 등) + 해결책 요구 = COMPREHENSIVE 또는 복합 의도로 분류\n\n## 분류 카테고리 설명:\n\n1. **LEGAL_CONSULT (법률상담)**\n   - 설명: 부동산 관련 법률, 권리, 의무에 대한 질문\n   - 예시:\n     * 단순: "전세금 5% 인상이 가능한가요?", "임대차계약 갱신 거부할 수 있나요?"\n     * 복합: "전세금 인상 가능한지 확인하고 법적 근거도 알려주세요"\n   - 키워드: 법, 전세, 임대, 보증금, 계약, 권리, 의무, 갱신, 임차인, 임대인, 법률, 규정, 조항\n   - 필요한 처리: 법률 데이터베이스 검색, 관련 법조항 찾기\n\n2. **MARKET_INQUIRY (시세조회)**\n   - 설명: 부동산 시장 가격, 시세, 거래 동향에 대한 질문\n   - 예시:\n     * 단순: "강남구 아파트 전세 시세 알려주세요", "서초동 매매가 얼마나 올랐나요?"\n     * 복합: "강남구 시세 확인하고 대출 가능 금액도 계산해줘"\n   - 키워드: 시세, 가격, 매매가, 전세가, 월세, 시장, 동향, 평균, 지역명, 상승률, 하락률\n   - 필요한 처리: 부동산 시세 데이터 조회, 지역별 가격 분석\n\n3. **LOAN_CONSULT (대출상담)**\n   - 설명: 주택담보대출, 전세자금대출 등 금융 관련 질문\n   - 예시:\n     * 단순: "전세자금대출 한도가 얼마인가요?", "LTV가 뭔가요?"\n     * 복합: "대출 한도 확인하고 금리 비교도 해주세요"\n   - 키워드: 대출, 금리, 한도, 조건, 상환, LTV, DTI, DSR, 담보, 금융, 은행\n   - 필요한 처리: 대출 상품 조회, 금리 정보 검색, 한도 계산\n\n4. **CONTRACT_CREATION (계약서작성)**\n   - 설명: 새로운 계약서나 문서를 작성해달라는 요청\n   - 예시:\n     * 단순: "임대차계약서 작성해주세요", "전세계약서 초안 만들어주세요"\n     * 복합: "계약서 작성하고 주의사항도 검토해주세요"\n   - 키워드: 작성, 만들, 생성, 초안, 계약서, 문서, 양식\n   - 필요한 처리: 문서 생성 에이전트 호출, 템플릿 기반 작성\n\n5. **CONTRACT_REVIEW (계약서검토)**\n   - 설명: 기존 계약서나 문서를 검토해달라는 요청\n   - 예시:\n     * 단순: "이 계약서 검토해주세요", "특약사항 문제없나요?"\n     * 복합: "계약서 검토하고 수정사항도 제안해주세요"\n   - 키워드: 검토, 확인, 점검, 리뷰, 분석해, 살펴봐, 체크\n   - 필요한 처리: 문서 분석, 위험 요소 식별, 개선사항 제안\n\n6. **COMPREHENSIVE (종합분석)**\n   - 설명: 여러 측면을 종합적으로 분석해달라는 요청, 또는 복잡한 상황에 대한 해결책 요청\n   - 예시:\n     * 단순: "이 물건 전체적으로 분석해주세요"\n     * 복합: "시세, 법률, 대출 모두 검토해서 종합 의견 주세요"\n     * 해결형: "10년 거주했는데 전세금 3억을 10억으로 올려달래. 어떻게 해야 해?"\n     * 상황+해결: "집주인이 계약 갱신 거부했어. 법적으로 어떻게 대응해야 할까?"\n   - 키워드: 종합, 전체, 모든, 전반적, 종합적, 평가, 분석, 어떻게, 방법, 해결, 대처\n   - 패턴: 구체적 상황 설명 + "어떻게/방법/해결" 요청\n   - 필요한 처리: 다중 데이터 소스 통합 분석, 상황 평가, 해결책 제시\n\n7. **RISK_ANALYSIS (리스크분석)**\n   - 설명: 위험 요소나 주의사항에 대한 질문\n   - 예시:\n     * 단순: "이 계약 위험한가요?", "주의할 점 알려주세요"\n     * 복합: "리스크 분석하고 대안도 제시해주세요"\n   - 키워드: 위험, 리스크, 주의, 문제점, 조심, 걱정, 우려\n   - 필요한 처리: 위험 요소 분석, 주의사항 추출\n\n8. **UNCLEAR (불분명)**\n   - 설명: 의도를 명확히 파악하기 어려운 질문\n   - 예시: "이거 좀 봐주세요", "어떻게 해야 할까요?", "도와주세요"\n   - 처리: 추가 질문으로 의도 명확화 필요\n\n9. **IRRELEVANT (무관)**\n   - 설명: 부동산과 전혀 관련 없는 질문\n   - 예시: "날씨 어때?", "저녁 뭐 먹지?", "주식 추천해줘"\n   - 처리: 부동산 관련 질문을 유도\n\n## 복합 질문 예시와 분석 (CoT 적용):\n\n### 예시 1: "강남구 아파트 시세 알려주고 전세자금대출 가능한지도 확인해줘"\n**CoT 분석**:\n1. 구조: 두 개의 요청 ("시세" + "대출")\n2. 유형: 정보 확인형 (둘 다)\n3. 복잡도: 중 (두 가지 독립적 조회)\n4. 필요 처리: 검색 + 계산/분석\n\n**결론**:\n- 주 의도: MARKET_INQUIRY (시세 조회가 먼저 필요)\n- 부가 의도: LOAN_CONSULT (대출 확인)\n- 분해: ["강남구 아파트 시세 조회", "전세자금대출 가능 여부 확인"]\n\n### 예시 2: "이 계약서 검토해서 위험한 부분 있는지 알려주고 수정 제안도 해줘"\n**CoT 분석**:\n1. 구조: 검토 + 위험 평가 + 수정안\n2. 유형: 평가/판단형 + 해결책 요청형\n3. 복잡도: 고 (3단계 처리)\n4. 필요 처리: 검토 + 분석 + 문서 생성\n\n**결론**:\n- 주 의도: CONTRACT_REVIEW (계약서 검토)\n- 부가 의도: RISK_ANALYSIS (위험 분석)\n- 분해: ["계약서 전체 검토", "위험 요소 식별", "수정사항 제안"]\n\n### 예시 3: "집주인이 짜증나, 10년 살았는데 전세금 3억을 10억으로 올려달래. 법적으로 해결방법 알려줘"\n**CoT 분석**:\n1. 구조: 상황 설명 (10년 거주, 3억→10억) + 해결책 요청\n2. 유형: 해결책 요청형 (단순 정보 X)\n3. 복잡도: 고 (구체적 상황 + 수치 비교 + 법률 + 대응방안)\n4. 필요 처리: 법률 검색 + 상황 분석 + 해결책 제시\n\n**결론**:\n- 주 의도: COMPREHENSIVE (복잡한 상황에 대한 종합 해결)\n- 부가 의도: LEGAL_CONSULT, RISK_ANALYSIS\n- 분해: ["전세금 인상 한도 법률 조회", "3억→10억 인상의 타당성 분석", "구체적 대응 방안 제시"]\n- **이유**: "법적으로"라는 키워드가 있지만, 단순 법률 확인이 아니라 구체적 상황에 대한 해결책을 요구하므로 COMPREHENSIVE\n\n### 예시 4: "전세금 인상률 상한이 얼마야?"\n**CoT 분석**:\n1. 구조: 단순 사실 확인\n2. 유형: 정보 확인형\n3. 복잡도: 저 (단일 개념)\n4. 필요 처리: 검색만\n\n**결론**:\n- 주 의도: LEGAL_CONSULT (법률 정보 조회)\n- 부가 의도: 없음\n- 분해: 필요 없음\n\n## 응답 형식 (JSON 형식으로 응답):\n\n```json\n{\n    "intent": "LEGAL_CONSULT",\n    "confidence": 0.9,\n    "keywords": ["전세금", "인상", "제한"],\n    "sub_intents": [],\n    "is_compound": false,\n    "decomposed_tasks": [],\n    "entities": {\n        "location": "강남구",\n        "price": "5억",\n        "contract_type": "전세",\n        "date": "2024년",\n        "area": "84㎡",\n        "action_verbs": ["확인", "검토"]\n    },\n    "reasoning": "전세금 인상에 대한 법률 질문이므로 LEGAL_CONSULT로 분류"\n}\n```\n\n응답 규칙:\n- intent: 위 9개 카테고리 중 하나 (대문자_언더스코어 형식)\n- confidence: 0.0~1.0 (0.8 이상이면 매우 확실, 0.5 미만이면 불확실)\n- keywords: 추출된 주요 키워드 목록\n- sub_intents: 복합 질문일 경우 부가적인 의도들\n- is_compound: 복합 질문 여부 (true/false)\n- decomposed_tasks: 복합 질문을 분해한 개별 작업들\n- entities: 추출된 엔티티 정보\n- reasoning: **반드시 CoT 5단계를 거쳐 분석한 과정을 포함** (구조 파악 → 유형 판단 → 복잡도 평가 → 필요 처리 → 최종 검증)\n\n## reasoning 작성 예시:\n"1단계(구조): 상황 설명(10년 거주, 3억→10억) + 해결책 요청 포함.\n2단계(유형): 해결책 요청형 - 단순 정보가 아닌 대응방안 필요.\n3단계(복잡도): 고 - 구체적 수치 비교와 복잡한 상황.\n4단계(처리): 법률 검색 + 상황 분석 + 해결책 제시 필요.\n5단계(검증): LEGAL_CONSULT만으로는 불충분, 종합적 분석 필요 → COMPREHENSIVE 선택"\n\n## 판단 가이드:\n- 여러 의도가 섞여있다면, 가장 주된 의도를 intent에, 나머지를 sub_intents에 기록\n- "그리고", "또한", "함께", "같이" 등의 연결어가 있으면 복합 질문일 가능성 높음\n- 법률 관련 키워드가 있으면 LEGAL_CONSULT 우선\n- 가격/시세 언급이 명확하면 MARKET_INQUIRY\n- 계약서라는 단어와 함께 "작성/만들기"가 있으면 CONTRACT_CREATION\n- 계약서라는 단어와 함께 "검토/확인"이 있으면 CONTRACT_REVIEW\n- 불확실하면 confidence를 낮게 설정하고 UNCLEAR 선택\n- 복합 질문은 is_compound를 true로 설정하고 개별 작업으로 분해\n\n분석할 질문: LTV, DTI 규제 확인하고 대출 가능액 산정해줘'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 16:06:05,268 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 16:06:05,268 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 16:06:05,268 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 16:06:05,268 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 16:06:05,268 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 16:06:05,269 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 16:06:11,355 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 07:06:11 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'5806'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'5895'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9920'), (b'x-ratelimit-remaining-tokens', b'197241'), (b'x-ratelimit-reset-requests', b'11m29.709s'), (b'x-ratelimit-reset-tokens', b'827ms'), (b'x-request-id', b'req_6ecff72bd7654132aedc23e6ee59db46'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b1306ccd53091-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 16:06:11,355 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 16:06:11,355 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 16:06:11,357 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 16:06:11,357 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 16:06:11,357 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 16:06:11,357 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 07:06:11 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '5806', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '5895', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9920', 'x-ratelimit-remaining-tokens': '197241', 'x-ratelimit-reset-requests': '11m29.709s', 'x-ratelimit-reset-tokens': '827ms', 'x-request-id': 'req_6ecff72bd7654132aedc23e6ee59db46', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b1306ccd53091-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 16:06:11,357 - openai._base_client - DEBUG - request_id: req_6ecff72bd7654132aedc23e6ee59db46
2025-10-05 16:06:11,357 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: intent_analysis | Model: gpt-4o-mini-2024-07-18 | Tokens: 3442 (prompt: 3186, completion: 256)
2025-10-05 16:06:11,357 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM Intent Analysis Result: {'intent': 'LOAN_CONSULT', 'confidence': 0.85, 'keywords': ['LTV', 'DTI', '대출', '가능액', '산정'], 'sub_intents': [], 'is_compound': True, 'decomposed_tasks': ['LTV 규제 확인', 'DTI 규제 확인', '대출 가능액 산정'], 'entities': {'loan_type': '주택담보대출', 'action_verbs': ['확인', '산정']}, 'reasoning': '1단계(구조): LTV와 DTI 규제 확인 요청 + 대출 가능액 산정 포함. 2단계(유형): 대출 관련 정보 확인 및 계산 요청. 3단계(복잡도): 중 - 두 가지 규제 확인과 대출 가능액 산정이 필요. 4단계(처리): LTV와 DTI 규제 검색 후 대출 가능액 계산 필요. 5단계(검증): 대출 관련 정보와 계산이 포함되어 있으므로 LOAN_CONSULT로 분류.'}
2025-10-05 16:06:11,358 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-266f7df6-c9f7-4eb2-af17-3e80e9564b21', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 Agent 선택 전문가입니다.\n사용자의 요청에 가장 적합한 Agent/Team을 선택하는 것이 목표입니다.\n\n## 현재 상황\n\n**사용자 질문:** LTV, DTI 규제 확인하고 대출 가능액 산정해줘\n**분석된 의도:** 대출상담\n**추출된 키워드:** [\'LTV\', \'DTI\', \'대출\', \'가능액\', \'산정\']\n\n## 사용 가능한 Agent/Team 정보\n\n{\'search_team\': {\'name\': \'search_team\', \'capabilities\': \'법률 검색, 부동산 시세 조회, 대출 상품 검색\', \'tools\': [\'legal_search\', \'market_data\', \'loan_data\'], \'use_cases\': [\'법률 상담\', \'시세 조회\', \'대출 정보\']}, \'analysis_team\': {\'name\': \'analysis_team\', \'capabilities\': \'데이터 분석, 리스크 평가, 인사이트 생성, 추천\', \'tools\': [\'data_analyzer\', \'risk_evaluator\'], \'use_cases\': [\'시장 분석\', \'리스크 평가\', \'투자 분석\']}, \'document_team\': {\'name\': \'document_team\', \'capabilities\': \'계약서 작성, 문서 생성, 문서 검토\', \'tools\': [\'document_generator\', \'contract_reviewer\'], \'use_cases\': [\'계약서 작성\', \'문서 검토\']}}\n\n## Agent 역할 및 상세 가이드\n\n### 1. search_team (검색 팀)\n- **주요 기능**: 정보 검색 및 데이터 수집\n- **전문 분야**:\n  * 법률 정보 검색 (전세법, 임대차보호법, 부동산 관련 법규)\n  * 부동산 시세 조회 (매매가, 전세가, 월세, 실거래가)\n  * 대출 상품 정보 검색 (금리, 한도, 조건)\n  * 지역 정보 및 인프라 조회\n- **도구**: legal_search, market_data, loan_data\n- **적합한 작업**: 정보 조회, 데이터 수집, 법률 확인, 시세 파악\n- **예시**:\n  * "전세금 5% 인상 가능한가요?"\n  * "강남구 아파트 전세 시세"\n  * "전세자금대출 한도 얼마?"\n\n### 2. analysis_team (분석 팀)\n- **주요 기능**: 데이터 분석 및 평가\n- **전문 분야**:\n  * 시장 동향 분석 (상승률, 하락률, 추세)\n  * 리스크 평가 (계약, 투자 위험도)\n  * 투자 수익률 계산 (ROI, 월세 수익률)\n  * 대출 한도 및 조건 분석 (LTV, DTI, DSR)\n  * 비교 분석 (지역별, 상품별)\n- **도구**: data_analyzer, risk_evaluator, calculator\n- **적합한 작업**: 데이터 분석, 리스크 평가, 계산, 비교, 예측\n- **의존성**: 보통 search_team의 데이터가 필요\n- **예시**:\n  * "이 지역 투자 가치 분석해줘"\n  * "계약 리스크 평가해줘"\n  * "대출 가능 금액 계산해줘"\n\n### 3. document_team (문서 팀)\n- **주요 기능**: 문서 생성 및 관리\n- **전문 분야**:\n  * 계약서 작성 (임대차, 매매, 전세)\n  * 문서 템플릿 관리\n  * 특약사항 생성\n  * 계약서 수정안 작성\n  * 법률 문서 검토\n- **도구**: document_generator, contract_template, contract_reviewer\n- **적합한 작업**: 문서 작성, 계약서 생성, 문서 수정, 검토\n- **예시**:\n  * "임대차계약서 작성해줘"\n  * "특약사항 추가해줘"\n  * "계약서 수정안 만들어줘"\n\n## Chain-of-Thought Agent 선택 프로세스\n\n다음 단계를 **순서대로** 따라 최적의 Agent 조합을 선택하세요:\n\n### 1단계: 질문 요구사항 파악\n- 단순 정보 조회인가? → search_team만 필요\n- 판단/평가가 필요한가? → search + analysis 필요\n- 해결책 제시가 필요한가? → search + analysis 필요\n- 문서 생성이 필요한가? → document_team 추가\n\n### 2단계: 작업 복잡도 판단\n- **단순** (검색만): "~이 뭐야?", "~알려줘" → search_team\n- **중간** (검색+판단): "~괜찮아?", "~적절해?" → search + analysis\n- **복잡** (종합 해결): 구체적 상황 + "어떻게 해야 해?" → search + analysis\n\n### 3단계: 의존성 분석\n- 독립적 작업: 단일 팀으로 처리 가능\n- 순차적 의존: 이전 결과 필요 → 여러 팀 순서대로\n- 병렬 가능: 동시 조회 가능 → coordination: "parallel"\n\n### 4단계: 최종 검증\n- 선택한 팀들로 질문에 완전히 답변 가능한가?\n- 불필요한 팀이 포함되지 않았는가?\n- 순서가 논리적인가? (데이터 흐름 고려)\n\n### 중요 원칙:\n- **법률 키워드만으로 판단하지 말 것**: "법적으로 어떻게 해야 해?" = 법률 검색 + 분석 필요\n- **상황 설명 + 해결책 요청** = 반드시 analysis_team 포함\n- **구체적 수치 비교** (3억→10억 같은) = analysis_team 필요\n\n## 의도별 Agent 매핑 가이드 (기본 가이드 - CoT로 조정 가능)\n\n| 의도 (Intent) | 기본 조합 | 상황별 조정 |\n|--------------|-----------|-------------|\n| LEGAL_CONSULT | ["search_team"] | 해결책 요청시 → + analysis_team |\n| MARKET_INQUIRY | ["search_team"] | 비교/평가시 → + analysis_team |\n| LOAN_CONSULT | ["search_team", "analysis_team"] | 계산 필수 |\n| CONTRACT_CREATION | ["document_team"] | 검토 후 작성 → search + document |\n| CONTRACT_REVIEW | ["search_team", "analysis_team"] | 법률 검토 + 리스크 분석 |\n| COMPREHENSIVE | ["search_team", "analysis_team"] | **항상 분석 포함** |\n| RISK_ANALYSIS | ["analysis_team"] | 법률 근거 필요시 → search + analysis |\n| UNCLEAR | ["search_team", "analysis_team"] | 포괄적 대응 |\n\n**중요**: 위 매핑은 **기본 가이드**일 뿐입니다.\n실제 질문의 내용(CoT 분석 결과)에 따라 조정하세요!\n\n## 복합 질문 처리 예시 (CoT 적용)\n\n### 예시 1: 순차적 처리\n질문: "강남구 시세 확인하고 투자 가치 분석해줘"\n**CoT 분석**:\n1. 요구사항: 시세 조회 + 투자 가치 평가\n2. 복잡도: 중간 (검색 + 분석)\n3. 의존성: 시세 데이터 → 투자 분석 (순차)\n4. 검증: search만으로는 "투자 가치 평가" 불가능\n\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "1단계: 시세 조회+투자 평가 필요. 2단계: 중간 복잡도. 3단계: 순차 의존. 4단계: search로 시세 수집 후 analysis로 투자 가치 평가 필요",\n    "coordination": "sequential"\n}\n```\n\n### 예시 2: 단순 정보 조회\n질문: "전세금 인상률 한도가 얼마야?"\n**CoT 분석**:\n1. 요구사항: 단순 사실 확인\n2. 복잡도: 낮음 (정보 확인형)\n3. 의존성: 없음\n4. 검증: search_team만으로 충분\n\n```json\n{\n    "selected_agents": ["search_team"],\n    "reasoning": "1단계: 단순 정보 조회. 2단계: 저복잡도. 3단계: 독립적. 4단계: 법률 검색만으로 답변 가능",\n    "coordination": "single"\n}\n```\n\n### 예시 3: 해결책 요청 (핵심 예시!)\n질문: "집주인이 전세금 3억을 10억으로 올려달래. 법적으로 어떻게 해야 해?"\n의도: COMPREHENSIVE\n**CoT 분석**:\n1. 요구사항: 상황 설명 + 해결책 요청\n2. 복잡도: 높음 (구체적 상황 + 수치 비교)\n3. 의존성: 법률 확인 → 상황 분석 → 해결책 제시\n4. 검증: "법적으로"만 보고 search만 선택하면 불충분! 해결책 제시 필요\n\n```json\n{\n    "selected_agents": ["search_team", "analysis_team"],\n    "reasoning": "1단계: 법률 + 상황 분석 + 해결책 필요. 2단계: 고복잡도(3억→10억 비정상). 3단계: 순차(법률 확인 후 타당성 분석). 4단계: \'어떻게 해야\' = 단순 법률 조회 아님, 분석 필수",\n    "coordination": "sequential",\n    "confidence": 0.95\n}\n```\n\n## 응답 형식 (JSON)\n\n```json\n{\n    "selected_agents": ["선택된 agent/team 목록"],\n    "reasoning": "선택 이유를 구체적으로 설명. 각 Agent의 역할과 처리 순서 포함",\n    "coordination": "single/sequential/parallel/pipeline",\n    "dependencies": {"agent2": ["agent1"]},\n    "estimated_time": 30,\n    "confidence": 0.9\n}\n```\n\n## 선택 가이드라인\n\n1. **최소 Agent 원칙**: 가능한 적은 수의 Agent로 처리\n2. **전문성 우선**: 해당 작업에 가장 전문적인 Agent 선택\n3. **효율성 고려**: 병렬 처리 가능한 경우 명시\n4. **의존성 관리**: 데이터 흐름을 고려한 순서 지정\n5. **폴백 전략**: 불확실한 경우 ["search_team", "analysis_team"] 조합\n\n## 주의사항\n\n- selected_agents는 반드시 배열 형태\n- Agent 이름은 정확히: "search_team", "analysis_team", "document_team"\n- 최소 1개, 최대 3개 선택\n- 순서는 실행 우선순위 (앞에 있을수록 먼저 실행)\n- reasoning은 상세하고 논리적으로 작성\n- coordination 필드로 실행 방식 명시\n- 복합 질문의 경우 의존성 관계 명확히 표시'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 16:06:11,358 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 16:06:11,358 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 16:06:11,358 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 16:06:11,358 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 16:06:11,359 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 16:06:11,359 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 16:06:16,530 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 07:06:16 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'4965'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'4988'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9919'), (b'x-ratelimit-remaining-tokens', b'197885'), (b'x-ratelimit-reset-requests', b'11m32.338s'), (b'x-ratelimit-reset-tokens', b'634ms'), (b'x-request-id', b'req_5dafc7431bf444f89601745674d182fa'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b132cd9d13091-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 16:06:16,530 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 16:06:16,531 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 16:06:16,547 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 16:06:16,547 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 16:06:16,547 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 16:06:16,547 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 07:06:16 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '4965', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '4988', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9919', 'x-ratelimit-remaining-tokens': '197885', 'x-ratelimit-reset-requests': '11m32.338s', 'x-ratelimit-reset-tokens': '634ms', 'x-request-id': 'req_5dafc7431bf444f89601745674d182fa', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b132cd9d13091-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 16:06:16,547 - openai._base_client - DEBUG - request_id: req_5dafc7431bf444f89601745674d182fa
2025-10-05 16:06:16,547 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: agent_selection | Model: gpt-4o-mini-2024-07-18 | Tokens: 2566 (prompt: 2370, completion: 196)
2025-10-05 16:06:16,547 - app.service_agent.cognitive_agents.planning_agent - INFO - LLM agent selection reasoning: 1단계: 대출 가능액 산정에는 LTV와 DTI 규제를 확인해야 하므로 법률 정보 검색이 필요하고, 대출 가능액 계산을 위해 데이터 분석이 필요합니다. 2단계: 대출 상담은 검색과 분석이 결합된 중간 복잡도 작업입니다. 3단계: LTV와 DTI 정보를 검색한 후, 이를 바탕으로 대출 가능액을 분석해야 하므로 순차적 의존성이 있습니다. 4단계: 단순 검색만으로는 대출 가능액 산정이 불가능하므로, search_team과 analysis_team이 모두 필요합니다.
2025-10-05 16:06:16,547 - app.service_agent.cognitive_agents.planning_agent - INFO - ✅ Primary LLM selected agents: ['search_team', 'analysis_team']
2025-10-05 16:06:16,547 - app.service_agent.cognitive_agents.planning_agent - INFO - Intent analyzed: 대출상담 (confidence: 0.85)
2025-10-05 16:06:16,547 - app.service_agent.cognitive_agents.query_decomposer - INFO - Decomposing query: LTV, DTI 규제 확인하고 대출 가능액 산정해줘...
2025-10-05 16:06:16,548 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-cf06fb2b-b23c-4eba-b7f6-17dc73752e74', 'json_data': {'messages': [{'role': 'system', 'content': '당신은 부동산 AI 시스템의 질문 분해 전문가입니다.\n복잡한 사용자 질문을 독립적으로 처리 가능한 작업 단위로 분해하는 것이 목표입니다.\n\n## Chain-of-Thought 분해 프로세스:\n\n### 1단계: 복합 질문 여부 판단\n- 단순 정보 조회만 필요한가? → is_compound: false\n- **다음 중 하나라도 해당하면 is_compound: true**:\n  * "그리고", "그 다음", "한 후" 같은 연결어로 여러 요청 연결\n  * 명시적으로 2개 이상의 작업 요청 (예: "시세 확인하고 대출 계산해줘")\n  * 상황 설명 + 해결책 요청 (예: "3억→10억 올려달래. 어떻게 해야 해?")\n  * 해결책을 위해 여러 단계 처리 필요 (검색 → 분석 → 제안)\n\n### 2단계: 필요 작업 식별\n- 정보 수집이 필요한가? → search 작업\n- 평가/판단이 필요한가? → analysis 작업\n- 문서 생성이 필요한가? → generation 작업\n- **해결책 요청**인가? → search + analysis (최소 2개)\n\n### 3단계: 작업 순서 결정\n- 독립적 작업: 병렬 가능\n- 이전 결과 필요: 순차 실행 (depends_on 설정)\n\n## 중요 원칙:\n1. 각 작업은 하나의 명확한 목표를 가져야 합니다\n2. 작업 간 의존성을 명확히 파악해야 합니다\n3. 병렬 처리 가능한 작업은 구분해야 합니다\n4. **주의**: "어떻게 해야", "방법 알려줘" 같은 해결책 요청은 복합 질문!\n\n## 작업 유형 (type):\n- search: 정보 검색 (법률, 시세, 대출 정보 등)\n- analysis: 데이터 분석 (리스크 평가, 시장 분석 등)\n- generation: 문서 생성 (계약서 작성 등)\n- review: 검토/평가 (계약서 검토, 조건 확인 등)\n- calculation: 계산/산출 (대출 한도, 세금 등)\n- comparison: 비교 분석 (여러 옵션 비교)\n\n## 담당 팀 (agent):\n- search_team: 법률, 시세, 대출 정보 검색\n- analysis_team: 데이터 분석, 리스크 평가, 계산\n- document_team: 문서 생성, 계약서 작성\n\n## 학습 예시:\n\n### 예시 1: 복합 질문 (순차적)\n질문: "강남구 아파트 시세 확인하고 대출 가능 금액 계산해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "강남구 아파트 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "대출 가능 금액 계산",\n            "type": "calculation",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "required_data": {"price": "task_0.result.price"},\n            "estimated_time": 15\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "시세 정보가 있어야 대출 금액 계산이 가능하므로 순차 실행"\n}\n```\n\n### 예시 2: 복합 질문 (병렬 가능)\n질문: "이 지역 전세 시세와 매매 시세 모두 알려주고 비교 분석해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "전세 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "매매 시세 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "전세/매매 시세 비교 분석",\n            "type": "comparison",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0", "task_1"],\n            "required_data": {\n                "lease_price": "task_0.result",\n                "sale_price": "task_1.result"\n            },\n            "estimated_time": 25\n        }\n    ],\n    "execution_mode": "mixed",\n    "parallel_groups": [["task_0", "task_1"], ["task_2"]],\n    "reasoning": "시세 조회는 독립적이므로 병렬 처리, 비교는 두 결과 필요"\n}\n```\n\n### 예시 3: 복합 질문 (3단계 이상)\n질문: "이 계약서 검토해서 위험한 부분 찾고 수정안 만들어서 최종 계약서 작성해줘"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "계약서 내용 전체 검토",\n            "type": "review",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 30\n        },\n        {\n            "description": "위험 요소 및 문제점 분석",\n            "type": "analysis",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "estimated_time": 25\n        },\n        {\n            "description": "수정안 제안 생성",\n            "type": "generation",\n            "agent": "document_team",\n            "priority": 3,\n            "depends_on": ["task_1"],\n            "estimated_time": 20\n        },\n        {\n            "description": "최종 계약서 작성",\n            "type": "generation",\n            "agent": "document_team",\n            "priority": 4,\n            "depends_on": ["task_2"],\n            "estimated_time": 30\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "각 단계가 이전 결과에 의존하므로 순차 실행 필요"\n}\n```\n\n### 예시 4: 단순 질문 (분해 불필요)\n질문: "전세금 인상률 상한이 얼마야?"\n분해:\n```json\n{\n    "is_compound": false,\n    "sub_tasks": [\n        {\n            "description": "전세금 인상률 상한 법률 정보 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 15\n        }\n    ],\n    "execution_mode": "sequential",\n    "reasoning": "단일 정보 조회 요청으로 분해 불필요"\n}\n```\n\n### 예시 5: 조건부 실행\n질문: "이 물건 시세 확인하고 적정가면 대출 상담도 받고 싶어"\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "물건 시세 조회 및 적정성 평가",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 25\n        },\n        {\n            "description": "대출 상담 정보 제공",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "optional": true,\n            "context": {"condition": "if_reasonable_price"},\n            "estimated_time": 20\n        }\n    ],\n    "execution_mode": "conditional",\n    "reasoning": "시세 확인 결과에 따라 대출 상담 진행 여부 결정"\n}\n```\n\n### 예시 6: 상황 설명 + 해결책 요청 (핵심 패턴!)\n질문: "집주인이 전세금 3억을 10억으로 올려달래. 법적으로 어떻게 해야 해?"\n**CoT 분석**:\n1. 질문 분석: 상황 설명 + 해결책 요청\n2. 연결어: 없지만, "어떻게 해야" = 해결책 요청\n3. 의존성: 법률 확인 → 상황 분석 → 대응 방안\n4. 복합 여부: **YES** (해결책을 위해 여러 단계 필요)\n\n분해:\n```json\n{\n    "is_compound": true,\n    "sub_tasks": [\n        {\n            "description": "전세금 인상 한도 관련 법률 조회",\n            "type": "search",\n            "agent": "search_team",\n            "priority": 1,\n            "depends_on": [],\n            "estimated_time": 20\n        },\n        {\n            "description": "3억→10억 인상의 법적 타당성 및 적정성 분석",\n            "type": "analysis",\n            "agent": "analysis_team",\n            "priority": 2,\n            "depends_on": ["task_0"],\n            "required_data": {"legal_limit": "task_0.result", "current": 300000000, "requested": 1000000000},\n            "estimated_time": 25\n        },\n        {\n            "description": "구체적 대응 방안 및 해결책 제시",\n            "type": "analysis",\n            "agent": "analysis_team",\n            "priority": 3,\n            "depends_on": ["task_1"],\n            "estimated_time": 20\n        }\n    ],\n    "execution_mode": "sequential",\n    "confidence": 0.95,\n    "reasoning": "상황 설명+해결책 요청 패턴. \'어떻게 해야\'는 단순 정보 조회가 아닌 종합 해결책 필요. 법률 조회 → 상황 분석 → 해결책 제시 3단계 순차 처리"\n}\n```\n\n## Chain-of-Thought 프로세스:\n\n1. **질문 분석**: 어떤 정보나 작업을 요구하는가?\n2. **연결어 확인**: "그리고", "또한", "해서", "한 후" 등이 있는가?\n3. **의존성 파악**: 어떤 작업이 다른 작업의 결과를 필요로 하는가?\n4. **병렬성 판단**: 독립적으로 실행 가능한 작업이 있는가?\n5. **최적화**: 불필요한 분해는 없는가?\n\n## 응답 형식 (JSON):\n\n{\n    "is_compound": true/false,\n    "sub_tasks": [\n        {\n            "description": "작업 설명",\n            "type": "작업 유형",\n            "agent": "담당 팀",\n            "priority": 우선순위 (1이 가장 높음),\n            "depends_on": ["선행 작업 ID 리스트"],\n            "required_data": {"필요한 데이터 매핑"},\n            "estimated_time": 예상 소요 시간(초),\n            "optional": true/false,\n            "context": {"추가 컨텍스트"}\n        }\n    ],\n    "execution_mode": "sequential/parallel/mixed/conditional",\n    "parallel_groups": [["병렬 실행 가능한 작업 ID 그룹"]],\n    "confidence": 0.0-1.0,\n    "reasoning": "분해 결정의 이유와 근거"\n}\n\n## 분해 가이드라인:\n\n1. **분해가 필요한 경우**:\n   - 여러 종류의 정보를 요청하는 경우\n   - 순차적 처리가 필요한 경우 (A의 결과로 B 수행)\n   - 서로 다른 팀의 전문성이 필요한 경우\n\n2. **분해가 불필요한 경우**:\n   - 단일 정보 조회\n   - 단순한 질문-답변\n   - 하나의 팀에서 완전히 처리 가능한 경우\n\n3. **병렬 처리 기준**:\n   - 서로 독립적인 정보 조회\n   - 의존성이 없는 분석 작업\n   - 동시에 진행해도 충돌하지 않는 작업\n\n4. **우선순위 설정**:\n   - 의존성이 없는 작업: priority 1\n   - 1차 의존 작업: priority 2\n   - 2차 의존 작업: priority 3\n   - 이런 식으로 증가\n\n현재 의도: 대출상담\n추출된 엔티티: {\'loan_type\': \'주택담보대출\', \'action_verbs\': [\'확인\', \'산정\']}\n\n분석할 질문: LTV, DTI 규제 확인하고 대출 가능액 산정해줘'}], 'model': 'gpt-4o-mini', 'max_tokens': 1000, 'response_format': {'type': 'json_object'}, 'temperature': 0.1}}
2025-10-05 16:06:16,548 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-10-05 16:06:16,549 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-10-05 16:06:16,549 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-10-05 16:06:16,549 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-10-05 16:06:16,549 - httpcore.http11 - DEBUG - send_request_body.complete
2025-10-05 16:06:16,549 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-10-05 16:06:20,995 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 05 Oct 2025 07:06:20 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'playdata-7nkoem'), (b'openai-processing-ms', b'4229'), (b'openai-project', b'proj_abLTL5Sb9ppJMtbcqHB1OyI8'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'4265'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9919'), (b'x-ratelimit-remaining-tokens', b'197318'), (b'x-ratelimit-reset-requests', b'11m35.787s'), (b'x-ratelimit-reset-tokens', b'804ms'), (b'x-request-id', b'req_3297ec66eb184887810d448eb3469a9f'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'989b134d49733091-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-10-05 16:06:20,995 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-10-05 16:06:20,995 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-10-05 16:06:21,006 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-10-05 16:06:21,007 - httpcore.http11 - DEBUG - response_closed.started
2025-10-05 16:06:21,007 - httpcore.http11 - DEBUG - response_closed.complete
2025-10-05 16:06:21,007 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sun, 05 Oct 2025 07:06:20 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'playdata-7nkoem', 'openai-processing-ms': '4229', 'openai-project': 'proj_abLTL5Sb9ppJMtbcqHB1OyI8', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '4265', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9919', 'x-ratelimit-remaining-tokens': '197318', 'x-ratelimit-reset-requests': '11m35.787s', 'x-ratelimit-reset-tokens': '804ms', 'x-request-id': 'req_3297ec66eb184887810d448eb3469a9f', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '989b134d49733091-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-10-05 16:06:21,007 - openai._base_client - DEBUG - request_id: req_3297ec66eb184887810d448eb3469a9f
2025-10-05 16:06:21,007 - app.service_agent.llm_manager.llm_service - INFO - LLM Call: query_decomposition | Model: gpt-4o-mini-2024-07-18 | Tokens: 2997 (prompt: 2720, completion: 277)
2025-10-05 16:06:21,007 - app.service_agent.cognitive_agents.query_decomposer - INFO - Successfully decomposed into 3 tasks
2025-10-05 16:06:21,007 - app.service_agent.cognitive_agents.planning_agent - INFO - Query decomposed into 3 tasks
2025-10-05 16:06:21,007 - app.service_agent.cognitive_agents.planning_agent - WARNING - Plan validation errors: ["Agent 'search_team' not found in registry", "Agent 'search_team' not found in registry", "Agent 'analysis_team' depends on missing 'task_0'", "Agent 'analysis_team' depends on missing 'task_1'", "Agent 'analysis_team' not found in registry"]
2025-10-05 16:06:21,007 - app.service_agent.cognitive_agents.planning_agent - INFO - Optimizing execution plan
2025-10-05 16:06:21,007 - app.service_agent.cognitive_agents.planning_agent - INFO - Comprehensive plan created: Intent: 대출상담 (confidence: 0.85) | Strategy: sequential | Agents: search_team, search_team, analysis_team | Estimated time: 35.0s
2025-10-05 16:06:21,007 - __main__ - INFO -   전략: sequential
2025-10-05 16:06:21,007 - __main__ - INFO -   단계 수: 3
2025-10-05 16:06:21,007 - __main__ - INFO - 
✓ 테스트 성공 (소요시간: 29.95초)
2025-10-05 16:06:21,011 - __main__ - INFO - 
결과 저장: C:\kdy\Projects\holmesnyangz\beta_v001\backend\app\service_agent\reports\phase1_test_results.json
2025-10-05 16:06:21,015 - __main__ - INFO - 
결과 저장: C:\kdy\Projects\holmesnyangz\beta_v001\backend\app\service_agent\reports\phase1_test_results.json
2025-10-05 16:06:21,015 - __main__ - INFO - 

================================================================================
2025-10-05 16:06:21,015 - __main__ - INFO - 테스트 결과 요약
2025-10-05 16:06:21,015 - __main__ - INFO - ================================================================================
2025-10-05 16:06:21,015 - __main__ - INFO - 
[단일 질문 테스트]
2025-10-05 16:06:21,015 - __main__ - INFO -   성공: 20/20
2025-10-05 16:06:21,015 - __main__ - INFO -   검증 통과: 0/20
2025-10-05 16:06:21,015 - __main__ - INFO - 
[복합 질문 테스트]
2025-10-05 16:06:21,015 - __main__ - INFO -   성공: 20/20
2025-10-05 16:06:21,015 - __main__ - INFO -   검증 통과: 0/20
2025-10-05 16:06:21,015 - __main__ - INFO - 
평균 실행 시간: 17.50초
2025-10-05 16:06:21,015 - __main__ - INFO - 
결과 파일: C:\kdy\Projects\holmesnyangz\beta_v001\backend\app\service_agent\reports\phase1_test_results.json
2025-10-05 16:06:21,015 - __main__ - INFO - 로그 파일: C:\kdy\Projects\holmesnyangz\beta_v001\backend\app\service_agent\reports\phase1_test_log.txt
2025-10-05 16:06:21,015 - __main__ - INFO - 
================================================================================
